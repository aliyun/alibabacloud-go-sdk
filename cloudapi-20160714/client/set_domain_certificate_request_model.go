// This file is auto-generated, don't edit it. Thanks.
package client

import (
	"github.com/alibabacloud-go/tea/dara"
)

type iSetDomainCertificateRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCaCertificateBody(v string) *SetDomainCertificateRequest
	GetCaCertificateBody() *string
	SetCertificateBody(v string) *SetDomainCertificateRequest
	GetCertificateBody() *string
	SetCertificateName(v string) *SetDomainCertificateRequest
	GetCertificateName() *string
	SetCertificatePrivateKey(v string) *SetDomainCertificateRequest
	GetCertificatePrivateKey() *string
	SetClientCertSDnPassThrough(v bool) *SetDomainCertificateRequest
	GetClientCertSDnPassThrough() *bool
	SetDomainName(v string) *SetDomainCertificateRequest
	GetDomainName() *string
	SetGroupId(v string) *SetDomainCertificateRequest
	GetGroupId() *string
	SetSecurityToken(v string) *SetDomainCertificateRequest
	GetSecurityToken() *string
	SetSslOcspCacheEnable(v bool) *SetDomainCertificateRequest
	GetSslOcspCacheEnable() *bool
	SetSslOcspEnable(v bool) *SetDomainCertificateRequest
	GetSslOcspEnable() *bool
	SetSslVerifyDepth(v string) *SetDomainCertificateRequest
	GetSslVerifyDepth() *string
}

type SetDomainCertificateRequest struct {
	// The content of the CA certificate.
	//
	// example:
	//
	// Content of the CA certificate
	CaCertificateBody *string `json:"CaCertificateBody,omitempty" xml:"CaCertificateBody,omitempty"`
	// The content of the certificate.
	//
	// example:
	//
	// For more information, see the following request examples
	CertificateBody *string `json:"CertificateBody,omitempty" xml:"CertificateBody,omitempty"`
	// The name of the SSL certificate.
	//
	// This parameter is required.
	//
	// example:
	//
	// test_cert
	CertificateName *string `json:"CertificateName,omitempty" xml:"CertificateName,omitempty"`
	// The private key of the SSL certificate.
	//
	// example:
	//
	// For more information, see the following request examples
	CertificatePrivateKey *string `json:"CertificatePrivateKey,omitempty" xml:"CertificatePrivateKey,omitempty"`
	// If pass ssl_client_s_dn of the cert to backend header \\"X-Client-S-Dn\\".
	//
	// example:
	//
	// True
	ClientCertSDnPassThrough *bool `json:"ClientCertSDnPassThrough,omitempty" xml:"ClientCertSDnPassThrough,omitempty"`
	// The custom domain name.
	//
	// This parameter is required.
	//
	// example:
	//
	// api.demo.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 927d50c0f2e54b359919923d908bb015
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// If enable ssl OCSP cache.
	//
	// example:
	//
	// True
	SslOcspCacheEnable *bool `json:"SslOcspCacheEnable,omitempty" xml:"SslOcspCacheEnable,omitempty"`
	// If enable ssl OCSP.
	//
	// example:
	//
	// True
	SslOcspEnable *bool `json:"SslOcspEnable,omitempty" xml:"SslOcspEnable,omitempty"`
	// The certificate verification depth.
	//
	// example:
	//
	// 2
	SslVerifyDepth *string `json:"SslVerifyDepth,omitempty" xml:"SslVerifyDepth,omitempty"`
}

func (s SetDomainCertificateRequest) String() string {
	return dara.Prettify(s)
}

func (s SetDomainCertificateRequest) GoString() string {
	return s.String()
}

func (s *SetDomainCertificateRequest) GetCaCertificateBody() *string {
	return s.CaCertificateBody
}

func (s *SetDomainCertificateRequest) GetCertificateBody() *string {
	return s.CertificateBody
}

func (s *SetDomainCertificateRequest) GetCertificateName() *string {
	return s.CertificateName
}

func (s *SetDomainCertificateRequest) GetCertificatePrivateKey() *string {
	return s.CertificatePrivateKey
}

func (s *SetDomainCertificateRequest) GetClientCertSDnPassThrough() *bool {
	return s.ClientCertSDnPassThrough
}

func (s *SetDomainCertificateRequest) GetDomainName() *string {
	return s.DomainName
}

func (s *SetDomainCertificateRequest) GetGroupId() *string {
	return s.GroupId
}

func (s *SetDomainCertificateRequest) GetSecurityToken() *string {
	return s.SecurityToken
}

func (s *SetDomainCertificateRequest) GetSslOcspCacheEnable() *bool {
	return s.SslOcspCacheEnable
}

func (s *SetDomainCertificateRequest) GetSslOcspEnable() *bool {
	return s.SslOcspEnable
}

func (s *SetDomainCertificateRequest) GetSslVerifyDepth() *string {
	return s.SslVerifyDepth
}

func (s *SetDomainCertificateRequest) SetCaCertificateBody(v string) *SetDomainCertificateRequest {
	s.CaCertificateBody = &v
	return s
}

func (s *SetDomainCertificateRequest) SetCertificateBody(v string) *SetDomainCertificateRequest {
	s.CertificateBody = &v
	return s
}

func (s *SetDomainCertificateRequest) SetCertificateName(v string) *SetDomainCertificateRequest {
	s.CertificateName = &v
	return s
}

func (s *SetDomainCertificateRequest) SetCertificatePrivateKey(v string) *SetDomainCertificateRequest {
	s.CertificatePrivateKey = &v
	return s
}

func (s *SetDomainCertificateRequest) SetClientCertSDnPassThrough(v bool) *SetDomainCertificateRequest {
	s.ClientCertSDnPassThrough = &v
	return s
}

func (s *SetDomainCertificateRequest) SetDomainName(v string) *SetDomainCertificateRequest {
	s.DomainName = &v
	return s
}

func (s *SetDomainCertificateRequest) SetGroupId(v string) *SetDomainCertificateRequest {
	s.GroupId = &v
	return s
}

func (s *SetDomainCertificateRequest) SetSecurityToken(v string) *SetDomainCertificateRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetDomainCertificateRequest) SetSslOcspCacheEnable(v bool) *SetDomainCertificateRequest {
	s.SslOcspCacheEnable = &v
	return s
}

func (s *SetDomainCertificateRequest) SetSslOcspEnable(v bool) *SetDomainCertificateRequest {
	s.SslOcspEnable = &v
	return s
}

func (s *SetDomainCertificateRequest) SetSslVerifyDepth(v string) *SetDomainCertificateRequest {
	s.SslVerifyDepth = &v
	return s
}

func (s *SetDomainCertificateRequest) Validate() error {
	return dara.Validate(s)
}
