// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AbolishApiRequest struct {
	// The ID of the specified API.
	//
	// This parameter is required.
	//
	// example:
	//
	// d6f679aeb3be4b91b3688e887ca1fe16
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 123
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s AbolishApiRequest) String() string {
	return tea.Prettify(s)
}

func (s AbolishApiRequest) GoString() string {
	return s.String()
}

func (s *AbolishApiRequest) SetApiId(v string) *AbolishApiRequest {
	s.ApiId = &v
	return s
}

func (s *AbolishApiRequest) SetGroupId(v string) *AbolishApiRequest {
	s.GroupId = &v
	return s
}

func (s *AbolishApiRequest) SetSecurityToken(v string) *AbolishApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *AbolishApiRequest) SetStageName(v string) *AbolishApiRequest {
	s.StageName = &v
	return s
}

type AbolishApiResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ016
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AbolishApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AbolishApiResponseBody) GoString() string {
	return s.String()
}

func (s *AbolishApiResponseBody) SetRequestId(v string) *AbolishApiResponseBody {
	s.RequestId = &v
	return s
}

type AbolishApiResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AbolishApiResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AbolishApiResponse) String() string {
	return tea.Prettify(s)
}

func (s AbolishApiResponse) GoString() string {
	return s.String()
}

func (s *AbolishApiResponse) SetHeaders(v map[string]*string) *AbolishApiResponse {
	s.Headers = v
	return s
}

func (s *AbolishApiResponse) SetStatusCode(v int32) *AbolishApiResponse {
	s.StatusCode = &v
	return s
}

func (s *AbolishApiResponse) SetBody(v *AbolishApiResponseBody) *AbolishApiResponse {
	s.Body = v
	return s
}

type AddAccessControlListEntryRequest struct {
	// The ACL settings.
	//
	// 	- entry: the entries that you want to add to the ACL. You can add CIDR blocks. Separate multiple CIDR blocks with commas (,).
	//
	// 	- comment: the description of the ACL.
	//
	// > You can add at most 50 IP addresses or CIDR blocks to an ACL in each call. If the IP address or CIDR block that you want to add to an ACL already exists, the IP address or CIDR block is not added. The entries that you add must be CIDR blocks.
	//
	// example:
	//
	// [{\\"entry\\": \\"192.168.1.0/24\\", \\"comment\\": \\"test\\"}]
	AclEntrys *string `json:"AclEntrys,omitempty" xml:"AclEntrys,omitempty"`
	// The ID of the access control list (ACL).
	//
	// This parameter is required.
	//
	// example:
	//
	// acl-bp1ohqkonqybecf4llbrc
	AclId         *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s AddAccessControlListEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAccessControlListEntryRequest) GoString() string {
	return s.String()
}

func (s *AddAccessControlListEntryRequest) SetAclEntrys(v string) *AddAccessControlListEntryRequest {
	s.AclEntrys = &v
	return s
}

func (s *AddAccessControlListEntryRequest) SetAclId(v string) *AddAccessControlListEntryRequest {
	s.AclId = &v
	return s
}

func (s *AddAccessControlListEntryRequest) SetSecurityToken(v string) *AddAccessControlListEntryRequest {
	s.SecurityToken = &v
	return s
}

type AddAccessControlListEntryResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEB6EC62-B6C7-5082-A45A-45A204724AC2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddAccessControlListEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddAccessControlListEntryResponseBody) GoString() string {
	return s.String()
}

func (s *AddAccessControlListEntryResponseBody) SetRequestId(v string) *AddAccessControlListEntryResponseBody {
	s.RequestId = &v
	return s
}

type AddAccessControlListEntryResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddAccessControlListEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddAccessControlListEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAccessControlListEntryResponse) GoString() string {
	return s.String()
}

func (s *AddAccessControlListEntryResponse) SetHeaders(v map[string]*string) *AddAccessControlListEntryResponse {
	s.Headers = v
	return s
}

func (s *AddAccessControlListEntryResponse) SetStatusCode(v int32) *AddAccessControlListEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *AddAccessControlListEntryResponse) SetBody(v *AddAccessControlListEntryResponseBody) *AddAccessControlListEntryResponse {
	s.Body = v
	return s
}

type AddIpControlPolicyItemRequest struct {
	// The restriction policy on app IDs for a specific policy. You can restrict app IDs only for whitelists. The IpControlType values of whitelists are ALLOW.
	//
	// 	- You can add only one app ID restriction policy at a time.
	//
	// 	- If this parameter is empty, no restriction is imposed on the app IDs.
	//
	// 	- If this parameter is not empty, there is restriction not only on IP addresses, but also on apps.
	//
	// 	- Please note that if this parameter is not empty and the security authentication method of the API is No Authentication, all API calls are restricted.
	//
	// 	- If this parameter is not empty for a blacklist, API Gateway automatically skips this parameter and sets only restriction on IP addresses. The IpControlType value of a blacklist is REFUSE.
	//
	// example:
	//
	// 1111111
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The IP addresses or CIDR blocks involved in the policy. Separate multiple IP addresses or CIDR blocks with semicolons (;). You can specify a maximum of 10 IP addresses or CIDR blocks.
	//
	// This parameter is required.
	//
	// example:
	//
	// 113.125.1.101;101.11.1.1
	CidrIp *string `json:"CidrIp,omitempty" xml:"CidrIp,omitempty"`
	// The ID of the ACL. The ID is unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7ea91319a34d48a09b5c9c871d9768b1
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// The security token included in the WebSocket request header. The system uses this token to authenticate the request.
	//
	// example:
	//
	// 4223a10e-eed3-46a6-8b7c-23003f488153
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s AddIpControlPolicyItemRequest) String() string {
	return tea.Prettify(s)
}

func (s AddIpControlPolicyItemRequest) GoString() string {
	return s.String()
}

func (s *AddIpControlPolicyItemRequest) SetAppId(v string) *AddIpControlPolicyItemRequest {
	s.AppId = &v
	return s
}

func (s *AddIpControlPolicyItemRequest) SetCidrIp(v string) *AddIpControlPolicyItemRequest {
	s.CidrIp = &v
	return s
}

func (s *AddIpControlPolicyItemRequest) SetIpControlId(v string) *AddIpControlPolicyItemRequest {
	s.IpControlId = &v
	return s
}

func (s *AddIpControlPolicyItemRequest) SetSecurityToken(v string) *AddIpControlPolicyItemRequest {
	s.SecurityToken = &v
	return s
}

type AddIpControlPolicyItemResponseBody struct {
	// The ID of the policy. The ID is unique.
	//
	// example:
	//
	// P151617000829241
	PolicyItemId *string `json:"PolicyItemId,omitempty" xml:"PolicyItemId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddIpControlPolicyItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddIpControlPolicyItemResponseBody) GoString() string {
	return s.String()
}

func (s *AddIpControlPolicyItemResponseBody) SetPolicyItemId(v string) *AddIpControlPolicyItemResponseBody {
	s.PolicyItemId = &v
	return s
}

func (s *AddIpControlPolicyItemResponseBody) SetRequestId(v string) *AddIpControlPolicyItemResponseBody {
	s.RequestId = &v
	return s
}

type AddIpControlPolicyItemResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddIpControlPolicyItemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddIpControlPolicyItemResponse) String() string {
	return tea.Prettify(s)
}

func (s AddIpControlPolicyItemResponse) GoString() string {
	return s.String()
}

func (s *AddIpControlPolicyItemResponse) SetHeaders(v map[string]*string) *AddIpControlPolicyItemResponse {
	s.Headers = v
	return s
}

func (s *AddIpControlPolicyItemResponse) SetStatusCode(v int32) *AddIpControlPolicyItemResponse {
	s.StatusCode = &v
	return s
}

func (s *AddIpControlPolicyItemResponse) SetBody(v *AddIpControlPolicyItemResponseBody) *AddIpControlPolicyItemResponse {
	s.Body = v
	return s
}

type AddTrafficSpecialControlRequest struct {
	// The security token included in the WebSocket request header. The system uses this token to authenticate the request.
	//
	// example:
	//
	// fa876ffb-caab-4f0a-93b3-3409f2fa5199
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the app or Alibaba Cloud account. Specify this parameter based on the value of the **SpecialType*	- parameter. You can view your account ID on the [Account Management](https://account.console.aliyun.com/?spm=a2c4g.11186623.2.15.3f053654YpMPwo#/secure) page.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3382463
	SpecialKey *string `json:"SpecialKey,omitempty" xml:"SpecialKey,omitempty"`
	// The type of the special throttling policy. Valid values:
	//
	// 	- **APP**
	//
	// 	- **USER**
	//
	// This parameter is required.
	//
	// example:
	//
	// APP
	SpecialType *string `json:"SpecialType,omitempty" xml:"SpecialType,omitempty"`
	// The ID of the specified throttling policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// tf123456
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
	// The special throttling value.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	TrafficValue *int32 `json:"TrafficValue,omitempty" xml:"TrafficValue,omitempty"`
}

func (s AddTrafficSpecialControlRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTrafficSpecialControlRequest) GoString() string {
	return s.String()
}

func (s *AddTrafficSpecialControlRequest) SetSecurityToken(v string) *AddTrafficSpecialControlRequest {
	s.SecurityToken = &v
	return s
}

func (s *AddTrafficSpecialControlRequest) SetSpecialKey(v string) *AddTrafficSpecialControlRequest {
	s.SpecialKey = &v
	return s
}

func (s *AddTrafficSpecialControlRequest) SetSpecialType(v string) *AddTrafficSpecialControlRequest {
	s.SpecialType = &v
	return s
}

func (s *AddTrafficSpecialControlRequest) SetTrafficControlId(v string) *AddTrafficSpecialControlRequest {
	s.TrafficControlId = &v
	return s
}

func (s *AddTrafficSpecialControlRequest) SetTrafficValue(v int32) *AddTrafficSpecialControlRequest {
	s.TrafficValue = &v
	return s
}

type AddTrafficSpecialControlResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddTrafficSpecialControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTrafficSpecialControlResponseBody) GoString() string {
	return s.String()
}

func (s *AddTrafficSpecialControlResponseBody) SetRequestId(v string) *AddTrafficSpecialControlResponseBody {
	s.RequestId = &v
	return s
}

type AddTrafficSpecialControlResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddTrafficSpecialControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddTrafficSpecialControlResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTrafficSpecialControlResponse) GoString() string {
	return s.String()
}

func (s *AddTrafficSpecialControlResponse) SetHeaders(v map[string]*string) *AddTrafficSpecialControlResponse {
	s.Headers = v
	return s
}

func (s *AddTrafficSpecialControlResponse) SetStatusCode(v int32) *AddTrafficSpecialControlResponse {
	s.StatusCode = &v
	return s
}

func (s *AddTrafficSpecialControlResponse) SetBody(v *AddTrafficSpecialControlResponseBody) *AddTrafficSpecialControlResponse {
	s.Body = v
	return s
}

type AttachApiProductRequest struct {
	// The ID of the API product.
	//
	// This parameter is required.
	//
	// example:
	//
	// 117b7a64a8b3f064eaa4a47ac62aac5e
	ApiProductId *string `json:"ApiProductId,omitempty" xml:"ApiProductId,omitempty"`
	// The APIs to be attached.
	//
	// This parameter is required.
	Apis          []*AttachApiProductRequestApis `json:"Apis,omitempty" xml:"Apis,omitempty" type:"Repeated"`
	SecurityToken *string                        `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s AttachApiProductRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachApiProductRequest) GoString() string {
	return s.String()
}

func (s *AttachApiProductRequest) SetApiProductId(v string) *AttachApiProductRequest {
	s.ApiProductId = &v
	return s
}

func (s *AttachApiProductRequest) SetApis(v []*AttachApiProductRequestApis) *AttachApiProductRequest {
	s.Apis = v
	return s
}

func (s *AttachApiProductRequest) SetSecurityToken(v string) *AttachApiProductRequest {
	s.SecurityToken = &v
	return s
}

type AttachApiProductRequestApis struct {
	// The API ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 551877242a4b4f3a84a56b7c3570e4a7
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The environment. Valid values:
	//
	// 	- **RELEASE**: the production environment
	//
	// 	- **PRE**: the staging environment
	//
	// 	- **TEST**: the test environment
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s AttachApiProductRequestApis) String() string {
	return tea.Prettify(s)
}

func (s AttachApiProductRequestApis) GoString() string {
	return s.String()
}

func (s *AttachApiProductRequestApis) SetApiId(v string) *AttachApiProductRequestApis {
	s.ApiId = &v
	return s
}

func (s *AttachApiProductRequestApis) SetStageName(v string) *AttachApiProductRequestApis {
	s.StageName = &v
	return s
}

type AttachApiProductResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// BA20890E-75C7-41BC-9C8B-73276B58F550
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AttachApiProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachApiProductResponseBody) GoString() string {
	return s.String()
}

func (s *AttachApiProductResponseBody) SetRequestId(v string) *AttachApiProductResponseBody {
	s.RequestId = &v
	return s
}

type AttachApiProductResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachApiProductResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachApiProductResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachApiProductResponse) GoString() string {
	return s.String()
}

func (s *AttachApiProductResponse) SetHeaders(v map[string]*string) *AttachApiProductResponse {
	s.Headers = v
	return s
}

func (s *AttachApiProductResponse) SetStatusCode(v int32) *AttachApiProductResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachApiProductResponse) SetBody(v *AttachApiProductResponseBody) *AttachApiProductResponse {
	s.Body = v
	return s
}

type AttachPluginRequest struct {
	// The number of the API to be bound.
	//
	// example:
	//
	// 8afff6c8c4c6447abb035812e4d66b65
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The number of the API to be operated. Separate multiple numbers with commas (,). A maximum of 100 numbers can be entered.
	//
	// example:
	//
	// xxx
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The ID of the API group that contains the API to which the plug-in is to be bound.
	//
	// example:
	//
	// 285bb759342649a1b70c2093a772e087
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the plug-in to be bound.
	//
	// This parameter is required.
	//
	// example:
	//
	// 9a3f1a5279434f2ba74ccd91c295af9f
	PluginId      *string `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **PRE: the pre-release environment**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s AttachPluginRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachPluginRequest) GoString() string {
	return s.String()
}

func (s *AttachPluginRequest) SetApiId(v string) *AttachPluginRequest {
	s.ApiId = &v
	return s
}

func (s *AttachPluginRequest) SetApiIds(v string) *AttachPluginRequest {
	s.ApiIds = &v
	return s
}

func (s *AttachPluginRequest) SetGroupId(v string) *AttachPluginRequest {
	s.GroupId = &v
	return s
}

func (s *AttachPluginRequest) SetPluginId(v string) *AttachPluginRequest {
	s.PluginId = &v
	return s
}

func (s *AttachPluginRequest) SetSecurityToken(v string) *AttachPluginRequest {
	s.SecurityToken = &v
	return s
}

func (s *AttachPluginRequest) SetStageName(v string) *AttachPluginRequest {
	s.StageName = &v
	return s
}

type AttachPluginResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EF924FE4-2EDD-4CD3-89EC-34E4708574E7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AttachPluginResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachPluginResponseBody) GoString() string {
	return s.String()
}

func (s *AttachPluginResponseBody) SetRequestId(v string) *AttachPluginResponseBody {
	s.RequestId = &v
	return s
}

type AttachPluginResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachPluginResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachPluginResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachPluginResponse) GoString() string {
	return s.String()
}

func (s *AttachPluginResponse) SetHeaders(v map[string]*string) *AttachPluginResponse {
	s.Headers = v
	return s
}

func (s *AttachPluginResponse) SetStatusCode(v int32) *AttachPluginResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachPluginResponse) SetBody(v *AttachPluginResponseBody) *AttachPluginResponse {
	s.Body = v
	return s
}

type BatchAbolishApisRequest struct {
	// The APIs that you want to operate.
	//
	// This parameter is required.
	Api           []*BatchAbolishApisRequestApi `json:"Api,omitempty" xml:"Api,omitempty" type:"Repeated"`
	SecurityToken *string                       `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s BatchAbolishApisRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchAbolishApisRequest) GoString() string {
	return s.String()
}

func (s *BatchAbolishApisRequest) SetApi(v []*BatchAbolishApisRequestApi) *BatchAbolishApisRequest {
	s.Api = v
	return s
}

func (s *BatchAbolishApisRequest) SetSecurityToken(v string) *BatchAbolishApisRequest {
	s.SecurityToken = &v
	return s
}

type BatchAbolishApisRequestApi struct {
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// 994f72dcdaf04af0b38022c65fdbd1ac
	ApiUid *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// ced5ab777f7b440398ea70e4470124de
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the environment.
	//
	// example:
	//
	// 979fd16250644d5b82173534f465ac77
	StageId *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	// The name of the environment.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s BatchAbolishApisRequestApi) String() string {
	return tea.Prettify(s)
}

func (s BatchAbolishApisRequestApi) GoString() string {
	return s.String()
}

func (s *BatchAbolishApisRequestApi) SetApiUid(v string) *BatchAbolishApisRequestApi {
	s.ApiUid = &v
	return s
}

func (s *BatchAbolishApisRequestApi) SetGroupId(v string) *BatchAbolishApisRequestApi {
	s.GroupId = &v
	return s
}

func (s *BatchAbolishApisRequestApi) SetStageId(v string) *BatchAbolishApisRequestApi {
	s.StageId = &v
	return s
}

func (s *BatchAbolishApisRequestApi) SetStageName(v string) *BatchAbolishApisRequestApi {
	s.StageName = &v
	return s
}

type BatchAbolishApisResponseBody struct {
	// The ID of the operation.
	//
	// example:
	//
	// f7834d74be4e41aa8e607b0fafae9b33
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// E7FE7172-AA75-5880-B6F7-C00893E9BC06
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchAbolishApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchAbolishApisResponseBody) GoString() string {
	return s.String()
}

func (s *BatchAbolishApisResponseBody) SetOperationId(v string) *BatchAbolishApisResponseBody {
	s.OperationId = &v
	return s
}

func (s *BatchAbolishApisResponseBody) SetRequestId(v string) *BatchAbolishApisResponseBody {
	s.RequestId = &v
	return s
}

type BatchAbolishApisResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchAbolishApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchAbolishApisResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchAbolishApisResponse) GoString() string {
	return s.String()
}

func (s *BatchAbolishApisResponse) SetHeaders(v map[string]*string) *BatchAbolishApisResponse {
	s.Headers = v
	return s
}

func (s *BatchAbolishApisResponse) SetStatusCode(v int32) *BatchAbolishApisResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchAbolishApisResponse) SetBody(v *BatchAbolishApisResponseBody) *BatchAbolishApisResponse {
	s.Body = v
	return s
}

type BatchDeployApisRequest struct {
	// The APIs that you want to publish.
	Api []*BatchDeployApisRequestApi `json:"Api,omitempty" xml:"Api,omitempty" type:"Repeated"`
	// The description.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// 	- PRE: the pre-release environment
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s BatchDeployApisRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchDeployApisRequest) GoString() string {
	return s.String()
}

func (s *BatchDeployApisRequest) SetApi(v []*BatchDeployApisRequestApi) *BatchDeployApisRequest {
	s.Api = v
	return s
}

func (s *BatchDeployApisRequest) SetDescription(v string) *BatchDeployApisRequest {
	s.Description = &v
	return s
}

func (s *BatchDeployApisRequest) SetSecurityToken(v string) *BatchDeployApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *BatchDeployApisRequest) SetStageName(v string) *BatchDeployApisRequest {
	s.StageName = &v
	return s
}

type BatchDeployApisRequestApi struct {
	// The API ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2b35dd68345b472f8051647306a16415
	ApiUid *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	// The API group ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// b4f5c342b8bc4ef88ccda0332402e0fa
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s BatchDeployApisRequestApi) String() string {
	return tea.Prettify(s)
}

func (s BatchDeployApisRequestApi) GoString() string {
	return s.String()
}

func (s *BatchDeployApisRequestApi) SetApiUid(v string) *BatchDeployApisRequestApi {
	s.ApiUid = &v
	return s
}

func (s *BatchDeployApisRequestApi) SetGroupId(v string) *BatchDeployApisRequestApi {
	s.GroupId = &v
	return s
}

type BatchDeployApisResponseBody struct {
	// The ID of the operation.
	//
	// example:
	//
	// 2a322599-8e38-428a-a306-9b21ea2129bf
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// E7FE7172-AA75-5880-B6F7-C00893E9BC06
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchDeployApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchDeployApisResponseBody) GoString() string {
	return s.String()
}

func (s *BatchDeployApisResponseBody) SetOperationId(v string) *BatchDeployApisResponseBody {
	s.OperationId = &v
	return s
}

func (s *BatchDeployApisResponseBody) SetRequestId(v string) *BatchDeployApisResponseBody {
	s.RequestId = &v
	return s
}

type BatchDeployApisResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchDeployApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchDeployApisResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchDeployApisResponse) GoString() string {
	return s.String()
}

func (s *BatchDeployApisResponse) SetHeaders(v map[string]*string) *BatchDeployApisResponse {
	s.Headers = v
	return s
}

func (s *BatchDeployApisResponse) SetStatusCode(v int32) *BatchDeployApisResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchDeployApisResponse) SetBody(v *BatchDeployApisResponseBody) *BatchDeployApisResponse {
	s.Body = v
	return s
}

type CreateAccessControlListRequest struct {
	// The name of the ACL. The name must be 1 to 30 characters in length, and can contain letters, digits, periods (.), hyphens (-), forward slashes (/), and underscores (_). The name must be unique within the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// testAcl
	AclName *string `json:"AclName,omitempty" xml:"AclName,omitempty"`
	// The IP version. Valid values: **ipv4*	- and **ipv6**.
	//
	// example:
	//
	// ipv4
	AddressIPVersion *string `json:"AddressIPVersion,omitempty" xml:"AddressIPVersion,omitempty"`
	SecurityToken    *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s CreateAccessControlListRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAccessControlListRequest) GoString() string {
	return s.String()
}

func (s *CreateAccessControlListRequest) SetAclName(v string) *CreateAccessControlListRequest {
	s.AclName = &v
	return s
}

func (s *CreateAccessControlListRequest) SetAddressIPVersion(v string) *CreateAccessControlListRequest {
	s.AddressIPVersion = &v
	return s
}

func (s *CreateAccessControlListRequest) SetSecurityToken(v string) *CreateAccessControlListRequest {
	s.SecurityToken = &v
	return s
}

type CreateAccessControlListResponseBody struct {
	AclId *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ015
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAccessControlListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAccessControlListResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAccessControlListResponseBody) SetAclId(v string) *CreateAccessControlListResponseBody {
	s.AclId = &v
	return s
}

func (s *CreateAccessControlListResponseBody) SetRequestId(v string) *CreateAccessControlListResponseBody {
	s.RequestId = &v
	return s
}

type CreateAccessControlListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAccessControlListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAccessControlListResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAccessControlListResponse) GoString() string {
	return s.String()
}

func (s *CreateAccessControlListResponse) SetHeaders(v map[string]*string) *CreateAccessControlListResponse {
	s.Headers = v
	return s
}

func (s *CreateAccessControlListResponse) SetStatusCode(v int32) *CreateAccessControlListResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAccessControlListResponse) SetBody(v *CreateAccessControlListResponseBody) *CreateAccessControlListResponse {
	s.Body = v
	return s
}

type CreateApiRequest struct {
	// The type of the two-way communication API.
	//
	// 	- **COMMON**: normal APIs
	//
	// 	- **REGISTER**: registered APIs
	//
	// 	- **UNREGISTER**: unregistered APIs
	//
	// 	- **NOTIFY**: downstream notification APIs
	//
	// example:
	//
	// HmacSHA256
	AllowSignatureMethod *string `json:"AllowSignatureMethod,omitempty" xml:"AllowSignatureMethod,omitempty"`
	// The name of the API that you want to create. The name must be unique within the API group. The name must be 4 to 50 characters in length. It must start with a letter and can contain letters, digits, and underscores (_).
	//
	// This parameter is required.
	//
	// example:
	//
	// ApiName
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The IDof the backend service
	//
	// example:
	//
	// HEADER
	AppCodeAuthType *string `json:"AppCodeAuthType,omitempty" xml:"AppCodeAuthType,omitempty"`
	// The configuration items of API requests sent by the consumer to API Gateway.
	//
	// For more information, see [RequestConfig](https://help.aliyun.com/document_detail/43985.html).
	//
	// example:
	//
	// APP
	AuthType *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	// Specifies whether to enable backend services.
	//
	// example:
	//
	// true
	BackendEnable *bool `json:"BackendEnable,omitempty" xml:"BackendEnable,omitempty"`
	// Specifies whether to enable backend services.
	//
	// example:
	//
	// a0305308908c4740aba9cbfd63ba99b7
	BackendId          *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	ConstantParameters *string `json:"ConstantParameters,omitempty" xml:"ConstantParameters,omitempty"`
	// The description of the API. The description can be up to 180 characters in length.
	//
	// example:
	//
	// Api description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// If **AuthType*	- is set to **APP**, the valid values are:
	//
	// 	- **DEFAULT**: The default value that is used if no other values are passed. This value means that the setting of the group is used.
	//
	// 	- **DISABLE**: The authentication is disabled.
	//
	// 	- **HEADER**: AppCode can be placed in the Header parameter for authentication.
	//
	// 	- **HEADER_QUERY**: AppCode can be placed in the Header or Query parameter for authentication.
	//
	// example:
	//
	// true
	DisableInternet  *bool   `json:"DisableInternet,omitempty" xml:"DisableInternet,omitempty"`
	ErrorCodeSamples *string `json:"ErrorCodeSamples,omitempty" xml:"ErrorCodeSamples,omitempty"`
	FailResultSample *string `json:"FailResultSample,omitempty" xml:"FailResultSample,omitempty"`
	// 	- Specifies whether to set **DisableInternet*	- to **true*	- to limit API calls to within the VPC.
	//
	// 	- If you set **DisableInternet*	- to **false**, the limit is lifted. The default value is false when you create an API.
	//
	// example:
	//
	// true
	ForceNonceCheck *bool `json:"ForceNonceCheck,omitempty" xml:"ForceNonceCheck,omitempty"`
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 08ae4aa0f95e4321849ee57f4e0b3077
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// If the **AuthType*	- is **APP*	- authentication, you need to pass this value to specify the signature algorithm. If you do not specify this parameter, the default value HmacSHA256 is used. Valid values:
	//
	// 	- HmacSHA256
	//
	// 	- HmacSHA1,HmacSHA256
	//
	// example:
	//
	// {\\"openIdApiType\\":null,\\"idTokenParamName\\":null,\\"publicKeyId\\":null,\\"publicKey\\":null}
	OpenIdConnectConfig *string `json:"OpenIdConnectConfig,omitempty" xml:"OpenIdConnectConfig,omitempty"`
	// The configuration items of API requests sent by API Gateway to the backend service.
	//
	// For more information, see [ServiceConfig](https://help.aliyun.com/document_detail/43987.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// {"RequestProtocol":"HTTP","RequestHttpMethod":"GET","RequestPath":"/v3/getUserTest/[userId]","BodyFormat":"FORM","PostBodyDescription":""}
	RequestConfig     *string `json:"RequestConfig,omitempty" xml:"RequestConfig,omitempty"`
	RequestParameters *string `json:"RequestParameters,omitempty" xml:"RequestParameters,omitempty"`
	// 	- Specifies whether to set **ForceNonceCheck*	- to **true*	- to force the check of X-Ca-Nonce during the request. This is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
	//
	// 	- If you set **ForceNonceCheck*	- to **false**, the check is not performed. The default value is false when you create an API.
	//
	// example:
	//
	// {}
	ResultBodyModel    *string `json:"ResultBodyModel,omitempty" xml:"ResultBodyModel,omitempty"`
	ResultDescriptions *string `json:"ResultDescriptions,omitempty" xml:"ResultDescriptions,omitempty"`
	ResultSample       *string `json:"ResultSample,omitempty" xml:"ResultSample,omitempty"`
	// The sample response from the backend service.
	//
	// example:
	//
	// HTML
	ResultType    *string `json:"ResultType,omitempty" xml:"ResultType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The parameters of API requests sent by the consumer to API Gateway.
	//
	// For more information, see [RequestParameter](https://help.aliyun.com/document_detail/43986.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// {"ServiceProtocol":"HTTP","ServiceHttpMethod":"GET","ServiceAddress":"http://www.customerdomain.com","ServiceTimeout":"1000","ServicePath":"/v3/getUserTest/[userId]"}
	ServiceConfig        *string `json:"ServiceConfig,omitempty" xml:"ServiceConfig,omitempty"`
	ServiceParameters    *string `json:"ServiceParameters,omitempty" xml:"ServiceParameters,omitempty"`
	ServiceParametersMap *string `json:"ServiceParametersMap,omitempty" xml:"ServiceParametersMap,omitempty"`
	SystemParameters     *string `json:"SystemParameters,omitempty" xml:"SystemParameters,omitempty"`
	// The list of tags.
	Tag []*CreateApiRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// Specifies whether to make the API public. Valid values:
	//
	// 	- **PUBLIC**: Make the API public. If you set this parameter to PUBLIC, this API is displayed on the APIs page for all users after the API is published to the production environment.
	//
	// 	- **PRIVATE**: Make the API private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.
	//
	// This parameter is required.
	//
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
	// The return description of the API.
	//
	// example:
	//
	// COMMON
	WebSocketApiType *string `json:"WebSocketApiType,omitempty" xml:"WebSocketApiType,omitempty"`
}

func (s CreateApiRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApiRequest) GoString() string {
	return s.String()
}

func (s *CreateApiRequest) SetAllowSignatureMethod(v string) *CreateApiRequest {
	s.AllowSignatureMethod = &v
	return s
}

func (s *CreateApiRequest) SetApiName(v string) *CreateApiRequest {
	s.ApiName = &v
	return s
}

func (s *CreateApiRequest) SetAppCodeAuthType(v string) *CreateApiRequest {
	s.AppCodeAuthType = &v
	return s
}

func (s *CreateApiRequest) SetAuthType(v string) *CreateApiRequest {
	s.AuthType = &v
	return s
}

func (s *CreateApiRequest) SetBackendEnable(v bool) *CreateApiRequest {
	s.BackendEnable = &v
	return s
}

func (s *CreateApiRequest) SetBackendId(v string) *CreateApiRequest {
	s.BackendId = &v
	return s
}

func (s *CreateApiRequest) SetConstantParameters(v string) *CreateApiRequest {
	s.ConstantParameters = &v
	return s
}

func (s *CreateApiRequest) SetDescription(v string) *CreateApiRequest {
	s.Description = &v
	return s
}

func (s *CreateApiRequest) SetDisableInternet(v bool) *CreateApiRequest {
	s.DisableInternet = &v
	return s
}

func (s *CreateApiRequest) SetErrorCodeSamples(v string) *CreateApiRequest {
	s.ErrorCodeSamples = &v
	return s
}

func (s *CreateApiRequest) SetFailResultSample(v string) *CreateApiRequest {
	s.FailResultSample = &v
	return s
}

func (s *CreateApiRequest) SetForceNonceCheck(v bool) *CreateApiRequest {
	s.ForceNonceCheck = &v
	return s
}

func (s *CreateApiRequest) SetGroupId(v string) *CreateApiRequest {
	s.GroupId = &v
	return s
}

func (s *CreateApiRequest) SetOpenIdConnectConfig(v string) *CreateApiRequest {
	s.OpenIdConnectConfig = &v
	return s
}

func (s *CreateApiRequest) SetRequestConfig(v string) *CreateApiRequest {
	s.RequestConfig = &v
	return s
}

func (s *CreateApiRequest) SetRequestParameters(v string) *CreateApiRequest {
	s.RequestParameters = &v
	return s
}

func (s *CreateApiRequest) SetResultBodyModel(v string) *CreateApiRequest {
	s.ResultBodyModel = &v
	return s
}

func (s *CreateApiRequest) SetResultDescriptions(v string) *CreateApiRequest {
	s.ResultDescriptions = &v
	return s
}

func (s *CreateApiRequest) SetResultSample(v string) *CreateApiRequest {
	s.ResultSample = &v
	return s
}

func (s *CreateApiRequest) SetResultType(v string) *CreateApiRequest {
	s.ResultType = &v
	return s
}

func (s *CreateApiRequest) SetSecurityToken(v string) *CreateApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateApiRequest) SetServiceConfig(v string) *CreateApiRequest {
	s.ServiceConfig = &v
	return s
}

func (s *CreateApiRequest) SetServiceParameters(v string) *CreateApiRequest {
	s.ServiceParameters = &v
	return s
}

func (s *CreateApiRequest) SetServiceParametersMap(v string) *CreateApiRequest {
	s.ServiceParametersMap = &v
	return s
}

func (s *CreateApiRequest) SetSystemParameters(v string) *CreateApiRequest {
	s.SystemParameters = &v
	return s
}

func (s *CreateApiRequest) SetTag(v []*CreateApiRequestTag) *CreateApiRequest {
	s.Tag = v
	return s
}

func (s *CreateApiRequest) SetVisibility(v string) *CreateApiRequest {
	s.Visibility = &v
	return s
}

func (s *CreateApiRequest) SetWebSocketApiType(v string) *CreateApiRequest {
	s.WebSocketApiType = &v
	return s
}

type CreateApiRequestTag struct {
	// The key of the tag.
	//
	// example:
	//
	// env
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateApiRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateApiRequestTag) GoString() string {
	return s.String()
}

func (s *CreateApiRequestTag) SetKey(v string) *CreateApiRequestTag {
	s.Key = &v
	return s
}

func (s *CreateApiRequestTag) SetValue(v string) *CreateApiRequestTag {
	s.Value = &v
	return s
}

type CreateApiResponseBody struct {
	// The ID of the API.
	//
	// example:
	//
	// 8afff6c8c4c6447abb035812e4d66b65
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 6C87A26A-6A18-4B8E-8099-705278381A2C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateApiResponseBody) GoString() string {
	return s.String()
}

func (s *CreateApiResponseBody) SetApiId(v string) *CreateApiResponseBody {
	s.ApiId = &v
	return s
}

func (s *CreateApiResponseBody) SetRequestId(v string) *CreateApiResponseBody {
	s.RequestId = &v
	return s
}

type CreateApiResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateApiResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateApiResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApiResponse) GoString() string {
	return s.String()
}

func (s *CreateApiResponse) SetHeaders(v map[string]*string) *CreateApiResponse {
	s.Headers = v
	return s
}

func (s *CreateApiResponse) SetStatusCode(v int32) *CreateApiResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateApiResponse) SetBody(v *CreateApiResponseBody) *CreateApiResponse {
	s.Body = v
	return s
}

type CreateApiGroupRequest struct {
	// example:
	//
	// /qqq
	BasePath *string `json:"BasePath,omitempty" xml:"BasePath,omitempty"`
	// example:
	//
	// The weather informations.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Weather
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// example:
	//
	// apigateway-cn-v6419k43xxxxx
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// example:
	//
	// Key， Value
	Tag []*CreateApiGroupRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateApiGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApiGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateApiGroupRequest) SetBasePath(v string) *CreateApiGroupRequest {
	s.BasePath = &v
	return s
}

func (s *CreateApiGroupRequest) SetDescription(v string) *CreateApiGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateApiGroupRequest) SetGroupName(v string) *CreateApiGroupRequest {
	s.GroupName = &v
	return s
}

func (s *CreateApiGroupRequest) SetInstanceId(v string) *CreateApiGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateApiGroupRequest) SetSecurityToken(v string) *CreateApiGroupRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateApiGroupRequest) SetTag(v []*CreateApiGroupRequestTag) *CreateApiGroupRequest {
	s.Tag = v
	return s
}

type CreateApiGroupRequestTag struct {
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateApiGroupRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateApiGroupRequestTag) GoString() string {
	return s.String()
}

func (s *CreateApiGroupRequestTag) SetKey(v string) *CreateApiGroupRequestTag {
	s.Key = &v
	return s
}

func (s *CreateApiGroupRequestTag) SetValue(v string) *CreateApiGroupRequestTag {
	s.Value = &v
	return s
}

type CreateApiGroupResponseBody struct {
	// example:
	//
	// /qqq
	BasePath *string `json:"BasePath,omitempty" xml:"BasePath,omitempty"`
	// example:
	//
	// The weather informations
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 523e8dc7bbe04613b5b1d726c2a7xx
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// Weather
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// example:
	//
	// apigateway-cn-v6419k43xxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// VPC_SHARED
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// example:
	//
	// FF3B7D81-66AE-47E0-BF69-157DCF187514
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 523e8dc7bbe04613b5b1d726xxxxxxxx-cn-hangzhou.alicloudapi.com
	SubDomain *string `json:"SubDomain,omitempty" xml:"SubDomain,omitempty"`
	// example:
	//
	// True
	TagStatus *bool `json:"TagStatus,omitempty" xml:"TagStatus,omitempty"`
}

func (s CreateApiGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateApiGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateApiGroupResponseBody) SetBasePath(v string) *CreateApiGroupResponseBody {
	s.BasePath = &v
	return s
}

func (s *CreateApiGroupResponseBody) SetDescription(v string) *CreateApiGroupResponseBody {
	s.Description = &v
	return s
}

func (s *CreateApiGroupResponseBody) SetGroupId(v string) *CreateApiGroupResponseBody {
	s.GroupId = &v
	return s
}

func (s *CreateApiGroupResponseBody) SetGroupName(v string) *CreateApiGroupResponseBody {
	s.GroupName = &v
	return s
}

func (s *CreateApiGroupResponseBody) SetInstanceId(v string) *CreateApiGroupResponseBody {
	s.InstanceId = &v
	return s
}

func (s *CreateApiGroupResponseBody) SetInstanceType(v string) *CreateApiGroupResponseBody {
	s.InstanceType = &v
	return s
}

func (s *CreateApiGroupResponseBody) SetRequestId(v string) *CreateApiGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateApiGroupResponseBody) SetSubDomain(v string) *CreateApiGroupResponseBody {
	s.SubDomain = &v
	return s
}

func (s *CreateApiGroupResponseBody) SetTagStatus(v bool) *CreateApiGroupResponseBody {
	s.TagStatus = &v
	return s
}

type CreateApiGroupResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateApiGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateApiGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApiGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateApiGroupResponse) SetHeaders(v map[string]*string) *CreateApiGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateApiGroupResponse) SetStatusCode(v int32) *CreateApiGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateApiGroupResponse) SetBody(v *CreateApiGroupResponseBody) *CreateApiGroupResponse {
	s.Body = v
	return s
}

type CreateApiStageVariableRequest struct {
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 523e8dc7bbe04613b5b1d726c2a7889d
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the runtime environment.
	//
	// This parameter is required.
	//
	// example:
	//
	// 6EF60BEC-0242-43AF-BB20-270359FB54A7
	StageId *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	// Deprecated
	StageRouteModel *string `json:"StageRouteModel,omitempty" xml:"StageRouteModel,omitempty"`
	// Specifies whether routing is supported.
	//
	// example:
	//
	// true
	SupportRoute *bool `json:"SupportRoute,omitempty" xml:"SupportRoute,omitempty"`
	// The name of the variable to be added. This parameter is case-sensitive.
	//
	// This parameter is required.
	//
	// example:
	//
	// serverName
	VariableName *string `json:"VariableName,omitempty" xml:"VariableName,omitempty"`
	// The value of the variable.
	//
	// example:
	//
	// api.domain.com
	VariableValue *string `json:"VariableValue,omitempty" xml:"VariableValue,omitempty"`
}

func (s CreateApiStageVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApiStageVariableRequest) GoString() string {
	return s.String()
}

func (s *CreateApiStageVariableRequest) SetGroupId(v string) *CreateApiStageVariableRequest {
	s.GroupId = &v
	return s
}

func (s *CreateApiStageVariableRequest) SetSecurityToken(v string) *CreateApiStageVariableRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateApiStageVariableRequest) SetStageId(v string) *CreateApiStageVariableRequest {
	s.StageId = &v
	return s
}

func (s *CreateApiStageVariableRequest) SetStageRouteModel(v string) *CreateApiStageVariableRequest {
	s.StageRouteModel = &v
	return s
}

func (s *CreateApiStageVariableRequest) SetSupportRoute(v bool) *CreateApiStageVariableRequest {
	s.SupportRoute = &v
	return s
}

func (s *CreateApiStageVariableRequest) SetVariableName(v string) *CreateApiStageVariableRequest {
	s.VariableName = &v
	return s
}

func (s *CreateApiStageVariableRequest) SetVariableValue(v string) *CreateApiStageVariableRequest {
	s.VariableValue = &v
	return s
}

type CreateApiStageVariableResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 03442A3D-3B7D-434C-8A95-A5FEB999B529
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateApiStageVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateApiStageVariableResponseBody) GoString() string {
	return s.String()
}

func (s *CreateApiStageVariableResponseBody) SetRequestId(v string) *CreateApiStageVariableResponseBody {
	s.RequestId = &v
	return s
}

type CreateApiStageVariableResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateApiStageVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateApiStageVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApiStageVariableResponse) GoString() string {
	return s.String()
}

func (s *CreateApiStageVariableResponse) SetHeaders(v map[string]*string) *CreateApiStageVariableResponse {
	s.Headers = v
	return s
}

func (s *CreateApiStageVariableResponse) SetStatusCode(v int32) *CreateApiStageVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateApiStageVariableResponse) SetBody(v *CreateApiStageVariableResponseBody) *CreateApiStageVariableResponse {
	s.Body = v
	return s
}

type CreateAppRequest struct {
	// The AppCode of the application.
	//
	// example:
	//
	// 3aaf905a0a1f4f0eabc6d891dfa08afc
	AppCode *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	// The key of the application that is used to make an API call.
	//
	// example:
	//
	// 60030986
	AppKey *string `json:"AppKey,omitempty" xml:"AppKey,omitempty"`
	// The name of the application. The name must be 4 to 26 characters in length. The name can contain letters, digits, and underscores (_), and must start with a letter.
	//
	// This parameter is required.
	//
	// example:
	//
	// CreateAppTest
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The password of the application.
	//
	// example:
	//
	// nzyNqFkRWB2uLw86
	AppSecret *string `json:"AppSecret,omitempty" xml:"AppSecret,omitempty"`
	// The description of the application. The description can be up to 180 characters in length.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The extended information.
	//
	// example:
	//
	// 110210264071
	Extend        *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The tag of objects that match the rule. You can specify multiple tags.
	//
	// example:
	//
	// Key， Value
	Tag []*CreateAppRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateAppRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAppRequest) GoString() string {
	return s.String()
}

func (s *CreateAppRequest) SetAppCode(v string) *CreateAppRequest {
	s.AppCode = &v
	return s
}

func (s *CreateAppRequest) SetAppKey(v string) *CreateAppRequest {
	s.AppKey = &v
	return s
}

func (s *CreateAppRequest) SetAppName(v string) *CreateAppRequest {
	s.AppName = &v
	return s
}

func (s *CreateAppRequest) SetAppSecret(v string) *CreateAppRequest {
	s.AppSecret = &v
	return s
}

func (s *CreateAppRequest) SetDescription(v string) *CreateAppRequest {
	s.Description = &v
	return s
}

func (s *CreateAppRequest) SetExtend(v string) *CreateAppRequest {
	s.Extend = &v
	return s
}

func (s *CreateAppRequest) SetSecurityToken(v string) *CreateAppRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateAppRequest) SetTag(v []*CreateAppRequestTag) *CreateAppRequest {
	s.Tag = v
	return s
}

type CreateAppRequestTag struct {
	// The key of the tag.
	//
	// Valid values of n: `[1, 20]`.
	//
	// example:
	//
	// env
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// Valid values of n: `[1, 20]`. If the parameter has a value, you must specify a value for the tag key with the same N as tag.N.Key. Otherwise, an error is reported.
	//
	// example:
	//
	// \\" \\"
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateAppRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateAppRequestTag) GoString() string {
	return s.String()
}

func (s *CreateAppRequestTag) SetKey(v string) *CreateAppRequestTag {
	s.Key = &v
	return s
}

func (s *CreateAppRequestTag) SetValue(v string) *CreateAppRequestTag {
	s.Value = &v
	return s
}

type CreateAppResponseBody struct {
	// The unique ID of the application.
	//
	// example:
	//
	// 20112314518278
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// BA20890E-75C7-41BC-9C8B-73276B58F550
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the tag exists. If the value is **true**, the tag exists. If the value is **false**, the tag does not exist.
	//
	// example:
	//
	// false
	TagStatus *bool `json:"TagStatus,omitempty" xml:"TagStatus,omitempty"`
}

func (s CreateAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAppResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAppResponseBody) SetAppId(v int64) *CreateAppResponseBody {
	s.AppId = &v
	return s
}

func (s *CreateAppResponseBody) SetRequestId(v string) *CreateAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAppResponseBody) SetTagStatus(v bool) *CreateAppResponseBody {
	s.TagStatus = &v
	return s
}

type CreateAppResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAppResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAppResponse) GoString() string {
	return s.String()
}

func (s *CreateAppResponse) SetHeaders(v map[string]*string) *CreateAppResponse {
	s.Headers = v
	return s
}

func (s *CreateAppResponse) SetStatusCode(v int32) *CreateAppResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAppResponse) SetBody(v *CreateAppResponseBody) *CreateAppResponse {
	s.Body = v
	return s
}

type CreateAppCodeRequest struct {
	// example:
	//
	// 3aaf905a0a1f4f0eabc6d891dfa08afc
	AppCode *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 111203109
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s CreateAppCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAppCodeRequest) GoString() string {
	return s.String()
}

func (s *CreateAppCodeRequest) SetAppCode(v string) *CreateAppCodeRequest {
	s.AppCode = &v
	return s
}

func (s *CreateAppCodeRequest) SetAppId(v string) *CreateAppCodeRequest {
	s.AppId = &v
	return s
}

type CreateAppCodeResponseBody struct {
	// example:
	//
	// 418DAAE7-A0C2-5E9C-ADFF-4CD14A474F88
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAppCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAppCodeResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAppCodeResponseBody) SetRequestId(v string) *CreateAppCodeResponseBody {
	s.RequestId = &v
	return s
}

type CreateAppCodeResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAppCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAppCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAppCodeResponse) GoString() string {
	return s.String()
}

func (s *CreateAppCodeResponse) SetHeaders(v map[string]*string) *CreateAppCodeResponse {
	s.Headers = v
	return s
}

func (s *CreateAppCodeResponse) SetStatusCode(v int32) *CreateAppCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAppCodeResponse) SetBody(v *CreateAppCodeResponseBody) *CreateAppCodeResponse {
	s.Body = v
	return s
}

type CreateAppKeyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 111053351
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// 204203237
	AppKey *string `json:"AppKey,omitempty" xml:"AppKey,omitempty"`
	// example:
	//
	// 6f0a4ad7918a4b41a57fc087d5b066d0
	AppSecret *string `json:"AppSecret,omitempty" xml:"AppSecret,omitempty"`
}

func (s CreateAppKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAppKeyRequest) GoString() string {
	return s.String()
}

func (s *CreateAppKeyRequest) SetAppId(v string) *CreateAppKeyRequest {
	s.AppId = &v
	return s
}

func (s *CreateAppKeyRequest) SetAppKey(v string) *CreateAppKeyRequest {
	s.AppKey = &v
	return s
}

func (s *CreateAppKeyRequest) SetAppSecret(v string) *CreateAppKeyRequest {
	s.AppSecret = &v
	return s
}

type CreateAppKeyResponseBody struct {
	// example:
	//
	// 5D524309-6BED-5BB4-A735-F7D9F98B7B88
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAppKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAppKeyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAppKeyResponseBody) SetRequestId(v string) *CreateAppKeyResponseBody {
	s.RequestId = &v
	return s
}

type CreateAppKeyResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAppKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAppKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAppKeyResponse) GoString() string {
	return s.String()
}

func (s *CreateAppKeyResponse) SetHeaders(v map[string]*string) *CreateAppKeyResponse {
	s.Headers = v
	return s
}

func (s *CreateAppKeyResponse) SetStatusCode(v int32) *CreateAppKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAppKeyResponse) SetBody(v *CreateAppKeyResponseBody) *CreateAppKeyResponse {
	s.Body = v
	return s
}

type CreateBackendRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// testBackendService
	BackendName *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// HTTP
	BackendType *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
	// example:
	//
	// true
	CreateEventBridgeServiceLinkedRole *bool                      `json:"CreateEventBridgeServiceLinkedRole,omitempty" xml:"CreateEventBridgeServiceLinkedRole,omitempty"`
	CreateSlr                          *bool                      `json:"CreateSlr,omitempty" xml:"CreateSlr,omitempty"`
	Description                        *string                    `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken                      *string                    `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag                                []*CreateBackendRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateBackendRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBackendRequest) GoString() string {
	return s.String()
}

func (s *CreateBackendRequest) SetBackendName(v string) *CreateBackendRequest {
	s.BackendName = &v
	return s
}

func (s *CreateBackendRequest) SetBackendType(v string) *CreateBackendRequest {
	s.BackendType = &v
	return s
}

func (s *CreateBackendRequest) SetCreateEventBridgeServiceLinkedRole(v bool) *CreateBackendRequest {
	s.CreateEventBridgeServiceLinkedRole = &v
	return s
}

func (s *CreateBackendRequest) SetCreateSlr(v bool) *CreateBackendRequest {
	s.CreateSlr = &v
	return s
}

func (s *CreateBackendRequest) SetDescription(v string) *CreateBackendRequest {
	s.Description = &v
	return s
}

func (s *CreateBackendRequest) SetSecurityToken(v string) *CreateBackendRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateBackendRequest) SetTag(v []*CreateBackendRequestTag) *CreateBackendRequest {
	s.Tag = v
	return s
}

type CreateBackendRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateBackendRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateBackendRequestTag) GoString() string {
	return s.String()
}

func (s *CreateBackendRequestTag) SetKey(v string) *CreateBackendRequestTag {
	s.Key = &v
	return s
}

func (s *CreateBackendRequestTag) SetValue(v string) *CreateBackendRequestTag {
	s.Value = &v
	return s
}

type CreateBackendResponseBody struct {
	// example:
	//
	// 0d105f80a8f340408bd34954d4e4ff22
	BackendId *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	// example:
	//
	// 66D84355-164D-53ED-81FF-03DCF181DE24
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateBackendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBackendResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBackendResponseBody) SetBackendId(v string) *CreateBackendResponseBody {
	s.BackendId = &v
	return s
}

func (s *CreateBackendResponseBody) SetRequestId(v string) *CreateBackendResponseBody {
	s.RequestId = &v
	return s
}

type CreateBackendResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateBackendResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateBackendResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBackendResponse) GoString() string {
	return s.String()
}

func (s *CreateBackendResponse) SetHeaders(v map[string]*string) *CreateBackendResponse {
	s.Headers = v
	return s
}

func (s *CreateBackendResponse) SetStatusCode(v int32) *CreateBackendResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateBackendResponse) SetBody(v *CreateBackendResponseBody) *CreateBackendResponse {
	s.Body = v
	return s
}

type CreateBackendModelRequest struct {
	// example:
	//
	// 34e94fcd3e2e47a49824a89b8f92cb5e
	BackendId *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	// example:
	//
	// {\\"ServiceAddress\\":\\"http://apigateway-echo-redux.alicloudapi.com:8080\\"}
	BackendModelData *string `json:"BackendModelData,omitempty" xml:"BackendModelData,omitempty"`
	// example:
	//
	// HTTP
	BackendType *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
	// example:
	//
	// model description
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s CreateBackendModelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBackendModelRequest) GoString() string {
	return s.String()
}

func (s *CreateBackendModelRequest) SetBackendId(v string) *CreateBackendModelRequest {
	s.BackendId = &v
	return s
}

func (s *CreateBackendModelRequest) SetBackendModelData(v string) *CreateBackendModelRequest {
	s.BackendModelData = &v
	return s
}

func (s *CreateBackendModelRequest) SetBackendType(v string) *CreateBackendModelRequest {
	s.BackendType = &v
	return s
}

func (s *CreateBackendModelRequest) SetDescription(v string) *CreateBackendModelRequest {
	s.Description = &v
	return s
}

func (s *CreateBackendModelRequest) SetSecurityToken(v string) *CreateBackendModelRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateBackendModelRequest) SetStageName(v string) *CreateBackendModelRequest {
	s.StageName = &v
	return s
}

type CreateBackendModelResponseBody struct {
	// example:
	//
	// 4be6b110b7aa40b0bf0c83cc00b3bd86
	BackendModelId *string `json:"BackendModelId,omitempty" xml:"BackendModelId,omitempty"`
	// example:
	//
	// 64411ECF-FAF7-5E3C-BA7B-E4A1F15A28CA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateBackendModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBackendModelResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBackendModelResponseBody) SetBackendModelId(v string) *CreateBackendModelResponseBody {
	s.BackendModelId = &v
	return s
}

func (s *CreateBackendModelResponseBody) SetRequestId(v string) *CreateBackendModelResponseBody {
	s.RequestId = &v
	return s
}

type CreateBackendModelResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateBackendModelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateBackendModelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBackendModelResponse) GoString() string {
	return s.String()
}

func (s *CreateBackendModelResponse) SetHeaders(v map[string]*string) *CreateBackendModelResponse {
	s.Headers = v
	return s
}

func (s *CreateBackendModelResponse) SetStatusCode(v int32) *CreateBackendModelResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateBackendModelResponse) SetBody(v *CreateBackendModelResponseBody) *CreateBackendModelResponse {
	s.Body = v
	return s
}

type CreateDatasetRequest struct {
	// The name of the dataset.
	//
	// This parameter is required.
	//
	// example:
	//
	// DatasetName
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// The type of the dataset. Valid values:
	//
	// 	- JWT_BLOCKING: a JSON Web Token (JWT) blacklist
	//
	// 	- IP_WHITELIST_CIDR : an IP address whitelist
	//
	// 	- PARAMETER_ACCESS : parameter-based access control
	//
	// This parameter is required.
	//
	// example:
	//
	// JWT_BLOCKING
	DatasetType   *string `json:"DatasetType,omitempty" xml:"DatasetType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The tag of objects that match the rule. You can specify multiple tags.
	Tag []*CreateDatasetRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateDatasetRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetRequest) GoString() string {
	return s.String()
}

func (s *CreateDatasetRequest) SetDatasetName(v string) *CreateDatasetRequest {
	s.DatasetName = &v
	return s
}

func (s *CreateDatasetRequest) SetDatasetType(v string) *CreateDatasetRequest {
	s.DatasetType = &v
	return s
}

func (s *CreateDatasetRequest) SetSecurityToken(v string) *CreateDatasetRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateDatasetRequest) SetTag(v []*CreateDatasetRequestTag) *CreateDatasetRequest {
	s.Tag = v
	return s
}

type CreateDatasetRequestTag struct {
	// The key of the tag.
	//
	// example:
	//
	// env
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// 123
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDatasetRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetRequestTag) GoString() string {
	return s.String()
}

func (s *CreateDatasetRequestTag) SetKey(v string) *CreateDatasetRequestTag {
	s.Key = &v
	return s
}

func (s *CreateDatasetRequestTag) SetValue(v string) *CreateDatasetRequestTag {
	s.Value = &v
	return s
}

type CreateDatasetResponseBody struct {
	// The ID of the dataset.
	//
	// example:
	//
	// a25a6589b2584ff490e891cc********
	DatasetId *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 4173F95B-360C-460C-9F6C-4A96********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDatasetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDatasetResponseBody) SetDatasetId(v string) *CreateDatasetResponseBody {
	s.DatasetId = &v
	return s
}

func (s *CreateDatasetResponseBody) SetRequestId(v string) *CreateDatasetResponseBody {
	s.RequestId = &v
	return s
}

type CreateDatasetResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDatasetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDatasetResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetResponse) GoString() string {
	return s.String()
}

func (s *CreateDatasetResponse) SetHeaders(v map[string]*string) *CreateDatasetResponse {
	s.Headers = v
	return s
}

func (s *CreateDatasetResponse) SetStatusCode(v int32) *CreateDatasetResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDatasetResponse) SetBody(v *CreateDatasetResponseBody) *CreateDatasetResponse {
	s.Body = v
	return s
}

type CreateDatasetItemRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// a25a6589b2584ff490e891cc********
	DatasetId   *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 2022-09-22T12:00:00Z
	ExpiredTime   *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 106.43.XXX.XXX
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDatasetItemRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetItemRequest) GoString() string {
	return s.String()
}

func (s *CreateDatasetItemRequest) SetDatasetId(v string) *CreateDatasetItemRequest {
	s.DatasetId = &v
	return s
}

func (s *CreateDatasetItemRequest) SetDescription(v string) *CreateDatasetItemRequest {
	s.Description = &v
	return s
}

func (s *CreateDatasetItemRequest) SetExpiredTime(v string) *CreateDatasetItemRequest {
	s.ExpiredTime = &v
	return s
}

func (s *CreateDatasetItemRequest) SetSecurityToken(v string) *CreateDatasetItemRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateDatasetItemRequest) SetValue(v string) *CreateDatasetItemRequest {
	s.Value = &v
	return s
}

type CreateDatasetItemResponseBody struct {
	// example:
	//
	// 5045****
	DatasetItemId *string `json:"DatasetItemId,omitempty" xml:"DatasetItemId,omitempty"`
	// example:
	//
	// 8A5E2053-4D9F-5280-B7A9-D357********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDatasetItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetItemResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDatasetItemResponseBody) SetDatasetItemId(v string) *CreateDatasetItemResponseBody {
	s.DatasetItemId = &v
	return s
}

func (s *CreateDatasetItemResponseBody) SetRequestId(v string) *CreateDatasetItemResponseBody {
	s.RequestId = &v
	return s
}

type CreateDatasetItemResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDatasetItemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDatasetItemResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetItemResponse) GoString() string {
	return s.String()
}

func (s *CreateDatasetItemResponse) SetHeaders(v map[string]*string) *CreateDatasetItemResponse {
	s.Headers = v
	return s
}

func (s *CreateDatasetItemResponse) SetStatusCode(v int32) *CreateDatasetItemResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDatasetItemResponse) SetBody(v *CreateDatasetItemResponseBody) *CreateDatasetItemResponse {
	s.Body = v
	return s
}

type CreateInstanceRequest struct {
	// example:
	//
	// false
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// This parameter is required.
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// example:
	//
	// 1
	Duration *int32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// HTTPS2_TLS1_2
	HttpsPolicy  *string `json:"HttpsPolicy,omitempty" xml:"HttpsPolicy,omitempty"`
	InstanceCidr *string `json:"InstanceCidr,omitempty" xml:"InstanceCidr,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ApigatewayInstance
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// api.s1.small
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// example:
	//
	// Month
	PricingCycle *string                     `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	Tag          []*CreateInstanceRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// c20d86c4-1eb3-4d0b-afe9-c586df1e2136
	Token     *string `json:"Token,omitempty" xml:"Token,omitempty"`
	UserVpcId *string `json:"UserVpcId,omitempty" xml:"UserVpcId,omitempty"`
	// example:
	//
	// cn-beijing-MAZ3(c,e)
	ZoneId                   *string                                          `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ZoneVSwitchSecurityGroup []*CreateInstanceRequestZoneVSwitchSecurityGroup `json:"ZoneVSwitchSecurityGroup,omitempty" xml:"ZoneVSwitchSecurityGroup,omitempty" type:"Repeated"`
}

func (s CreateInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequest) SetAutoPay(v bool) *CreateInstanceRequest {
	s.AutoPay = &v
	return s
}

func (s *CreateInstanceRequest) SetChargeType(v string) *CreateInstanceRequest {
	s.ChargeType = &v
	return s
}

func (s *CreateInstanceRequest) SetDuration(v int32) *CreateInstanceRequest {
	s.Duration = &v
	return s
}

func (s *CreateInstanceRequest) SetHttpsPolicy(v string) *CreateInstanceRequest {
	s.HttpsPolicy = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceCidr(v string) *CreateInstanceRequest {
	s.InstanceCidr = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceName(v string) *CreateInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceSpec(v string) *CreateInstanceRequest {
	s.InstanceSpec = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceType(v string) *CreateInstanceRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateInstanceRequest) SetPricingCycle(v string) *CreateInstanceRequest {
	s.PricingCycle = &v
	return s
}

func (s *CreateInstanceRequest) SetTag(v []*CreateInstanceRequestTag) *CreateInstanceRequest {
	s.Tag = v
	return s
}

func (s *CreateInstanceRequest) SetToken(v string) *CreateInstanceRequest {
	s.Token = &v
	return s
}

func (s *CreateInstanceRequest) SetUserVpcId(v string) *CreateInstanceRequest {
	s.UserVpcId = &v
	return s
}

func (s *CreateInstanceRequest) SetZoneId(v string) *CreateInstanceRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateInstanceRequest) SetZoneVSwitchSecurityGroup(v []*CreateInstanceRequestZoneVSwitchSecurityGroup) *CreateInstanceRequest {
	s.ZoneVSwitchSecurityGroup = v
	return s
}

type CreateInstanceRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateInstanceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestTag) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestTag) SetKey(v string) *CreateInstanceRequestTag {
	s.Key = &v
	return s
}

func (s *CreateInstanceRequestTag) SetValue(v string) *CreateInstanceRequestTag {
	s.Value = &v
	return s
}

type CreateInstanceRequestZoneVSwitchSecurityGroup struct {
	CidrBlock       *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	VSwitchId       *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ZoneId          *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateInstanceRequestZoneVSwitchSecurityGroup) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestZoneVSwitchSecurityGroup) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestZoneVSwitchSecurityGroup) SetCidrBlock(v string) *CreateInstanceRequestZoneVSwitchSecurityGroup {
	s.CidrBlock = &v
	return s
}

func (s *CreateInstanceRequestZoneVSwitchSecurityGroup) SetSecurityGroupId(v string) *CreateInstanceRequestZoneVSwitchSecurityGroup {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateInstanceRequestZoneVSwitchSecurityGroup) SetVSwitchId(v string) *CreateInstanceRequestZoneVSwitchSecurityGroup {
	s.VSwitchId = &v
	return s
}

func (s *CreateInstanceRequestZoneVSwitchSecurityGroup) SetZoneId(v string) *CreateInstanceRequestZoneVSwitchSecurityGroup {
	s.ZoneId = &v
	return s
}

type CreateInstanceResponseBody struct {
	// example:
	//
	// apigateway-hz-b3c5dadd5***
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// CEB6EC62-B6C7-5082-A45A-45A204724AC2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagStatus *bool   `json:"TagStatus,omitempty" xml:"TagStatus,omitempty"`
}

func (s CreateInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBody) SetInstanceId(v string) *CreateInstanceResponseBody {
	s.InstanceId = &v
	return s
}

func (s *CreateInstanceResponseBody) SetRequestId(v string) *CreateInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateInstanceResponseBody) SetTagStatus(v bool) *CreateInstanceResponseBody {
	s.TagStatus = &v
	return s
}

type CreateInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponse) SetHeaders(v map[string]*string) *CreateInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateInstanceResponse) SetStatusCode(v int32) *CreateInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInstanceResponse) SetBody(v *CreateInstanceResponseBody) *CreateInstanceResponse {
	s.Body = v
	return s
}

type CreateIntranetDomainRequest struct {
	// The custom domain name.
	//
	// This parameter is required.
	//
	// example:
	//
	// 927d50c0f2e54b359919923d908bb015
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s CreateIntranetDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIntranetDomainRequest) GoString() string {
	return s.String()
}

func (s *CreateIntranetDomainRequest) SetGroupId(v string) *CreateIntranetDomainRequest {
	s.GroupId = &v
	return s
}

func (s *CreateIntranetDomainRequest) SetSecurityToken(v string) *CreateIntranetDomainRequest {
	s.SecurityToken = &v
	return s
}

type CreateIntranetDomainResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// api.demo.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// auditing
	//
	// example:
	//
	// 20D942A5-EDC6-5DA3-93F9-257888399E22
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateIntranetDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateIntranetDomainResponseBody) GoString() string {
	return s.String()
}

func (s *CreateIntranetDomainResponseBody) SetDomainName(v string) *CreateIntranetDomainResponseBody {
	s.DomainName = &v
	return s
}

func (s *CreateIntranetDomainResponseBody) SetRequestId(v string) *CreateIntranetDomainResponseBody {
	s.RequestId = &v
	return s
}

type CreateIntranetDomainResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateIntranetDomainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateIntranetDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIntranetDomainResponse) GoString() string {
	return s.String()
}

func (s *CreateIntranetDomainResponse) SetHeaders(v map[string]*string) *CreateIntranetDomainResponse {
	s.Headers = v
	return s
}

func (s *CreateIntranetDomainResponse) SetStatusCode(v int32) *CreateIntranetDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateIntranetDomainResponse) SetBody(v *CreateIntranetDomainResponseBody) *CreateIntranetDomainResponse {
	s.Body = v
	return s
}

type CreateIpControlRequest struct {
	// The description. The description can be up to 200 characters in length.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the ACL. The name must be 4 to 50 characters in length, and can contain letters, digits, and underscores (_). The name cannot start with an underscore (_).``
	//
	// This parameter is required.
	//
	// example:
	//
	// controlNameTest
	IpControlName *string `json:"IpControlName,omitempty" xml:"IpControlName,omitempty"`
	// The information about the policies. The information is an array of ipcontrolpolicys data.
	IpControlPolicys []*CreateIpControlRequestIpControlPolicys `json:"IpControlPolicys,omitempty" xml:"IpControlPolicys,omitempty" type:"Repeated"`
	// The type of the ACL. Valid values:
	//
	// 	- **ALLOW**: an IP address whitelist
	//
	// 	- **REFUSE**: an IP address blacklist
	//
	// This parameter is required.
	//
	// example:
	//
	// ALLOW
	IpControlType *string `json:"IpControlType,omitempty" xml:"IpControlType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s CreateIpControlRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIpControlRequest) GoString() string {
	return s.String()
}

func (s *CreateIpControlRequest) SetDescription(v string) *CreateIpControlRequest {
	s.Description = &v
	return s
}

func (s *CreateIpControlRequest) SetIpControlName(v string) *CreateIpControlRequest {
	s.IpControlName = &v
	return s
}

func (s *CreateIpControlRequest) SetIpControlPolicys(v []*CreateIpControlRequestIpControlPolicys) *CreateIpControlRequest {
	s.IpControlPolicys = v
	return s
}

func (s *CreateIpControlRequest) SetIpControlType(v string) *CreateIpControlRequest {
	s.IpControlType = &v
	return s
}

func (s *CreateIpControlRequest) SetSecurityToken(v string) *CreateIpControlRequest {
	s.SecurityToken = &v
	return s
}

type CreateIpControlRequestIpControlPolicys struct {
	// The ID of the application that is restricted by the policy. You can configure the AppId parameter only when the value of the IpControlType parameter is ALLOW.
	//
	// 	- You can add only one application ID at a time.
	//
	// 	- If this parameter is empty, no applications are restricted.
	//
	// 	- If this parameter is not empty, not only IP addresses but also applications are restricted.
	//
	// 	- If this parameter is not empty and no security authentication method is specified for the API, all API calls are restricted.
	//
	// 	- If the value of the IpControlType parameter is REFUSE and the AppId parameter is not empty, API Gateway automatically ignores the AppId parameter and restricts only the IP addresses.
	//
	// 	- Valid values of N in IpControlPolicys.N: `[1,100]`.
	//
	// example:
	//
	// 11111
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The IP address or CIDR block involved in a policy.
	//
	// 	- If you want to specify a policy when you create an ACL, this parameter is required.
	//
	// 	- The IP address or CIDR block that is defined in each policy. Separate multiple IP addresses or CIDR blocks with semicolons (;). You can add a maximum of 10 IP addresses or CIDR blocks.
	//
	// 	- Valid values of N in IpControlPolicys.N: `[1,100]`.
	//
	// example:
	//
	// 114.1.1.0/24
	CidrIp *string `json:"CidrIp,omitempty" xml:"CidrIp,omitempty"`
}

func (s CreateIpControlRequestIpControlPolicys) String() string {
	return tea.Prettify(s)
}

func (s CreateIpControlRequestIpControlPolicys) GoString() string {
	return s.String()
}

func (s *CreateIpControlRequestIpControlPolicys) SetAppId(v string) *CreateIpControlRequestIpControlPolicys {
	s.AppId = &v
	return s
}

func (s *CreateIpControlRequestIpControlPolicys) SetCidrIp(v string) *CreateIpControlRequestIpControlPolicys {
	s.CidrIp = &v
	return s
}

type CreateIpControlResponseBody struct {
	// The ID of the ACL.
	//
	// example:
	//
	// 7ea91319a34d48a09b5c9c871d9768b1
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CE5722A6-AE78-4741-A9B0-6C817D360510
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateIpControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateIpControlResponseBody) GoString() string {
	return s.String()
}

func (s *CreateIpControlResponseBody) SetIpControlId(v string) *CreateIpControlResponseBody {
	s.IpControlId = &v
	return s
}

func (s *CreateIpControlResponseBody) SetRequestId(v string) *CreateIpControlResponseBody {
	s.RequestId = &v
	return s
}

type CreateIpControlResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateIpControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateIpControlResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIpControlResponse) GoString() string {
	return s.String()
}

func (s *CreateIpControlResponse) SetHeaders(v map[string]*string) *CreateIpControlResponse {
	s.Headers = v
	return s
}

func (s *CreateIpControlResponse) SetStatusCode(v int32) *CreateIpControlResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateIpControlResponse) SetBody(v *CreateIpControlResponseBody) *CreateIpControlResponse {
	s.Body = v
	return s
}

type CreateLogConfigRequest struct {
	// example:
	//
	// PROVIDER
	LogType       *string `json:"LogType,omitempty" xml:"LogType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// slslogstore
	//
	// This parameter is required.
	//
	// example:
	//
	// api-gateway
	SlsLogStore *string `json:"SlsLogStore,omitempty" xml:"SlsLogStore,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// rec-lq-sls
	SlsProject *string `json:"SlsProject,omitempty" xml:"SlsProject,omitempty"`
}

func (s CreateLogConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLogConfigRequest) GoString() string {
	return s.String()
}

func (s *CreateLogConfigRequest) SetLogType(v string) *CreateLogConfigRequest {
	s.LogType = &v
	return s
}

func (s *CreateLogConfigRequest) SetSecurityToken(v string) *CreateLogConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateLogConfigRequest) SetSlsLogStore(v string) *CreateLogConfigRequest {
	s.SlsLogStore = &v
	return s
}

func (s *CreateLogConfigRequest) SetSlsProject(v string) *CreateLogConfigRequest {
	s.SlsProject = &v
	return s
}

type CreateLogConfigResponseBody struct {
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLogConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLogConfigResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLogConfigResponseBody) SetRequestId(v string) *CreateLogConfigResponseBody {
	s.RequestId = &v
	return s
}

type CreateLogConfigResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLogConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLogConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLogConfigResponse) GoString() string {
	return s.String()
}

func (s *CreateLogConfigResponse) SetHeaders(v map[string]*string) *CreateLogConfigResponse {
	s.Headers = v
	return s
}

func (s *CreateLogConfigResponse) SetStatusCode(v int32) *CreateLogConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLogConfigResponse) SetBody(v *CreateLogConfigResponseBody) *CreateLogConfigResponse {
	s.Body = v
	return s
}

type CreateModelRequest struct {
	// The description of the model definition.
	//
	// example:
	//
	// Model Description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group to which the model belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 30e792398d6c4569b04c0e53a3494381
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the model. The name must be unique within the group.
	//
	// This parameter is required.
	//
	// example:
	//
	// Test
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	// The definition of the model in JSON Schema.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"type":"object","properties":{"id":{"format":"int64","maximum":100,"exclusiveMaximum":true,"type":"integer"},"name":{"maxLength":10,"type":"string"}}}
	Schema *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
	// The object tags that match the lifecycle rule. You can specify multiple tags.
	Tag []*CreateModelRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateModelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateModelRequest) GoString() string {
	return s.String()
}

func (s *CreateModelRequest) SetDescription(v string) *CreateModelRequest {
	s.Description = &v
	return s
}

func (s *CreateModelRequest) SetGroupId(v string) *CreateModelRequest {
	s.GroupId = &v
	return s
}

func (s *CreateModelRequest) SetModelName(v string) *CreateModelRequest {
	s.ModelName = &v
	return s
}

func (s *CreateModelRequest) SetSchema(v string) *CreateModelRequest {
	s.Schema = &v
	return s
}

func (s *CreateModelRequest) SetTag(v []*CreateModelRequestTag) *CreateModelRequest {
	s.Tag = v
	return s
}

type CreateModelRequestTag struct {
	// The key of the tag.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The values of the tag.
	//
	// example:
	//
	// 123
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateModelRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateModelRequestTag) GoString() string {
	return s.String()
}

func (s *CreateModelRequestTag) SetKey(v string) *CreateModelRequestTag {
	s.Key = &v
	return s
}

func (s *CreateModelRequestTag) SetValue(v string) *CreateModelRequestTag {
	s.Value = &v
	return s
}

type CreateModelResponseBody struct {
	// The time when the model was created.
	//
	// example:
	//
	// 2019-01-29T09:33:01Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The description of the created model.
	//
	// example:
	//
	// Model Description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group to which the created model belongs.
	//
	// example:
	//
	// 30e792398d6c4569b04c0e53a3494381
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the created model.
	//
	// example:
	//
	// 766c0b9538a04bdf974953b5576783ba
	ModelId *string `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	// The name of the created model.
	//
	// example:
	//
	// Test
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	// The URI of the created model.
	//
	// example:
	//
	// https://apigateway.aliyun.com/models/30e792398d6c4569b04c0e53a3494381/766c0b9538a04bdf974953b5576783ba
	ModelRef *string `json:"ModelRef,omitempty" xml:"ModelRef,omitempty"`
	// The time when the model is last modified.
	//
	// example:
	//
	// 2019-01-29T09:33:01Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The region to which the created model belongs.
	//
	// example:
	//
	// cn-qingdao
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 4173F95B-360C-460C-9F6C-4A960B904411
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The definition of the created model.
	//
	// example:
	//
	// {\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"format\\":\\"int64\\",\\"maximum\\":100,\\"exclusiveMaximum\\":true,\\"type\\":\\"integer\\"},\\"name\\":{\\"maxLength\\":10,\\"type\\":\\"string\\"}}}
	Schema *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
}

func (s CreateModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateModelResponseBody) GoString() string {
	return s.String()
}

func (s *CreateModelResponseBody) SetCreatedTime(v string) *CreateModelResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *CreateModelResponseBody) SetDescription(v string) *CreateModelResponseBody {
	s.Description = &v
	return s
}

func (s *CreateModelResponseBody) SetGroupId(v string) *CreateModelResponseBody {
	s.GroupId = &v
	return s
}

func (s *CreateModelResponseBody) SetModelId(v string) *CreateModelResponseBody {
	s.ModelId = &v
	return s
}

func (s *CreateModelResponseBody) SetModelName(v string) *CreateModelResponseBody {
	s.ModelName = &v
	return s
}

func (s *CreateModelResponseBody) SetModelRef(v string) *CreateModelResponseBody {
	s.ModelRef = &v
	return s
}

func (s *CreateModelResponseBody) SetModifiedTime(v string) *CreateModelResponseBody {
	s.ModifiedTime = &v
	return s
}

func (s *CreateModelResponseBody) SetRegionId(v string) *CreateModelResponseBody {
	s.RegionId = &v
	return s
}

func (s *CreateModelResponseBody) SetRequestId(v string) *CreateModelResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateModelResponseBody) SetSchema(v string) *CreateModelResponseBody {
	s.Schema = &v
	return s
}

type CreateModelResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateModelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateModelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateModelResponse) GoString() string {
	return s.String()
}

func (s *CreateModelResponse) SetHeaders(v map[string]*string) *CreateModelResponse {
	s.Headers = v
	return s
}

func (s *CreateModelResponse) SetStatusCode(v int32) *CreateModelResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateModelResponse) SetBody(v *CreateModelResponseBody) *CreateModelResponse {
	s.Body = v
	return s
}

type CreateMonitorGroupRequest struct {
	// The caller authentication status of the API. Valid values: **ok**: The authentication is successful. **mismatch**: The request is redirected. **servicenotfound**: A request error occurred. **Unknown**: An unknown error occurred.
	//
	// This parameter is required.
	//
	// example:
	//
	// false
	Auth *string `json:"Auth,omitempty" xml:"Auth,omitempty"`
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 6735211ab9094c818f32f27bc545b6c8
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the monitoring group.
	//
	// example:
	//
	// 166636221
	RawMonitorGroupId *int64  `json:"RawMonitorGroupId,omitempty" xml:"RawMonitorGroupId,omitempty"`
	SecurityToken     *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s CreateMonitorGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupRequest) SetAuth(v string) *CreateMonitorGroupRequest {
	s.Auth = &v
	return s
}

func (s *CreateMonitorGroupRequest) SetGroupId(v string) *CreateMonitorGroupRequest {
	s.GroupId = &v
	return s
}

func (s *CreateMonitorGroupRequest) SetRawMonitorGroupId(v int64) *CreateMonitorGroupRequest {
	s.RawMonitorGroupId = &v
	return s
}

func (s *CreateMonitorGroupRequest) SetSecurityToken(v string) *CreateMonitorGroupRequest {
	s.SecurityToken = &v
	return s
}

type CreateMonitorGroupResponseBody struct {
	// The ID of the API group. This ID is generated by the system and is unique globally.
	//
	// example:
	//
	// 187421794
	MonitorGroupId *int64 `json:"MonitorGroupId,omitempty" xml:"MonitorGroupId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 5D7136F7-9D67-5D4D-8418-6A512CCEE3A2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateMonitorGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupResponseBody) SetMonitorGroupId(v int64) *CreateMonitorGroupResponseBody {
	s.MonitorGroupId = &v
	return s
}

func (s *CreateMonitorGroupResponseBody) SetRequestId(v string) *CreateMonitorGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateMonitorGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMonitorGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMonitorGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupResponse) SetHeaders(v map[string]*string) *CreateMonitorGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateMonitorGroupResponse) SetStatusCode(v int32) *CreateMonitorGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMonitorGroupResponse) SetBody(v *CreateMonitorGroupResponseBody) *CreateMonitorGroupResponse {
	s.Body = v
	return s
}

type CreatePluginRequest struct {
	// The description of the plug-in. The description can contain a maximum of 200 characters in length.
	//
	// example:
	//
	// createPlugin
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The plug-in definition. Supported formats: JSON and YAML.
	//
	// This parameter is required.
	//
	// example:
	//
	// Plugin definition
	PluginData *string `json:"PluginData,omitempty" xml:"PluginData,omitempty"`
	// The name of the plug-in. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (_). However, it cannot start with an underscore.
	//
	// This parameter is required.
	//
	// example:
	//
	// NewCors
	PluginName *string `json:"PluginName,omitempty" xml:"PluginName,omitempty"`
	// The type of the plug-in. Valid values:
	//
	// 	- **ipControl: IP address-based access control**
	//
	// 	- **trafficControl: throttling**
	//
	// 	- **backendSignature: backend signature**
	//
	// 	- **jwtAuth*	- :JWT (OpenId Connect) authentication
	//
	// 	- **cors*	- :cross-origin resource sharing (CORS)
	//
	// 	- **caching**
	//
	// This parameter is required.
	//
	// example:
	//
	// cors
	PluginType    *string `json:"PluginType,omitempty" xml:"PluginType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The tag of objects that match the rule. You can specify multiple tags.
	//
	// example:
	//
	// Key， Value
	Tag []*CreatePluginRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreatePluginRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePluginRequest) GoString() string {
	return s.String()
}

func (s *CreatePluginRequest) SetDescription(v string) *CreatePluginRequest {
	s.Description = &v
	return s
}

func (s *CreatePluginRequest) SetPluginData(v string) *CreatePluginRequest {
	s.PluginData = &v
	return s
}

func (s *CreatePluginRequest) SetPluginName(v string) *CreatePluginRequest {
	s.PluginName = &v
	return s
}

func (s *CreatePluginRequest) SetPluginType(v string) *CreatePluginRequest {
	s.PluginType = &v
	return s
}

func (s *CreatePluginRequest) SetSecurityToken(v string) *CreatePluginRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreatePluginRequest) SetTag(v []*CreatePluginRequestTag) *CreatePluginRequest {
	s.Tag = v
	return s
}

type CreatePluginRequestTag struct {
	// The key of the tag.
	//
	// N can be an integer from 1 to 20.``
	//
	// This parameter is required.
	//
	// example:
	//
	// env
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// N can be an integer from 1 to 20.``
	//
	// This parameter is required.
	//
	// example:
	//
	// \\" \\"
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreatePluginRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreatePluginRequestTag) GoString() string {
	return s.String()
}

func (s *CreatePluginRequestTag) SetKey(v string) *CreatePluginRequestTag {
	s.Key = &v
	return s
}

func (s *CreatePluginRequestTag) SetValue(v string) *CreatePluginRequestTag {
	s.Value = &v
	return s
}

type CreatePluginResponseBody struct {
	// The ID of the plug-in.
	//
	// example:
	//
	// 1f3bde29b43d4d53989248327ff737f2
	PluginId *string `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// EF924FE4-2EDD-4CD3-89EC-34E4708574E7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the plug-in is successfully marked.
	//
	// example:
	//
	// true
	TagStatus *bool `json:"TagStatus,omitempty" xml:"TagStatus,omitempty"`
}

func (s CreatePluginResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePluginResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePluginResponseBody) SetPluginId(v string) *CreatePluginResponseBody {
	s.PluginId = &v
	return s
}

func (s *CreatePluginResponseBody) SetRequestId(v string) *CreatePluginResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePluginResponseBody) SetTagStatus(v bool) *CreatePluginResponseBody {
	s.TagStatus = &v
	return s
}

type CreatePluginResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePluginResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePluginResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePluginResponse) GoString() string {
	return s.String()
}

func (s *CreatePluginResponse) SetHeaders(v map[string]*string) *CreatePluginResponse {
	s.Headers = v
	return s
}

func (s *CreatePluginResponse) SetStatusCode(v int32) *CreatePluginResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePluginResponse) SetBody(v *CreatePluginResponseBody) *CreatePluginResponse {
	s.Body = v
	return s
}

type CreateSignatureRequest struct {
	// The security token included in the WebSocket request header. The system uses this token to authenticate the request.
	//
	// example:
	//
	// fa876ffb-caab-4f0a-93b3-3409f2fa5199
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The Key value of the key. The value must be 6 to 20 characters in length and can contain letters, digits, and underscores (_). It must start with a letter.
	//
	// This parameter is required.
	//
	// example:
	//
	// qwertyuiop
	SignatureKey *string `json:"SignatureKey,omitempty" xml:"SignatureKey,omitempty"`
	// The displayed name of the key. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (_). It must start with a letter.
	//
	// This parameter is required.
	//
	// example:
	//
	// backendsignature
	SignatureName *string `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
	// The Secret value of the key. The value must be 6 to 30 characters in length and can contain letters, digits, and special characters. Special characters include underscores (_), at signs (@), number signs (#), exclamation points (!), and asterisks (\\*). The value must start with a letter.
	//
	// This parameter is required.
	//
	// example:
	//
	// asdfghjkl
	SignatureSecret *string `json:"SignatureSecret,omitempty" xml:"SignatureSecret,omitempty"`
}

func (s CreateSignatureRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSignatureRequest) GoString() string {
	return s.String()
}

func (s *CreateSignatureRequest) SetSecurityToken(v string) *CreateSignatureRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateSignatureRequest) SetSignatureKey(v string) *CreateSignatureRequest {
	s.SignatureKey = &v
	return s
}

func (s *CreateSignatureRequest) SetSignatureName(v string) *CreateSignatureRequest {
	s.SignatureName = &v
	return s
}

func (s *CreateSignatureRequest) SetSignatureSecret(v string) *CreateSignatureRequest {
	s.SignatureSecret = &v
	return s
}

type CreateSignatureResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the back-end signature key.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// The name of the back-end signature key.
	//
	// example:
	//
	// backendsignature
	SignatureName *string `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
}

func (s CreateSignatureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSignatureResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSignatureResponseBody) SetRequestId(v string) *CreateSignatureResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSignatureResponseBody) SetSignatureId(v string) *CreateSignatureResponseBody {
	s.SignatureId = &v
	return s
}

func (s *CreateSignatureResponseBody) SetSignatureName(v string) *CreateSignatureResponseBody {
	s.SignatureName = &v
	return s
}

type CreateSignatureResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSignatureResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSignatureResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSignatureResponse) GoString() string {
	return s.String()
}

func (s *CreateSignatureResponse) SetHeaders(v map[string]*string) *CreateSignatureResponse {
	s.Headers = v
	return s
}

func (s *CreateSignatureResponse) SetStatusCode(v int32) *CreateSignatureResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSignatureResponse) SetBody(v *CreateSignatureResponseBody) *CreateSignatureResponse {
	s.Body = v
	return s
}

type CreateTrafficControlRequest struct {
	// The default throttling value for each API.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10000
	ApiDefault *int32 `json:"ApiDefault,omitempty" xml:"ApiDefault,omitempty"`
	// The default throttling value for each app.
	//
	// example:
	//
	// 10000
	AppDefault *int32 `json:"AppDefault,omitempty" xml:"AppDefault,omitempty"`
	// The description of the throttling policy.
	//
	// example:
	//
	// ThrottlingTestDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The security token included in the WebSocket request header. The system uses this token to authenticate the request.
	//
	// example:
	//
	// 436fa39b-b3b9-40c5-ae5d-ce3e000e38c5
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the throttling policy. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (_). It cannot start with an underscore.
	//
	// This parameter is required.
	//
	// example:
	//
	// ThrottlingTest
	TrafficControlName *string `json:"TrafficControlName,omitempty" xml:"TrafficControlName,omitempty"`
	// The unit to be used in the throttling policy. Valid values:
	//
	// 	- **SECOND**
	//
	// 	- **MINUTE**
	//
	// 	- **HOUR**
	//
	// 	- **DAY**
	//
	// This parameter is required.
	//
	// example:
	//
	// MINUTE
	TrafficControlUnit *string `json:"TrafficControlUnit,omitempty" xml:"TrafficControlUnit,omitempty"`
	// The default throttling value for each user.
	//
	// example:
	//
	// 10000
	UserDefault *int32 `json:"UserDefault,omitempty" xml:"UserDefault,omitempty"`
}

func (s CreateTrafficControlRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTrafficControlRequest) GoString() string {
	return s.String()
}

func (s *CreateTrafficControlRequest) SetApiDefault(v int32) *CreateTrafficControlRequest {
	s.ApiDefault = &v
	return s
}

func (s *CreateTrafficControlRequest) SetAppDefault(v int32) *CreateTrafficControlRequest {
	s.AppDefault = &v
	return s
}

func (s *CreateTrafficControlRequest) SetDescription(v string) *CreateTrafficControlRequest {
	s.Description = &v
	return s
}

func (s *CreateTrafficControlRequest) SetSecurityToken(v string) *CreateTrafficControlRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateTrafficControlRequest) SetTrafficControlName(v string) *CreateTrafficControlRequest {
	s.TrafficControlName = &v
	return s
}

func (s *CreateTrafficControlRequest) SetTrafficControlUnit(v string) *CreateTrafficControlRequest {
	s.TrafficControlUnit = &v
	return s
}

func (s *CreateTrafficControlRequest) SetUserDefault(v int32) *CreateTrafficControlRequest {
	s.UserDefault = &v
	return s
}

type CreateTrafficControlResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the throttling policy.
	//
	// example:
	//
	// tf123456
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
}

func (s CreateTrafficControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTrafficControlResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTrafficControlResponseBody) SetRequestId(v string) *CreateTrafficControlResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTrafficControlResponseBody) SetTrafficControlId(v string) *CreateTrafficControlResponseBody {
	s.TrafficControlId = &v
	return s
}

type CreateTrafficControlResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateTrafficControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateTrafficControlResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTrafficControlResponse) GoString() string {
	return s.String()
}

func (s *CreateTrafficControlResponse) SetHeaders(v map[string]*string) *CreateTrafficControlResponse {
	s.Headers = v
	return s
}

func (s *CreateTrafficControlResponse) SetStatusCode(v int32) *CreateTrafficControlResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTrafficControlResponse) SetBody(v *CreateTrafficControlResponseBody) *CreateTrafficControlResponse {
	s.Body = v
	return s
}

type DeleteAccessControlListRequest struct {
	// The ID of the access control policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// acl-uf6fpfdg3b5muska7uqem
	AclId         *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteAccessControlListRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAccessControlListRequest) GoString() string {
	return s.String()
}

func (s *DeleteAccessControlListRequest) SetAclId(v string) *DeleteAccessControlListRequest {
	s.AclId = &v
	return s
}

func (s *DeleteAccessControlListRequest) SetSecurityToken(v string) *DeleteAccessControlListRequest {
	s.SecurityToken = &v
	return s
}

type DeleteAccessControlListResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EF924FE4-2EDD-4CD3-89EC-34E4708574E7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAccessControlListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAccessControlListResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAccessControlListResponseBody) SetRequestId(v string) *DeleteAccessControlListResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAccessControlListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAccessControlListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAccessControlListResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAccessControlListResponse) GoString() string {
	return s.String()
}

func (s *DeleteAccessControlListResponse) SetHeaders(v map[string]*string) *DeleteAccessControlListResponse {
	s.Headers = v
	return s
}

func (s *DeleteAccessControlListResponse) SetStatusCode(v int32) *DeleteAccessControlListResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAccessControlListResponse) SetBody(v *DeleteAccessControlListResponseBody) *DeleteAccessControlListResponse {
	s.Body = v
	return s
}

type DeleteAllTrafficSpecialControlRequest struct {
	// The security token included in the WebSocket request header. The system uses this token to authenticate the request.
	//
	// example:
	//
	// fa876ffb-caab-4f0a-93b3-3409f2fa5199
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the throttling policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// tf123456
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
}

func (s DeleteAllTrafficSpecialControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAllTrafficSpecialControlRequest) GoString() string {
	return s.String()
}

func (s *DeleteAllTrafficSpecialControlRequest) SetSecurityToken(v string) *DeleteAllTrafficSpecialControlRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteAllTrafficSpecialControlRequest) SetTrafficControlId(v string) *DeleteAllTrafficSpecialControlRequest {
	s.TrafficControlId = &v
	return s
}

type DeleteAllTrafficSpecialControlResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAllTrafficSpecialControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAllTrafficSpecialControlResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAllTrafficSpecialControlResponseBody) SetRequestId(v string) *DeleteAllTrafficSpecialControlResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAllTrafficSpecialControlResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAllTrafficSpecialControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAllTrafficSpecialControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAllTrafficSpecialControlResponse) GoString() string {
	return s.String()
}

func (s *DeleteAllTrafficSpecialControlResponse) SetHeaders(v map[string]*string) *DeleteAllTrafficSpecialControlResponse {
	s.Headers = v
	return s
}

func (s *DeleteAllTrafficSpecialControlResponse) SetStatusCode(v int32) *DeleteAllTrafficSpecialControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAllTrafficSpecialControlResponse) SetBody(v *DeleteAllTrafficSpecialControlResponseBody) *DeleteAllTrafficSpecialControlResponse {
	s.Body = v
	return s
}

type DeleteApiRequest struct {
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// d6f679aeb3be4b91b3688e887ca1fe16
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 08ae4aa0f95e4321849ee57f4e0b3077
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiRequest) GoString() string {
	return s.String()
}

func (s *DeleteApiRequest) SetApiId(v string) *DeleteApiRequest {
	s.ApiId = &v
	return s
}

func (s *DeleteApiRequest) SetGroupId(v string) *DeleteApiRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteApiRequest) SetSecurityToken(v string) *DeleteApiRequest {
	s.SecurityToken = &v
	return s
}

type DeleteApiResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ017
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteApiResponseBody) SetRequestId(v string) *DeleteApiResponseBody {
	s.RequestId = &v
	return s
}

type DeleteApiResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteApiResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiResponse) GoString() string {
	return s.String()
}

func (s *DeleteApiResponse) SetHeaders(v map[string]*string) *DeleteApiResponse {
	s.Headers = v
	return s
}

func (s *DeleteApiResponse) SetStatusCode(v int32) *DeleteApiResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteApiResponse) SetBody(v *DeleteApiResponseBody) *DeleteApiResponse {
	s.Body = v
	return s
}

type DeleteApiGroupRequest struct {
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 523e8dc7bbe04613b5b1d726c2a7889d
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The object tags that match the lifecycle rule. You can specify multiple tags.
	//
	// example:
	//
	// Key， Value
	Tag []*DeleteApiGroupRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DeleteApiGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteApiGroupRequest) SetGroupId(v string) *DeleteApiGroupRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteApiGroupRequest) SetSecurityToken(v string) *DeleteApiGroupRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteApiGroupRequest) SetTag(v []*DeleteApiGroupRequestTag) *DeleteApiGroupRequest {
	s.Tag = v
	return s
}

type DeleteApiGroupRequestTag struct {
	// The key of the tag.
	//
	// This parameter is required.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// This parameter is required.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DeleteApiGroupRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiGroupRequestTag) GoString() string {
	return s.String()
}

func (s *DeleteApiGroupRequestTag) SetKey(v string) *DeleteApiGroupRequestTag {
	s.Key = &v
	return s
}

func (s *DeleteApiGroupRequestTag) SetValue(v string) *DeleteApiGroupRequestTag {
	s.Value = &v
	return s
}

type DeleteApiGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// E8515BA6-81CD-4191-A7CF-C4FCDD3C0D99
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteApiGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteApiGroupResponseBody) SetRequestId(v string) *DeleteApiGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteApiGroupResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteApiGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteApiGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteApiGroupResponse) SetHeaders(v map[string]*string) *DeleteApiGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteApiGroupResponse) SetStatusCode(v int32) *DeleteApiGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteApiGroupResponse) SetBody(v *DeleteApiGroupResponseBody) *DeleteApiGroupResponse {
	s.Body = v
	return s
}

type DeleteApiProductRequest struct {
	// The ID of the API product.
	//
	// This parameter is required.
	//
	// example:
	//
	// 117b7a64a8b3f064eaa4a47ac62aac5e
	ApiProductId  *string `json:"ApiProductId,omitempty" xml:"ApiProductId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteApiProductRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiProductRequest) GoString() string {
	return s.String()
}

func (s *DeleteApiProductRequest) SetApiProductId(v string) *DeleteApiProductRequest {
	s.ApiProductId = &v
	return s
}

func (s *DeleteApiProductRequest) SetSecurityToken(v string) *DeleteApiProductRequest {
	s.SecurityToken = &v
	return s
}

type DeleteApiProductResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ002
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteApiProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiProductResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteApiProductResponseBody) SetRequestId(v string) *DeleteApiProductResponseBody {
	s.RequestId = &v
	return s
}

type DeleteApiProductResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteApiProductResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteApiProductResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiProductResponse) GoString() string {
	return s.String()
}

func (s *DeleteApiProductResponse) SetHeaders(v map[string]*string) *DeleteApiProductResponse {
	s.Headers = v
	return s
}

func (s *DeleteApiProductResponse) SetStatusCode(v int32) *DeleteApiProductResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteApiProductResponse) SetBody(v *DeleteApiProductResponseBody) *DeleteApiProductResponse {
	s.Body = v
	return s
}

type DeleteApiStageVariableRequest struct {
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 523e8dc7bbe04613b5b1d726c2a7889d
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the runtime environment.
	//
	// This parameter is required.
	//
	// example:
	//
	// 6EF60BEC-0242-43AF-BB20-270359FB54A7
	StageId *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	// The name of the variable to be deleted. This parameter is case-sensitive.
	//
	// This parameter is required.
	//
	// example:
	//
	// serverName
	VariableName *string `json:"VariableName,omitempty" xml:"VariableName,omitempty"`
}

func (s DeleteApiStageVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiStageVariableRequest) GoString() string {
	return s.String()
}

func (s *DeleteApiStageVariableRequest) SetGroupId(v string) *DeleteApiStageVariableRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteApiStageVariableRequest) SetSecurityToken(v string) *DeleteApiStageVariableRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteApiStageVariableRequest) SetStageId(v string) *DeleteApiStageVariableRequest {
	s.StageId = &v
	return s
}

func (s *DeleteApiStageVariableRequest) SetVariableName(v string) *DeleteApiStageVariableRequest {
	s.VariableName = &v
	return s
}

type DeleteApiStageVariableResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 03442A3D-3B7D-434C-8A95-A5FEB969B529
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteApiStageVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiStageVariableResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteApiStageVariableResponseBody) SetRequestId(v string) *DeleteApiStageVariableResponseBody {
	s.RequestId = &v
	return s
}

type DeleteApiStageVariableResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteApiStageVariableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteApiStageVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiStageVariableResponse) GoString() string {
	return s.String()
}

func (s *DeleteApiStageVariableResponse) SetHeaders(v map[string]*string) *DeleteApiStageVariableResponse {
	s.Headers = v
	return s
}

func (s *DeleteApiStageVariableResponse) SetStatusCode(v int32) *DeleteApiStageVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteApiStageVariableResponse) SetBody(v *DeleteApiStageVariableResponseBody) *DeleteApiStageVariableResponse {
	s.Body = v
	return s
}

type DeleteAppRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// 110840611
	AppId         *int64  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The tags. Up to 20 tags are allowed.
	//
	// example:
	//
	// test2
	Tag []*DeleteAppRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DeleteAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppRequest) GoString() string {
	return s.String()
}

func (s *DeleteAppRequest) SetAppId(v int64) *DeleteAppRequest {
	s.AppId = &v
	return s
}

func (s *DeleteAppRequest) SetSecurityToken(v string) *DeleteAppRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteAppRequest) SetTag(v []*DeleteAppRequestTag) *DeleteAppRequest {
	s.Tag = v
	return s
}

type DeleteAppRequestTag struct {
	// The key of the tag.
	//
	// This parameter is required.
	//
	// example:
	//
	// appname
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// testapp
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DeleteAppRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppRequestTag) GoString() string {
	return s.String()
}

func (s *DeleteAppRequestTag) SetKey(v string) *DeleteAppRequestTag {
	s.Key = &v
	return s
}

func (s *DeleteAppRequestTag) SetValue(v string) *DeleteAppRequestTag {
	s.Value = &v
	return s
}

type DeleteAppResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ015
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAppResponseBody) SetRequestId(v string) *DeleteAppResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAppResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppResponse) GoString() string {
	return s.String()
}

func (s *DeleteAppResponse) SetHeaders(v map[string]*string) *DeleteAppResponse {
	s.Headers = v
	return s
}

func (s *DeleteAppResponse) SetStatusCode(v int32) *DeleteAppResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAppResponse) SetBody(v *DeleteAppResponseBody) *DeleteAppResponse {
	s.Body = v
	return s
}

type DeleteAppCodeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 0d13f021c5cd4997831a9717e75b0663
	AppCode *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 111265074
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s DeleteAppCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppCodeRequest) GoString() string {
	return s.String()
}

func (s *DeleteAppCodeRequest) SetAppCode(v string) *DeleteAppCodeRequest {
	s.AppCode = &v
	return s
}

func (s *DeleteAppCodeRequest) SetAppId(v string) *DeleteAppCodeRequest {
	s.AppId = &v
	return s
}

type DeleteAppCodeResponseBody struct {
	// example:
	//
	// E8515BA6-81CD-4191-A7CF-C4FCDD3C0D99
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAppCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppCodeResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAppCodeResponseBody) SetRequestId(v string) *DeleteAppCodeResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAppCodeResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAppCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAppCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppCodeResponse) GoString() string {
	return s.String()
}

func (s *DeleteAppCodeResponse) SetHeaders(v map[string]*string) *DeleteAppCodeResponse {
	s.Headers = v
	return s
}

func (s *DeleteAppCodeResponse) SetStatusCode(v int32) *DeleteAppCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAppCodeResponse) SetBody(v *DeleteAppCodeResponseBody) *DeleteAppCodeResponse {
	s.Body = v
	return s
}

type DeleteAppKeyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 110840611
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 203708622
	AppKey *string `json:"AppKey,omitempty" xml:"AppKey,omitempty"`
}

func (s DeleteAppKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppKeyRequest) GoString() string {
	return s.String()
}

func (s *DeleteAppKeyRequest) SetAppId(v string) *DeleteAppKeyRequest {
	s.AppId = &v
	return s
}

func (s *DeleteAppKeyRequest) SetAppKey(v string) *DeleteAppKeyRequest {
	s.AppKey = &v
	return s
}

type DeleteAppKeyResponseBody struct {
	// example:
	//
	// 79EF055D-AC00-5161-8F35-6A36AAED7422
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAppKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppKeyResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAppKeyResponseBody) SetRequestId(v string) *DeleteAppKeyResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAppKeyResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAppKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAppKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppKeyResponse) GoString() string {
	return s.String()
}

func (s *DeleteAppKeyResponse) SetHeaders(v map[string]*string) *DeleteAppKeyResponse {
	s.Headers = v
	return s
}

func (s *DeleteAppKeyResponse) SetStatusCode(v int32) *DeleteAppKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAppKeyResponse) SetBody(v *DeleteAppKeyResponseBody) *DeleteAppKeyResponse {
	s.Body = v
	return s
}

type DeleteBackendRequest struct {
	// The ID of the backend service.
	//
	// example:
	//
	// 27be0dd9ebbc467b9e86c0d250d0b92e
	BackendId     *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteBackendRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackendRequest) GoString() string {
	return s.String()
}

func (s *DeleteBackendRequest) SetBackendId(v string) *DeleteBackendRequest {
	s.BackendId = &v
	return s
}

func (s *DeleteBackendRequest) SetSecurityToken(v string) *DeleteBackendRequest {
	s.SecurityToken = &v
	return s
}

type DeleteBackendResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// AD00F8C0-311B-54A9-ADE2-2436771012DA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteBackendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackendResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBackendResponseBody) SetRequestId(v string) *DeleteBackendResponseBody {
	s.RequestId = &v
	return s
}

type DeleteBackendResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteBackendResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteBackendResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackendResponse) GoString() string {
	return s.String()
}

func (s *DeleteBackendResponse) SetHeaders(v map[string]*string) *DeleteBackendResponse {
	s.Headers = v
	return s
}

func (s *DeleteBackendResponse) SetStatusCode(v int32) *DeleteBackendResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteBackendResponse) SetBody(v *DeleteBackendResponseBody) *DeleteBackendResponse {
	s.Body = v
	return s
}

type DeleteBackendModelRequest struct {
	// example:
	//
	// 20bcdc9453524b78a8beb1f6de21edb7
	BackendId *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 4be6b110b7aa40b0bf0c83cc00b3bd86
	BackendModelId *string `json:"BackendModelId,omitempty" xml:"BackendModelId,omitempty"`
	SecurityToken  *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DeleteBackendModelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackendModelRequest) GoString() string {
	return s.String()
}

func (s *DeleteBackendModelRequest) SetBackendId(v string) *DeleteBackendModelRequest {
	s.BackendId = &v
	return s
}

func (s *DeleteBackendModelRequest) SetBackendModelId(v string) *DeleteBackendModelRequest {
	s.BackendModelId = &v
	return s
}

func (s *DeleteBackendModelRequest) SetSecurityToken(v string) *DeleteBackendModelRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteBackendModelRequest) SetStageName(v string) *DeleteBackendModelRequest {
	s.StageName = &v
	return s
}

type DeleteBackendModelResponseBody struct {
	// example:
	//
	// f7834d74be4e41aa8e607b0fafae9b33
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	// example:
	//
	// D1B18FFE-4A81-59D8-AA02-1817098977CD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteBackendModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackendModelResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBackendModelResponseBody) SetOperationId(v string) *DeleteBackendModelResponseBody {
	s.OperationId = &v
	return s
}

func (s *DeleteBackendModelResponseBody) SetRequestId(v string) *DeleteBackendModelResponseBody {
	s.RequestId = &v
	return s
}

type DeleteBackendModelResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteBackendModelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteBackendModelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackendModelResponse) GoString() string {
	return s.String()
}

func (s *DeleteBackendModelResponse) SetHeaders(v map[string]*string) *DeleteBackendModelResponse {
	s.Headers = v
	return s
}

func (s *DeleteBackendModelResponse) SetStatusCode(v int32) *DeleteBackendModelResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteBackendModelResponse) SetBody(v *DeleteBackendModelResponseBody) *DeleteBackendModelResponse {
	s.Body = v
	return s
}

type DeleteDatasetRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// a25a6589b2584ff490e891cc********
	DatasetId     *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteDatasetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetRequest) GoString() string {
	return s.String()
}

func (s *DeleteDatasetRequest) SetDatasetId(v string) *DeleteDatasetRequest {
	s.DatasetId = &v
	return s
}

func (s *DeleteDatasetRequest) SetSecurityToken(v string) *DeleteDatasetRequest {
	s.SecurityToken = &v
	return s
}

type DeleteDatasetResponseBody struct {
	// example:
	//
	// 048C8EFB-528F-5E97-8A3D-D17B********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDatasetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDatasetResponseBody) SetRequestId(v string) *DeleteDatasetResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDatasetResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDatasetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDatasetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetResponse) GoString() string {
	return s.String()
}

func (s *DeleteDatasetResponse) SetHeaders(v map[string]*string) *DeleteDatasetResponse {
	s.Headers = v
	return s
}

func (s *DeleteDatasetResponse) SetStatusCode(v int32) *DeleteDatasetResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDatasetResponse) SetBody(v *DeleteDatasetResponseBody) *DeleteDatasetResponse {
	s.Body = v
	return s
}

type DeleteDatasetItemRequest struct {
	// The ID of the dataset.
	//
	// This parameter is required.
	//
	// example:
	//
	// a25a6589b2584ff490e891cc********
	DatasetId *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// The ID of the data entry.
	//
	// This parameter is required.
	//
	// example:
	//
	// 5045****
	DatasetItemId *string `json:"DatasetItemId,omitempty" xml:"DatasetItemId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteDatasetItemRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetItemRequest) GoString() string {
	return s.String()
}

func (s *DeleteDatasetItemRequest) SetDatasetId(v string) *DeleteDatasetItemRequest {
	s.DatasetId = &v
	return s
}

func (s *DeleteDatasetItemRequest) SetDatasetItemId(v string) *DeleteDatasetItemRequest {
	s.DatasetItemId = &v
	return s
}

func (s *DeleteDatasetItemRequest) SetSecurityToken(v string) *DeleteDatasetItemRequest {
	s.SecurityToken = &v
	return s
}

type DeleteDatasetItemResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// FF433E09-663A-5F5D-9DBA-A611********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDatasetItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetItemResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDatasetItemResponseBody) SetRequestId(v string) *DeleteDatasetItemResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDatasetItemResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDatasetItemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDatasetItemResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetItemResponse) GoString() string {
	return s.String()
}

func (s *DeleteDatasetItemResponse) SetHeaders(v map[string]*string) *DeleteDatasetItemResponse {
	s.Headers = v
	return s
}

func (s *DeleteDatasetItemResponse) SetStatusCode(v int32) *DeleteDatasetItemResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDatasetItemResponse) SetBody(v *DeleteDatasetItemResponseBody) *DeleteDatasetItemResponse {
	s.Body = v
	return s
}

type DeleteDomainRequest struct {
	// The custom domain name.
	//
	// This parameter is required.
	//
	// example:
	//
	// api.demo.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The ID of the API group to which the domain name to be unbound is bound. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 927d50c0f2e54b359919923d908bb015
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDomainRequest) GoString() string {
	return s.String()
}

func (s *DeleteDomainRequest) SetDomainName(v string) *DeleteDomainRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteDomainRequest) SetGroupId(v string) *DeleteDomainRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteDomainRequest) SetSecurityToken(v string) *DeleteDomainRequest {
	s.SecurityToken = &v
	return s
}

type DeleteDomainResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 6EF60BEC-0242-43AF-BB20-270359FB54A7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDomainResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDomainResponseBody) SetRequestId(v string) *DeleteDomainResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDomainResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDomainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDomainResponse) GoString() string {
	return s.String()
}

func (s *DeleteDomainResponse) SetHeaders(v map[string]*string) *DeleteDomainResponse {
	s.Headers = v
	return s
}

func (s *DeleteDomainResponse) SetStatusCode(v int32) *DeleteDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDomainResponse) SetBody(v *DeleteDomainResponseBody) *DeleteDomainResponse {
	s.Body = v
	return s
}

type DeleteDomainCertificateRequest struct {
	// The ID of the SSL certificate that you want to delete. The ID is automatically generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// c621720d1eb34843822b7fb5148e6926
	CertificateId *string `json:"CertificateId,omitempty" xml:"CertificateId,omitempty"`
	// The custom domain name.
	//
	// This parameter is required.
	//
	// example:
	//
	// api.demo.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 927d50c0f2e54b359919923d908bb015
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteDomainCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDomainCertificateRequest) GoString() string {
	return s.String()
}

func (s *DeleteDomainCertificateRequest) SetCertificateId(v string) *DeleteDomainCertificateRequest {
	s.CertificateId = &v
	return s
}

func (s *DeleteDomainCertificateRequest) SetDomainName(v string) *DeleteDomainCertificateRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteDomainCertificateRequest) SetGroupId(v string) *DeleteDomainCertificateRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteDomainCertificateRequest) SetSecurityToken(v string) *DeleteDomainCertificateRequest {
	s.SecurityToken = &v
	return s
}

type DeleteDomainCertificateResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CE5722A6-AE78-4741-A9B0-6C817D360510
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDomainCertificateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDomainCertificateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDomainCertificateResponseBody) SetRequestId(v string) *DeleteDomainCertificateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDomainCertificateResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDomainCertificateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDomainCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDomainCertificateResponse) GoString() string {
	return s.String()
}

func (s *DeleteDomainCertificateResponse) SetHeaders(v map[string]*string) *DeleteDomainCertificateResponse {
	s.Headers = v
	return s
}

func (s *DeleteDomainCertificateResponse) SetStatusCode(v int32) *DeleteDomainCertificateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDomainCertificateResponse) SetBody(v *DeleteDomainCertificateResponseBody) *DeleteDomainCertificateResponse {
	s.Body = v
	return s
}

type DeleteInstanceRequest struct {
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// apigateway-sh-ae502ee79ef8
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The tag of objects that match the lifecycle rule. You can specify multiple tags.
	//
	// example:
	//
	// Key， Value
	Tag []*DeleteInstanceRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DeleteInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteInstanceRequest) SetInstanceId(v string) *DeleteInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteInstanceRequest) SetTag(v []*DeleteInstanceRequestTag) *DeleteInstanceRequest {
	s.Tag = v
	return s
}

type DeleteInstanceRequestTag struct {
	// The key of the tag.
	//
	// This parameter is required.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// This parameter is required.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DeleteInstanceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceRequestTag) GoString() string {
	return s.String()
}

func (s *DeleteInstanceRequestTag) SetKey(v string) *DeleteInstanceRequestTag {
	s.Key = &v
	return s
}

func (s *DeleteInstanceRequestTag) SetValue(v string) *DeleteInstanceRequestTag {
	s.Value = &v
	return s
}

type DeleteInstanceResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CA4B3261-F14A-5E33-8608-F75A1DF27AD4
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteInstanceResponseBody) SetRequestId(v string) *DeleteInstanceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteInstanceResponse) SetHeaders(v map[string]*string) *DeleteInstanceResponse {
	s.Headers = v
	return s
}

func (s *DeleteInstanceResponse) SetStatusCode(v int32) *DeleteInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteInstanceResponse) SetBody(v *DeleteInstanceResponseBody) *DeleteInstanceResponse {
	s.Body = v
	return s
}

type DeleteIpControlRequest struct {
	// The ID of the ACL. The ID is unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7ea91319a34d48a09b5c9c871d9768b1
	IpControlId   *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteIpControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteIpControlRequest) GoString() string {
	return s.String()
}

func (s *DeleteIpControlRequest) SetIpControlId(v string) *DeleteIpControlRequest {
	s.IpControlId = &v
	return s
}

func (s *DeleteIpControlRequest) SetSecurityToken(v string) *DeleteIpControlRequest {
	s.SecurityToken = &v
	return s
}

type DeleteIpControlResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteIpControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteIpControlResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteIpControlResponseBody) SetRequestId(v string) *DeleteIpControlResponseBody {
	s.RequestId = &v
	return s
}

type DeleteIpControlResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteIpControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteIpControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteIpControlResponse) GoString() string {
	return s.String()
}

func (s *DeleteIpControlResponse) SetHeaders(v map[string]*string) *DeleteIpControlResponse {
	s.Headers = v
	return s
}

func (s *DeleteIpControlResponse) SetStatusCode(v int32) *DeleteIpControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteIpControlResponse) SetBody(v *DeleteIpControlResponseBody) *DeleteIpControlResponse {
	s.Body = v
	return s
}

type DeleteLogConfigRequest struct {
	// The log type. Valid values: **log*	- and **survey**.
	//
	// example:
	//
	// log
	LogType       *string `json:"LogType,omitempty" xml:"LogType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteLogConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLogConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLogConfigRequest) SetLogType(v string) *DeleteLogConfigRequest {
	s.LogType = &v
	return s
}

func (s *DeleteLogConfigRequest) SetSecurityToken(v string) *DeleteLogConfigRequest {
	s.SecurityToken = &v
	return s
}

type DeleteLogConfigResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ016
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLogConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLogConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLogConfigResponseBody) SetRequestId(v string) *DeleteLogConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLogConfigResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLogConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLogConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLogConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLogConfigResponse) SetHeaders(v map[string]*string) *DeleteLogConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLogConfigResponse) SetStatusCode(v int32) *DeleteLogConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLogConfigResponse) SetBody(v *DeleteLogConfigResponseBody) *DeleteLogConfigResponse {
	s.Body = v
	return s
}

type DeleteModelRequest struct {
	// The ID of the API group to which the model belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 30e792398d6c4569b04c0e53a3494381
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the model.
	//
	// This parameter is required.
	//
	// example:
	//
	// Test
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
}

func (s DeleteModelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteModelRequest) GoString() string {
	return s.String()
}

func (s *DeleteModelRequest) SetGroupId(v string) *DeleteModelRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteModelRequest) SetModelName(v string) *DeleteModelRequest {
	s.ModelName = &v
	return s
}

type DeleteModelResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 4173F95B-360C-460C-9F6C-4A960B904411
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteModelResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteModelResponseBody) SetRequestId(v string) *DeleteModelResponseBody {
	s.RequestId = &v
	return s
}

type DeleteModelResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteModelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteModelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteModelResponse) GoString() string {
	return s.String()
}

func (s *DeleteModelResponse) SetHeaders(v map[string]*string) *DeleteModelResponse {
	s.Headers = v
	return s
}

func (s *DeleteModelResponse) SetStatusCode(v int32) *DeleteModelResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteModelResponse) SetBody(v *DeleteModelResponseBody) *DeleteModelResponse {
	s.Body = v
	return s
}

type DeleteMonitorGroupRequest struct {
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 42925e7f5209438186d5560239af5286
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the monitoring group.
	//
	// example:
	//
	// 166636221
	RawMonitorGroupId *int64  `json:"RawMonitorGroupId,omitempty" xml:"RawMonitorGroupId,omitempty"`
	SecurityToken     *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteMonitorGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupRequest) SetGroupId(v string) *DeleteMonitorGroupRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteMonitorGroupRequest) SetRawMonitorGroupId(v int64) *DeleteMonitorGroupRequest {
	s.RawMonitorGroupId = &v
	return s
}

func (s *DeleteMonitorGroupRequest) SetSecurityToken(v string) *DeleteMonitorGroupRequest {
	s.SecurityToken = &v
	return s
}

type DeleteMonitorGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// C7E2CBAA-47FF-569F-AF12-B14B80E25422
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMonitorGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupResponseBody) SetRequestId(v string) *DeleteMonitorGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMonitorGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMonitorGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMonitorGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupResponse) SetHeaders(v map[string]*string) *DeleteMonitorGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteMonitorGroupResponse) SetStatusCode(v int32) *DeleteMonitorGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMonitorGroupResponse) SetBody(v *DeleteMonitorGroupResponseBody) *DeleteMonitorGroupResponse {
	s.Body = v
	return s
}

type DeletePluginRequest struct {
	// The ID of the plug-in to be deleted.
	//
	// This parameter is required.
	//
	// example:
	//
	// 9a3f1a5279434f2ba74ccd91c295af9f
	PluginId      *string `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The tag of objects that match the rule. You can specify multiple tags.
	Tag []*DeletePluginRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DeletePluginRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePluginRequest) GoString() string {
	return s.String()
}

func (s *DeletePluginRequest) SetPluginId(v string) *DeletePluginRequest {
	s.PluginId = &v
	return s
}

func (s *DeletePluginRequest) SetSecurityToken(v string) *DeletePluginRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeletePluginRequest) SetTag(v []*DeletePluginRequestTag) *DeletePluginRequest {
	s.Tag = v
	return s
}

type DeletePluginRequestTag struct {
	// The key of the tag.
	//
	// N can be an integer from 1 to 20.``
	//
	// This parameter is required.
	//
	// example:
	//
	// env
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// N can be an integer from 1 to 20.``
	//
	// This parameter is required.
	//
	// example:
	//
	// \\" \\"
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DeletePluginRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DeletePluginRequestTag) GoString() string {
	return s.String()
}

func (s *DeletePluginRequestTag) SetKey(v string) *DeletePluginRequestTag {
	s.Key = &v
	return s
}

func (s *DeletePluginRequestTag) SetValue(v string) *DeletePluginRequestTag {
	s.Value = &v
	return s
}

type DeletePluginResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePluginResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePluginResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePluginResponseBody) SetRequestId(v string) *DeletePluginResponseBody {
	s.RequestId = &v
	return s
}

type DeletePluginResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePluginResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePluginResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePluginResponse) GoString() string {
	return s.String()
}

func (s *DeletePluginResponse) SetHeaders(v map[string]*string) *DeletePluginResponse {
	s.Headers = v
	return s
}

func (s *DeletePluginResponse) SetStatusCode(v int32) *DeletePluginResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePluginResponse) SetBody(v *DeletePluginResponseBody) *DeletePluginResponse {
	s.Body = v
	return s
}

type DeleteSignatureRequest struct {
	// The security token included in the WebSocket request header. The system uses this token to authenticate the request.
	//
	// example:
	//
	// 9abe3317-3e22-4957-ab9f-dd893d0ac956
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the key to be deleted.
	//
	// This parameter is required.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
}

func (s DeleteSignatureRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSignatureRequest) GoString() string {
	return s.String()
}

func (s *DeleteSignatureRequest) SetSecurityToken(v string) *DeleteSignatureRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteSignatureRequest) SetSignatureId(v string) *DeleteSignatureRequest {
	s.SignatureId = &v
	return s
}

type DeleteSignatureResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSignatureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSignatureResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSignatureResponseBody) SetRequestId(v string) *DeleteSignatureResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSignatureResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSignatureResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSignatureResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSignatureResponse) GoString() string {
	return s.String()
}

func (s *DeleteSignatureResponse) SetHeaders(v map[string]*string) *DeleteSignatureResponse {
	s.Headers = v
	return s
}

func (s *DeleteSignatureResponse) SetStatusCode(v int32) *DeleteSignatureResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSignatureResponse) SetBody(v *DeleteSignatureResponseBody) *DeleteSignatureResponse {
	s.Body = v
	return s
}

type DeleteTrafficControlRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the throttling policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// tf123456
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
}

func (s DeleteTrafficControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTrafficControlRequest) GoString() string {
	return s.String()
}

func (s *DeleteTrafficControlRequest) SetSecurityToken(v string) *DeleteTrafficControlRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteTrafficControlRequest) SetTrafficControlId(v string) *DeleteTrafficControlRequest {
	s.TrafficControlId = &v
	return s
}

type DeleteTrafficControlResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteTrafficControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTrafficControlResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTrafficControlResponseBody) SetRequestId(v string) *DeleteTrafficControlResponseBody {
	s.RequestId = &v
	return s
}

type DeleteTrafficControlResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTrafficControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTrafficControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTrafficControlResponse) GoString() string {
	return s.String()
}

func (s *DeleteTrafficControlResponse) SetHeaders(v map[string]*string) *DeleteTrafficControlResponse {
	s.Headers = v
	return s
}

func (s *DeleteTrafficControlResponse) SetStatusCode(v int32) *DeleteTrafficControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTrafficControlResponse) SetBody(v *DeleteTrafficControlResponseBody) *DeleteTrafficControlResponse {
	s.Body = v
	return s
}

type DeleteTrafficSpecialControlRequest struct {
	// The security token included in the WebSocket request header. The system uses this token to authenticate the request.
	//
	// example:
	//
	// 7c51b234-48d3-44e1-9b36-e2ddccc738e3
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the app or Alibaba Cloud account. You can view your account ID on the [Account Management](https://account.console.aliyun.com/?spm=a2c4g.11186623.2.15.343130a8sDi8cO#/secure) page.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3382463
	SpecialKey *string `json:"SpecialKey,omitempty" xml:"SpecialKey,omitempty"`
	// The type of the special throttling policy. Valid values:
	//
	// 	- **APP**
	//
	// 	- **USER**
	//
	// This parameter is required.
	//
	// example:
	//
	// APP
	SpecialType *string `json:"SpecialType,omitempty" xml:"SpecialType,omitempty"`
	// The ID of the throttling policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// tf123456
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
}

func (s DeleteTrafficSpecialControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTrafficSpecialControlRequest) GoString() string {
	return s.String()
}

func (s *DeleteTrafficSpecialControlRequest) SetSecurityToken(v string) *DeleteTrafficSpecialControlRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteTrafficSpecialControlRequest) SetSpecialKey(v string) *DeleteTrafficSpecialControlRequest {
	s.SpecialKey = &v
	return s
}

func (s *DeleteTrafficSpecialControlRequest) SetSpecialType(v string) *DeleteTrafficSpecialControlRequest {
	s.SpecialType = &v
	return s
}

func (s *DeleteTrafficSpecialControlRequest) SetTrafficControlId(v string) *DeleteTrafficSpecialControlRequest {
	s.TrafficControlId = &v
	return s
}

type DeleteTrafficSpecialControlResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteTrafficSpecialControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTrafficSpecialControlResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTrafficSpecialControlResponseBody) SetRequestId(v string) *DeleteTrafficSpecialControlResponseBody {
	s.RequestId = &v
	return s
}

type DeleteTrafficSpecialControlResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTrafficSpecialControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTrafficSpecialControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTrafficSpecialControlResponse) GoString() string {
	return s.String()
}

func (s *DeleteTrafficSpecialControlResponse) SetHeaders(v map[string]*string) *DeleteTrafficSpecialControlResponse {
	s.Headers = v
	return s
}

func (s *DeleteTrafficSpecialControlResponse) SetStatusCode(v int32) *DeleteTrafficSpecialControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTrafficSpecialControlResponse) SetBody(v *DeleteTrafficSpecialControlResponseBody) *DeleteTrafficSpecialControlResponse {
	s.Body = v
	return s
}

type DeployApiRequest struct {
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// d6f679aeb3be4b91b3688e887ca1fe16
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The publishing remarks.
	//
	// This parameter is required.
	//
	// example:
	//
	// for_test1
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 63be9002440b4778a61122f14c2b2bbb
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **PRE**: the pre-release environment
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DeployApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployApiRequest) GoString() string {
	return s.String()
}

func (s *DeployApiRequest) SetApiId(v string) *DeployApiRequest {
	s.ApiId = &v
	return s
}

func (s *DeployApiRequest) SetDescription(v string) *DeployApiRequest {
	s.Description = &v
	return s
}

func (s *DeployApiRequest) SetGroupId(v string) *DeployApiRequest {
	s.GroupId = &v
	return s
}

func (s *DeployApiRequest) SetSecurityToken(v string) *DeployApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeployApiRequest) SetStageName(v string) *DeployApiRequest {
	s.StageName = &v
	return s
}

type DeployApiResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ015
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeployApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeployApiResponseBody) GoString() string {
	return s.String()
}

func (s *DeployApiResponseBody) SetRequestId(v string) *DeployApiResponseBody {
	s.RequestId = &v
	return s
}

type DeployApiResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeployApiResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeployApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployApiResponse) GoString() string {
	return s.String()
}

func (s *DeployApiResponse) SetHeaders(v map[string]*string) *DeployApiResponse {
	s.Headers = v
	return s
}

func (s *DeployApiResponse) SetStatusCode(v int32) *DeployApiResponse {
	s.StatusCode = &v
	return s
}

func (s *DeployApiResponse) SetBody(v *DeployApiResponseBody) *DeployApiResponse {
	s.Body = v
	return s
}

type DescribeAbolishApiTaskRequest struct {
	// The ID of the unpublishing operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// fc54****dd4c4***ad7edd7****39401
	OperationUid  *string `json:"OperationUid,omitempty" xml:"OperationUid,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeAbolishApiTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAbolishApiTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeAbolishApiTaskRequest) SetOperationUid(v string) *DescribeAbolishApiTaskRequest {
	s.OperationUid = &v
	return s
}

func (s *DescribeAbolishApiTaskRequest) SetSecurityToken(v string) *DescribeAbolishApiTaskRequest {
	s.SecurityToken = &v
	return s
}

type DescribeAbolishApiTaskResponseBody struct {
	// The result returned.
	ApiAbolishResults *DescribeAbolishApiTaskResponseBodyApiAbolishResults `json:"ApiAbolishResults,omitempty" xml:"ApiAbolishResults,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// E8515BA6-81CD-4191-A7CF-C4FCDD3C0D99
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAbolishApiTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAbolishApiTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAbolishApiTaskResponseBody) SetApiAbolishResults(v *DescribeAbolishApiTaskResponseBodyApiAbolishResults) *DescribeAbolishApiTaskResponseBody {
	s.ApiAbolishResults = v
	return s
}

func (s *DescribeAbolishApiTaskResponseBody) SetRequestId(v string) *DescribeAbolishApiTaskResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAbolishApiTaskResponseBodyApiAbolishResults struct {
	ApiAbolishResult []*DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult `json:"ApiAbolishResult,omitempty" xml:"ApiAbolishResult,omitempty" type:"Repeated"`
}

func (s DescribeAbolishApiTaskResponseBodyApiAbolishResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeAbolishApiTaskResponseBodyApiAbolishResults) GoString() string {
	return s.String()
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResults) SetApiAbolishResult(v []*DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) *DescribeAbolishApiTaskResponseBodyApiAbolishResults {
	s.ApiAbolishResult = v
	return s
}

type DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult struct {
	// The unpublishing status.
	//
	// example:
	//
	// OVER
	AbolishStatus *string `json:"AbolishStatus,omitempty" xml:"AbolishStatus,omitempty"`
	// The name of the API.
	//
	// example:
	//
	// v2_page_consent
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The ID of the API.
	//
	// example:
	//
	// 4e26cdbbb113416dba1f0285bed29979
	ApiUid *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	// The error message.
	//
	// example:
	//
	// Success. Request Success.
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 160cb6505e1c43a6b84346856d74eb47
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group.
	//
	// example:
	//
	// wb2022021401619286
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The ID of the runtime environment.
	//
	// example:
	//
	// 0919f2854a88484c91dc9253347c78f9
	StageId *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) GoString() string {
	return s.String()
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) SetAbolishStatus(v string) *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult {
	s.AbolishStatus = &v
	return s
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) SetApiName(v string) *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult {
	s.ApiName = &v
	return s
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) SetApiUid(v string) *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult {
	s.ApiUid = &v
	return s
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) SetErrorMsg(v string) *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) SetGroupId(v string) *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult {
	s.GroupId = &v
	return s
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) SetGroupName(v string) *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult {
	s.GroupName = &v
	return s
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) SetStageId(v string) *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult {
	s.StageId = &v
	return s
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) SetStageName(v string) *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult {
	s.StageName = &v
	return s
}

type DescribeAbolishApiTaskResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAbolishApiTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAbolishApiTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAbolishApiTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeAbolishApiTaskResponse) SetHeaders(v map[string]*string) *DescribeAbolishApiTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeAbolishApiTaskResponse) SetStatusCode(v int32) *DescribeAbolishApiTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAbolishApiTaskResponse) SetBody(v *DescribeAbolishApiTaskResponseBody) *DescribeAbolishApiTaskResponse {
	s.Body = v
	return s
}

type DescribeAccessControlListAttributeRequest struct {
	// The ID of the access control policy.
	//
	// example:
	//
	// acl-3nsohdozz0ru8fi5onwz1
	AclId         *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeAccessControlListAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListAttributeRequest) SetAclId(v string) *DescribeAccessControlListAttributeRequest {
	s.AclId = &v
	return s
}

func (s *DescribeAccessControlListAttributeRequest) SetSecurityToken(v string) *DescribeAccessControlListAttributeRequest {
	s.SecurityToken = &v
	return s
}

type DescribeAccessControlListAttributeResponseBody struct {
	// The information about the access control policy.
	AclEntrys *DescribeAccessControlListAttributeResponseBodyAclEntrys `json:"AclEntrys,omitempty" xml:"AclEntrys,omitempty" type:"Struct"`
	// The ID of the access control policy.
	//
	// example:
	//
	// acl-uf6fpfdg3b5muska7uqem
	AclId *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	// The name of the access control policy.
	//
	// example:
	//
	// testAcl
	AclName          *string `json:"AclName,omitempty" xml:"AclName,omitempty"`
	AddressIPVersion *string `json:"AddressIPVersion,omitempty" xml:"AddressIPVersion,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ015
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAccessControlListAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListAttributeResponseBody) SetAclEntrys(v *DescribeAccessControlListAttributeResponseBodyAclEntrys) *DescribeAccessControlListAttributeResponseBody {
	s.AclEntrys = v
	return s
}

func (s *DescribeAccessControlListAttributeResponseBody) SetAclId(v string) *DescribeAccessControlListAttributeResponseBody {
	s.AclId = &v
	return s
}

func (s *DescribeAccessControlListAttributeResponseBody) SetAclName(v string) *DescribeAccessControlListAttributeResponseBody {
	s.AclName = &v
	return s
}

func (s *DescribeAccessControlListAttributeResponseBody) SetAddressIPVersion(v string) *DescribeAccessControlListAttributeResponseBody {
	s.AddressIPVersion = &v
	return s
}

func (s *DescribeAccessControlListAttributeResponseBody) SetRequestId(v string) *DescribeAccessControlListAttributeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAccessControlListAttributeResponseBodyAclEntrys struct {
	AclEntry []*DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry `json:"AclEntry,omitempty" xml:"AclEntry,omitempty" type:"Repeated"`
}

func (s DescribeAccessControlListAttributeResponseBodyAclEntrys) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListAttributeResponseBodyAclEntrys) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListAttributeResponseBodyAclEntrys) SetAclEntry(v []*DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry) *DescribeAccessControlListAttributeResponseBodyAclEntrys {
	s.AclEntry = v
	return s
}

type DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry struct {
	// The description of an entry.
	//
	// example:
	//
	// default
	AclEntryComment *string `json:"AclEntryComment,omitempty" xml:"AclEntryComment,omitempty"`
	// The entries of the access control policy.
	//
	// example:
	//
	// 192.168.1.0/24
	AclEntryIp *string `json:"AclEntryIp,omitempty" xml:"AclEntryIp,omitempty"`
}

func (s DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry) SetAclEntryComment(v string) *DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry {
	s.AclEntryComment = &v
	return s
}

func (s *DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry) SetAclEntryIp(v string) *DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry {
	s.AclEntryIp = &v
	return s
}

type DescribeAccessControlListAttributeResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAccessControlListAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAccessControlListAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListAttributeResponse) SetHeaders(v map[string]*string) *DescribeAccessControlListAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeAccessControlListAttributeResponse) SetStatusCode(v int32) *DescribeAccessControlListAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAccessControlListAttributeResponse) SetBody(v *DescribeAccessControlListAttributeResponseBody) *DescribeAccessControlListAttributeResponse {
	s.Body = v
	return s
}

type DescribeAccessControlListsRequest struct {
	// The name of the access control policy.
	//
	// example:
	//
	// testAcl
	AclName *string `json:"AclName,omitempty" xml:"AclName,omitempty"`
	// IP版本，可以设置为**ipv4**或者**ipv6**。
	//
	// example:
	//
	// ipv6
	AddressIPVersion *string `json:"AddressIPVersion,omitempty" xml:"AddressIPVersion,omitempty"`
	// The page number of the current page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeAccessControlListsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListsRequest) SetAclName(v string) *DescribeAccessControlListsRequest {
	s.AclName = &v
	return s
}

func (s *DescribeAccessControlListsRequest) SetAddressIPVersion(v string) *DescribeAccessControlListsRequest {
	s.AddressIPVersion = &v
	return s
}

func (s *DescribeAccessControlListsRequest) SetPageNumber(v int32) *DescribeAccessControlListsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAccessControlListsRequest) SetPageSize(v int32) *DescribeAccessControlListsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAccessControlListsRequest) SetSecurityToken(v string) *DescribeAccessControlListsRequest {
	s.SecurityToken = &v
	return s
}

type DescribeAccessControlListsResponseBody struct {
	// The ACLs.
	Acls *DescribeAccessControlListsResponseBodyAcls `json:"Acls,omitempty" xml:"Acls,omitempty" type:"Struct"`
	// The page number of the current page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ015
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 3
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAccessControlListsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListsResponseBody) SetAcls(v *DescribeAccessControlListsResponseBodyAcls) *DescribeAccessControlListsResponseBody {
	s.Acls = v
	return s
}

func (s *DescribeAccessControlListsResponseBody) SetPageNumber(v int32) *DescribeAccessControlListsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAccessControlListsResponseBody) SetPageSize(v int32) *DescribeAccessControlListsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAccessControlListsResponseBody) SetRequestId(v string) *DescribeAccessControlListsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAccessControlListsResponseBody) SetTotalCount(v int32) *DescribeAccessControlListsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeAccessControlListsResponseBodyAcls struct {
	Acl []*DescribeAccessControlListsResponseBodyAclsAcl `json:"Acl,omitempty" xml:"Acl,omitempty" type:"Repeated"`
}

func (s DescribeAccessControlListsResponseBodyAcls) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListsResponseBodyAcls) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListsResponseBodyAcls) SetAcl(v []*DescribeAccessControlListsResponseBodyAclsAcl) *DescribeAccessControlListsResponseBodyAcls {
	s.Acl = v
	return s
}

type DescribeAccessControlListsResponseBodyAclsAcl struct {
	// The ID of the access control policy.
	//
	// example:
	//
	// acl-3nsohdozz0ru8fi5onwz1
	AclId *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	// The name of the access control policy.
	//
	// example:
	//
	// testAcl
	AclName *string `json:"AclName,omitempty" xml:"AclName,omitempty"`
	// 访问控制策略组的IP版本。
	//
	// - **IPv4**。
	//
	// - **IPv6**。
	//
	// example:
	//
	// ipv4
	AddressIPVersion *string `json:"AddressIPVersion,omitempty" xml:"AddressIPVersion,omitempty"`
}

func (s DescribeAccessControlListsResponseBodyAclsAcl) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListsResponseBodyAclsAcl) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListsResponseBodyAclsAcl) SetAclId(v string) *DescribeAccessControlListsResponseBodyAclsAcl {
	s.AclId = &v
	return s
}

func (s *DescribeAccessControlListsResponseBodyAclsAcl) SetAclName(v string) *DescribeAccessControlListsResponseBodyAclsAcl {
	s.AclName = &v
	return s
}

func (s *DescribeAccessControlListsResponseBodyAclsAcl) SetAddressIPVersion(v string) *DescribeAccessControlListsResponseBodyAclsAcl {
	s.AddressIPVersion = &v
	return s
}

type DescribeAccessControlListsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAccessControlListsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAccessControlListsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListsResponse) SetHeaders(v map[string]*string) *DescribeAccessControlListsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAccessControlListsResponse) SetStatusCode(v int32) *DescribeAccessControlListsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAccessControlListsResponse) SetBody(v *DescribeAccessControlListsResponseBody) *DescribeAccessControlListsResponse {
	s.Body = v
	return s
}

type DescribeApiRequest struct {
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// 8afff6c8c4c6447abb035812e4d66b65
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 123
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiRequest) SetApiId(v string) *DescribeApiRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiRequest) SetGroupId(v string) *DescribeApiRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiRequest) SetSecurityToken(v string) *DescribeApiRequest {
	s.SecurityToken = &v
	return s
}

type DescribeApiResponseBody struct {
	// If **AuthType*	- is set to **APP**, this value must be passed to specify the signature algorithm. If you do not specify a value, HmacSHA256 is used by default. Valid values:
	//
	// 	- HmacSHA256
	//
	// 	- HmacSHA1,HmacSHA256
	//
	// example:
	//
	// HmacSHA256
	AllowSignatureMethod *string `json:"AllowSignatureMethod,omitempty" xml:"AllowSignatureMethod,omitempty"`
	// The ID of the API.
	//
	// example:
	//
	// 8afff6c8c4c6447abb035812e4d66b65
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API, which is unique in the group.
	//
	// example:
	//
	// ApiName
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// If **AuthType*	- is set to **APP**, the valid values are:
	//
	// 	- **DEFAULT**: The default value that is used if no other values are passed. This value means that the setting of the group is used.
	//
	// 	- **DISABLE**: The authentication is disabled.
	//
	// 	- **HEADER**: AppCode can be placed in the Header parameter for authentication.
	//
	// 	- **HEADER_QUERY**: AppCode can be placed in the Header or Query parameter for authentication.
	//
	// example:
	//
	// HEADER
	AppCodeAuthType *string `json:"AppCodeAuthType,omitempty" xml:"AppCodeAuthType,omitempty"`
	// The security authentication method of the API. Valid values:
	//
	// 	- **APP**: Only authorized applications can call the API.
	//
	// 	- **ANONYMOUS**: The API can be anonymously called. In this mode, you must take note of the following rules:
	//
	//     	- All users who have obtained the API service information can call this API. API Gateway does not authenticate callers and cannot set user-specific throttling policies. If you make this API public, set API-specific throttling policies.
	//
	//     	- We recommend that you do not make the API whose security authentication method is ANONYMOUS available in Alibaba Cloud Marketplace because API Gateway cannot meter calls on the caller or limit the number of calls on the API. If you want to make the API group to which the API belongs available in Alibaba Cloud Marketplace, we recommend that you move the API to another group, set its type to PRIVATE, or set its security authentication method to APP.
	//
	// 	- **APPOPENID**: The OpenID Connect account authentication method is used. Only applications authorized by OpenID Connect can call the API. If this method is selected, the OpenIdConnectConfig parameter is required.
	//
	// example:
	//
	// APP
	AuthType *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	// Backend configurations
	BackendConfig *DescribeApiResponseBodyBackendConfig `json:"BackendConfig,omitempty" xml:"BackendConfig,omitempty" type:"Struct"`
	// Specifies whether to enable backend services.
	//
	// example:
	//
	// true
	BackendEnable *bool `json:"BackendEnable,omitempty" xml:"BackendEnable,omitempty"`
	// System parameters sent by API Gateway to the backend service
	ConstantParameters *DescribeApiResponseBodyConstantParameters `json:"ConstantParameters,omitempty" xml:"ConstantParameters,omitempty" type:"Struct"`
	// The creation time of the API.
	//
	// example:
	//
	// 2016-07-28T09:50:43Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// Custom system parameters
	CustomSystemParameters *DescribeApiResponseBodyCustomSystemParameters `json:"CustomSystemParameters,omitempty" xml:"CustomSystemParameters,omitempty" type:"Struct"`
	// The API publishing status.
	DeployedInfos *DescribeApiResponseBodyDeployedInfos `json:"DeployedInfos,omitempty" xml:"DeployedInfos,omitempty" type:"Struct"`
	// The description of the API.
	//
	// example:
	//
	// Api description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to limit API calls to within the VPC. Valid values:
	//
	// 	- **true**: Only API calls from the VPC are supported.
	//
	// 	- **false**: API calls from the VPC and Internet are both supported.
	//
	// example:
	//
	// false
	DisableInternet *bool `json:"DisableInternet,omitempty" xml:"DisableInternet,omitempty"`
	// The sample error codes returned by the backend service.
	ErrorCodeSamples *DescribeApiResponseBodyErrorCodeSamples `json:"ErrorCodeSamples,omitempty" xml:"ErrorCodeSamples,omitempty" type:"Struct"`
	// The sample error response from the backend service.
	//
	// example:
	//
	// 400
	FailResultSample *string `json:"FailResultSample,omitempty" xml:"FailResultSample,omitempty"`
	// Specifies whether to carry the header : X-Ca-Nonce when calling an API. This is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent reply attacks. Valid values:
	//
	// 	- **true**: This field is forcibly checked when an API is requested to prevent replay attacks.
	//
	// 	- **false**: This field is not checked.
	//
	// example:
	//
	// true
	ForceNonceCheck *bool `json:"ForceNonceCheck,omitempty" xml:"ForceNonceCheck,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 08ae4aa0f95e4321849ee57f4e0b3077
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group.
	//
	// example:
	//
	// ApiTest
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Specifies whether to enable the Mock mode. Valid values:
	//
	// 	- OPEN: The Mock mode is enabled.
	//
	// 	- CLOSED: The Mock mode is not enabled.
	//
	// example:
	//
	// CLOSED
	Mock *string `json:"Mock,omitempty" xml:"Mock,omitempty"`
	// The result returned for service mocking.
	//
	// example:
	//
	// test result
	MockResult *string `json:"MockResult,omitempty" xml:"MockResult,omitempty"`
	// The last modification time of the API.
	//
	// example:
	//
	// 2016-07-28T13:13:12Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// Configuration items of the third-party OpenID Connect authentication method
	OpenIdConnectConfig *DescribeApiResponseBodyOpenIdConnectConfig `json:"OpenIdConnectConfig,omitempty" xml:"OpenIdConnectConfig,omitempty" type:"Struct"`
	// The region ID of the API.
	//
	// example:
	//
	// cn-qingdao
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The configuration items of API requests sent by the consumer to API Gateway.
	RequestConfig *DescribeApiResponseBodyRequestConfig `json:"RequestConfig,omitempty" xml:"RequestConfig,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// D0FF585F-7966-40CF-BC60-75DB070B23D5<
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The parameters of API requests sent by the consumer to API Gateway.
	RequestParameters *DescribeApiResponseBodyRequestParameters `json:"RequestParameters,omitempty" xml:"RequestParameters,omitempty" type:"Struct"`
	// The returned description of the API.
	//
	// example:
	//
	// {}
	ResultBodyModel *string `json:"ResultBodyModel,omitempty" xml:"ResultBodyModel,omitempty"`
	// The sample response from the backend service.
	//
	// example:
	//
	// 200
	ResultSample *string `json:"ResultSample,omitempty" xml:"ResultSample,omitempty"`
	// The format of the response from the backend service. Valid values: JSON, TEXT, BINARY, XML, and HTML.
	//
	// example:
	//
	// JSON
	ResultType *string `json:"ResultType,omitempty" xml:"ResultType,omitempty"`
	// The configuration items of API requests that API Gateway sends to the backend service.
	ServiceConfig *DescribeApiResponseBodyServiceConfig `json:"ServiceConfig,omitempty" xml:"ServiceConfig,omitempty" type:"Struct"`
	// The parameters of API requests sent by API Gateway to the backend service.
	ServiceParameters *DescribeApiResponseBodyServiceParameters `json:"ServiceParameters,omitempty" xml:"ServiceParameters,omitempty" type:"Struct"`
	// The mappings between parameters of requests sent by the consumer to API Gateway and parameters of requests sent by API Gateway to the backend service.
	ServiceParametersMap *DescribeApiResponseBodyServiceParametersMap `json:"ServiceParametersMap,omitempty" xml:"ServiceParametersMap,omitempty" type:"Struct"`
	// System parameters sent by API Gateway to the backend service
	SystemParameters *DescribeApiResponseBodySystemParameters `json:"SystemParameters,omitempty" xml:"SystemParameters,omitempty" type:"Struct"`
	TagList          *DescribeApiResponseBodyTagList          `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Struct"`
	// Specifies whether to make the API public. Valid values:
	//
	// 	- **PUBLIC**: Make the API public. If you set this parameter to PUBLIC, this API is displayed on the APIs page for all users after the API is published to the production environment.
	//
	// 	- **PRIVATE**: Make the API private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.
	//
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
	// The type of the two-way communication API.
	//
	// 	- **COMMON**: common API
	//
	// 	- **REGISTER**: registered API
	//
	// 	- **UNREGISTER**: unregistered API
	//
	// 	- **NOTIFY**: downstream notification API
	//
	// example:
	//
	// COMMON
	WebSocketApiType *string `json:"WebSocketApiType,omitempty" xml:"WebSocketApiType,omitempty"`
}

func (s DescribeApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBody) SetAllowSignatureMethod(v string) *DescribeApiResponseBody {
	s.AllowSignatureMethod = &v
	return s
}

func (s *DescribeApiResponseBody) SetApiId(v string) *DescribeApiResponseBody {
	s.ApiId = &v
	return s
}

func (s *DescribeApiResponseBody) SetApiName(v string) *DescribeApiResponseBody {
	s.ApiName = &v
	return s
}

func (s *DescribeApiResponseBody) SetAppCodeAuthType(v string) *DescribeApiResponseBody {
	s.AppCodeAuthType = &v
	return s
}

func (s *DescribeApiResponseBody) SetAuthType(v string) *DescribeApiResponseBody {
	s.AuthType = &v
	return s
}

func (s *DescribeApiResponseBody) SetBackendConfig(v *DescribeApiResponseBodyBackendConfig) *DescribeApiResponseBody {
	s.BackendConfig = v
	return s
}

func (s *DescribeApiResponseBody) SetBackendEnable(v bool) *DescribeApiResponseBody {
	s.BackendEnable = &v
	return s
}

func (s *DescribeApiResponseBody) SetConstantParameters(v *DescribeApiResponseBodyConstantParameters) *DescribeApiResponseBody {
	s.ConstantParameters = v
	return s
}

func (s *DescribeApiResponseBody) SetCreatedTime(v string) *DescribeApiResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeApiResponseBody) SetCustomSystemParameters(v *DescribeApiResponseBodyCustomSystemParameters) *DescribeApiResponseBody {
	s.CustomSystemParameters = v
	return s
}

func (s *DescribeApiResponseBody) SetDeployedInfos(v *DescribeApiResponseBodyDeployedInfos) *DescribeApiResponseBody {
	s.DeployedInfos = v
	return s
}

func (s *DescribeApiResponseBody) SetDescription(v string) *DescribeApiResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeApiResponseBody) SetDisableInternet(v bool) *DescribeApiResponseBody {
	s.DisableInternet = &v
	return s
}

func (s *DescribeApiResponseBody) SetErrorCodeSamples(v *DescribeApiResponseBodyErrorCodeSamples) *DescribeApiResponseBody {
	s.ErrorCodeSamples = v
	return s
}

func (s *DescribeApiResponseBody) SetFailResultSample(v string) *DescribeApiResponseBody {
	s.FailResultSample = &v
	return s
}

func (s *DescribeApiResponseBody) SetForceNonceCheck(v bool) *DescribeApiResponseBody {
	s.ForceNonceCheck = &v
	return s
}

func (s *DescribeApiResponseBody) SetGroupId(v string) *DescribeApiResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeApiResponseBody) SetGroupName(v string) *DescribeApiResponseBody {
	s.GroupName = &v
	return s
}

func (s *DescribeApiResponseBody) SetMock(v string) *DescribeApiResponseBody {
	s.Mock = &v
	return s
}

func (s *DescribeApiResponseBody) SetMockResult(v string) *DescribeApiResponseBody {
	s.MockResult = &v
	return s
}

func (s *DescribeApiResponseBody) SetModifiedTime(v string) *DescribeApiResponseBody {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeApiResponseBody) SetOpenIdConnectConfig(v *DescribeApiResponseBodyOpenIdConnectConfig) *DescribeApiResponseBody {
	s.OpenIdConnectConfig = v
	return s
}

func (s *DescribeApiResponseBody) SetRegionId(v string) *DescribeApiResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeApiResponseBody) SetRequestConfig(v *DescribeApiResponseBodyRequestConfig) *DescribeApiResponseBody {
	s.RequestConfig = v
	return s
}

func (s *DescribeApiResponseBody) SetRequestId(v string) *DescribeApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiResponseBody) SetRequestParameters(v *DescribeApiResponseBodyRequestParameters) *DescribeApiResponseBody {
	s.RequestParameters = v
	return s
}

func (s *DescribeApiResponseBody) SetResultBodyModel(v string) *DescribeApiResponseBody {
	s.ResultBodyModel = &v
	return s
}

func (s *DescribeApiResponseBody) SetResultSample(v string) *DescribeApiResponseBody {
	s.ResultSample = &v
	return s
}

func (s *DescribeApiResponseBody) SetResultType(v string) *DescribeApiResponseBody {
	s.ResultType = &v
	return s
}

func (s *DescribeApiResponseBody) SetServiceConfig(v *DescribeApiResponseBodyServiceConfig) *DescribeApiResponseBody {
	s.ServiceConfig = v
	return s
}

func (s *DescribeApiResponseBody) SetServiceParameters(v *DescribeApiResponseBodyServiceParameters) *DescribeApiResponseBody {
	s.ServiceParameters = v
	return s
}

func (s *DescribeApiResponseBody) SetServiceParametersMap(v *DescribeApiResponseBodyServiceParametersMap) *DescribeApiResponseBody {
	s.ServiceParametersMap = v
	return s
}

func (s *DescribeApiResponseBody) SetSystemParameters(v *DescribeApiResponseBodySystemParameters) *DescribeApiResponseBody {
	s.SystemParameters = v
	return s
}

func (s *DescribeApiResponseBody) SetTagList(v *DescribeApiResponseBodyTagList) *DescribeApiResponseBody {
	s.TagList = v
	return s
}

func (s *DescribeApiResponseBody) SetVisibility(v string) *DescribeApiResponseBody {
	s.Visibility = &v
	return s
}

func (s *DescribeApiResponseBody) SetWebSocketApiType(v string) *DescribeApiResponseBody {
	s.WebSocketApiType = &v
	return s
}

type DescribeApiResponseBodyBackendConfig struct {
	// The ID of the backend service.
	//
	// example:
	//
	// 0038e00c3dca44fcba3a94015d8f5bbf
	BackendId *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	// The name of the backend service.
	//
	// example:
	//
	// testoss
	BackendName *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	// Backend service type
	//
	// example:
	//
	// HTTP
	BackendType *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
}

func (s DescribeApiResponseBodyBackendConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyBackendConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyBackendConfig) SetBackendId(v string) *DescribeApiResponseBodyBackendConfig {
	s.BackendId = &v
	return s
}

func (s *DescribeApiResponseBodyBackendConfig) SetBackendName(v string) *DescribeApiResponseBodyBackendConfig {
	s.BackendName = &v
	return s
}

func (s *DescribeApiResponseBodyBackendConfig) SetBackendType(v string) *DescribeApiResponseBodyBackendConfig {
	s.BackendType = &v
	return s
}

type DescribeApiResponseBodyConstantParameters struct {
	ConstantParameter []*DescribeApiResponseBodyConstantParametersConstantParameter `json:"ConstantParameter,omitempty" xml:"ConstantParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyConstantParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyConstantParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyConstantParameters) SetConstantParameter(v []*DescribeApiResponseBodyConstantParametersConstantParameter) *DescribeApiResponseBodyConstantParameters {
	s.ConstantParameter = v
	return s
}

type DescribeApiResponseBodyConstantParametersConstantParameter struct {
	// The constant parameter value.
	//
	// example:
	//
	// constance
	ConstantValue *string `json:"ConstantValue,omitempty" xml:"ConstantValue,omitempty"`
	// The parameter description.
	//
	// example:
	//
	// constance
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	//
	// example:
	//
	// HEAD
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The mapped parameter name in the backend service.
	//
	// example:
	//
	// constance
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiResponseBodyConstantParametersConstantParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyConstantParametersConstantParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyConstantParametersConstantParameter) SetConstantValue(v string) *DescribeApiResponseBodyConstantParametersConstantParameter {
	s.ConstantValue = &v
	return s
}

func (s *DescribeApiResponseBodyConstantParametersConstantParameter) SetDescription(v string) *DescribeApiResponseBodyConstantParametersConstantParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiResponseBodyConstantParametersConstantParameter) SetLocation(v string) *DescribeApiResponseBodyConstantParametersConstantParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiResponseBodyConstantParametersConstantParameter) SetServiceParameterName(v string) *DescribeApiResponseBodyConstantParametersConstantParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiResponseBodyCustomSystemParameters struct {
	CustomSystemParameter []*DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter `json:"CustomSystemParameter,omitempty" xml:"CustomSystemParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyCustomSystemParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyCustomSystemParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyCustomSystemParameters) SetCustomSystemParameter(v []*DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter) *DescribeApiResponseBodyCustomSystemParameters {
	s.CustomSystemParameter = v
	return s
}

type DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter struct {
	// The example value.
	//
	// example:
	//
	// 192.168.1.1
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The parameter description.
	//
	// example:
	//
	// Client IP Address
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	//
	// example:
	//
	// HEAD
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the system parameter. Valid values: CaClientIp, CaDomain, CaRequestHandleTime, CaAppId, CaRequestId, CaHttpSchema, and CaProxy.
	//
	// example:
	//
	// CaClientIp
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The mapped parameter name in the backend service.
	//
	// example:
	//
	// clientIp
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter) SetDemoValue(v string) *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter) SetDescription(v string) *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter) SetLocation(v string) *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter) SetParameterName(v string) *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.ParameterName = &v
	return s
}

func (s *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter) SetServiceParameterName(v string) *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiResponseBodyDeployedInfos struct {
	DeployedInfo []*DescribeApiResponseBodyDeployedInfosDeployedInfo `json:"DeployedInfo,omitempty" xml:"DeployedInfo,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyDeployedInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyDeployedInfos) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyDeployedInfos) SetDeployedInfo(v []*DescribeApiResponseBodyDeployedInfosDeployedInfo) *DescribeApiResponseBodyDeployedInfos {
	s.DeployedInfo = v
	return s
}

type DescribeApiResponseBodyDeployedInfosDeployedInfo struct {
	// The deployment status. Valid values: DEPLOYED and NONDEPLOYED.
	//
	// example:
	//
	// DEPLOYED
	DeployedStatus *string `json:"DeployedStatus,omitempty" xml:"DeployedStatus,omitempty"`
	// The effective version.
	//
	// example:
	//
	// xxx
	EffectiveVersion *string `json:"EffectiveVersion,omitempty" xml:"EffectiveVersion,omitempty"`
	// The environment to which the API is published. Valid values: RELEASE and TEST.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiResponseBodyDeployedInfosDeployedInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyDeployedInfosDeployedInfo) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyDeployedInfosDeployedInfo) SetDeployedStatus(v string) *DescribeApiResponseBodyDeployedInfosDeployedInfo {
	s.DeployedStatus = &v
	return s
}

func (s *DescribeApiResponseBodyDeployedInfosDeployedInfo) SetEffectiveVersion(v string) *DescribeApiResponseBodyDeployedInfosDeployedInfo {
	s.EffectiveVersion = &v
	return s
}

func (s *DescribeApiResponseBodyDeployedInfosDeployedInfo) SetStageName(v string) *DescribeApiResponseBodyDeployedInfosDeployedInfo {
	s.StageName = &v
	return s
}

type DescribeApiResponseBodyErrorCodeSamples struct {
	ErrorCodeSample []*DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample `json:"ErrorCodeSample,omitempty" xml:"ErrorCodeSample,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyErrorCodeSamples) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyErrorCodeSamples) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyErrorCodeSamples) SetErrorCodeSample(v []*DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample) *DescribeApiResponseBodyErrorCodeSamples {
	s.ErrorCodeSample = v
	return s
}

type DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample struct {
	// The returned error code.
	//
	// example:
	//
	// 400
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error description.
	//
	// example:
	//
	// The UserId parameter is missing from the request.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The returned error message.
	//
	// example:
	//
	// Missing the parameter UserId
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The model.
	//
	// example:
	//
	// [\\"*\\"]
	Model *string `json:"Model,omitempty" xml:"Model,omitempty"`
}

func (s DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample) SetCode(v string) *DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Code = &v
	return s
}

func (s *DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample) SetDescription(v string) *DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Description = &v
	return s
}

func (s *DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample) SetMessage(v string) *DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Message = &v
	return s
}

func (s *DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample) SetModel(v string) *DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Model = &v
	return s
}

type DescribeApiResponseBodyOpenIdConnectConfig struct {
	// The name of the parameter that corresponds to the token.
	//
	// example:
	//
	// xxx
	IdTokenParamName *string `json:"IdTokenParamName,omitempty" xml:"IdTokenParamName,omitempty"`
	// The OpenID Connect mode. Valid values:
	//
	// 	- **IDTOKEN**: indicates the APIs that are called by clients to obtain tokens. If you specify this value, the PublicKeyId parameter and the PublicKey parameter are required.
	//
	// 	- **BUSINESS**: indicates business APIs. Tokens are used to call the business APIs. If you specify this value, the IdTokenParamName parameter is required.
	//
	// example:
	//
	// IDTOKEN
	OpenIdApiType *string `json:"OpenIdApiType,omitempty" xml:"OpenIdApiType,omitempty"`
	// The public key.
	//
	// example:
	//
	// EB1837F8693CCED0BF750B3AD48467BEB569E780A14591CF92
	PublicKey *string `json:"PublicKey,omitempty" xml:"PublicKey,omitempty"`
	// The ID of the public key.
	//
	// example:
	//
	// 88483727556929326703309904351185815489
	PublicKeyId *string `json:"PublicKeyId,omitempty" xml:"PublicKeyId,omitempty"`
}

func (s DescribeApiResponseBodyOpenIdConnectConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyOpenIdConnectConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyOpenIdConnectConfig) SetIdTokenParamName(v string) *DescribeApiResponseBodyOpenIdConnectConfig {
	s.IdTokenParamName = &v
	return s
}

func (s *DescribeApiResponseBodyOpenIdConnectConfig) SetOpenIdApiType(v string) *DescribeApiResponseBodyOpenIdConnectConfig {
	s.OpenIdApiType = &v
	return s
}

func (s *DescribeApiResponseBodyOpenIdConnectConfig) SetPublicKey(v string) *DescribeApiResponseBodyOpenIdConnectConfig {
	s.PublicKey = &v
	return s
}

func (s *DescribeApiResponseBodyOpenIdConnectConfig) SetPublicKeyId(v string) *DescribeApiResponseBodyOpenIdConnectConfig {
	s.PublicKeyId = &v
	return s
}

type DescribeApiResponseBodyRequestConfig struct {
	// This parameter takes effect only when the RequestMode parameter is set to MAPPING.********
	//
	// The server data transmission method used for POST and PUT requests. Valid values: FORM and STREAM. FORM indicates that data in key-value pairs is transmitted as forms. STREAM indicates that data is transmitted as byte streams.
	//
	// example:
	//
	// STREAM
	BodyFormat *string `json:"BodyFormat,omitempty" xml:"BodyFormat,omitempty"`
	// The body model.
	//
	// example:
	//
	// https://apigateway.aliyun.com/models/3a240a127dcc4afd9ab1bf7e947b4095/9e2df550e85b4121a79ec33e2619eaab
	BodyModel *string `json:"BodyModel,omitempty" xml:"BodyModel,omitempty"`
	// The description of the request body.
	//
	// example:
	//
	// fwefwef
	PostBodyDescription *string `json:"PostBodyDescription,omitempty" xml:"PostBodyDescription,omitempty"`
	// The HTTP method used to make the request. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.
	//
	// example:
	//
	// POST
	RequestHttpMethod *string `json:"RequestHttpMethod,omitempty" xml:"RequestHttpMethod,omitempty"`
	// The request mode. Valid values: MAPPING and PASSTHROUGH.
	//
	// example:
	//
	// MAPPING
	RequestMode *string `json:"RequestMode,omitempty" xml:"RequestMode,omitempty"`
	// The API request path. If the complete API URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the API request path is ` /object/add  `.
	//
	// example:
	//
	// /api/billing/test/[type]
	RequestPath *string `json:"RequestPath,omitempty" xml:"RequestPath,omitempty"`
	// The protocol type supported by the API. Valid values: HTTP and HTTPS. Separate multiple values with commas (,), such as "HTTP,HTTPS".
	//
	// example:
	//
	// HTTP
	RequestProtocol *string `json:"RequestProtocol,omitempty" xml:"RequestProtocol,omitempty"`
}

func (s DescribeApiResponseBodyRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyRequestConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyRequestConfig) SetBodyFormat(v string) *DescribeApiResponseBodyRequestConfig {
	s.BodyFormat = &v
	return s
}

func (s *DescribeApiResponseBodyRequestConfig) SetBodyModel(v string) *DescribeApiResponseBodyRequestConfig {
	s.BodyModel = &v
	return s
}

func (s *DescribeApiResponseBodyRequestConfig) SetPostBodyDescription(v string) *DescribeApiResponseBodyRequestConfig {
	s.PostBodyDescription = &v
	return s
}

func (s *DescribeApiResponseBodyRequestConfig) SetRequestHttpMethod(v string) *DescribeApiResponseBodyRequestConfig {
	s.RequestHttpMethod = &v
	return s
}

func (s *DescribeApiResponseBodyRequestConfig) SetRequestMode(v string) *DescribeApiResponseBodyRequestConfig {
	s.RequestMode = &v
	return s
}

func (s *DescribeApiResponseBodyRequestConfig) SetRequestPath(v string) *DescribeApiResponseBodyRequestConfig {
	s.RequestPath = &v
	return s
}

func (s *DescribeApiResponseBodyRequestConfig) SetRequestProtocol(v string) *DescribeApiResponseBodyRequestConfig {
	s.RequestProtocol = &v
	return s
}

type DescribeApiResponseBodyRequestParameters struct {
	RequestParameter []*DescribeApiResponseBodyRequestParametersRequestParameter `json:"RequestParameter,omitempty" xml:"RequestParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyRequestParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyRequestParameters) SetRequestParameter(v []*DescribeApiResponseBodyRequestParametersRequestParameter) *DescribeApiResponseBodyRequestParameters {
	s.RequestParameter = v
	return s
}

type DescribeApiResponseBodyRequestParametersRequestParameter struct {
	// The parameter name.
	//
	// example:
	//
	// age
	ApiParameterName *string `json:"ApiParameterName,omitempty" xml:"ApiParameterName,omitempty"`
	// The type of the array element.
	//
	// example:
	//
	// String
	ArrayItemsType *string `json:"ArrayItemsType,omitempty" xml:"ArrayItemsType,omitempty"`
	// The default value.
	//
	// example:
	//
	// 20
	DefaultValue *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	// The example value.
	//
	// example:
	//
	// 20
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The parameter description.
	//
	// example:
	//
	// Age
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The order in which the parameter is sorted in the document.
	//
	// example:
	//
	// 0
	DocOrder *int32 `json:"DocOrder,omitempty" xml:"DocOrder,omitempty"`
	// Indicates whether the document is public. Valid values: **PUBLIC*	- and **PRIVATE**.
	//
	// example:
	//
	// PUBLIC
	DocShow *string `json:"DocShow,omitempty" xml:"DocShow,omitempty"`
	// The hash values that can be specified if the **ParameterType*	- parameter is set to Int, Long, Float, Double, or String. Separate multiple hash values with commas (,). Examples: 1,2,3,4,9 and A,B,C,E,F.
	//
	// example:
	//
	// boy,girl
	EnumValue *string `json:"EnumValue,omitempty" xml:"EnumValue,omitempty"`
	// The JSON Schema used for JSON validation when **ParameterType*	- is set to String.
	//
	// example:
	//
	// JSON
	JsonScheme *string `json:"JsonScheme,omitempty" xml:"JsonScheme,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	//
	// example:
	//
	// HEAD
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The maximum length of the parameter value if the **ParameterType*	- parameter is set to String.
	//
	// example:
	//
	// 123456
	MaxLength *int64 `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	// The maximum value of the parameter if the **ParameterType*	- parameter is set to Int, Long, Float, or Double.
	//
	// example:
	//
	// 123456
	MaxValue *int64 `json:"MaxValue,omitempty" xml:"MaxValue,omitempty"`
	// The minimum length of the parameter value if the **ParameterType*	- parameter is set to String.
	//
	// example:
	//
	// 123456
	MinLength *int64 `json:"MinLength,omitempty" xml:"MinLength,omitempty"`
	// The minimum value of the parameter if the **ParameterType*	- parameter is set to Int, Long, Float, or Double.
	//
	// example:
	//
	// 123456
	MinValue *int64 `json:"MinValue,omitempty" xml:"MinValue,omitempty"`
	// The data type of the parameter. Valid values: String, Int, Long, Float, Double, and Boolean.
	//
	// example:
	//
	// String
	ParameterType *string `json:"ParameterType,omitempty" xml:"ParameterType,omitempty"`
	// The regular expression that is used to validate the parameter if the **ParameterType*	- parameter is set to String.
	//
	// example:
	//
	// xxx
	RegularExpression *string `json:"RegularExpression,omitempty" xml:"RegularExpression,omitempty"`
	// Indicates whether the parameter is required. Valid values: **REQUIRED*	- and **OPTIONAL**.
	//
	// example:
	//
	// OPTIONAL
	Required *string `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s DescribeApiResponseBodyRequestParametersRequestParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyRequestParametersRequestParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetApiParameterName(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.ApiParameterName = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetArrayItemsType(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.ArrayItemsType = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetDefaultValue(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.DefaultValue = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetDemoValue(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetDescription(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetDocOrder(v int32) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.DocOrder = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetDocShow(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.DocShow = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetEnumValue(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.EnumValue = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetJsonScheme(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.JsonScheme = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetLocation(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetMaxLength(v int64) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.MaxLength = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetMaxValue(v int64) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.MaxValue = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetMinLength(v int64) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.MinLength = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetMinValue(v int64) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.MinValue = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetParameterType(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.ParameterType = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetRegularExpression(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.RegularExpression = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetRequired(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.Required = &v
	return s
}

type DescribeApiResponseBodyServiceConfig struct {
	// The application name in AONE.
	//
	// example:
	//
	// ib-blank
	AoneAppName *string `json:"AoneAppName,omitempty" xml:"AoneAppName,omitempty"`
	// The ContentType header type used when you call the backend service over HTTP.
	//
	// 	- **DEFAULT**: the default header type in API Gateway
	//
	// 	- **CUSTOM**: a custom header type
	//
	// 	- **CLIENT**: the ContentType header type of the client
	//
	// example:
	//
	// CUSTOM
	ContentTypeCatagory *string `json:"ContentTypeCatagory,omitempty" xml:"ContentTypeCatagory,omitempty"`
	// The value of the ContentType header when the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.
	//
	// example:
	//
	// application/x-www-form-urlencoded; charset=UTF-8
	ContentTypeValue *string `json:"ContentTypeValue,omitempty" xml:"ContentTypeValue,omitempty"`
	// Configuration items of EventBridge
	EventBridgeConfig *DescribeApiResponseBodyServiceConfigEventBridgeConfig `json:"EventBridgeConfig,omitempty" xml:"EventBridgeConfig,omitempty" type:"Struct"`
	// Backend configuration items when the backend service is Function Compute
	FunctionComputeConfig *DescribeApiResponseBodyServiceConfigFunctionComputeConfig `json:"FunctionComputeConfig,omitempty" xml:"FunctionComputeConfig,omitempty" type:"Struct"`
	// Specifies whether to enable the Mock mode. Valid values:
	//
	// 	- **TRUE**: The Mock mode is enabled.
	//
	// 	- **FALSE**: The Mock mode is not enabled.
	//
	// example:
	//
	// TRUE
	Mock *string `json:"Mock,omitempty" xml:"Mock,omitempty"`
	// The simulated headers.
	MockHeaders *DescribeApiResponseBodyServiceConfigMockHeaders `json:"MockHeaders,omitempty" xml:"MockHeaders,omitempty" type:"Struct"`
	// The result returned when the Mock mode is enabled.
	//
	// example:
	//
	// test result
	MockResult *string `json:"MockResult,omitempty" xml:"MockResult,omitempty"`
	// The status code returned for service mocking.
	//
	// example:
	//
	// 200
	MockStatusCode *int32 `json:"MockStatusCode,omitempty" xml:"MockStatusCode,omitempty"`
	// The information returned when the backend service is Object Storage Service (OSS).
	OssConfig *DescribeApiResponseBodyServiceConfigOssConfig `json:"OssConfig,omitempty" xml:"OssConfig,omitempty" type:"Struct"`
	// The URL used to call the back-end service. If the complete back-end service URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the value of ServiceAddress is **http://api.a.com:8080**.``
	//
	// example:
	//
	// http://api.a.com:8080
	ServiceAddress *string `json:"ServiceAddress,omitempty" xml:"ServiceAddress,omitempty"`
	// The HTTP method used to call a backend service. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.
	//
	// example:
	//
	// POST
	ServiceHttpMethod *string `json:"ServiceHttpMethod,omitempty" xml:"ServiceHttpMethod,omitempty"`
	// example:
	//
	// /object/add
	ServicePath *string `json:"ServicePath,omitempty" xml:"ServicePath,omitempty"`
	// The protocol used by the backend service. Valid values: HTTP and HTTPS.
	//
	// example:
	//
	// HTTP
	ServiceProtocol *string `json:"ServiceProtocol,omitempty" xml:"ServiceProtocol,omitempty"`
	// The timeout period of the backend service. Unit: milliseconds.
	//
	// example:
	//
	// 1000
	ServiceTimeout *int32 `json:"ServiceTimeout,omitempty" xml:"ServiceTimeout,omitempty"`
	// Specifies whether to enable the VPC channel. Valid values:
	//
	// 	- **TRUE**: The VPC channel is enabled. You must create the corresponding VPC access authorization before you can enable a VPC channel.
	//
	// 	- **FALSE**: The VPC channel is not enabled.
	//
	// example:
	//
	// TRUE
	ServiceVpcEnable *string `json:"ServiceVpcEnable,omitempty" xml:"ServiceVpcEnable,omitempty"`
	// Configuration items related to VPC channels
	VpcConfig *DescribeApiResponseBodyServiceConfigVpcConfig `json:"VpcConfig,omitempty" xml:"VpcConfig,omitempty" type:"Struct"`
}

func (s DescribeApiResponseBodyServiceConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceConfig) SetAoneAppName(v string) *DescribeApiResponseBodyServiceConfig {
	s.AoneAppName = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetContentTypeCatagory(v string) *DescribeApiResponseBodyServiceConfig {
	s.ContentTypeCatagory = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetContentTypeValue(v string) *DescribeApiResponseBodyServiceConfig {
	s.ContentTypeValue = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetEventBridgeConfig(v *DescribeApiResponseBodyServiceConfigEventBridgeConfig) *DescribeApiResponseBodyServiceConfig {
	s.EventBridgeConfig = v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetFunctionComputeConfig(v *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) *DescribeApiResponseBodyServiceConfig {
	s.FunctionComputeConfig = v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetMock(v string) *DescribeApiResponseBodyServiceConfig {
	s.Mock = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetMockHeaders(v *DescribeApiResponseBodyServiceConfigMockHeaders) *DescribeApiResponseBodyServiceConfig {
	s.MockHeaders = v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetMockResult(v string) *DescribeApiResponseBodyServiceConfig {
	s.MockResult = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetMockStatusCode(v int32) *DescribeApiResponseBodyServiceConfig {
	s.MockStatusCode = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetOssConfig(v *DescribeApiResponseBodyServiceConfigOssConfig) *DescribeApiResponseBodyServiceConfig {
	s.OssConfig = v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetServiceAddress(v string) *DescribeApiResponseBodyServiceConfig {
	s.ServiceAddress = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetServiceHttpMethod(v string) *DescribeApiResponseBodyServiceConfig {
	s.ServiceHttpMethod = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetServicePath(v string) *DescribeApiResponseBodyServiceConfig {
	s.ServicePath = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetServiceProtocol(v string) *DescribeApiResponseBodyServiceConfig {
	s.ServiceProtocol = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetServiceTimeout(v int32) *DescribeApiResponseBodyServiceConfig {
	s.ServiceTimeout = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetServiceVpcEnable(v string) *DescribeApiResponseBodyServiceConfig {
	s.ServiceVpcEnable = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetVpcConfig(v *DescribeApiResponseBodyServiceConfigVpcConfig) *DescribeApiResponseBodyServiceConfig {
	s.VpcConfig = v
	return s
}

type DescribeApiResponseBodyServiceConfigEventBridgeConfig struct {
	// The ID of the region where the EventBridge instance is located.
	//
	// example:
	//
	// cn-beijing
	EventBridgeRegionId *string `json:"EventBridgeRegionId,omitempty" xml:"EventBridgeRegionId,omitempty"`
	// The event bus.
	//
	// example:
	//
	// testBus
	EventBus *string `json:"EventBus,omitempty" xml:"EventBus,omitempty"`
	// The event source.
	//
	// example:
	//
	// baas_driver
	EventSource *string `json:"EventSource,omitempty" xml:"EventSource,omitempty"`
	// The Arn that is authorized by a RAM user to EventBridge.
	//
	// example:
	//
	// acs:ram::1933122015759***:role/adminoidcaliyun
	RoleArn *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s DescribeApiResponseBodyServiceConfigEventBridgeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceConfigEventBridgeConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceConfigEventBridgeConfig) SetEventBridgeRegionId(v string) *DescribeApiResponseBodyServiceConfigEventBridgeConfig {
	s.EventBridgeRegionId = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigEventBridgeConfig) SetEventBus(v string) *DescribeApiResponseBodyServiceConfigEventBridgeConfig {
	s.EventBus = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigEventBridgeConfig) SetEventSource(v string) *DescribeApiResponseBodyServiceConfigEventBridgeConfig {
	s.EventSource = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigEventBridgeConfig) SetRoleArn(v string) *DescribeApiResponseBodyServiceConfigEventBridgeConfig {
	s.RoleArn = &v
	return s
}

type DescribeApiResponseBodyServiceConfigFunctionComputeConfig struct {
	// The ContentType header type used when you call the backend service over HTTP.
	//
	// 	- **DEFAULT**: the default header type in API Gateway
	//
	// 	- **CUSTOM**: a custom header type
	//
	// 	- **CLIENT**: the ContentType header type of the client
	//
	// example:
	//
	// DEFAULT
	ContentTypeCatagory *string `json:"ContentTypeCatagory,omitempty" xml:"ContentTypeCatagory,omitempty"`
	// The value of the ContentType header when the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.
	//
	// example:
	//
	// application/x-www-form-urlencoded; charset=UTF-8
	ContentTypeValue *string `json:"ContentTypeValue,omitempty" xml:"ContentTypeValue,omitempty"`
	// The root path of Function Compute.
	//
	// example:
	//
	// https://1227****64334133.ap-southeast-1-int***al.fc.aliyuncs.com/201****-15/proxy/test****ice.LATEST/testHttp/
	FcBaseUrl *string `json:"FcBaseUrl,omitempty" xml:"FcBaseUrl,omitempty"`
	// The type of the Function Compute instance.
	//
	// example:
	//
	// HttpTrigger
	FcType *string `json:"FcType,omitempty" xml:"FcType,omitempty"`
	// The function name defined in Function Compute.
	//
	// example:
	//
	// edge_function
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	// The request method.
	//
	// example:
	//
	// GET
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The backend only receives the service path.
	//
	// example:
	//
	// false
	OnlyBusinessPath *bool `json:"OnlyBusinessPath,omitempty" xml:"OnlyBusinessPath,omitempty"`
	// The API request path.
	//
	// example:
	//
	// /api/offline/cacheData
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The alias of the function.
	//
	// example:
	//
	// 2
	Qualifier *string `json:"Qualifier,omitempty" xml:"Qualifier,omitempty"`
	// The region where the Function Compute instance is located.
	//
	// example:
	//
	// cn-qingdao
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the RAM role to be assumed by API Gateway to access Function Compute.
	//
	// example:
	//
	// acs:ram::111***:role/aliyunserviceroleforsas
	RoleArn *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	// The service name defined in Function Compute.
	//
	// example:
	//
	// fcservicename
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeApiResponseBodyServiceConfigFunctionComputeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceConfigFunctionComputeConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetContentTypeCatagory(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.ContentTypeCatagory = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetContentTypeValue(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.ContentTypeValue = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetFcBaseUrl(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.FcBaseUrl = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetFcType(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.FcType = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetFunctionName(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.FunctionName = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetMethod(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.Method = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetOnlyBusinessPath(v bool) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.OnlyBusinessPath = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetPath(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.Path = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetQualifier(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.Qualifier = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetRegionId(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.RegionId = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetRoleArn(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.RoleArn = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetServiceName(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.ServiceName = &v
	return s
}

type DescribeApiResponseBodyServiceConfigMockHeaders struct {
	MockHeader []*DescribeApiResponseBodyServiceConfigMockHeadersMockHeader `json:"MockHeader,omitempty" xml:"MockHeader,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyServiceConfigMockHeaders) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceConfigMockHeaders) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceConfigMockHeaders) SetMockHeader(v []*DescribeApiResponseBodyServiceConfigMockHeadersMockHeader) *DescribeApiResponseBodyServiceConfigMockHeaders {
	s.MockHeader = v
	return s
}

type DescribeApiResponseBodyServiceConfigMockHeadersMockHeader struct {
	// The name of the HTTP header.
	//
	// example:
	//
	// Content-Length
	HeaderName *string `json:"HeaderName,omitempty" xml:"HeaderName,omitempty"`
	// The value of the HTTP header.
	//
	// example:
	//
	// 86400
	HeaderValue *string `json:"HeaderValue,omitempty" xml:"HeaderValue,omitempty"`
}

func (s DescribeApiResponseBodyServiceConfigMockHeadersMockHeader) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceConfigMockHeadersMockHeader) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceConfigMockHeadersMockHeader) SetHeaderName(v string) *DescribeApiResponseBodyServiceConfigMockHeadersMockHeader {
	s.HeaderName = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigMockHeadersMockHeader) SetHeaderValue(v string) *DescribeApiResponseBodyServiceConfigMockHeadersMockHeader {
	s.HeaderValue = &v
	return s
}

type DescribeApiResponseBodyServiceConfigOssConfig struct {
	// The operation options on OSS. Valid values:
	//
	// 	- GetObject
	//
	// 	- PostObject
	//
	// 	- DeleteObject
	//
	// 	- PutObject
	//
	// 	- HeadObject
	//
	// 	- GetObjectMeta
	//
	// 	- AppendObject
	//
	// example:
	//
	// GetObject
	Action *string `json:"Action,omitempty" xml:"Action,omitempty"`
	// The OSS bucket.
	//
	// example:
	//
	// cbg-db
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	// The stored object or folder path.
	//
	// example:
	//
	// /folder/test.json
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The ID of the region where the OSS instance is located.
	//
	// example:
	//
	// cn-hangzhou
	OssRegionId *string `json:"OssRegionId,omitempty" xml:"OssRegionId,omitempty"`
}

func (s DescribeApiResponseBodyServiceConfigOssConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceConfigOssConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceConfigOssConfig) SetAction(v string) *DescribeApiResponseBodyServiceConfigOssConfig {
	s.Action = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigOssConfig) SetBucketName(v string) *DescribeApiResponseBodyServiceConfigOssConfig {
	s.BucketName = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigOssConfig) SetKey(v string) *DescribeApiResponseBodyServiceConfigOssConfig {
	s.Key = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigOssConfig) SetOssRegionId(v string) *DescribeApiResponseBodyServiceConfigOssConfig {
	s.OssRegionId = &v
	return s
}

type DescribeApiResponseBodyServiceConfigVpcConfig struct {
	// The ID of the ECS or SLB instance in the VPC.
	//
	// example:
	//
	// i-bp1h497hkijewv2***
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the VPC access authorization.
	//
	// example:
	//
	// glmall-app-test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The port number that corresponds to the instance.
	//
	// example:
	//
	// 8080
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the VPC.
	//
	// example:
	//
	// vpc-2zeafsc3fygk1***
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The VPC protocol.
	//
	// example:
	//
	// HTTP
	VpcScheme *string `json:"VpcScheme,omitempty" xml:"VpcScheme,omitempty"`
}

func (s DescribeApiResponseBodyServiceConfigVpcConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceConfigVpcConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceConfigVpcConfig) SetInstanceId(v string) *DescribeApiResponseBodyServiceConfigVpcConfig {
	s.InstanceId = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigVpcConfig) SetName(v string) *DescribeApiResponseBodyServiceConfigVpcConfig {
	s.Name = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigVpcConfig) SetPort(v int32) *DescribeApiResponseBodyServiceConfigVpcConfig {
	s.Port = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigVpcConfig) SetVpcId(v string) *DescribeApiResponseBodyServiceConfigVpcConfig {
	s.VpcId = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigVpcConfig) SetVpcScheme(v string) *DescribeApiResponseBodyServiceConfigVpcConfig {
	s.VpcScheme = &v
	return s
}

type DescribeApiResponseBodyServiceParameters struct {
	ServiceParameter []*DescribeApiResponseBodyServiceParametersServiceParameter `json:"ServiceParameter,omitempty" xml:"ServiceParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyServiceParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceParameters) SetServiceParameter(v []*DescribeApiResponseBodyServiceParametersServiceParameter) *DescribeApiResponseBodyServiceParameters {
	s.ServiceParameter = v
	return s
}

type DescribeApiResponseBodyServiceParametersServiceParameter struct {
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	//
	// example:
	//
	// HEAD
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The data type of the parameter. Valid values: STRING, NUMBER, and BOOLEAN.
	//
	// example:
	//
	// String
	ParameterType *string `json:"ParameterType,omitempty" xml:"ParameterType,omitempty"`
	// The mapped parameter name in the backend service.
	//
	// example:
	//
	// clientIp
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiResponseBodyServiceParametersServiceParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceParametersServiceParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceParametersServiceParameter) SetLocation(v string) *DescribeApiResponseBodyServiceParametersServiceParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiResponseBodyServiceParametersServiceParameter) SetParameterType(v string) *DescribeApiResponseBodyServiceParametersServiceParameter {
	s.ParameterType = &v
	return s
}

func (s *DescribeApiResponseBodyServiceParametersServiceParameter) SetServiceParameterName(v string) *DescribeApiResponseBodyServiceParametersServiceParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiResponseBodyServiceParametersMap struct {
	ServiceParameterMap []*DescribeApiResponseBodyServiceParametersMapServiceParameterMap `json:"ServiceParameterMap,omitempty" xml:"ServiceParameterMap,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyServiceParametersMap) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceParametersMap) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceParametersMap) SetServiceParameterMap(v []*DescribeApiResponseBodyServiceParametersMapServiceParameterMap) *DescribeApiResponseBodyServiceParametersMap {
	s.ServiceParameterMap = v
	return s
}

type DescribeApiResponseBodyServiceParametersMapServiceParameterMap struct {
	// The name of the frontend parameter. The name must be included in RequestParametersObject and match ApiParameterName in RequestParameters.
	//
	// example:
	//
	// sex
	RequestParameterName *string `json:"RequestParameterName,omitempty" xml:"RequestParameterName,omitempty"`
	// The mapped parameter name in the backend service.
	//
	// example:
	//
	// sex
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiResponseBodyServiceParametersMapServiceParameterMap) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceParametersMapServiceParameterMap) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceParametersMapServiceParameterMap) SetRequestParameterName(v string) *DescribeApiResponseBodyServiceParametersMapServiceParameterMap {
	s.RequestParameterName = &v
	return s
}

func (s *DescribeApiResponseBodyServiceParametersMapServiceParameterMap) SetServiceParameterName(v string) *DescribeApiResponseBodyServiceParametersMapServiceParameterMap {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiResponseBodySystemParameters struct {
	SystemParameter []*DescribeApiResponseBodySystemParametersSystemParameter `json:"SystemParameter,omitempty" xml:"SystemParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodySystemParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodySystemParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodySystemParameters) SetSystemParameter(v []*DescribeApiResponseBodySystemParametersSystemParameter) *DescribeApiResponseBodySystemParameters {
	s.SystemParameter = v
	return s
}

type DescribeApiResponseBodySystemParametersSystemParameter struct {
	// The example value.
	//
	// example:
	//
	// 192.168.1.1
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The parameter description.
	//
	// example:
	//
	// Client IP Address
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	//
	// example:
	//
	// HEAD
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the system parameter. Valid values: CaClientIp, CaDomain, CaRequestHandleTime, CaAppId, CaRequestId, CaHttpSchema, and CaProxy.
	//
	// example:
	//
	// CaClientIp
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The mapped parameter name in the backend service.
	//
	// example:
	//
	// clientIp
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiResponseBodySystemParametersSystemParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodySystemParametersSystemParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodySystemParametersSystemParameter) SetDemoValue(v string) *DescribeApiResponseBodySystemParametersSystemParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeApiResponseBodySystemParametersSystemParameter) SetDescription(v string) *DescribeApiResponseBodySystemParametersSystemParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiResponseBodySystemParametersSystemParameter) SetLocation(v string) *DescribeApiResponseBodySystemParametersSystemParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiResponseBodySystemParametersSystemParameter) SetParameterName(v string) *DescribeApiResponseBodySystemParametersSystemParameter {
	s.ParameterName = &v
	return s
}

func (s *DescribeApiResponseBodySystemParametersSystemParameter) SetServiceParameterName(v string) *DescribeApiResponseBodySystemParametersSystemParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiResponseBodyTagList struct {
	Tag []*DescribeApiResponseBodyTagListTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyTagList) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyTagList) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyTagList) SetTag(v []*DescribeApiResponseBodyTagListTag) *DescribeApiResponseBodyTagList {
	s.Tag = v
	return s
}

type DescribeApiResponseBodyTagListTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeApiResponseBodyTagListTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyTagListTag) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyTagListTag) SetTagKey(v string) *DescribeApiResponseBodyTagListTag {
	s.TagKey = &v
	return s
}

func (s *DescribeApiResponseBodyTagListTag) SetTagValue(v string) *DescribeApiResponseBodyTagListTag {
	s.TagValue = &v
	return s
}

type DescribeApiResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiResponse) SetHeaders(v map[string]*string) *DescribeApiResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiResponse) SetStatusCode(v int32) *DescribeApiResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiResponse) SetBody(v *DescribeApiResponseBody) *DescribeApiResponse {
	s.Body = v
	return s
}

type DescribeApiDocRequest struct {
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3b81fd160f5645e097cc8855d75a1cf6
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 123
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment to which the API is published. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// If this parameter is not specified, the default value is used, which is RELEASE.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiDocRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiDocRequest) SetApiId(v string) *DescribeApiDocRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiDocRequest) SetGroupId(v string) *DescribeApiDocRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiDocRequest) SetSecurityToken(v string) *DescribeApiDocRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiDocRequest) SetStageName(v string) *DescribeApiDocRequest {
	s.StageName = &v
	return s
}

type DescribeApiDocResponseBody struct {
	// The ID of the API.
	//
	// example:
	//
	// b24be7e59a104e52bffbf432cc9272af
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API
	//
	// example:
	//
	// ObtainKeywordQRCodeAddress
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The security authentication method. Valid values: APP, ANONYMOUS, and APPOPENID, indicating respectively Alibaba Cloud application authentication, anonymous authentication, and third-party OpenID Connect account authentication.
	//
	// example:
	//
	// APP
	AuthType *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	// The publishing time.
	//
	// example:
	//
	// 2022-07-13T16:00:33Z
	DeployedTime *string `json:"DeployedTime,omitempty" xml:"DeployedTime,omitempty"`
	// The API description.
	//
	// example:
	//
	// Lynk\\&Co Digital Mall OMS-UAT
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 	- Specifies whether to set **DisableInternet*	- to **true*	- to limit API calls to within the VPC.
	//
	// 	- If you set **DisableInternet*	- to **false**, the limit is lifted. The default value is false when you create an API.
	//
	// example:
	//
	// true
	DisableInternet *bool `json:"DisableInternet,omitempty" xml:"DisableInternet,omitempty"`
	// The sample error codes returned by the backend service.
	ErrorCodeSamples *DescribeApiDocResponseBodyErrorCodeSamples `json:"ErrorCodeSamples,omitempty" xml:"ErrorCodeSamples,omitempty" type:"Struct"`
	// The sample error response from the backend service.
	//
	// example:
	//
	// {"errorCode":"fail","errorMessage":"param invalid"}
	FailResultSample *string `json:"FailResultSample,omitempty" xml:"FailResultSample,omitempty"`
	// 	- Specifies whether to set **ForceNonceCheck*	- to **true*	- to force the check of X-Ca-Nonce during the request. This is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
	//
	// 	- If you set **ForceNonceCheck*	- to **false**, the check is not performed. The default value is false when you create an API.
	//
	// example:
	//
	// true
	ForceNonceCheck *bool `json:"ForceNonceCheck,omitempty" xml:"ForceNonceCheck,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// f51d08c5b7c84342905544ebaec26d35
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group.
	//
	// example:
	//
	// Member Age Transaction Service
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The region ID of the API group.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The returned API frontend definition information. It is an array consisting of RequestConfig data.
	RequestConfig *DescribeApiDocResponseBodyRequestConfig `json:"RequestConfig,omitempty" xml:"RequestConfig,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// F253FB5F-9AE1-5DDA-99B5-46BE00A3719E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned frontend input parameters in the API. It is an array consisting of RequestParameter data.
	RequestParameters *DescribeApiDocResponseBodyRequestParameters `json:"RequestParameters,omitempty" xml:"RequestParameters,omitempty" type:"Struct"`
	// The sample response.
	//
	// example:
	//
	// {\\n  \\"status\\": 0,\\n  \\"data\\": {\\n    \\"count\\": 1,\\n    \\"list\\": [\\n      \\"352\\"\\n    ]\\n  },\\n  \\"message\\": \\"success\\"\\n}
	ResultSample *string `json:"ResultSample,omitempty" xml:"ResultSample,omitempty"`
	// The return value type.
	//
	// example:
	//
	// JSON
	ResultType *string `json:"ResultType,omitempty" xml:"ResultType,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// Indicates whether the API is public. Valid values: PUBLIC and PRIVATE.
	//
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribeApiDocResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiDocResponseBody) SetApiId(v string) *DescribeApiDocResponseBody {
	s.ApiId = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetApiName(v string) *DescribeApiDocResponseBody {
	s.ApiName = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetAuthType(v string) *DescribeApiDocResponseBody {
	s.AuthType = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetDeployedTime(v string) *DescribeApiDocResponseBody {
	s.DeployedTime = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetDescription(v string) *DescribeApiDocResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetDisableInternet(v bool) *DescribeApiDocResponseBody {
	s.DisableInternet = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetErrorCodeSamples(v *DescribeApiDocResponseBodyErrorCodeSamples) *DescribeApiDocResponseBody {
	s.ErrorCodeSamples = v
	return s
}

func (s *DescribeApiDocResponseBody) SetFailResultSample(v string) *DescribeApiDocResponseBody {
	s.FailResultSample = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetForceNonceCheck(v bool) *DescribeApiDocResponseBody {
	s.ForceNonceCheck = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetGroupId(v string) *DescribeApiDocResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetGroupName(v string) *DescribeApiDocResponseBody {
	s.GroupName = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetRegionId(v string) *DescribeApiDocResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetRequestConfig(v *DescribeApiDocResponseBodyRequestConfig) *DescribeApiDocResponseBody {
	s.RequestConfig = v
	return s
}

func (s *DescribeApiDocResponseBody) SetRequestId(v string) *DescribeApiDocResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetRequestParameters(v *DescribeApiDocResponseBodyRequestParameters) *DescribeApiDocResponseBody {
	s.RequestParameters = v
	return s
}

func (s *DescribeApiDocResponseBody) SetResultSample(v string) *DescribeApiDocResponseBody {
	s.ResultSample = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetResultType(v string) *DescribeApiDocResponseBody {
	s.ResultType = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetStageName(v string) *DescribeApiDocResponseBody {
	s.StageName = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetVisibility(v string) *DescribeApiDocResponseBody {
	s.Visibility = &v
	return s
}

type DescribeApiDocResponseBodyErrorCodeSamples struct {
	ErrorCodeSample []*DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample `json:"ErrorCodeSample,omitempty" xml:"ErrorCodeSample,omitempty" type:"Repeated"`
}

func (s DescribeApiDocResponseBodyErrorCodeSamples) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocResponseBodyErrorCodeSamples) GoString() string {
	return s.String()
}

func (s *DescribeApiDocResponseBodyErrorCodeSamples) SetErrorCodeSample(v []*DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample) *DescribeApiDocResponseBodyErrorCodeSamples {
	s.ErrorCodeSample = v
	return s
}

type DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample struct {
	// The returned error code.
	//
	// example:
	//
	// Error
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The description of the error code.
	//
	// example:
	//
	// Unauthorized
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The returned error message.
	//
	// example:
	//
	// error message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample) GoString() string {
	return s.String()
}

func (s *DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample) SetCode(v string) *DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Code = &v
	return s
}

func (s *DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample) SetDescription(v string) *DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Description = &v
	return s
}

func (s *DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample) SetMessage(v string) *DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Message = &v
	return s
}

type DescribeApiDocResponseBodyRequestConfig struct {
	// This parameter takes effect only when the RequestMode parameter is set to MAPPING.********
	//
	// The server data transmission method used for POST and PUT requests. Valid values: FORM and STREAM. FORM indicates that data in key-value pairs is transmitted as forms. STREAM indicates that data is transmitted as byte streams.
	//
	// example:
	//
	// STREAM
	BodyFormat *string `json:"BodyFormat,omitempty" xml:"BodyFormat,omitempty"`
	// The description of the request body.
	//
	// example:
	//
	// fwefwef
	PostBodyDescription *string `json:"PostBodyDescription,omitempty" xml:"PostBodyDescription,omitempty"`
	// The HTTP method used to make the request. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.
	//
	// example:
	//
	// POST
	RequestHttpMethod *string `json:"RequestHttpMethod,omitempty" xml:"RequestHttpMethod,omitempty"`
	// The request mode. Valid values:
	//
	// 	- MAPPING: Parameters are mapped. Unknown parameters are filtered out.
	//
	// 	- PASSTHROUGH: Parameters are passed through.
	//
	// 	- MAPPING_PASSTHROUGH: Parameters are mapped. Unknown parameters are passed through.
	//
	// example:
	//
	// MAPPING
	RequestMode *string `json:"RequestMode,omitempty" xml:"RequestMode,omitempty"`
	// The API request path. If the complete API URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the API request path is ` /object/add  `.
	//
	// example:
	//
	// /api/billing/test/[type]
	RequestPath *string `json:"RequestPath,omitempty" xml:"RequestPath,omitempty"`
	// The protocol type supported by the API. Valid values: HTTP and HTTPS. Separate multiple values with commas (,), such as "HTTP,HTTPS".
	//
	// example:
	//
	// HTTP
	RequestProtocol *string `json:"RequestProtocol,omitempty" xml:"RequestProtocol,omitempty"`
}

func (s DescribeApiDocResponseBodyRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocResponseBodyRequestConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiDocResponseBodyRequestConfig) SetBodyFormat(v string) *DescribeApiDocResponseBodyRequestConfig {
	s.BodyFormat = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestConfig) SetPostBodyDescription(v string) *DescribeApiDocResponseBodyRequestConfig {
	s.PostBodyDescription = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestConfig) SetRequestHttpMethod(v string) *DescribeApiDocResponseBodyRequestConfig {
	s.RequestHttpMethod = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestConfig) SetRequestMode(v string) *DescribeApiDocResponseBodyRequestConfig {
	s.RequestMode = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestConfig) SetRequestPath(v string) *DescribeApiDocResponseBodyRequestConfig {
	s.RequestPath = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestConfig) SetRequestProtocol(v string) *DescribeApiDocResponseBodyRequestConfig {
	s.RequestProtocol = &v
	return s
}

type DescribeApiDocResponseBodyRequestParameters struct {
	RequestParameter []*DescribeApiDocResponseBodyRequestParametersRequestParameter `json:"RequestParameter,omitempty" xml:"RequestParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiDocResponseBodyRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocResponseBodyRequestParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiDocResponseBodyRequestParameters) SetRequestParameter(v []*DescribeApiDocResponseBodyRequestParametersRequestParameter) *DescribeApiDocResponseBodyRequestParameters {
	s.RequestParameter = v
	return s
}

type DescribeApiDocResponseBodyRequestParametersRequestParameter struct {
	// The name of the parameter in the API request.
	//
	// example:
	//
	// Length
	ApiParameterName *string `json:"ApiParameterName,omitempty" xml:"ApiParameterName,omitempty"`
	// The type of the array element.
	//
	// example:
	//
	// String
	ArrayItemsType *string `json:"ArrayItemsType,omitempty" xml:"ArrayItemsType,omitempty"`
	// The default value.
	//
	// example:
	//
	// 20
	DefaultValue *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	// The example value.
	//
	// example:
	//
	// 20
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The description.
	//
	// example:
	//
	// Parameters
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The order in which the parameter is sorted in the document.
	//
	// example:
	//
	// 0
	DocOrder *int32 `json:"DocOrder,omitempty" xml:"DocOrder,omitempty"`
	// Indicates whether the document is public. Valid values: **PUBLIC*	- and **PRIVATE**.
	//
	// example:
	//
	// PUBLIC
	DocShow *string `json:"DocShow,omitempty" xml:"DocShow,omitempty"`
	// The hash values that can be specified if the **ParameterType*	- parameter is set to Int, Long, Float, Double, or String. Separate multiple hash values with commas (,). Examples: 1,2,3,4,9 and A,B,C,E,F.
	//
	// example:
	//
	// boy,girl
	EnumValue *string `json:"EnumValue,omitempty" xml:"EnumValue,omitempty"`
	// JSON scheme
	//
	// example:
	//
	// {}
	JsonScheme *string `json:"JsonScheme,omitempty" xml:"JsonScheme,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	//
	// example:
	//
	// HEAD
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The maximum length.
	//
	// example:
	//
	// 123456
	MaxLength *int64 `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	// The maximum value.
	//
	// example:
	//
	// 200
	MaxValue *int64 `json:"MaxValue,omitempty" xml:"MaxValue,omitempty"`
	// The minimum length.
	//
	// example:
	//
	// 2
	MinLength *int64 `json:"MinLength,omitempty" xml:"MinLength,omitempty"`
	// The minimum value.
	//
	// example:
	//
	// 123456
	MinValue *int64 `json:"MinValue,omitempty" xml:"MinValue,omitempty"`
	// The data type of the parameter.
	//
	// example:
	//
	// String
	ParameterType *string `json:"ParameterType,omitempty" xml:"ParameterType,omitempty"`
	// The regular expression that is used to validate the parameter if the **ParameterType*	- parameter is set to String.
	//
	// example:
	//
	// xxx
	RegularExpression *string `json:"RegularExpression,omitempty" xml:"RegularExpression,omitempty"`
	// Indicates whether the parameter is required.
	//
	// example:
	//
	// OPTIONAL
	Required *string `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s DescribeApiDocResponseBodyRequestParametersRequestParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocResponseBodyRequestParametersRequestParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetApiParameterName(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.ApiParameterName = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetArrayItemsType(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.ArrayItemsType = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetDefaultValue(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.DefaultValue = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetDemoValue(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetDescription(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetDocOrder(v int32) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.DocOrder = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetDocShow(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.DocShow = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetEnumValue(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.EnumValue = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetJsonScheme(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.JsonScheme = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetLocation(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetMaxLength(v int64) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.MaxLength = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetMaxValue(v int64) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.MaxValue = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetMinLength(v int64) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.MinLength = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetMinValue(v int64) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.MinValue = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetParameterType(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.ParameterType = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetRegularExpression(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.RegularExpression = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetRequired(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.Required = &v
	return s
}

type DescribeApiDocResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiDocResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiDocResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiDocResponse) SetHeaders(v map[string]*string) *DescribeApiDocResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiDocResponse) SetStatusCode(v int32) *DescribeApiDocResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiDocResponse) SetBody(v *DescribeApiDocResponseBody) *DescribeApiDocResponse {
	s.Body = v
	return s
}

type DescribeApiGroupRequest struct {
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 523e8dc7bbe04613b5b1d726c2a7889d
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The object tags that match the lifecycle rule. You can specify multiple tags.
	//
	// example:
	//
	// Key， Value
	Tag []*DescribeApiGroupRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeApiGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupRequest) SetGroupId(v string) *DescribeApiGroupRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiGroupRequest) SetSecurityToken(v string) *DescribeApiGroupRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiGroupRequest) SetTag(v []*DescribeApiGroupRequestTag) *DescribeApiGroupRequest {
	s.Tag = v
	return s
}

type DescribeApiGroupRequestTag struct {
	// The key of the tag.
	//
	// example:
	//
	// appname
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// test_app
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeApiGroupRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupRequestTag) SetKey(v string) *DescribeApiGroupRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeApiGroupRequestTag) SetValue(v string) *DescribeApiGroupRequestTag {
	s.Value = &v
	return s
}

type DescribeApiGroupResponseBody struct {
	// The root path of the API.
	//
	// example:
	//
	// /qqq
	BasePath *string `json:"BasePath,omitempty" xml:"BasePath,omitempty"`
	// The billing status of the API group.
	//
	// 	- **NORMAL**: The API group is normal.
	//
	// 	- **LOCKED**: The API group is locked due to overdue payments.
	//
	// example:
	//
	// NORMAL
	BillingStatus *string `json:"BillingStatus,omitempty" xml:"BillingStatus,omitempty"`
	// The products on Alibaba Cloud Marketplace.
	//
	// example:
	//
	// false
	CloudMarketCommodity *bool `json:"CloudMarketCommodity,omitempty" xml:"CloudMarketCommodity,omitempty"`
	// The CloudMonitor application group.
	//
	// example:
	//
	// 217008423
	CmsMonitorGroup *string `json:"CmsMonitorGroup,omitempty" xml:"CmsMonitorGroup,omitempty"`
	// The list of associated tags. Separate multiple tags with commas (,).
	//
	// example:
	//
	// depart:dep1
	CompatibleFlags *string `json:"CompatibleFlags,omitempty" xml:"CompatibleFlags,omitempty"`
	// The creation time (UTC) of the API group.
	//
	// example:
	//
	// 2016-08-01T06:53:02Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The custom domain name information.
	CustomDomains *DescribeApiGroupResponseBodyCustomDomains `json:"CustomDomains,omitempty" xml:"CustomDomains,omitempty" type:"Struct"`
	// The custom trace configuration.
	//
	// example:
	//
	// {\\"parameterLocation\\":\\"HEADER\\",\\"parameterName\\":\\"traceId\\"}
	CustomTraceConfig *string `json:"CustomTraceConfig,omitempty" xml:"CustomTraceConfig,omitempty"`
	// The list of custom configuration items.
	//
	// example:
	//
	// removeResponseServerHeader
	CustomerConfigs *string `json:"CustomerConfigs,omitempty" xml:"CustomerConfigs,omitempty"`
	// example:
	//
	// normal
	DedicatedInstanceType *string `json:"DedicatedInstanceType,omitempty" xml:"DedicatedInstanceType,omitempty"`
	// The default domain name.
	//
	// example:
	//
	// mkt.api.gaore.com
	DefaultDomain *string `json:"DefaultDomain,omitempty" xml:"DefaultDomain,omitempty"`
	// The description of the API group.
	//
	// example:
	//
	// New weather informations.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Indicates whether access over the public second-level domain name is enabled. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// false
	DisableInnerDomain *bool `json:"DisableInnerDomain,omitempty" xml:"DisableInnerDomain,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// example:
	//
	// 523e8dc7bbe04613b5b1d726c2a7889d
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the group to which the API belongs.
	//
	// example:
	//
	// NewWeather
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The HTTPS policy.
	//
	// example:
	//
	// HTTPS2_TLS1_0
	HttpsPolicy *string `json:"HttpsPolicy,omitempty" xml:"HttpsPolicy,omitempty"`
	// The validity status of the API group. Valid values:
	//
	// 	- **NORMAL**: The API group is normal.
	//
	// 	- **LOCKED**: The API group is locked because it is not valid.
	//
	// example:
	//
	// NORMAL
	IllegalStatus *string `json:"IllegalStatus,omitempty" xml:"IllegalStatus,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// apigateway-cn-v6419k43xxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the instance.
	//
	// 	- CLASSIC_SHARED: shared instance that uses the classic network configuration
	//
	// 	- VPC_SHARED: shared instance that uses VPC
	//
	// 	- VPC_DEDICATED: dedicated instance that uses VPC
	//
	// example:
	//
	// VPC_SHARED
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The IPv6 status.
	//
	// example:
	//
	// UNBIND
	Ipv6Status *string `json:"Ipv6Status,omitempty" xml:"Ipv6Status,omitempty"`
	// example:
	//
	// The current instance conflicts with the target instance.
	MigrationError *string `json:"MigrationError,omitempty" xml:"MigrationError,omitempty"`
	// example:
	//
	// Fail
	MigrationStatus *string `json:"MigrationStatus,omitempty" xml:"MigrationStatus,omitempty"`
	// The last modification time (UTC) of the API group.
	//
	// example:
	//
	// 2016-08-01T06:54:32Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// Specifies whether to pass headers.
	//
	// example:
	//
	// eagleeye-rpcid,x-b3-traceid
	PassthroughHeaders *string `json:"PassthroughHeaders,omitempty" xml:"PassthroughHeaders,omitempty"`
	// The region to which the API group belongs.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 03442A3D-3B7D-434C-8A95-A5FEB989B519
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The runtime environment information.
	StageItems *DescribeApiGroupResponseBodyStageItems `json:"StageItems,omitempty" xml:"StageItems,omitempty" type:"Struct"`
	// The status of the API group.
	//
	// 	- **NORMAL**: The API group is normal.
	//
	// 	- **DELETE**: The API group is deleted.
	//
	// example:
	//
	// NORMAL
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The second-level domain name automatically assigned to the API group.
	//
	// example:
	//
	// 27d50c0f2e54b359919923d908bb015-cn-hangzhou.alicloudapi.com
	SubDomain *string `json:"SubDomain,omitempty" xml:"SubDomain,omitempty"`
	// The upper QPS limit of the API group. The default value is 500. You can increase the upper limit by submitting an application.
	//
	// example:
	//
	// 500
	TrafficLimit *int32 `json:"TrafficLimit,omitempty" xml:"TrafficLimit,omitempty"`
	// The user log settings.
	//
	// example:
	//
	// {\\"requestBody\\":true,\\"responseBody\\":true,\\"queryString\\":\\"test\\",\\"requestHeaders\\":\\"test\\",\\"responseHeaders\\":\\"test\\",\\"jwtClaims\\":\\"test\\"}
	UserLogConfig *string `json:"UserLogConfig,omitempty" xml:"UserLogConfig,omitempty"`
	// The VPC domain name.
	//
	// example:
	//
	// e4****7151954***acbd9f7****1058a-ap-southeast-1-vpc.alicloudapi.com
	VpcDomain *string `json:"VpcDomain,omitempty" xml:"VpcDomain,omitempty"`
	// The VPC SLB domain name.
	//
	// example:
	//
	// 257e9d450e924d00b976b0ecfb7184c2-cn-beijing-intranet.alicloudapi.com
	VpcSlbIntranetDomain *string `json:"VpcSlbIntranetDomain,omitempty" xml:"VpcSlbIntranetDomain,omitempty"`
}

func (s DescribeApiGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupResponseBody) SetBasePath(v string) *DescribeApiGroupResponseBody {
	s.BasePath = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetBillingStatus(v string) *DescribeApiGroupResponseBody {
	s.BillingStatus = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetCloudMarketCommodity(v bool) *DescribeApiGroupResponseBody {
	s.CloudMarketCommodity = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetCmsMonitorGroup(v string) *DescribeApiGroupResponseBody {
	s.CmsMonitorGroup = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetCompatibleFlags(v string) *DescribeApiGroupResponseBody {
	s.CompatibleFlags = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetCreatedTime(v string) *DescribeApiGroupResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetCustomDomains(v *DescribeApiGroupResponseBodyCustomDomains) *DescribeApiGroupResponseBody {
	s.CustomDomains = v
	return s
}

func (s *DescribeApiGroupResponseBody) SetCustomTraceConfig(v string) *DescribeApiGroupResponseBody {
	s.CustomTraceConfig = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetCustomerConfigs(v string) *DescribeApiGroupResponseBody {
	s.CustomerConfigs = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetDedicatedInstanceType(v string) *DescribeApiGroupResponseBody {
	s.DedicatedInstanceType = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetDefaultDomain(v string) *DescribeApiGroupResponseBody {
	s.DefaultDomain = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetDescription(v string) *DescribeApiGroupResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetDisableInnerDomain(v bool) *DescribeApiGroupResponseBody {
	s.DisableInnerDomain = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetGroupId(v string) *DescribeApiGroupResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetGroupName(v string) *DescribeApiGroupResponseBody {
	s.GroupName = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetHttpsPolicy(v string) *DescribeApiGroupResponseBody {
	s.HttpsPolicy = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetIllegalStatus(v string) *DescribeApiGroupResponseBody {
	s.IllegalStatus = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetInstanceId(v string) *DescribeApiGroupResponseBody {
	s.InstanceId = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetInstanceType(v string) *DescribeApiGroupResponseBody {
	s.InstanceType = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetIpv6Status(v string) *DescribeApiGroupResponseBody {
	s.Ipv6Status = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetMigrationError(v string) *DescribeApiGroupResponseBody {
	s.MigrationError = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetMigrationStatus(v string) *DescribeApiGroupResponseBody {
	s.MigrationStatus = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetModifiedTime(v string) *DescribeApiGroupResponseBody {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetPassthroughHeaders(v string) *DescribeApiGroupResponseBody {
	s.PassthroughHeaders = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetRegionId(v string) *DescribeApiGroupResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetRequestId(v string) *DescribeApiGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetStageItems(v *DescribeApiGroupResponseBodyStageItems) *DescribeApiGroupResponseBody {
	s.StageItems = v
	return s
}

func (s *DescribeApiGroupResponseBody) SetStatus(v string) *DescribeApiGroupResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetSubDomain(v string) *DescribeApiGroupResponseBody {
	s.SubDomain = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetTrafficLimit(v int32) *DescribeApiGroupResponseBody {
	s.TrafficLimit = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetUserLogConfig(v string) *DescribeApiGroupResponseBody {
	s.UserLogConfig = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetVpcDomain(v string) *DescribeApiGroupResponseBody {
	s.VpcDomain = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetVpcSlbIntranetDomain(v string) *DescribeApiGroupResponseBody {
	s.VpcSlbIntranetDomain = &v
	return s
}

type DescribeApiGroupResponseBodyCustomDomains struct {
	DomainItem []*DescribeApiGroupResponseBodyCustomDomainsDomainItem `json:"DomainItem,omitempty" xml:"DomainItem,omitempty" type:"Repeated"`
}

func (s DescribeApiGroupResponseBodyCustomDomains) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupResponseBodyCustomDomains) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupResponseBodyCustomDomains) SetDomainItem(v []*DescribeApiGroupResponseBodyCustomDomainsDomainItem) *DescribeApiGroupResponseBodyCustomDomains {
	s.DomainItem = v
	return s
}

type DescribeApiGroupResponseBodyCustomDomainsDomainItem struct {
	BindStageAlias *string `json:"BindStageAlias,omitempty" xml:"BindStageAlias,omitempty"`
	// The environment in which the associated API group runs.
	//
	// example:
	//
	// TEST
	BindStageName *string `json:"BindStageName,omitempty" xml:"BindStageName,omitempty"`
	// The unique ID of the SSL certificate, which is automatically generated by the system.
	//
	// example:
	//
	// 6EF60BEC-0242-43AF-BB20-270359FB54A7
	CertificateId *string `json:"CertificateId,omitempty" xml:"CertificateId,omitempty"`
	// The SSL certificate name.
	//
	// example:
	//
	// myCertificate
	CertificateName *string `json:"CertificateName,omitempty" xml:"CertificateName,omitempty"`
	// The time when the certificate expires.
	//
	// example:
	//
	// 2635123476000
	CertificateValidEnd *int64 `json:"CertificateValidEnd,omitempty" xml:"CertificateValidEnd,omitempty"`
	// The time when the certificate takes effect.
	//
	// example:
	//
	// 1689043476000
	CertificateValidStart *int64 `json:"CertificateValidStart,omitempty" xml:"CertificateValidStart,omitempty"`
	// The type of the custom domain name.
	//
	// example:
	//
	// intranet
	CustomDomainType *string `json:"CustomDomainType,omitempty" xml:"CustomDomainType,omitempty"`
	// The binding status of the custom domain name. Valid values:
	//
	// 	- **BINDING**: The domain name is bound.
	//
	// 	- **BOUND**: The domain name is not bound.
	//
	// example:
	//
	// BINDING
	DomainBindingStatus *string `json:"DomainBindingStatus,omitempty" xml:"DomainBindingStatus,omitempty"`
	// The domain name resolution status. Valid values:
	//
	// 	- **RESOLVED**
	//
	// 	- **UNRESOLVED**
	//
	// example:
	//
	// RESOLVED
	DomainCNAMEStatus *string `json:"DomainCNAMEStatus,omitempty" xml:"DomainCNAMEStatus,omitempty"`
	// The validity status of the domain name. Valid values:
	//
	// 	- **NORMAL**: The domain name is valid.
	//
	// 	- **ABNORMAL**: The domain name is invalid. This status affects API calls and must be resolved as soon as possible.
	//
	// example:
	//
	// ABNORMAL
	DomainLegalStatus *string `json:"DomainLegalStatus,omitempty" xml:"DomainLegalStatus,omitempty"`
	// The domain name.
	//
	// example:
	//
	// api.demo.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// Remarks about the domain name, such as the cause of an exception.
	//
	// example:
	//
	// Indicates that the domain name does not have an ICP filing.
	DomainRemark *string `json:"DomainRemark,omitempty" xml:"DomainRemark,omitempty"`
	// The status of the domain name that uses the WebSocket feature.
	//
	// example:
	//
	// CLOSE
	DomainWebSocketStatus *string `json:"DomainWebSocketStatus,omitempty" xml:"DomainWebSocketStatus,omitempty"`
	// Indicates whether to redirect HTTP requests as HTTPS requests.
	//
	// example:
	//
	// false
	IsHttpRedirectToHttps *bool `json:"IsHttpRedirectToHttps,omitempty" xml:"IsHttpRedirectToHttps,omitempty"`
	// The wildcard domain name mode.
	//
	// example:
	//
	// [\\"{test}.test.com\\"]
	WildcardDomainPatterns *string `json:"WildcardDomainPatterns,omitempty" xml:"WildcardDomainPatterns,omitempty"`
}

func (s DescribeApiGroupResponseBodyCustomDomainsDomainItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupResponseBodyCustomDomainsDomainItem) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetBindStageAlias(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.BindStageAlias = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetBindStageName(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.BindStageName = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetCertificateId(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.CertificateId = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetCertificateName(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.CertificateName = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetCertificateValidEnd(v int64) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.CertificateValidEnd = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetCertificateValidStart(v int64) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.CertificateValidStart = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetCustomDomainType(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.CustomDomainType = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetDomainBindingStatus(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.DomainBindingStatus = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetDomainCNAMEStatus(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.DomainCNAMEStatus = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetDomainLegalStatus(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.DomainLegalStatus = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetDomainName(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.DomainName = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetDomainRemark(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.DomainRemark = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetDomainWebSocketStatus(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.DomainWebSocketStatus = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetIsHttpRedirectToHttps(v bool) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.IsHttpRedirectToHttps = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetWildcardDomainPatterns(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.WildcardDomainPatterns = &v
	return s
}

type DescribeApiGroupResponseBodyStageItems struct {
	StageInfo []*DescribeApiGroupResponseBodyStageItemsStageInfo `json:"StageInfo,omitempty" xml:"StageInfo,omitempty" type:"Repeated"`
}

func (s DescribeApiGroupResponseBodyStageItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupResponseBodyStageItems) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupResponseBodyStageItems) SetStageInfo(v []*DescribeApiGroupResponseBodyStageItemsStageInfo) *DescribeApiGroupResponseBodyStageItems {
	s.StageInfo = v
	return s
}

type DescribeApiGroupResponseBodyStageItemsStageInfo struct {
	// The environment description.
	//
	// example:
	//
	// MYTEST
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The environment ID.
	//
	// example:
	//
	// 123e8dc7bbe01613b5b1d726c2a7888e
	StageId *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	// The environment name.
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiGroupResponseBodyStageItemsStageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupResponseBodyStageItemsStageInfo) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupResponseBodyStageItemsStageInfo) SetDescription(v string) *DescribeApiGroupResponseBodyStageItemsStageInfo {
	s.Description = &v
	return s
}

func (s *DescribeApiGroupResponseBodyStageItemsStageInfo) SetStageId(v string) *DescribeApiGroupResponseBodyStageItemsStageInfo {
	s.StageId = &v
	return s
}

func (s *DescribeApiGroupResponseBodyStageItemsStageInfo) SetStageName(v string) *DescribeApiGroupResponseBodyStageItemsStageInfo {
	s.StageName = &v
	return s
}

type DescribeApiGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupResponse) SetHeaders(v map[string]*string) *DescribeApiGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiGroupResponse) SetStatusCode(v int32) *DescribeApiGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiGroupResponse) SetBody(v *DescribeApiGroupResponseBody) *DescribeApiGroupResponse {
	s.Body = v
	return s
}

type DescribeApiGroupVpcWhitelistRequest struct {
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// f6c64214dc27400196eef954575d60d3
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeApiGroupVpcWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupVpcWhitelistRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupVpcWhitelistRequest) SetGroupId(v string) *DescribeApiGroupVpcWhitelistRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiGroupVpcWhitelistRequest) SetSecurityToken(v string) *DescribeApiGroupVpcWhitelistRequest {
	s.SecurityToken = &v
	return s
}

type DescribeApiGroupVpcWhitelistResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ016
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the VPC.
	//
	// example:
	//
	// vpc-bp11w979o2s9rcr962w25
	VpcIds *string `json:"VpcIds,omitempty" xml:"VpcIds,omitempty"`
}

func (s DescribeApiGroupVpcWhitelistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupVpcWhitelistResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupVpcWhitelistResponseBody) SetRequestId(v string) *DescribeApiGroupVpcWhitelistResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiGroupVpcWhitelistResponseBody) SetVpcIds(v string) *DescribeApiGroupVpcWhitelistResponseBody {
	s.VpcIds = &v
	return s
}

type DescribeApiGroupVpcWhitelistResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiGroupVpcWhitelistResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiGroupVpcWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupVpcWhitelistResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupVpcWhitelistResponse) SetHeaders(v map[string]*string) *DescribeApiGroupVpcWhitelistResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiGroupVpcWhitelistResponse) SetStatusCode(v int32) *DescribeApiGroupVpcWhitelistResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiGroupVpcWhitelistResponse) SetBody(v *DescribeApiGroupVpcWhitelistResponseBody) *DescribeApiGroupVpcWhitelistResponse {
	s.Body = v
	return s
}

type DescribeApiGroupsRequest struct {
	// Specifies whether to enable tag verification.
	//
	// example:
	//
	// true
	EnableTagAuth *bool `json:"EnableTagAuth,omitempty" xml:"EnableTagAuth,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// example:
	//
	// be6d2abcc0dd4f749fc2d2edd6567164
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The keyword that can be specified in the name of the API group.
	//
	// example:
	//
	// Traffic
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// apigateway-cn-v6419k43245xx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 50. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The order. Valid values: asc and desc. Default value: desc.
	//
	// 	- asc: The API groups are displayed in ascending order of modification time.
	//
	// 	- desc: The API groups are displayed in descending order of modification time.
	//
	// example:
	//
	// desc
	Sort *string `json:"Sort,omitempty" xml:"Sort,omitempty"`
	// The list of tags.
	Tag []*DescribeApiGroupsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeApiGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsRequest) SetEnableTagAuth(v bool) *DescribeApiGroupsRequest {
	s.EnableTagAuth = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetGroupId(v string) *DescribeApiGroupsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetGroupName(v string) *DescribeApiGroupsRequest {
	s.GroupName = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetInstanceId(v string) *DescribeApiGroupsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetPageNumber(v int32) *DescribeApiGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetPageSize(v int32) *DescribeApiGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetSecurityToken(v string) *DescribeApiGroupsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetSort(v string) *DescribeApiGroupsRequest {
	s.Sort = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetTag(v []*DescribeApiGroupsRequestTag) *DescribeApiGroupsRequest {
	s.Tag = v
	return s
}

type DescribeApiGroupsRequestTag struct {
	// The key of the tag.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeApiGroupsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsRequestTag) SetKey(v string) *DescribeApiGroupsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeApiGroupsRequestTag) SetValue(v string) *DescribeApiGroupsRequestTag {
	s.Value = &v
	return s
}

type DescribeApiGroupsResponseBody struct {
	// The returned group set.
	ApiGroupAttributes *DescribeApiGroupsResponseBodyApiGroupAttributes `json:"ApiGroupAttributes,omitempty" xml:"ApiGroupAttributes,omitempty" type:"Struct"`
	// The number of pages to return the results on.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// D6E46F10-F26C-4AA0-BB69-FE2743D9AE62
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 2
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApiGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsResponseBody) SetApiGroupAttributes(v *DescribeApiGroupsResponseBodyApiGroupAttributes) *DescribeApiGroupsResponseBody {
	s.ApiGroupAttributes = v
	return s
}

func (s *DescribeApiGroupsResponseBody) SetPageNumber(v int32) *DescribeApiGroupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiGroupsResponseBody) SetPageSize(v int32) *DescribeApiGroupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApiGroupsResponseBody) SetRequestId(v string) *DescribeApiGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiGroupsResponseBody) SetTotalCount(v int32) *DescribeApiGroupsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApiGroupsResponseBodyApiGroupAttributes struct {
	ApiGroupAttribute []*DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute `json:"ApiGroupAttribute,omitempty" xml:"ApiGroupAttribute,omitempty" type:"Repeated"`
}

func (s DescribeApiGroupsResponseBodyApiGroupAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsResponseBodyApiGroupAttributes) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributes) SetApiGroupAttribute(v []*DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) *DescribeApiGroupsResponseBodyApiGroupAttributes {
	s.ApiGroupAttribute = v
	return s
}

type DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute struct {
	// The basepath.
	//
	// example:
	//
	// /v2/
	BasePath *string `json:"BasePath,omitempty" xml:"BasePath,omitempty"`
	// The billing status of the API group. Valid values:
	//
	// 	- **NORMAL**: The instance is normal.
	//
	// 	- **LOCKED**: The API group is locked due to overdue payments.
	//
	// example:
	//
	// NORMAL
	BillingStatus *string `json:"BillingStatus,omitempty" xml:"BillingStatus,omitempty"`
	// The creation time (UTC) of the API group.
	//
	// example:
	//
	// 2016-08-01T08:45:15Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// Group Description
	//
	// example:
	//
	// TrafficInformations.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// example:
	//
	// be6d2abcc0dd4f749fc2d2edd6567164
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group.
	//
	// example:
	//
	// Traffic
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The HTTPS security policy
	//
	// example:
	//
	// HTTPS2_TLS1_0
	HttpsPolicy *string `json:"HttpsPolicy,omitempty" xml:"HttpsPolicy,omitempty"`
	// The validity status of the API group. Valid values:
	//
	// 	- **NORMAL**: The instance is normal.
	//
	// 	- **LOCKED**: The API group is locked because it is not valid.
	//
	// example:
	//
	// NORMAL
	IllegalStatus *string `json:"IllegalStatus,omitempty" xml:"IllegalStatus,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// apigateway-cn-v6419k43245xx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the instance.
	//
	// example:
	//
	// VPC_SHARED
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The last modification time (UTC) of the API group.
	//
	// example:
	//
	// 2016-08-01T08:45:15Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The region to which the API group belongs.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The second-level domain name that corresponds to the API group and is used by the CNAME of the custom domain name.
	//
	// example:
	//
	// be6d2abcc0dd4f749fc2d2edd6567164-cn-hangzhou.alicloudapi.com
	SubDomain *string `json:"SubDomain,omitempty" xml:"SubDomain,omitempty"`
	// The list of tags.
	Tags *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	// The upper QPS limit of the API group. The default value is 500. You can increase the upper limit by submitting an application.
	//
	// example:
	//
	// 500
	TrafficLimit *int32 `json:"TrafficLimit,omitempty" xml:"TrafficLimit,omitempty"`
}

func (s DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetBasePath(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.BasePath = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetBillingStatus(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.BillingStatus = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetCreatedTime(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.CreatedTime = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetDescription(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.Description = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetGroupId(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.GroupId = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetGroupName(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.GroupName = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetHttpsPolicy(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.HttpsPolicy = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetIllegalStatus(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.IllegalStatus = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetInstanceId(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.InstanceId = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetInstanceType(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.InstanceType = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetModifiedTime(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetRegionId(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetSubDomain(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.SubDomain = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetTags(v *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTags) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.Tags = v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetTrafficLimit(v int32) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.TrafficLimit = &v
	return s
}

type DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTags struct {
	TagInfo []*DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo `json:"TagInfo,omitempty" xml:"TagInfo,omitempty" type:"Repeated"`
}

func (s DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTags) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTags) SetTagInfo(v []*DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTags {
	s.TagInfo = v
	return s
}

type DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo struct {
	// The key of the tag.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo) SetKey(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo {
	s.Key = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo) SetValue(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo {
	s.Value = &v
	return s
}

type DescribeApiGroupsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsResponse) SetHeaders(v map[string]*string) *DescribeApiGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiGroupsResponse) SetStatusCode(v int32) *DescribeApiGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiGroupsResponse) SetBody(v *DescribeApiGroupsResponseBody) *DescribeApiGroupsResponse {
	s.Body = v
	return s
}

type DescribeApiHistoriesRequest struct {
	// The ID of the API.
	//
	// example:
	//
	// c076144d7878437b8f82fb85890ce6a0
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API. The name is used for fuzzy match.
	//
	// example:
	//
	// weather
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1084f9034c744137901057206b39d2b6
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiHistoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoriesRequest) SetApiId(v string) *DescribeApiHistoriesRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiHistoriesRequest) SetApiName(v string) *DescribeApiHistoriesRequest {
	s.ApiName = &v
	return s
}

func (s *DescribeApiHistoriesRequest) SetGroupId(v string) *DescribeApiHistoriesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiHistoriesRequest) SetPageNumber(v int32) *DescribeApiHistoriesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiHistoriesRequest) SetPageSize(v int32) *DescribeApiHistoriesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApiHistoriesRequest) SetSecurityToken(v string) *DescribeApiHistoriesRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiHistoriesRequest) SetStageName(v string) *DescribeApiHistoriesRequest {
	s.StageName = &v
	return s
}

type DescribeApiHistoriesResponseBody struct {
	// The returned API information. It is an array consisting of ApiHisItem data.
	ApiHisItems *DescribeApiHistoriesResponseBodyApiHisItems `json:"ApiHisItems,omitempty" xml:"ApiHisItems,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 3
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 15
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ003
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 32
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApiHistoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoriesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoriesResponseBody) SetApiHisItems(v *DescribeApiHistoriesResponseBodyApiHisItems) *DescribeApiHistoriesResponseBody {
	s.ApiHisItems = v
	return s
}

func (s *DescribeApiHistoriesResponseBody) SetPageNumber(v int32) *DescribeApiHistoriesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiHistoriesResponseBody) SetPageSize(v int32) *DescribeApiHistoriesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApiHistoriesResponseBody) SetRequestId(v string) *DescribeApiHistoriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiHistoriesResponseBody) SetTotalCount(v int32) *DescribeApiHistoriesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApiHistoriesResponseBodyApiHisItems struct {
	ApiHisItem []*DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem `json:"ApiHisItem,omitempty" xml:"ApiHisItem,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoriesResponseBodyApiHisItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoriesResponseBodyApiHisItems) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoriesResponseBodyApiHisItems) SetApiHisItem(v []*DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) *DescribeApiHistoriesResponseBodyApiHisItems {
	s.ApiHisItem = v
	return s
}

type DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem struct {
	// The ID of the API.
	//
	// example:
	//
	// 5af418828f0344a3b588c0cc1331a3bc
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API.
	//
	// example:
	//
	// CreateObject
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The publishing time (UTC) of the API.
	//
	// example:
	//
	// 2016-07-20T08:28:48Z
	DeployedTime *string `json:"DeployedTime,omitempty" xml:"DeployedTime,omitempty"`
	// The description of the API.
	//
	// example:
	//
	// Creates an object
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 1084f9034c744137901057206b39d2b6
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group.
	//
	// example:
	//
	// myGroup2
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The historical version of the API.
	//
	// example:
	//
	// 20160705104552393
	HistoryVersion *string `json:"HistoryVersion,omitempty" xml:"HistoryVersion,omitempty"`
	// The region in which the API is located.
	//
	// example:
	//
	// cn-qingdao
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// Indicates whether an API version is effective. Valid values: **ONLINE*	- and **OFFLINE**.
	//
	// example:
	//
	// ONLINE
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetApiId(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.ApiId = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetApiName(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.ApiName = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetDeployedTime(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.DeployedTime = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetDescription(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.Description = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetGroupId(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.GroupId = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetGroupName(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.GroupName = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetHistoryVersion(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.HistoryVersion = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetRegionId(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.RegionId = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetStageName(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.StageName = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetStatus(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.Status = &v
	return s
}

type DescribeApiHistoriesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiHistoriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiHistoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoriesResponse) SetHeaders(v map[string]*string) *DescribeApiHistoriesResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiHistoriesResponse) SetStatusCode(v int32) *DescribeApiHistoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiHistoriesResponse) SetBody(v *DescribeApiHistoriesResponseBody) *DescribeApiHistoriesResponse {
	s.Body = v
	return s
}

type DescribeApiHistoryRequest struct {
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// dc6e17ee3120404c839bbcd7622ab6ed
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// example:
	//
	// 3013a55c0c44483f984d26df27120513
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// Specifies the version number that you want to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20211122155403834
	HistoryVersion *string `json:"HistoryVersion,omitempty" xml:"HistoryVersion,omitempty"`
	SecurityToken  *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**: the test environment
	//
	// 	- **PRE**: the pre-release environment
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryRequest) SetApiId(v string) *DescribeApiHistoryRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiHistoryRequest) SetGroupId(v string) *DescribeApiHistoryRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiHistoryRequest) SetHistoryVersion(v string) *DescribeApiHistoryRequest {
	s.HistoryVersion = &v
	return s
}

func (s *DescribeApiHistoryRequest) SetSecurityToken(v string) *DescribeApiHistoryRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiHistoryRequest) SetStageName(v string) *DescribeApiHistoryRequest {
	s.StageName = &v
	return s
}

type DescribeApiHistoryResponseBody struct {
	// If **AuthType*	- is set to **APP**, this value must be passed to specify the signature algorithm. If you do not specify a value, HmacSHA256 is used by default. Valid values:
	//
	// 	- HmacSHA256
	//
	// 	- HmacSHA1,HmacSHA256
	//
	// example:
	//
	// HmacSHA256
	AllowSignatureMethod *string `json:"AllowSignatureMethod,omitempty" xml:"AllowSignatureMethod,omitempty"`
	// The ID of the API.
	//
	// example:
	//
	// bebf996e4b3d445d83078094b72b0d91
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API.
	//
	// example:
	//
	// Backstage_MengMeng Broadcast_Seven Niu Cloud Push Stream Callback_Official
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The AppCode authentication type supported. Valid values:
	//
	// 	- DEFAULT: supported after being made available in Alibaba Cloud Marketplace
	//
	// 	- DISABLE: not supported.
	//
	// 	- HEADER : supported only in the Header parameter
	//
	// 	- HEADER_QUERY : supported in the Header or Query parameter.
	//
	// example:
	//
	// HEADER
	AppCodeAuthType *string `json:"AppCodeAuthType,omitempty" xml:"AppCodeAuthType,omitempty"`
	// The security authentication method of the API. Valid values:
	//
	// 	- **APP: Only authorized applications can call the API.**
	//
	// 	- **ANONYMOUS: The API can be anonymously called. In this mode, you must take note of the following rules:**
	//
	//     	- All users who have obtained the API service information can call this API. API Gateway does not authenticate callers and cannot set user-specific throttling policies. If you make this API public, set API-specific throttling policies.
	//
	// example:
	//
	// APP
	AuthType *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	// Backend configurations
	BackendConfig *DescribeApiHistoryResponseBodyBackendConfig `json:"BackendConfig,omitempty" xml:"BackendConfig,omitempty" type:"Struct"`
	// Specifies whether to enable backend services.
	//
	// example:
	//
	// true
	BackendEnable *bool `json:"BackendEnable,omitempty" xml:"BackendEnable,omitempty"`
	// The constant parameters.
	ConstantParameters *DescribeApiHistoryResponseBodyConstantParameters `json:"ConstantParameters,omitempty" xml:"ConstantParameters,omitempty" type:"Struct"`
	// The custom system parameters.
	CustomSystemParameters *DescribeApiHistoryResponseBodyCustomSystemParameters `json:"CustomSystemParameters,omitempty" xml:"CustomSystemParameters,omitempty" type:"Struct"`
	// The publishing time (UTC) of the API.
	//
	// example:
	//
	// 2021-06-1113:57:38
	DeployedTime *string `json:"DeployedTime,omitempty" xml:"DeployedTime,omitempty"`
	// The description of the API.
	//
	// example:
	//
	// Queries weather based on the region name
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 	- Specifies whether to set **DisableInternet*	- to **true*	- to limit API calls to within the VPC.
	//
	// 	- If you set **DisableInternet*	- to **false**, the limit is lifted. The default value is false when you create an API.
	//
	// example:
	//
	// true
	DisableInternet *bool `json:"DisableInternet,omitempty" xml:"DisableInternet,omitempty"`
	// The sample error codes returned by the backend service.
	//
	// For more information, see [ErrorCodeSample](https://help.aliyun.com/document_detail/44392.html).
	ErrorCodeSamples *DescribeApiHistoryResponseBodyErrorCodeSamples `json:"ErrorCodeSamples,omitempty" xml:"ErrorCodeSamples,omitempty" type:"Struct"`
	// The sample error response from the backend service.
	//
	// example:
	//
	// {"errorCode":"fail","errorMessage":"param invalid"}
	FailResultSample *string `json:"FailResultSample,omitempty" xml:"FailResultSample,omitempty"`
	// 	- Specifies whether to set **ForceNonceCheck*	- to **true*	- to force the check of X-Ca-Nonce during the request. This is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
	//
	// 	- If you set **ForceNonceCheck*	- to **false**, the check is not performed. The default value is false when you create an API.
	//
	// example:
	//
	// true
	ForceNonceCheck *bool `json:"ForceNonceCheck,omitempty" xml:"ForceNonceCheck,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// cfb6ef799bf54fffabb0f02019ad2581
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group.
	//
	// example:
	//
	// dev_api
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The historical version number.
	//
	// example:
	//
	// 20211022134156663
	HistoryVersion *string `json:"HistoryVersion,omitempty" xml:"HistoryVersion,omitempty"`
	// The configuration items of the third-party OpenID Connect authentication method.
	OpenIdConnectConfig *DescribeApiHistoryResponseBodyOpenIdConnectConfig `json:"OpenIdConnectConfig,omitempty" xml:"OpenIdConnectConfig,omitempty" type:"Struct"`
	// The region where the API is located.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Configuration items of API requests sent by the consumer to API Gateway.
	//
	// For more information, see [RequestConfig](https://help.aliyun.com/document_detail/43985.html).
	RequestConfig *DescribeApiHistoryResponseBodyRequestConfig `json:"RequestConfig,omitempty" xml:"RequestConfig,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 6C87A26A-6A18-4B8E-8099-705278381A2C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The parameters of API requests sent by the consumer to API Gateway.
	//
	// For more information, see [RequestParameter](https://help.aliyun.com/document_detail/43986.html).
	RequestParameters *DescribeApiHistoryResponseBodyRequestParameters `json:"RequestParameters,omitempty" xml:"RequestParameters,omitempty" type:"Struct"`
	// The return description of the API.
	//
	// example:
	//
	// {}
	ResultBodyModel *string `json:"ResultBodyModel,omitempty" xml:"ResultBodyModel,omitempty"`
	// The return description of the API.
	ResultDescriptions *DescribeApiHistoryResponseBodyResultDescriptions `json:"ResultDescriptions,omitempty" xml:"ResultDescriptions,omitempty" type:"Struct"`
	// The sample response.
	//
	// example:
	//
	// {\\n  \\"status\\": 0,\\n  \\"data\\": {\\n    \\"count\\": 1,\\n    \\"list\\": [\\n      \\"352\\"\\n    ]\\n  },\\n  \\"message\\": \\"success\\"\\n}
	ResultSample *string `json:"ResultSample,omitempty" xml:"ResultSample,omitempty"`
	// The type of the data to return.
	//
	// example:
	//
	// JSON
	ResultType *string `json:"ResultType,omitempty" xml:"ResultType,omitempty"`
	// The information about a backend service call.
	ServiceConfig *DescribeApiHistoryResponseBodyServiceConfig `json:"ServiceConfig,omitempty" xml:"ServiceConfig,omitempty" type:"Struct"`
	// The parameters of API requests sent by API Gateway to the backend service.
	//
	// For more information, see [ServiceParameter](https://help.aliyun.com/document_detail/43988.html).
	ServiceParameters *DescribeApiHistoryResponseBodyServiceParameters `json:"ServiceParameters,omitempty" xml:"ServiceParameters,omitempty" type:"Struct"`
	// The mappings between parameters of requests sent by the consumer to API Gateway and parameters of requests sent by API Gateway to the backend service.
	//
	// For more information, see [ServiceParameterMap](https://help.aliyun.com/document_detail/43989.html).
	ServiceParametersMap *DescribeApiHistoryResponseBodyServiceParametersMap `json:"ServiceParametersMap,omitempty" xml:"ServiceParametersMap,omitempty" type:"Struct"`
	// The environment in which the API is requested. Valid values:
	//
	// 	- **RELEASE**: the production environment
	//
	// 	- **PRE**: the pre-release environment
	//
	// 	- **TEST**: the test environment
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The invocation status of the API.
	//
	// example:
	//
	// 200
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The common parameters of the APIs, in JSON format.
	SystemParameters *DescribeApiHistoryResponseBodySystemParameters `json:"SystemParameters,omitempty" xml:"SystemParameters,omitempty" type:"Struct"`
	// Specifies whether to make the API public. Valid values:
	//
	// 	- **PUBLIC**: Make the API public. If you set this parameter to PUBLIC, this API is displayed on the APIs page for all users after the API is published to the production environment.
	//
	// 	- **PRIVATE**: Make the API private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.
	//
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
	// The type of the two-way communication API. Valid values:
	//
	// 	- **COMMON**: general APIs
	//
	// 	- **REGISTER**: registered APIs
	//
	// 	- **UNREGISTER**: unregistered APIs
	//
	// 	- **NOTIFY**: downstream notification
	//
	// example:
	//
	// COMMON
	WebSocketApiType *string `json:"WebSocketApiType,omitempty" xml:"WebSocketApiType,omitempty"`
}

func (s DescribeApiHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBody) SetAllowSignatureMethod(v string) *DescribeApiHistoryResponseBody {
	s.AllowSignatureMethod = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetApiId(v string) *DescribeApiHistoryResponseBody {
	s.ApiId = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetApiName(v string) *DescribeApiHistoryResponseBody {
	s.ApiName = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetAppCodeAuthType(v string) *DescribeApiHistoryResponseBody {
	s.AppCodeAuthType = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetAuthType(v string) *DescribeApiHistoryResponseBody {
	s.AuthType = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetBackendConfig(v *DescribeApiHistoryResponseBodyBackendConfig) *DescribeApiHistoryResponseBody {
	s.BackendConfig = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetBackendEnable(v bool) *DescribeApiHistoryResponseBody {
	s.BackendEnable = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetConstantParameters(v *DescribeApiHistoryResponseBodyConstantParameters) *DescribeApiHistoryResponseBody {
	s.ConstantParameters = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetCustomSystemParameters(v *DescribeApiHistoryResponseBodyCustomSystemParameters) *DescribeApiHistoryResponseBody {
	s.CustomSystemParameters = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetDeployedTime(v string) *DescribeApiHistoryResponseBody {
	s.DeployedTime = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetDescription(v string) *DescribeApiHistoryResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetDisableInternet(v bool) *DescribeApiHistoryResponseBody {
	s.DisableInternet = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetErrorCodeSamples(v *DescribeApiHistoryResponseBodyErrorCodeSamples) *DescribeApiHistoryResponseBody {
	s.ErrorCodeSamples = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetFailResultSample(v string) *DescribeApiHistoryResponseBody {
	s.FailResultSample = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetForceNonceCheck(v bool) *DescribeApiHistoryResponseBody {
	s.ForceNonceCheck = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetGroupId(v string) *DescribeApiHistoryResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetGroupName(v string) *DescribeApiHistoryResponseBody {
	s.GroupName = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetHistoryVersion(v string) *DescribeApiHistoryResponseBody {
	s.HistoryVersion = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetOpenIdConnectConfig(v *DescribeApiHistoryResponseBodyOpenIdConnectConfig) *DescribeApiHistoryResponseBody {
	s.OpenIdConnectConfig = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetRegionId(v string) *DescribeApiHistoryResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetRequestConfig(v *DescribeApiHistoryResponseBodyRequestConfig) *DescribeApiHistoryResponseBody {
	s.RequestConfig = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetRequestId(v string) *DescribeApiHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetRequestParameters(v *DescribeApiHistoryResponseBodyRequestParameters) *DescribeApiHistoryResponseBody {
	s.RequestParameters = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetResultBodyModel(v string) *DescribeApiHistoryResponseBody {
	s.ResultBodyModel = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetResultDescriptions(v *DescribeApiHistoryResponseBodyResultDescriptions) *DescribeApiHistoryResponseBody {
	s.ResultDescriptions = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetResultSample(v string) *DescribeApiHistoryResponseBody {
	s.ResultSample = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetResultType(v string) *DescribeApiHistoryResponseBody {
	s.ResultType = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetServiceConfig(v *DescribeApiHistoryResponseBodyServiceConfig) *DescribeApiHistoryResponseBody {
	s.ServiceConfig = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetServiceParameters(v *DescribeApiHistoryResponseBodyServiceParameters) *DescribeApiHistoryResponseBody {
	s.ServiceParameters = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetServiceParametersMap(v *DescribeApiHistoryResponseBodyServiceParametersMap) *DescribeApiHistoryResponseBody {
	s.ServiceParametersMap = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetStageName(v string) *DescribeApiHistoryResponseBody {
	s.StageName = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetStatus(v string) *DescribeApiHistoryResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetSystemParameters(v *DescribeApiHistoryResponseBodySystemParameters) *DescribeApiHistoryResponseBody {
	s.SystemParameters = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetVisibility(v string) *DescribeApiHistoryResponseBody {
	s.Visibility = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetWebSocketApiType(v string) *DescribeApiHistoryResponseBody {
	s.WebSocketApiType = &v
	return s
}

type DescribeApiHistoryResponseBodyBackendConfig struct {
	// The ID of the backend service.
	//
	// example:
	//
	// a0305308908c4740aba9cbfd63ba99b7
	BackendId *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	// The name of the backend service.
	//
	// example:
	//
	// zmapi
	BackendName *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	// The type of the backend service.
	//
	// example:
	//
	// HTTP
	BackendType *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
}

func (s DescribeApiHistoryResponseBodyBackendConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyBackendConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyBackendConfig) SetBackendId(v string) *DescribeApiHistoryResponseBodyBackendConfig {
	s.BackendId = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyBackendConfig) SetBackendName(v string) *DescribeApiHistoryResponseBodyBackendConfig {
	s.BackendName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyBackendConfig) SetBackendType(v string) *DescribeApiHistoryResponseBodyBackendConfig {
	s.BackendType = &v
	return s
}

type DescribeApiHistoryResponseBodyConstantParameters struct {
	ConstantParameter []*DescribeApiHistoryResponseBodyConstantParametersConstantParameter `json:"ConstantParameter,omitempty" xml:"ConstantParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodyConstantParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyConstantParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyConstantParameters) SetConstantParameter(v []*DescribeApiHistoryResponseBodyConstantParametersConstantParameter) *DescribeApiHistoryResponseBodyConstantParameters {
	s.ConstantParameter = v
	return s
}

type DescribeApiHistoryResponseBodyConstantParametersConstantParameter struct {
	// The constant value.
	//
	// example:
	//
	// constance
	ConstantValue *string `json:"ConstantValue,omitempty" xml:"ConstantValue,omitempty"`
	// The description.
	//
	// example:
	//
	// for_test1
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	//
	// example:
	//
	// HEAD
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the backend service parameter.
	//
	// example:
	//
	// constance
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiHistoryResponseBodyConstantParametersConstantParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyConstantParametersConstantParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyConstantParametersConstantParameter) SetConstantValue(v string) *DescribeApiHistoryResponseBodyConstantParametersConstantParameter {
	s.ConstantValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyConstantParametersConstantParameter) SetDescription(v string) *DescribeApiHistoryResponseBodyConstantParametersConstantParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyConstantParametersConstantParameter) SetLocation(v string) *DescribeApiHistoryResponseBodyConstantParametersConstantParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyConstantParametersConstantParameter) SetServiceParameterName(v string) *DescribeApiHistoryResponseBodyConstantParametersConstantParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiHistoryResponseBodyCustomSystemParameters struct {
	CustomSystemParameter []*DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter `json:"CustomSystemParameter,omitempty" xml:"CustomSystemParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodyCustomSystemParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyCustomSystemParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyCustomSystemParameters) SetCustomSystemParameter(v []*DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter) *DescribeApiHistoryResponseBodyCustomSystemParameters {
	s.CustomSystemParameter = v
	return s
}

type DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter struct {
	// Example
	//
	// example:
	//
	// 192.168.1.1
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The description of the custom system parameter.
	//
	// example:
	//
	// balabala
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	//
	// example:
	//
	// HEAD
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the custom system parameter.
	//
	// example:
	//
	// CaClientIp
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The name of the corresponding backend parameter.
	//
	// example:
	//
	// clientIp
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter) SetDemoValue(v string) *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter) SetDescription(v string) *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter) SetLocation(v string) *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter) SetParameterName(v string) *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter {
	s.ParameterName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter) SetServiceParameterName(v string) *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiHistoryResponseBodyErrorCodeSamples struct {
	ErrorCodeSample []*DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample `json:"ErrorCodeSample,omitempty" xml:"ErrorCodeSample,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodyErrorCodeSamples) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyErrorCodeSamples) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyErrorCodeSamples) SetErrorCodeSample(v []*DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample) *DescribeApiHistoryResponseBodyErrorCodeSamples {
	s.ErrorCodeSample = v
	return s
}

type DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample struct {
	// The error code.
	//
	// example:
	//
	// 400
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The description.
	//
	// example:
	//
	// Missing the parameter UserId
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The error message.
	//
	// example:
	//
	// MissingParameter
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample) SetCode(v string) *DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Code = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample) SetDescription(v string) *DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Description = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample) SetMessage(v string) *DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Message = &v
	return s
}

type DescribeApiHistoryResponseBodyOpenIdConnectConfig struct {
	// The name of the parameter that corresponds to the token.
	//
	// example:
	//
	// xxx
	IdTokenParamName *string `json:"IdTokenParamName,omitempty" xml:"IdTokenParamName,omitempty"`
	// The configuration of OpenID Connect authentication. Valid values:
	//
	// 	- **IDTOKEN: indicates the APIs that are called by clients to obtain tokens. If you specify this value, the PublicKeyId parameter and the PublicKey parameter are required.**
	//
	// 	- **BUSINESS: indicates business APIs. Tokens are used to call the business APIs. If you specify this value, the IdTokenParamName parameter is required.
	//
	// example:
	//
	// IDTOKEN
	OpenIdApiType *string `json:"OpenIdApiType,omitempty" xml:"OpenIdApiType,omitempty"`
	// The public key of the API.
	//
	// example:
	//
	// EB1837F8693CCED0BF750B3AD48467BEB569E780A14591CF92
	PublicKey *string `json:"PublicKey,omitempty" xml:"PublicKey,omitempty"`
	// The ID of the public key.
	//
	// example:
	//
	// 88483727556929326703309904351185815489
	PublicKeyId *string `json:"PublicKeyId,omitempty" xml:"PublicKeyId,omitempty"`
}

func (s DescribeApiHistoryResponseBodyOpenIdConnectConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyOpenIdConnectConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyOpenIdConnectConfig) SetIdTokenParamName(v string) *DescribeApiHistoryResponseBodyOpenIdConnectConfig {
	s.IdTokenParamName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyOpenIdConnectConfig) SetOpenIdApiType(v string) *DescribeApiHistoryResponseBodyOpenIdConnectConfig {
	s.OpenIdApiType = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyOpenIdConnectConfig) SetPublicKey(v string) *DescribeApiHistoryResponseBodyOpenIdConnectConfig {
	s.PublicKey = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyOpenIdConnectConfig) SetPublicKeyId(v string) *DescribeApiHistoryResponseBodyOpenIdConnectConfig {
	s.PublicKeyId = &v
	return s
}

type DescribeApiHistoryResponseBodyRequestConfig struct {
	// The server data transmission method used for POST and PUT requests. Valid values: FORM and STREAM. FORM indicates that data in key-value pairs is transmitted as forms. STREAM indicates that data is transmitted as byte streams. This parameter takes effect only when the RequestMode parameter is set to MAPPING.
	//
	// example:
	//
	// STREAM
	BodyFormat *string `json:"BodyFormat,omitempty" xml:"BodyFormat,omitempty"`
	// The body model.
	//
	// example:
	//
	// https://apigateway.aliyun.com/models/3a240a1XXXXXXXXd9ab1bf7e947b4095/9e2df550e85b4XXXXXXXX619eaab
	BodyModel *string `json:"BodyModel,omitempty" xml:"BodyModel,omitempty"`
	// The description of the request body.
	//
	// example:
	//
	// fwefwef
	PostBodyDescription *string `json:"PostBodyDescription,omitempty" xml:"PostBodyDescription,omitempty"`
	// The HTTP method. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.
	//
	// example:
	//
	// POST
	RequestHttpMethod *string `json:"RequestHttpMethod,omitempty" xml:"RequestHttpMethod,omitempty"`
	// The request mode. Valid values:
	//
	// 	- MAPPING: Parameters are mapped. Unknown parameters are filtered out.
	//
	// 	- PASSTHROUGH: Parameters are passed through.
	//
	// 	- MAPPING_PASSTHROUGH: Parameters are mapped. Unknown parameters are passed through.
	//
	// example:
	//
	// MAPPING
	RequestMode *string `json:"RequestMode,omitempty" xml:"RequestMode,omitempty"`
	// API path
	//
	// example:
	//
	// /api/billing/test/[type]
	RequestPath *string `json:"RequestPath,omitempty" xml:"RequestPath,omitempty"`
	// The protocol type supported by the API. Valid values: HTTP, HTTPS, and WebSocket. Separate multiple values with commas (,), such as "HTTP,HTTPS".
	//
	// example:
	//
	// HTTP
	RequestProtocol *string `json:"RequestProtocol,omitempty" xml:"RequestProtocol,omitempty"`
}

func (s DescribeApiHistoryResponseBodyRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyRequestConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyRequestConfig) SetBodyFormat(v string) *DescribeApiHistoryResponseBodyRequestConfig {
	s.BodyFormat = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestConfig) SetBodyModel(v string) *DescribeApiHistoryResponseBodyRequestConfig {
	s.BodyModel = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestConfig) SetPostBodyDescription(v string) *DescribeApiHistoryResponseBodyRequestConfig {
	s.PostBodyDescription = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestConfig) SetRequestHttpMethod(v string) *DescribeApiHistoryResponseBodyRequestConfig {
	s.RequestHttpMethod = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestConfig) SetRequestMode(v string) *DescribeApiHistoryResponseBodyRequestConfig {
	s.RequestMode = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestConfig) SetRequestPath(v string) *DescribeApiHistoryResponseBodyRequestConfig {
	s.RequestPath = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestConfig) SetRequestProtocol(v string) *DescribeApiHistoryResponseBodyRequestConfig {
	s.RequestProtocol = &v
	return s
}

type DescribeApiHistoryResponseBodyRequestParameters struct {
	RequestParameter []*DescribeApiHistoryResponseBodyRequestParametersRequestParameter `json:"RequestParameter,omitempty" xml:"RequestParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodyRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyRequestParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyRequestParameters) SetRequestParameter(v []*DescribeApiHistoryResponseBodyRequestParametersRequestParameter) *DescribeApiHistoryResponseBodyRequestParameters {
	s.RequestParameter = v
	return s
}

type DescribeApiHistoryResponseBodyRequestParametersRequestParameter struct {
	// The name of the API parameter.
	//
	// example:
	//
	// age
	ApiParameterName *string `json:"ApiParameterName,omitempty" xml:"ApiParameterName,omitempty"`
	// The type of the array element.
	//
	// example:
	//
	// String
	ArrayItemsType *string `json:"ArrayItemsType,omitempty" xml:"ArrayItemsType,omitempty"`
	// Default value
	//
	// example:
	//
	// 20
	DefaultValue *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	// Examples
	//
	// example:
	//
	// 20
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The description.
	//
	// example:
	//
	// modidyTest
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The order in the document.
	//
	// example:
	//
	// 0
	DocOrder *int32 `json:"DocOrder,omitempty" xml:"DocOrder,omitempty"`
	// Specifies whether the document is public. Valid values: PUBLIC and PRIVATE.
	//
	// example:
	//
	// PUBLIC
	DocShow *string `json:"DocShow,omitempty" xml:"DocShow,omitempty"`
	// The hash values that can be entered when ParameterType is set to Int, Long, Float, Double, or String. Separate different values with commas (,), such as 1,2,3,4,9 or A,B,C,E,F.
	//
	// example:
	//
	// boy,girl
	EnumValue *string `json:"EnumValue,omitempty" xml:"EnumValue,omitempty"`
	// JSON scheme
	//
	// example:
	//
	// {}
	JsonScheme *string `json:"JsonScheme,omitempty" xml:"JsonScheme,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	//
	// example:
	//
	// HEAD
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The maximum parameter length when ParameterType is set to String.
	//
	// example:
	//
	// 123456
	MaxLength *int64 `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	// The maximum parameter value when ParameterType is set to Int, Long, Float, or Double.
	//
	// example:
	//
	// 123456
	MaxValue *int64 `json:"MaxValue,omitempty" xml:"MaxValue,omitempty"`
	// The minimum parameter length when ParameterType is set to String.
	//
	// example:
	//
	// 123456
	MinLength *int64 `json:"MinLength,omitempty" xml:"MinLength,omitempty"`
	// The minimum parameter value when ParameterType is set to Int, Long, Float, or Double.
	//
	// example:
	//
	// 123456
	MinValue *int64 `json:"MinValue,omitempty" xml:"MinValue,omitempty"`
	// The type of a request parameter. Valid values: String, Int, Long, Float, Double, and Boolean.
	//
	// example:
	//
	// String
	ParameterType *string `json:"ParameterType,omitempty" xml:"ParameterType,omitempty"`
	// The regular expression used for parameter validation when ParameterType is set to String.
	//
	// example:
	//
	// xxx
	RegularExpression *string `json:"RegularExpression,omitempty" xml:"RegularExpression,omitempty"`
	// Indicates whether the parameter is required. Valid values: REQUIRED and OPTIONAL.
	//
	// example:
	//
	// OPTIONAL
	Required *string `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s DescribeApiHistoryResponseBodyRequestParametersRequestParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyRequestParametersRequestParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetApiParameterName(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.ApiParameterName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetArrayItemsType(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.ArrayItemsType = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetDefaultValue(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.DefaultValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetDemoValue(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetDescription(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetDocOrder(v int32) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.DocOrder = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetDocShow(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.DocShow = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetEnumValue(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.EnumValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetJsonScheme(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.JsonScheme = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetLocation(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetMaxLength(v int64) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.MaxLength = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetMaxValue(v int64) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.MaxValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetMinLength(v int64) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.MinLength = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetMinValue(v int64) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.MinValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetParameterType(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.ParameterType = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetRegularExpression(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.RegularExpression = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetRequired(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.Required = &v
	return s
}

type DescribeApiHistoryResponseBodyResultDescriptions struct {
	ResultDescription []*DescribeApiHistoryResponseBodyResultDescriptionsResultDescription `json:"ResultDescription,omitempty" xml:"ResultDescription,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodyResultDescriptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyResultDescriptions) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyResultDescriptions) SetResultDescription(v []*DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) *DescribeApiHistoryResponseBodyResultDescriptions {
	s.ResultDescription = v
	return s
}

type DescribeApiHistoryResponseBodyResultDescriptionsResultDescription struct {
	// The description.
	//
	// example:
	//
	// for_test1
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether a subnode exists.
	//
	// example:
	//
	// true
	HasChild *bool `json:"HasChild,omitempty" xml:"HasChild,omitempty"`
	// The ID of the result.
	//
	// example:
	//
	// id
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The primary key of the result.
	//
	// example:
	//
	// groupName
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// Specifies whether the parameter is required.
	//
	// example:
	//
	// true
	Mandatory *bool `json:"Mandatory,omitempty" xml:"Mandatory,omitempty"`
	// The name of the result.
	//
	// example:
	//
	// fwqf
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the parent node.
	//
	// example:
	//
	// pid
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The type of the result.
	//
	// example:
	//
	// String
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) SetDescription(v string) *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription {
	s.Description = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) SetHasChild(v bool) *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription {
	s.HasChild = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) SetId(v string) *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription {
	s.Id = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) SetKey(v string) *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription {
	s.Key = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) SetMandatory(v bool) *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription {
	s.Mandatory = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) SetName(v string) *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription {
	s.Name = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) SetPid(v string) *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription {
	s.Pid = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) SetType(v string) *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription {
	s.Type = &v
	return s
}

type DescribeApiHistoryResponseBodyServiceConfig struct {
	// The ContentType header type used when you call the backend service over HTTP.
	//
	// 	- DEFAULT: the default header type in API Gateway
	//
	// 	- CUSTOM: a custom header type
	//
	// 	- CLIENT: the ContentType header type of the client
	//
	// example:
	//
	// CUSTOM
	ContentTypeCatagory *string `json:"ContentTypeCatagory,omitempty" xml:"ContentTypeCatagory,omitempty"`
	// The value of the ContentType header when the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.
	//
	// example:
	//
	// application/json
	ContentTypeValue *string `json:"ContentTypeValue,omitempty" xml:"ContentTypeValue,omitempty"`
	// Configuration items of EventBridge
	EventBridgeConfig *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig `json:"EventBridgeConfig,omitempty" xml:"EventBridgeConfig,omitempty" type:"Struct"`
	// Backend configuration items when the backend service is Function Compute
	FunctionComputeConfig *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig `json:"FunctionComputeConfig,omitempty" xml:"FunctionComputeConfig,omitempty" type:"Struct"`
	// Specifies whether to enable the MOCK mode. Valid values:
	//
	// 	- TRUE: The Mock mode is enabled.
	//
	// 	- FALSE: The Mock mode is not enabled.
	//
	// example:
	//
	// TRUE
	Mock *string `json:"Mock,omitempty" xml:"Mock,omitempty"`
	// The simulated Headers.
	MockHeaders *DescribeApiHistoryResponseBodyServiceConfigMockHeaders `json:"MockHeaders,omitempty" xml:"MockHeaders,omitempty" type:"Struct"`
	// The result returned when the Mock mode is enabled.
	//
	// example:
	//
	// test result
	MockResult *string `json:"MockResult,omitempty" xml:"MockResult,omitempty"`
	// The status code returned for service mocking.
	//
	// example:
	//
	// 200
	MockStatusCode *int32 `json:"MockStatusCode,omitempty" xml:"MockStatusCode,omitempty"`
	// Information when the backend service is OSS
	OssConfig *DescribeApiHistoryResponseBodyServiceConfigOssConfig `json:"OssConfig,omitempty" xml:"OssConfig,omitempty" type:"Struct"`
	// The URL used to call the backend service.
	//
	// example:
	//
	// http://api.a.com:8080
	ServiceAddress *string `json:"ServiceAddress,omitempty" xml:"ServiceAddress,omitempty"`
	// The HTTP request method used when calling the backend service. Valid values: PUT, GET, POST, DELETE, PATCH, HEAD, OPTIONS, and ANY.
	//
	// example:
	//
	// POST
	ServiceHttpMethod *string `json:"ServiceHttpMethod,omitempty" xml:"ServiceHttpMethod,omitempty"`
	// The path used when you call the backend service.
	//
	// example:
	//
	// /object/add
	ServicePath *string `json:"ServicePath,omitempty" xml:"ServicePath,omitempty"`
	// The backend service protocol. Currently, only HTTP, HTTPS, and FunctionCompute are supported.
	//
	// example:
	//
	// HTTP
	ServiceProtocol *string `json:"ServiceProtocol,omitempty" xml:"ServiceProtocol,omitempty"`
	// The timeout period of the backend service, in millisecond.
	//
	// example:
	//
	// 1000
	ServiceTimeout *int32 `json:"ServiceTimeout,omitempty" xml:"ServiceTimeout,omitempty"`
	// Specifies whether to enable the VPC channel. Valid values:
	//
	// 	- TRUE: The VPC channel is enabled.
	//
	// 	- FALSE: The VPC channel is not enabled.
	//
	// You must create the corresponding VPC access authorization before you can enable a VPC channel.
	//
	// example:
	//
	// TRUE
	ServiceVpcEnable *string `json:"ServiceVpcEnable,omitempty" xml:"ServiceVpcEnable,omitempty"`
	// Configuration items related to VPC channels
	VpcConfig *DescribeApiHistoryResponseBodyServiceConfigVpcConfig `json:"VpcConfig,omitempty" xml:"VpcConfig,omitempty" type:"Struct"`
	// The ID of the VPC.
	//
	// example:
	//
	// vpc-uf6kg9x8sx2tbxxxx
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeApiHistoryResponseBodyServiceConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetContentTypeCatagory(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.ContentTypeCatagory = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetContentTypeValue(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.ContentTypeValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetEventBridgeConfig(v *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig) *DescribeApiHistoryResponseBodyServiceConfig {
	s.EventBridgeConfig = v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetFunctionComputeConfig(v *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) *DescribeApiHistoryResponseBodyServiceConfig {
	s.FunctionComputeConfig = v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetMock(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.Mock = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetMockHeaders(v *DescribeApiHistoryResponseBodyServiceConfigMockHeaders) *DescribeApiHistoryResponseBodyServiceConfig {
	s.MockHeaders = v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetMockResult(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.MockResult = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetMockStatusCode(v int32) *DescribeApiHistoryResponseBodyServiceConfig {
	s.MockStatusCode = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetOssConfig(v *DescribeApiHistoryResponseBodyServiceConfigOssConfig) *DescribeApiHistoryResponseBodyServiceConfig {
	s.OssConfig = v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetServiceAddress(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.ServiceAddress = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetServiceHttpMethod(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.ServiceHttpMethod = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetServicePath(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.ServicePath = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetServiceProtocol(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.ServiceProtocol = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetServiceTimeout(v int32) *DescribeApiHistoryResponseBodyServiceConfig {
	s.ServiceTimeout = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetServiceVpcEnable(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.ServiceVpcEnable = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetVpcConfig(v *DescribeApiHistoryResponseBodyServiceConfigVpcConfig) *DescribeApiHistoryResponseBodyServiceConfig {
	s.VpcConfig = v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetVpcId(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.VpcId = &v
	return s
}

type DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig struct {
	// The ID of the region where the EventBridge instance is located.
	//
	// example:
	//
	// cn-beijing
	EventBridgeRegionId *string `json:"EventBridgeRegionId,omitempty" xml:"EventBridgeRegionId,omitempty"`
	// The event bus.
	//
	// example:
	//
	// testBus
	EventBus *string `json:"EventBus,omitempty" xml:"EventBus,omitempty"`
	// The event source of the managed rule.
	//
	// example:
	//
	// baas_driver
	EventSource *string `json:"EventSource,omitempty" xml:"EventSource,omitempty"`
	// The Arn that is authorized by a RAM user to EventBridge.
	//
	// example:
	//
	// acs:ram::1933122015759***:role/adminoidcaliyun
	RoleArn *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig) SetEventBridgeRegionId(v string) *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig {
	s.EventBridgeRegionId = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig) SetEventBus(v string) *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig {
	s.EventBus = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig) SetEventSource(v string) *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig {
	s.EventSource = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig) SetRoleArn(v string) *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig {
	s.RoleArn = &v
	return s
}

type DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig struct {
	// The ContentType header type used when you call the backend service over HTTP.
	//
	// 	- **DEFAULT: the default header type in API Gateway.**
	//
	// 	- **CUSTOM: a custom header type.**
	//
	// 	- **CLIENT: the ContentType header type of the client.
	//
	// example:
	//
	// DEFAULT
	ContentTypeCatagory *string `json:"ContentTypeCatagory,omitempty" xml:"ContentTypeCatagory,omitempty"`
	// The value of the ContentType header when the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.
	//
	// example:
	//
	// application/json
	ContentTypeValue *string `json:"ContentTypeValue,omitempty" xml:"ContentTypeValue,omitempty"`
	// The root path of Function Compute.
	//
	// example:
	//
	// https://122xxxxxxx.fc.aliyun.com/2016xxxx/proxy/testSxxx.xxx/testHttp/
	FcBaseUrl *string `json:"FcBaseUrl,omitempty" xml:"FcBaseUrl,omitempty"`
	// The type of the Function Compute instance.
	//
	// example:
	//
	// HttpTrigger
	FcType *string `json:"FcType,omitempty" xml:"FcType,omitempty"`
	// The function name defined in Function Compute.
	//
	// example:
	//
	// domain_business_control
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	// The request method.
	//
	// example:
	//
	// GET
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The backend only receives the service path.
	//
	// example:
	//
	// false
	OnlyBusinessPath *bool `json:"OnlyBusinessPath,omitempty" xml:"OnlyBusinessPath,omitempty"`
	// The API request path.
	//
	// example:
	//
	// /api/offline/cacheData
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The alias of the function.
	//
	// example:
	//
	// 2
	Qualifier *string `json:"Qualifier,omitempty" xml:"Qualifier,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the RAM role to be assumed by API Gateway to access Function Compute.
	//
	// example:
	//
	// acs:ram::111***:role/aliyunserviceroleforsas
	RoleArn *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	// The service name defined in Function Compute.
	//
	// example:
	//
	// fcservicename
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetContentTypeCatagory(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.ContentTypeCatagory = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetContentTypeValue(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.ContentTypeValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetFcBaseUrl(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.FcBaseUrl = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetFcType(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.FcType = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetFunctionName(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.FunctionName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetMethod(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.Method = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetOnlyBusinessPath(v bool) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.OnlyBusinessPath = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetPath(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.Path = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetQualifier(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.Qualifier = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetRegionId(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.RegionId = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetRoleArn(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.RoleArn = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetServiceName(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.ServiceName = &v
	return s
}

type DescribeApiHistoryResponseBodyServiceConfigMockHeaders struct {
	MockHeader []*DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader `json:"MockHeader,omitempty" xml:"MockHeader,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodyServiceConfigMockHeaders) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceConfigMockHeaders) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceConfigMockHeaders) SetMockHeader(v []*DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader) *DescribeApiHistoryResponseBodyServiceConfigMockHeaders {
	s.MockHeader = v
	return s
}

type DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader struct {
	// The name of the HTTP header parameter.
	//
	// example:
	//
	// Content-Type
	HeaderName *string `json:"HeaderName,omitempty" xml:"HeaderName,omitempty"`
	// The value of the HTTP header parameter.
	//
	// example:
	//
	// 86400
	HeaderValue *string `json:"HeaderValue,omitempty" xml:"HeaderValue,omitempty"`
}

func (s DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader) SetHeaderName(v string) *DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader {
	s.HeaderName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader) SetHeaderValue(v string) *DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader {
	s.HeaderValue = &v
	return s
}

type DescribeApiHistoryResponseBodyServiceConfigOssConfig struct {
	// The operation options on OSS. Valid values:
	//
	// 	- GetObject
	//
	// 	- PostObject
	//
	// 	- DeleteObject
	//
	// 	- PutObject
	//
	// 	- HeadObject
	//
	// 	- GetObjectMeta
	//
	// 	- AppendObject
	//
	// example:
	//
	// GetObject
	Action *string `json:"Action,omitempty" xml:"Action,omitempty"`
	// The OSS bucket.
	//
	// example:
	//
	// phototest02
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	// The stored object or folder path.
	//
	// example:
	//
	// ENV
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The ID of the region where the OSS instance is located.
	//
	// example:
	//
	// cn-hangzhou
	OssRegionId *string `json:"OssRegionId,omitempty" xml:"OssRegionId,omitempty"`
}

func (s DescribeApiHistoryResponseBodyServiceConfigOssConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceConfigOssConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceConfigOssConfig) SetAction(v string) *DescribeApiHistoryResponseBodyServiceConfigOssConfig {
	s.Action = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigOssConfig) SetBucketName(v string) *DescribeApiHistoryResponseBodyServiceConfigOssConfig {
	s.BucketName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigOssConfig) SetKey(v string) *DescribeApiHistoryResponseBodyServiceConfigOssConfig {
	s.Key = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigOssConfig) SetOssRegionId(v string) *DescribeApiHistoryResponseBodyServiceConfigOssConfig {
	s.OssRegionId = &v
	return s
}

type DescribeApiHistoryResponseBodyServiceConfigVpcConfig struct {
	// The IDs of the ELB and SLB instances in the VPC.
	//
	// example:
	//
	// i-bp1h497hkijewv2***
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the VPC.
	//
	// example:
	//
	// glmall-app-test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The port number that corresponds to the instance.
	//
	// example:
	//
	// 8080
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the VPC.
	//
	// example:
	//
	// vpc-2zeafsc3fygk1***
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The VPC protocol.
	//
	// example:
	//
	// HTTP
	VpcScheme *string `json:"VpcScheme,omitempty" xml:"VpcScheme,omitempty"`
}

func (s DescribeApiHistoryResponseBodyServiceConfigVpcConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceConfigVpcConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceConfigVpcConfig) SetInstanceId(v string) *DescribeApiHistoryResponseBodyServiceConfigVpcConfig {
	s.InstanceId = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigVpcConfig) SetName(v string) *DescribeApiHistoryResponseBodyServiceConfigVpcConfig {
	s.Name = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigVpcConfig) SetPort(v int32) *DescribeApiHistoryResponseBodyServiceConfigVpcConfig {
	s.Port = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigVpcConfig) SetVpcId(v string) *DescribeApiHistoryResponseBodyServiceConfigVpcConfig {
	s.VpcId = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigVpcConfig) SetVpcScheme(v string) *DescribeApiHistoryResponseBodyServiceConfigVpcConfig {
	s.VpcScheme = &v
	return s
}

type DescribeApiHistoryResponseBodyServiceParameters struct {
	ServiceParameter []*DescribeApiHistoryResponseBodyServiceParametersServiceParameter `json:"ServiceParameter,omitempty" xml:"ServiceParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodyServiceParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceParameters) SetServiceParameter(v []*DescribeApiHistoryResponseBodyServiceParametersServiceParameter) *DescribeApiHistoryResponseBodyServiceParameters {
	s.ServiceParameter = v
	return s
}

type DescribeApiHistoryResponseBodyServiceParametersServiceParameter struct {
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	//
	// example:
	//
	// HEAD
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The data type of the back-end service parameter.
	//
	// example:
	//
	// String
	ParameterType *string `json:"ParameterType,omitempty" xml:"ParameterType,omitempty"`
	// The name of the backend service parameter.
	//
	// example:
	//
	// clientIp
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiHistoryResponseBodyServiceParametersServiceParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceParametersServiceParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceParametersServiceParameter) SetLocation(v string) *DescribeApiHistoryResponseBodyServiceParametersServiceParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceParametersServiceParameter) SetParameterType(v string) *DescribeApiHistoryResponseBodyServiceParametersServiceParameter {
	s.ParameterType = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceParametersServiceParameter) SetServiceParameterName(v string) *DescribeApiHistoryResponseBodyServiceParametersServiceParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiHistoryResponseBodyServiceParametersMap struct {
	ServiceParameterMap []*DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap `json:"ServiceParameterMap,omitempty" xml:"ServiceParameterMap,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodyServiceParametersMap) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceParametersMap) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceParametersMap) SetServiceParameterMap(v []*DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap) *DescribeApiHistoryResponseBodyServiceParametersMap {
	s.ServiceParameterMap = v
	return s
}

type DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap struct {
	// The corresponding frontend parameter. It must be included in RequestParametersObject and matches ApiParameterName in RequestParameter data.
	//
	// example:
	//
	// sex
	RequestParameterName *string `json:"RequestParameterName,omitempty" xml:"RequestParameterName,omitempty"`
	// The name of the backend service parameter.
	//
	// example:
	//
	// sex
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap) SetRequestParameterName(v string) *DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap {
	s.RequestParameterName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap) SetServiceParameterName(v string) *DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiHistoryResponseBodySystemParameters struct {
	SystemParameter []*DescribeApiHistoryResponseBodySystemParametersSystemParameter `json:"SystemParameter,omitempty" xml:"SystemParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodySystemParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodySystemParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodySystemParameters) SetSystemParameter(v []*DescribeApiHistoryResponseBodySystemParametersSystemParameter) *DescribeApiHistoryResponseBodySystemParameters {
	s.SystemParameter = v
	return s
}

type DescribeApiHistoryResponseBodySystemParametersSystemParameter struct {
	// The sample value of the parameter.
	//
	// example:
	//
	// 192.168.1.1
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The description.
	//
	// example:
	//
	// system parameters description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	//
	// example:
	//
	// HEAD
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the system parameter. Valid values: CaClientIp, CaDomain, CaRequestHandleTime, CaAppId, CaRequestId, CaHttpSchema, and CaProxy.
	//
	// example:
	//
	// CaClientIp
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The name of the corresponding backend parameter.
	//
	// example:
	//
	// clientIp
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiHistoryResponseBodySystemParametersSystemParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodySystemParametersSystemParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodySystemParametersSystemParameter) SetDemoValue(v string) *DescribeApiHistoryResponseBodySystemParametersSystemParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodySystemParametersSystemParameter) SetDescription(v string) *DescribeApiHistoryResponseBodySystemParametersSystemParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiHistoryResponseBodySystemParametersSystemParameter) SetLocation(v string) *DescribeApiHistoryResponseBodySystemParametersSystemParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiHistoryResponseBodySystemParametersSystemParameter) SetParameterName(v string) *DescribeApiHistoryResponseBodySystemParametersSystemParameter {
	s.ParameterName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodySystemParametersSystemParameter) SetServiceParameterName(v string) *DescribeApiHistoryResponseBodySystemParametersSystemParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiHistoryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponse) SetHeaders(v map[string]*string) *DescribeApiHistoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiHistoryResponse) SetStatusCode(v int32) *DescribeApiHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiHistoryResponse) SetBody(v *DescribeApiHistoryResponseBody) *DescribeApiHistoryResponse {
	s.Body = v
	return s
}

type DescribeApiIpControlsRequest struct {
	// The IDs of APIs. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	//
	// example:
	//
	// 123,234
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiIpControlsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiIpControlsRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiIpControlsRequest) SetApiIds(v string) *DescribeApiIpControlsRequest {
	s.ApiIds = &v
	return s
}

func (s *DescribeApiIpControlsRequest) SetGroupId(v string) *DescribeApiIpControlsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiIpControlsRequest) SetPageNumber(v int32) *DescribeApiIpControlsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiIpControlsRequest) SetPageSize(v int32) *DescribeApiIpControlsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApiIpControlsRequest) SetSecurityToken(v string) *DescribeApiIpControlsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiIpControlsRequest) SetStageName(v string) *DescribeApiIpControlsRequest {
	s.StageName = &v
	return s
}

type DescribeApiIpControlsResponseBody struct {
	// The information about the ACLs. The information is an array of ApiIpControlItem data.
	ApiIpControls *DescribeApiIpControlsResponseBodyApiIpControls `json:"ApiIpControls,omitempty" xml:"ApiIpControls,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApiIpControlsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiIpControlsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiIpControlsResponseBody) SetApiIpControls(v *DescribeApiIpControlsResponseBodyApiIpControls) *DescribeApiIpControlsResponseBody {
	s.ApiIpControls = v
	return s
}

func (s *DescribeApiIpControlsResponseBody) SetPageNumber(v int32) *DescribeApiIpControlsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiIpControlsResponseBody) SetPageSize(v int32) *DescribeApiIpControlsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApiIpControlsResponseBody) SetRequestId(v string) *DescribeApiIpControlsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiIpControlsResponseBody) SetTotalCount(v int32) *DescribeApiIpControlsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApiIpControlsResponseBodyApiIpControls struct {
	ApiIpControlItem []*DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem `json:"ApiIpControlItem,omitempty" xml:"ApiIpControlItem,omitempty" type:"Repeated"`
}

func (s DescribeApiIpControlsResponseBodyApiIpControls) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiIpControlsResponseBodyApiIpControls) GoString() string {
	return s.String()
}

func (s *DescribeApiIpControlsResponseBodyApiIpControls) SetApiIpControlItem(v []*DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem) *DescribeApiIpControlsResponseBodyApiIpControls {
	s.ApiIpControlItem = v
	return s
}

type DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem struct {
	// The ID of the API.
	//
	// example:
	//
	// 46fbb52840d146f186e38e8e70fc8c90
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API.
	//
	// example:
	//
	// testapi
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The time of binding.
	//
	// example:
	//
	// 2016-07-23T08:28:48Z
	BoundTime *string `json:"BoundTime,omitempty" xml:"BoundTime,omitempty"`
	// The ID of the ACL.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// The name of the ACL.
	//
	// example:
	//
	// testControlName
	IpControlName *string `json:"IpControlName,omitempty" xml:"IpControlName,omitempty"`
}

func (s DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem) GoString() string {
	return s.String()
}

func (s *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem) SetApiId(v string) *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem {
	s.ApiId = &v
	return s
}

func (s *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem) SetApiName(v string) *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem {
	s.ApiName = &v
	return s
}

func (s *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem) SetBoundTime(v string) *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem {
	s.BoundTime = &v
	return s
}

func (s *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem) SetIpControlId(v string) *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem {
	s.IpControlId = &v
	return s
}

func (s *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem) SetIpControlName(v string) *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem {
	s.IpControlName = &v
	return s
}

type DescribeApiIpControlsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiIpControlsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiIpControlsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiIpControlsResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiIpControlsResponse) SetHeaders(v map[string]*string) *DescribeApiIpControlsResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiIpControlsResponse) SetStatusCode(v int32) *DescribeApiIpControlsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiIpControlsResponse) SetBody(v *DescribeApiIpControlsResponseBody) *DescribeApiIpControlsResponse {
	s.Body = v
	return s
}

type DescribeApiLatencyDataRequest struct {
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// d6f679aeb3be4b91b3688e887ca1fe16
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The end time in UTC. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2016-07-23T09:28:48Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 63be9002440b4778a61122f14c2b2bbb
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **PRE**: the pre-release environment
	//
	// 	- **TEST**
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The start time in UTC. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2016-07-23T08:28:48Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeApiLatencyDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiLatencyDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiLatencyDataRequest) SetApiId(v string) *DescribeApiLatencyDataRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiLatencyDataRequest) SetEndTime(v string) *DescribeApiLatencyDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeApiLatencyDataRequest) SetGroupId(v string) *DescribeApiLatencyDataRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiLatencyDataRequest) SetSecurityToken(v string) *DescribeApiLatencyDataRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiLatencyDataRequest) SetStageName(v string) *DescribeApiLatencyDataRequest {
	s.StageName = &v
	return s
}

func (s *DescribeApiLatencyDataRequest) SetStartTime(v string) *DescribeApiLatencyDataRequest {
	s.StartTime = &v
	return s
}

type DescribeApiLatencyDataResponseBody struct {
	// The returned information about API call latency. It is an array consisting of MonitorItem data.
	CallLatencys *DescribeApiLatencyDataResponseBodyCallLatencys `json:"CallLatencys,omitempty" xml:"CallLatencys,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ001
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeApiLatencyDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiLatencyDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiLatencyDataResponseBody) SetCallLatencys(v *DescribeApiLatencyDataResponseBodyCallLatencys) *DescribeApiLatencyDataResponseBody {
	s.CallLatencys = v
	return s
}

func (s *DescribeApiLatencyDataResponseBody) SetRequestId(v string) *DescribeApiLatencyDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeApiLatencyDataResponseBodyCallLatencys struct {
	MonitorItem []*DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeApiLatencyDataResponseBodyCallLatencys) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiLatencyDataResponseBodyCallLatencys) GoString() string {
	return s.String()
}

func (s *DescribeApiLatencyDataResponseBodyCallLatencys) SetMonitorItem(v []*DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem) *DescribeApiLatencyDataResponseBodyCallLatencys {
	s.MonitorItem = v
	return s
}

type DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem struct {
	// The time of the monitoring metric. The time format follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// example:
	//
	// 2016-07-28T08:20:00Z
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The value corresponding to the monitoring metric.
	//
	// example:
	//
	// 15
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem) SetItemTime(v string) *DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem) SetItemValue(v string) *DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeApiLatencyDataResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiLatencyDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiLatencyDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiLatencyDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiLatencyDataResponse) SetHeaders(v map[string]*string) *DescribeApiLatencyDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiLatencyDataResponse) SetStatusCode(v int32) *DescribeApiLatencyDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiLatencyDataResponse) SetBody(v *DescribeApiLatencyDataResponseBody) *DescribeApiLatencyDataResponse {
	s.Body = v
	return s
}

type DescribeApiMarketAttributesRequest struct {
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1f9b5e9ba80943099cac52e040b7e160
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// b693252f3f19445e9a01dac177c4454c
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeApiMarketAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiMarketAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiMarketAttributesRequest) SetApiId(v string) *DescribeApiMarketAttributesRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiMarketAttributesRequest) SetGroupId(v string) *DescribeApiMarketAttributesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiMarketAttributesRequest) SetSecurityToken(v string) *DescribeApiMarketAttributesRequest {
	s.SecurityToken = &v
	return s
}

type DescribeApiMarketAttributesResponseBody struct {
	// The ID of the API.
	//
	// example:
	//
	// 6318cd8f6a304cac9318dea8d9a78f7a
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The billing method used by the Alibaba Cloud Marketplace.
	//
	// example:
	//
	// PREPAID_BY_USAGE
	MarketChargingMode *string `json:"MarketChargingMode,omitempty" xml:"MarketChargingMode,omitempty"`
	// Indicates whether fees are charged.
	//
	// example:
	//
	// true
	NeedCharging *string `json:"NeedCharging,omitempty" xml:"NeedCharging,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 545D4E52-4F77-5EC4-BB7E-7344CEC7B5E6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeApiMarketAttributesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiMarketAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiMarketAttributesResponseBody) SetApiId(v string) *DescribeApiMarketAttributesResponseBody {
	s.ApiId = &v
	return s
}

func (s *DescribeApiMarketAttributesResponseBody) SetMarketChargingMode(v string) *DescribeApiMarketAttributesResponseBody {
	s.MarketChargingMode = &v
	return s
}

func (s *DescribeApiMarketAttributesResponseBody) SetNeedCharging(v string) *DescribeApiMarketAttributesResponseBody {
	s.NeedCharging = &v
	return s
}

func (s *DescribeApiMarketAttributesResponseBody) SetRequestId(v string) *DescribeApiMarketAttributesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeApiMarketAttributesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiMarketAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiMarketAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiMarketAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiMarketAttributesResponse) SetHeaders(v map[string]*string) *DescribeApiMarketAttributesResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiMarketAttributesResponse) SetStatusCode(v int32) *DescribeApiMarketAttributesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiMarketAttributesResponse) SetBody(v *DescribeApiMarketAttributesResponseBody) *DescribeApiMarketAttributesResponse {
	s.Body = v
	return s
}

type DescribeApiProductApisRequest struct {
	// The ID of the API product.
	//
	// This parameter is required.
	//
	// example:
	//
	// 117b7a64a8b3f064eaa4a47ac62aac5e
	ApiProductId *string `json:"ApiProductId,omitempty" xml:"ApiProductId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeApiProductApisRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiProductApisRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiProductApisRequest) SetApiProductId(v string) *DescribeApiProductApisRequest {
	s.ApiProductId = &v
	return s
}

func (s *DescribeApiProductApisRequest) SetPageNumber(v int32) *DescribeApiProductApisRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiProductApisRequest) SetPageSize(v int32) *DescribeApiProductApisRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApiProductApisRequest) SetSecurityToken(v string) *DescribeApiProductApisRequest {
	s.SecurityToken = &v
	return s
}

type DescribeApiProductApisResponseBody struct {
	// The information about the returned APIs.
	ApiInfoList *DescribeApiProductApisResponseBodyApiInfoList `json:"ApiInfoList,omitempty" xml:"ApiInfoList,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 03442A3D-3B7D-434C-8A95-A5FEB989B519
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 4
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApiProductApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiProductApisResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiProductApisResponseBody) SetApiInfoList(v *DescribeApiProductApisResponseBodyApiInfoList) *DescribeApiProductApisResponseBody {
	s.ApiInfoList = v
	return s
}

func (s *DescribeApiProductApisResponseBody) SetPageNumber(v int32) *DescribeApiProductApisResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiProductApisResponseBody) SetPageSize(v int32) *DescribeApiProductApisResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApiProductApisResponseBody) SetRequestId(v string) *DescribeApiProductApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiProductApisResponseBody) SetTotalCount(v int32) *DescribeApiProductApisResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApiProductApisResponseBodyApiInfoList struct {
	ApiInfo []*DescribeApiProductApisResponseBodyApiInfoListApiInfo `json:"ApiInfo,omitempty" xml:"ApiInfo,omitempty" type:"Repeated"`
}

func (s DescribeApiProductApisResponseBodyApiInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiProductApisResponseBodyApiInfoList) GoString() string {
	return s.String()
}

func (s *DescribeApiProductApisResponseBodyApiInfoList) SetApiInfo(v []*DescribeApiProductApisResponseBodyApiInfoListApiInfo) *DescribeApiProductApisResponseBodyApiInfoList {
	s.ApiInfo = v
	return s
}

type DescribeApiProductApisResponseBodyApiInfoListApiInfo struct {
	// The API ID.
	//
	// example:
	//
	// dd46297680014a7e8e318308f3345951
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The API name.
	//
	// example:
	//
	// testApi
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The API description.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 1e377f18142345dfb700cd8911c2463a
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group to which the API belongs.
	//
	// example:
	//
	// testApiGroup
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The request method of the API.
	//
	// example:
	//
	// POST
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The request path of the API.
	//
	// example:
	//
	// /test
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The ID of the region where the API is deployed.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The environment to which the API is published. Valid values:
	//
	// 	- **RELEASE**: the production environment
	//
	// 	- **PRE**: the staging environment
	//
	// 	- **TEST**: the test environment
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiProductApisResponseBodyApiInfoListApiInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiProductApisResponseBodyApiInfoListApiInfo) GoString() string {
	return s.String()
}

func (s *DescribeApiProductApisResponseBodyApiInfoListApiInfo) SetApiId(v string) *DescribeApiProductApisResponseBodyApiInfoListApiInfo {
	s.ApiId = &v
	return s
}

func (s *DescribeApiProductApisResponseBodyApiInfoListApiInfo) SetApiName(v string) *DescribeApiProductApisResponseBodyApiInfoListApiInfo {
	s.ApiName = &v
	return s
}

func (s *DescribeApiProductApisResponseBodyApiInfoListApiInfo) SetDescription(v string) *DescribeApiProductApisResponseBodyApiInfoListApiInfo {
	s.Description = &v
	return s
}

func (s *DescribeApiProductApisResponseBodyApiInfoListApiInfo) SetGroupId(v string) *DescribeApiProductApisResponseBodyApiInfoListApiInfo {
	s.GroupId = &v
	return s
}

func (s *DescribeApiProductApisResponseBodyApiInfoListApiInfo) SetGroupName(v string) *DescribeApiProductApisResponseBodyApiInfoListApiInfo {
	s.GroupName = &v
	return s
}

func (s *DescribeApiProductApisResponseBodyApiInfoListApiInfo) SetMethod(v string) *DescribeApiProductApisResponseBodyApiInfoListApiInfo {
	s.Method = &v
	return s
}

func (s *DescribeApiProductApisResponseBodyApiInfoListApiInfo) SetPath(v string) *DescribeApiProductApisResponseBodyApiInfoListApiInfo {
	s.Path = &v
	return s
}

func (s *DescribeApiProductApisResponseBodyApiInfoListApiInfo) SetRegionId(v string) *DescribeApiProductApisResponseBodyApiInfoListApiInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeApiProductApisResponseBodyApiInfoListApiInfo) SetStageName(v string) *DescribeApiProductApisResponseBodyApiInfoListApiInfo {
	s.StageName = &v
	return s
}

type DescribeApiProductApisResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiProductApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiProductApisResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiProductApisResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiProductApisResponse) SetHeaders(v map[string]*string) *DescribeApiProductApisResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiProductApisResponse) SetStatusCode(v int32) *DescribeApiProductApisResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiProductApisResponse) SetBody(v *DescribeApiProductApisResponseBody) *DescribeApiProductApisResponse {
	s.Body = v
	return s
}

type DescribeApiProductsByAppRequest struct {
	// The application ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 110962435
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeApiProductsByAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiProductsByAppRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiProductsByAppRequest) SetAppId(v int64) *DescribeApiProductsByAppRequest {
	s.AppId = &v
	return s
}

func (s *DescribeApiProductsByAppRequest) SetPageNumber(v int32) *DescribeApiProductsByAppRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiProductsByAppRequest) SetPageSize(v int32) *DescribeApiProductsByAppRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApiProductsByAppRequest) SetSecurityToken(v string) *DescribeApiProductsByAppRequest {
	s.SecurityToken = &v
	return s
}

type DescribeApiProductsByAppResponseBody struct {
	// The information about API products.
	ApiProductInfoList *DescribeApiProductsByAppResponseBodyApiProductInfoList `json:"ApiProductInfoList,omitempty" xml:"ApiProductInfoList,omitempty" type:"Struct"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 0B805201-AF4C-5788-AC9E-C3EEC83DC82A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 4
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApiProductsByAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiProductsByAppResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiProductsByAppResponseBody) SetApiProductInfoList(v *DescribeApiProductsByAppResponseBodyApiProductInfoList) *DescribeApiProductsByAppResponseBody {
	s.ApiProductInfoList = v
	return s
}

func (s *DescribeApiProductsByAppResponseBody) SetPageNumber(v int32) *DescribeApiProductsByAppResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiProductsByAppResponseBody) SetPageSize(v int32) *DescribeApiProductsByAppResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApiProductsByAppResponseBody) SetRequestId(v string) *DescribeApiProductsByAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiProductsByAppResponseBody) SetTotalCount(v int32) *DescribeApiProductsByAppResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApiProductsByAppResponseBodyApiProductInfoList struct {
	ApiProductInfo []*DescribeApiProductsByAppResponseBodyApiProductInfoListApiProductInfo `json:"ApiProductInfo,omitempty" xml:"ApiProductInfo,omitempty" type:"Repeated"`
}

func (s DescribeApiProductsByAppResponseBodyApiProductInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiProductsByAppResponseBodyApiProductInfoList) GoString() string {
	return s.String()
}

func (s *DescribeApiProductsByAppResponseBodyApiProductInfoList) SetApiProductInfo(v []*DescribeApiProductsByAppResponseBodyApiProductInfoListApiProductInfo) *DescribeApiProductsByAppResponseBodyApiProductInfoList {
	s.ApiProductInfo = v
	return s
}

type DescribeApiProductsByAppResponseBodyApiProductInfoListApiProductInfo struct {
	// The ID of the API product.
	//
	// example:
	//
	// 117b7a64a8b3f064eaa4a47ac62aac5e
	ApiProductId *string `json:"ApiProductId,omitempty" xml:"ApiProductId,omitempty"`
}

func (s DescribeApiProductsByAppResponseBodyApiProductInfoListApiProductInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiProductsByAppResponseBodyApiProductInfoListApiProductInfo) GoString() string {
	return s.String()
}

func (s *DescribeApiProductsByAppResponseBodyApiProductInfoListApiProductInfo) SetApiProductId(v string) *DescribeApiProductsByAppResponseBodyApiProductInfoListApiProductInfo {
	s.ApiProductId = &v
	return s
}

type DescribeApiProductsByAppResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiProductsByAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiProductsByAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiProductsByAppResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiProductsByAppResponse) SetHeaders(v map[string]*string) *DescribeApiProductsByAppResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiProductsByAppResponse) SetStatusCode(v int32) *DescribeApiProductsByAppResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiProductsByAppResponse) SetBody(v *DescribeApiProductsByAppResponseBody) *DescribeApiProductsByAppResponse {
	s.Body = v
	return s
}

type DescribeApiQpsDataRequest struct {
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// d6f679aeb3be4b91b3688e887ca1fe16
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The end time in UTC. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2016-07-23T09:28:48Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 63be9002440b4778a61122f14c2b2bbb
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **PRE**: the pre-release environment
	//
	// 	- **TEST**
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The start time in UTC. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2016-07-23T08:28:48Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeApiQpsDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiQpsDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiQpsDataRequest) SetApiId(v string) *DescribeApiQpsDataRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiQpsDataRequest) SetEndTime(v string) *DescribeApiQpsDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeApiQpsDataRequest) SetGroupId(v string) *DescribeApiQpsDataRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiQpsDataRequest) SetSecurityToken(v string) *DescribeApiQpsDataRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiQpsDataRequest) SetStageName(v string) *DescribeApiQpsDataRequest {
	s.StageName = &v
	return s
}

func (s *DescribeApiQpsDataRequest) SetStartTime(v string) *DescribeApiQpsDataRequest {
	s.StartTime = &v
	return s
}

type DescribeApiQpsDataResponseBody struct {
	// The returned information about failed API calls. It is an array consisting of MonitorItem data.
	CallFails *DescribeApiQpsDataResponseBodyCallFails `json:"CallFails,omitempty" xml:"CallFails,omitempty" type:"Struct"`
	// The returned information about successful API calls. It is an array consisting of MonitorItem data.
	CallSuccesses *DescribeApiQpsDataResponseBodyCallSuccesses `json:"CallSuccesses,omitempty" xml:"CallSuccesses,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ001
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeApiQpsDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiQpsDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiQpsDataResponseBody) SetCallFails(v *DescribeApiQpsDataResponseBodyCallFails) *DescribeApiQpsDataResponseBody {
	s.CallFails = v
	return s
}

func (s *DescribeApiQpsDataResponseBody) SetCallSuccesses(v *DescribeApiQpsDataResponseBodyCallSuccesses) *DescribeApiQpsDataResponseBody {
	s.CallSuccesses = v
	return s
}

func (s *DescribeApiQpsDataResponseBody) SetRequestId(v string) *DescribeApiQpsDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeApiQpsDataResponseBodyCallFails struct {
	MonitorItem []*DescribeApiQpsDataResponseBodyCallFailsMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeApiQpsDataResponseBodyCallFails) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiQpsDataResponseBodyCallFails) GoString() string {
	return s.String()
}

func (s *DescribeApiQpsDataResponseBodyCallFails) SetMonitorItem(v []*DescribeApiQpsDataResponseBodyCallFailsMonitorItem) *DescribeApiQpsDataResponseBodyCallFails {
	s.MonitorItem = v
	return s
}

type DescribeApiQpsDataResponseBodyCallFailsMonitorItem struct {
	// The time of the monitoring metric. The time format follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// example:
	//
	// 2016-07-28T08:20:00Z
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The value corresponding to the monitoring metric.
	//
	// example:
	//
	// 0
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeApiQpsDataResponseBodyCallFailsMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiQpsDataResponseBodyCallFailsMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeApiQpsDataResponseBodyCallFailsMonitorItem) SetItemTime(v string) *DescribeApiQpsDataResponseBodyCallFailsMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeApiQpsDataResponseBodyCallFailsMonitorItem) SetItemValue(v string) *DescribeApiQpsDataResponseBodyCallFailsMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeApiQpsDataResponseBodyCallSuccesses struct {
	MonitorItem []*DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeApiQpsDataResponseBodyCallSuccesses) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiQpsDataResponseBodyCallSuccesses) GoString() string {
	return s.String()
}

func (s *DescribeApiQpsDataResponseBodyCallSuccesses) SetMonitorItem(v []*DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem) *DescribeApiQpsDataResponseBodyCallSuccesses {
	s.MonitorItem = v
	return s
}

type DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem struct {
	// The time of the monitoring metric. The time format follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// example:
	//
	// 2016-07-28T08:24:00Z
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The value corresponding to the monitoring metric.
	//
	// example:
	//
	// 650
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem) SetItemTime(v string) *DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem) SetItemValue(v string) *DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeApiQpsDataResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiQpsDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiQpsDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiQpsDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiQpsDataResponse) SetHeaders(v map[string]*string) *DescribeApiQpsDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiQpsDataResponse) SetStatusCode(v int32) *DescribeApiQpsDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiQpsDataResponse) SetBody(v *DescribeApiQpsDataResponseBody) *DescribeApiQpsDataResponse {
	s.Body = v
	return s
}

type DescribeApiSignaturesRequest struct {
	// The IDs of the APIs that you want to query. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	//
	// example:
	//
	// 123
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiSignaturesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiSignaturesRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiSignaturesRequest) SetApiIds(v string) *DescribeApiSignaturesRequest {
	s.ApiIds = &v
	return s
}

func (s *DescribeApiSignaturesRequest) SetGroupId(v string) *DescribeApiSignaturesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiSignaturesRequest) SetPageNumber(v int32) *DescribeApiSignaturesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiSignaturesRequest) SetPageSize(v int32) *DescribeApiSignaturesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApiSignaturesRequest) SetSecurityToken(v string) *DescribeApiSignaturesRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiSignaturesRequest) SetStageName(v string) *DescribeApiSignaturesRequest {
	s.StageName = &v
	return s
}

type DescribeApiSignaturesResponseBody struct {
	// The returned signature key information. It is an array consisting of ApiSignatureItem data.
	ApiSignatures *DescribeApiSignaturesResponseBodyApiSignatures `json:"ApiSignatures,omitempty" xml:"ApiSignatures,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 20
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApiSignaturesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiSignaturesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiSignaturesResponseBody) SetApiSignatures(v *DescribeApiSignaturesResponseBodyApiSignatures) *DescribeApiSignaturesResponseBody {
	s.ApiSignatures = v
	return s
}

func (s *DescribeApiSignaturesResponseBody) SetPageNumber(v int32) *DescribeApiSignaturesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiSignaturesResponseBody) SetPageSize(v int32) *DescribeApiSignaturesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApiSignaturesResponseBody) SetRequestId(v string) *DescribeApiSignaturesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiSignaturesResponseBody) SetTotalCount(v int32) *DescribeApiSignaturesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApiSignaturesResponseBodyApiSignatures struct {
	ApiSignatureItem []*DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem `json:"ApiSignatureItem,omitempty" xml:"ApiSignatureItem,omitempty" type:"Repeated"`
}

func (s DescribeApiSignaturesResponseBodyApiSignatures) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiSignaturesResponseBodyApiSignatures) GoString() string {
	return s.String()
}

func (s *DescribeApiSignaturesResponseBodyApiSignatures) SetApiSignatureItem(v []*DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem) *DescribeApiSignaturesResponseBodyApiSignatures {
	s.ApiSignatureItem = v
	return s
}

type DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem struct {
	// The ID of the API.
	//
	// example:
	//
	// 46fbb52840d146f186e38e8e70fc8c90
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API.
	//
	// example:
	//
	// testapi
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The time when the backend signature key was bound.
	//
	// example:
	//
	// 2016-07-23T08:28:48Z
	BoundTime *string `json:"BoundTime,omitempty" xml:"BoundTime,omitempty"`
	// The ID of the backend signature key.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// The name of the backend signature key.
	//
	// example:
	//
	// backendsignature
	SignatureName *string `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
}

func (s DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem) GoString() string {
	return s.String()
}

func (s *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem) SetApiId(v string) *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem {
	s.ApiId = &v
	return s
}

func (s *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem) SetApiName(v string) *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem {
	s.ApiName = &v
	return s
}

func (s *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem) SetBoundTime(v string) *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem {
	s.BoundTime = &v
	return s
}

func (s *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem) SetSignatureId(v string) *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem {
	s.SignatureId = &v
	return s
}

func (s *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem) SetSignatureName(v string) *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem {
	s.SignatureName = &v
	return s
}

type DescribeApiSignaturesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiSignaturesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiSignaturesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiSignaturesResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiSignaturesResponse) SetHeaders(v map[string]*string) *DescribeApiSignaturesResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiSignaturesResponse) SetStatusCode(v int32) *DescribeApiSignaturesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiSignaturesResponse) SetBody(v *DescribeApiSignaturesResponseBody) *DescribeApiSignaturesResponse {
	s.Body = v
	return s
}

type DescribeApiTrafficControlsRequest struct {
	// The IDs of APIs that you want to query. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	//
	// example:
	//
	// 123,234
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The ID of the API group that you want to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 20
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The runtime environment of the API. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**: the test environment
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiTrafficControlsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficControlsRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficControlsRequest) SetApiIds(v string) *DescribeApiTrafficControlsRequest {
	s.ApiIds = &v
	return s
}

func (s *DescribeApiTrafficControlsRequest) SetGroupId(v string) *DescribeApiTrafficControlsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiTrafficControlsRequest) SetPageNumber(v int32) *DescribeApiTrafficControlsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiTrafficControlsRequest) SetPageSize(v int32) *DescribeApiTrafficControlsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApiTrafficControlsRequest) SetSecurityToken(v string) *DescribeApiTrafficControlsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiTrafficControlsRequest) SetStageName(v string) *DescribeApiTrafficControlsRequest {
	s.StageName = &v
	return s
}

type DescribeApiTrafficControlsResponseBody struct {
	// The returned throttling policy information. It is an array consisting of ApiTrafficControlItem data.
	ApiTrafficControls *DescribeApiTrafficControlsResponseBodyApiTrafficControls `json:"ApiTrafficControls,omitempty" xml:"ApiTrafficControls,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 20
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApiTrafficControlsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficControlsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficControlsResponseBody) SetApiTrafficControls(v *DescribeApiTrafficControlsResponseBodyApiTrafficControls) *DescribeApiTrafficControlsResponseBody {
	s.ApiTrafficControls = v
	return s
}

func (s *DescribeApiTrafficControlsResponseBody) SetPageNumber(v int32) *DescribeApiTrafficControlsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiTrafficControlsResponseBody) SetPageSize(v int32) *DescribeApiTrafficControlsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApiTrafficControlsResponseBody) SetRequestId(v string) *DescribeApiTrafficControlsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiTrafficControlsResponseBody) SetTotalCount(v int32) *DescribeApiTrafficControlsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApiTrafficControlsResponseBodyApiTrafficControls struct {
	ApiTrafficControlItem []*DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem `json:"ApiTrafficControlItem,omitempty" xml:"ApiTrafficControlItem,omitempty" type:"Repeated"`
}

func (s DescribeApiTrafficControlsResponseBodyApiTrafficControls) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficControlsResponseBodyApiTrafficControls) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficControlsResponseBodyApiTrafficControls) SetApiTrafficControlItem(v []*DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem) *DescribeApiTrafficControlsResponseBodyApiTrafficControls {
	s.ApiTrafficControlItem = v
	return s
}

type DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem struct {
	// The ID of the API.
	//
	// example:
	//
	// 46fbb52840d146f186e38e8e70fc8c90
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// API operation
	//
	// example:
	//
	// testapi
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The binding time of the throttling policy.
	//
	// example:
	//
	// 2016-07-23T08:28:48Z
	BoundTime *string `json:"BoundTime,omitempty" xml:"BoundTime,omitempty"`
	// The ID of the throttling policy.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
	// The name of the throttling policy.
	//
	// example:
	//
	// backendsignature
	TrafficControlName *string `json:"TrafficControlName,omitempty" xml:"TrafficControlName,omitempty"`
}

func (s DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem) SetApiId(v string) *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem {
	s.ApiId = &v
	return s
}

func (s *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem) SetApiName(v string) *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem {
	s.ApiName = &v
	return s
}

func (s *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem) SetBoundTime(v string) *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem {
	s.BoundTime = &v
	return s
}

func (s *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem) SetTrafficControlId(v string) *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem {
	s.TrafficControlId = &v
	return s
}

func (s *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem) SetTrafficControlName(v string) *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem {
	s.TrafficControlName = &v
	return s
}

type DescribeApiTrafficControlsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiTrafficControlsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiTrafficControlsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficControlsResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficControlsResponse) SetHeaders(v map[string]*string) *DescribeApiTrafficControlsResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiTrafficControlsResponse) SetStatusCode(v int32) *DescribeApiTrafficControlsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiTrafficControlsResponse) SetBody(v *DescribeApiTrafficControlsResponseBody) *DescribeApiTrafficControlsResponse {
	s.Body = v
	return s
}

type DescribeApiTrafficDataRequest struct {
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// d6f679aeb3be4b91b3688e887ca1fe16
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The end time in UTC. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2016-07-23T09:28:48Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 63be9002440b4778a61122f14c2b2bbb
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**: the test environment
	//
	// 	- PRE: the pre-release environment
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The start time in UTC. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2016-07-23T08:28:48Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeApiTrafficDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficDataRequest) SetApiId(v string) *DescribeApiTrafficDataRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiTrafficDataRequest) SetEndTime(v string) *DescribeApiTrafficDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeApiTrafficDataRequest) SetGroupId(v string) *DescribeApiTrafficDataRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiTrafficDataRequest) SetSecurityToken(v string) *DescribeApiTrafficDataRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiTrafficDataRequest) SetStageName(v string) *DescribeApiTrafficDataRequest {
	s.StageName = &v
	return s
}

func (s *DescribeApiTrafficDataRequest) SetStartTime(v string) *DescribeApiTrafficDataRequest {
	s.StartTime = &v
	return s
}

type DescribeApiTrafficDataResponseBody struct {
	// The returned downlink traffic data of API calls. It is an array consisting of MonitorItem data.
	CallDownloads *DescribeApiTrafficDataResponseBodyCallDownloads `json:"CallDownloads,omitempty" xml:"CallDownloads,omitempty" type:"Struct"`
	// The returned uplink traffic data of API calls. It is an array consisting of MonitorItem data.
	CallUploads *DescribeApiTrafficDataResponseBodyCallUploads `json:"CallUploads,omitempty" xml:"CallUploads,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ001
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeApiTrafficDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficDataResponseBody) SetCallDownloads(v *DescribeApiTrafficDataResponseBodyCallDownloads) *DescribeApiTrafficDataResponseBody {
	s.CallDownloads = v
	return s
}

func (s *DescribeApiTrafficDataResponseBody) SetCallUploads(v *DescribeApiTrafficDataResponseBodyCallUploads) *DescribeApiTrafficDataResponseBody {
	s.CallUploads = v
	return s
}

func (s *DescribeApiTrafficDataResponseBody) SetRequestId(v string) *DescribeApiTrafficDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeApiTrafficDataResponseBodyCallDownloads struct {
	MonitorItem []*DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeApiTrafficDataResponseBodyCallDownloads) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficDataResponseBodyCallDownloads) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficDataResponseBodyCallDownloads) SetMonitorItem(v []*DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem) *DescribeApiTrafficDataResponseBodyCallDownloads {
	s.MonitorItem = v
	return s
}

type DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem struct {
	// The time of the monitoring metric. The time format follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// example:
	//
	// 2016-07-28T08:20:00Z
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The value corresponding to the monitoring metric.
	//
	// example:
	//
	// 0
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem) SetItemTime(v string) *DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem) SetItemValue(v string) *DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeApiTrafficDataResponseBodyCallUploads struct {
	MonitorItem []*DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeApiTrafficDataResponseBodyCallUploads) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficDataResponseBodyCallUploads) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficDataResponseBodyCallUploads) SetMonitorItem(v []*DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem) *DescribeApiTrafficDataResponseBodyCallUploads {
	s.MonitorItem = v
	return s
}

type DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem struct {
	// The time of the monitoring metric. The time format follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// example:
	//
	// 2016-07-28T08:20:00Z
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The value corresponding to the monitoring metric.
	//
	// example:
	//
	// 670
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem) SetItemTime(v string) *DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem) SetItemValue(v string) *DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeApiTrafficDataResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApiTrafficDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApiTrafficDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficDataResponse) SetHeaders(v map[string]*string) *DescribeApiTrafficDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiTrafficDataResponse) SetStatusCode(v int32) *DescribeApiTrafficDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiTrafficDataResponse) SetBody(v *DescribeApiTrafficDataResponseBody) *DescribeApiTrafficDataResponse {
	s.Body = v
	return s
}

type DescribeApisRequest struct {
	// The API ID.
	//
	// example:
	//
	// f68c19ee3bd1478fb58aa05ce8ae9b5a
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The HTTP method of the API request.
	//
	// example:
	//
	// GET
	ApiMethod *string `json:"ApiMethod,omitempty" xml:"ApiMethod,omitempty"`
	// The API name. The name is used for fuzzy match.
	//
	// example:
	//
	// weather
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The request path of the API.
	//
	// example:
	//
	// /illegal/query
	ApiPath *string `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	// The category ID.
	//
	// example:
	//
	// 1553414085247362
	CatalogId *string `json:"CatalogId,omitempty" xml:"CatalogId,omitempty"`
	// Specifies whether to enable tag verification.
	//
	// example:
	//
	// true
	EnableTagAuth *bool `json:"EnableTagAuth,omitempty" xml:"EnableTagAuth,omitempty"`
	// The API group ID.
	//
	// example:
	//
	// c4a4d2de657548a2bd485d5d4df42b4a
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment in which you want to perform this operation. Valid values:
	//
	// 	- **RELEASE**: the production environment
	//
	// 	- **PRE**: the staging environment
	//
	// 	- **TEST**: the test environment
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The tags of objects that match the rule.
	//
	// example:
	//
	// Key， Value
	Tag []*DescribeApisRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// Specifies whether to filter unpublished APIs.
	//
	// example:
	//
	// true
	UnDeployed *bool `json:"UnDeployed,omitempty" xml:"UnDeployed,omitempty"`
	// Specifies whether the API is public. Valid values:
	//
	// 	- **PUBLIC**: The API is public. If you publish the definition of a public API to the production environment, the definition is displayed on the APIs page for all users.
	//
	// 	- **PRIVATE**: The API is private. If you publish an API group that contains a private API in Alibaba Cloud Marketplace, the API is not displayed in Alibaba Cloud Marketplace.
	//
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribeApisRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisRequest) GoString() string {
	return s.String()
}

func (s *DescribeApisRequest) SetApiId(v string) *DescribeApisRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApisRequest) SetApiMethod(v string) *DescribeApisRequest {
	s.ApiMethod = &v
	return s
}

func (s *DescribeApisRequest) SetApiName(v string) *DescribeApisRequest {
	s.ApiName = &v
	return s
}

func (s *DescribeApisRequest) SetApiPath(v string) *DescribeApisRequest {
	s.ApiPath = &v
	return s
}

func (s *DescribeApisRequest) SetCatalogId(v string) *DescribeApisRequest {
	s.CatalogId = &v
	return s
}

func (s *DescribeApisRequest) SetEnableTagAuth(v bool) *DescribeApisRequest {
	s.EnableTagAuth = &v
	return s
}

func (s *DescribeApisRequest) SetGroupId(v string) *DescribeApisRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApisRequest) SetPageNumber(v int32) *DescribeApisRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisRequest) SetPageSize(v int32) *DescribeApisRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApisRequest) SetSecurityToken(v string) *DescribeApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApisRequest) SetStageName(v string) *DescribeApisRequest {
	s.StageName = &v
	return s
}

func (s *DescribeApisRequest) SetTag(v []*DescribeApisRequestTag) *DescribeApisRequest {
	s.Tag = v
	return s
}

func (s *DescribeApisRequest) SetUnDeployed(v bool) *DescribeApisRequest {
	s.UnDeployed = &v
	return s
}

func (s *DescribeApisRequest) SetVisibility(v string) *DescribeApisRequest {
	s.Visibility = &v
	return s
}

type DescribeApisRequestTag struct {
	// The tag key.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeApisRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeApisRequestTag) SetKey(v string) *DescribeApisRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeApisRequestTag) SetValue(v string) *DescribeApisRequestTag {
	s.Value = &v
	return s
}

type DescribeApisResponseBody struct {
	// The queried API definitions.
	ApiSummarys *DescribeApisResponseBodyApiSummarys `json:"ApiSummarys,omitempty" xml:"ApiSummarys,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 3
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 15
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ002
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 32
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApisResponseBody) SetApiSummarys(v *DescribeApisResponseBodyApiSummarys) *DescribeApisResponseBody {
	s.ApiSummarys = v
	return s
}

func (s *DescribeApisResponseBody) SetPageNumber(v int32) *DescribeApisResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisResponseBody) SetPageSize(v int32) *DescribeApisResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApisResponseBody) SetRequestId(v string) *DescribeApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApisResponseBody) SetTotalCount(v int32) *DescribeApisResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApisResponseBodyApiSummarys struct {
	ApiSummary []*DescribeApisResponseBodyApiSummarysApiSummary `json:"ApiSummary,omitempty" xml:"ApiSummary,omitempty" type:"Repeated"`
}

func (s DescribeApisResponseBodyApiSummarys) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponseBodyApiSummarys) GoString() string {
	return s.String()
}

func (s *DescribeApisResponseBodyApiSummarys) SetApiSummary(v []*DescribeApisResponseBodyApiSummarysApiSummary) *DescribeApisResponseBodyApiSummarys {
	s.ApiSummary = v
	return s
}

type DescribeApisResponseBodyApiSummarysApiSummary struct {
	// The API ID.
	//
	// example:
	//
	// 5af418828f0344a3b588c0cc1331a3bc
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The HTTP method of the API request.
	//
	// example:
	//
	// GET
	ApiMethod *string `json:"ApiMethod,omitempty" xml:"ApiMethod,omitempty"`
	// The API name.
	//
	// example:
	//
	// CreateObject
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The request path of the API.
	//
	// example:
	//
	// /sqb/
	ApiPath *string `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	// The time when the API was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2016-05-20T18:18:25Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The API publishing statuses.
	DeployedInfos *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfos `json:"DeployedInfos,omitempty" xml:"DeployedInfos,omitempty" type:"Struct"`
	// The API description.
	//
	// example:
	//
	// Creates an object
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The API group ID.
	//
	// example:
	//
	// 1084f9034c744137901057206b39d2b6
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group to which the API belongs.
	//
	// example:
	//
	// myGroup2
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The time when the API was modified. The time is displayed in UTC.
	//
	// example:
	//
	// 2016-07-23T08:28:48Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The ID of the region to which the API belongs.
	//
	// example:
	//
	// cn-qingdao
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The tags that are added to the APIs.
	TagList *DescribeApisResponseBodyApiSummarysApiSummaryTagList `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Struct"`
	// Indicates whether the API is public. Valid values:
	//
	// 	- **PUBLIC**: The API is public.
	//
	// 	- **PRIVATE**: The API is private.
	//
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribeApisResponseBodyApiSummarysApiSummary) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponseBodyApiSummarysApiSummary) GoString() string {
	return s.String()
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetApiId(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.ApiId = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetApiMethod(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.ApiMethod = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetApiName(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.ApiName = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetApiPath(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.ApiPath = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetCreatedTime(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.CreatedTime = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetDeployedInfos(v *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfos) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.DeployedInfos = v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetDescription(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.Description = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetGroupId(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.GroupId = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetGroupName(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.GroupName = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetModifiedTime(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetRegionId(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.RegionId = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetTagList(v *DescribeApisResponseBodyApiSummarysApiSummaryTagList) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.TagList = v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetVisibility(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.Visibility = &v
	return s
}

type DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfos struct {
	DeployedInfo []*DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo `json:"DeployedInfo,omitempty" xml:"DeployedInfo,omitempty" type:"Repeated"`
}

func (s DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfos) GoString() string {
	return s.String()
}

func (s *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfos) SetDeployedInfo(v []*DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo) *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfos {
	s.DeployedInfo = v
	return s
}

type DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo struct {
	// The deployment status. Valid values: DEPLOYED and NONDEPLOYED.
	//
	// example:
	//
	// DEPLOYED
	DeployedStatus *string `json:"DeployedStatus,omitempty" xml:"DeployedStatus,omitempty"`
	// The deployed version.
	//
	// example:
	//
	// 20220103170737313
	EffectiveVersion *string `json:"EffectiveVersion,omitempty" xml:"EffectiveVersion,omitempty"`
	// Stage Name:
	//
	// 	- **RELEASE**: production environment
	//
	// 	- **PRE**: staging environment
	//
	// 	- **TEST**: test environment
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo) GoString() string {
	return s.String()
}

func (s *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo) SetDeployedStatus(v string) *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo {
	s.DeployedStatus = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo) SetEffectiveVersion(v string) *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo {
	s.EffectiveVersion = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo) SetStageName(v string) *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo {
	s.StageName = &v
	return s
}

type DescribeApisResponseBodyApiSummarysApiSummaryTagList struct {
	Tag []*DescribeApisResponseBodyApiSummarysApiSummaryTagListTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeApisResponseBodyApiSummarysApiSummaryTagList) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponseBodyApiSummarysApiSummaryTagList) GoString() string {
	return s.String()
}

func (s *DescribeApisResponseBodyApiSummarysApiSummaryTagList) SetTag(v []*DescribeApisResponseBodyApiSummarysApiSummaryTagListTag) *DescribeApisResponseBodyApiSummarysApiSummaryTagList {
	s.Tag = v
	return s
}

type DescribeApisResponseBodyApiSummarysApiSummaryTagListTag struct {
	// The tag key.
	//
	// example:
	//
	// tagKey
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The tag value.
	//
	// example:
	//
	// tagValue
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeApisResponseBodyApiSummarysApiSummaryTagListTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponseBodyApiSummarysApiSummaryTagListTag) GoString() string {
	return s.String()
}

func (s *DescribeApisResponseBodyApiSummarysApiSummaryTagListTag) SetTagKey(v string) *DescribeApisResponseBodyApiSummarysApiSummaryTagListTag {
	s.TagKey = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummaryTagListTag) SetTagValue(v string) *DescribeApisResponseBodyApiSummarysApiSummaryTagListTag {
	s.TagValue = &v
	return s
}

type DescribeApisResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApisResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponse) GoString() string {
	return s.String()
}

func (s *DescribeApisResponse) SetHeaders(v map[string]*string) *DescribeApisResponse {
	s.Headers = v
	return s
}

func (s *DescribeApisResponse) SetStatusCode(v int32) *DescribeApisResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApisResponse) SetBody(v *DescribeApisResponseBody) *DescribeApisResponse {
	s.Body = v
	return s
}

type DescribeApisByAppRequest struct {
	// example:
	//
	// getPersonInfo
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// example:
	//
	// b19240592b1b4e74961fb8438ed7550c
	ApiUid *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 333486644
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// POST
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// /tt
	Path          *string `json:"Path,omitempty" xml:"Path,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeApisByAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByAppRequest) GoString() string {
	return s.String()
}

func (s *DescribeApisByAppRequest) SetApiName(v string) *DescribeApisByAppRequest {
	s.ApiName = &v
	return s
}

func (s *DescribeApisByAppRequest) SetApiUid(v string) *DescribeApisByAppRequest {
	s.ApiUid = &v
	return s
}

func (s *DescribeApisByAppRequest) SetAppId(v int64) *DescribeApisByAppRequest {
	s.AppId = &v
	return s
}

func (s *DescribeApisByAppRequest) SetDescription(v string) *DescribeApisByAppRequest {
	s.Description = &v
	return s
}

func (s *DescribeApisByAppRequest) SetMethod(v string) *DescribeApisByAppRequest {
	s.Method = &v
	return s
}

func (s *DescribeApisByAppRequest) SetPageNumber(v int32) *DescribeApisByAppRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByAppRequest) SetPageSize(v int32) *DescribeApisByAppRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByAppRequest) SetPath(v string) *DescribeApisByAppRequest {
	s.Path = &v
	return s
}

func (s *DescribeApisByAppRequest) SetSecurityToken(v string) *DescribeApisByAppRequest {
	s.SecurityToken = &v
	return s
}

type DescribeApisByAppResponseBody struct {
	AppApiRelationInfos *DescribeApisByAppResponseBodyAppApiRelationInfos `json:"AppApiRelationInfos,omitempty" xml:"AppApiRelationInfos,omitempty" type:"Struct"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ015
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 2
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApisByAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByAppResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApisByAppResponseBody) SetAppApiRelationInfos(v *DescribeApisByAppResponseBodyAppApiRelationInfos) *DescribeApisByAppResponseBody {
	s.AppApiRelationInfos = v
	return s
}

func (s *DescribeApisByAppResponseBody) SetPageNumber(v int32) *DescribeApisByAppResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByAppResponseBody) SetPageSize(v int32) *DescribeApisByAppResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByAppResponseBody) SetRequestId(v string) *DescribeApisByAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApisByAppResponseBody) SetTotalCount(v int32) *DescribeApisByAppResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApisByAppResponseBodyAppApiRelationInfos struct {
	AppApiRelationInfo []*DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo `json:"AppApiRelationInfo,omitempty" xml:"AppApiRelationInfo,omitempty" type:"Repeated"`
}

func (s DescribeApisByAppResponseBodyAppApiRelationInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByAppResponseBodyAppApiRelationInfos) GoString() string {
	return s.String()
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfos) SetAppApiRelationInfo(v []*DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) *DescribeApisByAppResponseBodyAppApiRelationInfos {
	s.AppApiRelationInfo = v
	return s
}

type DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo struct {
	// example:
	//
	// c625795a1e664782a918eaa629e96ab5
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// example:
	//
	// sd2_h5_player_history_competition
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// example:
	//
	// Sun, 02 Jan 2022 16:00:00 GMT
	AuthVaildTime *string `json:"AuthVaildTime,omitempty" xml:"AuthVaildTime,omitempty"`
	// example:
	//
	// SELF
	AuthorizationSource *string `json:"AuthorizationSource,omitempty" xml:"AuthorizationSource,omitempty"`
	// example:
	//
	// Sun, 02 Jan 2022 16:00:00 GMT
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// example:
	//
	// b1008kz
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 38bed48d664149e4b9b5ea576319673f
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// wb2022012101605749
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// example:
	//
	// GET
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// example:
	//
	// PROVIDER
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// example:
	//
	// /api/offline/cacheData
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// cn-shanghai
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StageAlias *string `json:"StageAlias,omitempty" xml:"StageAlias,omitempty"`
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) GoString() string {
	return s.String()
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetApiId(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.ApiId = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetApiName(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.ApiName = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetAuthVaildTime(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.AuthVaildTime = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetAuthorizationSource(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.AuthorizationSource = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetCreatedTime(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.CreatedTime = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetDescription(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.Description = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetGroupId(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.GroupId = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetGroupName(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.GroupName = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetMethod(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.Method = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetOperator(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.Operator = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetPath(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.Path = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetRegionId(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetStageAlias(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.StageAlias = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetStageName(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.StageName = &v
	return s
}

type DescribeApisByAppResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApisByAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApisByAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByAppResponse) GoString() string {
	return s.String()
}

func (s *DescribeApisByAppResponse) SetHeaders(v map[string]*string) *DescribeApisByAppResponse {
	s.Headers = v
	return s
}

func (s *DescribeApisByAppResponse) SetStatusCode(v int32) *DescribeApisByAppResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApisByAppResponse) SetBody(v *DescribeApisByAppResponseBody) *DescribeApisByAppResponse {
	s.Body = v
	return s
}

type DescribeApisByBackendRequest struct {
	// The ID of the backend service.
	//
	// This parameter is required.
	//
	// example:
	//
	// 4ac69b7a17524781b275ed4c5eb25c54
	BackendId *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	// The number of the current page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment to which the API is published. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **PRE**
	//
	// 	- **TEST**
	//
	// If you do not specify this parameter, APIs in the draft state are returned.
	//
	// example:
	//
	// PRE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApisByBackendRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByBackendRequest) GoString() string {
	return s.String()
}

func (s *DescribeApisByBackendRequest) SetBackendId(v string) *DescribeApisByBackendRequest {
	s.BackendId = &v
	return s
}

func (s *DescribeApisByBackendRequest) SetPageNumber(v int32) *DescribeApisByBackendRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByBackendRequest) SetPageSize(v int32) *DescribeApisByBackendRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByBackendRequest) SetSecurityToken(v string) *DescribeApisByBackendRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApisByBackendRequest) SetStageName(v string) *DescribeApisByBackendRequest {
	s.StageName = &v
	return s
}

type DescribeApisByBackendResponseBody struct {
	// The information about the returned API list.
	ApiInfoList *DescribeApisByBackendResponseBodyApiInfoList `json:"ApiInfoList,omitempty" xml:"ApiInfoList,omitempty" type:"Struct"`
	// The number of the current page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEB6EC62-B6C7-5082-A45A-45A204724AC2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApisByBackendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByBackendResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApisByBackendResponseBody) SetApiInfoList(v *DescribeApisByBackendResponseBodyApiInfoList) *DescribeApisByBackendResponseBody {
	s.ApiInfoList = v
	return s
}

func (s *DescribeApisByBackendResponseBody) SetPageNumber(v int32) *DescribeApisByBackendResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByBackendResponseBody) SetPageSize(v int32) *DescribeApisByBackendResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByBackendResponseBody) SetRequestId(v string) *DescribeApisByBackendResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApisByBackendResponseBody) SetTotalCount(v int32) *DescribeApisByBackendResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApisByBackendResponseBodyApiInfoList struct {
	ApiInfo []*DescribeApisByBackendResponseBodyApiInfoListApiInfo `json:"ApiInfo,omitempty" xml:"ApiInfo,omitempty" type:"Repeated"`
}

func (s DescribeApisByBackendResponseBodyApiInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByBackendResponseBodyApiInfoList) GoString() string {
	return s.String()
}

func (s *DescribeApisByBackendResponseBodyApiInfoList) SetApiInfo(v []*DescribeApisByBackendResponseBodyApiInfoListApiInfo) *DescribeApisByBackendResponseBodyApiInfoList {
	s.ApiInfo = v
	return s
}

type DescribeApisByBackendResponseBodyApiInfoListApiInfo struct {
	// The ID of the API.
	//
	// example:
	//
	// 20bcdc9453524b78a8beb1f6de21edb7
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API.
	//
	// example:
	//
	// testApi
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The description of the API.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 15bcdc9453524b7gs8beb1f6de21edb7
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group.
	//
	// example:
	//
	// testApiGroup
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The request method of the API.
	//
	// example:
	//
	// GET
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The request path of the API.
	//
	// example:
	//
	// /test
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s DescribeApisByBackendResponseBodyApiInfoListApiInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByBackendResponseBodyApiInfoListApiInfo) GoString() string {
	return s.String()
}

func (s *DescribeApisByBackendResponseBodyApiInfoListApiInfo) SetApiId(v string) *DescribeApisByBackendResponseBodyApiInfoListApiInfo {
	s.ApiId = &v
	return s
}

func (s *DescribeApisByBackendResponseBodyApiInfoListApiInfo) SetApiName(v string) *DescribeApisByBackendResponseBodyApiInfoListApiInfo {
	s.ApiName = &v
	return s
}

func (s *DescribeApisByBackendResponseBodyApiInfoListApiInfo) SetDescription(v string) *DescribeApisByBackendResponseBodyApiInfoListApiInfo {
	s.Description = &v
	return s
}

func (s *DescribeApisByBackendResponseBodyApiInfoListApiInfo) SetGroupId(v string) *DescribeApisByBackendResponseBodyApiInfoListApiInfo {
	s.GroupId = &v
	return s
}

func (s *DescribeApisByBackendResponseBodyApiInfoListApiInfo) SetGroupName(v string) *DescribeApisByBackendResponseBodyApiInfoListApiInfo {
	s.GroupName = &v
	return s
}

func (s *DescribeApisByBackendResponseBodyApiInfoListApiInfo) SetMethod(v string) *DescribeApisByBackendResponseBodyApiInfoListApiInfo {
	s.Method = &v
	return s
}

func (s *DescribeApisByBackendResponseBodyApiInfoListApiInfo) SetPath(v string) *DescribeApisByBackendResponseBodyApiInfoListApiInfo {
	s.Path = &v
	return s
}

type DescribeApisByBackendResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApisByBackendResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApisByBackendResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByBackendResponse) GoString() string {
	return s.String()
}

func (s *DescribeApisByBackendResponse) SetHeaders(v map[string]*string) *DescribeApisByBackendResponse {
	s.Headers = v
	return s
}

func (s *DescribeApisByBackendResponse) SetStatusCode(v int32) *DescribeApisByBackendResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApisByBackendResponse) SetBody(v *DescribeApisByBackendResponseBody) *DescribeApisByBackendResponse {
	s.Body = v
	return s
}

type DescribeApisByIpControlRequest struct {
	// The ID of the ACL.
	//
	// This parameter is required.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeApisByIpControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByIpControlRequest) GoString() string {
	return s.String()
}

func (s *DescribeApisByIpControlRequest) SetIpControlId(v string) *DescribeApisByIpControlRequest {
	s.IpControlId = &v
	return s
}

func (s *DescribeApisByIpControlRequest) SetPageNumber(v int32) *DescribeApisByIpControlRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByIpControlRequest) SetPageSize(v int32) *DescribeApisByIpControlRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByIpControlRequest) SetSecurityToken(v string) *DescribeApisByIpControlRequest {
	s.SecurityToken = &v
	return s
}

type DescribeApisByIpControlResponseBody struct {
	// The returned API information. It is an array of ApiInfo data.
	ApiInfos *DescribeApisByIpControlResponseBodyApiInfos `json:"ApiInfos,omitempty" xml:"ApiInfos,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 20
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApisByIpControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByIpControlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApisByIpControlResponseBody) SetApiInfos(v *DescribeApisByIpControlResponseBodyApiInfos) *DescribeApisByIpControlResponseBody {
	s.ApiInfos = v
	return s
}

func (s *DescribeApisByIpControlResponseBody) SetPageNumber(v int32) *DescribeApisByIpControlResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByIpControlResponseBody) SetPageSize(v int32) *DescribeApisByIpControlResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByIpControlResponseBody) SetRequestId(v string) *DescribeApisByIpControlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApisByIpControlResponseBody) SetTotalCount(v int32) *DescribeApisByIpControlResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApisByIpControlResponseBodyApiInfos struct {
	ApiInfo []*DescribeApisByIpControlResponseBodyApiInfosApiInfo `json:"ApiInfo,omitempty" xml:"ApiInfo,omitempty" type:"Repeated"`
}

func (s DescribeApisByIpControlResponseBodyApiInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByIpControlResponseBodyApiInfos) GoString() string {
	return s.String()
}

func (s *DescribeApisByIpControlResponseBodyApiInfos) SetApiInfo(v []*DescribeApisByIpControlResponseBodyApiInfosApiInfo) *DescribeApisByIpControlResponseBodyApiInfos {
	s.ApiInfo = v
	return s
}

type DescribeApisByIpControlResponseBodyApiInfosApiInfo struct {
	// The ID of the API.
	//
	// example:
	//
	// 3b81fd160f5645e097cc8855d75a1cf6
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API
	//
	// example:
	//
	// testapi
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The time of API binding.
	//
	// example:
	//
	// 2016-07-23T08:28:48Z
	BoundTime *string `json:"BoundTime,omitempty" xml:"BoundTime,omitempty"`
	// The description of the API.
	//
	// example:
	//
	// Description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group.
	//
	// example:
	//
	// mygroup
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The region in which the API is located.
	//
	// example:
	//
	// cn-qingdao
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST.
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The visibility of the API. Valid values:
	//
	// 	- **PUBLIC**
	//
	// 	- **PRIVATE**
	//
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribeApisByIpControlResponseBodyApiInfosApiInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByIpControlResponseBodyApiInfosApiInfo) GoString() string {
	return s.String()
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetApiId(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.ApiId = &v
	return s
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetApiName(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.ApiName = &v
	return s
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetBoundTime(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.BoundTime = &v
	return s
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetDescription(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.Description = &v
	return s
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetGroupId(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.GroupId = &v
	return s
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetGroupName(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.GroupName = &v
	return s
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetRegionId(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetStageName(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.StageName = &v
	return s
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetVisibility(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.Visibility = &v
	return s
}

type DescribeApisByIpControlResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApisByIpControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApisByIpControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByIpControlResponse) GoString() string {
	return s.String()
}

func (s *DescribeApisByIpControlResponse) SetHeaders(v map[string]*string) *DescribeApisByIpControlResponse {
	s.Headers = v
	return s
}

func (s *DescribeApisByIpControlResponse) SetStatusCode(v int32) *DescribeApisByIpControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApisByIpControlResponse) SetBody(v *DescribeApisByIpControlResponseBody) *DescribeApisByIpControlResponse {
	s.Body = v
	return s
}

type DescribeApisBySignatureRequest struct {
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the signature key.
	//
	// This parameter is required.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
}

func (s DescribeApisBySignatureRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisBySignatureRequest) GoString() string {
	return s.String()
}

func (s *DescribeApisBySignatureRequest) SetPageNumber(v int32) *DescribeApisBySignatureRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisBySignatureRequest) SetPageSize(v int32) *DescribeApisBySignatureRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApisBySignatureRequest) SetSecurityToken(v string) *DescribeApisBySignatureRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApisBySignatureRequest) SetSignatureId(v string) *DescribeApisBySignatureRequest {
	s.SignatureId = &v
	return s
}

type DescribeApisBySignatureResponseBody struct {
	// The returned API information. It is an array consisting of ApiInfo data.
	ApiInfos *DescribeApisBySignatureResponseBodyApiInfos `json:"ApiInfos,omitempty" xml:"ApiInfos,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 20
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApisBySignatureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisBySignatureResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApisBySignatureResponseBody) SetApiInfos(v *DescribeApisBySignatureResponseBodyApiInfos) *DescribeApisBySignatureResponseBody {
	s.ApiInfos = v
	return s
}

func (s *DescribeApisBySignatureResponseBody) SetPageNumber(v int32) *DescribeApisBySignatureResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisBySignatureResponseBody) SetPageSize(v int32) *DescribeApisBySignatureResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApisBySignatureResponseBody) SetRequestId(v string) *DescribeApisBySignatureResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApisBySignatureResponseBody) SetTotalCount(v int32) *DescribeApisBySignatureResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApisBySignatureResponseBodyApiInfos struct {
	ApiInfo []*DescribeApisBySignatureResponseBodyApiInfosApiInfo `json:"ApiInfo,omitempty" xml:"ApiInfo,omitempty" type:"Repeated"`
}

func (s DescribeApisBySignatureResponseBodyApiInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisBySignatureResponseBodyApiInfos) GoString() string {
	return s.String()
}

func (s *DescribeApisBySignatureResponseBodyApiInfos) SetApiInfo(v []*DescribeApisBySignatureResponseBodyApiInfosApiInfo) *DescribeApisBySignatureResponseBodyApiInfos {
	s.ApiInfo = v
	return s
}

type DescribeApisBySignatureResponseBodyApiInfosApiInfo struct {
	// The ID of the API.
	//
	// example:
	//
	// 3b81fd160f5645e097cc8855d75a1cf6
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API.
	//
	// example:
	//
	// testapi
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The binding time of the API.
	//
	// example:
	//
	// 2016-07-23T08:28:48Z
	BoundTime *string `json:"BoundTime,omitempty" xml:"BoundTime,omitempty"`
	// The description of the API.
	//
	// example:
	//
	// Description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the group to which the API belongs.
	//
	// example:
	//
	// mygroup
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The region where the API is located.
	//
	// example:
	//
	// cn-qingdao
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// Indicates whether the API is public. Valid values:
	//
	// 	- **PUBLIC**
	//
	// 	- **PRIVATE**
	//
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribeApisBySignatureResponseBodyApiInfosApiInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisBySignatureResponseBodyApiInfosApiInfo) GoString() string {
	return s.String()
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetApiId(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.ApiId = &v
	return s
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetApiName(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.ApiName = &v
	return s
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetBoundTime(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.BoundTime = &v
	return s
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetDescription(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.Description = &v
	return s
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetGroupId(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.GroupId = &v
	return s
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetGroupName(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.GroupName = &v
	return s
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetRegionId(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetStageName(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.StageName = &v
	return s
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetVisibility(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.Visibility = &v
	return s
}

type DescribeApisBySignatureResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApisBySignatureResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApisBySignatureResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisBySignatureResponse) GoString() string {
	return s.String()
}

func (s *DescribeApisBySignatureResponse) SetHeaders(v map[string]*string) *DescribeApisBySignatureResponse {
	s.Headers = v
	return s
}

func (s *DescribeApisBySignatureResponse) SetStatusCode(v int32) *DescribeApisBySignatureResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApisBySignatureResponse) SetBody(v *DescribeApisBySignatureResponseBody) *DescribeApisBySignatureResponse {
	s.Body = v
	return s
}

type DescribeApisByTrafficControlRequest struct {
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The security token included in the WebSocket request header. The system uses this token to authenticate the request.
	//
	// example:
	//
	// 9abe3317-3e22-4957-ab9f-dd893d0ac956
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the throttling policy that you want to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
}

func (s DescribeApisByTrafficControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByTrafficControlRequest) GoString() string {
	return s.String()
}

func (s *DescribeApisByTrafficControlRequest) SetPageNumber(v int32) *DescribeApisByTrafficControlRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByTrafficControlRequest) SetPageSize(v int32) *DescribeApisByTrafficControlRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByTrafficControlRequest) SetSecurityToken(v string) *DescribeApisByTrafficControlRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApisByTrafficControlRequest) SetTrafficControlId(v string) *DescribeApisByTrafficControlRequest {
	s.TrafficControlId = &v
	return s
}

type DescribeApisByTrafficControlResponseBody struct {
	// The returned API information. It is an array consisting of ApiInfo data.
	ApiInfos *DescribeApisByTrafficControlResponseBodyApiInfos `json:"ApiInfos,omitempty" xml:"ApiInfos,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 20
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApisByTrafficControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByTrafficControlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApisByTrafficControlResponseBody) SetApiInfos(v *DescribeApisByTrafficControlResponseBodyApiInfos) *DescribeApisByTrafficControlResponseBody {
	s.ApiInfos = v
	return s
}

func (s *DescribeApisByTrafficControlResponseBody) SetPageNumber(v int32) *DescribeApisByTrafficControlResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBody) SetPageSize(v int32) *DescribeApisByTrafficControlResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBody) SetRequestId(v string) *DescribeApisByTrafficControlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBody) SetTotalCount(v int32) *DescribeApisByTrafficControlResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApisByTrafficControlResponseBodyApiInfos struct {
	ApiInfo []*DescribeApisByTrafficControlResponseBodyApiInfosApiInfo `json:"ApiInfo,omitempty" xml:"ApiInfo,omitempty" type:"Repeated"`
}

func (s DescribeApisByTrafficControlResponseBodyApiInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByTrafficControlResponseBodyApiInfos) GoString() string {
	return s.String()
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfos) SetApiInfo(v []*DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) *DescribeApisByTrafficControlResponseBodyApiInfos {
	s.ApiInfo = v
	return s
}

type DescribeApisByTrafficControlResponseBodyApiInfosApiInfo struct {
	// The ID of the API.
	//
	// example:
	//
	// 3b81fd160f5645e097cc8855d75a1cf6
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API
	//
	// example:
	//
	// testapi
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The binding time of the API.
	//
	// example:
	//
	// 2016-07-23T08:28:48Z
	BoundTime *string `json:"BoundTime,omitempty" xml:"BoundTime,omitempty"`
	// The description of the API.
	//
	// example:
	//
	// Description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the group to which an API belongs.
	//
	// example:
	//
	// mygroup
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The region where the API is located.
	//
	// example:
	//
	// cn-qingdao
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// Indicates whether the API is public. Valid values:
	//
	// 	- **PUBLIC**
	//
	// 	- **PRIVATE**
	//
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) GoString() string {
	return s.String()
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetApiId(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.ApiId = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetApiName(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.ApiName = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetBoundTime(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.BoundTime = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetDescription(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.Description = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetGroupId(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.GroupId = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetGroupName(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.GroupName = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetRegionId(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetStageName(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.StageName = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetVisibility(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.Visibility = &v
	return s
}

type DescribeApisByTrafficControlResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApisByTrafficControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApisByTrafficControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByTrafficControlResponse) GoString() string {
	return s.String()
}

func (s *DescribeApisByTrafficControlResponse) SetHeaders(v map[string]*string) *DescribeApisByTrafficControlResponse {
	s.Headers = v
	return s
}

func (s *DescribeApisByTrafficControlResponse) SetStatusCode(v int32) *DescribeApisByTrafficControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApisByTrafficControlResponse) SetBody(v *DescribeApisByTrafficControlResponseBody) *DescribeApisByTrafficControlResponse {
	s.Body = v
	return s
}

type DescribeApisByVpcAccessRequest struct {
	// example:
	//
	// 2
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// example:
	//
	// lynkco-iov-uat
	VpcName *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
}

func (s DescribeApisByVpcAccessRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByVpcAccessRequest) GoString() string {
	return s.String()
}

func (s *DescribeApisByVpcAccessRequest) SetPageNumber(v int32) *DescribeApisByVpcAccessRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByVpcAccessRequest) SetPageSize(v int32) *DescribeApisByVpcAccessRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByVpcAccessRequest) SetSecurityToken(v string) *DescribeApisByVpcAccessRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApisByVpcAccessRequest) SetVpcName(v string) *DescribeApisByVpcAccessRequest {
	s.VpcName = &v
	return s
}

type DescribeApisByVpcAccessResponseBody struct {
	ApiVpcAccessInfos *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfos `json:"ApiVpcAccessInfos,omitempty" xml:"ApiVpcAccessInfos,omitempty" type:"Struct"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 4E707B25-5119-5ACF-9D26-7D2A2762F05C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 12
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApisByVpcAccessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByVpcAccessResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApisByVpcAccessResponseBody) SetApiVpcAccessInfos(v *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfos) *DescribeApisByVpcAccessResponseBody {
	s.ApiVpcAccessInfos = v
	return s
}

func (s *DescribeApisByVpcAccessResponseBody) SetPageNumber(v int32) *DescribeApisByVpcAccessResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByVpcAccessResponseBody) SetPageSize(v int32) *DescribeApisByVpcAccessResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByVpcAccessResponseBody) SetRequestId(v string) *DescribeApisByVpcAccessResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApisByVpcAccessResponseBody) SetTotalCount(v int32) *DescribeApisByVpcAccessResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApisByVpcAccessResponseBodyApiVpcAccessInfos struct {
	ApiVpcAccessInfo []*DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo `json:"ApiVpcAccessInfo,omitempty" xml:"ApiVpcAccessInfo,omitempty" type:"Repeated"`
}

func (s DescribeApisByVpcAccessResponseBodyApiVpcAccessInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByVpcAccessResponseBodyApiVpcAccessInfos) GoString() string {
	return s.String()
}

func (s *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfos) SetApiVpcAccessInfo(v []*DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfos {
	s.ApiVpcAccessInfo = v
	return s
}

type DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo struct {
	// example:
	//
	// 09839002de484e76b5a213b040a6a3ca
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// example:
	//
	// iwc
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// example:
	//
	// 123
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 41c33748cbfb41f6b00870156203b72a
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// RT_PLU_IP_CTRL_group
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// example:
	//
	// Ib-04e41XXXXXd95e9c1
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// POST
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// example:
	//
	// /api/v1/friends/rc/status
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// 443
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// 57e17906a69b4424914fb1e05f67c78a
	StageId *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// vpc id
	//
	// example:
	//
	// vpc-2ze7bj64wstznvftrskbk
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// example:
	//
	// aliYun_service_prod
	VpcName *string `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
}

func (s DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) GoString() string {
	return s.String()
}

func (s *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) SetApiId(v string) *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo {
	s.ApiId = &v
	return s
}

func (s *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) SetApiName(v string) *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo {
	s.ApiName = &v
	return s
}

func (s *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) SetDescription(v string) *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo {
	s.Description = &v
	return s
}

func (s *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) SetGroupId(v string) *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo {
	s.GroupId = &v
	return s
}

func (s *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) SetGroupName(v string) *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo {
	s.GroupName = &v
	return s
}

func (s *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) SetInstanceId(v string) *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo {
	s.InstanceId = &v
	return s
}

func (s *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) SetMethod(v string) *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo {
	s.Method = &v
	return s
}

func (s *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) SetPath(v string) *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo {
	s.Path = &v
	return s
}

func (s *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) SetPort(v int32) *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo {
	s.Port = &v
	return s
}

func (s *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) SetRegionId(v string) *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) SetStageId(v string) *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo {
	s.StageId = &v
	return s
}

func (s *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) SetStageName(v string) *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo {
	s.StageName = &v
	return s
}

func (s *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) SetVpcId(v string) *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo {
	s.VpcId = &v
	return s
}

func (s *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo) SetVpcName(v string) *DescribeApisByVpcAccessResponseBodyApiVpcAccessInfosApiVpcAccessInfo {
	s.VpcName = &v
	return s
}

type DescribeApisByVpcAccessResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApisByVpcAccessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApisByVpcAccessResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByVpcAccessResponse) GoString() string {
	return s.String()
}

func (s *DescribeApisByVpcAccessResponse) SetHeaders(v map[string]*string) *DescribeApisByVpcAccessResponse {
	s.Headers = v
	return s
}

func (s *DescribeApisByVpcAccessResponse) SetStatusCode(v int32) *DescribeApisByVpcAccessResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApisByVpcAccessResponse) SetBody(v *DescribeApisByVpcAccessResponseBody) *DescribeApisByVpcAccessResponse {
	s.Body = v
	return s
}

type DescribeApisWithStageNameIntegratedByAppRequest struct {
	// The API name.
	//
	// example:
	//
	// ApiName
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The API ID.
	//
	// example:
	//
	// b19240592b1b4e74961fb8438ed7550c
	ApiUid *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	// The application ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2386789
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The API description. The description can be up to 200 characters in length.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The request HTTP method of the API.
	//
	// example:
	//
	// POST
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The page number of the page to return.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request path of the API.
	//
	// example:
	//
	// /tt
	Path          *string `json:"Path,omitempty" xml:"Path,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeApisWithStageNameIntegratedByAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisWithStageNameIntegratedByAppRequest) GoString() string {
	return s.String()
}

func (s *DescribeApisWithStageNameIntegratedByAppRequest) SetApiName(v string) *DescribeApisWithStageNameIntegratedByAppRequest {
	s.ApiName = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppRequest) SetApiUid(v string) *DescribeApisWithStageNameIntegratedByAppRequest {
	s.ApiUid = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppRequest) SetAppId(v int64) *DescribeApisWithStageNameIntegratedByAppRequest {
	s.AppId = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppRequest) SetDescription(v string) *DescribeApisWithStageNameIntegratedByAppRequest {
	s.Description = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppRequest) SetMethod(v string) *DescribeApisWithStageNameIntegratedByAppRequest {
	s.Method = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppRequest) SetPageNumber(v int32) *DescribeApisWithStageNameIntegratedByAppRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppRequest) SetPageSize(v int32) *DescribeApisWithStageNameIntegratedByAppRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppRequest) SetPath(v string) *DescribeApisWithStageNameIntegratedByAppRequest {
	s.Path = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppRequest) SetSecurityToken(v string) *DescribeApisWithStageNameIntegratedByAppRequest {
	s.SecurityToken = &v
	return s
}

type DescribeApisWithStageNameIntegratedByAppResponseBody struct {
	// The authorization information of the API.
	AppApiRelationInfos *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfos `json:"AppApiRelationInfos,omitempty" xml:"AppApiRelationInfos,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 6C87A26A-6A18-4B8E-8099-705278381A2C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApisWithStageNameIntegratedByAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisWithStageNameIntegratedByAppResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBody) SetAppApiRelationInfos(v *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfos) *DescribeApisWithStageNameIntegratedByAppResponseBody {
	s.AppApiRelationInfos = v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBody) SetPageNumber(v int32) *DescribeApisWithStageNameIntegratedByAppResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBody) SetPageSize(v int32) *DescribeApisWithStageNameIntegratedByAppResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBody) SetRequestId(v string) *DescribeApisWithStageNameIntegratedByAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBody) SetTotalCount(v int32) *DescribeApisWithStageNameIntegratedByAppResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfos struct {
	AppApiRelationInfo []*DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo `json:"AppApiRelationInfo,omitempty" xml:"AppApiRelationInfo,omitempty" type:"Repeated"`
}

func (s DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfos) GoString() string {
	return s.String()
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfos) SetAppApiRelationInfo(v []*DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfos {
	s.AppApiRelationInfo = v
	return s
}

type DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo struct {
	// The API ID.
	//
	// example:
	//
	// c625795a1e664782a918eaa629e96ab5
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The API name.
	//
	// example:
	//
	// sd2_h5_player_history_competition
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The authorization source.
	//
	// example:
	//
	// SELF
	AuthorizationSource *string `json:"AuthorizationSource,omitempty" xml:"AuthorizationSource,omitempty"`
	// The time when the authorization was created.
	//
	// example:
	//
	// Sun, 02 Jan 2022 16:00:00 GMT
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The API description.
	//
	// example:
	//
	// b1008kz
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 38bed48d664149e4b9b5ea576319673f
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group.
	//
	// example:
	//
	// manager_vehicles
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The request HTTP method of the API.
	//
	// example:
	//
	// POST
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The authorizer. Valid values:
	//
	// 	- **PROVIDER:*	- the API owner
	//
	// 	- **CONSUMER:*	- the API caller
	//
	// example:
	//
	// PROVIDER
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The request path of the API.
	//
	// example:
	//
	// /api/offline/cacheData
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The mapping information between environments and authorizations.
	StageNameAndAuth map[string]*string `json:"StageNameAndAuth,omitempty" xml:"StageNameAndAuth,omitempty"`
}

func (s DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) GoString() string {
	return s.String()
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetApiId(v string) *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.ApiId = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetApiName(v string) *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.ApiName = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetAuthorizationSource(v string) *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.AuthorizationSource = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetCreatedTime(v string) *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.CreatedTime = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetDescription(v string) *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.Description = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetGroupId(v string) *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.GroupId = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetGroupName(v string) *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.GroupName = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetMethod(v string) *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.Method = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetOperator(v string) *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.Operator = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetPath(v string) *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.Path = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetRegionId(v string) *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetStageNameAndAuth(v map[string]*string) *DescribeApisWithStageNameIntegratedByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.StageNameAndAuth = v
	return s
}

type DescribeApisWithStageNameIntegratedByAppResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApisWithStageNameIntegratedByAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApisWithStageNameIntegratedByAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisWithStageNameIntegratedByAppResponse) GoString() string {
	return s.String()
}

func (s *DescribeApisWithStageNameIntegratedByAppResponse) SetHeaders(v map[string]*string) *DescribeApisWithStageNameIntegratedByAppResponse {
	s.Headers = v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponse) SetStatusCode(v int32) *DescribeApisWithStageNameIntegratedByAppResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApisWithStageNameIntegratedByAppResponse) SetBody(v *DescribeApisWithStageNameIntegratedByAppResponseBody) *DescribeApisWithStageNameIntegratedByAppResponse {
	s.Body = v
	return s
}

type DescribeAppRequest struct {
	// The ID of the app. The ID is generated by the system and globally unique.
	//
	// example:
	//
	// 110843374
	AppId         *int64  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppRequest) GoString() string {
	return s.String()
}

func (s *DescribeAppRequest) SetAppId(v int64) *DescribeAppRequest {
	s.AppId = &v
	return s
}

func (s *DescribeAppRequest) SetSecurityToken(v string) *DescribeAppRequest {
	s.SecurityToken = &v
	return s
}

type DescribeAppResponseBody struct {
	// The ID of the app.
	//
	// example:
	//
	// 110843374
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the app.
	//
	// example:
	//
	// CreateApptest
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The time when the app was created.
	//
	// example:
	//
	// 2019-01-29T09:33:01Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The description of the app.
	//
	// example:
	//
	// Estimated on October 15, 2021 at 10:20:27
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The extended information.
	//
	// example:
	//
	// 110243810311
	Extend *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	// The time when the app was modified.
	//
	// example:
	//
	// 2019-01-29T09:33:01Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// DBDB3B0F-EC61-5F33-88AD-EC2446FA1DDB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAppResponseBody) SetAppId(v int64) *DescribeAppResponseBody {
	s.AppId = &v
	return s
}

func (s *DescribeAppResponseBody) SetAppName(v string) *DescribeAppResponseBody {
	s.AppName = &v
	return s
}

func (s *DescribeAppResponseBody) SetCreatedTime(v string) *DescribeAppResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeAppResponseBody) SetDescription(v string) *DescribeAppResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeAppResponseBody) SetExtend(v string) *DescribeAppResponseBody {
	s.Extend = &v
	return s
}

func (s *DescribeAppResponseBody) SetModifiedTime(v string) *DescribeAppResponseBody {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeAppResponseBody) SetRequestId(v string) *DescribeAppResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAppResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppResponse) GoString() string {
	return s.String()
}

func (s *DescribeAppResponse) SetHeaders(v map[string]*string) *DescribeAppResponse {
	s.Headers = v
	return s
}

func (s *DescribeAppResponse) SetStatusCode(v int32) *DescribeAppResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAppResponse) SetBody(v *DescribeAppResponseBody) *DescribeAppResponse {
	s.Body = v
	return s
}

type DescribeAppAttributesRequest struct {
	// The AppCode of the app.
	//
	// example:
	//
	// 23552160
	AppCode *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	// The ID of the app.
	//
	// example:
	//
	// 20112314518278
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The app key that is used to make an API call.
	//
	// example:
	//
	// 203708622
	AppKey *string `json:"AppKey,omitempty" xml:"AppKey,omitempty"`
	// The name of the app.
	//
	// example:
	//
	// testApp
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// Specifies whether to enable tag verification.
	//
	// example:
	//
	// true
	EnableTagAuth *bool `json:"EnableTagAuth,omitempty" xml:"EnableTagAuth,omitempty"`
	// The extended information.
	//
	// example:
	//
	// 110243810311
	Extend *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The order. Valid values: asc and desc. Default value: desc.
	//
	// 	- asc: The apps are displayed in ascending order of modification time.
	//
	// 	- desc: The apps are displayed in descending order of modification time.
	//
	// example:
	//
	// desc
	Sort *string `json:"Sort,omitempty" xml:"Sort,omitempty"`
	// The tag of objects that match the rule. You can specify multiple tags.
	//
	// example:
	//
	// Key， Value
	Tag []*DescribeAppAttributesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeAppAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAppAttributesRequest) SetAppCode(v string) *DescribeAppAttributesRequest {
	s.AppCode = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetAppId(v int64) *DescribeAppAttributesRequest {
	s.AppId = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetAppKey(v string) *DescribeAppAttributesRequest {
	s.AppKey = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetAppName(v string) *DescribeAppAttributesRequest {
	s.AppName = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetEnableTagAuth(v bool) *DescribeAppAttributesRequest {
	s.EnableTagAuth = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetExtend(v string) *DescribeAppAttributesRequest {
	s.Extend = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetPageNumber(v int32) *DescribeAppAttributesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetPageSize(v int32) *DescribeAppAttributesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetSecurityToken(v string) *DescribeAppAttributesRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetSort(v string) *DescribeAppAttributesRequest {
	s.Sort = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetTag(v []*DescribeAppAttributesRequestTag) *DescribeAppAttributesRequest {
	s.Tag = v
	return s
}

type DescribeAppAttributesRequestTag struct {
	// The value of tag N.
	//
	// Valid values of n: `[1, 20]`.
	//
	// This parameter is required.
	//
	// example:
	//
	// env
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The key of tag N.
	//
	// Valid values of n: `[1, 20]`.
	//
	// example:
	//
	// \\" \\"
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeAppAttributesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppAttributesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeAppAttributesRequestTag) SetKey(v string) *DescribeAppAttributesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeAppAttributesRequestTag) SetValue(v string) *DescribeAppAttributesRequestTag {
	s.Value = &v
	return s
}

type DescribeAppAttributesResponseBody struct {
	// The returned application information. It is an array that consists of AppAttribute data.
	Apps *DescribeAppAttributesResponseBodyApps `json:"Apps,omitempty" xml:"Apps,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 8883AC74-259D-4C0B-99FC-0B7F9A588B2F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAppAttributesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAppAttributesResponseBody) SetApps(v *DescribeAppAttributesResponseBodyApps) *DescribeAppAttributesResponseBody {
	s.Apps = v
	return s
}

func (s *DescribeAppAttributesResponseBody) SetPageNumber(v int32) *DescribeAppAttributesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAppAttributesResponseBody) SetPageSize(v int32) *DescribeAppAttributesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAppAttributesResponseBody) SetRequestId(v string) *DescribeAppAttributesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAppAttributesResponseBody) SetTotalCount(v int32) *DescribeAppAttributesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeAppAttributesResponseBodyApps struct {
	AppAttribute []*DescribeAppAttributesResponseBodyAppsAppAttribute `json:"AppAttribute,omitempty" xml:"AppAttribute,omitempty" type:"Repeated"`
}

func (s DescribeAppAttributesResponseBodyApps) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppAttributesResponseBodyApps) GoString() string {
	return s.String()
}

func (s *DescribeAppAttributesResponseBodyApps) SetAppAttribute(v []*DescribeAppAttributesResponseBodyAppsAppAttribute) *DescribeAppAttributesResponseBodyApps {
	s.AppAttribute = v
	return s
}

type DescribeAppAttributesResponseBodyAppsAppAttribute struct {
	// The application ID.
	//
	// example:
	//
	// 20112314518278
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The application name.
	//
	// example:
	//
	// CreateApptest
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The creation time (UTC) of the application.
	//
	// example:
	//
	// 2016-07-31T04:10:19Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The application description.
	//
	// example:
	//
	// App test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The extended information.
	//
	// example:
	//
	// 110461946884
	Extend *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	// The modification time (UTC) of the application.
	//
	// example:
	//
	// 2016-07-31T04:10:19Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The tags.
	Tags *DescribeAppAttributesResponseBodyAppsAppAttributeTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s DescribeAppAttributesResponseBodyAppsAppAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppAttributesResponseBodyAppsAppAttribute) GoString() string {
	return s.String()
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttribute) SetAppId(v int64) *DescribeAppAttributesResponseBodyAppsAppAttribute {
	s.AppId = &v
	return s
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttribute) SetAppName(v string) *DescribeAppAttributesResponseBodyAppsAppAttribute {
	s.AppName = &v
	return s
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttribute) SetCreatedTime(v string) *DescribeAppAttributesResponseBodyAppsAppAttribute {
	s.CreatedTime = &v
	return s
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttribute) SetDescription(v string) *DescribeAppAttributesResponseBodyAppsAppAttribute {
	s.Description = &v
	return s
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttribute) SetExtend(v string) *DescribeAppAttributesResponseBodyAppsAppAttribute {
	s.Extend = &v
	return s
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttribute) SetModifiedTime(v string) *DescribeAppAttributesResponseBodyAppsAppAttribute {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttribute) SetTags(v *DescribeAppAttributesResponseBodyAppsAppAttributeTags) *DescribeAppAttributesResponseBodyAppsAppAttribute {
	s.Tags = v
	return s
}

type DescribeAppAttributesResponseBodyAppsAppAttributeTags struct {
	TagInfo []*DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo `json:"TagInfo,omitempty" xml:"TagInfo,omitempty" type:"Repeated"`
}

func (s DescribeAppAttributesResponseBodyAppsAppAttributeTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppAttributesResponseBodyAppsAppAttributeTags) GoString() string {
	return s.String()
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttributeTags) SetTagInfo(v []*DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo) *DescribeAppAttributesResponseBodyAppsAppAttributeTags {
	s.TagInfo = v
	return s
}

type DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo struct {
	// The tag key.
	//
	// example:
	//
	// appid
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// 123
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo) GoString() string {
	return s.String()
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo) SetKey(v string) *DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo {
	s.Key = &v
	return s
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo) SetValue(v string) *DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo {
	s.Value = &v
	return s
}

type DescribeAppAttributesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAppAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAppAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAppAttributesResponse) SetHeaders(v map[string]*string) *DescribeAppAttributesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAppAttributesResponse) SetStatusCode(v int32) *DescribeAppAttributesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAppAttributesResponse) SetBody(v *DescribeAppAttributesResponseBody) *DescribeAppAttributesResponse {
	s.Body = v
	return s
}

type DescribeAppSecurityRequest struct {
	// The ID of the app.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20112314518278
	AppId         *int64  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The tag of objects that match the rule. You can specify multiple tags.
	//
	// example:
	//
	// Key， Value
	Tag []*DescribeAppSecurityRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeAppSecurityRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppSecurityRequest) GoString() string {
	return s.String()
}

func (s *DescribeAppSecurityRequest) SetAppId(v int64) *DescribeAppSecurityRequest {
	s.AppId = &v
	return s
}

func (s *DescribeAppSecurityRequest) SetSecurityToken(v string) *DescribeAppSecurityRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeAppSecurityRequest) SetTag(v []*DescribeAppSecurityRequestTag) *DescribeAppSecurityRequest {
	s.Tag = v
	return s
}

type DescribeAppSecurityRequestTag struct {
	// The key of the tag.
	//
	// This parameter is required.
	//
	// example:
	//
	// app
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// 123
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeAppSecurityRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppSecurityRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeAppSecurityRequestTag) SetKey(v string) *DescribeAppSecurityRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeAppSecurityRequestTag) SetValue(v string) *DescribeAppSecurityRequestTag {
	s.Value = &v
	return s
}

type DescribeAppSecurityResponseBody struct {
	// The AppCode of the app.
	//
	// example:
	//
	// 3aaf905a0a1f4f0eabc6d891dfa08afc
	AppCode *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	// The key of the app.
	//
	// example:
	//
	// 60030986
	AppKey *string `json:"AppKey,omitempty" xml:"AppKey,omitempty"`
	// The password of the app.
	//
	// example:
	//
	// c1ae97aaa7e45f21d10824bc44678fee
	AppSecret *string `json:"AppSecret,omitempty" xml:"AppSecret,omitempty"`
	// The creation time (UTC) of the key, which is the same as the app creation time.
	//
	// example:
	//
	// 2016-07-31T04:10:19Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The modification time (UTC) of the key.
	//
	// example:
	//
	// 2016-07-31T04:10:19Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ015
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAppSecurityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppSecurityResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAppSecurityResponseBody) SetAppCode(v string) *DescribeAppSecurityResponseBody {
	s.AppCode = &v
	return s
}

func (s *DescribeAppSecurityResponseBody) SetAppKey(v string) *DescribeAppSecurityResponseBody {
	s.AppKey = &v
	return s
}

func (s *DescribeAppSecurityResponseBody) SetAppSecret(v string) *DescribeAppSecurityResponseBody {
	s.AppSecret = &v
	return s
}

func (s *DescribeAppSecurityResponseBody) SetCreatedTime(v string) *DescribeAppSecurityResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeAppSecurityResponseBody) SetModifiedTime(v string) *DescribeAppSecurityResponseBody {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeAppSecurityResponseBody) SetRequestId(v string) *DescribeAppSecurityResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAppSecurityResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAppSecurityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAppSecurityResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppSecurityResponse) GoString() string {
	return s.String()
}

func (s *DescribeAppSecurityResponse) SetHeaders(v map[string]*string) *DescribeAppSecurityResponse {
	s.Headers = v
	return s
}

func (s *DescribeAppSecurityResponse) SetStatusCode(v int32) *DescribeAppSecurityResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAppSecurityResponse) SetBody(v *DescribeAppSecurityResponseBody) *DescribeAppSecurityResponse {
	s.Body = v
	return s
}

type DescribeAppsRequest struct {
	// The ID of the app.
	//
	// example:
	//
	// 20112314518278
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The Alibaba Cloud account of the app owner. For more information, see [Account Management](https://account.console.aliyun.com/?spm=a2c4g.11186623.2.15.3a8c196eVWxvQB#/secure).
	//
	// example:
	//
	// 1546564
	AppOwner *int64 `json:"AppOwner,omitempty" xml:"AppOwner,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeAppsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAppsRequest) SetAppId(v int64) *DescribeAppsRequest {
	s.AppId = &v
	return s
}

func (s *DescribeAppsRequest) SetAppOwner(v int64) *DescribeAppsRequest {
	s.AppOwner = &v
	return s
}

func (s *DescribeAppsRequest) SetPageNumber(v int32) *DescribeAppsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAppsRequest) SetPageSize(v int32) *DescribeAppsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAppsRequest) SetSecurityToken(v string) *DescribeAppsRequest {
	s.SecurityToken = &v
	return s
}

type DescribeAppsResponseBody struct {
	// The returned app information. It is an array consisting of AppItem data.
	Apps *DescribeAppsResponseBodyApps `json:"Apps,omitempty" xml:"Apps,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ015
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAppsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAppsResponseBody) SetApps(v *DescribeAppsResponseBodyApps) *DescribeAppsResponseBody {
	s.Apps = v
	return s
}

func (s *DescribeAppsResponseBody) SetPageNumber(v int32) *DescribeAppsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAppsResponseBody) SetPageSize(v int32) *DescribeAppsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAppsResponseBody) SetRequestId(v string) *DescribeAppsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAppsResponseBody) SetTotalCount(v int32) *DescribeAppsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeAppsResponseBodyApps struct {
	AppItem []*DescribeAppsResponseBodyAppsAppItem `json:"AppItem,omitempty" xml:"AppItem,omitempty" type:"Repeated"`
}

func (s DescribeAppsResponseBodyApps) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppsResponseBodyApps) GoString() string {
	return s.String()
}

func (s *DescribeAppsResponseBodyApps) SetAppItem(v []*DescribeAppsResponseBodyAppsAppItem) *DescribeAppsResponseBodyApps {
	s.AppItem = v
	return s
}

type DescribeAppsResponseBodyAppsAppItem struct {
	// The ID of the app.
	//
	// example:
	//
	// 20112314518278
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the app.
	//
	// example:
	//
	// CreateApptest
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The description of the app.
	//
	// example:
	//
	// App test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s DescribeAppsResponseBodyAppsAppItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppsResponseBodyAppsAppItem) GoString() string {
	return s.String()
}

func (s *DescribeAppsResponseBodyAppsAppItem) SetAppId(v int64) *DescribeAppsResponseBodyAppsAppItem {
	s.AppId = &v
	return s
}

func (s *DescribeAppsResponseBodyAppsAppItem) SetAppName(v string) *DescribeAppsResponseBodyAppsAppItem {
	s.AppName = &v
	return s
}

func (s *DescribeAppsResponseBodyAppsAppItem) SetDescription(v string) *DescribeAppsResponseBodyAppsAppItem {
	s.Description = &v
	return s
}

type DescribeAppsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAppsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAppsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAppsResponse) SetHeaders(v map[string]*string) *DescribeAppsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAppsResponse) SetStatusCode(v int32) *DescribeAppsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAppsResponse) SetBody(v *DescribeAppsResponseBody) *DescribeAppsResponse {
	s.Body = v
	return s
}

type DescribeAppsByApiProductRequest struct {
	// The ID of the API product.
	//
	// This parameter is required.
	//
	// example:
	//
	// 117b7a64a8b3f064eaa4a47ac62aac5e
	ApiProductId *string `json:"ApiProductId,omitempty" xml:"ApiProductId,omitempty"`
	// The application name.
	//
	// example:
	//
	// testApp
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeAppsByApiProductRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppsByApiProductRequest) GoString() string {
	return s.String()
}

func (s *DescribeAppsByApiProductRequest) SetApiProductId(v string) *DescribeAppsByApiProductRequest {
	s.ApiProductId = &v
	return s
}

func (s *DescribeAppsByApiProductRequest) SetAppName(v string) *DescribeAppsByApiProductRequest {
	s.AppName = &v
	return s
}

func (s *DescribeAppsByApiProductRequest) SetPageNumber(v int32) *DescribeAppsByApiProductRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAppsByApiProductRequest) SetPageSize(v int32) *DescribeAppsByApiProductRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAppsByApiProductRequest) SetSecurityToken(v string) *DescribeAppsByApiProductRequest {
	s.SecurityToken = &v
	return s
}

type DescribeAppsByApiProductResponseBody struct {
	// The information about authorized applications.
	AuthorizedApps *DescribeAppsByApiProductResponseBodyAuthorizedApps `json:"AuthorizedApps,omitempty" xml:"AuthorizedApps,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// AC866798-62D3-52F4-8AB5-CA149A53984F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 4
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAppsByApiProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppsByApiProductResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAppsByApiProductResponseBody) SetAuthorizedApps(v *DescribeAppsByApiProductResponseBodyAuthorizedApps) *DescribeAppsByApiProductResponseBody {
	s.AuthorizedApps = v
	return s
}

func (s *DescribeAppsByApiProductResponseBody) SetPageNumber(v int32) *DescribeAppsByApiProductResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAppsByApiProductResponseBody) SetPageSize(v int32) *DescribeAppsByApiProductResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAppsByApiProductResponseBody) SetRequestId(v string) *DescribeAppsByApiProductResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAppsByApiProductResponseBody) SetTotalCount(v int32) *DescribeAppsByApiProductResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeAppsByApiProductResponseBodyAuthorizedApps struct {
	AuthorizedApp []*DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp `json:"AuthorizedApp,omitempty" xml:"AuthorizedApp,omitempty" type:"Repeated"`
}

func (s DescribeAppsByApiProductResponseBodyAuthorizedApps) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppsByApiProductResponseBodyAuthorizedApps) GoString() string {
	return s.String()
}

func (s *DescribeAppsByApiProductResponseBodyAuthorizedApps) SetAuthorizedApp(v []*DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp) *DescribeAppsByApiProductResponseBodyAuthorizedApps {
	s.AuthorizedApp = v
	return s
}

type DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp struct {
	// The application ID.
	//
	// example:
	//
	// 110982419
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The application name.
	//
	// example:
	//
	// APP_02580_DEV
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The expiration time of the authorization. The time is in GMT. An empty value indicates that the authorization does not expire.
	//
	// example:
	//
	// 2023-06-17T03:41:53Z
	AuthValidTime *string `json:"AuthValidTime,omitempty" xml:"AuthValidTime,omitempty"`
	// The time when the authorization was created. The time is in GMT.
	//
	// example:
	//
	// 2016-07-21T06:17:20Z
	AuthorizedTime *string `json:"AuthorizedTime,omitempty" xml:"AuthorizedTime,omitempty"`
	// The authorization description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The extended information.
	//
	// example:
	//
	// extra info
	Extend *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
}

func (s DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp) GoString() string {
	return s.String()
}

func (s *DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp) SetAppId(v int64) *DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp {
	s.AppId = &v
	return s
}

func (s *DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp) SetAppName(v string) *DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp {
	s.AppName = &v
	return s
}

func (s *DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp) SetAuthValidTime(v string) *DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp {
	s.AuthValidTime = &v
	return s
}

func (s *DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp) SetAuthorizedTime(v string) *DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp {
	s.AuthorizedTime = &v
	return s
}

func (s *DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp) SetDescription(v string) *DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp {
	s.Description = &v
	return s
}

func (s *DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp) SetExtend(v string) *DescribeAppsByApiProductResponseBodyAuthorizedAppsAuthorizedApp {
	s.Extend = &v
	return s
}

type DescribeAppsByApiProductResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAppsByApiProductResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAppsByApiProductResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppsByApiProductResponse) GoString() string {
	return s.String()
}

func (s *DescribeAppsByApiProductResponse) SetHeaders(v map[string]*string) *DescribeAppsByApiProductResponse {
	s.Headers = v
	return s
}

func (s *DescribeAppsByApiProductResponse) SetStatusCode(v int32) *DescribeAppsByApiProductResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAppsByApiProductResponse) SetBody(v *DescribeAppsByApiProductResponseBody) *DescribeAppsByApiProductResponse {
	s.Body = v
	return s
}

type DescribeAuthorizedApisRequest struct {
	// The application ID, which is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2386789
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeAuthorizedApisRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedApisRequest) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedApisRequest) SetAppId(v int64) *DescribeAuthorizedApisRequest {
	s.AppId = &v
	return s
}

func (s *DescribeAuthorizedApisRequest) SetPageNumber(v int32) *DescribeAuthorizedApisRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAuthorizedApisRequest) SetPageSize(v int32) *DescribeAuthorizedApisRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAuthorizedApisRequest) SetSecurityToken(v string) *DescribeAuthorizedApisRequest {
	s.SecurityToken = &v
	return s
}

type DescribeAuthorizedApisResponseBody struct {
	// The authorized API set.
	AuthorizedApis *DescribeAuthorizedApisResponseBodyAuthorizedApis `json:"AuthorizedApis,omitempty" xml:"AuthorizedApis,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// D6E46F10-F26C-4AA0-BB69-FE2743D9AE62
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 2
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAuthorizedApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedApisResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedApisResponseBody) SetAuthorizedApis(v *DescribeAuthorizedApisResponseBodyAuthorizedApis) *DescribeAuthorizedApisResponseBody {
	s.AuthorizedApis = v
	return s
}

func (s *DescribeAuthorizedApisResponseBody) SetPageNumber(v int32) *DescribeAuthorizedApisResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBody) SetPageSize(v int32) *DescribeAuthorizedApisResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBody) SetRequestId(v string) *DescribeAuthorizedApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBody) SetTotalCount(v int32) *DescribeAuthorizedApisResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeAuthorizedApisResponseBodyAuthorizedApis struct {
	AuthorizedApi []*DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi `json:"AuthorizedApi,omitempty" xml:"AuthorizedApi,omitempty" type:"Repeated"`
}

func (s DescribeAuthorizedApisResponseBodyAuthorizedApis) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedApisResponseBodyAuthorizedApis) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApis) SetAuthorizedApi(v []*DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) *DescribeAuthorizedApisResponseBodyAuthorizedApis {
	s.AuthorizedApi = v
	return s
}

type DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi struct {
	// The unique identifier of the API, which is automatically generated by the system.
	//
	// example:
	//
	// baacc592e63a4cb6a41920d9d3f91f38
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API
	//
	// example:
	//
	// AreaWeather
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The expiration time of the authorization in UTC.
	//
	// example:
	//
	// 2018-10-05T16:00:00Z
	AuthVaildTime *string `json:"AuthVaildTime,omitempty" xml:"AuthVaildTime,omitempty"`
	// The authorization source. Valid values:
	//
	// 	- **CONSOLE**
	//
	// 	- **API**
	//
	// example:
	//
	// CONSOLE
	AuthorizationSource *string `json:"AuthorizationSource,omitempty" xml:"AuthorizationSource,omitempty"`
	// The authorization time in UTC.
	//
	// example:
	//
	// 2016-07-21T06:17:20
	AuthorizedTime *string `json:"AuthorizedTime,omitempty" xml:"AuthorizedTime,omitempty"`
	// Authorization description
	//
	// example:
	//
	// Queries weather based on the region name
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// example:
	//
	// 523e8dc7bbe04613b5b1d726c2a7889d
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group.
	//
	// example:
	//
	// Weather
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The authorizer. Valid values:
	//
	// 	- **PROVIDER:*	- API owner
	//
	// 	- **CONSUMER:*	- API caller
	//
	// example:
	//
	// PROVIDER
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The region to which the API belongs.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**: the test environment
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetApiId(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.ApiId = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetApiName(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.ApiName = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetAuthVaildTime(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.AuthVaildTime = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetAuthorizationSource(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.AuthorizationSource = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetAuthorizedTime(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.AuthorizedTime = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetDescription(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.Description = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetGroupId(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.GroupId = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetGroupName(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.GroupName = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetOperator(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.Operator = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetRegionId(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.RegionId = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetStageName(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.StageName = &v
	return s
}

type DescribeAuthorizedApisResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAuthorizedApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAuthorizedApisResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedApisResponse) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedApisResponse) SetHeaders(v map[string]*string) *DescribeAuthorizedApisResponse {
	s.Headers = v
	return s
}

func (s *DescribeAuthorizedApisResponse) SetStatusCode(v int32) *DescribeAuthorizedApisResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAuthorizedApisResponse) SetBody(v *DescribeAuthorizedApisResponseBody) *DescribeAuthorizedApisResponse {
	s.Body = v
	return s
}

type DescribeAuthorizedAppsRequest struct {
	// The ID of the API. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// baacc592e63a4cb6a41920d9d3f91f38
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the app.
	//
	// example:
	//
	// 20112314518278
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the app.
	//
	// example:
	//
	// CreateApptest
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The Alibaba Cloud account of the app owner.
	//
	// example:
	//
	// 1546564
	AppOwnerId *int64 `json:"AppOwnerId,omitempty" xml:"AppOwnerId,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// example:
	//
	// 523e8dc7bbe04613b5b1d726c2a7889d
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeAuthorizedAppsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedAppsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedAppsRequest) SetApiId(v string) *DescribeAuthorizedAppsRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeAuthorizedAppsRequest) SetAppId(v int64) *DescribeAuthorizedAppsRequest {
	s.AppId = &v
	return s
}

func (s *DescribeAuthorizedAppsRequest) SetAppName(v string) *DescribeAuthorizedAppsRequest {
	s.AppName = &v
	return s
}

func (s *DescribeAuthorizedAppsRequest) SetAppOwnerId(v int64) *DescribeAuthorizedAppsRequest {
	s.AppOwnerId = &v
	return s
}

func (s *DescribeAuthorizedAppsRequest) SetGroupId(v string) *DescribeAuthorizedAppsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeAuthorizedAppsRequest) SetPageNumber(v int32) *DescribeAuthorizedAppsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAuthorizedAppsRequest) SetPageSize(v int32) *DescribeAuthorizedAppsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAuthorizedAppsRequest) SetSecurityToken(v string) *DescribeAuthorizedAppsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeAuthorizedAppsRequest) SetStageName(v string) *DescribeAuthorizedAppsRequest {
	s.StageName = &v
	return s
}

type DescribeAuthorizedAppsResponseBody struct {
	// The returned group set.
	AuthorizedApps *DescribeAuthorizedAppsResponseBodyAuthorizedApps `json:"AuthorizedApps,omitempty" xml:"AuthorizedApps,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// D6E46F10-F26C-4AA0-BB69-FE2743D9AE62
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 2
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAuthorizedAppsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedAppsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedAppsResponseBody) SetAuthorizedApps(v *DescribeAuthorizedAppsResponseBodyAuthorizedApps) *DescribeAuthorizedAppsResponseBody {
	s.AuthorizedApps = v
	return s
}

func (s *DescribeAuthorizedAppsResponseBody) SetPageNumber(v int32) *DescribeAuthorizedAppsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBody) SetPageSize(v int32) *DescribeAuthorizedAppsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBody) SetRequestId(v string) *DescribeAuthorizedAppsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBody) SetTotalCount(v int32) *DescribeAuthorizedAppsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeAuthorizedAppsResponseBodyAuthorizedApps struct {
	AuthorizedApp []*DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp `json:"AuthorizedApp,omitempty" xml:"AuthorizedApp,omitempty" type:"Repeated"`
}

func (s DescribeAuthorizedAppsResponseBodyAuthorizedApps) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedAppsResponseBodyAuthorizedApps) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedApps) SetAuthorizedApp(v []*DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) *DescribeAuthorizedAppsResponseBodyAuthorizedApps {
	s.AuthorizedApp = v
	return s
}

type DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp struct {
	AppDescription *string `json:"AppDescription,omitempty" xml:"AppDescription,omitempty"`
	// The ID, which is generated by the system and globally unique.
	//
	// example:
	//
	// 2386789
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the app.
	//
	// example:
	//
	// Weather
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The name of the app.
	//
	// example:
	//
	// 2018-10-05T16:00:00Z
	AuthVaildTime *string `json:"AuthVaildTime,omitempty" xml:"AuthVaildTime,omitempty"`
	// The authorization source. Valid values:
	//
	// 	- **CONSOLE**
	//
	// 	- **API**
	//
	// example:
	//
	// CONSOLE
	AuthorizationSource *string `json:"AuthorizationSource,omitempty" xml:"AuthorizationSource,omitempty"`
	// The authorization time (UTC).
	//
	// example:
	//
	// 2016-07-21T06:17:20Z
	AuthorizedTime *string `json:"AuthorizedTime,omitempty" xml:"AuthorizedTime,omitempty"`
	// The description of the authorization.
	//
	// example:
	//
	// Queries weather based on the region name
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The authorizer. Valid values:
	//
	// 	- **PROVIDER: API owner**
	//
	// 	- **CONSUMER: API caller**
	//
	// example:
	//
	// PROVIDER
	Operator   *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	StageAlias *string `json:"StageAlias,omitempty" xml:"StageAlias,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetAppDescription(v string) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.AppDescription = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetAppId(v int64) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.AppId = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetAppName(v string) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.AppName = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetAuthVaildTime(v string) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.AuthVaildTime = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetAuthorizationSource(v string) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.AuthorizationSource = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetAuthorizedTime(v string) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.AuthorizedTime = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetDescription(v string) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.Description = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetOperator(v string) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.Operator = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetStageAlias(v string) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.StageAlias = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetStageName(v string) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.StageName = &v
	return s
}

type DescribeAuthorizedAppsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAuthorizedAppsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAuthorizedAppsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedAppsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedAppsResponse) SetHeaders(v map[string]*string) *DescribeAuthorizedAppsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAuthorizedAppsResponse) SetStatusCode(v int32) *DescribeAuthorizedAppsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAuthorizedAppsResponse) SetBody(v *DescribeAuthorizedAppsResponseBody) *DescribeAuthorizedAppsResponse {
	s.Body = v
	return s
}

type DescribeBackendInfoRequest struct {
	// The ID of the backend service.
	//
	// example:
	//
	// 739b68751c0b4e899e04d0c92b6d0be7
	BackendId     *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeBackendInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoRequest) SetBackendId(v string) *DescribeBackendInfoRequest {
	s.BackendId = &v
	return s
}

func (s *DescribeBackendInfoRequest) SetSecurityToken(v string) *DescribeBackendInfoRequest {
	s.SecurityToken = &v
	return s
}

type DescribeBackendInfoResponseBody struct {
	// The information about the backend service.
	BackendInfo *DescribeBackendInfoResponseBodyBackendInfo `json:"BackendInfo,omitempty" xml:"BackendInfo,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 0AA90E87-3506-5AA6-AFFB-A4D53B4F6231
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBackendInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBody) SetBackendInfo(v *DescribeBackendInfoResponseBodyBackendInfo) *DescribeBackendInfoResponseBody {
	s.BackendInfo = v
	return s
}

func (s *DescribeBackendInfoResponseBody) SetRequestId(v string) *DescribeBackendInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfo struct {
	// The ID of the backend service.
	//
	// example:
	//
	// 6fc978bb63574146b766863dd7bdf661
	BackendId *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	// The configurations of the backend service in the environment.
	BackendModels []*DescribeBackendInfoResponseBodyBackendInfoBackendModels `json:"BackendModels,omitempty" xml:"BackendModels,omitempty" type:"Repeated"`
	// The name of the backend service.
	//
	// example:
	//
	// testoss2
	BackendName *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	// The type of the backend service.
	//
	// example:
	//
	// HTTP
	BackendType *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
	// The time when the backend service was created.
	//
	// example:
	//
	// 2021-11-22T11:10:46+08:00
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The description of the backend service.
	//
	// example:
	//
	// add
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The time when the backend service was modified.
	//
	// example:
	//
	// 2017-12-11T15:18:09+08:00
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfo) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfo) SetBackendId(v string) *DescribeBackendInfoResponseBodyBackendInfo {
	s.BackendId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfo) SetBackendModels(v []*DescribeBackendInfoResponseBodyBackendInfoBackendModels) *DescribeBackendInfoResponseBodyBackendInfo {
	s.BackendModels = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfo) SetBackendName(v string) *DescribeBackendInfoResponseBodyBackendInfo {
	s.BackendName = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfo) SetBackendType(v string) *DescribeBackendInfoResponseBodyBackendInfo {
	s.BackendType = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfo) SetCreatedTime(v string) *DescribeBackendInfoResponseBodyBackendInfo {
	s.CreatedTime = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfo) SetDescription(v string) *DescribeBackendInfoResponseBodyBackendInfo {
	s.Description = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfo) SetModifiedTime(v string) *DescribeBackendInfoResponseBodyBackendInfo {
	s.ModifiedTime = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModels struct {
	// The backend service configurations.
	BackendConfig *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig `json:"BackendConfig,omitempty" xml:"BackendConfig,omitempty" type:"Struct"`
	// The ID of the backend service in the environment.
	//
	// example:
	//
	// 5c4995d08e8b4954b0f326e8e4f2b97d
	BackendModelId *string `json:"BackendModelId,omitempty" xml:"BackendModelId,omitempty"`
	// The description of the backend service.
	//
	// example:
	//
	// testDvs 1
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The time when the backend service was created.
	//
	// example:
	//
	// 2021-12-20T03:22:03.000+0000
	GmtCreate *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// The time when the backend service was modified.
	//
	// example:
	//
	// 2021-12-20T03:22:03.000+0000
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// The ID of the environment.
	//
	// example:
	//
	// 6fc978bb63574146b766863dd7bdf661
	StageModeId *string `json:"StageModeId,omitempty" xml:"StageModeId,omitempty"`
	// The environment name.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModels) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModels) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModels) SetBackendConfig(v *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) *DescribeBackendInfoResponseBodyBackendInfoBackendModels {
	s.BackendConfig = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModels) SetBackendModelId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModels {
	s.BackendModelId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModels) SetDescription(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModels {
	s.Description = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModels) SetGmtCreate(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModels {
	s.GmtCreate = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModels) SetGmtModified(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModels {
	s.GmtModified = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModels) SetStageModeId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModels {
	s.StageModeId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModels) SetStageName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModels {
	s.StageName = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig struct {
	// The information about the backend service whose type is Service Discovery.
	DiscoveryConfig *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfig `json:"DiscoveryConfig,omitempty" xml:"DiscoveryConfig,omitempty" type:"Struct"`
	EdasConfig      *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig      `json:"EdasConfig,omitempty" xml:"EdasConfig,omitempty" type:"Struct"`
	// The information about the backend service whose type is EventBridge.
	EventBridgeConfig *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig `json:"EventBridgeConfig,omitempty" xml:"EventBridgeConfig,omitempty" type:"Struct"`
	// The information about the backend service whose type is Function Compute.
	FunctionComputeConfig *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig `json:"FunctionComputeConfig,omitempty" xml:"FunctionComputeConfig,omitempty" type:"Struct"`
	// The host of the backend service.
	//
	// example:
	//
	// www.host.com
	HttpTargetHostName *string `json:"HttpTargetHostName,omitempty" xml:"HttpTargetHostName,omitempty"`
	// The information about the backend service whose type is Mock.
	MockConfig *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig `json:"MockConfig,omitempty" xml:"MockConfig,omitempty" type:"Struct"`
	// The information about the backend service whose type is Object Storage Service (OSS).
	OssConfig *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig `json:"OssConfig,omitempty" xml:"OssConfig,omitempty" type:"Struct"`
	// The URL of the backend service.
	//
	// example:
	//
	// 10.0.0.1
	ServiceAddress *string `json:"ServiceAddress,omitempty" xml:"ServiceAddress,omitempty"`
	ServiceTimeout *int32  `json:"ServiceTimeout,omitempty" xml:"ServiceTimeout,omitempty"`
	// The type of the backend service.
	//
	// example:
	//
	// VPC
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The information about the virtual private cloud (VPC). This parameter is available only for backend services whose type is VPC.
	VpcConfig *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig `json:"VpcConfig,omitempty" xml:"VpcConfig,omitempty" type:"Struct"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetDiscoveryConfig(v *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfig) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.DiscoveryConfig = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetEdasConfig(v *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.EdasConfig = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetEventBridgeConfig(v *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.EventBridgeConfig = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetFunctionComputeConfig(v *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.FunctionComputeConfig = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetHttpTargetHostName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.HttpTargetHostName = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetMockConfig(v *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.MockConfig = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetOssConfig(v *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.OssConfig = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetServiceAddress(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.ServiceAddress = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetServiceTimeout(v int32) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.ServiceTimeout = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetType(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.Type = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetVpcConfig(v *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.VpcConfig = v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfig struct {
	// The Nacos configurations.
	NacosConfig *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig `json:"NacosConfig,omitempty" xml:"NacosConfig,omitempty" type:"Struct"`
	// The registry type.
	//
	// example:
	//
	// NACOS
	RcType          *string                                                                                             `json:"RcType,omitempty" xml:"RcType,omitempty"`
	ZookeeperConfig *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigZookeeperConfig `json:"ZookeeperConfig,omitempty" xml:"ZookeeperConfig,omitempty" type:"Struct"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfig) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfig) SetNacosConfig(v *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfig {
	s.NacosConfig = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfig) SetRcType(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfig {
	s.RcType = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfig) SetZookeeperConfig(v *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigZookeeperConfig) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfig {
	s.ZookeeperConfig = v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig struct {
	// The AccessKey of the RAM user that has the resource management permissions on Microservices Engine (MSE).
	//
	// example:
	//
	// A5FIDxxxxxx
	AccessKey *string `json:"AccessKey,omitempty" xml:"AccessKey,omitempty"`
	// The authentication method.
	//
	// example:
	//
	// PASSWORD
	AuthType *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	// The name of the cluster to which the microservice belongs.
	//
	// example:
	//
	// cluster1
	Clusters *string `json:"Clusters,omitempty" xml:"Clusters,omitempty"`
	// The name of the group to which the microservice that is registered with Nacos belongs.
	//
	// example:
	//
	// DEFAULT_GROUP
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The ID of the namespace where the microservice that is registered with Nacos resides.
	//
	// example:
	//
	// public
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The password.
	//
	// example:
	//
	// password
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The SecretKey of the RAM user that has the resource management permissions on MSE.
	//
	// example:
	//
	// dl5loxxxxxx
	SecretKey *string `json:"SecretKey,omitempty" xml:"SecretKey,omitempty"`
	// The Nacos service address.
	//
	// example:
	//
	// http://1xx.2xx.3xx.4xx:8848
	ServerAddress *string `json:"ServerAddress,omitempty" xml:"ServerAddress,omitempty"`
	// The microservice name.
	//
	// example:
	//
	// service-provider
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	// The username.
	//
	// example:
	//
	// username
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig) SetAccessKey(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig {
	s.AccessKey = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig) SetAuthType(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig {
	s.AuthType = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig) SetClusters(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig {
	s.Clusters = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig) SetGroupName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig {
	s.GroupName = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig) SetNamespace(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig {
	s.Namespace = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig) SetPassword(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig {
	s.Password = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig) SetSecretKey(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig {
	s.SecretKey = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig) SetServerAddress(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig {
	s.ServerAddress = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig) SetServiceName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig {
	s.ServiceName = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig) SetUserName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigNacosConfig {
	s.UserName = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigZookeeperConfig struct {
	ConnectString *string `json:"ConnectString,omitempty" xml:"ConnectString,omitempty"`
	Namespace     *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	ServiceName   *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigZookeeperConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigZookeeperConfig) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigZookeeperConfig) SetConnectString(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigZookeeperConfig {
	s.ConnectString = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigZookeeperConfig) SetNamespace(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigZookeeperConfig {
	s.Namespace = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigZookeeperConfig) SetServiceName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigDiscoveryConfigZookeeperConfig {
	s.ServiceName = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig struct {
	EdasAppId                 *string `json:"EdasAppId,omitempty" xml:"EdasAppId,omitempty"`
	MicroserviceNamespace     *string `json:"MicroserviceNamespace,omitempty" xml:"MicroserviceNamespace,omitempty"`
	MicroserviceNamespaceId   *string `json:"MicroserviceNamespaceId,omitempty" xml:"MicroserviceNamespaceId,omitempty"`
	MicroserviceNamespaceName *string `json:"MicroserviceNamespaceName,omitempty" xml:"MicroserviceNamespaceName,omitempty"`
	MseInstanceId             *string `json:"MseInstanceId,omitempty" xml:"MseInstanceId,omitempty"`
	RegistryType              *string `json:"RegistryType,omitempty" xml:"RegistryType,omitempty"`
	ServiceName               *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig) SetEdasAppId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig {
	s.EdasAppId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig) SetMicroserviceNamespace(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig {
	s.MicroserviceNamespace = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig) SetMicroserviceNamespaceId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig {
	s.MicroserviceNamespaceId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig) SetMicroserviceNamespaceName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig {
	s.MicroserviceNamespaceName = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig) SetMseInstanceId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig {
	s.MseInstanceId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig) SetRegistryType(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig {
	s.RegistryType = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig) SetServiceName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEdasConfig {
	s.ServiceName = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig struct {
	// The region ID of the event bus in EventBridge.
	//
	// example:
	//
	// cn-hangzhou
	EventBridgeRegionId *string `json:"EventBridgeRegionId,omitempty" xml:"EventBridgeRegionId,omitempty"`
	// The event bus.
	//
	// example:
	//
	// testBus
	EventBus *string `json:"EventBus,omitempty" xml:"EventBus,omitempty"`
	// The event source.
	//
	// example:
	//
	// dds_driver
	EventSource *string `json:"EventSource,omitempty" xml:"EventSource,omitempty"`
	// The ARN of the RAM role to be assumed by API Gateway to access EventBridge.
	//
	// example:
	//
	// acs:ram::1975133748561***:role/aliyunserviceroleforiotlogexport
	RoleArn *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig) SetEventBridgeRegionId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig {
	s.EventBridgeRegionId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig) SetEventBus(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig {
	s.EventBus = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig) SetEventSource(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig {
	s.EventSource = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig) SetRoleArn(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig {
	s.RoleArn = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig struct {
	// The root path of the Function Compute service.
	//
	// example:
	//
	// https://t*******.ap-*****.fcapp.run/
	FcBaseUrl *string `json:"FcBaseUrl,omitempty" xml:"FcBaseUrl,omitempty"`
	// The region ID of the Function Compute service.
	//
	// example:
	//
	// cn-hangzhou
	FcRegionId *string `json:"FcRegionId,omitempty" xml:"FcRegionId,omitempty"`
	// The type of the service in Function Compute.
	//
	// example:
	//
	// HttpTrigger
	FcType *string `json:"FcType,omitempty" xml:"FcType,omitempty"`
	// The function name that is defined in Function Compute.
	//
	// example:
	//
	// edge_function
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	// Indicates whether the backend service receives only the service path.
	//
	// example:
	//
	// false
	OnlyBusinessPath *bool `json:"OnlyBusinessPath,omitempty" xml:"OnlyBusinessPath,omitempty"`
	// The alias of the function.
	//
	// example:
	//
	// testQualifier
	Qualifier *string `json:"Qualifier,omitempty" xml:"Qualifier,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the RAM role that is assumed by API Gateway to access Function Compute.
	//
	// example:
	//
	// acs:ram::31985*:role/aliyunserviceroleforbastionhostpam
	RoleArn *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	// The service name that is defined in Function Compute.
	//
	// example:
	//
	// myservice
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) SetFcBaseUrl(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig {
	s.FcBaseUrl = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) SetFcRegionId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig {
	s.FcRegionId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) SetFcType(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig {
	s.FcType = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) SetFunctionName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig {
	s.FunctionName = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) SetOnlyBusinessPath(v bool) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig {
	s.OnlyBusinessPath = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) SetQualifier(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig {
	s.Qualifier = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) SetRoleArn(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig {
	s.RoleArn = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) SetServiceName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig {
	s.ServiceName = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig struct {
	// The header returned for service mocking.
	MockHeaders []*DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders `json:"MockHeaders,omitempty" xml:"MockHeaders,omitempty" type:"Repeated"`
	// The result returned for service mocking.
	MockResult *string `json:"MockResult,omitempty" xml:"MockResult,omitempty"`
	// The status code that is returned for service mocking.
	MockStatusCode *string `json:"MockStatusCode,omitempty" xml:"MockStatusCode,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig) SetMockHeaders(v []*DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig {
	s.MockHeaders = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig) SetMockResult(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig {
	s.MockResult = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig) SetMockStatusCode(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig {
	s.MockStatusCode = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders struct {
	// The name of the header parameter.
	HeaderName *string `json:"HeaderName,omitempty" xml:"HeaderName,omitempty"`
	// The value of the header parameter.
	HeaderValue *string `json:"HeaderValue,omitempty" xml:"HeaderValue,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders) SetHeaderName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders {
	s.HeaderName = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders) SetHeaderValue(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders {
	s.HeaderValue = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig struct {
	// The name of the OSS bucket.
	//
	// example:
	//
	// my_bucket
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	// The region ID of the OSS bucket.
	//
	// example:
	//
	// cn-hangzhou
	OssRegionId *string `json:"OssRegionId,omitempty" xml:"OssRegionId,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig) SetBucketName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig {
	s.BucketName = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig) SetOssRegionId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig {
	s.OssRegionId = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig struct {
	// The ID of the Elastic Compute Service (ECS) or Server Load Balancer (SLB) instance in the VPC.
	//
	// example:
	//
	// i-uf6iaale3gfef9t9cb41
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the VPC configuration.
	//
	// example:
	//
	// dypls-cn-beijing-slb-pre
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The port number that corresponds to the instance.
	//
	// example:
	//
	// 8080
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the VPC access authorization.
	//
	// example:
	//
	// 2zej3ehuzg9m77kvwnfpn
	VpcAccessId *string `json:"VpcAccessId,omitempty" xml:"VpcAccessId,omitempty"`
	// The ID of the VPC.
	//
	// example:
	//
	// vpc-wz9v96hqi6d14744sxqmx
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// Indicates whether HTTP or HTTPS is used.
	//
	// example:
	//
	// http
	VpcScheme *string `json:"VpcScheme,omitempty" xml:"VpcScheme,omitempty"`
	// The host of the backend service.
	VpcTargetHostName *string `json:"VpcTargetHostName,omitempty" xml:"VpcTargetHostName,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) SetInstanceId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig {
	s.InstanceId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) SetName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig {
	s.Name = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) SetPort(v int64) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig {
	s.Port = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) SetVpcAccessId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig {
	s.VpcAccessId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) SetVpcId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig {
	s.VpcId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) SetVpcScheme(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig {
	s.VpcScheme = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) SetVpcTargetHostName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig {
	s.VpcTargetHostName = &v
	return s
}

type DescribeBackendInfoResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBackendInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBackendInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponse) SetHeaders(v map[string]*string) *DescribeBackendInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackendInfoResponse) SetStatusCode(v int32) *DescribeBackendInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBackendInfoResponse) SetBody(v *DescribeBackendInfoResponseBody) *DescribeBackendInfoResponse {
	s.Body = v
	return s
}

type DescribeBackendListRequest struct {
	// The name of the backend service. You can use \\	- to perform fuzzy queries.
	//
	// example:
	//
	// test
	BackendName *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	// The type of the backend service.
	//
	// example:
	//
	// HTTP
	BackendType *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
	// The number of the current page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.
	//
	// example:
	//
	// 10
	PageSize      *int32                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string                          `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag           []*DescribeBackendListRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeBackendListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendListRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackendListRequest) SetBackendName(v string) *DescribeBackendListRequest {
	s.BackendName = &v
	return s
}

func (s *DescribeBackendListRequest) SetBackendType(v string) *DescribeBackendListRequest {
	s.BackendType = &v
	return s
}

func (s *DescribeBackendListRequest) SetPageNumber(v int32) *DescribeBackendListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeBackendListRequest) SetPageSize(v int32) *DescribeBackendListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeBackendListRequest) SetSecurityToken(v string) *DescribeBackendListRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeBackendListRequest) SetTag(v []*DescribeBackendListRequestTag) *DescribeBackendListRequest {
	s.Tag = v
	return s
}

type DescribeBackendListRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeBackendListRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendListRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeBackendListRequestTag) SetKey(v string) *DescribeBackendListRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeBackendListRequestTag) SetValue(v string) *DescribeBackendListRequestTag {
	s.Value = &v
	return s
}

type DescribeBackendListResponseBody struct {
	// The backend services.
	BackendInfoList []*DescribeBackendListResponseBodyBackendInfoList `json:"BackendInfoList,omitempty" xml:"BackendInfoList,omitempty" type:"Repeated"`
	// The number of the current page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 090A0DF9-9144-5236-8CBA-E18DE317722D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeBackendListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackendListResponseBody) SetBackendInfoList(v []*DescribeBackendListResponseBodyBackendInfoList) *DescribeBackendListResponseBody {
	s.BackendInfoList = v
	return s
}

func (s *DescribeBackendListResponseBody) SetPageNumber(v int32) *DescribeBackendListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeBackendListResponseBody) SetPageSize(v int32) *DescribeBackendListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeBackendListResponseBody) SetRequestId(v string) *DescribeBackendListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBackendListResponseBody) SetTotalCount(v int32) *DescribeBackendListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeBackendListResponseBodyBackendInfoList struct {
	// The ID of the backend service.
	//
	// example:
	//
	// 35bd31d32c9c425ebbe9330db9f8c375
	BackendId *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	// The name of the backend service.
	//
	// example:
	//
	// test
	BackendName *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	// The type of the backend service.
	//
	// example:
	//
	// HTTP
	BackendType *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
	// The time when the backend service was created.
	//
	// example:
	//
	// 2022-01-25T11:22:29Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The description of the backend service.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The time when the backend service was modified.
	//
	// example:
	//
	// 2022-01-25T11:22:29Z
	ModifiedTime *string                                               `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	Tags         []*DescribeBackendListResponseBodyBackendInfoListTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s DescribeBackendListResponseBodyBackendInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendListResponseBodyBackendInfoList) GoString() string {
	return s.String()
}

func (s *DescribeBackendListResponseBodyBackendInfoList) SetBackendId(v string) *DescribeBackendListResponseBodyBackendInfoList {
	s.BackendId = &v
	return s
}

func (s *DescribeBackendListResponseBodyBackendInfoList) SetBackendName(v string) *DescribeBackendListResponseBodyBackendInfoList {
	s.BackendName = &v
	return s
}

func (s *DescribeBackendListResponseBodyBackendInfoList) SetBackendType(v string) *DescribeBackendListResponseBodyBackendInfoList {
	s.BackendType = &v
	return s
}

func (s *DescribeBackendListResponseBodyBackendInfoList) SetCreatedTime(v string) *DescribeBackendListResponseBodyBackendInfoList {
	s.CreatedTime = &v
	return s
}

func (s *DescribeBackendListResponseBodyBackendInfoList) SetDescription(v string) *DescribeBackendListResponseBodyBackendInfoList {
	s.Description = &v
	return s
}

func (s *DescribeBackendListResponseBodyBackendInfoList) SetModifiedTime(v string) *DescribeBackendListResponseBodyBackendInfoList {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeBackendListResponseBodyBackendInfoList) SetTags(v []*DescribeBackendListResponseBodyBackendInfoListTags) *DescribeBackendListResponseBodyBackendInfoList {
	s.Tags = v
	return s
}

type DescribeBackendListResponseBodyBackendInfoListTags struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeBackendListResponseBodyBackendInfoListTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendListResponseBodyBackendInfoListTags) GoString() string {
	return s.String()
}

func (s *DescribeBackendListResponseBodyBackendInfoListTags) SetKey(v string) *DescribeBackendListResponseBodyBackendInfoListTags {
	s.Key = &v
	return s
}

func (s *DescribeBackendListResponseBodyBackendInfoListTags) SetValue(v string) *DescribeBackendListResponseBodyBackendInfoListTags {
	s.Value = &v
	return s
}

type DescribeBackendListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBackendListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBackendListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendListResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackendListResponse) SetHeaders(v map[string]*string) *DescribeBackendListResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackendListResponse) SetStatusCode(v int32) *DescribeBackendListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBackendListResponse) SetBody(v *DescribeBackendListResponseBody) *DescribeBackendListResponse {
	s.Body = v
	return s
}

type DescribeDatasetInfoRequest struct {
	// The ID of the dataset.
	//
	// This parameter is required.
	//
	// example:
	//
	// a25a6589b2584ff490e891cc********
	DatasetId     *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeDatasetInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeDatasetInfoRequest) SetDatasetId(v string) *DescribeDatasetInfoRequest {
	s.DatasetId = &v
	return s
}

func (s *DescribeDatasetInfoRequest) SetSecurityToken(v string) *DescribeDatasetInfoRequest {
	s.SecurityToken = &v
	return s
}

type DescribeDatasetInfoResponseBody struct {
	DatasetInfo *DescribeDatasetInfoResponseBodyDatasetInfo `json:"DatasetInfo,omitempty" xml:"DatasetInfo,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// A2C8F75E-EE84-5C64-960F-45C8********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDatasetInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDatasetInfoResponseBody) SetDatasetInfo(v *DescribeDatasetInfoResponseBodyDatasetInfo) *DescribeDatasetInfoResponseBody {
	s.DatasetInfo = v
	return s
}

func (s *DescribeDatasetInfoResponseBody) SetRequestId(v string) *DescribeDatasetInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDatasetInfoResponseBodyDatasetInfo struct {
	// The creation time (UTC) of the dataset.
	//
	// example:
	//
	// 2022-09-21T12:58:43Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The ID of the dataset.
	//
	// example:
	//
	// 62b91a790a693238********
	DatasetId *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// The name of the dataset.
	//
	// example:
	//
	// DatasetName
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// The type of the dataset. Valid values:
	//
	// 	- JWT_BLOCKING: a JSON Web Token (JWT) blacklist
	//
	// 	- IP_WHITELIST_CIDR : an IP address whitelist
	//
	// 	- PARAMETER_ACCESS : parameter-based access control
	//
	// example:
	//
	// JWT_BLOCKING
	DatasetType *string `json:"DatasetType,omitempty" xml:"DatasetType,omitempty"`
	// The last modification time (UTC) of the dataset.
	//
	// example:
	//
	// 2022-09-21T12:58:43Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
}

func (s DescribeDatasetInfoResponseBodyDatasetInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetInfoResponseBodyDatasetInfo) GoString() string {
	return s.String()
}

func (s *DescribeDatasetInfoResponseBodyDatasetInfo) SetCreatedTime(v string) *DescribeDatasetInfoResponseBodyDatasetInfo {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDatasetInfoResponseBodyDatasetInfo) SetDatasetId(v string) *DescribeDatasetInfoResponseBodyDatasetInfo {
	s.DatasetId = &v
	return s
}

func (s *DescribeDatasetInfoResponseBodyDatasetInfo) SetDatasetName(v string) *DescribeDatasetInfoResponseBodyDatasetInfo {
	s.DatasetName = &v
	return s
}

func (s *DescribeDatasetInfoResponseBodyDatasetInfo) SetDatasetType(v string) *DescribeDatasetInfoResponseBodyDatasetInfo {
	s.DatasetType = &v
	return s
}

func (s *DescribeDatasetInfoResponseBodyDatasetInfo) SetModifiedTime(v string) *DescribeDatasetInfoResponseBodyDatasetInfo {
	s.ModifiedTime = &v
	return s
}

type DescribeDatasetInfoResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDatasetInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDatasetInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeDatasetInfoResponse) SetHeaders(v map[string]*string) *DescribeDatasetInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeDatasetInfoResponse) SetStatusCode(v int32) *DescribeDatasetInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDatasetInfoResponse) SetBody(v *DescribeDatasetInfoResponseBody) *DescribeDatasetInfoResponse {
	s.Body = v
	return s
}

type DescribeDatasetItemInfoRequest struct {
	// The ID of the dataset.
	//
	// This parameter is required.
	//
	// example:
	//
	// 62b91a790a693238********
	DatasetId *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// The ID of the data entry.
	//
	// example:
	//
	// 5045****
	DatasetItemId *string `json:"DatasetItemId,omitempty" xml:"DatasetItemId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The value of the data entry.
	//
	// example:
	//
	// 106.43.XXX.XXX
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDatasetItemInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetItemInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeDatasetItemInfoRequest) SetDatasetId(v string) *DescribeDatasetItemInfoRequest {
	s.DatasetId = &v
	return s
}

func (s *DescribeDatasetItemInfoRequest) SetDatasetItemId(v string) *DescribeDatasetItemInfoRequest {
	s.DatasetItemId = &v
	return s
}

func (s *DescribeDatasetItemInfoRequest) SetSecurityToken(v string) *DescribeDatasetItemInfoRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeDatasetItemInfoRequest) SetValue(v string) *DescribeDatasetItemInfoRequest {
	s.Value = &v
	return s
}

type DescribeDatasetItemInfoResponseBody struct {
	// The Dataset information.
	DatasetItemInfo *DescribeDatasetItemInfoResponseBodyDatasetItemInfo `json:"DatasetItemInfo,omitempty" xml:"DatasetItemInfo,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 5BAFA85F-38E3-5D9E-9E32-4B09********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDatasetItemInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetItemInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDatasetItemInfoResponseBody) SetDatasetItemInfo(v *DescribeDatasetItemInfoResponseBodyDatasetItemInfo) *DescribeDatasetItemInfoResponseBody {
	s.DatasetItemInfo = v
	return s
}

func (s *DescribeDatasetItemInfoResponseBody) SetRequestId(v string) *DescribeDatasetItemInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDatasetItemInfoResponseBodyDatasetItemInfo struct {
	// The creation time (UTC) of the data entry.
	//
	// example:
	//
	// 2022-09-21T12:58:43Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The ID of the dataset.
	//
	// example:
	//
	// 626238665db4a5140eea3e40********
	DatasetId *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// The ID of the data entry.
	//
	// example:
	//
	// 5045****
	DatasetItemId *string `json:"DatasetItemId,omitempty" xml:"DatasetItemId,omitempty"`
	// The description of the data entry.
	//
	// example:
	//
	// Description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The time in UTC when the data entry expires. The time is in the **yyyy-MM-ddTHH:mm:ssZ*	- format. If this parameter is empty, the data entry does not expire.
	//
	// example:
	//
	// 2022-09-22T12:00:00Z
	ExpiredTime *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// The last modification time (UTC) of the data entry.
	//
	// example:
	//
	// 2022-09-21T12:58:43Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The value of the data entry.
	//
	// example:
	//
	// 106.43.XXX.XXX
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDatasetItemInfoResponseBodyDatasetItemInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetItemInfoResponseBodyDatasetItemInfo) GoString() string {
	return s.String()
}

func (s *DescribeDatasetItemInfoResponseBodyDatasetItemInfo) SetCreatedTime(v string) *DescribeDatasetItemInfoResponseBodyDatasetItemInfo {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDatasetItemInfoResponseBodyDatasetItemInfo) SetDatasetId(v string) *DescribeDatasetItemInfoResponseBodyDatasetItemInfo {
	s.DatasetId = &v
	return s
}

func (s *DescribeDatasetItemInfoResponseBodyDatasetItemInfo) SetDatasetItemId(v string) *DescribeDatasetItemInfoResponseBodyDatasetItemInfo {
	s.DatasetItemId = &v
	return s
}

func (s *DescribeDatasetItemInfoResponseBodyDatasetItemInfo) SetDescription(v string) *DescribeDatasetItemInfoResponseBodyDatasetItemInfo {
	s.Description = &v
	return s
}

func (s *DescribeDatasetItemInfoResponseBodyDatasetItemInfo) SetExpiredTime(v string) *DescribeDatasetItemInfoResponseBodyDatasetItemInfo {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDatasetItemInfoResponseBodyDatasetItemInfo) SetModifiedTime(v string) *DescribeDatasetItemInfoResponseBodyDatasetItemInfo {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeDatasetItemInfoResponseBodyDatasetItemInfo) SetValue(v string) *DescribeDatasetItemInfoResponseBodyDatasetItemInfo {
	s.Value = &v
	return s
}

type DescribeDatasetItemInfoResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDatasetItemInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDatasetItemInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetItemInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeDatasetItemInfoResponse) SetHeaders(v map[string]*string) *DescribeDatasetItemInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeDatasetItemInfoResponse) SetStatusCode(v int32) *DescribeDatasetItemInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDatasetItemInfoResponse) SetBody(v *DescribeDatasetItemInfoResponseBody) *DescribeDatasetItemInfoResponse {
	s.Body = v
	return s
}

type DescribeDatasetItemListRequest struct {
	// The ID of the dataset.
	//
	// This parameter is required.
	//
	// example:
	//
	// 602e1f6b3543200eaab0a89e********
	DatasetId *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// The ID of the data entry. You can enter multiple IDs. Separate them with commas (,).
	//
	// example:
	//
	// 5045****
	DatasetItemIds *string `json:"DatasetItemIds,omitempty" xml:"DatasetItemIds,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeDatasetItemListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetItemListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDatasetItemListRequest) SetDatasetId(v string) *DescribeDatasetItemListRequest {
	s.DatasetId = &v
	return s
}

func (s *DescribeDatasetItemListRequest) SetDatasetItemIds(v string) *DescribeDatasetItemListRequest {
	s.DatasetItemIds = &v
	return s
}

func (s *DescribeDatasetItemListRequest) SetPageNumber(v int32) *DescribeDatasetItemListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDatasetItemListRequest) SetPageSize(v int32) *DescribeDatasetItemListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDatasetItemListRequest) SetSecurityToken(v string) *DescribeDatasetItemListRequest {
	s.SecurityToken = &v
	return s
}

type DescribeDatasetItemListResponseBody struct {
	// The Dataset information.
	DatasetItemInfoList []*DescribeDatasetItemListResponseBodyDatasetItemInfoList `json:"DatasetItemInfoList,omitempty" xml:"DatasetItemInfoList,omitempty" type:"Repeated"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// C6E9C6E4-608B-5C0F-9783-E288********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 20
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDatasetItemListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetItemListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDatasetItemListResponseBody) SetDatasetItemInfoList(v []*DescribeDatasetItemListResponseBodyDatasetItemInfoList) *DescribeDatasetItemListResponseBody {
	s.DatasetItemInfoList = v
	return s
}

func (s *DescribeDatasetItemListResponseBody) SetPageNumber(v int32) *DescribeDatasetItemListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDatasetItemListResponseBody) SetPageSize(v int32) *DescribeDatasetItemListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDatasetItemListResponseBody) SetRequestId(v string) *DescribeDatasetItemListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDatasetItemListResponseBody) SetTotalCount(v int32) *DescribeDatasetItemListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDatasetItemListResponseBodyDatasetItemInfoList struct {
	// The time when the data entry was created.
	//
	// example:
	//
	// 2022-09-21T12:58:43Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The ID of the dataset.
	//
	// example:
	//
	// 4add6a61804e47858266883e********
	DatasetId *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// The ID of the data entry.
	//
	// example:
	//
	// 5045****
	DatasetItemId *string `json:"DatasetItemId,omitempty" xml:"DatasetItemId,omitempty"`
	// The description of the data entry.
	//
	// example:
	//
	// Description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The time in UTC when the data entry expires. The time is in the **yyyy-MM-ddTHH:mm:ssZ*	- format. If this parameter is empty, the data entry does not expire.
	//
	// example:
	//
	// 2022-09-22T12:00:00Z
	ExpiredTime *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// The last modification time (UTC) of the data entry.
	//
	// example:
	//
	// 2022-09-21T12:58:43Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The value of the data entry.
	//
	// example:
	//
	// 106.43.XXX.XXX
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDatasetItemListResponseBodyDatasetItemInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetItemListResponseBodyDatasetItemInfoList) GoString() string {
	return s.String()
}

func (s *DescribeDatasetItemListResponseBodyDatasetItemInfoList) SetCreatedTime(v string) *DescribeDatasetItemListResponseBodyDatasetItemInfoList {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDatasetItemListResponseBodyDatasetItemInfoList) SetDatasetId(v string) *DescribeDatasetItemListResponseBodyDatasetItemInfoList {
	s.DatasetId = &v
	return s
}

func (s *DescribeDatasetItemListResponseBodyDatasetItemInfoList) SetDatasetItemId(v string) *DescribeDatasetItemListResponseBodyDatasetItemInfoList {
	s.DatasetItemId = &v
	return s
}

func (s *DescribeDatasetItemListResponseBodyDatasetItemInfoList) SetDescription(v string) *DescribeDatasetItemListResponseBodyDatasetItemInfoList {
	s.Description = &v
	return s
}

func (s *DescribeDatasetItemListResponseBodyDatasetItemInfoList) SetExpiredTime(v string) *DescribeDatasetItemListResponseBodyDatasetItemInfoList {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDatasetItemListResponseBodyDatasetItemInfoList) SetModifiedTime(v string) *DescribeDatasetItemListResponseBodyDatasetItemInfoList {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeDatasetItemListResponseBodyDatasetItemInfoList) SetValue(v string) *DescribeDatasetItemListResponseBodyDatasetItemInfoList {
	s.Value = &v
	return s
}

type DescribeDatasetItemListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDatasetItemListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDatasetItemListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetItemListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDatasetItemListResponse) SetHeaders(v map[string]*string) *DescribeDatasetItemListResponse {
	s.Headers = v
	return s
}

func (s *DescribeDatasetItemListResponse) SetStatusCode(v int32) *DescribeDatasetItemListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDatasetItemListResponse) SetBody(v *DescribeDatasetItemListResponseBody) *DescribeDatasetItemListResponse {
	s.Body = v
	return s
}

type DescribeDatasetListRequest struct {
	// The IDs of the datasets.
	//
	// example:
	//
	// 4add6a61804e47858266883e********
	DatasetIds *string `json:"DatasetIds,omitempty" xml:"DatasetIds,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The tag of objects that match the rule. You can specify multiple tags.
	Tag []*DescribeDatasetListRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeDatasetListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDatasetListRequest) SetDatasetIds(v string) *DescribeDatasetListRequest {
	s.DatasetIds = &v
	return s
}

func (s *DescribeDatasetListRequest) SetPageNumber(v int32) *DescribeDatasetListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDatasetListRequest) SetPageSize(v int32) *DescribeDatasetListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDatasetListRequest) SetSecurityToken(v string) *DescribeDatasetListRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeDatasetListRequest) SetTag(v []*DescribeDatasetListRequestTag) *DescribeDatasetListRequest {
	s.Tag = v
	return s
}

type DescribeDatasetListRequestTag struct {
	// The tag key.
	//
	// example:
	//
	// env
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDatasetListRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetListRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDatasetListRequestTag) SetKey(v string) *DescribeDatasetListRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDatasetListRequestTag) SetValue(v string) *DescribeDatasetListRequestTag {
	s.Value = &v
	return s
}

type DescribeDatasetListResponseBody struct {
	// The returned dataset information. It is an array consisting of datasetinfo.
	DatasetInfoList []*DescribeDatasetListResponseBodyDatasetInfoList `json:"DatasetInfoList,omitempty" xml:"DatasetInfoList,omitempty" type:"Repeated"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// D403C6E6-21B3-5B78-82DA-E3B6********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 20
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDatasetListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDatasetListResponseBody) SetDatasetInfoList(v []*DescribeDatasetListResponseBodyDatasetInfoList) *DescribeDatasetListResponseBody {
	s.DatasetInfoList = v
	return s
}

func (s *DescribeDatasetListResponseBody) SetPageNumber(v int32) *DescribeDatasetListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDatasetListResponseBody) SetPageSize(v int32) *DescribeDatasetListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDatasetListResponseBody) SetRequestId(v string) *DescribeDatasetListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDatasetListResponseBody) SetTotalCount(v int32) *DescribeDatasetListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDatasetListResponseBodyDatasetInfoList struct {
	// The time when the dataset was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-09-21T12:58:43Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The dataset ID.
	//
	// example:
	//
	// 6304ce6b4ae6453f********
	DatasetId *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// The dataset name.
	//
	// example:
	//
	// DatasetName
	DatasetName *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	// The dataset type. Valid values:
	//
	// 	- JWT_BLOCKING : a JSON Web Token (JWT) blacklist
	//
	// 	- IP_WHITELIST_CIDR : an IP address whitelist
	//
	// 	- PARAMETER_ACCESS: a list of parameters for parameter-based access control
	//
	// example:
	//
	// IP_WHITELIST_CIDR
	DatasetType *string `json:"DatasetType,omitempty" xml:"DatasetType,omitempty"`
	// The time when the dataset was last modified. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-09-21T12:58:43Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The tags of the dataset.
	Tags []*DescribeDatasetListResponseBodyDatasetInfoListTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s DescribeDatasetListResponseBodyDatasetInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetListResponseBodyDatasetInfoList) GoString() string {
	return s.String()
}

func (s *DescribeDatasetListResponseBodyDatasetInfoList) SetCreatedTime(v string) *DescribeDatasetListResponseBodyDatasetInfoList {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDatasetListResponseBodyDatasetInfoList) SetDatasetId(v string) *DescribeDatasetListResponseBodyDatasetInfoList {
	s.DatasetId = &v
	return s
}

func (s *DescribeDatasetListResponseBodyDatasetInfoList) SetDatasetName(v string) *DescribeDatasetListResponseBodyDatasetInfoList {
	s.DatasetName = &v
	return s
}

func (s *DescribeDatasetListResponseBodyDatasetInfoList) SetDatasetType(v string) *DescribeDatasetListResponseBodyDatasetInfoList {
	s.DatasetType = &v
	return s
}

func (s *DescribeDatasetListResponseBodyDatasetInfoList) SetModifiedTime(v string) *DescribeDatasetListResponseBodyDatasetInfoList {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeDatasetListResponseBodyDatasetInfoList) SetTags(v []*DescribeDatasetListResponseBodyDatasetInfoListTags) *DescribeDatasetListResponseBodyDatasetInfoList {
	s.Tags = v
	return s
}

type DescribeDatasetListResponseBodyDatasetInfoListTags struct {
	// The tag key.
	//
	// example:
	//
	// ENV
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// 123
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDatasetListResponseBodyDatasetInfoListTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetListResponseBodyDatasetInfoListTags) GoString() string {
	return s.String()
}

func (s *DescribeDatasetListResponseBodyDatasetInfoListTags) SetKey(v string) *DescribeDatasetListResponseBodyDatasetInfoListTags {
	s.Key = &v
	return s
}

func (s *DescribeDatasetListResponseBodyDatasetInfoListTags) SetValue(v string) *DescribeDatasetListResponseBodyDatasetInfoListTags {
	s.Value = &v
	return s
}

type DescribeDatasetListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDatasetListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDatasetListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDatasetListResponse) SetHeaders(v map[string]*string) *DescribeDatasetListResponse {
	s.Headers = v
	return s
}

func (s *DescribeDatasetListResponse) SetStatusCode(v int32) *DescribeDatasetListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDatasetListResponse) SetBody(v *DescribeDatasetListResponseBody) *DescribeDatasetListResponse {
	s.Body = v
	return s
}

type DescribeDeployApiTaskRequest struct {
	// The task ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 51524fb8f12846d694d0a1de9a0cf274
	OperationUid  *string `json:"OperationUid,omitempty" xml:"OperationUid,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeDeployApiTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployApiTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeDeployApiTaskRequest) SetOperationUid(v string) *DescribeDeployApiTaskRequest {
	s.OperationUid = &v
	return s
}

func (s *DescribeDeployApiTaskRequest) SetSecurityToken(v string) *DescribeDeployApiTaskRequest {
	s.SecurityToken = &v
	return s
}

type DescribeDeployApiTaskResponseBody struct {
	// The returned result.
	DeployedResults *DescribeDeployApiTaskResponseBodyDeployedResults `json:"DeployedResults,omitempty" xml:"DeployedResults,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// CA4B3261-F14A-5E33-8608-F75A1DF27AD4
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDeployApiTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployApiTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDeployApiTaskResponseBody) SetDeployedResults(v *DescribeDeployApiTaskResponseBodyDeployedResults) *DescribeDeployApiTaskResponseBody {
	s.DeployedResults = v
	return s
}

func (s *DescribeDeployApiTaskResponseBody) SetRequestId(v string) *DescribeDeployApiTaskResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDeployApiTaskResponseBodyDeployedResults struct {
	DeployedResult []*DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult `json:"DeployedResult,omitempty" xml:"DeployedResult,omitempty" type:"Repeated"`
}

func (s DescribeDeployApiTaskResponseBodyDeployedResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployApiTaskResponseBodyDeployedResults) GoString() string {
	return s.String()
}

func (s *DescribeDeployApiTaskResponseBodyDeployedResults) SetDeployedResult(v []*DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult) *DescribeDeployApiTaskResponseBodyDeployedResults {
	s.DeployedResult = v
	return s
}

type DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult struct {
	// The ID of the API.
	//
	// example:
	//
	// 0433c1cd84724923b7a4f9ca1cfc249c
	ApiUid *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	// The deployment status of the API.
	//
	// example:
	//
	// OVER
	DeployedStatus *string `json:"DeployedStatus,omitempty" xml:"DeployedStatus,omitempty"`
	// The error message.
	//
	// example:
	//
	// Success. Request Success.
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// e8da6f6346184da9a30d0dc1888b1f3b
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The runtime environment of the API. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult) GoString() string {
	return s.String()
}

func (s *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult) SetApiUid(v string) *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult {
	s.ApiUid = &v
	return s
}

func (s *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult) SetDeployedStatus(v string) *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult {
	s.DeployedStatus = &v
	return s
}

func (s *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult) SetErrorMsg(v string) *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult) SetGroupId(v string) *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult {
	s.GroupId = &v
	return s
}

func (s *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult) SetStageName(v string) *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult {
	s.StageName = &v
	return s
}

type DescribeDeployApiTaskResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDeployApiTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDeployApiTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployApiTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeDeployApiTaskResponse) SetHeaders(v map[string]*string) *DescribeDeployApiTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeDeployApiTaskResponse) SetStatusCode(v int32) *DescribeDeployApiTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDeployApiTaskResponse) SetBody(v *DescribeDeployApiTaskResponseBody) *DescribeDeployApiTaskResponse {
	s.Body = v
	return s
}

type DescribeDeployedApiRequest struct {
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// ab7c95a01a7e42f28718f34497bbf47c
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// example:
	//
	// 81750604ccff48c48f34d6c0165e09db
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **PRE: the pre-release environment**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeDeployedApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiRequest) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiRequest) SetApiId(v string) *DescribeDeployedApiRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeDeployedApiRequest) SetGroupId(v string) *DescribeDeployedApiRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeDeployedApiRequest) SetSecurityToken(v string) *DescribeDeployedApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeDeployedApiRequest) SetStageName(v string) *DescribeDeployedApiRequest {
	s.StageName = &v
	return s
}

type DescribeDeployedApiResponseBody struct {
	// The signature method used by the client. Valid values:
	//
	// 	- HmacSHA256
	//
	// 	- HmacSHA1,HmacSHA256
	//
	// example:
	//
	// HmacSHA256
	AllowSignatureMethod *string `json:"AllowSignatureMethod,omitempty" xml:"AllowSignatureMethod,omitempty"`
	// The ID of the API.
	//
	// example:
	//
	// 4eed13a57d4e42fbb51316be8a5329ff
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API
	//
	// example:
	//
	// weather
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The security authentication method of the API. Valid values:
	//
	// 	- **APP: Only authorized applications can call the API.**
	//
	// 	- **ANONYMOUS: The API can be anonymously called. In this mode, you must take note of the following rules:**
	//
	//     	- All users who have obtained the API service information can call this API. API Gateway does not authenticate callers and cannot set user-specific throttling policies. If you make this API public, set API-specific throttling policies.
	//
	// example:
	//
	// APP
	AuthType *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	// The constant parameters.
	ConstantParameters *DescribeDeployedApiResponseBodyConstantParameters `json:"ConstantParameters,omitempty" xml:"ConstantParameters,omitempty" type:"Struct"`
	// The custom system parameters.
	CustomSystemParameters *DescribeDeployedApiResponseBodyCustomSystemParameters `json:"CustomSystemParameters,omitempty" xml:"CustomSystemParameters,omitempty" type:"Struct"`
	// The deployment time. Format: yyyy-mm-ddhh:mm:ss.
	//
	// example:
	//
	// 2022-07-25T17:47:51Z
	DeployedTime *string `json:"DeployedTime,omitempty" xml:"DeployedTime,omitempty"`
	// The description.
	//
	// example:
	//
	// Api description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 	- Specifies whether to set DisableInternet to **true*	- to limit API calls to within the VPC.
	//
	// 	- If you set DisableInternet to **false**, the limit is lifted.
	//
	// >  If you do not set this parameter, the original value is not modified.
	//
	// example:
	//
	// true
	DisableInternet *bool `json:"DisableInternet,omitempty" xml:"DisableInternet,omitempty"`
	// The sample error codes returned by the backend service.
	//
	// For more information, see [ErrorCodeSample](https://help.aliyun.com/document_detail/44392.html).
	ErrorCodeSamples *DescribeDeployedApiResponseBodyErrorCodeSamples `json:"ErrorCodeSamples,omitempty" xml:"ErrorCodeSamples,omitempty" type:"Struct"`
	// The sample error response from the backend service.
	//
	// example:
	//
	// {"errorCode":"fail","errorMessage":"param invalid"}
	FailResultSample *string `json:"FailResultSample,omitempty" xml:"FailResultSample,omitempty"`
	// 	- Specifies whether to set **ForceNonceCheck*	- to **true*	- to force the check of X-Ca-Nonce during the request. This is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
	//
	// 	- If you set **ForceNonceCheck*	- to **false**, the check is not performed. The default value is false when you create an API.
	//
	// example:
	//
	// true
	ForceNonceCheck *bool `json:"ForceNonceCheck,omitempty" xml:"ForceNonceCheck,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// bc77f5b49c974437a9912ea3755cd834
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group.
	//
	// example:
	//
	// Weather
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The configuration items of the third-party OpenID Connect authentication method.
	OpenIdConnectConfig *DescribeDeployedApiResponseBodyOpenIdConnectConfig `json:"OpenIdConnectConfig,omitempty" xml:"OpenIdConnectConfig,omitempty" type:"Struct"`
	// The region to which the API group belongs.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Configuration items of API requests sent by the consumer to API Gateway.
	//
	// For more information, see [RequestConfig](https://help.aliyun.com/document_detail/43985.html).
	RequestConfig *DescribeDeployedApiResponseBodyRequestConfig `json:"RequestConfig,omitempty" xml:"RequestConfig,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// EF924FE4-2EDD-4CD3-89EC-34E4708574E7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The parameters of API requests sent by the consumer to API Gateway.
	//
	// For more information, see [RequestParameter](https://help.aliyun.com/document_detail/43986.html).
	RequestParameters *DescribeDeployedApiResponseBodyRequestParameters `json:"RequestParameters,omitempty" xml:"RequestParameters,omitempty" type:"Struct"`
	// The return description of the API.
	//
	// example:
	//
	// {}
	ResultBodyModel *string `json:"ResultBodyModel,omitempty" xml:"ResultBodyModel,omitempty"`
	// The return description of the API.
	ResultDescriptions *DescribeDeployedApiResponseBodyResultDescriptions `json:"ResultDescriptions,omitempty" xml:"ResultDescriptions,omitempty" type:"Struct"`
	// The sample response from the backend service.
	//
	// example:
	//
	// {code: 200, message:\\"success\\", data: \\"\\"}
	ResultSample *string `json:"ResultSample,omitempty" xml:"ResultSample,omitempty"`
	// The format of the response from the backend service. Valid values: JSON, TEXT, BINARY, XML, and HTML. Default value: JSON.
	//
	// example:
	//
	// HTML
	ResultType *string `json:"ResultType,omitempty" xml:"ResultType,omitempty"`
	// The configuration items of API requests sent by API Gateway to the backend service.
	//
	// For more information, see [ServiceConfig](https://help.aliyun.com/document_detail/43987.html).
	ServiceConfig *DescribeDeployedApiResponseBodyServiceConfig `json:"ServiceConfig,omitempty" xml:"ServiceConfig,omitempty" type:"Struct"`
	// The parameters of API requests sent by API Gateway to the backend service.
	//
	// For more information, see [ServiceParameter](https://help.aliyun.com/document_detail/43988.html).
	ServiceParameters *DescribeDeployedApiResponseBodyServiceParameters `json:"ServiceParameters,omitempty" xml:"ServiceParameters,omitempty" type:"Struct"`
	// The mappings between parameters of requests sent by the consumer to API Gateway and parameters of requests sent by API Gateway to the backend service.
	//
	// For more information, see [ServiceParameterMap](https://help.aliyun.com/document_detail/43989.html).
	ServiceParametersMap *DescribeDeployedApiResponseBodyServiceParametersMap `json:"ServiceParametersMap,omitempty" xml:"ServiceParametersMap,omitempty" type:"Struct"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **PRE: the pre-release environment**
	//
	// 	- **TEST**
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// System parameters
	SystemParameters *DescribeDeployedApiResponseBodySystemParameters `json:"SystemParameters,omitempty" xml:"SystemParameters,omitempty" type:"Struct"`
	// Specifies whether to make the API public. Valid values:
	//
	// 	- **PUBLIC**: Make the API public. If you set this parameter to PUBLIC, this API is displayed on the APIs page for all users after the API is published to the production environment.**
	//
	// 	- **PRIVATE**: Make the API private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.
	//
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribeDeployedApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBody) SetAllowSignatureMethod(v string) *DescribeDeployedApiResponseBody {
	s.AllowSignatureMethod = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetApiId(v string) *DescribeDeployedApiResponseBody {
	s.ApiId = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetApiName(v string) *DescribeDeployedApiResponseBody {
	s.ApiName = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetAuthType(v string) *DescribeDeployedApiResponseBody {
	s.AuthType = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetConstantParameters(v *DescribeDeployedApiResponseBodyConstantParameters) *DescribeDeployedApiResponseBody {
	s.ConstantParameters = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetCustomSystemParameters(v *DescribeDeployedApiResponseBodyCustomSystemParameters) *DescribeDeployedApiResponseBody {
	s.CustomSystemParameters = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetDeployedTime(v string) *DescribeDeployedApiResponseBody {
	s.DeployedTime = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetDescription(v string) *DescribeDeployedApiResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetDisableInternet(v bool) *DescribeDeployedApiResponseBody {
	s.DisableInternet = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetErrorCodeSamples(v *DescribeDeployedApiResponseBodyErrorCodeSamples) *DescribeDeployedApiResponseBody {
	s.ErrorCodeSamples = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetFailResultSample(v string) *DescribeDeployedApiResponseBody {
	s.FailResultSample = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetForceNonceCheck(v bool) *DescribeDeployedApiResponseBody {
	s.ForceNonceCheck = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetGroupId(v string) *DescribeDeployedApiResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetGroupName(v string) *DescribeDeployedApiResponseBody {
	s.GroupName = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetOpenIdConnectConfig(v *DescribeDeployedApiResponseBodyOpenIdConnectConfig) *DescribeDeployedApiResponseBody {
	s.OpenIdConnectConfig = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetRegionId(v string) *DescribeDeployedApiResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetRequestConfig(v *DescribeDeployedApiResponseBodyRequestConfig) *DescribeDeployedApiResponseBody {
	s.RequestConfig = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetRequestId(v string) *DescribeDeployedApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetRequestParameters(v *DescribeDeployedApiResponseBodyRequestParameters) *DescribeDeployedApiResponseBody {
	s.RequestParameters = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetResultBodyModel(v string) *DescribeDeployedApiResponseBody {
	s.ResultBodyModel = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetResultDescriptions(v *DescribeDeployedApiResponseBodyResultDescriptions) *DescribeDeployedApiResponseBody {
	s.ResultDescriptions = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetResultSample(v string) *DescribeDeployedApiResponseBody {
	s.ResultSample = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetResultType(v string) *DescribeDeployedApiResponseBody {
	s.ResultType = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetServiceConfig(v *DescribeDeployedApiResponseBodyServiceConfig) *DescribeDeployedApiResponseBody {
	s.ServiceConfig = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetServiceParameters(v *DescribeDeployedApiResponseBodyServiceParameters) *DescribeDeployedApiResponseBody {
	s.ServiceParameters = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetServiceParametersMap(v *DescribeDeployedApiResponseBodyServiceParametersMap) *DescribeDeployedApiResponseBody {
	s.ServiceParametersMap = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetStageName(v string) *DescribeDeployedApiResponseBody {
	s.StageName = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetSystemParameters(v *DescribeDeployedApiResponseBodySystemParameters) *DescribeDeployedApiResponseBody {
	s.SystemParameters = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetVisibility(v string) *DescribeDeployedApiResponseBody {
	s.Visibility = &v
	return s
}

type DescribeDeployedApiResponseBodyConstantParameters struct {
	ConstantParameter []*DescribeDeployedApiResponseBodyConstantParametersConstantParameter `json:"ConstantParameter,omitempty" xml:"ConstantParameter,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodyConstantParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyConstantParameters) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyConstantParameters) SetConstantParameter(v []*DescribeDeployedApiResponseBodyConstantParametersConstantParameter) *DescribeDeployedApiResponseBodyConstantParameters {
	s.ConstantParameter = v
	return s
}

type DescribeDeployedApiResponseBodyConstantParametersConstantParameter struct {
	// The constant value.
	//
	// example:
	//
	// constance
	ConstantValue *string `json:"ConstantValue,omitempty" xml:"ConstantValue,omitempty"`
	// The description.
	//
	// example:
	//
	// 123
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	//
	// example:
	//
	// HEAD
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the backend service parameter.
	//
	// example:
	//
	// constance
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeDeployedApiResponseBodyConstantParametersConstantParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyConstantParametersConstantParameter) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyConstantParametersConstantParameter) SetConstantValue(v string) *DescribeDeployedApiResponseBodyConstantParametersConstantParameter {
	s.ConstantValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyConstantParametersConstantParameter) SetDescription(v string) *DescribeDeployedApiResponseBodyConstantParametersConstantParameter {
	s.Description = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyConstantParametersConstantParameter) SetLocation(v string) *DescribeDeployedApiResponseBodyConstantParametersConstantParameter {
	s.Location = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyConstantParametersConstantParameter) SetServiceParameterName(v string) *DescribeDeployedApiResponseBodyConstantParametersConstantParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeDeployedApiResponseBodyCustomSystemParameters struct {
	CustomSystemParameter []*DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter `json:"CustomSystemParameter,omitempty" xml:"CustomSystemParameter,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodyCustomSystemParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyCustomSystemParameters) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyCustomSystemParameters) SetCustomSystemParameter(v []*DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter) *DescribeDeployedApiResponseBodyCustomSystemParameters {
	s.CustomSystemParameter = v
	return s
}

type DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter struct {
	// Example
	//
	// example:
	//
	// 192.168.1.1
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The description.
	//
	// example:
	//
	// 123
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	//
	// example:
	//
	// HEAD
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the custom system parameter.
	//
	// example:
	//
	// appid
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The name of the corresponding backend parameter.
	//
	// example:
	//
	// clientIp
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter) SetDemoValue(v string) *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter) SetDescription(v string) *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.Description = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter) SetLocation(v string) *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.Location = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter) SetParameterName(v string) *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.ParameterName = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter) SetServiceParameterName(v string) *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeDeployedApiResponseBodyErrorCodeSamples struct {
	ErrorCodeSample []*DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample `json:"ErrorCodeSample,omitempty" xml:"ErrorCodeSample,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodyErrorCodeSamples) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyErrorCodeSamples) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyErrorCodeSamples) SetErrorCodeSample(v []*DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample) *DescribeDeployedApiResponseBodyErrorCodeSamples {
	s.ErrorCodeSample = v
	return s
}

type DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample struct {
	// The error code.
	//
	// example:
	//
	// Error
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The description.
	//
	// example:
	//
	// Description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The error message.
	//
	// example:
	//
	// error message
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample) SetCode(v string) *DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Code = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample) SetDescription(v string) *DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Description = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample) SetMessage(v string) *DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Message = &v
	return s
}

type DescribeDeployedApiResponseBodyOpenIdConnectConfig struct {
	// The name of the parameter that corresponds to the token.
	//
	// example:
	//
	// xxx
	IdTokenParamName *string `json:"IdTokenParamName,omitempty" xml:"IdTokenParamName,omitempty"`
	// The configuration of OpenID Connect authentication. Valid values:
	//
	// 	- **IDTOKEN: indicates the APIs that are called by clients to obtain tokens. If you specify this value, the PublicKeyId parameter and the PublicKey parameter are required.**
	//
	// 	- **BUSINESS: indicates business APIs. Tokens are used to call the business APIs. If you specify this value, the IdTokenParamName parameter is required.
	//
	// example:
	//
	// IDTOKEN
	OpenIdApiType *string `json:"OpenIdApiType,omitempty" xml:"OpenIdApiType,omitempty"`
	// The public key of the API.
	//
	// example:
	//
	// EB1837F8693CCED0BF750B3AD48467BEB569E780A14591CF92
	PublicKey *string `json:"PublicKey,omitempty" xml:"PublicKey,omitempty"`
	// The ID of the public key.
	//
	// example:
	//
	// 88483727556929326703309904351185815489
	PublicKeyId *string `json:"PublicKeyId,omitempty" xml:"PublicKeyId,omitempty"`
}

func (s DescribeDeployedApiResponseBodyOpenIdConnectConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyOpenIdConnectConfig) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyOpenIdConnectConfig) SetIdTokenParamName(v string) *DescribeDeployedApiResponseBodyOpenIdConnectConfig {
	s.IdTokenParamName = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyOpenIdConnectConfig) SetOpenIdApiType(v string) *DescribeDeployedApiResponseBodyOpenIdConnectConfig {
	s.OpenIdApiType = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyOpenIdConnectConfig) SetPublicKey(v string) *DescribeDeployedApiResponseBodyOpenIdConnectConfig {
	s.PublicKey = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyOpenIdConnectConfig) SetPublicKeyId(v string) *DescribeDeployedApiResponseBodyOpenIdConnectConfig {
	s.PublicKeyId = &v
	return s
}

type DescribeDeployedApiResponseBodyRequestConfig struct {
	// This parameter takes effect only when the RequestMode parameter is set to MAPPING.
	//
	// The server data transmission method used for POST and PUT requests. Valid values: FORM and STREAM. FORM indicates that data in key-value pairs is transmitted as forms. STREAM indicates that data is transmitted as byte streams.
	//
	// example:
	//
	// STREAM
	BodyFormat *string `json:"BodyFormat,omitempty" xml:"BodyFormat,omitempty"`
	// The body model.
	//
	// example:
	//
	// https://apigateway.aliyun.com/models/3a240a127dccXXXXXXXX947b4095/9e2df550e85b4121a79XXXXXxaab
	BodyModel *string `json:"BodyModel,omitempty" xml:"BodyModel,omitempty"`
	// The description of the request body.
	//
	// example:
	//
	// fwefwef
	PostBodyDescription *string `json:"PostBodyDescription,omitempty" xml:"PostBodyDescription,omitempty"`
	// The HTTP method used to make the request. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.
	//
	// example:
	//
	// POST
	RequestHttpMethod *string `json:"RequestHttpMethod,omitempty" xml:"RequestHttpMethod,omitempty"`
	// The request mode. Valid values:
	//
	// 	- MAPPING: Parameters are mapped. Unknown parameters are filtered out.
	//
	// 	- PASSTHROUGH: Parameters are passed through.
	//
	// 	- MAPPING_PASSTHROUGH: Parameters are mapped. Unknown parameters are passed through.
	//
	// example:
	//
	// MAPPING
	RequestMode *string `json:"RequestMode,omitempty" xml:"RequestMode,omitempty"`
	// The API request path. If the complete API URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the API request path is ` /object/add  `.
	//
	// example:
	//
	// /api/billing/test/[type]
	RequestPath *string `json:"RequestPath,omitempty" xml:"RequestPath,omitempty"`
	// The protocol type supported by the API. Valid values: HTTP, HTTPS, and WebSocket. Separate multiple values with commas (,), such as "HTTP,HTTPS".
	//
	// example:
	//
	// HTTP
	RequestProtocol *string `json:"RequestProtocol,omitempty" xml:"RequestProtocol,omitempty"`
}

func (s DescribeDeployedApiResponseBodyRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyRequestConfig) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyRequestConfig) SetBodyFormat(v string) *DescribeDeployedApiResponseBodyRequestConfig {
	s.BodyFormat = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestConfig) SetBodyModel(v string) *DescribeDeployedApiResponseBodyRequestConfig {
	s.BodyModel = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestConfig) SetPostBodyDescription(v string) *DescribeDeployedApiResponseBodyRequestConfig {
	s.PostBodyDescription = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestConfig) SetRequestHttpMethod(v string) *DescribeDeployedApiResponseBodyRequestConfig {
	s.RequestHttpMethod = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestConfig) SetRequestMode(v string) *DescribeDeployedApiResponseBodyRequestConfig {
	s.RequestMode = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestConfig) SetRequestPath(v string) *DescribeDeployedApiResponseBodyRequestConfig {
	s.RequestPath = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestConfig) SetRequestProtocol(v string) *DescribeDeployedApiResponseBodyRequestConfig {
	s.RequestProtocol = &v
	return s
}

type DescribeDeployedApiResponseBodyRequestParameters struct {
	RequestParameter []*DescribeDeployedApiResponseBodyRequestParametersRequestParameter `json:"RequestParameter,omitempty" xml:"RequestParameter,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodyRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyRequestParameters) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyRequestParameters) SetRequestParameter(v []*DescribeDeployedApiResponseBodyRequestParametersRequestParameter) *DescribeDeployedApiResponseBodyRequestParameters {
	s.RequestParameter = v
	return s
}

type DescribeDeployedApiResponseBodyRequestParametersRequestParameter struct {
	// The name of the API parameter.
	//
	// example:
	//
	// age
	ApiParameterName *string `json:"ApiParameterName,omitempty" xml:"ApiParameterName,omitempty"`
	// The type of the array element.
	//
	// example:
	//
	// String
	ArrayItemsType *string `json:"ArrayItemsType,omitempty" xml:"ArrayItemsType,omitempty"`
	// The default value.
	//
	// example:
	//
	// 20
	DefaultValue *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	// Example
	//
	// example:
	//
	// 20
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// Description
	//
	// example:
	//
	// parameter description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The order in the document.
	//
	// example:
	//
	// 0
	DocOrder *int32 `json:"DocOrder,omitempty" xml:"DocOrder,omitempty"`
	// Specifies whether the document is public. Valid values: PUBLIC and PRIVATE.
	//
	// example:
	//
	// PUBLIC
	DocShow *string `json:"DocShow,omitempty" xml:"DocShow,omitempty"`
	// The hash values that can be entered when ParameterType is set to Int, Long, Float, Double, or String. Separate different values with commas (,), such as 1,2,3,4,9 or A,B,C,E,F.
	//
	// example:
	//
	// boy,girl
	EnumValue *string `json:"EnumValue,omitempty" xml:"EnumValue,omitempty"`
	// JSON scheme
	//
	// example:
	//
	// {}
	JsonScheme *string `json:"JsonScheme,omitempty" xml:"JsonScheme,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	//
	// example:
	//
	// HEAD
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The maximum parameter length when ParameterType is set to String.
	//
	// example:
	//
	// 123456
	MaxLength *int64 `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	// The maximum parameter value when ParameterType is set to Int, Long, Float, or Double.
	//
	// example:
	//
	// 123456
	MaxValue *int64 `json:"MaxValue,omitempty" xml:"MaxValue,omitempty"`
	// The minimum parameter length when ParameterType is set to String.
	//
	// example:
	//
	// 123456
	MinLength *int64 `json:"MinLength,omitempty" xml:"MinLength,omitempty"`
	// The minimum parameter value when ParameterType is set to Int, Long, Float, or Double.
	//
	// example:
	//
	// 123456
	MinValue *int64 `json:"MinValue,omitempty" xml:"MinValue,omitempty"`
	// The type of a request parameter. Valid values: String, Int, Long, Float, Double, and Boolean.
	//
	// example:
	//
	// String
	ParameterType *string `json:"ParameterType,omitempty" xml:"ParameterType,omitempty"`
	// The regular expression used for parameter validation when ParameterType is set to String.
	//
	// example:
	//
	// xxx
	RegularExpression *string `json:"RegularExpression,omitempty" xml:"RegularExpression,omitempty"`
	// Indicates whether the parameter is required. Valid values: REQUIRED and OPTIONAL.
	//
	// example:
	//
	// OPTIONAL
	Required *string `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s DescribeDeployedApiResponseBodyRequestParametersRequestParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyRequestParametersRequestParameter) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetApiParameterName(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.ApiParameterName = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetArrayItemsType(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.ArrayItemsType = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetDefaultValue(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.DefaultValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetDemoValue(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetDescription(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.Description = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetDocOrder(v int32) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.DocOrder = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetDocShow(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.DocShow = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetEnumValue(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.EnumValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetJsonScheme(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.JsonScheme = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetLocation(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.Location = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetMaxLength(v int64) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.MaxLength = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetMaxValue(v int64) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.MaxValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetMinLength(v int64) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.MinLength = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetMinValue(v int64) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.MinValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetParameterType(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.ParameterType = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetRegularExpression(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.RegularExpression = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetRequired(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.Required = &v
	return s
}

type DescribeDeployedApiResponseBodyResultDescriptions struct {
	ResultDescription []*DescribeDeployedApiResponseBodyResultDescriptionsResultDescription `json:"ResultDescription,omitempty" xml:"ResultDescription,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodyResultDescriptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyResultDescriptions) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyResultDescriptions) SetResultDescription(v []*DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) *DescribeDeployedApiResponseBodyResultDescriptions {
	s.ResultDescription = v
	return s
}

type DescribeDeployedApiResponseBodyResultDescriptionsResultDescription struct {
	// The description.
	//
	// example:
	//
	// result description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether a subnode exists.
	//
	// example:
	//
	// false
	HasChild *bool `json:"HasChild,omitempty" xml:"HasChild,omitempty"`
	// The ID of the result.
	//
	// example:
	//
	// id
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The primary key of the result.
	//
	// example:
	//
	// DEMO
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// Specifies whether the parameter is required.
	//
	// example:
	//
	// true
	Mandatory *bool `json:"Mandatory,omitempty" xml:"Mandatory,omitempty"`
	// The name of the result.
	//
	// example:
	//
	// fwqf
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the parent node.
	//
	// example:
	//
	// pid
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The type of the result.
	//
	// example:
	//
	// String
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) SetDescription(v string) *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription {
	s.Description = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) SetHasChild(v bool) *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription {
	s.HasChild = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) SetId(v string) *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription {
	s.Id = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) SetKey(v string) *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription {
	s.Key = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) SetMandatory(v bool) *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription {
	s.Mandatory = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) SetName(v string) *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription {
	s.Name = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) SetPid(v string) *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription {
	s.Pid = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) SetType(v string) *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription {
	s.Type = &v
	return s
}

type DescribeDeployedApiResponseBodyServiceConfig struct {
	// Backend configuration items when the backend service is Function Compute
	FunctionComputeConfig *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig `json:"FunctionComputeConfig,omitempty" xml:"FunctionComputeConfig,omitempty" type:"Struct"`
	// Specifies whether to enable the Mock mode. Valid values:
	//
	// 	- **TRUE: The Mock mode is enabled.**
	//
	// 	- **FALSE: The Mock mode is not enabled.
	//
	// example:
	//
	// TRUE
	Mock *string `json:"Mock,omitempty" xml:"Mock,omitempty"`
	// The simulated Headers.
	MockHeaders *DescribeDeployedApiResponseBodyServiceConfigMockHeaders `json:"MockHeaders,omitempty" xml:"MockHeaders,omitempty" type:"Struct"`
	// The result returned when the Mock mode is enabled.
	//
	// example:
	//
	// test result
	MockResult *string `json:"MockResult,omitempty" xml:"MockResult,omitempty"`
	// The status code returned for service mocking.
	//
	// example:
	//
	// 200
	MockStatusCode *int32 `json:"MockStatusCode,omitempty" xml:"MockStatusCode,omitempty"`
	// The URL used to call the back-end service. If the complete back-end service URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the value of ServiceAddress is **http://api.a.com:8080**.``
	//
	// example:
	//
	// http://api.a.com:8080
	ServiceAddress *string `json:"ServiceAddress,omitempty" xml:"ServiceAddress,omitempty"`
	// The HTTP method used to call a backend service. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.
	//
	// example:
	//
	// POST
	ServiceHttpMethod *string `json:"ServiceHttpMethod,omitempty" xml:"ServiceHttpMethod,omitempty"`
	// example:
	//
	// /object/add
	ServicePath *string `json:"ServicePath,omitempty" xml:"ServicePath,omitempty"`
	// The backend service protocol. Currently, only HTTP, HTTPS, and FunctionCompute are supported.
	//
	// example:
	//
	// HTTP
	ServiceProtocol *string `json:"ServiceProtocol,omitempty" xml:"ServiceProtocol,omitempty"`
	// The timeout period of the backend service, in millisecond.
	//
	// example:
	//
	// 1000
	ServiceTimeout *int32 `json:"ServiceTimeout,omitempty" xml:"ServiceTimeout,omitempty"`
	// Specifies whether to enable the VPC channel. Valid values:
	//
	// 	- **TRUE**: The VPC channel is enabled. You must create the corresponding VPC access authorization before you can enable a VPC channel.
	//
	// 	- **FALSE**: The VPC channel is not enabled.
	//
	// example:
	//
	// TRUE
	ServiceVpcEnable *string `json:"ServiceVpcEnable,omitempty" xml:"ServiceVpcEnable,omitempty"`
	// Configuration items related to VPC channels
	VpcConfig *DescribeDeployedApiResponseBodyServiceConfigVpcConfig `json:"VpcConfig,omitempty" xml:"VpcConfig,omitempty" type:"Struct"`
	// The ID of the VPC.
	//
	// example:
	//
	// vpc-uf6kg9x8sx2tbxxxx
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeDeployedApiResponseBodyServiceConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceConfig) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetFunctionComputeConfig(v *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) *DescribeDeployedApiResponseBodyServiceConfig {
	s.FunctionComputeConfig = v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetMock(v string) *DescribeDeployedApiResponseBodyServiceConfig {
	s.Mock = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetMockHeaders(v *DescribeDeployedApiResponseBodyServiceConfigMockHeaders) *DescribeDeployedApiResponseBodyServiceConfig {
	s.MockHeaders = v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetMockResult(v string) *DescribeDeployedApiResponseBodyServiceConfig {
	s.MockResult = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetMockStatusCode(v int32) *DescribeDeployedApiResponseBodyServiceConfig {
	s.MockStatusCode = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetServiceAddress(v string) *DescribeDeployedApiResponseBodyServiceConfig {
	s.ServiceAddress = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetServiceHttpMethod(v string) *DescribeDeployedApiResponseBodyServiceConfig {
	s.ServiceHttpMethod = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetServicePath(v string) *DescribeDeployedApiResponseBodyServiceConfig {
	s.ServicePath = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetServiceProtocol(v string) *DescribeDeployedApiResponseBodyServiceConfig {
	s.ServiceProtocol = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetServiceTimeout(v int32) *DescribeDeployedApiResponseBodyServiceConfig {
	s.ServiceTimeout = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetServiceVpcEnable(v string) *DescribeDeployedApiResponseBodyServiceConfig {
	s.ServiceVpcEnable = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetVpcConfig(v *DescribeDeployedApiResponseBodyServiceConfigVpcConfig) *DescribeDeployedApiResponseBodyServiceConfig {
	s.VpcConfig = v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetVpcId(v string) *DescribeDeployedApiResponseBodyServiceConfig {
	s.VpcId = &v
	return s
}

type DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig struct {
	// The ContentType header type used when you call the backend service over HTTP.
	//
	// 	- **DEFAULT: the default header type in API Gateway.**
	//
	// 	- **CUSTOM: a custom header type.**
	//
	// 	- **CLIENT: the ContentType header type of the client.
	//
	// example:
	//
	// DEFAULT
	ContentTypeCatagory *string `json:"ContentTypeCatagory,omitempty" xml:"ContentTypeCatagory,omitempty"`
	// The value of the ContentType header when the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.
	//
	// example:
	//
	// application/x-www-form-urlencoded; charset=UTF-8
	ContentTypeValue *string `json:"ContentTypeValue,omitempty" xml:"ContentTypeValue,omitempty"`
	// The root path of Function Compute.
	//
	// example:
	//
	// https://122xxxxxxx.fc.aliyun.com/2016xxxx/proxy/testSxxx.xxx/testHttp/
	FcBaseUrl *string `json:"FcBaseUrl,omitempty" xml:"FcBaseUrl,omitempty"`
	// The type of the Function Compute instance.
	//
	// example:
	//
	// HttpTrigger
	FcType *string `json:"FcType,omitempty" xml:"FcType,omitempty"`
	// The function name defined in Function Compute.
	//
	// example:
	//
	// domain_business_control
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	// The request method.
	//
	// example:
	//
	// GET
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The backend only receives the service path.
	//
	// example:
	//
	// false
	OnlyBusinessPath *bool `json:"OnlyBusinessPath,omitempty" xml:"OnlyBusinessPath,omitempty"`
	// The API request path.
	//
	// example:
	//
	// /api/offline/cacheData
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The alias of the function.
	//
	// example:
	//
	// 2
	Qualifier *string `json:"Qualifier,omitempty" xml:"Qualifier,omitempty"`
	// The region where the API is located.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the RAM role to be assumed by API Gateway to access Function Compute.
	//
	// example:
	//
	// acs:ram::111***:role/aliyunserviceroleforsas
	RoleArn *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	// The service name defined in Function Compute.
	//
	// example:
	//
	// fcservicename
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetContentTypeCatagory(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.ContentTypeCatagory = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetContentTypeValue(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.ContentTypeValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetFcBaseUrl(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.FcBaseUrl = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetFcType(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.FcType = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetFunctionName(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.FunctionName = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetMethod(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.Method = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetOnlyBusinessPath(v bool) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.OnlyBusinessPath = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetPath(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.Path = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetQualifier(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.Qualifier = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetRegionId(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.RegionId = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetRoleArn(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.RoleArn = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetServiceName(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.ServiceName = &v
	return s
}

type DescribeDeployedApiResponseBodyServiceConfigMockHeaders struct {
	MockHeader []*DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader `json:"MockHeader,omitempty" xml:"MockHeader,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodyServiceConfigMockHeaders) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceConfigMockHeaders) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceConfigMockHeaders) SetMockHeader(v []*DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader) *DescribeDeployedApiResponseBodyServiceConfigMockHeaders {
	s.MockHeader = v
	return s
}

type DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader struct {
	// The name of the HTTP header parameter.
	//
	// example:
	//
	// Content-Type
	HeaderName *string `json:"HeaderName,omitempty" xml:"HeaderName,omitempty"`
	// The value of the HTTP header parameter.
	//
	// example:
	//
	// 86400
	HeaderValue *string `json:"HeaderValue,omitempty" xml:"HeaderValue,omitempty"`
}

func (s DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader) SetHeaderName(v string) *DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader {
	s.HeaderName = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader) SetHeaderValue(v string) *DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader {
	s.HeaderValue = &v
	return s
}

type DescribeDeployedApiResponseBodyServiceConfigVpcConfig struct {
	// The IDs of the ELB and SLB instances in the VPC.
	//
	// example:
	//
	// i-bp1h497hkijewv2***
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the VPC access authorization.
	//
	// example:
	//
	// glmall-app-test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The port number that corresponds to the instance.
	//
	// example:
	//
	// 8080
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the VPC.
	//
	// example:
	//
	// vpc-2zeafsc3fygk1***
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeDeployedApiResponseBodyServiceConfigVpcConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceConfigVpcConfig) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceConfigVpcConfig) SetInstanceId(v string) *DescribeDeployedApiResponseBodyServiceConfigVpcConfig {
	s.InstanceId = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigVpcConfig) SetName(v string) *DescribeDeployedApiResponseBodyServiceConfigVpcConfig {
	s.Name = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigVpcConfig) SetPort(v int32) *DescribeDeployedApiResponseBodyServiceConfigVpcConfig {
	s.Port = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigVpcConfig) SetVpcId(v string) *DescribeDeployedApiResponseBodyServiceConfigVpcConfig {
	s.VpcId = &v
	return s
}

type DescribeDeployedApiResponseBodyServiceParameters struct {
	ServiceParameter []*DescribeDeployedApiResponseBodyServiceParametersServiceParameter `json:"ServiceParameter,omitempty" xml:"ServiceParameter,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodyServiceParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceParameters) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceParameters) SetServiceParameter(v []*DescribeDeployedApiResponseBodyServiceParametersServiceParameter) *DescribeDeployedApiResponseBodyServiceParameters {
	s.ServiceParameter = v
	return s
}

type DescribeDeployedApiResponseBodyServiceParametersServiceParameter struct {
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	//
	// example:
	//
	// HEAD
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The data type of the back-end service parameter.
	//
	// example:
	//
	// String
	ParameterType *string `json:"ParameterType,omitempty" xml:"ParameterType,omitempty"`
	// The name of the backend service parameter.
	//
	// example:
	//
	// clientIp
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeDeployedApiResponseBodyServiceParametersServiceParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceParametersServiceParameter) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceParametersServiceParameter) SetLocation(v string) *DescribeDeployedApiResponseBodyServiceParametersServiceParameter {
	s.Location = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceParametersServiceParameter) SetParameterType(v string) *DescribeDeployedApiResponseBodyServiceParametersServiceParameter {
	s.ParameterType = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceParametersServiceParameter) SetServiceParameterName(v string) *DescribeDeployedApiResponseBodyServiceParametersServiceParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeDeployedApiResponseBodyServiceParametersMap struct {
	ServiceParameterMap []*DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap `json:"ServiceParameterMap,omitempty" xml:"ServiceParameterMap,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodyServiceParametersMap) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceParametersMap) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceParametersMap) SetServiceParameterMap(v []*DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap) *DescribeDeployedApiResponseBodyServiceParametersMap {
	s.ServiceParameterMap = v
	return s
}

type DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap struct {
	// The name of the front-end input parameter.
	//
	// example:
	//
	// sex
	RequestParameterName *string `json:"RequestParameterName,omitempty" xml:"RequestParameterName,omitempty"`
	// The name of the backend service parameter.
	//
	// example:
	//
	// sex
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap) SetRequestParameterName(v string) *DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap {
	s.RequestParameterName = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap) SetServiceParameterName(v string) *DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap {
	s.ServiceParameterName = &v
	return s
}

type DescribeDeployedApiResponseBodySystemParameters struct {
	SystemParameter []*DescribeDeployedApiResponseBodySystemParametersSystemParameter `json:"SystemParameter,omitempty" xml:"SystemParameter,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodySystemParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodySystemParameters) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodySystemParameters) SetSystemParameter(v []*DescribeDeployedApiResponseBodySystemParametersSystemParameter) *DescribeDeployedApiResponseBodySystemParameters {
	s.SystemParameter = v
	return s
}

type DescribeDeployedApiResponseBodySystemParametersSystemParameter struct {
	// Examples
	//
	// example:
	//
	// 192.168.1.1
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The description.
	//
	// example:
	//
	// QueryParamDTO
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	//
	// example:
	//
	// HEAD
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the system parameter. Valid values: CaClientIp, CaDomain, CaRequestHandleTime, CaAppId, CaRequestId, CaHttpSchema, and CaProxy.
	//
	// example:
	//
	// CaClientIp
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The name of the corresponding backend parameter.
	//
	// example:
	//
	// clientIp
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeDeployedApiResponseBodySystemParametersSystemParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodySystemParametersSystemParameter) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodySystemParametersSystemParameter) SetDemoValue(v string) *DescribeDeployedApiResponseBodySystemParametersSystemParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodySystemParametersSystemParameter) SetDescription(v string) *DescribeDeployedApiResponseBodySystemParametersSystemParameter {
	s.Description = &v
	return s
}

func (s *DescribeDeployedApiResponseBodySystemParametersSystemParameter) SetLocation(v string) *DescribeDeployedApiResponseBodySystemParametersSystemParameter {
	s.Location = &v
	return s
}

func (s *DescribeDeployedApiResponseBodySystemParametersSystemParameter) SetParameterName(v string) *DescribeDeployedApiResponseBodySystemParametersSystemParameter {
	s.ParameterName = &v
	return s
}

func (s *DescribeDeployedApiResponseBodySystemParametersSystemParameter) SetServiceParameterName(v string) *DescribeDeployedApiResponseBodySystemParametersSystemParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeDeployedApiResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDeployedApiResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDeployedApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponse) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponse) SetHeaders(v map[string]*string) *DescribeDeployedApiResponse {
	s.Headers = v
	return s
}

func (s *DescribeDeployedApiResponse) SetStatusCode(v int32) *DescribeDeployedApiResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDeployedApiResponse) SetBody(v *DescribeDeployedApiResponseBody) *DescribeDeployedApiResponse {
	s.Body = v
	return s
}

type DescribeDeployedApisRequest struct {
	// The ID of the API.
	//
	// example:
	//
	// c076144d7878437b8f82fb85890ce6a0
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The HTTP method of the API request.
	//
	// example:
	//
	// POST
	ApiMethod *string `json:"ApiMethod,omitempty" xml:"ApiMethod,omitempty"`
	// The name of the API. The name is used for fuzzy match.
	//
	// example:
	//
	// weather
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The request path of the API.
	//
	// example:
	//
	// /st4
	ApiPath *string `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	// Specifies whether to enable tag verification.
	//
	// example:
	//
	// true
	EnableTagAuth *bool `json:"EnableTagAuth,omitempty" xml:"EnableTagAuth,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 63be9002440b4778a61122f14c2b2bbb
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The list of tags.
	Tag []*DescribeDeployedApisRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApisRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApisRequest) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApisRequest) SetApiId(v string) *DescribeDeployedApisRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetApiMethod(v string) *DescribeDeployedApisRequest {
	s.ApiMethod = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetApiName(v string) *DescribeDeployedApisRequest {
	s.ApiName = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetApiPath(v string) *DescribeDeployedApisRequest {
	s.ApiPath = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetEnableTagAuth(v bool) *DescribeDeployedApisRequest {
	s.EnableTagAuth = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetGroupId(v string) *DescribeDeployedApisRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetPageNumber(v int32) *DescribeDeployedApisRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetPageSize(v int32) *DescribeDeployedApisRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetSecurityToken(v string) *DescribeDeployedApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetStageName(v string) *DescribeDeployedApisRequest {
	s.StageName = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetTag(v []*DescribeDeployedApisRequestTag) *DescribeDeployedApisRequest {
	s.Tag = v
	return s
}

type DescribeDeployedApisRequestTag struct {
	// The tag key.
	//
	// example:
	//
	// appname
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// testapp
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDeployedApisRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApisRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApisRequestTag) SetKey(v string) *DescribeDeployedApisRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDeployedApisRequestTag) SetValue(v string) *DescribeDeployedApisRequestTag {
	s.Value = &v
	return s
}

type DescribeDeployedApisResponseBody struct {
	// The returned API information. It is an array consisting of DeployedApiItem data.
	DeployedApis *DescribeDeployedApisResponseBodyDeployedApis `json:"DeployedApis,omitempty" xml:"DeployedApis,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ002
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 2
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDeployedApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApisResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApisResponseBody) SetDeployedApis(v *DescribeDeployedApisResponseBodyDeployedApis) *DescribeDeployedApisResponseBody {
	s.DeployedApis = v
	return s
}

func (s *DescribeDeployedApisResponseBody) SetPageNumber(v int32) *DescribeDeployedApisResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDeployedApisResponseBody) SetPageSize(v int32) *DescribeDeployedApisResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDeployedApisResponseBody) SetRequestId(v string) *DescribeDeployedApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDeployedApisResponseBody) SetTotalCount(v int32) *DescribeDeployedApisResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDeployedApisResponseBodyDeployedApis struct {
	DeployedApiItem []*DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem `json:"DeployedApiItem,omitempty" xml:"DeployedApiItem,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApisResponseBodyDeployedApis) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApisResponseBodyDeployedApis) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApisResponseBodyDeployedApis) SetDeployedApiItem(v []*DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) *DescribeDeployedApisResponseBodyDeployedApis {
	s.DeployedApiItem = v
	return s
}

type DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem struct {
	// The API ID.
	//
	// example:
	//
	// c076144d7878437b8f82fb85890ce6a0
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The HTTP method of the API request.
	//
	// example:
	//
	// POST
	ApiMethod *string `json:"ApiMethod,omitempty" xml:"ApiMethod,omitempty"`
	// The API name.
	//
	// example:
	//
	// DescribeObjects
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The request path of the API.
	//
	// example:
	//
	// /trademark/search
	ApiPath *string `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	// The time when the API was published. The time is displayed in UTC.
	//
	// example:
	//
	// 2016-07-23T08:28:48Z
	DeployedTime *string `json:"DeployedTime,omitempty" xml:"DeployedTime,omitempty"`
	// The API description.
	//
	// example:
	//
	// Queries objects by page
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The API group ID.
	//
	// example:
	//
	// 63be9002440b4778a61122f14c2b2bbb
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group to which the API belongs.
	//
	// example:
	//
	// myGroup3
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The region ID of the API.
	//
	// example:
	//
	// cn-qingdao
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The environment name. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// Indicates whether the API is public. Valid values:
	//
	// 	- **PUBLIC**
	//
	// 	- **PRIVATE**
	//
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetApiId(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.ApiId = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetApiMethod(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.ApiMethod = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetApiName(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.ApiName = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetApiPath(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.ApiPath = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetDeployedTime(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.DeployedTime = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetDescription(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.Description = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetGroupId(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.GroupId = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetGroupName(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.GroupName = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetRegionId(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.RegionId = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetStageName(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.StageName = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetVisibility(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.Visibility = &v
	return s
}

type DescribeDeployedApisResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDeployedApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDeployedApisResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApisResponse) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApisResponse) SetHeaders(v map[string]*string) *DescribeDeployedApisResponse {
	s.Headers = v
	return s
}

func (s *DescribeDeployedApisResponse) SetStatusCode(v int32) *DescribeDeployedApisResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDeployedApisResponse) SetBody(v *DescribeDeployedApisResponseBody) *DescribeDeployedApisResponse {
	s.Body = v
	return s
}

type DescribeDomainRequest struct {
	// The custom domain name.
	//
	// This parameter is required.
	//
	// example:
	//
	// api.demo.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The ID of the API group. An API group ID is generated by the system and is globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 927d50c0f2e54b359919923d908bb015
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainRequest) GoString() string {
	return s.String()
}

func (s *DescribeDomainRequest) SetDomainName(v string) *DescribeDomainRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeDomainRequest) SetGroupId(v string) *DescribeDomainRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeDomainRequest) SetSecurityToken(v string) *DescribeDomainRequest {
	s.SecurityToken = &v
	return s
}

type DescribeDomainResponseBody struct {
	// The certificate content.
	//
	// example:
	//
	// xxx
	CertificateBody *string `json:"CertificateBody,omitempty" xml:"CertificateBody,omitempty"`
	// The unique ID of the SSL certificate, which is automatically generated by the system.
	//
	// example:
	//
	// 6EF60BEC-0242-43AF-BB20-270359FB54A7
	CertificateId *string `json:"CertificateId,omitempty" xml:"CertificateId,omitempty"`
	// The SSL certificate name.
	//
	// example:
	//
	// myCertificate
	CertificateName *string `json:"CertificateName,omitempty" xml:"CertificateName,omitempty"`
	// The private key of the SSL certificate.
	//
	// example:
	//
	// xxx
	CertificatePrivateKey *string `json:"CertificatePrivateKey,omitempty" xml:"CertificatePrivateKey,omitempty"`
	// The time when the certificate expires. The value is a timestamp. Unit: milliseconds.
	//
	// example:
	//
	// 1704038400000
	CertificateValidEnd *int64 `json:"CertificateValidEnd,omitempty" xml:"CertificateValidEnd,omitempty"`
	// The time when the certificate takes effect. The value is a timestamp. Unit: milliseconds.
	//
	// example:
	//
	// 1672502400000
	CertificateValidStart *int64 `json:"CertificateValidStart,omitempty" xml:"CertificateValidStart,omitempty"`
	// The binding status of the custom domain name. Valid values:
	//
	// 	- BINDING: The domain name is bound to the API group.
	//
	// 	- BOUND: The domain name is not bound to the API group.
	//
	// example:
	//
	// BINDING
	DomainBindingStatus *string `json:"DomainBindingStatus,omitempty" xml:"DomainBindingStatus,omitempty"`
	// The domain name resolution status. Valid values:
	//
	// 	- RESOLVED: The domain name has been resolved.
	//
	// 	- UNRESOLVED: The domain name has not been resolved.
	//
	// example:
	//
	// RESOLVED
	DomainCNAMEStatus *string `json:"DomainCNAMEStatus,omitempty" xml:"DomainCNAMEStatus,omitempty"`
	// The validity status of the domain name. Valid values:
	//
	// 	- NORMAL
	//
	// 	- ABNORMAL: This status affects API calls and must be rectified as soon as possible.
	//
	// example:
	//
	// NORMAL
	DomainLegalStatus *string `json:"DomainLegalStatus,omitempty" xml:"DomainLegalStatus,omitempty"`
	// The custom domain name.
	//
	// example:
	//
	// api.demo.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// Remarks about the domain name, such as the cause of an exception.
	//
	// example:
	//
	// The status of the domain name that uses WebSocket.
	DomainRemark *string `json:"DomainRemark,omitempty" xml:"DomainRemark,omitempty"`
	// The status of the domain name that uses WebSocket.
	//
	// example:
	//
	// NORMAL
	DomainWebSocketStatus *string `json:"DomainWebSocketStatus,omitempty" xml:"DomainWebSocketStatus,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// example:
	//
	// 927d50c0f2e54b359919923d908bb015
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 6EF60BEC-0242-43AF-BB20-270359FB54A7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The second-level domain name that is automatically assigned to the API group.
	//
	// example:
	//
	// xxx-cn-hangzhou.alicloudapi.com
	SubDomain *string `json:"SubDomain,omitempty" xml:"SubDomain,omitempty"`
}

func (s DescribeDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDomainResponseBody) SetCertificateBody(v string) *DescribeDomainResponseBody {
	s.CertificateBody = &v
	return s
}

func (s *DescribeDomainResponseBody) SetCertificateId(v string) *DescribeDomainResponseBody {
	s.CertificateId = &v
	return s
}

func (s *DescribeDomainResponseBody) SetCertificateName(v string) *DescribeDomainResponseBody {
	s.CertificateName = &v
	return s
}

func (s *DescribeDomainResponseBody) SetCertificatePrivateKey(v string) *DescribeDomainResponseBody {
	s.CertificatePrivateKey = &v
	return s
}

func (s *DescribeDomainResponseBody) SetCertificateValidEnd(v int64) *DescribeDomainResponseBody {
	s.CertificateValidEnd = &v
	return s
}

func (s *DescribeDomainResponseBody) SetCertificateValidStart(v int64) *DescribeDomainResponseBody {
	s.CertificateValidStart = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainBindingStatus(v string) *DescribeDomainResponseBody {
	s.DomainBindingStatus = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainCNAMEStatus(v string) *DescribeDomainResponseBody {
	s.DomainCNAMEStatus = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainLegalStatus(v string) *DescribeDomainResponseBody {
	s.DomainLegalStatus = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainName(v string) *DescribeDomainResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainRemark(v string) *DescribeDomainResponseBody {
	s.DomainRemark = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainWebSocketStatus(v string) *DescribeDomainResponseBody {
	s.DomainWebSocketStatus = &v
	return s
}

func (s *DescribeDomainResponseBody) SetGroupId(v string) *DescribeDomainResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeDomainResponseBody) SetRequestId(v string) *DescribeDomainResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDomainResponseBody) SetSubDomain(v string) *DescribeDomainResponseBody {
	s.SubDomain = &v
	return s
}

type DescribeDomainResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDomainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainResponse) GoString() string {
	return s.String()
}

func (s *DescribeDomainResponse) SetHeaders(v map[string]*string) *DescribeDomainResponse {
	s.Headers = v
	return s
}

func (s *DescribeDomainResponse) SetStatusCode(v int32) *DescribeDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDomainResponse) SetBody(v *DescribeDomainResponseBody) *DescribeDomainResponse {
	s.Body = v
	return s
}

type DescribeGroupLatencyRequest struct {
	// The end time of the time range to query. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2023-04-14T06:26:14Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// d825094fdd114a869f5adb443d9b7ead
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment in which you want to perform the query. Valid values:
	//
	// 	- **RELEASE**: the production environment
	//
	// 	- **PRE**: the staging environment
	//
	// 	- **TEST**: the test environment
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The start time of the time range to query. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2023-03-30T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeGroupLatencyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupLatencyRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupLatencyRequest) SetEndTime(v string) *DescribeGroupLatencyRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeGroupLatencyRequest) SetGroupId(v string) *DescribeGroupLatencyRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeGroupLatencyRequest) SetSecurityToken(v string) *DescribeGroupLatencyRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeGroupLatencyRequest) SetStageName(v string) *DescribeGroupLatencyRequest {
	s.StageName = &v
	return s
}

func (s *DescribeGroupLatencyRequest) SetStartTime(v string) *DescribeGroupLatencyRequest {
	s.StartTime = &v
	return s
}

type DescribeGroupLatencyResponseBody struct {
	// The latency information.
	LatencyPacket *DescribeGroupLatencyResponseBodyLatencyPacket `json:"LatencyPacket,omitempty" xml:"LatencyPacket,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 75DC3AB0-421C-5371-8170-86AEABF77AD0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeGroupLatencyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupLatencyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupLatencyResponseBody) SetLatencyPacket(v *DescribeGroupLatencyResponseBodyLatencyPacket) *DescribeGroupLatencyResponseBody {
	s.LatencyPacket = v
	return s
}

func (s *DescribeGroupLatencyResponseBody) SetRequestId(v string) *DescribeGroupLatencyResponseBody {
	s.RequestId = &v
	return s
}

type DescribeGroupLatencyResponseBodyLatencyPacket struct {
	MonitorItem []*DescribeGroupLatencyResponseBodyLatencyPacketMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeGroupLatencyResponseBodyLatencyPacket) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupLatencyResponseBodyLatencyPacket) GoString() string {
	return s.String()
}

func (s *DescribeGroupLatencyResponseBodyLatencyPacket) SetMonitorItem(v []*DescribeGroupLatencyResponseBodyLatencyPacketMonitorItem) *DescribeGroupLatencyResponseBodyLatencyPacket {
	s.MonitorItem = v
	return s
}

type DescribeGroupLatencyResponseBodyLatencyPacketMonitorItem struct {
	// The metric. Valid values:
	//
	// 	- latency: the backend processing latency
	//
	// 	- gatewayLatency: the API Gateway processing latency
	//
	// example:
	//
	// latency
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The point in time when the latency data was collected. The format is YYYY-MM-DDThh:mm:ssZ.
	//
	// example:
	//
	// 2023-03-30T16:10:00Z
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The latency. Unit: ms.
	//
	// example:
	//
	// 100.0
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeGroupLatencyResponseBodyLatencyPacketMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupLatencyResponseBodyLatencyPacketMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeGroupLatencyResponseBodyLatencyPacketMonitorItem) SetItem(v string) *DescribeGroupLatencyResponseBodyLatencyPacketMonitorItem {
	s.Item = &v
	return s
}

func (s *DescribeGroupLatencyResponseBodyLatencyPacketMonitorItem) SetItemTime(v string) *DescribeGroupLatencyResponseBodyLatencyPacketMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeGroupLatencyResponseBodyLatencyPacketMonitorItem) SetItemValue(v string) *DescribeGroupLatencyResponseBodyLatencyPacketMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeGroupLatencyResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeGroupLatencyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeGroupLatencyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupLatencyResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupLatencyResponse) SetHeaders(v map[string]*string) *DescribeGroupLatencyResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupLatencyResponse) SetStatusCode(v int32) *DescribeGroupLatencyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupLatencyResponse) SetBody(v *DescribeGroupLatencyResponseBody) *DescribeGroupLatencyResponse {
	s.Body = v
	return s
}

type DescribeGroupQpsRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-08-23T07:27:44Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The API group ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 264c60db9f764345a13ac5c825b229b9
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment to which the API group is published. Valid values:
	//
	// 	- **RELEASE**: the production environment
	//
	// 	- **PRE**: the staging environment
	//
	// 	- **TEST**: the test environment
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-08-12T06:09:52Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeGroupQpsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupQpsRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupQpsRequest) SetEndTime(v string) *DescribeGroupQpsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeGroupQpsRequest) SetGroupId(v string) *DescribeGroupQpsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeGroupQpsRequest) SetSecurityToken(v string) *DescribeGroupQpsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeGroupQpsRequest) SetStageName(v string) *DescribeGroupQpsRequest {
	s.StageName = &v
	return s
}

func (s *DescribeGroupQpsRequest) SetStartTime(v string) *DescribeGroupQpsRequest {
	s.StartTime = &v
	return s
}

type DescribeGroupQpsResponseBody struct {
	// The number of requests directed to the API group.
	GroupQps *DescribeGroupQpsResponseBodyGroupQps `json:"GroupQps,omitempty" xml:"GroupQps,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// D6E46F10-F26C-4AA0-BB69-FE2743D9AE62
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeGroupQpsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupQpsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupQpsResponseBody) SetGroupQps(v *DescribeGroupQpsResponseBodyGroupQps) *DescribeGroupQpsResponseBody {
	s.GroupQps = v
	return s
}

func (s *DescribeGroupQpsResponseBody) SetRequestId(v string) *DescribeGroupQpsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeGroupQpsResponseBodyGroupQps struct {
	MonitorItem []*DescribeGroupQpsResponseBodyGroupQpsMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeGroupQpsResponseBodyGroupQps) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupQpsResponseBodyGroupQps) GoString() string {
	return s.String()
}

func (s *DescribeGroupQpsResponseBodyGroupQps) SetMonitorItem(v []*DescribeGroupQpsResponseBodyGroupQpsMonitorItem) *DescribeGroupQpsResponseBodyGroupQps {
	s.MonitorItem = v
	return s
}

type DescribeGroupQpsResponseBodyGroupQpsMonitorItem struct {
	// The point in time.
	//
	// example:
	//
	// 2023-08-02T09:15:00Z
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The number of requests at the specified point in time.
	//
	// example:
	//
	// 17
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeGroupQpsResponseBodyGroupQpsMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupQpsResponseBodyGroupQpsMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeGroupQpsResponseBodyGroupQpsMonitorItem) SetItemTime(v string) *DescribeGroupQpsResponseBodyGroupQpsMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeGroupQpsResponseBodyGroupQpsMonitorItem) SetItemValue(v string) *DescribeGroupQpsResponseBodyGroupQpsMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeGroupQpsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeGroupQpsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeGroupQpsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupQpsResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupQpsResponse) SetHeaders(v map[string]*string) *DescribeGroupQpsResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupQpsResponse) SetStatusCode(v int32) *DescribeGroupQpsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupQpsResponse) SetBody(v *DescribeGroupQpsResponseBody) *DescribeGroupQpsResponse {
	s.Body = v
	return s
}

type DescribeGroupTrafficRequest struct {
	// The end time for the query. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2023-06-16T02:16:53Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 16df9d11caa04900bcafe23b38a81600
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment to which the APIs in the API group are published. Valid values:
	//
	// 	- **RELEASE**: the production environment
	//
	// 	- **PRE**: the staging environment
	//
	// 	- **TEST**: the test environment
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The start time for the query. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2023-01-29T01:27:43Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeGroupTrafficRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupTrafficRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupTrafficRequest) SetEndTime(v string) *DescribeGroupTrafficRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeGroupTrafficRequest) SetGroupId(v string) *DescribeGroupTrafficRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeGroupTrafficRequest) SetSecurityToken(v string) *DescribeGroupTrafficRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeGroupTrafficRequest) SetStageName(v string) *DescribeGroupTrafficRequest {
	s.StageName = &v
	return s
}

func (s *DescribeGroupTrafficRequest) SetStartTime(v string) *DescribeGroupTrafficRequest {
	s.StartTime = &v
	return s
}

type DescribeGroupTrafficResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// EF924FE4-2EDD-4CD3-89EC-34E4708574E7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The traffic information per second.
	TrafficPerSecond *DescribeGroupTrafficResponseBodyTrafficPerSecond `json:"TrafficPerSecond,omitempty" xml:"TrafficPerSecond,omitempty" type:"Struct"`
}

func (s DescribeGroupTrafficResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupTrafficResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupTrafficResponseBody) SetRequestId(v string) *DescribeGroupTrafficResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGroupTrafficResponseBody) SetTrafficPerSecond(v *DescribeGroupTrafficResponseBodyTrafficPerSecond) *DescribeGroupTrafficResponseBody {
	s.TrafficPerSecond = v
	return s
}

type DescribeGroupTrafficResponseBodyTrafficPerSecond struct {
	MonitorItem []*DescribeGroupTrafficResponseBodyTrafficPerSecondMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeGroupTrafficResponseBodyTrafficPerSecond) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupTrafficResponseBodyTrafficPerSecond) GoString() string {
	return s.String()
}

func (s *DescribeGroupTrafficResponseBodyTrafficPerSecond) SetMonitorItem(v []*DescribeGroupTrafficResponseBodyTrafficPerSecondMonitorItem) *DescribeGroupTrafficResponseBodyTrafficPerSecond {
	s.MonitorItem = v
	return s
}

type DescribeGroupTrafficResponseBodyTrafficPerSecondMonitorItem struct {
	// The metric. Valid values:
	//
	// 	- inbound: traffic consumed by requests
	//
	// 	- outbound: traffic consumed by responses
	//
	// example:
	//
	// inbound
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The corresponding time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ.
	//
	// example:
	//
	// 2023-01-29T01:30:00Z
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The traffic volume per second.
	//
	// example:
	//
	// 100.0
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeGroupTrafficResponseBodyTrafficPerSecondMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupTrafficResponseBodyTrafficPerSecondMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeGroupTrafficResponseBodyTrafficPerSecondMonitorItem) SetItem(v string) *DescribeGroupTrafficResponseBodyTrafficPerSecondMonitorItem {
	s.Item = &v
	return s
}

func (s *DescribeGroupTrafficResponseBodyTrafficPerSecondMonitorItem) SetItemTime(v string) *DescribeGroupTrafficResponseBodyTrafficPerSecondMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeGroupTrafficResponseBodyTrafficPerSecondMonitorItem) SetItemValue(v string) *DescribeGroupTrafficResponseBodyTrafficPerSecondMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeGroupTrafficResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeGroupTrafficResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeGroupTrafficResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupTrafficResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupTrafficResponse) SetHeaders(v map[string]*string) *DescribeGroupTrafficResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupTrafficResponse) SetStatusCode(v int32) *DescribeGroupTrafficResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupTrafficResponse) SetBody(v *DescribeGroupTrafficResponseBody) *DescribeGroupTrafficResponse {
	s.Body = v
	return s
}

type DescribeHistoryApisRequest struct {
	// example:
	//
	// a12068f555964ca8a0c9c33288f1e5a7
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// example:
	//
	// getPersonInfo
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0ccb66aadb5345b78a40f57d192d8aa4
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 2
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize      *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeHistoryApisRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHistoryApisRequest) GoString() string {
	return s.String()
}

func (s *DescribeHistoryApisRequest) SetApiId(v string) *DescribeHistoryApisRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeHistoryApisRequest) SetApiName(v string) *DescribeHistoryApisRequest {
	s.ApiName = &v
	return s
}

func (s *DescribeHistoryApisRequest) SetGroupId(v string) *DescribeHistoryApisRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeHistoryApisRequest) SetPageNumber(v string) *DescribeHistoryApisRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeHistoryApisRequest) SetPageSize(v string) *DescribeHistoryApisRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeHistoryApisRequest) SetSecurityToken(v string) *DescribeHistoryApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeHistoryApisRequest) SetStageName(v string) *DescribeHistoryApisRequest {
	s.StageName = &v
	return s
}

type DescribeHistoryApisResponseBody struct {
	ApiHisItems *DescribeHistoryApisResponseBodyApiHisItems `json:"ApiHisItems,omitempty" xml:"ApiHisItems,omitempty" type:"Struct"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 6C87A26A-6A18-4B8E-8099-705278381A2C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 20
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeHistoryApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHistoryApisResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHistoryApisResponseBody) SetApiHisItems(v *DescribeHistoryApisResponseBodyApiHisItems) *DescribeHistoryApisResponseBody {
	s.ApiHisItems = v
	return s
}

func (s *DescribeHistoryApisResponseBody) SetPageNumber(v int32) *DescribeHistoryApisResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeHistoryApisResponseBody) SetPageSize(v int32) *DescribeHistoryApisResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeHistoryApisResponseBody) SetRequestId(v string) *DescribeHistoryApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHistoryApisResponseBody) SetTotalCount(v int32) *DescribeHistoryApisResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeHistoryApisResponseBodyApiHisItems struct {
	ApiHisItem []*DescribeHistoryApisResponseBodyApiHisItemsApiHisItem `json:"ApiHisItem,omitempty" xml:"ApiHisItem,omitempty" type:"Repeated"`
}

func (s DescribeHistoryApisResponseBodyApiHisItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeHistoryApisResponseBodyApiHisItems) GoString() string {
	return s.String()
}

func (s *DescribeHistoryApisResponseBodyApiHisItems) SetApiHisItem(v []*DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) *DescribeHistoryApisResponseBodyApiHisItems {
	s.ApiHisItem = v
	return s
}

type DescribeHistoryApisResponseBodyApiHisItemsApiHisItem struct {
	// example:
	//
	// 5af418828f0344a3b588c0cc1331a3bc
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// example:
	//
	// v2_role_assign
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// example:
	//
	// 2016-07-20T08:28:48Z
	DeployedTime *string `json:"DeployedTime,omitempty" xml:"DeployedTime,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 1084f9034c744137901057206b39d2b6
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// myGroup2
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// example:
	//
	// 20210915101416294
	HistoryVersion *string `json:"HistoryVersion,omitempty" xml:"HistoryVersion,omitempty"`
	// example:
	//
	// cn-qingdao
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StageAlias *string `json:"StageAlias,omitempty" xml:"StageAlias,omitempty"`
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// example:
	//
	// ONLINE
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) GoString() string {
	return s.String()
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetApiId(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.ApiId = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetApiName(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.ApiName = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetDeployedTime(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.DeployedTime = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetDescription(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.Description = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetGroupId(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.GroupId = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetGroupName(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.GroupName = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetHistoryVersion(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.HistoryVersion = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetRegionId(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.RegionId = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetStageAlias(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.StageAlias = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetStageName(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.StageName = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetStatus(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.Status = &v
	return s
}

type DescribeHistoryApisResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHistoryApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHistoryApisResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHistoryApisResponse) GoString() string {
	return s.String()
}

func (s *DescribeHistoryApisResponse) SetHeaders(v map[string]*string) *DescribeHistoryApisResponse {
	s.Headers = v
	return s
}

func (s *DescribeHistoryApisResponse) SetStatusCode(v int32) *DescribeHistoryApisResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHistoryApisResponse) SetBody(v *DescribeHistoryApisResponseBody) *DescribeHistoryApisResponse {
	s.Body = v
	return s
}

type DescribeImportOASTaskRequest struct {
	// The ID of the asynchronous API import task that was generated during the import operation. This ID is used to query the execution status of the API import task.
	//
	// This parameter is required.
	//
	// example:
	//
	// 4c53ccf1d40c489686d1adf5c2644a7f
	OperationId   *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeImportOASTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImportOASTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeImportOASTaskRequest) SetOperationId(v string) *DescribeImportOASTaskRequest {
	s.OperationId = &v
	return s
}

func (s *DescribeImportOASTaskRequest) SetSecurityToken(v string) *DescribeImportOASTaskRequest {
	s.SecurityToken = &v
	return s
}

type DescribeImportOASTaskResponseBody struct {
	// The execution status of the subtask. Valid values:
	//
	// 	- RUNNING
	//
	// 	- WAIT
	//
	// 	- OVER
	//
	// 	- FAIL
	//
	// 	- CANCEL
	ApiResults *DescribeImportOASTaskResponseBodyApiResults `json:"ApiResults,omitempty" xml:"ApiResults,omitempty" type:"Struct"`
	// The execution status of the subtask. Valid values:
	//
	// 	- RUNNING
	//
	// 	- WAIT
	//
	// 	- OVER
	//
	// 	- FAIL
	//
	// 	- CANCEL
	ModelResults *DescribeImportOASTaskResponseBodyModelResults `json:"ModelResults,omitempty" xml:"ModelResults,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// CE5722A6-AE78-4741-A9B0-6C817D360510
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the import task. Valid values:
	//
	// 	- Running
	//
	// 	- Finished
	//
	// example:
	//
	// Finished
	TaskStatus *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
}

func (s DescribeImportOASTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImportOASTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImportOASTaskResponseBody) SetApiResults(v *DescribeImportOASTaskResponseBodyApiResults) *DescribeImportOASTaskResponseBody {
	s.ApiResults = v
	return s
}

func (s *DescribeImportOASTaskResponseBody) SetModelResults(v *DescribeImportOASTaskResponseBodyModelResults) *DescribeImportOASTaskResponseBody {
	s.ModelResults = v
	return s
}

func (s *DescribeImportOASTaskResponseBody) SetRequestId(v string) *DescribeImportOASTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImportOASTaskResponseBody) SetTaskStatus(v string) *DescribeImportOASTaskResponseBody {
	s.TaskStatus = &v
	return s
}

type DescribeImportOASTaskResponseBodyApiResults struct {
	ApiResult []*DescribeImportOASTaskResponseBodyApiResultsApiResult `json:"ApiResult,omitempty" xml:"ApiResult,omitempty" type:"Repeated"`
}

func (s DescribeImportOASTaskResponseBodyApiResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeImportOASTaskResponseBodyApiResults) GoString() string {
	return s.String()
}

func (s *DescribeImportOASTaskResponseBodyApiResults) SetApiResult(v []*DescribeImportOASTaskResponseBodyApiResultsApiResult) *DescribeImportOASTaskResponseBodyApiResults {
	s.ApiResult = v
	return s
}

type DescribeImportOASTaskResponseBodyApiResultsApiResult struct {
	// example:
	//
	// c5a0c2900ff746b789c007545be22fb8
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// example:
	//
	// GetByCreatorIdUsingGET
	ApiName     *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// Internal Error
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 736508d885074167ba8fbce3bc95ea0b
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// GET
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// example:
	//
	// /creator/getByCreatorId
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// WAIT
	UpdateStatus *string `json:"UpdateStatus,omitempty" xml:"UpdateStatus,omitempty"`
}

func (s DescribeImportOASTaskResponseBodyApiResultsApiResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeImportOASTaskResponseBodyApiResultsApiResult) GoString() string {
	return s.String()
}

func (s *DescribeImportOASTaskResponseBodyApiResultsApiResult) SetApiId(v string) *DescribeImportOASTaskResponseBodyApiResultsApiResult {
	s.ApiId = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyApiResultsApiResult) SetApiName(v string) *DescribeImportOASTaskResponseBodyApiResultsApiResult {
	s.ApiName = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyApiResultsApiResult) SetDescription(v string) *DescribeImportOASTaskResponseBodyApiResultsApiResult {
	s.Description = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyApiResultsApiResult) SetErrorMessage(v string) *DescribeImportOASTaskResponseBodyApiResultsApiResult {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyApiResultsApiResult) SetGroupId(v string) *DescribeImportOASTaskResponseBodyApiResultsApiResult {
	s.GroupId = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyApiResultsApiResult) SetMethod(v string) *DescribeImportOASTaskResponseBodyApiResultsApiResult {
	s.Method = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyApiResultsApiResult) SetPath(v string) *DescribeImportOASTaskResponseBodyApiResultsApiResult {
	s.Path = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyApiResultsApiResult) SetUpdateStatus(v string) *DescribeImportOASTaskResponseBodyApiResultsApiResult {
	s.UpdateStatus = &v
	return s
}

type DescribeImportOASTaskResponseBodyModelResults struct {
	ModelResult []*DescribeImportOASTaskResponseBodyModelResultsModelResult `json:"ModelResult,omitempty" xml:"ModelResult,omitempty" type:"Repeated"`
}

func (s DescribeImportOASTaskResponseBodyModelResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeImportOASTaskResponseBodyModelResults) GoString() string {
	return s.String()
}

func (s *DescribeImportOASTaskResponseBodyModelResults) SetModelResult(v []*DescribeImportOASTaskResponseBodyModelResultsModelResult) *DescribeImportOASTaskResponseBodyModelResults {
	s.ModelResult = v
	return s
}

type DescribeImportOASTaskResponseBodyModelResultsModelResult struct {
	// example:
	//
	// Internal Error
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 736508d885074167ba8fbce3bc95ea0b
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 6b48d724c921415486e190c494dd6bf8
	ModelId *string `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	// example:
	//
	// Pet
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	// example:
	//
	// FAIL
	UpdateStatus *string `json:"UpdateStatus,omitempty" xml:"UpdateStatus,omitempty"`
}

func (s DescribeImportOASTaskResponseBodyModelResultsModelResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeImportOASTaskResponseBodyModelResultsModelResult) GoString() string {
	return s.String()
}

func (s *DescribeImportOASTaskResponseBodyModelResultsModelResult) SetErrorMessage(v string) *DescribeImportOASTaskResponseBodyModelResultsModelResult {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyModelResultsModelResult) SetGroupId(v string) *DescribeImportOASTaskResponseBodyModelResultsModelResult {
	s.GroupId = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyModelResultsModelResult) SetModelId(v string) *DescribeImportOASTaskResponseBodyModelResultsModelResult {
	s.ModelId = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyModelResultsModelResult) SetModelName(v string) *DescribeImportOASTaskResponseBodyModelResultsModelResult {
	s.ModelName = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyModelResultsModelResult) SetUpdateStatus(v string) *DescribeImportOASTaskResponseBodyModelResultsModelResult {
	s.UpdateStatus = &v
	return s
}

type DescribeImportOASTaskResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeImportOASTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeImportOASTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImportOASTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeImportOASTaskResponse) SetHeaders(v map[string]*string) *DescribeImportOASTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeImportOASTaskResponse) SetStatusCode(v int32) *DescribeImportOASTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImportOASTaskResponse) SetBody(v *DescribeImportOASTaskResponseBody) *DescribeImportOASTaskResponse {
	s.Body = v
	return s
}

type DescribeInstanceDropConnectionsRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2023-01-31T07:00:09Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the dedicated instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// apigateway-cn-n6w1v1234501
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The statistical metric. Valid values:
	//
	// 	- Maximum
	//
	// 	- Minimum
	//
	// 	- Average
	//
	// This parameter is required.
	//
	// example:
	//
	// Maximum
	SbcName       *string `json:"SbcName,omitempty" xml:"SbcName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2023-01-31T06:00:09Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceDropConnectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropConnectionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropConnectionsRequest) SetEndTime(v string) *DescribeInstanceDropConnectionsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceDropConnectionsRequest) SetInstanceId(v string) *DescribeInstanceDropConnectionsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceDropConnectionsRequest) SetSbcName(v string) *DescribeInstanceDropConnectionsRequest {
	s.SbcName = &v
	return s
}

func (s *DescribeInstanceDropConnectionsRequest) SetSecurityToken(v string) *DescribeInstanceDropConnectionsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstanceDropConnectionsRequest) SetStartTime(v string) *DescribeInstanceDropConnectionsRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceDropConnectionsResponseBody struct {
	// The list of dropped connections in the instance.
	InstanceDropConnections *DescribeInstanceDropConnectionsResponseBodyInstanceDropConnections `json:"InstanceDropConnections,omitempty" xml:"InstanceDropConnections,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceDropConnectionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropConnectionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropConnectionsResponseBody) SetInstanceDropConnections(v *DescribeInstanceDropConnectionsResponseBodyInstanceDropConnections) *DescribeInstanceDropConnectionsResponseBody {
	s.InstanceDropConnections = v
	return s
}

func (s *DescribeInstanceDropConnectionsResponseBody) SetRequestId(v string) *DescribeInstanceDropConnectionsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceDropConnectionsResponseBodyInstanceDropConnections struct {
	MonitorItem []*DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstanceDropConnectionsResponseBodyInstanceDropConnections) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropConnectionsResponseBodyInstanceDropConnections) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropConnectionsResponseBodyInstanceDropConnections) SetMonitorItem(v []*DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem) *DescribeInstanceDropConnectionsResponseBodyInstanceDropConnections {
	s.MonitorItem = v
	return s
}

type DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem struct {
	// The monitoring time. The time follows the ISO 8601 standard. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// example:
	//
	// 2023-01-31T01:11:00Z
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The number of dropped packets in the instance.
	//
	// example:
	//
	// 0.0
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem) SetItemTime(v string) *DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem) SetItemValue(v string) *DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstanceDropConnectionsResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceDropConnectionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceDropConnectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropConnectionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropConnectionsResponse) SetHeaders(v map[string]*string) *DescribeInstanceDropConnectionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceDropConnectionsResponse) SetStatusCode(v int32) *DescribeInstanceDropConnectionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceDropConnectionsResponse) SetBody(v *DescribeInstanceDropConnectionsResponseBody) *DescribeInstanceDropConnectionsResponse {
	s.Body = v
	return s
}

type DescribeInstanceDropPacketRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-12-16T02:04:36Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// apigateway-cn-v641b9dxc00p
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The statistical metric. Valid values:
	//
	// 	- Maximum
	//
	// 	- Minimum
	//
	// 	- Average
	//
	// This parameter is required.
	//
	// example:
	//
	// Maximum
	SbcName       *string `json:"SbcName,omitempty" xml:"SbcName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-09-06T04:00:36Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceDropPacketRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropPacketRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropPacketRequest) SetEndTime(v string) *DescribeInstanceDropPacketRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceDropPacketRequest) SetInstanceId(v string) *DescribeInstanceDropPacketRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceDropPacketRequest) SetSbcName(v string) *DescribeInstanceDropPacketRequest {
	s.SbcName = &v
	return s
}

func (s *DescribeInstanceDropPacketRequest) SetSecurityToken(v string) *DescribeInstanceDropPacketRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstanceDropPacketRequest) SetStartTime(v string) *DescribeInstanceDropPacketRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceDropPacketResponseBody struct {
	// The list of dropped packets in the instance.
	InstanceDropPacket *DescribeInstanceDropPacketResponseBodyInstanceDropPacket `json:"InstanceDropPacket,omitempty" xml:"InstanceDropPacket,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ001
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceDropPacketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropPacketResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropPacketResponseBody) SetInstanceDropPacket(v *DescribeInstanceDropPacketResponseBodyInstanceDropPacket) *DescribeInstanceDropPacketResponseBody {
	s.InstanceDropPacket = v
	return s
}

func (s *DescribeInstanceDropPacketResponseBody) SetRequestId(v string) *DescribeInstanceDropPacketResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceDropPacketResponseBodyInstanceDropPacket struct {
	MonitorItem []*DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstanceDropPacketResponseBodyInstanceDropPacket) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropPacketResponseBodyInstanceDropPacket) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropPacketResponseBodyInstanceDropPacket) SetMonitorItem(v []*DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem) *DescribeInstanceDropPacketResponseBodyInstanceDropPacket {
	s.MonitorItem = v
	return s
}

type DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem struct {
	// The metric. Valid values:
	//
	// 	- InstanceDropPacketRX: the number of inbound packets dropped in the instance per second.
	//
	// 	- InstanceDropPacketTX: the number of outbound packets dropped in the instance per second.
	//
	// example:
	//
	// InstanceDropPacketRX
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The monitoring time. The time follows the ISO 8601 standard. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// example:
	//
	// 2022-09-06T04:00:36Z
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The number of dropped packets in the instance.
	//
	// example:
	//
	// 0.0
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem) SetItem(v string) *DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem {
	s.Item = &v
	return s
}

func (s *DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem) SetItemTime(v string) *DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem) SetItemValue(v string) *DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstanceDropPacketResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceDropPacketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceDropPacketResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropPacketResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropPacketResponse) SetHeaders(v map[string]*string) *DescribeInstanceDropPacketResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceDropPacketResponse) SetStatusCode(v int32) *DescribeInstanceDropPacketResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceDropPacketResponse) SetBody(v *DescribeInstanceDropPacketResponseBody) *DescribeInstanceDropPacketResponse {
	s.Body = v
	return s
}

type DescribeInstanceHttpCodeRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-07-21T06:05:52Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// apigateway-cn-m7r227yy2004
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment in which the API is requested. Valid values:
	//
	// 	- **RELEASE**: the production environment
	//
	// 	- **PRE**: the pre-release environment
	//
	// 	- **TEST**: the test environment
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-04-14T02:12:10Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceHttpCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHttpCodeRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHttpCodeRequest) SetEndTime(v string) *DescribeInstanceHttpCodeRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceHttpCodeRequest) SetInstanceId(v string) *DescribeInstanceHttpCodeRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceHttpCodeRequest) SetSecurityToken(v string) *DescribeInstanceHttpCodeRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstanceHttpCodeRequest) SetStageName(v string) *DescribeInstanceHttpCodeRequest {
	s.StageName = &v
	return s
}

func (s *DescribeInstanceHttpCodeRequest) SetStartTime(v string) *DescribeInstanceHttpCodeRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceHttpCodeResponseBody struct {
	// The HTTP status codes.
	InstanceHttpCode *DescribeInstanceHttpCodeResponseBodyInstanceHttpCode `json:"InstanceHttpCode,omitempty" xml:"InstanceHttpCode,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// AD00F8C0-311B-54A9-ADE2-2436771012DA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceHttpCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHttpCodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHttpCodeResponseBody) SetInstanceHttpCode(v *DescribeInstanceHttpCodeResponseBodyInstanceHttpCode) *DescribeInstanceHttpCodeResponseBody {
	s.InstanceHttpCode = v
	return s
}

func (s *DescribeInstanceHttpCodeResponseBody) SetRequestId(v string) *DescribeInstanceHttpCodeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceHttpCodeResponseBodyInstanceHttpCode struct {
	MonitorItem []*DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstanceHttpCodeResponseBodyInstanceHttpCode) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHttpCodeResponseBodyInstanceHttpCode) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHttpCodeResponseBodyInstanceHttpCode) SetMonitorItem(v []*DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem) *DescribeInstanceHttpCodeResponseBodyInstanceHttpCode {
	s.MonitorItem = v
	return s
}

type DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem struct {
	// The HTTP status code returned.
	//
	// example:
	//
	// 404
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The corresponding value.
	//
	// example:
	//
	// 1
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem) SetItemTime(v string) *DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem) SetItemValue(v string) *DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstanceHttpCodeResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceHttpCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceHttpCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHttpCodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHttpCodeResponse) SetHeaders(v map[string]*string) *DescribeInstanceHttpCodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceHttpCodeResponse) SetStatusCode(v int32) *DescribeInstanceHttpCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceHttpCodeResponse) SetBody(v *DescribeInstanceHttpCodeResponseBody) *DescribeInstanceHttpCodeResponse {
	s.Body = v
	return s
}

type DescribeInstanceLatencyRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-09-06T02:05:13Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// apigateway-cn-v641jf5tt01v
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment in which the API is requested. Valid values:
	//
	// 	- **RELEASE**: the production environment
	//
	// 	- **PRE**: the pre-release environment
	//
	// 	- **TEST**: the test environment
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-09-15T11:07:05Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceLatencyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceLatencyRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceLatencyRequest) SetEndTime(v string) *DescribeInstanceLatencyRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceLatencyRequest) SetInstanceId(v string) *DescribeInstanceLatencyRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceLatencyRequest) SetSecurityToken(v string) *DescribeInstanceLatencyRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstanceLatencyRequest) SetStageName(v string) *DescribeInstanceLatencyRequest {
	s.StageName = &v
	return s
}

func (s *DescribeInstanceLatencyRequest) SetStartTime(v string) *DescribeInstanceLatencyRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceLatencyResponseBody struct {
	// The list of average latencies in the instance.
	InstanceLatency *DescribeInstanceLatencyResponseBodyInstanceLatency `json:"InstanceLatency,omitempty" xml:"InstanceLatency,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceLatencyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceLatencyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceLatencyResponseBody) SetInstanceLatency(v *DescribeInstanceLatencyResponseBodyInstanceLatency) *DescribeInstanceLatencyResponseBody {
	s.InstanceLatency = v
	return s
}

func (s *DescribeInstanceLatencyResponseBody) SetRequestId(v string) *DescribeInstanceLatencyResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceLatencyResponseBodyInstanceLatency struct {
	MonitorItem []*DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstanceLatencyResponseBodyInstanceLatency) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceLatencyResponseBodyInstanceLatency) GoString() string {
	return s.String()
}

func (s *DescribeInstanceLatencyResponseBodyInstanceLatency) SetMonitorItem(v []*DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem) *DescribeInstanceLatencyResponseBodyInstanceLatency {
	s.MonitorItem = v
	return s
}

type DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem struct {
	// The metric. Valid values:
	//
	// 	- gatewayLatency API: the processing latency of API Gateway
	//
	// 	- latency: the processing latency of the backend service.
	//
	// example:
	//
	// latency
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// example:
	//
	// 2022-09-06T02:05:13Z
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The value of the average latency.
	//
	// example:
	//
	// 10
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem) SetItem(v string) *DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem {
	s.Item = &v
	return s
}

func (s *DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem) SetItemTime(v string) *DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem) SetItemValue(v string) *DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstanceLatencyResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceLatencyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceLatencyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceLatencyResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceLatencyResponse) SetHeaders(v map[string]*string) *DescribeInstanceLatencyResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceLatencyResponse) SetStatusCode(v int32) *DescribeInstanceLatencyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceLatencyResponse) SetBody(v *DescribeInstanceLatencyResponseBody) *DescribeInstanceLatencyResponse {
	s.Body = v
	return s
}

type DescribeInstanceNewConnectionsRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-10-08T02:08:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// apigateway-cn-2r426lavr001
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The statistical metric. Valid values:
	//
	// 	- Maximum
	//
	// 	- Minimum
	//
	// 	- Average
	//
	// This parameter is required.
	//
	// example:
	//
	// Maximum
	SbcName       *string `json:"SbcName,omitempty" xml:"SbcName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-10-01T02:08:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceNewConnectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceNewConnectionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceNewConnectionsRequest) SetEndTime(v string) *DescribeInstanceNewConnectionsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceNewConnectionsRequest) SetInstanceId(v string) *DescribeInstanceNewConnectionsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceNewConnectionsRequest) SetSbcName(v string) *DescribeInstanceNewConnectionsRequest {
	s.SbcName = &v
	return s
}

func (s *DescribeInstanceNewConnectionsRequest) SetSecurityToken(v string) *DescribeInstanceNewConnectionsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstanceNewConnectionsRequest) SetStartTime(v string) *DescribeInstanceNewConnectionsRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceNewConnectionsResponseBody struct {
	// The list of new connections in the instance.
	InstanceNewConnections *DescribeInstanceNewConnectionsResponseBodyInstanceNewConnections `json:"InstanceNewConnections,omitempty" xml:"InstanceNewConnections,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceNewConnectionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceNewConnectionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceNewConnectionsResponseBody) SetInstanceNewConnections(v *DescribeInstanceNewConnectionsResponseBodyInstanceNewConnections) *DescribeInstanceNewConnectionsResponseBody {
	s.InstanceNewConnections = v
	return s
}

func (s *DescribeInstanceNewConnectionsResponseBody) SetRequestId(v string) *DescribeInstanceNewConnectionsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceNewConnectionsResponseBodyInstanceNewConnections struct {
	MonitorItem []*DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstanceNewConnectionsResponseBodyInstanceNewConnections) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceNewConnectionsResponseBodyInstanceNewConnections) GoString() string {
	return s.String()
}

func (s *DescribeInstanceNewConnectionsResponseBodyInstanceNewConnections) SetMonitorItem(v []*DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem) *DescribeInstanceNewConnectionsResponseBodyInstanceNewConnections {
	s.MonitorItem = v
	return s
}

type DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem struct {
	// The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// example:
	//
	// 2022-10-08T02:08:00Z
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The number of new connections in the instance.
	//
	// example:
	//
	// 16
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem) SetItemTime(v string) *DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem) SetItemValue(v string) *DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstanceNewConnectionsResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceNewConnectionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceNewConnectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceNewConnectionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceNewConnectionsResponse) SetHeaders(v map[string]*string) *DescribeInstanceNewConnectionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceNewConnectionsResponse) SetStatusCode(v int32) *DescribeInstanceNewConnectionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceNewConnectionsResponse) SetBody(v *DescribeInstanceNewConnectionsResponseBody) *DescribeInstanceNewConnectionsResponse {
	s.Body = v
	return s
}

type DescribeInstancePacketsRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-05-24T10:14:53Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// apigateway-cn-2r426lavr001
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The statistical metric. Valid values:
	//
	// 	- Maximum
	//
	// 	- Minimum
	//
	// 	- Average
	//
	// This parameter is required.
	//
	// example:
	//
	// Maximum
	SbcName       *string `json:"SbcName,omitempty" xml:"SbcName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-05-18T01:14:26Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstancePacketsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancePacketsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstancePacketsRequest) SetEndTime(v string) *DescribeInstancePacketsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstancePacketsRequest) SetInstanceId(v string) *DescribeInstancePacketsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancePacketsRequest) SetSbcName(v string) *DescribeInstancePacketsRequest {
	s.SbcName = &v
	return s
}

func (s *DescribeInstancePacketsRequest) SetSecurityToken(v string) *DescribeInstancePacketsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstancePacketsRequest) SetStartTime(v string) *DescribeInstancePacketsRequest {
	s.StartTime = &v
	return s
}

type DescribeInstancePacketsResponseBody struct {
	// The list of inbound and outbound data packets in the instance.
	InstancePackets *DescribeInstancePacketsResponseBodyInstancePackets `json:"InstancePackets,omitempty" xml:"InstancePackets,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstancePacketsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancePacketsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstancePacketsResponseBody) SetInstancePackets(v *DescribeInstancePacketsResponseBodyInstancePackets) *DescribeInstancePacketsResponseBody {
	s.InstancePackets = v
	return s
}

func (s *DescribeInstancePacketsResponseBody) SetRequestId(v string) *DescribeInstancePacketsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstancePacketsResponseBodyInstancePackets struct {
	MonitorItem []*DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstancePacketsResponseBodyInstancePackets) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancePacketsResponseBodyInstancePackets) GoString() string {
	return s.String()
}

func (s *DescribeInstancePacketsResponseBodyInstancePackets) SetMonitorItem(v []*DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem) *DescribeInstancePacketsResponseBodyInstancePackets {
	s.MonitorItem = v
	return s
}

type DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem struct {
	// The metric. Valid values:
	//
	// 	- InstancePacketRX: inbound data packets
	//
	// 	- InstancePacketTX: outbound data packets
	//
	// example:
	//
	// InstancePacketRX
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// example:
	//
	// 2022-05-24T10:14:53Z
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The number of inbound and outbound data packets in the instance.
	//
	// example:
	//
	// 0
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem) SetItem(v string) *DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem {
	s.Item = &v
	return s
}

func (s *DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem) SetItemTime(v string) *DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem) SetItemValue(v string) *DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstancePacketsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstancePacketsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstancePacketsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancePacketsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstancePacketsResponse) SetHeaders(v map[string]*string) *DescribeInstancePacketsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstancePacketsResponse) SetStatusCode(v int32) *DescribeInstancePacketsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstancePacketsResponse) SetBody(v *DescribeInstancePacketsResponseBody) *DescribeInstancePacketsResponse {
	s.Body = v
	return s
}

type DescribeInstanceQpsRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-03-29T06:25:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// apigateway-bj-6c219f1fd5d4
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment in which the API is requested. Valid values:
	//
	// 	- **RELEASE**: the production environment
	//
	// 	- **PRE**: the pre-release environment
	//
	// 	- **TEST**: the test environment
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-02-10T06:03:47Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceQpsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceQpsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceQpsRequest) SetEndTime(v string) *DescribeInstanceQpsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceQpsRequest) SetInstanceId(v string) *DescribeInstanceQpsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceQpsRequest) SetSecurityToken(v string) *DescribeInstanceQpsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstanceQpsRequest) SetStageName(v string) *DescribeInstanceQpsRequest {
	s.StageName = &v
	return s
}

func (s *DescribeInstanceQpsRequest) SetStartTime(v string) *DescribeInstanceQpsRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceQpsResponseBody struct {
	// The list of requests sent to the APIs in the instance.
	InstanceQps *DescribeInstanceQpsResponseBodyInstanceQps `json:"InstanceQps,omitempty" xml:"InstanceQps,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceQpsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceQpsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceQpsResponseBody) SetInstanceQps(v *DescribeInstanceQpsResponseBodyInstanceQps) *DescribeInstanceQpsResponseBody {
	s.InstanceQps = v
	return s
}

func (s *DescribeInstanceQpsResponseBody) SetRequestId(v string) *DescribeInstanceQpsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceQpsResponseBodyInstanceQps struct {
	MonitorItem []*DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstanceQpsResponseBodyInstanceQps) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceQpsResponseBodyInstanceQps) GoString() string {
	return s.String()
}

func (s *DescribeInstanceQpsResponseBodyInstanceQps) SetMonitorItem(v []*DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem) *DescribeInstanceQpsResponseBodyInstanceQps {
	s.MonitorItem = v
	return s
}

type DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem struct {
	// The monitoring time. The time follows the ISO 8601 standard. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// example:
	//
	// 2022-03-29T06:25:00Z
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The number of requests sent to the APIs in the instance.
	//
	// example:
	//
	// 500
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem) SetItemTime(v string) *DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem) SetItemValue(v string) *DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstanceQpsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceQpsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceQpsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceQpsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceQpsResponse) SetHeaders(v map[string]*string) *DescribeInstanceQpsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceQpsResponse) SetStatusCode(v int32) *DescribeInstanceQpsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceQpsResponse) SetBody(v *DescribeInstanceQpsResponseBody) *DescribeInstanceQpsResponse {
	s.Body = v
	return s
}

type DescribeInstanceSlbConnectRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-09-15T15:07:06Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// apigateway-sz-1574cc7c5a31
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The statistical metric. Valid values:
	//
	// 	- Maximum
	//
	// 	- Minimum
	//
	// 	- Average
	//
	// This parameter is required.
	//
	// example:
	//
	// Maximum
	SbcName       *string `json:"SbcName,omitempty" xml:"SbcName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-09-01T02:09:33Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceSlbConnectRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSlbConnectRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSlbConnectRequest) SetEndTime(v string) *DescribeInstanceSlbConnectRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceSlbConnectRequest) SetInstanceId(v string) *DescribeInstanceSlbConnectRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceSlbConnectRequest) SetSbcName(v string) *DescribeInstanceSlbConnectRequest {
	s.SbcName = &v
	return s
}

func (s *DescribeInstanceSlbConnectRequest) SetSecurityToken(v string) *DescribeInstanceSlbConnectRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstanceSlbConnectRequest) SetStartTime(v string) *DescribeInstanceSlbConnectRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceSlbConnectResponseBody struct {
	// The list of concurrent connections in the instance.
	InstanceSlbConnect *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnect `json:"InstanceSlbConnect,omitempty" xml:"InstanceSlbConnect,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// E7FE7172-AA75-5880-B6F7-C00893E9BC06
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceSlbConnectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSlbConnectResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSlbConnectResponseBody) SetInstanceSlbConnect(v *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnect) *DescribeInstanceSlbConnectResponseBody {
	s.InstanceSlbConnect = v
	return s
}

func (s *DescribeInstanceSlbConnectResponseBody) SetRequestId(v string) *DescribeInstanceSlbConnectResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceSlbConnectResponseBodyInstanceSlbConnect struct {
	MonitorItem []*DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstanceSlbConnectResponseBodyInstanceSlbConnect) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSlbConnectResponseBodyInstanceSlbConnect) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnect) SetMonitorItem(v []*DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem) *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnect {
	s.MonitorItem = v
	return s
}

type DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem struct {
	// The metric. Valid values:
	//
	// 	- InstanceMaxConnection: the maximum number of connections
	//
	// 	- InstanceInactiveConnection: the number of inactive connections
	//
	// 	- InstanceActiveConnection: the number of active connections
	//
	// example:
	//
	// InstanceActiveConnection
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// example:
	//
	// 2022-09-15T15:07:06Z
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The number of concurrent connections in the instance.
	//
	// example:
	//
	// 12
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem) SetItem(v string) *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem {
	s.Item = &v
	return s
}

func (s *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem) SetItemTime(v string) *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem) SetItemValue(v string) *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstanceSlbConnectResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceSlbConnectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceSlbConnectResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSlbConnectResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSlbConnectResponse) SetHeaders(v map[string]*string) *DescribeInstanceSlbConnectResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceSlbConnectResponse) SetStatusCode(v int32) *DescribeInstanceSlbConnectResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceSlbConnectResponse) SetBody(v *DescribeInstanceSlbConnectResponseBody) *DescribeInstanceSlbConnectResponse {
	s.Body = v
	return s
}

type DescribeInstanceTrafficRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-04-01T06:34:03Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// apigateway-cn-2r426lavr001
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment in which the API runs. Valid values:
	//
	// 	- **RELEASE**: the production environment
	//
	// 	- **PRE**: the pre-release environment
	//
	// 	- **TEST: the test environment**
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-03-31T03:42:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceTrafficRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTrafficRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTrafficRequest) SetEndTime(v string) *DescribeInstanceTrafficRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceTrafficRequest) SetInstanceId(v string) *DescribeInstanceTrafficRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceTrafficRequest) SetSecurityToken(v string) *DescribeInstanceTrafficRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstanceTrafficRequest) SetStageName(v string) *DescribeInstanceTrafficRequest {
	s.StageName = &v
	return s
}

func (s *DescribeInstanceTrafficRequest) SetStartTime(v string) *DescribeInstanceTrafficRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceTrafficResponseBody struct {
	// The traffic consumed by the requests and responses in the instance.
	InstanceTraffic *DescribeInstanceTrafficResponseBodyInstanceTraffic `json:"InstanceTraffic,omitempty" xml:"InstanceTraffic,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceTrafficResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTrafficResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTrafficResponseBody) SetInstanceTraffic(v *DescribeInstanceTrafficResponseBodyInstanceTraffic) *DescribeInstanceTrafficResponseBody {
	s.InstanceTraffic = v
	return s
}

func (s *DescribeInstanceTrafficResponseBody) SetRequestId(v string) *DescribeInstanceTrafficResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceTrafficResponseBodyInstanceTraffic struct {
	MonitorItem []*DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstanceTrafficResponseBodyInstanceTraffic) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTrafficResponseBodyInstanceTraffic) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTrafficResponseBodyInstanceTraffic) SetMonitorItem(v []*DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem) *DescribeInstanceTrafficResponseBodyInstanceTraffic {
	s.MonitorItem = v
	return s
}

type DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem struct {
	// The metric. Valid values:
	//
	// 	- inbound: traffic consumed by requests
	//
	// 	- outbound: traffic consumed by responses
	//
	// example:
	//
	// inbound
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	//
	// example:
	//
	// 2022-04-01T06:34:03Z
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The amount of traffic consumed by the requests and responses in the instance.
	//
	// example:
	//
	// 10
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem) SetItem(v string) *DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem {
	s.Item = &v
	return s
}

func (s *DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem) SetItemTime(v string) *DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem) SetItemValue(v string) *DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstanceTrafficResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceTrafficResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceTrafficResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTrafficResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTrafficResponse) SetHeaders(v map[string]*string) *DescribeInstanceTrafficResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceTrafficResponse) SetStatusCode(v int32) *DescribeInstanceTrafficResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceTrafficResponse) SetBody(v *DescribeInstanceTrafficResponseBody) *DescribeInstanceTrafficResponse {
	s.Body = v
	return s
}

type DescribeInstancesRequest struct {
	// example:
	//
	// false
	EnableTagAuthorization *bool `json:"EnableTagAuthorization,omitempty" xml:"EnableTagAuthorization,omitempty"`
	// example:
	//
	// api-shared-vpc-001
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// zh
	Language      *string                        `json:"Language,omitempty" xml:"Language,omitempty"`
	SecurityToken *string                        `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag           []*DescribeInstancesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstancesRequest) SetEnableTagAuthorization(v bool) *DescribeInstancesRequest {
	s.EnableTagAuthorization = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceId(v string) *DescribeInstancesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancesRequest) SetLanguage(v string) *DescribeInstancesRequest {
	s.Language = &v
	return s
}

func (s *DescribeInstancesRequest) SetSecurityToken(v string) *DescribeInstancesRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstancesRequest) SetTag(v []*DescribeInstancesRequestTag) *DescribeInstancesRequest {
	s.Tag = v
	return s
}

type DescribeInstancesRequestTag struct {
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeInstancesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeInstancesRequestTag) SetKey(v string) *DescribeInstancesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeInstancesRequestTag) SetValue(v string) *DescribeInstancesRequestTag {
	s.Value = &v
	return s
}

type DescribeInstancesResponseBody struct {
	Instances *DescribeInstancesResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Struct"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// CEB6EC62-B6C7-5082-A45A-45A204724AC2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBody) SetInstances(v *DescribeInstancesResponseBodyInstances) *DescribeInstancesResponseBody {
	s.Instances = v
	return s
}

func (s *DescribeInstancesResponseBody) SetPageNumber(v int32) *DescribeInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetPageSize(v int32) *DescribeInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetRequestId(v string) *DescribeInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetTotalCount(v int32) *DescribeInstancesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeInstancesResponseBodyInstances struct {
	InstanceAttribute []*DescribeInstancesResponseBodyInstancesInstanceAttribute `json:"InstanceAttribute,omitempty" xml:"InstanceAttribute,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstances) SetInstanceAttribute(v []*DescribeInstancesResponseBodyInstancesInstanceAttribute) *DescribeInstancesResponseBodyInstances {
	s.InstanceAttribute = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceAttribute struct {
	// example:
	//
	// acl-uf6f9zfxfxtp5j9ng3yv4
	AclId *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	// example:
	//
	// test
	AclName *string `json:"AclName,omitempty" xml:"AclName,omitempty"`
	// example:
	//
	// on
	AclStatus *string `json:"AclStatus,omitempty" xml:"AclStatus,omitempty"`
	// example:
	//
	// white
	AclType *string `json:"AclType,omitempty" xml:"AclType,omitempty"`
	// example:
	//
	// 10.0.0.1
	ClassicEgressAddress *string `json:"ClassicEgressAddress,omitempty" xml:"ClassicEgressAddress,omitempty"`
	ConnectCidrBlocks    *string `json:"ConnectCidrBlocks,omitempty" xml:"ConnectCidrBlocks,omitempty"`
	// VPC融合类型专享实例联通的用户VPC ID
	//
	// example:
	//
	// vpc-m5eo7khlb4h4f8y9egsdg
	ConnectVpcId *string `json:"ConnectVpcId,omitempty" xml:"ConnectVpcId,omitempty"`
	// example:
	//
	// 2021-10-22 15:36:53.0
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// 专享实例类型
	//
	// - vpc_connect：VPC融合类型专享实例
	//
	// - normal：传统类型专享实例
	//
	// example:
	//
	// vpc_connect
	DedicatedInstanceType *string `json:"DedicatedInstanceType,omitempty" xml:"DedicatedInstanceType,omitempty"`
	// example:
	//
	// true
	EgressIpv6Enable *bool `json:"EgressIpv6Enable,omitempty" xml:"EgressIpv6Enable,omitempty"`
	// example:
	//
	// 1659801600000
	ExpiredTime *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// example:
	//
	// HTTPS2_TLS1_2
	HttpsPolicies *string `json:"HttpsPolicies,omitempty" xml:"HttpsPolicies,omitempty"`
	// example:
	//
	// acl-124resFfs235
	IPV6AclId *string `json:"IPV6AclId,omitempty" xml:"IPV6AclId,omitempty"`
	// example:
	//
	// testIPV6
	IPV6AclName *string `json:"IPV6AclName,omitempty" xml:"IPV6AclName,omitempty"`
	// example:
	//
	// on
	IPV6AclStatus *string `json:"IPV6AclStatus,omitempty" xml:"IPV6AclStatus,omitempty"`
	// example:
	//
	// black
	IPV6AclType *string `json:"IPV6AclType,omitempty" xml:"IPV6AclType,omitempty"`
	// example:
	//
	// PrePaid
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	// 专享实例所在网段
	//
	// - 172.16.0.0/12
	//
	// - 192.168.0.0/16
	//
	// example:
	//
	// 192.168.0.0/16
	InstanceCidrBlock *string `json:"InstanceCidrBlock,omitempty" xml:"InstanceCidrBlock,omitempty"`
	InstanceClusterId *string `json:"InstanceClusterId,omitempty" xml:"InstanceClusterId,omitempty"`
	// example:
	//
	// api-shared-vpc-020
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// test
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// example:
	//
	// 500
	InstanceRpsLimit *int32 `json:"InstanceRpsLimit,omitempty" xml:"InstanceRpsLimit,omitempty"`
	// example:
	//
	// api.s1.small
	InstanceSpec           *string                                                                        `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	InstanceSpecAttributes *DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributes `json:"InstanceSpecAttributes,omitempty" xml:"InstanceSpecAttributes,omitempty" type:"Struct"`
	// example:
	//
	// VPC_SHARED
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// example:
	//
	// 47.241.89.244
	InternetEgressAddress *string `json:"InternetEgressAddress,omitempty" xml:"InternetEgressAddress,omitempty"`
	IntranetSegments      *string `json:"IntranetSegments,omitempty" xml:"IntranetSegments,omitempty"`
	MaintainEndTime       *string `json:"MaintainEndTime,omitempty" xml:"MaintainEndTime,omitempty"`
	MaintainStartTime     *string `json:"MaintainStartTime,omitempty" xml:"MaintainStartTime,omitempty"`
	// VPC融合类型专享实例连通的用户VPC内的网络信息
	NetworkInterfaceAttributes *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributes `json:"NetworkInterfaceAttributes,omitempty" xml:"NetworkInterfaceAttributes,omitempty" type:"Struct"`
	PrivateDnsList             *DescribeInstancesResponseBodyInstancesInstanceAttributePrivateDnsList             `json:"PrivateDnsList,omitempty" xml:"PrivateDnsList,omitempty" type:"Struct"`
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// RUNNING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// true
	SupportIpv6 *bool                                                        `json:"SupportIpv6,omitempty" xml:"SupportIpv6,omitempty"`
	Tags        *DescribeInstancesResponseBodyInstancesInstanceAttributeTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	// example:
	//
	// vpc-t***hx****yu9****t0g4
	UserVpcId *string `json:"UserVpcId,omitempty" xml:"UserVpcId,omitempty"`
	// example:
	//
	// vsw-t4***eh****d7q****i2f
	UserVswitchId *string `json:"UserVswitchId,omitempty" xml:"UserVswitchId,omitempty"`
	// example:
	//
	// 100.104.254.0/26
	VpcEgressAddress *string `json:"VpcEgressAddress,omitempty" xml:"VpcEgressAddress,omitempty"`
	// example:
	//
	// true
	VpcIntranetEnable *bool  `json:"VpcIntranetEnable,omitempty" xml:"VpcIntranetEnable,omitempty"`
	VpcOwnerId        *int64 `json:"VpcOwnerId,omitempty" xml:"VpcOwnerId,omitempty"`
	// example:
	//
	// true
	VpcSlbIntranetEnable *bool `json:"VpcSlbIntranetEnable,omitempty" xml:"VpcSlbIntranetEnable,omitempty"`
	// example:
	//
	// cn-hangzhou-MAZ5(g,h)
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ZoneLocalName *string `json:"ZoneLocalName,omitempty" xml:"ZoneLocalName,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetAclId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.AclId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetAclName(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.AclName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetAclStatus(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.AclStatus = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetAclType(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.AclType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetClassicEgressAddress(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.ClassicEgressAddress = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetConnectCidrBlocks(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.ConnectCidrBlocks = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetConnectVpcId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.ConnectVpcId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetCreatedTime(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.CreatedTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetDedicatedInstanceType(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.DedicatedInstanceType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetEgressIpv6Enable(v bool) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.EgressIpv6Enable = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetExpiredTime(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetHttpsPolicies(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.HttpsPolicies = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetIPV6AclId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.IPV6AclId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetIPV6AclName(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.IPV6AclName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetIPV6AclStatus(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.IPV6AclStatus = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetIPV6AclType(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.IPV6AclType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceChargeType(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceCidrBlock(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceCidrBlock = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceClusterId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceClusterId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceName(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceRpsLimit(v int32) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceRpsLimit = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceSpec(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceSpec = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceSpecAttributes(v *DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributes) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceSpecAttributes = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceType(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInternetEgressAddress(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InternetEgressAddress = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetIntranetSegments(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.IntranetSegments = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetMaintainEndTime(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.MaintainEndTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetMaintainStartTime(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.MaintainStartTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetNetworkInterfaceAttributes(v *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributes) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.NetworkInterfaceAttributes = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetPrivateDnsList(v *DescribeInstancesResponseBodyInstancesInstanceAttributePrivateDnsList) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.PrivateDnsList = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetRegionId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetStatus(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.Status = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetSupportIpv6(v bool) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.SupportIpv6 = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetTags(v *DescribeInstancesResponseBodyInstancesInstanceAttributeTags) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.Tags = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetUserVpcId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.UserVpcId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetUserVswitchId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.UserVswitchId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetVpcEgressAddress(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.VpcEgressAddress = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetVpcIntranetEnable(v bool) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.VpcIntranetEnable = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetVpcOwnerId(v int64) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.VpcOwnerId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetVpcSlbIntranetEnable(v bool) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.VpcSlbIntranetEnable = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetZoneId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.ZoneId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetZoneLocalName(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.ZoneLocalName = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributes struct {
	SpecAttribute []*DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute `json:"SpecAttribute,omitempty" xml:"SpecAttribute,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributes) SetSpecAttribute(v []*DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute) *DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributes {
	s.SpecAttribute = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute struct {
	LocalName *string `json:"LocalName,omitempty" xml:"LocalName,omitempty"`
	// example:
	//
	// 2500
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute) SetLocalName(v string) *DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute {
	s.LocalName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute) SetValue(v string) *DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute {
	s.Value = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributes struct {
	NetworkInterfaceAttribute []*DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute `json:"NetworkInterfaceAttribute,omitempty" xml:"NetworkInterfaceAttribute,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributes) SetNetworkInterfaceAttribute(v []*DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute) *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributes {
	s.NetworkInterfaceAttribute = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute struct {
	// vSwitch的网段。
	//
	// example:
	//
	// 192.168.17.0/24
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// 安全组的ID，同一个安全组内的服务可以互相访问。
	//
	// example:
	//
	// sg-2zeehz13zcyj1kfk3o85
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// 虚拟交换机ID
	//
	// example:
	//
	// vsw-2zeqals6rbj51bhjn8b89
	VswitchId *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
	// 可用区ID
	//
	// example:
	//
	// cn-shenzhen-d
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute) SetCidrBlock(v string) *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute {
	s.CidrBlock = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute) SetSecurityGroupId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute) SetVswitchId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute {
	s.VswitchId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute) SetZoneId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute {
	s.ZoneId = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceAttributePrivateDnsList struct {
	PrivateDns []*string `json:"PrivateDns,omitempty" xml:"PrivateDns,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributePrivateDnsList) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributePrivateDnsList) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributePrivateDnsList) SetPrivateDns(v []*string) *DescribeInstancesResponseBodyInstancesInstanceAttributePrivateDnsList {
	s.PrivateDns = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceAttributeTags struct {
	TagInfo []*DescribeInstancesResponseBodyInstancesInstanceAttributeTagsTagInfo `json:"TagInfo,omitempty" xml:"TagInfo,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeTags) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeTags) SetTagInfo(v []*DescribeInstancesResponseBodyInstancesInstanceAttributeTagsTagInfo) *DescribeInstancesResponseBodyInstancesInstanceAttributeTags {
	s.TagInfo = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceAttributeTagsTagInfo struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeTagsTagInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeTagsTagInfo) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeTagsTagInfo) SetKey(v string) *DescribeInstancesResponseBodyInstancesInstanceAttributeTagsTagInfo {
	s.Key = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeTagsTagInfo) SetValue(v string) *DescribeInstancesResponseBodyInstancesInstanceAttributeTagsTagInfo {
	s.Value = &v
	return s
}

type DescribeInstancesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponse) SetHeaders(v map[string]*string) *DescribeInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstancesResponse) SetStatusCode(v int32) *DescribeInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstancesResponse) SetBody(v *DescribeInstancesResponseBody) *DescribeInstancesResponse {
	s.Body = v
	return s
}

type DescribeIpControlPolicyItemsRequest struct {
	// The ID of the ACL. The ID is unique.
	//
	// example:
	//
	// 7ea91319a34d48a09b5c9c871d9768b1
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the policy.
	//
	// example:
	//
	// P151617000829241
	PolicyItemId  *string `json:"PolicyItemId,omitempty" xml:"PolicyItemId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeIpControlPolicyItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlPolicyItemsRequest) GoString() string {
	return s.String()
}

func (s *DescribeIpControlPolicyItemsRequest) SetIpControlId(v string) *DescribeIpControlPolicyItemsRequest {
	s.IpControlId = &v
	return s
}

func (s *DescribeIpControlPolicyItemsRequest) SetPageNumber(v int32) *DescribeIpControlPolicyItemsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeIpControlPolicyItemsRequest) SetPageSize(v int32) *DescribeIpControlPolicyItemsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeIpControlPolicyItemsRequest) SetPolicyItemId(v string) *DescribeIpControlPolicyItemsRequest {
	s.PolicyItemId = &v
	return s
}

func (s *DescribeIpControlPolicyItemsRequest) SetSecurityToken(v string) *DescribeIpControlPolicyItemsRequest {
	s.SecurityToken = &v
	return s
}

type DescribeIpControlPolicyItemsResponseBody struct {
	// The information about policies. The information is an array of IpControlPolicyItem data.
	IpControlPolicyItems *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItems `json:"IpControlPolicyItems,omitempty" xml:"IpControlPolicyItems,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 2
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeIpControlPolicyItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlPolicyItemsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeIpControlPolicyItemsResponseBody) SetIpControlPolicyItems(v *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItems) *DescribeIpControlPolicyItemsResponseBody {
	s.IpControlPolicyItems = v
	return s
}

func (s *DescribeIpControlPolicyItemsResponseBody) SetPageNumber(v int32) *DescribeIpControlPolicyItemsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeIpControlPolicyItemsResponseBody) SetPageSize(v int32) *DescribeIpControlPolicyItemsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeIpControlPolicyItemsResponseBody) SetRequestId(v string) *DescribeIpControlPolicyItemsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeIpControlPolicyItemsResponseBody) SetTotalCount(v int32) *DescribeIpControlPolicyItemsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItems struct {
	IpControlPolicyItem []*DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem `json:"IpControlPolicyItem,omitempty" xml:"IpControlPolicyItem,omitempty" type:"Repeated"`
}

func (s DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItems) GoString() string {
	return s.String()
}

func (s *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItems) SetIpControlPolicyItem(v []*DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem) *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItems {
	s.IpControlPolicyItem = v
	return s
}

type DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem struct {
	// The ID of the application.
	//
	// example:
	//
	// 11112
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The IP addresses or CIDR blocks.
	//
	// example:
	//
	// 113.125.XX.XX;101.11.XX.XX
	CidrIp *string `json:"CidrIp,omitempty" xml:"CidrIp,omitempty"`
	// The time when the policy was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2018-01-17T06:20:08Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the policy was modified. The time is displayed in UTC.
	//
	// example:
	//
	// 2018-01-17T06:25:13Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The ID of the policy.
	//
	// example:
	//
	// P151617000829241
	PolicyItemId *string `json:"PolicyItemId,omitempty" xml:"PolicyItemId,omitempty"`
}

func (s DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem) GoString() string {
	return s.String()
}

func (s *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem) SetAppId(v string) *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem {
	s.AppId = &v
	return s
}

func (s *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem) SetCidrIp(v string) *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem {
	s.CidrIp = &v
	return s
}

func (s *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem) SetCreateTime(v string) *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem {
	s.CreateTime = &v
	return s
}

func (s *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem) SetModifiedTime(v string) *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem) SetPolicyItemId(v string) *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem {
	s.PolicyItemId = &v
	return s
}

type DescribeIpControlPolicyItemsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeIpControlPolicyItemsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeIpControlPolicyItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlPolicyItemsResponse) GoString() string {
	return s.String()
}

func (s *DescribeIpControlPolicyItemsResponse) SetHeaders(v map[string]*string) *DescribeIpControlPolicyItemsResponse {
	s.Headers = v
	return s
}

func (s *DescribeIpControlPolicyItemsResponse) SetStatusCode(v int32) *DescribeIpControlPolicyItemsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeIpControlPolicyItemsResponse) SetBody(v *DescribeIpControlPolicyItemsResponseBody) *DescribeIpControlPolicyItemsResponse {
	s.Body = v
	return s
}

type DescribeIpControlsRequest struct {
	// The ID of the ACL. The ID is unique.
	//
	// example:
	//
	// 7ea91319a34d48a09b5c9c871d9768b1
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// The name of the ACL.
	//
	// example:
	//
	// ACL test
	IpControlName *string `json:"IpControlName,omitempty" xml:"IpControlName,omitempty"`
	// The type of the ACL. Valid values:
	//
	// 	- **ALLOW**: a whitelist
	//
	// 	- **REFUSE**: a blacklist
	//
	// example:
	//
	// ALLOW
	IpControlType *string `json:"IpControlType,omitempty" xml:"IpControlType,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeIpControlsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlsRequest) GoString() string {
	return s.String()
}

func (s *DescribeIpControlsRequest) SetIpControlId(v string) *DescribeIpControlsRequest {
	s.IpControlId = &v
	return s
}

func (s *DescribeIpControlsRequest) SetIpControlName(v string) *DescribeIpControlsRequest {
	s.IpControlName = &v
	return s
}

func (s *DescribeIpControlsRequest) SetIpControlType(v string) *DescribeIpControlsRequest {
	s.IpControlType = &v
	return s
}

func (s *DescribeIpControlsRequest) SetPageNumber(v int32) *DescribeIpControlsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeIpControlsRequest) SetPageSize(v int32) *DescribeIpControlsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeIpControlsRequest) SetSecurityToken(v string) *DescribeIpControlsRequest {
	s.SecurityToken = &v
	return s
}

type DescribeIpControlsResponseBody struct {
	// The information about the ACL. The information is an array that consists of IpControlInfo data. The information does not include specific policies.
	IpControlInfos *DescribeIpControlsResponseBodyIpControlInfos `json:"IpControlInfos,omitempty" xml:"IpControlInfos,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeIpControlsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeIpControlsResponseBody) SetIpControlInfos(v *DescribeIpControlsResponseBodyIpControlInfos) *DescribeIpControlsResponseBody {
	s.IpControlInfos = v
	return s
}

func (s *DescribeIpControlsResponseBody) SetPageNumber(v int32) *DescribeIpControlsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeIpControlsResponseBody) SetPageSize(v int32) *DescribeIpControlsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeIpControlsResponseBody) SetRequestId(v string) *DescribeIpControlsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeIpControlsResponseBody) SetTotalCount(v int32) *DescribeIpControlsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeIpControlsResponseBodyIpControlInfos struct {
	IpControlInfo []*DescribeIpControlsResponseBodyIpControlInfosIpControlInfo `json:"IpControlInfo,omitempty" xml:"IpControlInfo,omitempty" type:"Repeated"`
}

func (s DescribeIpControlsResponseBodyIpControlInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlsResponseBodyIpControlInfos) GoString() string {
	return s.String()
}

func (s *DescribeIpControlsResponseBodyIpControlInfos) SetIpControlInfo(v []*DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) *DescribeIpControlsResponseBodyIpControlInfos {
	s.IpControlInfo = v
	return s
}

type DescribeIpControlsResponseBodyIpControlInfosIpControlInfo struct {
	// The time when the ACL was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2018-01-17T05:48:11Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the ACL.
	//
	// example:
	//
	// description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the ACL.
	//
	// example:
	//
	// 7ea91319a34d48a09b5c9c871d9768b1
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// The name of the ACL.
	//
	// example:
	//
	// testControl11
	IpControlName *string `json:"IpControlName,omitempty" xml:"IpControlName,omitempty"`
	// The type of the ACL.
	//
	// example:
	//
	// ALLOW
	IpControlType *string `json:"IpControlType,omitempty" xml:"IpControlType,omitempty"`
	// The time when the ACL was modified. The time is displayed in UTC.
	//
	// example:
	//
	// 2018-01-17T06:00:38Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The ID of the region in which the ACL is deployed.
	//
	// example:
	//
	// cn-qingdao
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) GoString() string {
	return s.String()
}

func (s *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) SetCreateTime(v string) *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo {
	s.CreateTime = &v
	return s
}

func (s *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) SetDescription(v string) *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo {
	s.Description = &v
	return s
}

func (s *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) SetIpControlId(v string) *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo {
	s.IpControlId = &v
	return s
}

func (s *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) SetIpControlName(v string) *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo {
	s.IpControlName = &v
	return s
}

func (s *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) SetIpControlType(v string) *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo {
	s.IpControlType = &v
	return s
}

func (s *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) SetModifiedTime(v string) *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) SetRegionId(v string) *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo {
	s.RegionId = &v
	return s
}

type DescribeIpControlsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeIpControlsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeIpControlsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlsResponse) GoString() string {
	return s.String()
}

func (s *DescribeIpControlsResponse) SetHeaders(v map[string]*string) *DescribeIpControlsResponse {
	s.Headers = v
	return s
}

func (s *DescribeIpControlsResponse) SetStatusCode(v int32) *DescribeIpControlsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeIpControlsResponse) SetBody(v *DescribeIpControlsResponseBody) *DescribeIpControlsResponse {
	s.Body = v
	return s
}

type DescribeLogConfigRequest struct {
	// example:
	//
	// PROVIDER
	LogType       *string `json:"LogType,omitempty" xml:"LogType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeLogConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLogConfigRequest) SetLogType(v string) *DescribeLogConfigRequest {
	s.LogType = &v
	return s
}

func (s *DescribeLogConfigRequest) SetSecurityToken(v string) *DescribeLogConfigRequest {
	s.SecurityToken = &v
	return s
}

type DescribeLogConfigResponseBody struct {
	LogInfos *DescribeLogConfigResponseBodyLogInfos `json:"LogInfos,omitempty" xml:"LogInfos,omitempty" type:"Struct"`
	// example:
	//
	// E3BC2706-ABDB-5B64-A12F-08DFD9E3F339
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLogConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLogConfigResponseBody) SetLogInfos(v *DescribeLogConfigResponseBodyLogInfos) *DescribeLogConfigResponseBody {
	s.LogInfos = v
	return s
}

func (s *DescribeLogConfigResponseBody) SetRequestId(v string) *DescribeLogConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLogConfigResponseBodyLogInfos struct {
	LogInfo []*DescribeLogConfigResponseBodyLogInfosLogInfo `json:"LogInfo,omitempty" xml:"LogInfo,omitempty" type:"Repeated"`
}

func (s DescribeLogConfigResponseBodyLogInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogConfigResponseBodyLogInfos) GoString() string {
	return s.String()
}

func (s *DescribeLogConfigResponseBodyLogInfos) SetLogInfo(v []*DescribeLogConfigResponseBodyLogInfosLogInfo) *DescribeLogConfigResponseBodyLogInfos {
	s.LogInfo = v
	return s
}

type DescribeLogConfigResponseBodyLogInfosLogInfo struct {
	// example:
	//
	// PROVIDER
	LogType *string `json:"LogType,omitempty" xml:"LogType,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// slsstore
	SlsLogStore *string `json:"SlsLogStore,omitempty" xml:"SlsLogStore,omitempty"`
	// example:
	//
	// slsproject
	SlsProject *string `json:"SlsProject,omitempty" xml:"SlsProject,omitempty"`
}

func (s DescribeLogConfigResponseBodyLogInfosLogInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogConfigResponseBodyLogInfosLogInfo) GoString() string {
	return s.String()
}

func (s *DescribeLogConfigResponseBodyLogInfosLogInfo) SetLogType(v string) *DescribeLogConfigResponseBodyLogInfosLogInfo {
	s.LogType = &v
	return s
}

func (s *DescribeLogConfigResponseBodyLogInfosLogInfo) SetRegionId(v string) *DescribeLogConfigResponseBodyLogInfosLogInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeLogConfigResponseBodyLogInfosLogInfo) SetSlsLogStore(v string) *DescribeLogConfigResponseBodyLogInfosLogInfo {
	s.SlsLogStore = &v
	return s
}

func (s *DescribeLogConfigResponseBodyLogInfosLogInfo) SetSlsProject(v string) *DescribeLogConfigResponseBodyLogInfosLogInfo {
	s.SlsProject = &v
	return s
}

type DescribeLogConfigResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLogConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLogConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLogConfigResponse) SetHeaders(v map[string]*string) *DescribeLogConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLogConfigResponse) SetStatusCode(v int32) *DescribeLogConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLogConfigResponse) SetBody(v *DescribeLogConfigResponseBody) *DescribeLogConfigResponse {
	s.Body = v
	return s
}

type DescribeMarketRemainsQuotaRequest struct {
	// The custom domain name.
	//
	// This parameter is required.
	//
	// example:
	//
	// *.demo.com
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeMarketRemainsQuotaRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMarketRemainsQuotaRequest) GoString() string {
	return s.String()
}

func (s *DescribeMarketRemainsQuotaRequest) SetDomainName(v string) *DescribeMarketRemainsQuotaRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeMarketRemainsQuotaRequest) SetSecurityToken(v string) *DescribeMarketRemainsQuotaRequest {
	s.SecurityToken = &v
	return s
}

type DescribeMarketRemainsQuotaResponseBody struct {
	// The remaining quota.
	//
	// example:
	//
	// 1000
	RemainsQuota *int64 `json:"RemainsQuota,omitempty" xml:"RemainsQuota,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// E7FE7172-AA75-5880-B6F7-C00893E9BC06
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMarketRemainsQuotaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMarketRemainsQuotaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMarketRemainsQuotaResponseBody) SetRemainsQuota(v int64) *DescribeMarketRemainsQuotaResponseBody {
	s.RemainsQuota = &v
	return s
}

func (s *DescribeMarketRemainsQuotaResponseBody) SetRequestId(v string) *DescribeMarketRemainsQuotaResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMarketRemainsQuotaResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMarketRemainsQuotaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMarketRemainsQuotaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMarketRemainsQuotaResponse) GoString() string {
	return s.String()
}

func (s *DescribeMarketRemainsQuotaResponse) SetHeaders(v map[string]*string) *DescribeMarketRemainsQuotaResponse {
	s.Headers = v
	return s
}

func (s *DescribeMarketRemainsQuotaResponse) SetStatusCode(v int32) *DescribeMarketRemainsQuotaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMarketRemainsQuotaResponse) SetBody(v *DescribeMarketRemainsQuotaResponseBody) *DescribeMarketRemainsQuotaResponse {
	s.Body = v
	return s
}

type DescribeModelsRequest struct {
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 30e792398d6c4569b04c0e53a3494381
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the model.
	//
	// example:
	//
	// 123
	ModelId *string `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	// The name of the model.
	//
	// example:
	//
	// Test
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Tag      []*DescribeModelsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeModelsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelsRequest) GoString() string {
	return s.String()
}

func (s *DescribeModelsRequest) SetGroupId(v string) *DescribeModelsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeModelsRequest) SetModelId(v string) *DescribeModelsRequest {
	s.ModelId = &v
	return s
}

func (s *DescribeModelsRequest) SetModelName(v string) *DescribeModelsRequest {
	s.ModelName = &v
	return s
}

func (s *DescribeModelsRequest) SetPageNumber(v int32) *DescribeModelsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeModelsRequest) SetPageSize(v int32) *DescribeModelsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeModelsRequest) SetTag(v []*DescribeModelsRequestTag) *DescribeModelsRequest {
	s.Tag = v
	return s
}

type DescribeModelsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeModelsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeModelsRequestTag) SetKey(v string) *DescribeModelsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeModelsRequestTag) SetValue(v string) *DescribeModelsRequestTag {
	s.Value = &v
	return s
}

type DescribeModelsResponseBody struct {
	// The returned information about models. It is an array consisting of ModelDetail data.
	ModelDetails *DescribeModelsResponseBodyModelDetails `json:"ModelDetails,omitempty" xml:"ModelDetails,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 40306469-2FB5-417A-B723-AF1F4A4FA204
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeModelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeModelsResponseBody) SetModelDetails(v *DescribeModelsResponseBodyModelDetails) *DescribeModelsResponseBody {
	s.ModelDetails = v
	return s
}

func (s *DescribeModelsResponseBody) SetPageNumber(v int32) *DescribeModelsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeModelsResponseBody) SetPageSize(v int32) *DescribeModelsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeModelsResponseBody) SetRequestId(v string) *DescribeModelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeModelsResponseBody) SetTotalCount(v int32) *DescribeModelsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeModelsResponseBodyModelDetails struct {
	ModelDetail []*DescribeModelsResponseBodyModelDetailsModelDetail `json:"ModelDetail,omitempty" xml:"ModelDetail,omitempty" type:"Repeated"`
}

func (s DescribeModelsResponseBodyModelDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelsResponseBodyModelDetails) GoString() string {
	return s.String()
}

func (s *DescribeModelsResponseBodyModelDetails) SetModelDetail(v []*DescribeModelsResponseBodyModelDetailsModelDetail) *DescribeModelsResponseBodyModelDetails {
	s.ModelDetail = v
	return s
}

type DescribeModelsResponseBodyModelDetailsModelDetail struct {
	// The time when the model was created.
	//
	// example:
	//
	// 2019-01-29T11:07:48Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The definition of the model description.
	//
	// example:
	//
	// Model Description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group to which the model belongs.
	//
	// example:
	//
	// 30e792398d6c4569b04c0e53a3494381
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the model.
	//
	// example:
	//
	// 766c0b9538a04bdf974953b5576783ba
	ModelId *string `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	// The name of the model.
	//
	// example:
	//
	// Test
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	// The URI of the model.
	//
	// example:
	//
	// https://apigateway.aliyun.com/models/30e792398d6c4569b04c0e53a3494381/766c0b9538a04bdf974953b5576783ba
	ModelRef *string `json:"ModelRef,omitempty" xml:"ModelRef,omitempty"`
	// The last modification time of the model.
	//
	// example:
	//
	// 2019-01-29T11:07:48Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The definition of the model.
	//
	// example:
	//
	// {\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"format\\":\\"int64\\",\\"maximum\\":100,\\"exclusiveMaximum\\":true,\\"type\\":\\"integer\\"},\\"name\\":{\\"maxLength\\":10,\\"type\\":\\"string\\"}}}
	Schema *string                                                `json:"Schema,omitempty" xml:"Schema,omitempty"`
	Tags   *DescribeModelsResponseBodyModelDetailsModelDetailTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s DescribeModelsResponseBodyModelDetailsModelDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelsResponseBodyModelDetailsModelDetail) GoString() string {
	return s.String()
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetCreatedTime(v string) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.CreatedTime = &v
	return s
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetDescription(v string) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.Description = &v
	return s
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetGroupId(v string) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.GroupId = &v
	return s
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetModelId(v string) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.ModelId = &v
	return s
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetModelName(v string) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.ModelName = &v
	return s
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetModelRef(v string) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.ModelRef = &v
	return s
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetModifiedTime(v string) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetSchema(v string) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.Schema = &v
	return s
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetTags(v *DescribeModelsResponseBodyModelDetailsModelDetailTags) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.Tags = v
	return s
}

type DescribeModelsResponseBodyModelDetailsModelDetailTags struct {
	TagInfo []*DescribeModelsResponseBodyModelDetailsModelDetailTagsTagInfo `json:"TagInfo,omitempty" xml:"TagInfo,omitempty" type:"Repeated"`
}

func (s DescribeModelsResponseBodyModelDetailsModelDetailTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelsResponseBodyModelDetailsModelDetailTags) GoString() string {
	return s.String()
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetailTags) SetTagInfo(v []*DescribeModelsResponseBodyModelDetailsModelDetailTagsTagInfo) *DescribeModelsResponseBodyModelDetailsModelDetailTags {
	s.TagInfo = v
	return s
}

type DescribeModelsResponseBodyModelDetailsModelDetailTagsTagInfo struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeModelsResponseBodyModelDetailsModelDetailTagsTagInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelsResponseBodyModelDetailsModelDetailTagsTagInfo) GoString() string {
	return s.String()
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetailTagsTagInfo) SetKey(v string) *DescribeModelsResponseBodyModelDetailsModelDetailTagsTagInfo {
	s.Key = &v
	return s
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetailTagsTagInfo) SetValue(v string) *DescribeModelsResponseBodyModelDetailsModelDetailTagsTagInfo {
	s.Value = &v
	return s
}

type DescribeModelsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeModelsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeModelsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelsResponse) GoString() string {
	return s.String()
}

func (s *DescribeModelsResponse) SetHeaders(v map[string]*string) *DescribeModelsResponse {
	s.Headers = v
	return s
}

func (s *DescribeModelsResponse) SetStatusCode(v int32) *DescribeModelsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeModelsResponse) SetBody(v *DescribeModelsResponseBody) *DescribeModelsResponse {
	s.Body = v
	return s
}

type DescribePluginApisRequest struct {
	// example:
	//
	// c6b0dd188b0e4e408e12f926********
	ApiId       *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiName     *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 231a4bb81ee94da785733c29********
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// GET
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// /sendVerifyCode
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// bf6583efcef44c51adb00c4e********
	PluginId      *string `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribePluginApisRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginApisRequest) GoString() string {
	return s.String()
}

func (s *DescribePluginApisRequest) SetApiId(v string) *DescribePluginApisRequest {
	s.ApiId = &v
	return s
}

func (s *DescribePluginApisRequest) SetApiName(v string) *DescribePluginApisRequest {
	s.ApiName = &v
	return s
}

func (s *DescribePluginApisRequest) SetDescription(v string) *DescribePluginApisRequest {
	s.Description = &v
	return s
}

func (s *DescribePluginApisRequest) SetGroupId(v string) *DescribePluginApisRequest {
	s.GroupId = &v
	return s
}

func (s *DescribePluginApisRequest) SetMethod(v string) *DescribePluginApisRequest {
	s.Method = &v
	return s
}

func (s *DescribePluginApisRequest) SetPageNumber(v int32) *DescribePluginApisRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribePluginApisRequest) SetPageSize(v int32) *DescribePluginApisRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePluginApisRequest) SetPath(v string) *DescribePluginApisRequest {
	s.Path = &v
	return s
}

func (s *DescribePluginApisRequest) SetPluginId(v string) *DescribePluginApisRequest {
	s.PluginId = &v
	return s
}

func (s *DescribePluginApisRequest) SetSecurityToken(v string) *DescribePluginApisRequest {
	s.SecurityToken = &v
	return s
}

type DescribePluginApisResponseBody struct {
	ApiSummarys *DescribePluginApisResponseBodyApiSummarys `json:"ApiSummarys,omitempty" xml:"ApiSummarys,omitempty" type:"Struct"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// F9C5C4A5-BC6C-57A3-839F-AB08********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 7
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePluginApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginApisResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePluginApisResponseBody) SetApiSummarys(v *DescribePluginApisResponseBodyApiSummarys) *DescribePluginApisResponseBody {
	s.ApiSummarys = v
	return s
}

func (s *DescribePluginApisResponseBody) SetPageNumber(v int32) *DescribePluginApisResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribePluginApisResponseBody) SetPageSize(v int32) *DescribePluginApisResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePluginApisResponseBody) SetRequestId(v string) *DescribePluginApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePluginApisResponseBody) SetTotalCount(v int32) *DescribePluginApisResponseBody {
	s.TotalCount = &v
	return s
}

type DescribePluginApisResponseBodyApiSummarys struct {
	ApiPluginSummary []*DescribePluginApisResponseBodyApiSummarysApiPluginSummary `json:"ApiPluginSummary,omitempty" xml:"ApiPluginSummary,omitempty" type:"Repeated"`
}

func (s DescribePluginApisResponseBodyApiSummarys) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginApisResponseBodyApiSummarys) GoString() string {
	return s.String()
}

func (s *DescribePluginApisResponseBodyApiSummarys) SetApiPluginSummary(v []*DescribePluginApisResponseBodyApiSummarysApiPluginSummary) *DescribePluginApisResponseBodyApiSummarys {
	s.ApiPluginSummary = v
	return s
}

type DescribePluginApisResponseBodyApiSummarysApiPluginSummary struct {
	// example:
	//
	// accc8c68b7294b1cb4928741********
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// example:
	//
	// fhosQueryDayOfStock_V2
	ApiName     *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 5f51f89261854fd9ad5116be********
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// myGroup2
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// example:
	//
	// GET
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// example:
	//
	// /mqTest
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// cn-shanghai
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StageAlias *string `json:"StageAlias,omitempty" xml:"StageAlias,omitempty"`
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribePluginApisResponseBodyApiSummarysApiPluginSummary) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginApisResponseBodyApiSummarysApiPluginSummary) GoString() string {
	return s.String()
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetApiId(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.ApiId = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetApiName(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.ApiName = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetDescription(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.Description = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetGroupId(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.GroupId = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetGroupName(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.GroupName = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetMethod(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.Method = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetPath(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.Path = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetRegionId(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.RegionId = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetStageAlias(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.StageAlias = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetStageName(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.StageName = &v
	return s
}

type DescribePluginApisResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePluginApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePluginApisResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginApisResponse) GoString() string {
	return s.String()
}

func (s *DescribePluginApisResponse) SetHeaders(v map[string]*string) *DescribePluginApisResponse {
	s.Headers = v
	return s
}

func (s *DescribePluginApisResponse) SetStatusCode(v int32) *DescribePluginApisResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePluginApisResponse) SetBody(v *DescribePluginApisResponseBody) *DescribePluginApisResponse {
	s.Body = v
	return s
}

type DescribePluginSchemasRequest struct {
	// example:
	//
	// en
	Language      *string `json:"Language,omitempty" xml:"Language,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribePluginSchemasRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginSchemasRequest) GoString() string {
	return s.String()
}

func (s *DescribePluginSchemasRequest) SetLanguage(v string) *DescribePluginSchemasRequest {
	s.Language = &v
	return s
}

func (s *DescribePluginSchemasRequest) SetSecurityToken(v string) *DescribePluginSchemasRequest {
	s.SecurityToken = &v
	return s
}

type DescribePluginSchemasResponseBody struct {
	PluginSchemas *DescribePluginSchemasResponseBodyPluginSchemas `json:"PluginSchemas,omitempty" xml:"PluginSchemas,omitempty" type:"Struct"`
	// example:
	//
	// 2D39D1B3-8548-508A-9CE2-7F4A3F2A7989
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePluginSchemasResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginSchemasResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePluginSchemasResponseBody) SetPluginSchemas(v *DescribePluginSchemasResponseBodyPluginSchemas) *DescribePluginSchemasResponseBody {
	s.PluginSchemas = v
	return s
}

func (s *DescribePluginSchemasResponseBody) SetRequestId(v string) *DescribePluginSchemasResponseBody {
	s.RequestId = &v
	return s
}

type DescribePluginSchemasResponseBodyPluginSchemas struct {
	PluginSchema []*DescribePluginSchemasResponseBodyPluginSchemasPluginSchema `json:"PluginSchema,omitempty" xml:"PluginSchema,omitempty" type:"Repeated"`
}

func (s DescribePluginSchemasResponseBodyPluginSchemas) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginSchemasResponseBodyPluginSchemas) GoString() string {
	return s.String()
}

func (s *DescribePluginSchemasResponseBodyPluginSchemas) SetPluginSchema(v []*DescribePluginSchemasResponseBodyPluginSchemasPluginSchema) *DescribePluginSchemasResponseBodyPluginSchemas {
	s.PluginSchema = v
	return s
}

type DescribePluginSchemasResponseBodyPluginSchemasPluginSchema struct {
	// example:
	//
	// plugin scheme description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 4107**
	DocumentId *string `json:"DocumentId,omitempty" xml:"DocumentId,omitempty"`
	// example:
	//
	// VPC_C
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// true
	SupportClassic *bool `json:"SupportClassic,omitempty" xml:"SupportClassic,omitempty"`
	// example:
	//
	// plugin schema title
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s DescribePluginSchemasResponseBodyPluginSchemasPluginSchema) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginSchemasResponseBodyPluginSchemasPluginSchema) GoString() string {
	return s.String()
}

func (s *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema) SetDescription(v string) *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema {
	s.Description = &v
	return s
}

func (s *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema) SetDocumentId(v string) *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema {
	s.DocumentId = &v
	return s
}

func (s *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema) SetName(v string) *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema {
	s.Name = &v
	return s
}

func (s *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema) SetSupportClassic(v bool) *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema {
	s.SupportClassic = &v
	return s
}

func (s *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema) SetTitle(v string) *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema {
	s.Title = &v
	return s
}

type DescribePluginSchemasResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePluginSchemasResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePluginSchemasResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginSchemasResponse) GoString() string {
	return s.String()
}

func (s *DescribePluginSchemasResponse) SetHeaders(v map[string]*string) *DescribePluginSchemasResponse {
	s.Headers = v
	return s
}

func (s *DescribePluginSchemasResponse) SetStatusCode(v int32) *DescribePluginSchemasResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePluginSchemasResponse) SetBody(v *DescribePluginSchemasResponseBody) *DescribePluginSchemasResponse {
	s.Body = v
	return s
}

type DescribePluginTemplatesRequest struct {
	// The language that is used to return the description of the system policy. Valid values:
	//
	// 	- en: English
	//
	// 	- zh-CN: Chinese.
	//
	// 	- ja: Japanese
	//
	// example:
	//
	// zh
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// The name of the plug-in.
	//
	// example:
	//
	// jwtAuth
	PluginName    *string `json:"PluginName,omitempty" xml:"PluginName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribePluginTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginTemplatesRequest) GoString() string {
	return s.String()
}

func (s *DescribePluginTemplatesRequest) SetLanguage(v string) *DescribePluginTemplatesRequest {
	s.Language = &v
	return s
}

func (s *DescribePluginTemplatesRequest) SetPluginName(v string) *DescribePluginTemplatesRequest {
	s.PluginName = &v
	return s
}

func (s *DescribePluginTemplatesRequest) SetSecurityToken(v string) *DescribePluginTemplatesRequest {
	s.SecurityToken = &v
	return s
}

type DescribePluginTemplatesResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EF924FE4-2EDD-4CD3-89EC-34E4708574E7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The templates.
	Templates *DescribePluginTemplatesResponseBodyTemplates `json:"Templates,omitempty" xml:"Templates,omitempty" type:"Struct"`
}

func (s DescribePluginTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePluginTemplatesResponseBody) SetRequestId(v string) *DescribePluginTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePluginTemplatesResponseBody) SetTemplates(v *DescribePluginTemplatesResponseBodyTemplates) *DescribePluginTemplatesResponseBody {
	s.Templates = v
	return s
}

type DescribePluginTemplatesResponseBodyTemplates struct {
	Template []*DescribePluginTemplatesResponseBodyTemplatesTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Repeated"`
}

func (s DescribePluginTemplatesResponseBodyTemplates) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginTemplatesResponseBodyTemplates) GoString() string {
	return s.String()
}

func (s *DescribePluginTemplatesResponseBodyTemplates) SetTemplate(v []*DescribePluginTemplatesResponseBodyTemplatesTemplate) *DescribePluginTemplatesResponseBodyTemplates {
	s.Template = v
	return s
}

type DescribePluginTemplatesResponseBodyTemplatesTemplate struct {
	// The description.
	//
	// example:
	//
	// balabala
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The document anchor point.
	//
	// example:
	//
	// anchor
	DocumentAnchor *string `json:"DocumentAnchor,omitempty" xml:"DocumentAnchor,omitempty"`
	// The ID of the document.
	//
	// example:
	//
	// 41079
	DocumentId *string `json:"DocumentId,omitempty" xml:"DocumentId,omitempty"`
	// The sample.
	//
	// example:
	//
	// 1
	Sample *string `json:"Sample,omitempty" xml:"Sample,omitempty"`
	// The title of the plug-in template title.
	//
	// example:
	//
	// template title
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s DescribePluginTemplatesResponseBodyTemplatesTemplate) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginTemplatesResponseBodyTemplatesTemplate) GoString() string {
	return s.String()
}

func (s *DescribePluginTemplatesResponseBodyTemplatesTemplate) SetDescription(v string) *DescribePluginTemplatesResponseBodyTemplatesTemplate {
	s.Description = &v
	return s
}

func (s *DescribePluginTemplatesResponseBodyTemplatesTemplate) SetDocumentAnchor(v string) *DescribePluginTemplatesResponseBodyTemplatesTemplate {
	s.DocumentAnchor = &v
	return s
}

func (s *DescribePluginTemplatesResponseBodyTemplatesTemplate) SetDocumentId(v string) *DescribePluginTemplatesResponseBodyTemplatesTemplate {
	s.DocumentId = &v
	return s
}

func (s *DescribePluginTemplatesResponseBodyTemplatesTemplate) SetSample(v string) *DescribePluginTemplatesResponseBodyTemplatesTemplate {
	s.Sample = &v
	return s
}

func (s *DescribePluginTemplatesResponseBodyTemplatesTemplate) SetTitle(v string) *DescribePluginTemplatesResponseBodyTemplatesTemplate {
	s.Title = &v
	return s
}

type DescribePluginTemplatesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePluginTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePluginTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginTemplatesResponse) GoString() string {
	return s.String()
}

func (s *DescribePluginTemplatesResponse) SetHeaders(v map[string]*string) *DescribePluginTemplatesResponse {
	s.Headers = v
	return s
}

func (s *DescribePluginTemplatesResponse) SetStatusCode(v int32) *DescribePluginTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePluginTemplatesResponse) SetBody(v *DescribePluginTemplatesResponseBody) *DescribePluginTemplatesResponse {
	s.Body = v
	return s
}

type DescribePluginsRequest struct {
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the plug-in.
	//
	// example:
	//
	// a96926e82f994915a8da40a119374537
	PluginId *string `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	// The name of the plug-in.
	//
	// example:
	//
	// testPlugin
	PluginName *string `json:"PluginName,omitempty" xml:"PluginName,omitempty"`
	// The business type of the plug-in.
	//
	// example:
	//
	// cors
	PluginType    *string `json:"PluginType,omitempty" xml:"PluginType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The tag of objects that match the lifecycle rule. You can specify multiple tags.
	//
	// example:
	//
	// Key， Value
	Tag []*DescribePluginsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribePluginsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsRequest) GoString() string {
	return s.String()
}

func (s *DescribePluginsRequest) SetPageNumber(v int32) *DescribePluginsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribePluginsRequest) SetPageSize(v int32) *DescribePluginsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePluginsRequest) SetPluginId(v string) *DescribePluginsRequest {
	s.PluginId = &v
	return s
}

func (s *DescribePluginsRequest) SetPluginName(v string) *DescribePluginsRequest {
	s.PluginName = &v
	return s
}

func (s *DescribePluginsRequest) SetPluginType(v string) *DescribePluginsRequest {
	s.PluginType = &v
	return s
}

func (s *DescribePluginsRequest) SetSecurityToken(v string) *DescribePluginsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribePluginsRequest) SetTag(v []*DescribePluginsRequestTag) *DescribePluginsRequest {
	s.Tag = v
	return s
}

type DescribePluginsRequestTag struct {
	// The key of the tag.
	//
	// N can be an integer from 1 to 20.``
	//
	// example:
	//
	// env
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// N can be an integer from 1 to 20.``
	//
	// example:
	//
	// \\" \\"
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribePluginsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribePluginsRequestTag) SetKey(v string) *DescribePluginsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribePluginsRequestTag) SetValue(v string) *DescribePluginsRequestTag {
	s.Value = &v
	return s
}

type DescribePluginsResponseBody struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The returned information about the plug-in. It is an array consisting of PluginAttribute data.
	Plugins *DescribePluginsResponseBodyPlugins `json:"Plugins,omitempty" xml:"Plugins,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 46373DC4-19F1-4DC8-8C31-1107289BB5E0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePluginsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePluginsResponseBody) SetPageNumber(v int32) *DescribePluginsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribePluginsResponseBody) SetPageSize(v int32) *DescribePluginsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePluginsResponseBody) SetPlugins(v *DescribePluginsResponseBodyPlugins) *DescribePluginsResponseBody {
	s.Plugins = v
	return s
}

func (s *DescribePluginsResponseBody) SetRequestId(v string) *DescribePluginsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePluginsResponseBody) SetTotalCount(v int32) *DescribePluginsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribePluginsResponseBodyPlugins struct {
	PluginAttribute []*DescribePluginsResponseBodyPluginsPluginAttribute `json:"PluginAttribute,omitempty" xml:"PluginAttribute,omitempty" type:"Repeated"`
}

func (s DescribePluginsResponseBodyPlugins) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsResponseBodyPlugins) GoString() string {
	return s.String()
}

func (s *DescribePluginsResponseBodyPlugins) SetPluginAttribute(v []*DescribePluginsResponseBodyPluginsPluginAttribute) *DescribePluginsResponseBodyPlugins {
	s.PluginAttribute = v
	return s
}

type DescribePluginsResponseBodyPluginsPluginAttribute struct {
	// The creation time (UTC) of the plug-in.
	//
	// example:
	//
	// 2019-01-11T09:29:58Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The plug-in description.
	//
	// example:
	//
	// Throttling
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The last modification time (UTC) of the plug-in.
	//
	// example:
	//
	// 2019-01-11T09:29:58Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The definition statement of the plug-in.
	//
	// example:
	//
	// {"unit":"MINUTE","apiDefault":20}
	PluginData *string `json:"PluginData,omitempty" xml:"PluginData,omitempty"`
	// The ID of the plug-in.
	//
	// example:
	//
	// 9a3f1a5279434f2ba74ccd91c295af9f
	PluginId *string `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	// The name of the plug-in.
	//
	// example:
	//
	// firstPlugin
	PluginName *string `json:"PluginName,omitempty" xml:"PluginName,omitempty"`
	// The type of the plug-in.
	//
	// example:
	//
	// trafficControl
	PluginType *string `json:"PluginType,omitempty" xml:"PluginType,omitempty"`
	// The region where the plug-in is located.
	//
	// example:
	//
	// cn-qingdao
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The tags.
	Tags *DescribePluginsResponseBodyPluginsPluginAttributeTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s DescribePluginsResponseBodyPluginsPluginAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsResponseBodyPluginsPluginAttribute) GoString() string {
	return s.String()
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetCreatedTime(v string) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.CreatedTime = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetDescription(v string) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.Description = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetModifiedTime(v string) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.ModifiedTime = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetPluginData(v string) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.PluginData = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetPluginId(v string) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.PluginId = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetPluginName(v string) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.PluginName = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetPluginType(v string) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.PluginType = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetRegionId(v string) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetTags(v *DescribePluginsResponseBodyPluginsPluginAttributeTags) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.Tags = v
	return s
}

type DescribePluginsResponseBodyPluginsPluginAttributeTags struct {
	TagInfo []*DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo `json:"TagInfo,omitempty" xml:"TagInfo,omitempty" type:"Repeated"`
}

func (s DescribePluginsResponseBodyPluginsPluginAttributeTags) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsResponseBodyPluginsPluginAttributeTags) GoString() string {
	return s.String()
}

func (s *DescribePluginsResponseBodyPluginsPluginAttributeTags) SetTagInfo(v []*DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo) *DescribePluginsResponseBodyPluginsPluginAttributeTags {
	s.TagInfo = v
	return s
}

type DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo struct {
	// The key of the tag.
	//
	// example:
	//
	// testkey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// tetstvalue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo) GoString() string {
	return s.String()
}

func (s *DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo) SetKey(v string) *DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo {
	s.Key = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo) SetValue(v string) *DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo {
	s.Value = &v
	return s
}

type DescribePluginsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePluginsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePluginsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsResponse) GoString() string {
	return s.String()
}

func (s *DescribePluginsResponse) SetHeaders(v map[string]*string) *DescribePluginsResponse {
	s.Headers = v
	return s
}

func (s *DescribePluginsResponse) SetStatusCode(v int32) *DescribePluginsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePluginsResponse) SetBody(v *DescribePluginsResponseBody) *DescribePluginsResponse {
	s.Body = v
	return s
}

type DescribePluginsByApiRequest struct {
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// 93f4ead4080c4b2da70b7f81f50ae459
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the group to which the API belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3c7a38392e764718ad7673e7b7f535d4
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment in which the API is running. Valid values:
	//
	// 	- **RELEASE**: production
	//
	// 	- **PRE**: staging
	//
	// 	- **TEST**: test
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribePluginsByApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsByApiRequest) GoString() string {
	return s.String()
}

func (s *DescribePluginsByApiRequest) SetApiId(v string) *DescribePluginsByApiRequest {
	s.ApiId = &v
	return s
}

func (s *DescribePluginsByApiRequest) SetGroupId(v string) *DescribePluginsByApiRequest {
	s.GroupId = &v
	return s
}

func (s *DescribePluginsByApiRequest) SetPageNumber(v int32) *DescribePluginsByApiRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribePluginsByApiRequest) SetPageSize(v int32) *DescribePluginsByApiRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePluginsByApiRequest) SetSecurityToken(v string) *DescribePluginsByApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribePluginsByApiRequest) SetStageName(v string) *DescribePluginsByApiRequest {
	s.StageName = &v
	return s
}

type DescribePluginsByApiResponseBody struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The plug-in information. The information is an array that consists of PluginAttribute data.
	Plugins *DescribePluginsByApiResponseBodyPlugins `json:"Plugins,omitempty" xml:"Plugins,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 46373DC4-19F1-4DC8-8C31-1107289BB5E0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePluginsByApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsByApiResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePluginsByApiResponseBody) SetPageNumber(v int32) *DescribePluginsByApiResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribePluginsByApiResponseBody) SetPageSize(v int32) *DescribePluginsByApiResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePluginsByApiResponseBody) SetPlugins(v *DescribePluginsByApiResponseBodyPlugins) *DescribePluginsByApiResponseBody {
	s.Plugins = v
	return s
}

func (s *DescribePluginsByApiResponseBody) SetRequestId(v string) *DescribePluginsByApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePluginsByApiResponseBody) SetTotalCount(v int32) *DescribePluginsByApiResponseBody {
	s.TotalCount = &v
	return s
}

type DescribePluginsByApiResponseBodyPlugins struct {
	PluginAttribute []*DescribePluginsByApiResponseBodyPluginsPluginAttribute `json:"PluginAttribute,omitempty" xml:"PluginAttribute,omitempty" type:"Repeated"`
}

func (s DescribePluginsByApiResponseBodyPlugins) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsByApiResponseBodyPlugins) GoString() string {
	return s.String()
}

func (s *DescribePluginsByApiResponseBodyPlugins) SetPluginAttribute(v []*DescribePluginsByApiResponseBodyPluginsPluginAttribute) *DescribePluginsByApiResponseBodyPlugins {
	s.PluginAttribute = v
	return s
}

type DescribePluginsByApiResponseBodyPluginsPluginAttribute struct {
	// The time when the plug-in was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2019-01-11T09:29:58Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The plug-in description.
	//
	// example:
	//
	// Traffic throttling
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The time when the plug-in was last modified. The time is displayed in UTC.
	//
	// example:
	//
	// 2019-01-11T09:29:58Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The definition statement of the plug-in.
	//
	// example:
	//
	// {\\"unit\\":\\"MINUTE\\",\\"apiDefault\\":20}
	PluginData *string `json:"PluginData,omitempty" xml:"PluginData,omitempty"`
	// The plug-in ID.
	//
	// example:
	//
	// 9a3f1a5279434f2ba74ccd91c295af9f
	PluginId *string `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	// The plug-in name.
	//
	// example:
	//
	// firstPlugin
	PluginName *string `json:"PluginName,omitempty" xml:"PluginName,omitempty"`
	// The plug-in type.
	//
	// example:
	//
	// trafficControl
	PluginType *string `json:"PluginType,omitempty" xml:"PluginType,omitempty"`
	// The region where the plug-in resides.
	//
	// example:
	//
	// cn-qingdao
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribePluginsByApiResponseBodyPluginsPluginAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsByApiResponseBodyPluginsPluginAttribute) GoString() string {
	return s.String()
}

func (s *DescribePluginsByApiResponseBodyPluginsPluginAttribute) SetCreatedTime(v string) *DescribePluginsByApiResponseBodyPluginsPluginAttribute {
	s.CreatedTime = &v
	return s
}

func (s *DescribePluginsByApiResponseBodyPluginsPluginAttribute) SetDescription(v string) *DescribePluginsByApiResponseBodyPluginsPluginAttribute {
	s.Description = &v
	return s
}

func (s *DescribePluginsByApiResponseBodyPluginsPluginAttribute) SetModifiedTime(v string) *DescribePluginsByApiResponseBodyPluginsPluginAttribute {
	s.ModifiedTime = &v
	return s
}

func (s *DescribePluginsByApiResponseBodyPluginsPluginAttribute) SetPluginData(v string) *DescribePluginsByApiResponseBodyPluginsPluginAttribute {
	s.PluginData = &v
	return s
}

func (s *DescribePluginsByApiResponseBodyPluginsPluginAttribute) SetPluginId(v string) *DescribePluginsByApiResponseBodyPluginsPluginAttribute {
	s.PluginId = &v
	return s
}

func (s *DescribePluginsByApiResponseBodyPluginsPluginAttribute) SetPluginName(v string) *DescribePluginsByApiResponseBodyPluginsPluginAttribute {
	s.PluginName = &v
	return s
}

func (s *DescribePluginsByApiResponseBodyPluginsPluginAttribute) SetPluginType(v string) *DescribePluginsByApiResponseBodyPluginsPluginAttribute {
	s.PluginType = &v
	return s
}

func (s *DescribePluginsByApiResponseBodyPluginsPluginAttribute) SetRegionId(v string) *DescribePluginsByApiResponseBodyPluginsPluginAttribute {
	s.RegionId = &v
	return s
}

type DescribePluginsByApiResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePluginsByApiResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePluginsByApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsByApiResponse) GoString() string {
	return s.String()
}

func (s *DescribePluginsByApiResponse) SetHeaders(v map[string]*string) *DescribePluginsByApiResponse {
	s.Headers = v
	return s
}

func (s *DescribePluginsByApiResponse) SetStatusCode(v int32) *DescribePluginsByApiResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePluginsByApiResponse) SetBody(v *DescribePluginsByApiResponseBody) *DescribePluginsByApiResponse {
	s.Body = v
	return s
}

type DescribePurchasedApiGroupRequest struct {
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 102b631ae1094e33a77c45312226184e
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribePurchasedApiGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupRequest) SetGroupId(v string) *DescribePurchasedApiGroupRequest {
	s.GroupId = &v
	return s
}

func (s *DescribePurchasedApiGroupRequest) SetSecurityToken(v string) *DescribePurchasedApiGroupRequest {
	s.SecurityToken = &v
	return s
}

type DescribePurchasedApiGroupResponseBody struct {
	// The description of the API group.
	//
	// example:
	//
	// api group description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The list of domain names.
	Domains *DescribePurchasedApiGroupResponseBodyDomains `json:"Domains,omitempty" xml:"Domains,omitempty" type:"Struct"`
	// The ID of the API group.
	//
	// example:
	//
	// 48977d7b96074966a7c9c2a8872d7e06
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group.
	//
	// example:
	//
	// Weather
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The time when the API group was purchased.
	//
	// example:
	//
	// 2021-12-19T00:00:00
	PurchasedTime *string `json:"PurchasedTime,omitempty" xml:"PurchasedTime,omitempty"`
	// The region where the API group is located.
	//
	// example:
	//
	// cn-qingdao
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 61A16D46-EC04-5288-8A18-811B0F536CC2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the API group.
	//
	// 	- **NORMAL**: The API group is normal.
	//
	// 	- **DELETE**: The API group is deleted.
	//
	// example:
	//
	// NORMAL
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribePurchasedApiGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupResponseBody) SetDescription(v string) *DescribePurchasedApiGroupResponseBody {
	s.Description = &v
	return s
}

func (s *DescribePurchasedApiGroupResponseBody) SetDomains(v *DescribePurchasedApiGroupResponseBodyDomains) *DescribePurchasedApiGroupResponseBody {
	s.Domains = v
	return s
}

func (s *DescribePurchasedApiGroupResponseBody) SetGroupId(v string) *DescribePurchasedApiGroupResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribePurchasedApiGroupResponseBody) SetGroupName(v string) *DescribePurchasedApiGroupResponseBody {
	s.GroupName = &v
	return s
}

func (s *DescribePurchasedApiGroupResponseBody) SetPurchasedTime(v string) *DescribePurchasedApiGroupResponseBody {
	s.PurchasedTime = &v
	return s
}

func (s *DescribePurchasedApiGroupResponseBody) SetRegionId(v string) *DescribePurchasedApiGroupResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribePurchasedApiGroupResponseBody) SetRequestId(v string) *DescribePurchasedApiGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePurchasedApiGroupResponseBody) SetStatus(v string) *DescribePurchasedApiGroupResponseBody {
	s.Status = &v
	return s
}

type DescribePurchasedApiGroupResponseBodyDomains struct {
	DomainItem []*DescribePurchasedApiGroupResponseBodyDomainsDomainItem `json:"DomainItem,omitempty" xml:"DomainItem,omitempty" type:"Repeated"`
}

func (s DescribePurchasedApiGroupResponseBodyDomains) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupResponseBodyDomains) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupResponseBodyDomains) SetDomainItem(v []*DescribePurchasedApiGroupResponseBodyDomainsDomainItem) *DescribePurchasedApiGroupResponseBodyDomains {
	s.DomainItem = v
	return s
}

type DescribePurchasedApiGroupResponseBodyDomainsDomainItem struct {
	// The domain name.
	//
	// example:
	//
	// test_domain.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribePurchasedApiGroupResponseBodyDomainsDomainItem) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupResponseBodyDomainsDomainItem) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupResponseBodyDomainsDomainItem) SetDomainName(v string) *DescribePurchasedApiGroupResponseBodyDomainsDomainItem {
	s.DomainName = &v
	return s
}

type DescribePurchasedApiGroupResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePurchasedApiGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePurchasedApiGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupResponse) SetHeaders(v map[string]*string) *DescribePurchasedApiGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribePurchasedApiGroupResponse) SetStatusCode(v int32) *DescribePurchasedApiGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePurchasedApiGroupResponse) SetBody(v *DescribePurchasedApiGroupResponseBody) *DescribePurchasedApiGroupResponse {
	s.Body = v
	return s
}

type DescribePurchasedApiGroupsRequest struct {
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 20
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribePurchasedApiGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupsRequest) SetPageNumber(v int32) *DescribePurchasedApiGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribePurchasedApiGroupsRequest) SetPageSize(v int32) *DescribePurchasedApiGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePurchasedApiGroupsRequest) SetSecurityToken(v string) *DescribePurchasedApiGroupsRequest {
	s.SecurityToken = &v
	return s
}

type DescribePurchasedApiGroupsResponseBody struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The attributes of the API group.
	PurchasedApiGroupAttributes *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributes `json:"PurchasedApiGroupAttributes,omitempty" xml:"PurchasedApiGroupAttributes,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 36BBBAD4-1CFB-489F-841A-8CA52EEA787E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePurchasedApiGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupsResponseBody) SetPageNumber(v int32) *DescribePurchasedApiGroupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBody) SetPageSize(v int32) *DescribePurchasedApiGroupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBody) SetPurchasedApiGroupAttributes(v *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributes) *DescribePurchasedApiGroupsResponseBody {
	s.PurchasedApiGroupAttributes = v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBody) SetRequestId(v string) *DescribePurchasedApiGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBody) SetTotalCount(v int32) *DescribePurchasedApiGroupsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributes struct {
	PurchasedApiGroupAttribute []*DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute `json:"PurchasedApiGroupAttribute,omitempty" xml:"PurchasedApiGroupAttribute,omitempty" type:"Repeated"`
}

func (s DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributes) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributes) SetPurchasedApiGroupAttribute(v []*DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributes {
	s.PurchasedApiGroupAttribute = v
	return s
}

type DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute struct {
	// The billing method.
	//
	// example:
	//
	// POSTPAID
	BillingType *string `json:"BillingType,omitempty" xml:"BillingType,omitempty"`
	// The description of the API group.
	//
	// example:
	//
	// 1
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The time when the API group expires.
	//
	// example:
	//
	// 2021-12-19T00:00:00
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 8e91f23f88f94348855b82c9a73209f3
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group.
	//
	// example:
	//
	// group1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The maximum number of calls.
	//
	// example:
	//
	// 10
	InvokeTimesMax *int64 `json:"InvokeTimesMax,omitempty" xml:"InvokeTimesMax,omitempty"`
	// The current number of calls.
	//
	// example:
	//
	// 10
	InvokeTimesNow *int64 `json:"InvokeTimesNow,omitempty" xml:"InvokeTimesNow,omitempty"`
	// The time when the API group was purchased.
	//
	// example:
	//
	// 2021-12-19T00:00:00
	PurchasedTime *string `json:"PurchasedTime,omitempty" xml:"PurchasedTime,omitempty"`
	// The ID of the region where the API group is located.
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The status of the API group.
	//
	// 	- **NORMAL**: The API group is normal.
	//
	// 	- **DELETE**: The API group is deleted.
	//
	// example:
	//
	// NORMAL
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetBillingType(v string) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.BillingType = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetDescription(v string) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.Description = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetExpireTime(v string) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.ExpireTime = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetGroupId(v string) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.GroupId = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetGroupName(v string) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.GroupName = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetInvokeTimesMax(v int64) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.InvokeTimesMax = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetInvokeTimesNow(v int64) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.InvokeTimesNow = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetPurchasedTime(v string) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.PurchasedTime = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetRegionId(v string) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetStatus(v string) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.Status = &v
	return s
}

type DescribePurchasedApiGroupsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePurchasedApiGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePurchasedApiGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupsResponse) SetHeaders(v map[string]*string) *DescribePurchasedApiGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribePurchasedApiGroupsResponse) SetStatusCode(v int32) *DescribePurchasedApiGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponse) SetBody(v *DescribePurchasedApiGroupsResponseBody) *DescribePurchasedApiGroupsResponse {
	s.Body = v
	return s
}

type DescribePurchasedApisRequest struct {
	// The ID of the API.
	//
	// example:
	//
	// 3b81fd160f5645e097cc8855d75a1cf6
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API.
	//
	// example:
	//
	// Cz88IpQuery
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// d27ad517be5f4c95ac3631780a8f4d50
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The page number of the page to return.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **PRE**
	//
	// 	- **TEST**
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// Specifies whether the API is public. Valid values:
	//
	// 	- **PUBLIC**: indicates that the API is public. If you set this parameter to PUBLIC, this API is displayed on the API List page in the console for all users after the API is published to the production environment.
	//
	// 	- **PRIVATE**: indicates that the API is private. If you set this parameter to PRIVATE, this API is not displayed in Alibaba Cloud Marketplace after the API group to which this API belongs is made available.
	//
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribePurchasedApisRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApisRequest) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApisRequest) SetApiId(v string) *DescribePurchasedApisRequest {
	s.ApiId = &v
	return s
}

func (s *DescribePurchasedApisRequest) SetApiName(v string) *DescribePurchasedApisRequest {
	s.ApiName = &v
	return s
}

func (s *DescribePurchasedApisRequest) SetGroupId(v string) *DescribePurchasedApisRequest {
	s.GroupId = &v
	return s
}

func (s *DescribePurchasedApisRequest) SetPageNumber(v int32) *DescribePurchasedApisRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribePurchasedApisRequest) SetPageSize(v int32) *DescribePurchasedApisRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePurchasedApisRequest) SetSecurityToken(v string) *DescribePurchasedApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribePurchasedApisRequest) SetStageName(v string) *DescribePurchasedApisRequest {
	s.StageName = &v
	return s
}

func (s *DescribePurchasedApisRequest) SetVisibility(v string) *DescribePurchasedApisRequest {
	s.Visibility = &v
	return s
}

type DescribePurchasedApisResponseBody struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The monitoring information about API call delays. The returned information is an array consisting of purchased APIs.
	PurchasedApis *DescribePurchasedApisResponseBodyPurchasedApis `json:"PurchasedApis,omitempty" xml:"PurchasedApis,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// CE5722A6-AE78-4741-A9B0-6C817D360510
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 20
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePurchasedApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApisResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApisResponseBody) SetPageNumber(v int32) *DescribePurchasedApisResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribePurchasedApisResponseBody) SetPageSize(v int32) *DescribePurchasedApisResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePurchasedApisResponseBody) SetPurchasedApis(v *DescribePurchasedApisResponseBodyPurchasedApis) *DescribePurchasedApisResponseBody {
	s.PurchasedApis = v
	return s
}

func (s *DescribePurchasedApisResponseBody) SetRequestId(v string) *DescribePurchasedApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePurchasedApisResponseBody) SetTotalCount(v int32) *DescribePurchasedApisResponseBody {
	s.TotalCount = &v
	return s
}

type DescribePurchasedApisResponseBodyPurchasedApis struct {
	PurchasedApi []*DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi `json:"PurchasedApi,omitempty" xml:"PurchasedApi,omitempty" type:"Repeated"`
}

func (s DescribePurchasedApisResponseBodyPurchasedApis) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApisResponseBodyPurchasedApis) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApisResponseBodyPurchasedApis) SetPurchasedApi(v []*DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) *DescribePurchasedApisResponseBodyPurchasedApis {
	s.PurchasedApi = v
	return s
}

type DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi struct {
	// The ID of the API.
	//
	// example:
	//
	// eb6e54c1576d41149746e8e69b0a0792
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API.
	//
	// example:
	//
	// gw_rado_tissot_
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The deployment time. Format: yyyy-mm-ddhh:mm:ss.
	//
	// example:
	//
	// 2021-06-1113:57:38
	DeployedTime *string `json:"DeployedTime,omitempty" xml:"DeployedTime,omitempty"`
	// The description of the API.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group to which the API belongs. This ID is generated by the system and globally unique.
	//
	// example:
	//
	// 3013a55c0c44483f984d26df27120513
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group.
	//
	// example:
	//
	// DMS_DEFAULT_GROUP_408589
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The last modification time (UTC) of the API.
	//
	// example:
	//
	// 2021-06-11T13:57:38+08:00
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The time when the API was purchased.
	//
	// example:
	//
	// 2021-06-11T13:57:38+08:00
	PurchasedTime *string `json:"PurchasedTime,omitempty" xml:"PurchasedTime,omitempty"`
	// The ID of the region in which the API is located.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **PRE**
	//
	// 	- **TEST**
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// Indicates whether the API is public. Valid values:
	//
	// 	- **PUBLIC**
	//
	// 	- **PRIVATE**
	//
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetApiId(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.ApiId = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetApiName(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.ApiName = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetDeployedTime(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.DeployedTime = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetDescription(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.Description = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetGroupId(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.GroupId = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetGroupName(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.GroupName = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetModifiedTime(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.ModifiedTime = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetPurchasedTime(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.PurchasedTime = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetRegionId(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.RegionId = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetStageName(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.StageName = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetVisibility(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.Visibility = &v
	return s
}

type DescribePurchasedApisResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePurchasedApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePurchasedApisResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApisResponse) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApisResponse) SetHeaders(v map[string]*string) *DescribePurchasedApisResponse {
	s.Headers = v
	return s
}

func (s *DescribePurchasedApisResponse) SetStatusCode(v int32) *DescribePurchasedApisResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePurchasedApisResponse) SetBody(v *DescribePurchasedApisResponseBody) *DescribePurchasedApisResponse {
	s.Body = v
	return s
}

type DescribeRegionsRequest struct {
	// The language in which you want to return the descriptions of the access control policies. Valid values:
	//
	// 	- zh-CN (default value): Chinese
	//
	// 	- en: English
	//
	// 	- ja: Japanese
	//
	// example:
	//
	// zh
	Language      *string `json:"Language,omitempty" xml:"Language,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeRegionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRegionsRequest) SetLanguage(v string) *DescribeRegionsRequest {
	s.Language = &v
	return s
}

func (s *DescribeRegionsRequest) SetSecurityToken(v string) *DescribeRegionsRequest {
	s.SecurityToken = &v
	return s
}

type DescribeRegionsResponseBody struct {
	// The returned region information. It is an array that consists of Region data.
	//
	// example:
	//
	// cn-huhehaote
	Regions *DescribeRegionsResponseBodyRegions `json:"Regions,omitempty" xml:"Regions,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 36BBBAD4-1CFB-489F-841A-8CA52EEA787E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRegionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBody) SetRegions(v *DescribeRegionsResponseBodyRegions) *DescribeRegionsResponseBody {
	s.Regions = v
	return s
}

func (s *DescribeRegionsResponseBody) SetRequestId(v string) *DescribeRegionsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRegionsResponseBodyRegions struct {
	Region []*DescribeRegionsResponseBodyRegionsRegion `json:"Region,omitempty" xml:"Region,omitempty" type:"Repeated"`
}

func (s DescribeRegionsResponseBodyRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegions) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegions) SetRegion(v []*DescribeRegionsResponseBodyRegionsRegion) *DescribeRegionsResponseBodyRegions {
	s.Region = v
	return s
}

type DescribeRegionsResponseBodyRegionsRegion struct {
	// The name of the region.
	//
	// example:
	//
	// China (Shenzhen)
	LocalName *string `json:"LocalName,omitempty" xml:"LocalName,omitempty"`
	// The endpoint of the service for the region.
	//
	// example:
	//
	// apigateway.cn-shenzhen.aliyuncs.com
	RegionEndpoint *string `json:"RegionEndpoint,omitempty" xml:"RegionEndpoint,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-shenzhen
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeRegionsResponseBodyRegionsRegion) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegionsRegion) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetLocalName(v string) *DescribeRegionsResponseBodyRegionsRegion {
	s.LocalName = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetRegionEndpoint(v string) *DescribeRegionsResponseBodyRegionsRegion {
	s.RegionEndpoint = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetRegionId(v string) *DescribeRegionsResponseBodyRegionsRegion {
	s.RegionId = &v
	return s
}

type DescribeRegionsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRegionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponse) SetHeaders(v map[string]*string) *DescribeRegionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRegionsResponse) SetStatusCode(v int32) *DescribeRegionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRegionsResponse) SetBody(v *DescribeRegionsResponseBody) *DescribeRegionsResponse {
	s.Body = v
	return s
}

type DescribeSignaturesRequest struct {
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The IDs of the keys to query.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// The names of the keys to query.
	//
	// example:
	//
	// backendsignature
	SignatureName *string `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
}

func (s DescribeSignaturesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesRequest) SetPageNumber(v int32) *DescribeSignaturesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSignaturesRequest) SetPageSize(v int32) *DescribeSignaturesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSignaturesRequest) SetSecurityToken(v string) *DescribeSignaturesRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeSignaturesRequest) SetSignatureId(v string) *DescribeSignaturesRequest {
	s.SignatureId = &v
	return s
}

func (s *DescribeSignaturesRequest) SetSignatureName(v string) *DescribeSignaturesRequest {
	s.SignatureName = &v
	return s
}

type DescribeSignaturesResponseBody struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned signature information. It is an array consisting of SignatureInfo data.
	SignatureInfos *DescribeSignaturesResponseBodySignatureInfos `json:"SignatureInfos,omitempty" xml:"SignatureInfos,omitempty" type:"Struct"`
	// The total number of returned entries.
	//
	// example:
	//
	// 20
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSignaturesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesResponseBody) SetPageNumber(v int32) *DescribeSignaturesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSignaturesResponseBody) SetPageSize(v int32) *DescribeSignaturesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSignaturesResponseBody) SetRequestId(v string) *DescribeSignaturesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSignaturesResponseBody) SetSignatureInfos(v *DescribeSignaturesResponseBodySignatureInfos) *DescribeSignaturesResponseBody {
	s.SignatureInfos = v
	return s
}

func (s *DescribeSignaturesResponseBody) SetTotalCount(v int32) *DescribeSignaturesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSignaturesResponseBodySignatureInfos struct {
	SignatureInfo []*DescribeSignaturesResponseBodySignatureInfosSignatureInfo `json:"SignatureInfo,omitempty" xml:"SignatureInfo,omitempty" type:"Repeated"`
}

func (s DescribeSignaturesResponseBodySignatureInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesResponseBodySignatureInfos) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesResponseBodySignatureInfos) SetSignatureInfo(v []*DescribeSignaturesResponseBodySignatureInfosSignatureInfo) *DescribeSignaturesResponseBodySignatureInfos {
	s.SignatureInfo = v
	return s
}

type DescribeSignaturesResponseBodySignatureInfosSignatureInfo struct {
	// The creation time of the key.
	//
	// example:
	//
	// 2016-07-23T08:28:48Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The last modification time of the key.
	//
	// example:
	//
	// 2016-07-24T08:28:48Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The region where the key is located.
	//
	// example:
	//
	// cn-qingdao
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the backend signature key.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// The Key value of the backend signature key.
	//
	// example:
	//
	// qwertyuiop
	SignatureKey *string `json:"SignatureKey,omitempty" xml:"SignatureKey,omitempty"`
	// The name of the backend signature key.
	//
	// example:
	//
	// backendsignature
	SignatureName *string `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
	// The Secret value of the backend signature key.
	//
	// example:
	//
	// asdfghjkl
	SignatureSecret *string `json:"SignatureSecret,omitempty" xml:"SignatureSecret,omitempty"`
}

func (s DescribeSignaturesResponseBodySignatureInfosSignatureInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesResponseBodySignatureInfosSignatureInfo) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesResponseBodySignatureInfosSignatureInfo) SetCreatedTime(v string) *DescribeSignaturesResponseBodySignatureInfosSignatureInfo {
	s.CreatedTime = &v
	return s
}

func (s *DescribeSignaturesResponseBodySignatureInfosSignatureInfo) SetModifiedTime(v string) *DescribeSignaturesResponseBodySignatureInfosSignatureInfo {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeSignaturesResponseBodySignatureInfosSignatureInfo) SetRegionId(v string) *DescribeSignaturesResponseBodySignatureInfosSignatureInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeSignaturesResponseBodySignatureInfosSignatureInfo) SetSignatureId(v string) *DescribeSignaturesResponseBodySignatureInfosSignatureInfo {
	s.SignatureId = &v
	return s
}

func (s *DescribeSignaturesResponseBodySignatureInfosSignatureInfo) SetSignatureKey(v string) *DescribeSignaturesResponseBodySignatureInfosSignatureInfo {
	s.SignatureKey = &v
	return s
}

func (s *DescribeSignaturesResponseBodySignatureInfosSignatureInfo) SetSignatureName(v string) *DescribeSignaturesResponseBodySignatureInfosSignatureInfo {
	s.SignatureName = &v
	return s
}

func (s *DescribeSignaturesResponseBodySignatureInfosSignatureInfo) SetSignatureSecret(v string) *DescribeSignaturesResponseBodySignatureInfosSignatureInfo {
	s.SignatureSecret = &v
	return s
}

type DescribeSignaturesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSignaturesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSignaturesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesResponse) SetHeaders(v map[string]*string) *DescribeSignaturesResponse {
	s.Headers = v
	return s
}

func (s *DescribeSignaturesResponse) SetStatusCode(v int32) *DescribeSignaturesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSignaturesResponse) SetBody(v *DescribeSignaturesResponseBody) *DescribeSignaturesResponse {
	s.Body = v
	return s
}

type DescribeSignaturesByApiRequest struct {
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3b81fd160f5645e097cc8855d75a1cf6
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the group to which the API belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeSignaturesByApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesByApiRequest) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesByApiRequest) SetApiId(v string) *DescribeSignaturesByApiRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeSignaturesByApiRequest) SetGroupId(v string) *DescribeSignaturesByApiRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeSignaturesByApiRequest) SetSecurityToken(v string) *DescribeSignaturesByApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeSignaturesByApiRequest) SetStageName(v string) *DescribeSignaturesByApiRequest {
	s.StageName = &v
	return s
}

type DescribeSignaturesByApiResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned signature key information. It is an array consisting of SignatureItem data.
	Signatures *DescribeSignaturesByApiResponseBodySignatures `json:"Signatures,omitempty" xml:"Signatures,omitempty" type:"Struct"`
}

func (s DescribeSignaturesByApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesByApiResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesByApiResponseBody) SetRequestId(v string) *DescribeSignaturesByApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSignaturesByApiResponseBody) SetSignatures(v *DescribeSignaturesByApiResponseBodySignatures) *DescribeSignaturesByApiResponseBody {
	s.Signatures = v
	return s
}

type DescribeSignaturesByApiResponseBodySignatures struct {
	SignatureItem []*DescribeSignaturesByApiResponseBodySignaturesSignatureItem `json:"SignatureItem,omitempty" xml:"SignatureItem,omitempty" type:"Repeated"`
}

func (s DescribeSignaturesByApiResponseBodySignatures) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesByApiResponseBodySignatures) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesByApiResponseBodySignatures) SetSignatureItem(v []*DescribeSignaturesByApiResponseBodySignaturesSignatureItem) *DescribeSignaturesByApiResponseBodySignatures {
	s.SignatureItem = v
	return s
}

type DescribeSignaturesByApiResponseBodySignaturesSignatureItem struct {
	// The time when the key was bound.
	//
	// example:
	//
	// 2016-07-23T08:28:48Z
	BoundTime *string `json:"BoundTime,omitempty" xml:"BoundTime,omitempty"`
	// The ID of the backend signature key.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// The name of the backend signature key.
	//
	// example:
	//
	// mysecret
	SignatureName *string `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
}

func (s DescribeSignaturesByApiResponseBodySignaturesSignatureItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesByApiResponseBodySignaturesSignatureItem) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesByApiResponseBodySignaturesSignatureItem) SetBoundTime(v string) *DescribeSignaturesByApiResponseBodySignaturesSignatureItem {
	s.BoundTime = &v
	return s
}

func (s *DescribeSignaturesByApiResponseBodySignaturesSignatureItem) SetSignatureId(v string) *DescribeSignaturesByApiResponseBodySignaturesSignatureItem {
	s.SignatureId = &v
	return s
}

func (s *DescribeSignaturesByApiResponseBodySignaturesSignatureItem) SetSignatureName(v string) *DescribeSignaturesByApiResponseBodySignaturesSignatureItem {
	s.SignatureName = &v
	return s
}

type DescribeSignaturesByApiResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSignaturesByApiResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSignaturesByApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesByApiResponse) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesByApiResponse) SetHeaders(v map[string]*string) *DescribeSignaturesByApiResponse {
	s.Headers = v
	return s
}

func (s *DescribeSignaturesByApiResponse) SetStatusCode(v int32) *DescribeSignaturesByApiResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSignaturesByApiResponse) SetBody(v *DescribeSignaturesByApiResponseBody) *DescribeSignaturesByApiResponse {
	s.Body = v
	return s
}

type DescribeSummaryDataRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeSummaryDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSummaryDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeSummaryDataRequest) SetSecurityToken(v string) *DescribeSummaryDataRequest {
	s.SecurityToken = &v
	return s
}

type DescribeSummaryDataResponseBody struct {
	// The number of subscription dedicated instances that expire in 14 days or less.
	//
	// example:
	//
	// 1
	ExpireInstanceNum *int32 `json:"ExpireInstanceNum,omitempty" xml:"ExpireInstanceNum,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The request ID.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The number of APIs.
	//
	// example:
	//
	// 10
	UsageApiNum *int32 `json:"UsageApiNum,omitempty" xml:"UsageApiNum,omitempty"`
	// The number of API groups.
	//
	// example:
	//
	// 1
	UsageGroupNum *int32 `json:"UsageGroupNum,omitempty" xml:"UsageGroupNum,omitempty"`
	// The number of running dedicated instances.
	//
	// example:
	//
	// 1
	UsageInstanceNum *int32 `json:"UsageInstanceNum,omitempty" xml:"UsageInstanceNum,omitempty"`
}

func (s DescribeSummaryDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSummaryDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSummaryDataResponseBody) SetExpireInstanceNum(v int32) *DescribeSummaryDataResponseBody {
	s.ExpireInstanceNum = &v
	return s
}

func (s *DescribeSummaryDataResponseBody) SetRegion(v string) *DescribeSummaryDataResponseBody {
	s.Region = &v
	return s
}

func (s *DescribeSummaryDataResponseBody) SetRequestId(v string) *DescribeSummaryDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSummaryDataResponseBody) SetUsageApiNum(v int32) *DescribeSummaryDataResponseBody {
	s.UsageApiNum = &v
	return s
}

func (s *DescribeSummaryDataResponseBody) SetUsageGroupNum(v int32) *DescribeSummaryDataResponseBody {
	s.UsageGroupNum = &v
	return s
}

func (s *DescribeSummaryDataResponseBody) SetUsageInstanceNum(v int32) *DescribeSummaryDataResponseBody {
	s.UsageInstanceNum = &v
	return s
}

type DescribeSummaryDataResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSummaryDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSummaryDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSummaryDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeSummaryDataResponse) SetHeaders(v map[string]*string) *DescribeSummaryDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeSummaryDataResponse) SetStatusCode(v int32) *DescribeSummaryDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSummaryDataResponse) SetBody(v *DescribeSummaryDataResponseBody) *DescribeSummaryDataResponse {
	s.Body = v
	return s
}

type DescribeSystemParametersRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeSystemParametersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemParametersRequest) GoString() string {
	return s.String()
}

func (s *DescribeSystemParametersRequest) SetSecurityToken(v string) *DescribeSystemParametersRequest {
	s.SecurityToken = &v
	return s
}

type DescribeSystemParametersResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 0CCDF65E-6050-412D-AD68-FA3D9196836C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned information about system parameters. It is an array that consists of SystemParam data.
	SystemParams *DescribeSystemParametersResponseBodySystemParams `json:"SystemParams,omitempty" xml:"SystemParams,omitempty" type:"Struct"`
}

func (s DescribeSystemParametersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemParametersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSystemParametersResponseBody) SetRequestId(v string) *DescribeSystemParametersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSystemParametersResponseBody) SetSystemParams(v *DescribeSystemParametersResponseBodySystemParams) *DescribeSystemParametersResponseBody {
	s.SystemParams = v
	return s
}

type DescribeSystemParametersResponseBodySystemParams struct {
	SystemParamItem []*DescribeSystemParametersResponseBodySystemParamsSystemParamItem `json:"SystemParamItem,omitempty" xml:"SystemParamItem,omitempty" type:"Repeated"`
}

func (s DescribeSystemParametersResponseBodySystemParams) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemParametersResponseBodySystemParams) GoString() string {
	return s.String()
}

func (s *DescribeSystemParametersResponseBodySystemParams) SetSystemParamItem(v []*DescribeSystemParametersResponseBodySystemParamsSystemParamItem) *DescribeSystemParametersResponseBodySystemParams {
	s.SystemParamItem = v
	return s
}

type DescribeSystemParametersResponseBodySystemParamsSystemParamItem struct {
	// Examples
	//
	// example:
	//
	// 192.168.1.1
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The description of a parameter.
	//
	// example:
	//
	// Client IP Address
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the parameter.
	//
	// example:
	//
	// CaClientIp
	ParamName *string `json:"ParamName,omitempty" xml:"ParamName,omitempty"`
	// The type of the parameter.
	//
	// example:
	//
	// string
	ParamType *string `json:"ParamType,omitempty" xml:"ParamType,omitempty"`
}

func (s DescribeSystemParametersResponseBodySystemParamsSystemParamItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemParametersResponseBodySystemParamsSystemParamItem) GoString() string {
	return s.String()
}

func (s *DescribeSystemParametersResponseBodySystemParamsSystemParamItem) SetDemoValue(v string) *DescribeSystemParametersResponseBodySystemParamsSystemParamItem {
	s.DemoValue = &v
	return s
}

func (s *DescribeSystemParametersResponseBodySystemParamsSystemParamItem) SetDescription(v string) *DescribeSystemParametersResponseBodySystemParamsSystemParamItem {
	s.Description = &v
	return s
}

func (s *DescribeSystemParametersResponseBodySystemParamsSystemParamItem) SetParamName(v string) *DescribeSystemParametersResponseBodySystemParamsSystemParamItem {
	s.ParamName = &v
	return s
}

func (s *DescribeSystemParametersResponseBodySystemParamsSystemParamItem) SetParamType(v string) *DescribeSystemParametersResponseBodySystemParamsSystemParamItem {
	s.ParamType = &v
	return s
}

type DescribeSystemParametersResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSystemParametersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSystemParametersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemParametersResponse) GoString() string {
	return s.String()
}

func (s *DescribeSystemParametersResponse) SetHeaders(v map[string]*string) *DescribeSystemParametersResponse {
	s.Headers = v
	return s
}

func (s *DescribeSystemParametersResponse) SetStatusCode(v int32) *DescribeSystemParametersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSystemParametersResponse) SetBody(v *DescribeSystemParametersResponseBody) *DescribeSystemParametersResponse {
	s.Body = v
	return s
}

type DescribeTrafficControlsRequest struct {
	// The specified API ID. This parameter must be specified together with GroupId and StageName.
	//
	// example:
	//
	// 3b81fd160f5645e097cc8855d75a1cf6
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The specified group ID. This parameter must be specified together with ApiId and StageName.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The security token included in the WebSocket request header. The system uses this token to authenticate the request.
	//
	// example:
	//
	// 436fa39b-b3b9-40c5-ae5d-ce3e000e38c5
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment name. This parameter must be specified together with GroupId and ApiId. Valid values:********
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The ID of the throttling policy.
	//
	// example:
	//
	// tf123456
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
	// The name of the throttling policy.
	//
	// example:
	//
	// ThrottlingTest
	TrafficControlName *string `json:"TrafficControlName,omitempty" xml:"TrafficControlName,omitempty"`
}

func (s DescribeTrafficControlsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsRequest) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsRequest) SetApiId(v string) *DescribeTrafficControlsRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeTrafficControlsRequest) SetGroupId(v string) *DescribeTrafficControlsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeTrafficControlsRequest) SetPageNumber(v int32) *DescribeTrafficControlsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTrafficControlsRequest) SetPageSize(v int32) *DescribeTrafficControlsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTrafficControlsRequest) SetSecurityToken(v string) *DescribeTrafficControlsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeTrafficControlsRequest) SetStageName(v string) *DescribeTrafficControlsRequest {
	s.StageName = &v
	return s
}

func (s *DescribeTrafficControlsRequest) SetTrafficControlId(v string) *DescribeTrafficControlsRequest {
	s.TrafficControlId = &v
	return s
}

func (s *DescribeTrafficControlsRequest) SetTrafficControlName(v string) *DescribeTrafficControlsRequest {
	s.TrafficControlName = &v
	return s
}

type DescribeTrafficControlsResponseBody struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 93D91A99-F093-4596-87BA-3C4FBFD3FD8A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The returned throttling policy information. It is an array consisting of TrafficControl data.
	TrafficControls *DescribeTrafficControlsResponseBodyTrafficControls `json:"TrafficControls,omitempty" xml:"TrafficControls,omitempty" type:"Struct"`
}

func (s DescribeTrafficControlsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsResponseBody) SetPageNumber(v int32) *DescribeTrafficControlsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeTrafficControlsResponseBody) SetPageSize(v int32) *DescribeTrafficControlsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeTrafficControlsResponseBody) SetRequestId(v string) *DescribeTrafficControlsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTrafficControlsResponseBody) SetTotalCount(v int32) *DescribeTrafficControlsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeTrafficControlsResponseBody) SetTrafficControls(v *DescribeTrafficControlsResponseBodyTrafficControls) *DescribeTrafficControlsResponseBody {
	s.TrafficControls = v
	return s
}

type DescribeTrafficControlsResponseBodyTrafficControls struct {
	TrafficControl []*DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl `json:"TrafficControl,omitempty" xml:"TrafficControl,omitempty" type:"Repeated"`
}

func (s DescribeTrafficControlsResponseBodyTrafficControls) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsResponseBodyTrafficControls) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsResponseBodyTrafficControls) SetTrafficControl(v []*DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) *DescribeTrafficControlsResponseBodyTrafficControls {
	s.TrafficControl = v
	return s
}

type DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl struct {
	// The default throttling value for each API.
	//
	// example:
	//
	// 20000
	ApiDefault *int32 `json:"ApiDefault,omitempty" xml:"ApiDefault,omitempty"`
	// The default throttling value for each app.
	//
	// example:
	//
	// 8000
	AppDefault *int32 `json:"AppDefault,omitempty" xml:"AppDefault,omitempty"`
	// The creation time (UTC) of the throttling policy.
	//
	// example:
	//
	// 2016-01-27T10:19:39Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The description of the throttling policy.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The last modification time (UTC) of the throttling policy.
	//
	// example:
	//
	// 2016-01-27T10:34:38Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The returned information about a special throttling policy. It is an array consisting of SpecialPolicy data.
	SpecialPolicies *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPolicies `json:"SpecialPolicies,omitempty" xml:"SpecialPolicies,omitempty" type:"Struct"`
	// The ID of the throttling policy.
	//
	// example:
	//
	// cfed6c970d45481dbe136d6b5ac68c41
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
	// The name of the throttling policy.
	//
	// example:
	//
	// wulingtestq1
	TrafficControlName *string `json:"TrafficControlName,omitempty" xml:"TrafficControlName,omitempty"`
	// The unit to be used in the throttling policy. Valid values:
	//
	// 	- MINUTE
	//
	// 	- HOUR
	//
	// 	- DAY
	//
	// example:
	//
	// Minute
	TrafficControlUnit *string `json:"TrafficControlUnit,omitempty" xml:"TrafficControlUnit,omitempty"`
	// The default throttling value for each user.
	//
	// example:
	//
	// 15000
	UserDefault *int32 `json:"UserDefault,omitempty" xml:"UserDefault,omitempty"`
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetApiDefault(v int32) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.ApiDefault = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetAppDefault(v int32) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.AppDefault = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetCreatedTime(v string) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.CreatedTime = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetDescription(v string) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.Description = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetModifiedTime(v string) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetSpecialPolicies(v *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPolicies) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.SpecialPolicies = v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetTrafficControlId(v string) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.TrafficControlId = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetTrafficControlName(v string) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.TrafficControlName = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetTrafficControlUnit(v string) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.TrafficControlUnit = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetUserDefault(v int32) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.UserDefault = &v
	return s
}

type DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPolicies struct {
	SpecialPolicy []*DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy `json:"SpecialPolicy,omitempty" xml:"SpecialPolicy,omitempty" type:"Repeated"`
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPolicies) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPolicies) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPolicies) SetSpecialPolicy(v []*DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPolicies {
	s.SpecialPolicy = v
	return s
}

type DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy struct {
	// The type of the special throttling policy. Valid values:
	//
	// 	- **APP**
	//
	// 	- **USER**
	//
	// example:
	//
	// USER
	SpecialType *string `json:"SpecialType,omitempty" xml:"SpecialType,omitempty"`
	// The returned information about a special throttling policy. It is an array consisting of Special data.
	Specials *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecials `json:"Specials,omitempty" xml:"Specials,omitempty" type:"Struct"`
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy) SetSpecialType(v string) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy {
	s.SpecialType = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy) SetSpecials(v *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecials) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy {
	s.Specials = v
	return s
}

type DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecials struct {
	Special []*DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial `json:"Special,omitempty" xml:"Special,omitempty" type:"Repeated"`
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecials) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecials) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecials) SetSpecial(v []*DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecials {
	s.Special = v
	return s
}

type DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial struct {
	// The AppId or user account corresponding to SpecialType.
	//
	// example:
	//
	// test_wg@aliyun.com
	SpecialKey *string `json:"SpecialKey,omitempty" xml:"SpecialKey,omitempty"`
	// The throttling value.
	//
	// example:
	//
	// 100
	TrafficValue *int32 `json:"TrafficValue,omitempty" xml:"TrafficValue,omitempty"`
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial) SetSpecialKey(v string) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial {
	s.SpecialKey = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial) SetTrafficValue(v int32) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial {
	s.TrafficValue = &v
	return s
}

type DescribeTrafficControlsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTrafficControlsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTrafficControlsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsResponse) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsResponse) SetHeaders(v map[string]*string) *DescribeTrafficControlsResponse {
	s.Headers = v
	return s
}

func (s *DescribeTrafficControlsResponse) SetStatusCode(v int32) *DescribeTrafficControlsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTrafficControlsResponse) SetBody(v *DescribeTrafficControlsResponseBody) *DescribeTrafficControlsResponse {
	s.Body = v
	return s
}

type DescribeTrafficControlsByApiRequest struct {
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3b81fd160f5645e097cc8855d75a1cf6
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the group to which the API to be queried belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The security token included in the WebSocket request header. The system uses this token to authenticate the request.
	//
	// example:
	//
	// 7c51b234-48d3-44e1-9b36-e2ddccc738e3
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The runtime environment of the API. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeTrafficControlsByApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsByApiRequest) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsByApiRequest) SetApiId(v string) *DescribeTrafficControlsByApiRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeTrafficControlsByApiRequest) SetGroupId(v string) *DescribeTrafficControlsByApiRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeTrafficControlsByApiRequest) SetSecurityToken(v string) *DescribeTrafficControlsByApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeTrafficControlsByApiRequest) SetStageName(v string) *DescribeTrafficControlsByApiRequest {
	s.StageName = &v
	return s
}

type DescribeTrafficControlsByApiResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The returned throttling policy information. It is an array consisting of TrafficControlItem data.
	TrafficControlItems *DescribeTrafficControlsByApiResponseBodyTrafficControlItems `json:"TrafficControlItems,omitempty" xml:"TrafficControlItems,omitempty" type:"Struct"`
}

func (s DescribeTrafficControlsByApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsByApiResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsByApiResponseBody) SetRequestId(v string) *DescribeTrafficControlsByApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTrafficControlsByApiResponseBody) SetTrafficControlItems(v *DescribeTrafficControlsByApiResponseBodyTrafficControlItems) *DescribeTrafficControlsByApiResponseBody {
	s.TrafficControlItems = v
	return s
}

type DescribeTrafficControlsByApiResponseBodyTrafficControlItems struct {
	TrafficControlItem []*DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem `json:"TrafficControlItem,omitempty" xml:"TrafficControlItem,omitempty" type:"Repeated"`
}

func (s DescribeTrafficControlsByApiResponseBodyTrafficControlItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsByApiResponseBodyTrafficControlItems) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsByApiResponseBodyTrafficControlItems) SetTrafficControlItem(v []*DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem) *DescribeTrafficControlsByApiResponseBodyTrafficControlItems {
	s.TrafficControlItem = v
	return s
}

type DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem struct {
	// The binding time of the policy.
	//
	// example:
	//
	// 2016-07-23T08:28:48Z
	BoundTime *string `json:"BoundTime,omitempty" xml:"BoundTime,omitempty"`
	// The ID of the throttling policy.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	TrafficControlItemId *string `json:"TrafficControlItemId,omitempty" xml:"TrafficControlItemId,omitempty"`
	// The name of the throttling policy.
	//
	// example:
	//
	// mysecret
	TrafficControlItemName *string `json:"TrafficControlItemName,omitempty" xml:"TrafficControlItemName,omitempty"`
}

func (s DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem) SetBoundTime(v string) *DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem {
	s.BoundTime = &v
	return s
}

func (s *DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem) SetTrafficControlItemId(v string) *DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem {
	s.TrafficControlItemId = &v
	return s
}

func (s *DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem) SetTrafficControlItemName(v string) *DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem {
	s.TrafficControlItemName = &v
	return s
}

type DescribeTrafficControlsByApiResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTrafficControlsByApiResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTrafficControlsByApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsByApiResponse) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsByApiResponse) SetHeaders(v map[string]*string) *DescribeTrafficControlsByApiResponse {
	s.Headers = v
	return s
}

func (s *DescribeTrafficControlsByApiResponse) SetStatusCode(v int32) *DescribeTrafficControlsByApiResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTrafficControlsByApiResponse) SetBody(v *DescribeTrafficControlsByApiResponseBody) *DescribeTrafficControlsByApiResponse {
	s.Body = v
	return s
}

type DescribeUpdateBackendTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 4e13c3e0c44c4a4ebb5231264eeb9bc1
	OperationUid  *string `json:"OperationUid,omitempty" xml:"OperationUid,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeUpdateBackendTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateBackendTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeUpdateBackendTaskRequest) SetOperationUid(v string) *DescribeUpdateBackendTaskRequest {
	s.OperationUid = &v
	return s
}

func (s *DescribeUpdateBackendTaskRequest) SetSecurityToken(v string) *DescribeUpdateBackendTaskRequest {
	s.SecurityToken = &v
	return s
}

type DescribeUpdateBackendTaskResponseBody struct {
	ApiUpdateBackendResults *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResults `json:"ApiUpdateBackendResults,omitempty" xml:"ApiUpdateBackendResults,omitempty" type:"Struct"`
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ016
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUpdateBackendTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateBackendTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUpdateBackendTaskResponseBody) SetApiUpdateBackendResults(v *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResults) *DescribeUpdateBackendTaskResponseBody {
	s.ApiUpdateBackendResults = v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBody) SetRequestId(v string) *DescribeUpdateBackendTaskResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResults struct {
	ApiUpdateBackendResult []*DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult `json:"ApiUpdateBackendResult,omitempty" xml:"ApiUpdateBackendResult,omitempty" type:"Repeated"`
}

func (s DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResults) GoString() string {
	return s.String()
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResults) SetApiUpdateBackendResult(v []*DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResults {
	s.ApiUpdateBackendResult = v
	return s
}

type DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult struct {
	// example:
	//
	// checkin_linechart_today
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// example:
	//
	// 14faa7ba0572445685866ddb6a6f19da
	ApiUid *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	// example:
	//
	// c09b078bcb8f4ade9677bd8b18cdf43f
	BackendId *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	// example:
	//
	// Failed
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// example:
	//
	// 3013a55c0c44483f984d26df27120513
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// imotob1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// example:
	//
	// d8f2f54f3309458b8aaceb36c01c2dd9
	StageId *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// example:
	//
	// OVER
	UpdateStatus *string `json:"UpdateStatus,omitempty" xml:"UpdateStatus,omitempty"`
}

func (s DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) GoString() string {
	return s.String()
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetApiName(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.ApiName = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetApiUid(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.ApiUid = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetBackendId(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.BackendId = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetErrorMsg(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetGroupId(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.GroupId = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetGroupName(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.GroupName = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetStageId(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.StageId = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetStageName(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.StageName = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetUpdateStatus(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.UpdateStatus = &v
	return s
}

type DescribeUpdateBackendTaskResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeUpdateBackendTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeUpdateBackendTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateBackendTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeUpdateBackendTaskResponse) SetHeaders(v map[string]*string) *DescribeUpdateBackendTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeUpdateBackendTaskResponse) SetStatusCode(v int32) *DescribeUpdateBackendTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponse) SetBody(v *DescribeUpdateBackendTaskResponseBody) *DescribeUpdateBackendTaskResponse {
	s.Body = v
	return s
}

type DescribeUpdateVpcInfoTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 7d341787517a47afaaef9cc1bdb7acce
	OperationUid  *string `json:"OperationUid,omitempty" xml:"OperationUid,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeUpdateVpcInfoTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateVpcInfoTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeUpdateVpcInfoTaskRequest) SetOperationUid(v string) *DescribeUpdateVpcInfoTaskRequest {
	s.OperationUid = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskRequest) SetSecurityToken(v string) *DescribeUpdateVpcInfoTaskRequest {
	s.SecurityToken = &v
	return s
}

type DescribeUpdateVpcInfoTaskResponseBody struct {
	ApiUpdateVpcInfoResults *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResults `json:"ApiUpdateVpcInfoResults,omitempty" xml:"ApiUpdateVpcInfoResults,omitempty" type:"Struct"`
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ015
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUpdateVpcInfoTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateVpcInfoTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUpdateVpcInfoTaskResponseBody) SetApiUpdateVpcInfoResults(v *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResults) *DescribeUpdateVpcInfoTaskResponseBody {
	s.ApiUpdateVpcInfoResults = v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponseBody) SetRequestId(v string) *DescribeUpdateVpcInfoTaskResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResults struct {
	ApiUpdateVpcInfoResult []*DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult `json:"ApiUpdateVpcInfoResult,omitempty" xml:"ApiUpdateVpcInfoResult,omitempty" type:"Repeated"`
}

func (s DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResults) GoString() string {
	return s.String()
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResults) SetApiUpdateVpcInfoResult(v []*DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResults {
	s.ApiUpdateVpcInfoResult = v
	return s
}

type DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult struct {
	// example:
	//
	// api_test2
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// example:
	//
	// 86364e7c166c47ba819b3f8f95ac0913
	ApiUid *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	// example:
	//
	// Success. Request Success.
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// example:
	//
	// e8da6f6346184da9a30d0dc1888b1f3b
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// test
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// example:
	//
	// fe952b95072747e2a8dfd336bcff8d7f
	StageId *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// example:
	//
	// success
	UpdateStatus *string `json:"UpdateStatus,omitempty" xml:"UpdateStatus,omitempty"`
}

func (s DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) GoString() string {
	return s.String()
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) SetApiName(v string) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult {
	s.ApiName = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) SetApiUid(v string) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult {
	s.ApiUid = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) SetErrorMsg(v string) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) SetGroupId(v string) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult {
	s.GroupId = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) SetGroupName(v string) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult {
	s.GroupName = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) SetStageId(v string) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult {
	s.StageId = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) SetStageName(v string) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult {
	s.StageName = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) SetUpdateStatus(v string) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult {
	s.UpdateStatus = &v
	return s
}

type DescribeUpdateVpcInfoTaskResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeUpdateVpcInfoTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeUpdateVpcInfoTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateVpcInfoTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeUpdateVpcInfoTaskResponse) SetHeaders(v map[string]*string) *DescribeUpdateVpcInfoTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponse) SetStatusCode(v int32) *DescribeUpdateVpcInfoTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponse) SetBody(v *DescribeUpdateVpcInfoTaskResponseBody) *DescribeUpdateVpcInfoTaskResponse {
	s.Body = v
	return s
}

type DescribeVpcAccessesRequest struct {
	AccurateQuery *bool `json:"AccurateQuery,omitempty" xml:"AccurateQuery,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// 10.199.26.***
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the authorization. The name must be unique.
	//
	// example:
	//
	// wuying-edm-svc
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The service port.
	//
	// example:
	//
	// 8080
	Port          *string `json:"Port,omitempty" xml:"Port,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The tag of objects that match the rule. You can specify multiple tags.
	Tag []*DescribeVpcAccessesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// The ID of the VPC authorization.
	//
	// example:
	//
	// vpc-*****ssds24
	VpcAccessId *string `json:"VpcAccessId,omitempty" xml:"VpcAccessId,omitempty"`
	// The ID of the VPC.
	//
	// example:
	//
	// vpc-uf657qec7lx42paw3qxxx
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeVpcAccessesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAccessesRequest) GoString() string {
	return s.String()
}

func (s *DescribeVpcAccessesRequest) SetAccurateQuery(v bool) *DescribeVpcAccessesRequest {
	s.AccurateQuery = &v
	return s
}

func (s *DescribeVpcAccessesRequest) SetInstanceId(v string) *DescribeVpcAccessesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeVpcAccessesRequest) SetName(v string) *DescribeVpcAccessesRequest {
	s.Name = &v
	return s
}

func (s *DescribeVpcAccessesRequest) SetPageNumber(v int32) *DescribeVpcAccessesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpcAccessesRequest) SetPageSize(v int32) *DescribeVpcAccessesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVpcAccessesRequest) SetPort(v string) *DescribeVpcAccessesRequest {
	s.Port = &v
	return s
}

func (s *DescribeVpcAccessesRequest) SetSecurityToken(v string) *DescribeVpcAccessesRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeVpcAccessesRequest) SetTag(v []*DescribeVpcAccessesRequestTag) *DescribeVpcAccessesRequest {
	s.Tag = v
	return s
}

func (s *DescribeVpcAccessesRequest) SetVpcAccessId(v string) *DescribeVpcAccessesRequest {
	s.VpcAccessId = &v
	return s
}

func (s *DescribeVpcAccessesRequest) SetVpcId(v string) *DescribeVpcAccessesRequest {
	s.VpcId = &v
	return s
}

type DescribeVpcAccessesRequestTag struct {
	// The key of the tag.
	//
	// example:
	//
	// appname
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// product
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeVpcAccessesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAccessesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeVpcAccessesRequestTag) SetKey(v string) *DescribeVpcAccessesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeVpcAccessesRequestTag) SetValue(v string) *DescribeVpcAccessesRequestTag {
	s.Value = &v
	return s
}

type DescribeVpcAccessesResponseBody struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 8883AC74-259D-4C0B-99FC-0B7F9A588B2F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The information about the VPC access authorization. The information is an array consisting of VpcAccessAttribute data.
	VpcAccessAttributes *DescribeVpcAccessesResponseBodyVpcAccessAttributes `json:"VpcAccessAttributes,omitempty" xml:"VpcAccessAttributes,omitempty" type:"Struct"`
}

func (s DescribeVpcAccessesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAccessesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVpcAccessesResponseBody) SetPageNumber(v int32) *DescribeVpcAccessesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpcAccessesResponseBody) SetPageSize(v int32) *DescribeVpcAccessesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVpcAccessesResponseBody) SetRequestId(v string) *DescribeVpcAccessesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVpcAccessesResponseBody) SetTotalCount(v int32) *DescribeVpcAccessesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeVpcAccessesResponseBody) SetVpcAccessAttributes(v *DescribeVpcAccessesResponseBodyVpcAccessAttributes) *DescribeVpcAccessesResponseBody {
	s.VpcAccessAttributes = v
	return s
}

type DescribeVpcAccessesResponseBodyVpcAccessAttributes struct {
	VpcAccessAttribute []*DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute `json:"VpcAccessAttribute,omitempty" xml:"VpcAccessAttribute,omitempty" type:"Repeated"`
}

func (s DescribeVpcAccessesResponseBodyVpcAccessAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAccessesResponseBodyVpcAccessAttributes) GoString() string {
	return s.String()
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributes) SetVpcAccessAttribute(v []*DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) *DescribeVpcAccessesResponseBodyVpcAccessAttributes {
	s.VpcAccessAttribute = v
	return s
}

type DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute struct {
	// The time when the authorization was created.
	//
	// example:
	//
	// 2017-01-30T04:10:19Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The description of the VPC access authorization.
	//
	// example:
	//
	// Test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the Elastic Compute Service (ECS) or Server Load Balancer (SLB) instance in the VPC.
	//
	// example:
	//
	// i-uf6bzcg1pr4oh5jjmxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the authorization.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The port number that corresponds to the instance.
	//
	// example:
	//
	// 80
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The list of tags.
	Tags *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttributeTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	// The ID of the VPC access authorization.
	//
	// example:
	//
	// vpc-*****ssds24
	VpcAccessId *string `json:"VpcAccessId,omitempty" xml:"VpcAccessId,omitempty"`
	// The ID of the VPC.
	//
	// example:
	//
	// vpc-uf657qec7lx42paw3qxxx
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The host of the backend service.
	//
	// example:
	//
	// hos-a***.fh-**nc.com
	VpcTargetHostName *string `json:"VpcTargetHostName,omitempty" xml:"VpcTargetHostName,omitempty"`
}

func (s DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) GoString() string {
	return s.String()
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetCreatedTime(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.CreatedTime = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetDescription(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.Description = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetInstanceId(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.InstanceId = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetName(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.Name = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetPort(v int32) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.Port = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetRegionId(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetTags(v *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttributeTags) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.Tags = v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetVpcAccessId(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.VpcAccessId = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetVpcId(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.VpcId = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetVpcTargetHostName(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.VpcTargetHostName = &v
	return s
}

type DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttributeTags struct {
	TagInfo []*DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttributeTagsTagInfo `json:"TagInfo,omitempty" xml:"TagInfo,omitempty" type:"Repeated"`
}

func (s DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttributeTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttributeTags) GoString() string {
	return s.String()
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttributeTags) SetTagInfo(v []*DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttributeTagsTagInfo) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttributeTags {
	s.TagInfo = v
	return s
}

type DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttributeTagsTagInfo struct {
	// The key of the tag.
	//
	// example:
	//
	// PROJECT
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// 6427a17ae6041d1be62414e4
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttributeTagsTagInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttributeTagsTagInfo) GoString() string {
	return s.String()
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttributeTagsTagInfo) SetKey(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttributeTagsTagInfo {
	s.Key = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttributeTagsTagInfo) SetValue(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttributeTagsTagInfo {
	s.Value = &v
	return s
}

type DescribeVpcAccessesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVpcAccessesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVpcAccessesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAccessesResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpcAccessesResponse) SetHeaders(v map[string]*string) *DescribeVpcAccessesResponse {
	s.Headers = v
	return s
}

func (s *DescribeVpcAccessesResponse) SetStatusCode(v int32) *DescribeVpcAccessesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVpcAccessesResponse) SetBody(v *DescribeVpcAccessesResponseBody) *DescribeVpcAccessesResponse {
	s.Body = v
	return s
}

type DescribeZonesRequest struct {
	// The language in which you want to use to return the description of the system policy. Valid values:
	//
	// 	- en: English
	//
	// 	- zh-CN: Chinese
	//
	// 	- ja: Japanese
	//
	// example:
	//
	// zh
	Language      *string `json:"Language,omitempty" xml:"Language,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeZonesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesRequest) GoString() string {
	return s.String()
}

func (s *DescribeZonesRequest) SetLanguage(v string) *DescribeZonesRequest {
	s.Language = &v
	return s
}

func (s *DescribeZonesRequest) SetSecurityToken(v string) *DescribeZonesRequest {
	s.SecurityToken = &v
	return s
}

type DescribeZonesResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 9324B68F-9863-5722-A0FD-0798E2B02A0E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The zones available in the current region.
	//
	// example:
	//
	// {\\"Zone\\": [{\\"ZoneId\\": \\"cn-hangzhou-i\\"}]}
	Zones *DescribeZonesResponseBodyZones `json:"Zones,omitempty" xml:"Zones,omitempty" type:"Struct"`
}

func (s DescribeZonesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseBody) SetRequestId(v string) *DescribeZonesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeZonesResponseBody) SetZones(v *DescribeZonesResponseBodyZones) *DescribeZonesResponseBody {
	s.Zones = v
	return s
}

type DescribeZonesResponseBodyZones struct {
	Zone []*DescribeZonesResponseBodyZonesZone `json:"Zone,omitempty" xml:"Zone,omitempty" type:"Repeated"`
}

func (s DescribeZonesResponseBodyZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseBodyZones) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseBodyZones) SetZone(v []*DescribeZonesResponseBodyZonesZone) *DescribeZonesResponseBodyZones {
	s.Zone = v
	return s
}

type DescribeZonesResponseBodyZonesZone struct {
	// The name of the zone.
	//
	// example:
	//
	// China (Hangzhou) Multi-zone 2(j,g)
	LocalName *string `json:"LocalName,omitempty" xml:"LocalName,omitempty"`
	// The ID of the zone.
	//
	// example:
	//
	// cn-hangzhou-MAZ2(j,g)
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeZonesResponseBodyZonesZone) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseBodyZonesZone) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseBodyZonesZone) SetLocalName(v string) *DescribeZonesResponseBodyZonesZone {
	s.LocalName = &v
	return s
}

func (s *DescribeZonesResponseBodyZonesZone) SetZoneId(v string) *DescribeZonesResponseBodyZonesZone {
	s.ZoneId = &v
	return s
}

type DescribeZonesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeZonesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeZonesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponse) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponse) SetHeaders(v map[string]*string) *DescribeZonesResponse {
	s.Headers = v
	return s
}

func (s *DescribeZonesResponse) SetStatusCode(v int32) *DescribeZonesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeZonesResponse) SetBody(v *DescribeZonesResponseBody) *DescribeZonesResponse {
	s.Body = v
	return s
}

type DetachApiProductRequest struct {
	// The ID of the API product.
	//
	// This parameter is required.
	//
	// example:
	//
	// 117b7a64a8b3f064eaa4a47ac62aac5e
	ApiProductId *string `json:"ApiProductId,omitempty" xml:"ApiProductId,omitempty"`
	// The APIs that you want to detach from the API product.
	//
	// This parameter is required.
	Apis          []*DetachApiProductRequestApis `json:"Apis,omitempty" xml:"Apis,omitempty" type:"Repeated"`
	SecurityToken *string                        `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DetachApiProductRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachApiProductRequest) GoString() string {
	return s.String()
}

func (s *DetachApiProductRequest) SetApiProductId(v string) *DetachApiProductRequest {
	s.ApiProductId = &v
	return s
}

func (s *DetachApiProductRequest) SetApis(v []*DetachApiProductRequestApis) *DetachApiProductRequest {
	s.Apis = v
	return s
}

func (s *DetachApiProductRequest) SetSecurityToken(v string) *DetachApiProductRequest {
	s.SecurityToken = &v
	return s
}

type DetachApiProductRequestApis struct {
	// The API ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// ba84c55eca46488598da17c0609f3ead
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The environment to which the API is published. Valid values:
	//
	// 	- **RELEASE**: the production environment
	//
	// 	- **PRE**: the pre-release environment
	//
	// 	- **TEST**: the test environment
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DetachApiProductRequestApis) String() string {
	return tea.Prettify(s)
}

func (s DetachApiProductRequestApis) GoString() string {
	return s.String()
}

func (s *DetachApiProductRequestApis) SetApiId(v string) *DetachApiProductRequestApis {
	s.ApiId = &v
	return s
}

func (s *DetachApiProductRequestApis) SetStageName(v string) *DetachApiProductRequestApis {
	s.StageName = &v
	return s
}

type DetachApiProductResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 98E4A7DC-1EA6-5E6A-ACFE-91B60CE7D4BB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DetachApiProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachApiProductResponseBody) GoString() string {
	return s.String()
}

func (s *DetachApiProductResponseBody) SetRequestId(v string) *DetachApiProductResponseBody {
	s.RequestId = &v
	return s
}

type DetachApiProductResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetachApiProductResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetachApiProductResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachApiProductResponse) GoString() string {
	return s.String()
}

func (s *DetachApiProductResponse) SetHeaders(v map[string]*string) *DetachApiProductResponse {
	s.Headers = v
	return s
}

func (s *DetachApiProductResponse) SetStatusCode(v int32) *DetachApiProductResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachApiProductResponse) SetBody(v *DetachApiProductResponseBody) *DetachApiProductResponse {
	s.Body = v
	return s
}

type DetachPluginRequest struct {
	// example:
	//
	// 19a2846d8e8541c788c6be740035eb68
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// example:
	//
	// 93b87279e54c4c0baeb7113cdf9c67f5
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 05df2b52a3644a3a8b1935ab8ab59e9d
	PluginId      *string `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DetachPluginRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachPluginRequest) GoString() string {
	return s.String()
}

func (s *DetachPluginRequest) SetApiId(v string) *DetachPluginRequest {
	s.ApiId = &v
	return s
}

func (s *DetachPluginRequest) SetGroupId(v string) *DetachPluginRequest {
	s.GroupId = &v
	return s
}

func (s *DetachPluginRequest) SetPluginId(v string) *DetachPluginRequest {
	s.PluginId = &v
	return s
}

func (s *DetachPluginRequest) SetSecurityToken(v string) *DetachPluginRequest {
	s.SecurityToken = &v
	return s
}

func (s *DetachPluginRequest) SetStageName(v string) *DetachPluginRequest {
	s.StageName = &v
	return s
}

type DetachPluginResponseBody struct {
	// example:
	//
	// AD00F8C0-311B-54A9-ADE2-2436771012DA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DetachPluginResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachPluginResponseBody) GoString() string {
	return s.String()
}

func (s *DetachPluginResponseBody) SetRequestId(v string) *DetachPluginResponseBody {
	s.RequestId = &v
	return s
}

type DetachPluginResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetachPluginResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetachPluginResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachPluginResponse) GoString() string {
	return s.String()
}

func (s *DetachPluginResponse) SetHeaders(v map[string]*string) *DetachPluginResponse {
	s.Headers = v
	return s
}

func (s *DetachPluginResponse) SetStatusCode(v int32) *DetachPluginResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachPluginResponse) SetBody(v *DetachPluginResponseBody) *DetachPluginResponse {
	s.Body = v
	return s
}

type DisableInstanceAccessControlRequest struct {
	// The ID of the access control policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// acl-grgqc0mnuhkqciwtam
	AclId *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	// IP版本，可以设置为**ipv4**或者**ipv6**。
	//
	// example:
	//
	// ipv4
	AddressIPVersion *string `json:"AddressIPVersion,omitempty" xml:"AddressIPVersion,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// apigateway-cn-v6419k43xxxxx
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DisableInstanceAccessControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableInstanceAccessControlRequest) GoString() string {
	return s.String()
}

func (s *DisableInstanceAccessControlRequest) SetAclId(v string) *DisableInstanceAccessControlRequest {
	s.AclId = &v
	return s
}

func (s *DisableInstanceAccessControlRequest) SetAddressIPVersion(v string) *DisableInstanceAccessControlRequest {
	s.AddressIPVersion = &v
	return s
}

func (s *DisableInstanceAccessControlRequest) SetInstanceId(v string) *DisableInstanceAccessControlRequest {
	s.InstanceId = &v
	return s
}

func (s *DisableInstanceAccessControlRequest) SetSecurityToken(v string) *DisableInstanceAccessControlRequest {
	s.SecurityToken = &v
	return s
}

type DisableInstanceAccessControlResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ016
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableInstanceAccessControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableInstanceAccessControlResponseBody) GoString() string {
	return s.String()
}

func (s *DisableInstanceAccessControlResponseBody) SetRequestId(v string) *DisableInstanceAccessControlResponseBody {
	s.RequestId = &v
	return s
}

type DisableInstanceAccessControlResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableInstanceAccessControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableInstanceAccessControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableInstanceAccessControlResponse) GoString() string {
	return s.String()
}

func (s *DisableInstanceAccessControlResponse) SetHeaders(v map[string]*string) *DisableInstanceAccessControlResponse {
	s.Headers = v
	return s
}

func (s *DisableInstanceAccessControlResponse) SetStatusCode(v int32) *DisableInstanceAccessControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableInstanceAccessControlResponse) SetBody(v *DisableInstanceAccessControlResponseBody) *DisableInstanceAccessControlResponse {
	s.Body = v
	return s
}

type DryRunSwaggerRequest struct {
	// The Swagger text content.
	//
	// This parameter is required.
	//
	// example:
	//
	// "A Swagger API definition in YAML"
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The Swagger text format:
	//
	// 	- json
	//
	// 	- yaml
	//
	// This parameter is required.
	//
	// example:
	//
	// yaml
	DataFormat *string `json:"DataFormat,omitempty" xml:"DataFormat,omitempty"`
	// The global condition.
	//
	// example:
	//
	// {}
	GlobalCondition map[string]interface{} `json:"GlobalCondition,omitempty" xml:"GlobalCondition,omitempty"`
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// d633cf5524f841b9950e245b191bdabf
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// Specifies whether to overwrite the existing API.
	//
	// APIs with the same HTTP request type and backend request path are considered the same.
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	Overwrite     *bool   `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DryRunSwaggerRequest) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerRequest) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerRequest) SetData(v string) *DryRunSwaggerRequest {
	s.Data = &v
	return s
}

func (s *DryRunSwaggerRequest) SetDataFormat(v string) *DryRunSwaggerRequest {
	s.DataFormat = &v
	return s
}

func (s *DryRunSwaggerRequest) SetGlobalCondition(v map[string]interface{}) *DryRunSwaggerRequest {
	s.GlobalCondition = v
	return s
}

func (s *DryRunSwaggerRequest) SetGroupId(v string) *DryRunSwaggerRequest {
	s.GroupId = &v
	return s
}

func (s *DryRunSwaggerRequest) SetOverwrite(v bool) *DryRunSwaggerRequest {
	s.Overwrite = &v
	return s
}

func (s *DryRunSwaggerRequest) SetSecurityToken(v string) *DryRunSwaggerRequest {
	s.SecurityToken = &v
	return s
}

type DryRunSwaggerShrinkRequest struct {
	// The Swagger text content.
	//
	// This parameter is required.
	//
	// example:
	//
	// "A Swagger API definition in YAML"
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The Swagger text format:
	//
	// 	- json
	//
	// 	- yaml
	//
	// This parameter is required.
	//
	// example:
	//
	// yaml
	DataFormat *string `json:"DataFormat,omitempty" xml:"DataFormat,omitempty"`
	// The global condition.
	//
	// example:
	//
	// {}
	GlobalConditionShrink *string `json:"GlobalCondition,omitempty" xml:"GlobalCondition,omitempty"`
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// d633cf5524f841b9950e245b191bdabf
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// Specifies whether to overwrite the existing API.
	//
	// APIs with the same HTTP request type and backend request path are considered the same.
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	Overwrite     *bool   `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DryRunSwaggerShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerShrinkRequest) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerShrinkRequest) SetData(v string) *DryRunSwaggerShrinkRequest {
	s.Data = &v
	return s
}

func (s *DryRunSwaggerShrinkRequest) SetDataFormat(v string) *DryRunSwaggerShrinkRequest {
	s.DataFormat = &v
	return s
}

func (s *DryRunSwaggerShrinkRequest) SetGlobalConditionShrink(v string) *DryRunSwaggerShrinkRequest {
	s.GlobalConditionShrink = &v
	return s
}

func (s *DryRunSwaggerShrinkRequest) SetGroupId(v string) *DryRunSwaggerShrinkRequest {
	s.GroupId = &v
	return s
}

func (s *DryRunSwaggerShrinkRequest) SetOverwrite(v bool) *DryRunSwaggerShrinkRequest {
	s.Overwrite = &v
	return s
}

func (s *DryRunSwaggerShrinkRequest) SetSecurityToken(v string) *DryRunSwaggerShrinkRequest {
	s.SecurityToken = &v
	return s
}

type DryRunSwaggerResponseBody struct {
	// The APIs that failed to be created based on the Swagger-compliant data imported this time.
	Failed *DryRunSwaggerResponseBodyFailed `json:"Failed,omitempty" xml:"Failed,omitempty" type:"Struct"`
	// The global condition.
	//
	// example:
	//
	// {}
	GlobalCondition *string `json:"GlobalCondition,omitempty" xml:"GlobalCondition,omitempty"`
	// The models that failed to be imported through the Swagger-compliant data this time.
	ModelFailed *DryRunSwaggerResponseBodyModelFailed `json:"ModelFailed,omitempty" xml:"ModelFailed,omitempty" type:"Struct"`
	// The models that failed to be imported through the Swagger-compliant data this time.
	ModelSuccess *DryRunSwaggerResponseBodyModelSuccess `json:"ModelSuccess,omitempty" xml:"ModelSuccess,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// EF924FE4-2EDD-4CD3-89EC-34E4708574E7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The APIs that are created based on the Swagger-compliant data imported this time.
	Success *DryRunSwaggerResponseBodySuccess `json:"Success,omitempty" xml:"Success,omitempty" type:"Struct"`
}

func (s DryRunSwaggerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBody) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBody) SetFailed(v *DryRunSwaggerResponseBodyFailed) *DryRunSwaggerResponseBody {
	s.Failed = v
	return s
}

func (s *DryRunSwaggerResponseBody) SetGlobalCondition(v string) *DryRunSwaggerResponseBody {
	s.GlobalCondition = &v
	return s
}

func (s *DryRunSwaggerResponseBody) SetModelFailed(v *DryRunSwaggerResponseBodyModelFailed) *DryRunSwaggerResponseBody {
	s.ModelFailed = v
	return s
}

func (s *DryRunSwaggerResponseBody) SetModelSuccess(v *DryRunSwaggerResponseBodyModelSuccess) *DryRunSwaggerResponseBody {
	s.ModelSuccess = v
	return s
}

func (s *DryRunSwaggerResponseBody) SetRequestId(v string) *DryRunSwaggerResponseBody {
	s.RequestId = &v
	return s
}

func (s *DryRunSwaggerResponseBody) SetSuccess(v *DryRunSwaggerResponseBodySuccess) *DryRunSwaggerResponseBody {
	s.Success = v
	return s
}

type DryRunSwaggerResponseBodyFailed struct {
	ApiImportSwaggerFailed []*DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed `json:"ApiImportSwaggerFailed,omitempty" xml:"ApiImportSwaggerFailed,omitempty" type:"Repeated"`
}

func (s DryRunSwaggerResponseBodyFailed) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBodyFailed) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBodyFailed) SetApiImportSwaggerFailed(v []*DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed) *DryRunSwaggerResponseBodyFailed {
	s.ApiImportSwaggerFailed = v
	return s
}

type DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed struct {
	// The error message returned when the API is created.
	//
	// example:
	//
	// api already exists : apiUid ===> 8e274ec61cf6468e83b68371956831cb
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// The HTTP method configured when the API is created.
	//
	// example:
	//
	// post
	HttpMethod *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	// The request path configured when the API is created.
	//
	// example:
	//
	// /http/get/mapping
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed) SetErrorMsg(v string) *DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed {
	s.ErrorMsg = &v
	return s
}

func (s *DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed) SetHttpMethod(v string) *DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed {
	s.HttpMethod = &v
	return s
}

func (s *DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed) SetPath(v string) *DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed {
	s.Path = &v
	return s
}

type DryRunSwaggerResponseBodyModelFailed struct {
	ApiImportModelFailed []*DryRunSwaggerResponseBodyModelFailedApiImportModelFailed `json:"ApiImportModelFailed,omitempty" xml:"ApiImportModelFailed,omitempty" type:"Repeated"`
}

func (s DryRunSwaggerResponseBodyModelFailed) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBodyModelFailed) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBodyModelFailed) SetApiImportModelFailed(v []*DryRunSwaggerResponseBodyModelFailedApiImportModelFailed) *DryRunSwaggerResponseBodyModelFailed {
	s.ApiImportModelFailed = v
	return s
}

type DryRunSwaggerResponseBodyModelFailedApiImportModelFailed struct {
	// The error message.
	//
	// example:
	//
	// Not Found
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 36d4bcfaec1946e1870d90b2d7519710
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the model.
	//
	// example:
	//
	// Region
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
}

func (s DryRunSwaggerResponseBodyModelFailedApiImportModelFailed) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBodyModelFailedApiImportModelFailed) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBodyModelFailedApiImportModelFailed) SetErrorMsg(v string) *DryRunSwaggerResponseBodyModelFailedApiImportModelFailed {
	s.ErrorMsg = &v
	return s
}

func (s *DryRunSwaggerResponseBodyModelFailedApiImportModelFailed) SetGroupId(v string) *DryRunSwaggerResponseBodyModelFailedApiImportModelFailed {
	s.GroupId = &v
	return s
}

func (s *DryRunSwaggerResponseBodyModelFailedApiImportModelFailed) SetModelName(v string) *DryRunSwaggerResponseBodyModelFailedApiImportModelFailed {
	s.ModelName = &v
	return s
}

type DryRunSwaggerResponseBodyModelSuccess struct {
	ApiImportModelSuccess []*DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess `json:"ApiImportModelSuccess,omitempty" xml:"ApiImportModelSuccess,omitempty" type:"Repeated"`
}

func (s DryRunSwaggerResponseBodyModelSuccess) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBodyModelSuccess) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBodyModelSuccess) SetApiImportModelSuccess(v []*DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess) *DryRunSwaggerResponseBodyModelSuccess {
	s.ApiImportModelSuccess = v
	return s
}

type DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess struct {
	// The ID of the API group.
	//
	// example:
	//
	// b2d552ed90ca435b86f7bf8d45414793
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the model.
	//
	// example:
	//
	// NewInstance
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	// The model operation.
	//
	// example:
	//
	// CREATE
	ModelOperation *string `json:"ModelOperation,omitempty" xml:"ModelOperation,omitempty"`
	// The UID of the model.
	//
	// example:
	//
	// ec1946e1870d90b2d7519
	ModelUid *string `json:"ModelUid,omitempty" xml:"ModelUid,omitempty"`
}

func (s DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess) SetGroupId(v string) *DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess {
	s.GroupId = &v
	return s
}

func (s *DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess) SetModelName(v string) *DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess {
	s.ModelName = &v
	return s
}

func (s *DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess) SetModelOperation(v string) *DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess {
	s.ModelOperation = &v
	return s
}

func (s *DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess) SetModelUid(v string) *DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess {
	s.ModelUid = &v
	return s
}

type DryRunSwaggerResponseBodySuccess struct {
	ApiDryRunSwaggerSuccess []*DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess `json:"ApiDryRunSwaggerSuccess,omitempty" xml:"ApiDryRunSwaggerSuccess,omitempty" type:"Repeated"`
}

func (s DryRunSwaggerResponseBodySuccess) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBodySuccess) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBodySuccess) SetApiDryRunSwaggerSuccess(v []*DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess) *DryRunSwaggerResponseBodySuccess {
	s.ApiDryRunSwaggerSuccess = v
	return s
}

type DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess struct {
	// Specifies whether the operation is CREATE or MODIFY.
	//
	// example:
	//
	// CREATE
	ApiOperation *string `json:"ApiOperation,omitempty" xml:"ApiOperation,omitempty"`
	// The API definition that complies with the Swagger specification.
	//
	// example:
	//
	// "A Swagger API definition in YAML"
	ApiSwagger *string `json:"ApiSwagger,omitempty" xml:"ApiSwagger,omitempty"`
	// The UID of the successfully imported API.
	//
	// example:
	//
	// 8e274ec61cf6468e83b68371956831cb
	ApiUid *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	// The HTTP method configured when the API is created.
	//
	// example:
	//
	// get
	HttpMethod *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	// The request path configured when the API is created.
	//
	// example:
	//
	// /http/get/mapping
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess) SetApiOperation(v string) *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess {
	s.ApiOperation = &v
	return s
}

func (s *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess) SetApiSwagger(v string) *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess {
	s.ApiSwagger = &v
	return s
}

func (s *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess) SetApiUid(v string) *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess {
	s.ApiUid = &v
	return s
}

func (s *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess) SetHttpMethod(v string) *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess {
	s.HttpMethod = &v
	return s
}

func (s *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess) SetPath(v string) *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess {
	s.Path = &v
	return s
}

type DryRunSwaggerResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DryRunSwaggerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DryRunSwaggerResponse) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponse) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponse) SetHeaders(v map[string]*string) *DryRunSwaggerResponse {
	s.Headers = v
	return s
}

func (s *DryRunSwaggerResponse) SetStatusCode(v int32) *DryRunSwaggerResponse {
	s.StatusCode = &v
	return s
}

func (s *DryRunSwaggerResponse) SetBody(v *DryRunSwaggerResponseBody) *DryRunSwaggerResponse {
	s.Body = v
	return s
}

type EnableInstanceAccessControlRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// acl-bp11escro2et2tioscy52
	AclId *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// black
	AclType          *string `json:"AclType,omitempty" xml:"AclType,omitempty"`
	AddressIPVersion *string `json:"AddressIPVersion,omitempty" xml:"AddressIPVersion,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// apigateway-cn-v6419k43xxxxx
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s EnableInstanceAccessControlRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableInstanceAccessControlRequest) GoString() string {
	return s.String()
}

func (s *EnableInstanceAccessControlRequest) SetAclId(v string) *EnableInstanceAccessControlRequest {
	s.AclId = &v
	return s
}

func (s *EnableInstanceAccessControlRequest) SetAclType(v string) *EnableInstanceAccessControlRequest {
	s.AclType = &v
	return s
}

func (s *EnableInstanceAccessControlRequest) SetAddressIPVersion(v string) *EnableInstanceAccessControlRequest {
	s.AddressIPVersion = &v
	return s
}

func (s *EnableInstanceAccessControlRequest) SetInstanceId(v string) *EnableInstanceAccessControlRequest {
	s.InstanceId = &v
	return s
}

func (s *EnableInstanceAccessControlRequest) SetSecurityToken(v string) *EnableInstanceAccessControlRequest {
	s.SecurityToken = &v
	return s
}

type EnableInstanceAccessControlResponseBody struct {
	// example:
	//
	// CE5722A6-AE78-4741-A9B0-6C817D360510
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnableInstanceAccessControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableInstanceAccessControlResponseBody) GoString() string {
	return s.String()
}

func (s *EnableInstanceAccessControlResponseBody) SetRequestId(v string) *EnableInstanceAccessControlResponseBody {
	s.RequestId = &v
	return s
}

type EnableInstanceAccessControlResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableInstanceAccessControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableInstanceAccessControlResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableInstanceAccessControlResponse) GoString() string {
	return s.String()
}

func (s *EnableInstanceAccessControlResponse) SetHeaders(v map[string]*string) *EnableInstanceAccessControlResponse {
	s.Headers = v
	return s
}

func (s *EnableInstanceAccessControlResponse) SetStatusCode(v int32) *EnableInstanceAccessControlResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableInstanceAccessControlResponse) SetBody(v *EnableInstanceAccessControlResponseBody) *EnableInstanceAccessControlResponse {
	s.Body = v
	return s
}

type ImportOASRequest struct {
	// The security authentication method of the API. Valid values:
	//
	// 	- **APP: Only authorized applications can call the API.**
	//
	// 	- **ANONYMOUS: The API can be anonymously called. In this mode, you must take note of the following rules:**
	//
	//     	- All users who have obtained the API service information can call this API. API Gateway does not authenticate callers and cannot set user-specific throttling policies. If you make this API public, set API-specific throttling policies.
	//
	// example:
	//
	// APP
	AuthType *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	// The name of the backend service.
	//
	// example:
	//
	// testBackendService
	BackendName *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	// The OAS-compliant text file or OSS object URL.
	//
	// This parameter is required.
	//
	// example:
	//
	// swagger: "2.0"
	//
	// info:
	//
	//   version: "1.0.0"
	//
	//   title: "Swagger Petstore 2.0"
	//
	// basePath: "/"
	//
	// schemes:
	//
	// - "https"
	//
	// - "http"
	//
	// paths:
	//
	//   /pet/findByStatus:
	//
	//     get:
	//
	//       tags:
	//
	//       - "pet"
	//
	//       summary: "Finds Pets by status"
	//
	//       operationId: "findPetsByStatus"
	//
	//       parameters:
	//
	//       - name: "status"
	//
	//         in: "query"
	//
	//         required: true
	//
	//         type: "array"
	//
	//         items:
	//
	//           type: "string"
	//
	//           enum:
	//
	//           - "available"
	//
	//           - "pending"
	//
	//           - "sold"
	//
	//           default: "available"
	//
	//         collectionFormat: "multi"
	//
	//       responses:
	//
	//         "200":
	//
	//           description: "successful operation"
	//
	//           schema:
	//
	//             type: "array"
	//
	//             items:
	//
	//               $ref: "#/definitions/Pet"
	//
	//         "400":
	//
	//           description: "Invalid status value"
	//
	// definitions:
	//
	//   Category:
	//
	//     type: "object"
	//
	//     properties:
	//
	//       id:
	//
	//         type: "integer"
	//
	//         format: "int64"
	//
	//       name:
	//
	//         type: "string"
	//
	//   Tag:
	//
	//     type: "object"
	//
	//     properties:
	//
	//       id:
	//
	//         type: "integer"
	//
	//         format: "int64"
	//
	//       name:
	//
	//         type: "string"
	//
	//   Pet:
	//
	//     type: "object"
	//
	//     required:
	//
	//     - "name"
	//
	//     - "photoUrls"
	//
	//     properties:
	//
	//       id:
	//
	//         type: "integer"
	//
	//         format: "int64"
	//
	//       category:
	//
	//         $ref: "#/definitions/Category"
	//
	//       name:
	//
	//         type: "string"
	//
	//         example: "doggie"
	//
	//       photoUrls:
	//
	//         type: "array"
	//
	//         items:
	//
	//           type: "string"
	//
	//       tags:
	//
	//         type: "array"
	//
	//         items:
	//
	//           $ref: "#/definitions/Tag"
	//
	//       status:
	//
	//         type: "string"
	//
	//         description: "pet status in the store"
	//
	//         enum:
	//
	//         - "available"
	//
	//         - "pending"
	//
	//         - "sold"
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 08ae4aa0f95e4321849ee57f4e0b3077
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// Specifies whether to ignore alerts.
	//
	// example:
	//
	// true
	IgnoreWarning *bool `json:"IgnoreWarning,omitempty" xml:"IgnoreWarning,omitempty"`
	// The OAS version.
	//
	// example:
	//
	// OAS2
	OASVersion *string `json:"OASVersion,omitempty" xml:"OASVersion,omitempty"`
	// Specifies whether to overwrite an existing API.
	//
	// If an existing API has the same HTTP request type and backend request path as the API to be imported, the existing API is overwritten.
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	Overwrite *bool `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	// The request mode. Valid values:
	//
	// 	- MAPPING: Parameters are mapped. Unknown parameters are filtered out.
	//
	// 	- PASSTHROUGH: Parameters are passed through.
	//
	// example:
	//
	// PASSTHROUGH
	RequestMode   *string `json:"RequestMode,omitempty" xml:"RequestMode,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// Specifies whether to directly import the API without performing a precheck.
	//
	// example:
	//
	// true
	SkipDryRun *bool `json:"SkipDryRun,omitempty" xml:"SkipDryRun,omitempty"`
}

func (s ImportOASRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportOASRequest) GoString() string {
	return s.String()
}

func (s *ImportOASRequest) SetAuthType(v string) *ImportOASRequest {
	s.AuthType = &v
	return s
}

func (s *ImportOASRequest) SetBackendName(v string) *ImportOASRequest {
	s.BackendName = &v
	return s
}

func (s *ImportOASRequest) SetData(v string) *ImportOASRequest {
	s.Data = &v
	return s
}

func (s *ImportOASRequest) SetGroupId(v string) *ImportOASRequest {
	s.GroupId = &v
	return s
}

func (s *ImportOASRequest) SetIgnoreWarning(v bool) *ImportOASRequest {
	s.IgnoreWarning = &v
	return s
}

func (s *ImportOASRequest) SetOASVersion(v string) *ImportOASRequest {
	s.OASVersion = &v
	return s
}

func (s *ImportOASRequest) SetOverwrite(v bool) *ImportOASRequest {
	s.Overwrite = &v
	return s
}

func (s *ImportOASRequest) SetRequestMode(v string) *ImportOASRequest {
	s.RequestMode = &v
	return s
}

func (s *ImportOASRequest) SetSecurityToken(v string) *ImportOASRequest {
	s.SecurityToken = &v
	return s
}

func (s *ImportOASRequest) SetSkipDryRun(v bool) *ImportOASRequest {
	s.SkipDryRun = &v
	return s
}

type ImportOASResponseBody struct {
	// The error messages that appear due to the invalid data in the imported file.
	ErrorMessages *ImportOASResponseBodyErrorMessages `json:"ErrorMessages,omitempty" xml:"ErrorMessages,omitempty" type:"Struct"`
	// The APIs that failed to pass the precheck.
	FailedApis *ImportOASResponseBodyFailedApis `json:"FailedApis,omitempty" xml:"FailedApis,omitempty" type:"Struct"`
	// The information about the models that failed to pass the precheck.
	FailedModels *ImportOASResponseBodyFailedModels `json:"FailedModels,omitempty" xml:"FailedModels,omitempty" type:"Struct"`
	// The ID of the asynchronous API import task that was generated during the import operation. This ID is used to query the execution status of the API import task.
	//
	// example:
	//
	// c16a1880f5164d779f6a54f64d997cd9
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// E7FE7172-AA75-5880-B6F7-C00893E9BC06
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the APIs that have passed the precheck.
	SuccessApis *ImportOASResponseBodySuccessApis `json:"SuccessApis,omitempty" xml:"SuccessApis,omitempty" type:"Struct"`
	// The information about the models that have passed the precheck.
	SuccessModels *ImportOASResponseBodySuccessModels `json:"SuccessModels,omitempty" xml:"SuccessModels,omitempty" type:"Struct"`
	// The warning messages that appear due to the invalid data in the imported file.
	WarningMessages *ImportOASResponseBodyWarningMessages `json:"WarningMessages,omitempty" xml:"WarningMessages,omitempty" type:"Struct"`
}

func (s ImportOASResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBody) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBody) SetErrorMessages(v *ImportOASResponseBodyErrorMessages) *ImportOASResponseBody {
	s.ErrorMessages = v
	return s
}

func (s *ImportOASResponseBody) SetFailedApis(v *ImportOASResponseBodyFailedApis) *ImportOASResponseBody {
	s.FailedApis = v
	return s
}

func (s *ImportOASResponseBody) SetFailedModels(v *ImportOASResponseBodyFailedModels) *ImportOASResponseBody {
	s.FailedModels = v
	return s
}

func (s *ImportOASResponseBody) SetOperationId(v string) *ImportOASResponseBody {
	s.OperationId = &v
	return s
}

func (s *ImportOASResponseBody) SetRequestId(v string) *ImportOASResponseBody {
	s.RequestId = &v
	return s
}

func (s *ImportOASResponseBody) SetSuccessApis(v *ImportOASResponseBodySuccessApis) *ImportOASResponseBody {
	s.SuccessApis = v
	return s
}

func (s *ImportOASResponseBody) SetSuccessModels(v *ImportOASResponseBodySuccessModels) *ImportOASResponseBody {
	s.SuccessModels = v
	return s
}

func (s *ImportOASResponseBody) SetWarningMessages(v *ImportOASResponseBodyWarningMessages) *ImportOASResponseBody {
	s.WarningMessages = v
	return s
}

type ImportOASResponseBodyErrorMessages struct {
	ErrorMessage []*string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" type:"Repeated"`
}

func (s ImportOASResponseBodyErrorMessages) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodyErrorMessages) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodyErrorMessages) SetErrorMessage(v []*string) *ImportOASResponseBodyErrorMessages {
	s.ErrorMessage = v
	return s
}

type ImportOASResponseBodyFailedApis struct {
	FailedApi []*ImportOASResponseBodyFailedApisFailedApi `json:"FailedApi,omitempty" xml:"FailedApi,omitempty" type:"Repeated"`
}

func (s ImportOASResponseBodyFailedApis) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodyFailedApis) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodyFailedApis) SetFailedApi(v []*ImportOASResponseBodyFailedApisFailedApi) *ImportOASResponseBodyFailedApis {
	s.FailedApi = v
	return s
}

type ImportOASResponseBodyFailedApisFailedApi struct {
	// The error message.
	//
	// example:
	//
	// Invalid Api Definition.
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// The HTTP method configured when you created the API.
	//
	// example:
	//
	// POST
	HttpMethod *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	// The request path configured when you created the API.
	//
	// example:
	//
	// /st1
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s ImportOASResponseBodyFailedApisFailedApi) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodyFailedApisFailedApi) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodyFailedApisFailedApi) SetErrorMsg(v string) *ImportOASResponseBodyFailedApisFailedApi {
	s.ErrorMsg = &v
	return s
}

func (s *ImportOASResponseBodyFailedApisFailedApi) SetHttpMethod(v string) *ImportOASResponseBodyFailedApisFailedApi {
	s.HttpMethod = &v
	return s
}

func (s *ImportOASResponseBodyFailedApisFailedApi) SetPath(v string) *ImportOASResponseBodyFailedApisFailedApi {
	s.Path = &v
	return s
}

type ImportOASResponseBodyFailedModels struct {
	FailedModel []*ImportOASResponseBodyFailedModelsFailedModel `json:"FailedModel,omitempty" xml:"FailedModel,omitempty" type:"Repeated"`
}

func (s ImportOASResponseBodyFailedModels) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodyFailedModels) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodyFailedModels) SetFailedModel(v []*ImportOASResponseBodyFailedModelsFailedModel) *ImportOASResponseBodyFailedModels {
	s.FailedModel = v
	return s
}

type ImportOASResponseBodyFailedModelsFailedModel struct {
	// The error message.
	//
	// example:
	//
	// Invalid Model Definition.
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 2c1bc62e19614cc68c6b0b484bc9c5db
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the model.
	//
	// example:
	//
	// test
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
}

func (s ImportOASResponseBodyFailedModelsFailedModel) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodyFailedModelsFailedModel) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodyFailedModelsFailedModel) SetErrorMsg(v string) *ImportOASResponseBodyFailedModelsFailedModel {
	s.ErrorMsg = &v
	return s
}

func (s *ImportOASResponseBodyFailedModelsFailedModel) SetGroupId(v string) *ImportOASResponseBodyFailedModelsFailedModel {
	s.GroupId = &v
	return s
}

func (s *ImportOASResponseBodyFailedModelsFailedModel) SetModelName(v string) *ImportOASResponseBodyFailedModelsFailedModel {
	s.ModelName = &v
	return s
}

type ImportOASResponseBodySuccessApis struct {
	SuccessApi []*ImportOASResponseBodySuccessApisSuccessApi `json:"SuccessApi,omitempty" xml:"SuccessApi,omitempty" type:"Repeated"`
}

func (s ImportOASResponseBodySuccessApis) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodySuccessApis) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodySuccessApis) SetSuccessApi(v []*ImportOASResponseBodySuccessApisSuccessApi) *ImportOASResponseBodySuccessApis {
	s.SuccessApi = v
	return s
}

type ImportOASResponseBodySuccessApisSuccessApi struct {
	// The ID of the API.
	//
	// example:
	//
	// 92af1abffc2443eaa2b815fdbd9c13f1
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// Indicates that the operation is CREATE or MODIFY.
	//
	// example:
	//
	// CREATE
	ApiOperation *string `json:"ApiOperation,omitempty" xml:"ApiOperation,omitempty"`
	// The HTTP method configured when you created the API.
	//
	// example:
	//
	// POST
	HttpMethod *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	// The request path configured when you created the API.
	//
	// example:
	//
	// /st1
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s ImportOASResponseBodySuccessApisSuccessApi) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodySuccessApisSuccessApi) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodySuccessApisSuccessApi) SetApiId(v string) *ImportOASResponseBodySuccessApisSuccessApi {
	s.ApiId = &v
	return s
}

func (s *ImportOASResponseBodySuccessApisSuccessApi) SetApiOperation(v string) *ImportOASResponseBodySuccessApisSuccessApi {
	s.ApiOperation = &v
	return s
}

func (s *ImportOASResponseBodySuccessApisSuccessApi) SetHttpMethod(v string) *ImportOASResponseBodySuccessApisSuccessApi {
	s.HttpMethod = &v
	return s
}

func (s *ImportOASResponseBodySuccessApisSuccessApi) SetPath(v string) *ImportOASResponseBodySuccessApisSuccessApi {
	s.Path = &v
	return s
}

type ImportOASResponseBodySuccessModels struct {
	SuccessModel []*ImportOASResponseBodySuccessModelsSuccessModel `json:"SuccessModel,omitempty" xml:"SuccessModel,omitempty" type:"Repeated"`
}

func (s ImportOASResponseBodySuccessModels) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodySuccessModels) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodySuccessModels) SetSuccessModel(v []*ImportOASResponseBodySuccessModelsSuccessModel) *ImportOASResponseBodySuccessModels {
	s.SuccessModel = v
	return s
}

type ImportOASResponseBodySuccessModelsSuccessModel struct {
	// The ID of the API group.
	//
	// example:
	//
	// feaccf67040643bcbdedb253e59eb527
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the model.
	//
	// example:
	//
	// test
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	// The operation of the model. Valid values: CREATE and MODIFY.
	//
	// example:
	//
	// CREATE
	ModelOperation *string `json:"ModelOperation,omitempty" xml:"ModelOperation,omitempty"`
	// The UID of the model.
	//
	// example:
	//
	// 1r4efwee19614cc68c6b0b484bc9c5dbs
	ModelUid *string `json:"ModelUid,omitempty" xml:"ModelUid,omitempty"`
}

func (s ImportOASResponseBodySuccessModelsSuccessModel) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodySuccessModelsSuccessModel) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodySuccessModelsSuccessModel) SetGroupId(v string) *ImportOASResponseBodySuccessModelsSuccessModel {
	s.GroupId = &v
	return s
}

func (s *ImportOASResponseBodySuccessModelsSuccessModel) SetModelName(v string) *ImportOASResponseBodySuccessModelsSuccessModel {
	s.ModelName = &v
	return s
}

func (s *ImportOASResponseBodySuccessModelsSuccessModel) SetModelOperation(v string) *ImportOASResponseBodySuccessModelsSuccessModel {
	s.ModelOperation = &v
	return s
}

func (s *ImportOASResponseBodySuccessModelsSuccessModel) SetModelUid(v string) *ImportOASResponseBodySuccessModelsSuccessModel {
	s.ModelUid = &v
	return s
}

type ImportOASResponseBodyWarningMessages struct {
	WarningMessage []*string `json:"WarningMessage,omitempty" xml:"WarningMessage,omitempty" type:"Repeated"`
}

func (s ImportOASResponseBodyWarningMessages) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodyWarningMessages) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodyWarningMessages) SetWarningMessage(v []*string) *ImportOASResponseBodyWarningMessages {
	s.WarningMessage = v
	return s
}

type ImportOASResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportOASResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportOASResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponse) GoString() string {
	return s.String()
}

func (s *ImportOASResponse) SetHeaders(v map[string]*string) *ImportOASResponse {
	s.Headers = v
	return s
}

func (s *ImportOASResponse) SetStatusCode(v int32) *ImportOASResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportOASResponse) SetBody(v *ImportOASResponseBody) *ImportOASResponse {
	s.Body = v
	return s
}

type ImportSwaggerRequest struct {
	// The Swagger text content.
	//
	// This parameter is required.
	//
	// example:
	//
	// "A Swagger API definition in YAML"
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The Swagger text format:
	//
	// 	- json
	//
	// 	- yaml
	//
	// This parameter is required.
	//
	// example:
	//
	// yaml
	DataFormat *string `json:"DataFormat,omitempty" xml:"DataFormat,omitempty"`
	// The pre-inspection.
	//
	// example:
	//
	// true
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The global conditions.
	//
	// example:
	//
	// {}
	GlobalCondition map[string]interface{} `json:"GlobalCondition,omitempty" xml:"GlobalCondition,omitempty"`
	// The ID of the API group to which the Swagger is imported.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// Specifies whether to overwrite the existing API.
	//
	// APIs with the same HTTP request type and backend request path are considered the same.
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	Overwrite     *bool   `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ImportSwaggerRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerRequest) GoString() string {
	return s.String()
}

func (s *ImportSwaggerRequest) SetData(v string) *ImportSwaggerRequest {
	s.Data = &v
	return s
}

func (s *ImportSwaggerRequest) SetDataFormat(v string) *ImportSwaggerRequest {
	s.DataFormat = &v
	return s
}

func (s *ImportSwaggerRequest) SetDryRun(v bool) *ImportSwaggerRequest {
	s.DryRun = &v
	return s
}

func (s *ImportSwaggerRequest) SetGlobalCondition(v map[string]interface{}) *ImportSwaggerRequest {
	s.GlobalCondition = v
	return s
}

func (s *ImportSwaggerRequest) SetGroupId(v string) *ImportSwaggerRequest {
	s.GroupId = &v
	return s
}

func (s *ImportSwaggerRequest) SetOverwrite(v bool) *ImportSwaggerRequest {
	s.Overwrite = &v
	return s
}

func (s *ImportSwaggerRequest) SetSecurityToken(v string) *ImportSwaggerRequest {
	s.SecurityToken = &v
	return s
}

type ImportSwaggerShrinkRequest struct {
	// The Swagger text content.
	//
	// This parameter is required.
	//
	// example:
	//
	// "A Swagger API definition in YAML"
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The Swagger text format:
	//
	// 	- json
	//
	// 	- yaml
	//
	// This parameter is required.
	//
	// example:
	//
	// yaml
	DataFormat *string `json:"DataFormat,omitempty" xml:"DataFormat,omitempty"`
	// The pre-inspection.
	//
	// example:
	//
	// true
	DryRun *bool `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// The global conditions.
	//
	// example:
	//
	// {}
	GlobalConditionShrink *string `json:"GlobalCondition,omitempty" xml:"GlobalCondition,omitempty"`
	// The ID of the API group to which the Swagger is imported.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// Specifies whether to overwrite the existing API.
	//
	// APIs with the same HTTP request type and backend request path are considered the same.
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	Overwrite     *bool   `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ImportSwaggerShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerShrinkRequest) GoString() string {
	return s.String()
}

func (s *ImportSwaggerShrinkRequest) SetData(v string) *ImportSwaggerShrinkRequest {
	s.Data = &v
	return s
}

func (s *ImportSwaggerShrinkRequest) SetDataFormat(v string) *ImportSwaggerShrinkRequest {
	s.DataFormat = &v
	return s
}

func (s *ImportSwaggerShrinkRequest) SetDryRun(v bool) *ImportSwaggerShrinkRequest {
	s.DryRun = &v
	return s
}

func (s *ImportSwaggerShrinkRequest) SetGlobalConditionShrink(v string) *ImportSwaggerShrinkRequest {
	s.GlobalConditionShrink = &v
	return s
}

func (s *ImportSwaggerShrinkRequest) SetGroupId(v string) *ImportSwaggerShrinkRequest {
	s.GroupId = &v
	return s
}

func (s *ImportSwaggerShrinkRequest) SetOverwrite(v bool) *ImportSwaggerShrinkRequest {
	s.Overwrite = &v
	return s
}

func (s *ImportSwaggerShrinkRequest) SetSecurityToken(v string) *ImportSwaggerShrinkRequest {
	s.SecurityToken = &v
	return s
}

type ImportSwaggerResponseBody struct {
	// The APIs that failed to be created based on the Swagger-compliant data imported this time.
	Failed *ImportSwaggerResponseBodyFailed `json:"Failed,omitempty" xml:"Failed,omitempty" type:"Struct"`
	// The models that failed to be imported based on the Swagger-compliant data imported this time.
	ModelFailed *ImportSwaggerResponseBodyModelFailed `json:"ModelFailed,omitempty" xml:"ModelFailed,omitempty" type:"Struct"`
	// The models that were imported based on the Swagger-compliant data imported this time.
	ModelSuccess *ImportSwaggerResponseBodyModelSuccess `json:"ModelSuccess,omitempty" xml:"ModelSuccess,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 647CEF05-404C-4125-B3D7-44792EB77392
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The APIs that were created based on the Swagger-compliant data imported this time.
	Success *ImportSwaggerResponseBodySuccess `json:"Success,omitempty" xml:"Success,omitempty" type:"Struct"`
}

func (s ImportSwaggerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBody) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBody) SetFailed(v *ImportSwaggerResponseBodyFailed) *ImportSwaggerResponseBody {
	s.Failed = v
	return s
}

func (s *ImportSwaggerResponseBody) SetModelFailed(v *ImportSwaggerResponseBodyModelFailed) *ImportSwaggerResponseBody {
	s.ModelFailed = v
	return s
}

func (s *ImportSwaggerResponseBody) SetModelSuccess(v *ImportSwaggerResponseBodyModelSuccess) *ImportSwaggerResponseBody {
	s.ModelSuccess = v
	return s
}

func (s *ImportSwaggerResponseBody) SetRequestId(v string) *ImportSwaggerResponseBody {
	s.RequestId = &v
	return s
}

func (s *ImportSwaggerResponseBody) SetSuccess(v *ImportSwaggerResponseBodySuccess) *ImportSwaggerResponseBody {
	s.Success = v
	return s
}

type ImportSwaggerResponseBodyFailed struct {
	ApiImportSwaggerFailed []*ImportSwaggerResponseBodyFailedApiImportSwaggerFailed `json:"ApiImportSwaggerFailed,omitempty" xml:"ApiImportSwaggerFailed,omitempty" type:"Repeated"`
}

func (s ImportSwaggerResponseBodyFailed) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBodyFailed) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBodyFailed) SetApiImportSwaggerFailed(v []*ImportSwaggerResponseBodyFailedApiImportSwaggerFailed) *ImportSwaggerResponseBodyFailed {
	s.ApiImportSwaggerFailed = v
	return s
}

type ImportSwaggerResponseBodyFailedApiImportSwaggerFailed struct {
	// The error message returned.
	//
	// example:
	//
	// api already exists : apiUid ===> 8e274ec61cf6468e83b68371956831cb
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// The HTTP method of the API.
	//
	// example:
	//
	// post
	HttpMethod *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	// The request path of the API.
	//
	// example:
	//
	// /http/get/mapping
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s ImportSwaggerResponseBodyFailedApiImportSwaggerFailed) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBodyFailedApiImportSwaggerFailed) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBodyFailedApiImportSwaggerFailed) SetErrorMsg(v string) *ImportSwaggerResponseBodyFailedApiImportSwaggerFailed {
	s.ErrorMsg = &v
	return s
}

func (s *ImportSwaggerResponseBodyFailedApiImportSwaggerFailed) SetHttpMethod(v string) *ImportSwaggerResponseBodyFailedApiImportSwaggerFailed {
	s.HttpMethod = &v
	return s
}

func (s *ImportSwaggerResponseBodyFailedApiImportSwaggerFailed) SetPath(v string) *ImportSwaggerResponseBodyFailedApiImportSwaggerFailed {
	s.Path = &v
	return s
}

type ImportSwaggerResponseBodyModelFailed struct {
	ApiImportModelFailed []*ImportSwaggerResponseBodyModelFailedApiImportModelFailed `json:"ApiImportModelFailed,omitempty" xml:"ApiImportModelFailed,omitempty" type:"Repeated"`
}

func (s ImportSwaggerResponseBodyModelFailed) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBodyModelFailed) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBodyModelFailed) SetApiImportModelFailed(v []*ImportSwaggerResponseBodyModelFailedApiImportModelFailed) *ImportSwaggerResponseBodyModelFailed {
	s.ApiImportModelFailed = v
	return s
}

type ImportSwaggerResponseBodyModelFailedApiImportModelFailed struct {
	// The error message.
	//
	// example:
	//
	// error msg
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 36d4bcfaec1946e1870d90b2d7519710
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the model.
	//
	// example:
	//
	// Region
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
}

func (s ImportSwaggerResponseBodyModelFailedApiImportModelFailed) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBodyModelFailedApiImportModelFailed) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBodyModelFailedApiImportModelFailed) SetErrorMsg(v string) *ImportSwaggerResponseBodyModelFailedApiImportModelFailed {
	s.ErrorMsg = &v
	return s
}

func (s *ImportSwaggerResponseBodyModelFailedApiImportModelFailed) SetGroupId(v string) *ImportSwaggerResponseBodyModelFailedApiImportModelFailed {
	s.GroupId = &v
	return s
}

func (s *ImportSwaggerResponseBodyModelFailedApiImportModelFailed) SetModelName(v string) *ImportSwaggerResponseBodyModelFailedApiImportModelFailed {
	s.ModelName = &v
	return s
}

type ImportSwaggerResponseBodyModelSuccess struct {
	ApiImportModelSuccess []*ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess `json:"ApiImportModelSuccess,omitempty" xml:"ApiImportModelSuccess,omitempty" type:"Repeated"`
}

func (s ImportSwaggerResponseBodyModelSuccess) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBodyModelSuccess) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBodyModelSuccess) SetApiImportModelSuccess(v []*ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess) *ImportSwaggerResponseBodyModelSuccess {
	s.ApiImportModelSuccess = v
	return s
}

type ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess struct {
	// The ID of the API group.
	//
	// example:
	//
	// b2d552ed90ca435b86f7bf8d45414793
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the model.
	//
	// example:
	//
	// NewInstance
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	// The model operation.
	ModelOperation *string `json:"ModelOperation,omitempty" xml:"ModelOperation,omitempty"`
	// The UID of the model.
	//
	// example:
	//
	// d4bcfaec1946e1870d
	ModelUid *string `json:"ModelUid,omitempty" xml:"ModelUid,omitempty"`
}

func (s ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess) SetGroupId(v string) *ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess {
	s.GroupId = &v
	return s
}

func (s *ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess) SetModelName(v string) *ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess {
	s.ModelName = &v
	return s
}

func (s *ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess) SetModelOperation(v string) *ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess {
	s.ModelOperation = &v
	return s
}

func (s *ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess) SetModelUid(v string) *ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess {
	s.ModelUid = &v
	return s
}

type ImportSwaggerResponseBodySuccess struct {
	ApiImportSwaggerSuccess []*ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess `json:"ApiImportSwaggerSuccess,omitempty" xml:"ApiImportSwaggerSuccess,omitempty" type:"Repeated"`
}

func (s ImportSwaggerResponseBodySuccess) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBodySuccess) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBodySuccess) SetApiImportSwaggerSuccess(v []*ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess) *ImportSwaggerResponseBodySuccess {
	s.ApiImportSwaggerSuccess = v
	return s
}

type ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess struct {
	// Specifies that the operation is CREATE or MODIFY.
	//
	// example:
	//
	// CREATE
	ApiOperation *string `json:"ApiOperation,omitempty" xml:"ApiOperation,omitempty"`
	// The UID of the imported API.
	//
	// example:
	//
	// 8e274ec61cf6468e83b68371956831cb
	ApiUid *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	// The HTTP method of the API.
	//
	// example:
	//
	// get
	HttpMethod *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	// The request path of the API.
	//
	// example:
	//
	// /http/get/mapping
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess) SetApiOperation(v string) *ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess {
	s.ApiOperation = &v
	return s
}

func (s *ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess) SetApiUid(v string) *ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess {
	s.ApiUid = &v
	return s
}

func (s *ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess) SetHttpMethod(v string) *ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess {
	s.HttpMethod = &v
	return s
}

func (s *ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess) SetPath(v string) *ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess {
	s.Path = &v
	return s
}

type ImportSwaggerResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportSwaggerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportSwaggerResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponse) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponse) SetHeaders(v map[string]*string) *ImportSwaggerResponse {
	s.Headers = v
	return s
}

func (s *ImportSwaggerResponse) SetStatusCode(v int32) *ImportSwaggerResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportSwaggerResponse) SetBody(v *ImportSwaggerResponseBody) *ImportSwaggerResponse {
	s.Body = v
	return s
}

type ListTagResourcesRequest struct {
	// The token used to start the next query.
	//
	// example:
	//
	// 1d2db86sca4384811e0b5e8707e68181f
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the resource.
	//
	// Valid values of N: `[1,50]`.
	//
	// example:
	//
	// 285bb759342649a1b70c2093a772e087
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the resource.
	//
	// Currently, tags are supported for API groups, plug-ins, and apps. Operations performed on APIs are based on the tags of API groups.
	//
	// 	- **apiGroup**
	//
	// 	- **plugin**
	//
	// 	- **app**
	//
	// 	- **api**
	//
	// This parameter is required.
	//
	// example:
	//
	// apiGroup
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tag of objects that match the lifecycle rule. You can specify multiple tags.
	Tag []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

type ListTagResourcesRequestTag struct {
	// The key of the tag.
	//
	// Valid values of N: `[1,20]`.
	//
	// example:
	//
	// env
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag. If the parameter has a value, a value is also required for the tag key of the same N in the corresponding **tag.N.Key**. Otherwise, an error is reported.
	//
	// Valid values of N: `[1,20]`.
	//
	// example:
	//
	// product
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesResponseBody struct {
	// The token that determines the start point of the next query.
	//
	// A NextToken value of -1 indicates that a next query does not exist.
	//
	// example:
	//
	// 1d2db86sca4384811e0b5e8707e68181f
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 2D69A58F-345C-4FDE-88E4-BF5189484043
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The resource list.
	TagResources *ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Struct"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetNextToken(v string) *ListTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v *ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyTagResources struct {
	TagResource []*ListTagResourcesResponseBodyTagResourcesTagResource `json:"TagResource,omitempty" xml:"TagResource,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagResource(v []*ListTagResourcesResponseBodyTagResourcesTagResource) *ListTagResourcesResponseBodyTagResources {
	s.TagResource = v
	return s
}

type ListTagResourcesResponseBodyTagResourcesTagResource struct {
	// The ID of the resource.
	//
	// example:
	//
	// 285bb759342649a1b70c2093a772e087
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The type of the resource.
	//
	// example:
	//
	// apiGroup
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The key of the tag.
	//
	// example:
	//
	// owner
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// zhangsan
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceId(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceType(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagKey(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagValue(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagValue = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetStatusCode(v int32) *ListTagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type ModifyApiRequest struct {
	// The type of the two-way communication API. Valid values:
	//
	// 	- **COMMON**: general APIs
	//
	// 	- **REGISTER**: registered APIs
	//
	// 	- **UNREGISTER**: unregistered APIs
	//
	// 	- **NOTIFY**: downstream notification
	//
	// example:
	//
	// HmacSHA256
	AllowSignatureMethod *string `json:"AllowSignatureMethod,omitempty" xml:"AllowSignatureMethod,omitempty"`
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// 8afff6c8c4c6447abb035812e4d66b65
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API. The name must be unique within the API group. The name must be 4 to 50 characters in length. It must start with a letter and can contain letters, digits, and underscores (_).
	//
	// This parameter is required.
	//
	// example:
	//
	// ApiName
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The ID of the backend service.
	//
	// example:
	//
	// DEFAULT
	AppCodeAuthType *string `json:"AppCodeAuthType,omitempty" xml:"AppCodeAuthType,omitempty"`
	// The configuration items of API requests sent by the consumer to API Gateway.
	//
	// example:
	//
	// APP
	AuthType *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	// Configuration Mode
	//
	// example:
	//
	// true
	BackendEnable *bool `json:"BackendEnable,omitempty" xml:"BackendEnable,omitempty"`
	// Specifies whether to enable backend services.
	//
	// example:
	//
	// 0d105f80a8f340408bd34954d4e4ff22
	BackendId          *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	ConstantParameters *string `json:"ConstantParameters,omitempty" xml:"ConstantParameters,omitempty"`
	// The description of the API. The description can be up to 180 characters in length.
	//
	// example:
	//
	// Api description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The AppCode authentication type supported. Valid values:
	//
	// 	- DEFAULT: supported after being made available in Alibaba Cloud Marketplace
	//
	// 	- DISABLE: not supported
	//
	// 	- HEADER : supported only in the Header parameter
	//
	// 	- HEADER_QUERY: supported in the Header or Query parameter
	//
	// example:
	//
	// true
	DisableInternet  *bool   `json:"DisableInternet,omitempty" xml:"DisableInternet,omitempty"`
	ErrorCodeSamples *string `json:"ErrorCodeSamples,omitempty" xml:"ErrorCodeSamples,omitempty"`
	FailResultSample *string `json:"FailResultSample,omitempty" xml:"FailResultSample,omitempty"`
	// 	- Specifies whether to set DisableInternet to **true*	- to limit API calls to within the VPC.
	//
	// 	- If you set DisableInternet to **false**, the limit if lifted.
	//
	// >  If you do not set this parameter, the original value is used.
	//
	// example:
	//
	// true
	ForceNonceCheck *bool `json:"ForceNonceCheck,omitempty" xml:"ForceNonceCheck,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 927d50c0f2e54b359919923d908bb015
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The client-side request signature method of the API. Valid values:
	//
	// 	- HmacSHA256
	//
	// 	- HmacSHA1,HmacSHA256
	//
	// example:
	//
	// {\\"OpenIdApiType\\":\\"IDTOKEN\\",\\"PublicKey\\":\\"lzlj1573\\",\\"IdTokenParamName\\":\\"\\",\\"PublicKeyId\\":\\"lzljorders\\"}
	OpenIdConnectConfig *string `json:"OpenIdConnectConfig,omitempty" xml:"OpenIdConnectConfig,omitempty"`
	// The configuration items of API requests sent by API Gateway to the backend service.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"RequestProtocol":"HTTP","RequestHttpMethod":"GET","RequestPath":"/v3/getUserTest/[userId]","BodyFormat":"FORM","PostBodyDescription":""}
	RequestConfig     *string `json:"RequestConfig,omitempty" xml:"RequestConfig,omitempty"`
	RequestParameters *string `json:"RequestParameters,omitempty" xml:"RequestParameters,omitempty"`
	// 	- Specifies whether to set **ForceNonceCheck*	- to **true*	- to force the check of X-Ca-Nonce during the request. This is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
	//
	// 	- If you set **ForceNonceCheck*	- to **false**, the check is not performed. If you do not set this parameter, the original value is used.
	//
	// example:
	//
	// {}
	ResultBodyModel    *string `json:"ResultBodyModel,omitempty" xml:"ResultBodyModel,omitempty"`
	ResultDescriptions *string `json:"ResultDescriptions,omitempty" xml:"ResultDescriptions,omitempty"`
	ResultSample       *string `json:"ResultSample,omitempty" xml:"ResultSample,omitempty"`
	// The sample response from the backend service.
	//
	// example:
	//
	// HTML
	ResultType    *string `json:"ResultType,omitempty" xml:"ResultType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The parameters of API requests sent by the consumer to API Gateway.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"ServiceProtocol":"HTTP","ServiceHttpMethod":"GET","ServiceAddress":"http://www.customerdomain.com","ServiceTimeout":"1000","ServicePath":"/v3/getUserTest/[userId]"}
	ServiceConfig        *string `json:"ServiceConfig,omitempty" xml:"ServiceConfig,omitempty"`
	ServiceParameters    *string `json:"ServiceParameters,omitempty" xml:"ServiceParameters,omitempty"`
	ServiceParametersMap *string `json:"ServiceParametersMap,omitempty" xml:"ServiceParametersMap,omitempty"`
	SystemParameters     *string `json:"SystemParameters,omitempty" xml:"SystemParameters,omitempty"`
	// Specifies whether the API is public. Valid values:
	//
	// 	- **PUBLIC**: Make the API public. If you set this parameter to PUBLIC, this API is displayed on the APIs page for all users after the API is published to the production environment.
	//
	// 	- **PRIVATE**: Make the API private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.
	//
	// This parameter is required.
	//
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
	// The returned description of the API.
	//
	// example:
	//
	// COMMON
	WebSocketApiType *string `json:"WebSocketApiType,omitempty" xml:"WebSocketApiType,omitempty"`
}

func (s ModifyApiRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiRequest) GoString() string {
	return s.String()
}

func (s *ModifyApiRequest) SetAllowSignatureMethod(v string) *ModifyApiRequest {
	s.AllowSignatureMethod = &v
	return s
}

func (s *ModifyApiRequest) SetApiId(v string) *ModifyApiRequest {
	s.ApiId = &v
	return s
}

func (s *ModifyApiRequest) SetApiName(v string) *ModifyApiRequest {
	s.ApiName = &v
	return s
}

func (s *ModifyApiRequest) SetAppCodeAuthType(v string) *ModifyApiRequest {
	s.AppCodeAuthType = &v
	return s
}

func (s *ModifyApiRequest) SetAuthType(v string) *ModifyApiRequest {
	s.AuthType = &v
	return s
}

func (s *ModifyApiRequest) SetBackendEnable(v bool) *ModifyApiRequest {
	s.BackendEnable = &v
	return s
}

func (s *ModifyApiRequest) SetBackendId(v string) *ModifyApiRequest {
	s.BackendId = &v
	return s
}

func (s *ModifyApiRequest) SetConstantParameters(v string) *ModifyApiRequest {
	s.ConstantParameters = &v
	return s
}

func (s *ModifyApiRequest) SetDescription(v string) *ModifyApiRequest {
	s.Description = &v
	return s
}

func (s *ModifyApiRequest) SetDisableInternet(v bool) *ModifyApiRequest {
	s.DisableInternet = &v
	return s
}

func (s *ModifyApiRequest) SetErrorCodeSamples(v string) *ModifyApiRequest {
	s.ErrorCodeSamples = &v
	return s
}

func (s *ModifyApiRequest) SetFailResultSample(v string) *ModifyApiRequest {
	s.FailResultSample = &v
	return s
}

func (s *ModifyApiRequest) SetForceNonceCheck(v bool) *ModifyApiRequest {
	s.ForceNonceCheck = &v
	return s
}

func (s *ModifyApiRequest) SetGroupId(v string) *ModifyApiRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyApiRequest) SetOpenIdConnectConfig(v string) *ModifyApiRequest {
	s.OpenIdConnectConfig = &v
	return s
}

func (s *ModifyApiRequest) SetRequestConfig(v string) *ModifyApiRequest {
	s.RequestConfig = &v
	return s
}

func (s *ModifyApiRequest) SetRequestParameters(v string) *ModifyApiRequest {
	s.RequestParameters = &v
	return s
}

func (s *ModifyApiRequest) SetResultBodyModel(v string) *ModifyApiRequest {
	s.ResultBodyModel = &v
	return s
}

func (s *ModifyApiRequest) SetResultDescriptions(v string) *ModifyApiRequest {
	s.ResultDescriptions = &v
	return s
}

func (s *ModifyApiRequest) SetResultSample(v string) *ModifyApiRequest {
	s.ResultSample = &v
	return s
}

func (s *ModifyApiRequest) SetResultType(v string) *ModifyApiRequest {
	s.ResultType = &v
	return s
}

func (s *ModifyApiRequest) SetSecurityToken(v string) *ModifyApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyApiRequest) SetServiceConfig(v string) *ModifyApiRequest {
	s.ServiceConfig = &v
	return s
}

func (s *ModifyApiRequest) SetServiceParameters(v string) *ModifyApiRequest {
	s.ServiceParameters = &v
	return s
}

func (s *ModifyApiRequest) SetServiceParametersMap(v string) *ModifyApiRequest {
	s.ServiceParametersMap = &v
	return s
}

func (s *ModifyApiRequest) SetSystemParameters(v string) *ModifyApiRequest {
	s.SystemParameters = &v
	return s
}

func (s *ModifyApiRequest) SetVisibility(v string) *ModifyApiRequest {
	s.Visibility = &v
	return s
}

func (s *ModifyApiRequest) SetWebSocketApiType(v string) *ModifyApiRequest {
	s.WebSocketApiType = &v
	return s
}

type ModifyApiResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 6C87A26A-6A18-4B8E-8099-705278381A2C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyApiResponseBody) SetRequestId(v string) *ModifyApiResponseBody {
	s.RequestId = &v
	return s
}

type ModifyApiResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyApiResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyApiResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiResponse) GoString() string {
	return s.String()
}

func (s *ModifyApiResponse) SetHeaders(v map[string]*string) *ModifyApiResponse {
	s.Headers = v
	return s
}

func (s *ModifyApiResponse) SetStatusCode(v int32) *ModifyApiResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyApiResponse) SetBody(v *ModifyApiResponseBody) *ModifyApiResponse {
	s.Body = v
	return s
}

type ModifyApiConfigurationRequest struct {
	// If the **AuthType*	- parameter is set to **APP**, you must include this parameter to specify the signature algorithm. If you do not specify a value, HmacSHA256 is used by default. Valid values:
	//
	// 	- HmacSHA256
	//
	// 	- HmacSHA1,HmacSHA256
	//
	// example:
	//
	// HmacSHA256
	AllowSignatureMethod *string `json:"AllowSignatureMethod,omitempty" xml:"AllowSignatureMethod,omitempty"`
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// baacc592e63a4cb6a41920d9d3f91f38
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API.
	//
	// example:
	//
	// testModifyApiName
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// If the **AuthType*	- parameter is set to **APP**, the valid values are:
	//
	// 	- **DEFAULT**: The default value that is used if no other values are passed. This value indicates that the settings of the group are used.
	//
	// 	- **DISABLE**: The authentication is disabled.
	//
	// 	- **HEADER**: AppCode can be placed in the Header parameter for authentication.
	//
	// 	- **HEADER_QUERY**: AppCode can be placed in the Header or Query parameter for authentication.
	//
	// example:
	//
	// DEFAULT
	AppCodeAuthType *string `json:"AppCodeAuthType,omitempty" xml:"AppCodeAuthType,omitempty"`
	// API安全认证类型，目前可以取值：
	//
	// - **APP**：只允许已授权的APP调用
	//
	// - **ANONYMOUS**：允许匿名调用，设置为允许匿名调用需要注意：
	//
	//      - 任何能够获取该API服务信息的人，都将能够调用该API。网关不会对调用者做身份认证，也无法设置按用户的流量控制，若开放该API请设置好按API的流量控制；
	//
	//      - AppCodeAuthType的值不会生效。
	//
	// example:
	//
	// APP
	AuthType *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	// The name of the backend service. This parameter takes effect only when the UseBackendService parameter is set to TRUE.
	//
	// example:
	//
	// testBackendService
	BackendName *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	// This parameter takes effect only when the **RequestMode*	- parameter is set to **MAPPING**.
	//
	// The format in which data is transmitted to the server for POST and PUT requests. Valid values: **FORM*	- and **STREAM**. FORM indicates that data is transmitted in the key-value pair format. STREAM indicates that data is transmitted as byte streams.
	//
	// example:
	//
	// STREAM
	BodyFormat *string `json:"BodyFormat,omitempty" xml:"BodyFormat,omitempty"`
	// The body model.
	//
	// example:
	//
	// https://apigateway.aliyun.com/models/f4e7333c****40dcbaf7c9da553ccd8d/3ab61f775b****d4bc35e993****87aa8
	BodyModel *string `json:"BodyModel,omitempty" xml:"BodyModel,omitempty"`
	// The ContentType configuration of the backend request.
	//
	// 	- DEFAULT: the default configuration in API Gateway
	//
	// 	- CUSTOM: a custom configuration
	//
	// example:
	//
	// DEFAULT
	ContentTypeCategory *string `json:"ContentTypeCategory,omitempty" xml:"ContentTypeCategory,omitempty"`
	// The value of the ContentType header when the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.
	//
	// example:
	//
	// application/x-www-form-urlencoded; charset=UTF-8
	ContentTypeValue *string `json:"ContentTypeValue,omitempty" xml:"ContentTypeValue,omitempty"`
	// The description of the API.
	//
	// example:
	//
	// TestModifyDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 	- Specifies whether to call the API only in an internal network. If the **DisableInternet*	- parameter is set to **true**, the API can be called only in an internal network.
	//
	// 	- If the **DisableInternet*	- parameter is set to **false**, the API can be called over the Internet and in an internal network.
	//
	// example:
	//
	// false
	DisableInternet *bool `json:"DisableInternet,omitempty" xml:"DisableInternet,omitempty"`
	// The sample error codes returned by the backend service.
	//
	// For more information, see [ErrorCodeSample](https://help.aliyun.com/document_detail/44392.html).
	//
	// example:
	//
	// [{"Code":"400","Message":"Missing the userId","Description":"param invalid"}]
	ErrorCodeSamples *string `json:"ErrorCodeSamples,omitempty" xml:"ErrorCodeSamples,omitempty"`
	// The sample error response from the backend service. This value is used only to generate documents. It does not affect the returned result.
	//
	// example:
	//
	// {"errorCode":"fail","errorMessage":"param invalid"}
	FailResultSample *string `json:"FailResultSample,omitempty" xml:"FailResultSample,omitempty"`
	// 	- Specifies whether to forcibly check X-Ca-Nonce. If the **ForceNonceCheck*	- parameter is set to **true**, X-Ca-Nonce is forcibly checked. X-Ca-Nonce is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
	//
	// 	- If the **ForceNonceCheck*	- parameter is set to **false**, X-Ca-Nonce is not checked. If you do not modify this parameter when you modify an API, the original value is used.
	//
	// example:
	//
	// true
	ForceNonceCheck *bool `json:"ForceNonceCheck,omitempty" xml:"ForceNonceCheck,omitempty"`
	// The Function Compute configuration.
	//
	// example:
	//
	// {"FcType":"FCEvent","FcRegionId":"cn-hangzhou","RoleArn":"acs:ram::xxxxxxxx:role/aliyunserviceroleforapigateway","selectServiceName":"fcTest","FunctionName":"funcTest","selectFunctionName":"funcTest","Qualifier":"LATEST","Path":"","FcBaseUrl":"","ServiceName":"fcTest"}
	FunctionComputeConfig *string `json:"FunctionComputeConfig,omitempty" xml:"FunctionComputeConfig,omitempty"`
	// The HTTP configuration.
	//
	// example:
	//
	// {"serviceAddress":"http://test.api.com","servicePath":"/test/api","serviceHttpMethod":"GET"}
	HttpConfig *string `json:"HttpConfig,omitempty" xml:"HttpConfig,omitempty"`
	// The Mock configuration.
	//
	// example:
	//
	// {"MockResult":"test","MockHeaders":[{"HeaderName":"testHeader","HeaderValue":"testHeader"}],"MockStatusCode":"400"}
	MockConfig *string `json:"MockConfig,omitempty" xml:"MockConfig,omitempty"`
	// The name of the model.
	//
	// example:
	//
	// Test
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	// The OSS configuration.
	//
	// example:
	//
	// {"OssRegionId":"cn-hangzhou","Key":"/test.html","BucketName":"test-api-oss","Action":"GetObject"}
	OssConfig *string `json:"OssConfig,omitempty" xml:"OssConfig,omitempty"`
	// The description of the request body.
	//
	// example:
	//
	// The description of the request body
	PostBodyDescription *string `json:"PostBodyDescription,omitempty" xml:"PostBodyDescription,omitempty"`
	// The HTTP method used to make the request. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.
	//
	// example:
	//
	// GET
	RequestHttpMethod *string `json:"RequestHttpMethod,omitempty" xml:"RequestHttpMethod,omitempty"`
	// The request mode. Valid values:
	//
	// 	- MAPPING: Parameters are mapped. Unknown parameters are filtered out.
	//
	// 	- PASSTHROUGH: Parameters are passed through.
	//
	// 	- MAPPING_PASSTHROUGH: Parameters are mapped. Unknown parameters are passed through.
	//
	// example:
	//
	// MAPPING
	RequestMode *string `json:"RequestMode,omitempty" xml:"RequestMode,omitempty"`
	// The parameters of API requests sent by the consumer to API Gateway.
	//
	// For more information, see [RequestParameter](https://help.aliyun.com/document_detail/43986.html).
	//
	// example:
	//
	// [{"ParameterLocation":{"name":"Head","orderNumber":2},"ParameterType":"String","Required":"OPTIONAL","isHide":false,"ApiParameterName":"header1","DefaultValue":"123124","Location":"Head"},{"ParameterLocation":{"name":"Head","orderNumber":2},"ParameterType":"String","Required":"REQUIRED","isHide":false,"ApiParameterName":"header2","DefaultValue":"","Location":"Head"},{"ParameterLocation":{"name":"Query","orderNumber":3},"ParameterType":"String","Required":"OPTIONAL","isHide":false,"ApiParameterName":"query1","DefaultValue":"1245","Location":"Query"},{"ApiParameterName":"CaClientIp","ParameterLocation":{"name":"Query","orderNumber":0},"Location":"Query","ParameterType":"String","Required":"REQUIRED","Description":"ClientIP"},{"ApiParameterName":"testConstant","ParameterLocation":{"name":"Head","orderNumber":0},"Location":"Head","ParameterType":"String","Required":"REQUIRED","DefaultValue":"111"}]
	RequestParameters *string `json:"RequestParameters,omitempty" xml:"RequestParameters,omitempty"`
	// The path of the API request. If the complete API URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the path of the API request is `/object/add`.
	//
	// example:
	//
	// /test/api
	RequestPath *string `json:"RequestPath,omitempty" xml:"RequestPath,omitempty"`
	// The protocol type supported by the API. Valid values: HTTP and HTTPS. Separate multiple values with commas (,), such as "HTTP,HTTPS".
	//
	// example:
	//
	// HTTP
	RequestProtocol *string `json:"RequestProtocol,omitempty" xml:"RequestProtocol,omitempty"`
	// The sample response from the backend service. This value is used only to generate documents. It does not affect the returned result.
	//
	// example:
	//
	// {\\n  \\"status\\": 0,\\n  \\"data\\": {\\n    \\"count\\": 1,\\n    \\"list\\": [\\n      \\"352\\"\\n    ]\\n  },\\n  \\"message\\": \\"success\\"\\n}
	ResultSample *string `json:"ResultSample,omitempty" xml:"ResultSample,omitempty"`
	// The format of the response from the backend service. Valid values: JSON, TEXT, BINARY, XML, and HTML. This value is used only to generate documents. It does not affect the returned result.
	//
	// example:
	//
	// JSON
	ResultType    *string `json:"ResultType,omitempty" xml:"ResultType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The parameters of API requests sent by API Gateway to the backend service.
	//
	// For more information, see [ServiceParameter](https://help.aliyun.com/document_detail/43988.html).
	//
	// example:
	//
	// [{"ServiceParameterName":"header1","Location":"Head","Type":"String","ParameterCatalog":"REQUEST"},{"ServiceParameterName":"header2","Location":"Query","Type":"String","ParameterCatalog":"REQUEST"},{"ServiceParameterName":"query1","Location":"Head","Type":"String","ParameterCatalog":"REQUEST"},{"ServiceParameterName":"ipp","Location":"Query","Type":"String","ParameterCatalog":"SYSTEM"},{"ServiceParameterName":"testConstant","Location":"Head","Type":"String","ParameterCatalog":"CONSTANT"}]
	ServiceParameters *string `json:"ServiceParameters,omitempty" xml:"ServiceParameters,omitempty"`
	// The mappings between parameters of requests sent by the consumer to API Gateway and parameters of requests sent by API Gateway to the backend service.
	//
	// For more information, see [ServiceParameterMap](https://help.aliyun.com/document_detail/43989.html).
	//
	// example:
	//
	// [{"ServiceParameterName":"header1","RequestParameterName":"header1"},{"ServiceParameterName":"header2","RequestParameterName":"header2"},{"ServiceParameterName":"query1","RequestParameterName":"query1"},{"ServiceParameterName":"ipp","RequestParameterName":"CaClientIp"},{"ServiceParameterName":"testConstant","RequestParameterName":"testConstant"}]
	ServiceParametersMap *string `json:"ServiceParametersMap,omitempty" xml:"ServiceParametersMap,omitempty"`
	// The protocol that is used to access backend services. Valid values:
	//
	// 	- Http: for backend services that use HTTP or HTTPS
	//
	// 	- Vpc: for backend services that use VPC
	//
	// 	- FC: for Function Compute
	//
	// 	- OSS: for Object Storage Service
	//
	// 	- Mock: for backend services that use the Mock mode
	//
	// 	- EventBridge: for EventBridge
	//
	// You must specify the config value for the corresponding backend service.
	//
	// example:
	//
	// HTTP
	ServiceProtocol *string `json:"ServiceProtocol,omitempty" xml:"ServiceProtocol,omitempty"`
	// The timeout period of the backend service. Unit: milliseconds.
	//
	// example:
	//
	// 10000
	ServiceTimeout *int32 `json:"ServiceTimeout,omitempty" xml:"ServiceTimeout,omitempty"`
	// Specifies whether to use the information about the created backend service. Valid values:
	//
	// 	- TRUE: uses the information about the created backend service.
	//
	// 	- FALSE: uses the information about the custom backend service.
	//
	// example:
	//
	// TRUE
	UseBackendService *bool `json:"UseBackendService,omitempty" xml:"UseBackendService,omitempty"`
	// Specifies whether to make the API public. Valid values:
	//
	// 	- **PUBLIC:*	- The API is public. If this parameter is set to PUBLIC, the API is displayed on the APIs page for all users after the API is published to the production environment.
	//
	// 	- **PRIVATE:*	- The API is private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.
	//
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
	// The VPC configuration.
	//
	// example:
	//
	// {"VpcId":"vpc-xxxxxxx","Name":"testVpc","InstanceId":"i-p0ssssss","Port":80,"servicePath":"/test/vpc","serviceHttpMethod":"HEAD"}
	VpcConfig *string `json:"VpcConfig,omitempty" xml:"VpcConfig,omitempty"`
}

func (s ModifyApiConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiConfigurationRequest) GoString() string {
	return s.String()
}

func (s *ModifyApiConfigurationRequest) SetAllowSignatureMethod(v string) *ModifyApiConfigurationRequest {
	s.AllowSignatureMethod = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetApiId(v string) *ModifyApiConfigurationRequest {
	s.ApiId = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetApiName(v string) *ModifyApiConfigurationRequest {
	s.ApiName = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetAppCodeAuthType(v string) *ModifyApiConfigurationRequest {
	s.AppCodeAuthType = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetAuthType(v string) *ModifyApiConfigurationRequest {
	s.AuthType = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetBackendName(v string) *ModifyApiConfigurationRequest {
	s.BackendName = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetBodyFormat(v string) *ModifyApiConfigurationRequest {
	s.BodyFormat = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetBodyModel(v string) *ModifyApiConfigurationRequest {
	s.BodyModel = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetContentTypeCategory(v string) *ModifyApiConfigurationRequest {
	s.ContentTypeCategory = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetContentTypeValue(v string) *ModifyApiConfigurationRequest {
	s.ContentTypeValue = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetDescription(v string) *ModifyApiConfigurationRequest {
	s.Description = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetDisableInternet(v bool) *ModifyApiConfigurationRequest {
	s.DisableInternet = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetErrorCodeSamples(v string) *ModifyApiConfigurationRequest {
	s.ErrorCodeSamples = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetFailResultSample(v string) *ModifyApiConfigurationRequest {
	s.FailResultSample = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetForceNonceCheck(v bool) *ModifyApiConfigurationRequest {
	s.ForceNonceCheck = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetFunctionComputeConfig(v string) *ModifyApiConfigurationRequest {
	s.FunctionComputeConfig = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetHttpConfig(v string) *ModifyApiConfigurationRequest {
	s.HttpConfig = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetMockConfig(v string) *ModifyApiConfigurationRequest {
	s.MockConfig = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetModelName(v string) *ModifyApiConfigurationRequest {
	s.ModelName = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetOssConfig(v string) *ModifyApiConfigurationRequest {
	s.OssConfig = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetPostBodyDescription(v string) *ModifyApiConfigurationRequest {
	s.PostBodyDescription = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetRequestHttpMethod(v string) *ModifyApiConfigurationRequest {
	s.RequestHttpMethod = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetRequestMode(v string) *ModifyApiConfigurationRequest {
	s.RequestMode = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetRequestParameters(v string) *ModifyApiConfigurationRequest {
	s.RequestParameters = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetRequestPath(v string) *ModifyApiConfigurationRequest {
	s.RequestPath = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetRequestProtocol(v string) *ModifyApiConfigurationRequest {
	s.RequestProtocol = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetResultSample(v string) *ModifyApiConfigurationRequest {
	s.ResultSample = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetResultType(v string) *ModifyApiConfigurationRequest {
	s.ResultType = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetSecurityToken(v string) *ModifyApiConfigurationRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetServiceParameters(v string) *ModifyApiConfigurationRequest {
	s.ServiceParameters = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetServiceParametersMap(v string) *ModifyApiConfigurationRequest {
	s.ServiceParametersMap = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetServiceProtocol(v string) *ModifyApiConfigurationRequest {
	s.ServiceProtocol = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetServiceTimeout(v int32) *ModifyApiConfigurationRequest {
	s.ServiceTimeout = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetUseBackendService(v bool) *ModifyApiConfigurationRequest {
	s.UseBackendService = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetVisibility(v string) *ModifyApiConfigurationRequest {
	s.Visibility = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetVpcConfig(v string) *ModifyApiConfigurationRequest {
	s.VpcConfig = &v
	return s
}

type ModifyApiConfigurationResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 6C87A26A-6A18-4B8E-8099-705278381A2C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyApiConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyApiConfigurationResponseBody) SetRequestId(v string) *ModifyApiConfigurationResponseBody {
	s.RequestId = &v
	return s
}

type ModifyApiConfigurationResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyApiConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyApiConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiConfigurationResponse) GoString() string {
	return s.String()
}

func (s *ModifyApiConfigurationResponse) SetHeaders(v map[string]*string) *ModifyApiConfigurationResponse {
	s.Headers = v
	return s
}

func (s *ModifyApiConfigurationResponse) SetStatusCode(v int32) *ModifyApiConfigurationResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyApiConfigurationResponse) SetBody(v *ModifyApiConfigurationResponseBody) *ModifyApiConfigurationResponse {
	s.Body = v
	return s
}

type ModifyApiGroupRequest struct {
	// The root path of the API.
	//
	// example:
	//
	// /eeee
	BasePath *string `json:"BasePath,omitempty" xml:"BasePath,omitempty"`
	// The list of associated tags. Separate multiple tags with commas (,).
	//
	// example:
	//
	// depart:dep1
	CompatibleFlags *string `json:"CompatibleFlags,omitempty" xml:"CompatibleFlags,omitempty"`
	// The custom trace configuration.
	//
	// example:
	//
	// {\\"parameterLocation\\":\\"HEADER\\",\\"parameterName\\":\\"traceId\\"}
	CustomTraceConfig *string `json:"CustomTraceConfig,omitempty" xml:"CustomTraceConfig,omitempty"`
	// The data of custom configuration items.
	//
	// example:
	//
	// removeResponseServerHeader
	CustomerConfigs *string `json:"CustomerConfigs,omitempty" xml:"CustomerConfigs,omitempty"`
	// The default domain name.
	//
	// example:
	//
	// mkt.api.gaore.com
	DefaultDomain *string `json:"DefaultDomain,omitempty" xml:"DefaultDomain,omitempty"`
	// The API group description that you want to specify, which cannot exceed 180 characters. If this parameter is not specified, the group description is not modified.
	//
	// example:
	//
	// New weather informations.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 523e8dc7bbe04613b5b1d726c2a7889d
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The API group name must be globally unique. The name must be 4 to 50 characters in length. It must start with a letter and can contain letters, digits, and underscores (_). If this parameter is not specified, the group name is not modified.
	//
	// example:
	//
	// NewWeather
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Specifies whether to pass headers.
	//
	// example:
	//
	// eagleeye-rpcid,x-b3-traceid,host
	PassthroughHeaders *string `json:"PassthroughHeaders,omitempty" xml:"PassthroughHeaders,omitempty"`
	// The RPC mode.
	RpcPattern    *string `json:"RpcPattern,omitempty" xml:"RpcPattern,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// if can be null:
	// true
	SupportSSE *string `json:"SupportSSE,omitempty" xml:"SupportSSE,omitempty"`
	// The object tags that match the lifecycle rule. You can specify multiple tags.
	//
	// example:
	//
	// Key， Value
	Tag []*ModifyApiGroupRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// The user log configuration.
	//
	// example:
	//
	// {\\"requestBody\\":false,\\"responseBody\\":false,\\"queryString\\":\\"\\",\\"requestHeaders\\":\\"\\",\\"responseHeaders\\":\\"\\",\\"jwtClaims\\":\\"\\"}
	UserLogConfig *string `json:"UserLogConfig,omitempty" xml:"UserLogConfig,omitempty"`
}

func (s ModifyApiGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupRequest) SetBasePath(v string) *ModifyApiGroupRequest {
	s.BasePath = &v
	return s
}

func (s *ModifyApiGroupRequest) SetCompatibleFlags(v string) *ModifyApiGroupRequest {
	s.CompatibleFlags = &v
	return s
}

func (s *ModifyApiGroupRequest) SetCustomTraceConfig(v string) *ModifyApiGroupRequest {
	s.CustomTraceConfig = &v
	return s
}

func (s *ModifyApiGroupRequest) SetCustomerConfigs(v string) *ModifyApiGroupRequest {
	s.CustomerConfigs = &v
	return s
}

func (s *ModifyApiGroupRequest) SetDefaultDomain(v string) *ModifyApiGroupRequest {
	s.DefaultDomain = &v
	return s
}

func (s *ModifyApiGroupRequest) SetDescription(v string) *ModifyApiGroupRequest {
	s.Description = &v
	return s
}

func (s *ModifyApiGroupRequest) SetGroupId(v string) *ModifyApiGroupRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyApiGroupRequest) SetGroupName(v string) *ModifyApiGroupRequest {
	s.GroupName = &v
	return s
}

func (s *ModifyApiGroupRequest) SetPassthroughHeaders(v string) *ModifyApiGroupRequest {
	s.PassthroughHeaders = &v
	return s
}

func (s *ModifyApiGroupRequest) SetRpcPattern(v string) *ModifyApiGroupRequest {
	s.RpcPattern = &v
	return s
}

func (s *ModifyApiGroupRequest) SetSecurityToken(v string) *ModifyApiGroupRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyApiGroupRequest) SetSupportSSE(v string) *ModifyApiGroupRequest {
	s.SupportSSE = &v
	return s
}

func (s *ModifyApiGroupRequest) SetTag(v []*ModifyApiGroupRequestTag) *ModifyApiGroupRequest {
	s.Tag = v
	return s
}

func (s *ModifyApiGroupRequest) SetUserLogConfig(v string) *ModifyApiGroupRequest {
	s.UserLogConfig = &v
	return s
}

type ModifyApiGroupRequestTag struct {
	// The key of the tag.
	//
	// This parameter is required.
	//
	// example:
	//
	// env
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// This parameter is required.
	//
	// example:
	//
	// uat
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyApiGroupRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupRequestTag) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupRequestTag) SetKey(v string) *ModifyApiGroupRequestTag {
	s.Key = &v
	return s
}

func (s *ModifyApiGroupRequestTag) SetValue(v string) *ModifyApiGroupRequestTag {
	s.Value = &v
	return s
}

type ModifyApiGroupResponseBody struct {
	// The root path of the API.
	//
	// example:
	//
	// /test
	BasePath *string `json:"BasePath,omitempty" xml:"BasePath,omitempty"`
	// The description of the API group.
	//
	// example:
	//
	// New weather informations.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// example:
	//
	// 523e8dc7bbe04613b5b1d726c2a7889d
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the group to which an API belongs.
	//
	// example:
	//
	// NewWeather
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 4CF287C6-CE5B-477B-BE27-C48F99EADBC8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The second-level domain name automatically assigned to the API group.
	//
	// example:
	//
	// 523e8dc7bbe04613b5b1d726c2a7889d-cn-hangzhou.alicloudapi.com
	SubDomain *string `json:"SubDomain,omitempty" xml:"SubDomain,omitempty"`
}

func (s ModifyApiGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupResponseBody) SetBasePath(v string) *ModifyApiGroupResponseBody {
	s.BasePath = &v
	return s
}

func (s *ModifyApiGroupResponseBody) SetDescription(v string) *ModifyApiGroupResponseBody {
	s.Description = &v
	return s
}

func (s *ModifyApiGroupResponseBody) SetGroupId(v string) *ModifyApiGroupResponseBody {
	s.GroupId = &v
	return s
}

func (s *ModifyApiGroupResponseBody) SetGroupName(v string) *ModifyApiGroupResponseBody {
	s.GroupName = &v
	return s
}

func (s *ModifyApiGroupResponseBody) SetRequestId(v string) *ModifyApiGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyApiGroupResponseBody) SetSubDomain(v string) *ModifyApiGroupResponseBody {
	s.SubDomain = &v
	return s
}

type ModifyApiGroupResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyApiGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyApiGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupResponse) SetHeaders(v map[string]*string) *ModifyApiGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyApiGroupResponse) SetStatusCode(v int32) *ModifyApiGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyApiGroupResponse) SetBody(v *ModifyApiGroupResponseBody) *ModifyApiGroupResponse {
	s.Body = v
	return s
}

type ModifyApiGroupInstanceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 01c97ed08a614118849b00079753d1e2
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// migrate
	Remark        *string                             `json:"Remark,omitempty" xml:"Remark,omitempty"`
	SecurityToken *string                             `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag           []*ModifyApiGroupInstanceRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// apigateway-bj-c325375b1ebe
	TargetInstanceId *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty"`
}

func (s ModifyApiGroupInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupInstanceRequest) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupInstanceRequest) SetGroupId(v string) *ModifyApiGroupInstanceRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyApiGroupInstanceRequest) SetRemark(v string) *ModifyApiGroupInstanceRequest {
	s.Remark = &v
	return s
}

func (s *ModifyApiGroupInstanceRequest) SetSecurityToken(v string) *ModifyApiGroupInstanceRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyApiGroupInstanceRequest) SetTag(v []*ModifyApiGroupInstanceRequestTag) *ModifyApiGroupInstanceRequest {
	s.Tag = v
	return s
}

func (s *ModifyApiGroupInstanceRequest) SetTargetInstanceId(v string) *ModifyApiGroupInstanceRequest {
	s.TargetInstanceId = &v
	return s
}

type ModifyApiGroupInstanceRequestTag struct {
	// This parameter is required.
	//
	// example:
	//
	// env
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyApiGroupInstanceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupInstanceRequestTag) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupInstanceRequestTag) SetKey(v string) *ModifyApiGroupInstanceRequestTag {
	s.Key = &v
	return s
}

func (s *ModifyApiGroupInstanceRequestTag) SetValue(v string) *ModifyApiGroupInstanceRequestTag {
	s.Value = &v
	return s
}

type ModifyApiGroupInstanceResponseBody struct {
	// example:
	//
	// E07AEFF0-9FB0-599E-8F12-B418D8AE1F3D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyApiGroupInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupInstanceResponseBody) SetRequestId(v string) *ModifyApiGroupInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ModifyApiGroupInstanceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyApiGroupInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyApiGroupInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupInstanceResponse) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupInstanceResponse) SetHeaders(v map[string]*string) *ModifyApiGroupInstanceResponse {
	s.Headers = v
	return s
}

func (s *ModifyApiGroupInstanceResponse) SetStatusCode(v int32) *ModifyApiGroupInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyApiGroupInstanceResponse) SetBody(v *ModifyApiGroupInstanceResponseBody) *ModifyApiGroupInstanceResponse {
	s.Body = v
	return s
}

type ModifyApiGroupNetworkPolicyRequest struct {
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// b0162c75d7d34ff48506f1aff878b05e
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The HTTPS security policy.
	//
	// example:
	//
	// HTTPS1_1_TLS1_0
	HttpsPolicy *string `json:"HttpsPolicy,omitempty" xml:"HttpsPolicy,omitempty"`
	// Specifies whether to disable the public second-level domain name.
	//
	// example:
	//
	// true
	InnerDomainEnable *bool `json:"InnerDomainEnable,omitempty" xml:"InnerDomainEnable,omitempty"`
	// Specifies whether to enable the virtual private cloud (VPC) second-level domain name.
	//
	// example:
	//
	// true
	InternetEnable *bool `json:"InternetEnable,omitempty" xml:"InternetEnable,omitempty"`
	// Specifies whether to enable IPv6. Valid values: **true*	- and **false**.
	//
	// example:
	//
	// true
	InternetIPV6Enable *bool   `json:"InternetIPV6Enable,omitempty" xml:"InternetIPV6Enable,omitempty"`
	SecurityToken      *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// Specifies whether to enable the VPC domain name. Valid values:
	//
	// 	- TRUE
	//
	// 	- FALSE
	//
	// example:
	//
	// false
	VpcIntranetEnable *bool `json:"VpcIntranetEnable,omitempty" xml:"VpcIntranetEnable,omitempty"`
	// Specifies whether to enable the self-calling domain name.
	//
	// example:
	//
	// false
	VpcSlbIntranetEnable *bool `json:"VpcSlbIntranetEnable,omitempty" xml:"VpcSlbIntranetEnable,omitempty"`
}

func (s ModifyApiGroupNetworkPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupNetworkPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupNetworkPolicyRequest) SetGroupId(v string) *ModifyApiGroupNetworkPolicyRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyApiGroupNetworkPolicyRequest) SetHttpsPolicy(v string) *ModifyApiGroupNetworkPolicyRequest {
	s.HttpsPolicy = &v
	return s
}

func (s *ModifyApiGroupNetworkPolicyRequest) SetInnerDomainEnable(v bool) *ModifyApiGroupNetworkPolicyRequest {
	s.InnerDomainEnable = &v
	return s
}

func (s *ModifyApiGroupNetworkPolicyRequest) SetInternetEnable(v bool) *ModifyApiGroupNetworkPolicyRequest {
	s.InternetEnable = &v
	return s
}

func (s *ModifyApiGroupNetworkPolicyRequest) SetInternetIPV6Enable(v bool) *ModifyApiGroupNetworkPolicyRequest {
	s.InternetIPV6Enable = &v
	return s
}

func (s *ModifyApiGroupNetworkPolicyRequest) SetSecurityToken(v string) *ModifyApiGroupNetworkPolicyRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyApiGroupNetworkPolicyRequest) SetVpcIntranetEnable(v bool) *ModifyApiGroupNetworkPolicyRequest {
	s.VpcIntranetEnable = &v
	return s
}

func (s *ModifyApiGroupNetworkPolicyRequest) SetVpcSlbIntranetEnable(v bool) *ModifyApiGroupNetworkPolicyRequest {
	s.VpcSlbIntranetEnable = &v
	return s
}

type ModifyApiGroupNetworkPolicyResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 4E707B25-5119-5ACF-9D26-7D2A2762F05C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyApiGroupNetworkPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupNetworkPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupNetworkPolicyResponseBody) SetRequestId(v string) *ModifyApiGroupNetworkPolicyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyApiGroupNetworkPolicyResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyApiGroupNetworkPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyApiGroupNetworkPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupNetworkPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupNetworkPolicyResponse) SetHeaders(v map[string]*string) *ModifyApiGroupNetworkPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifyApiGroupNetworkPolicyResponse) SetStatusCode(v int32) *ModifyApiGroupNetworkPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyApiGroupNetworkPolicyResponse) SetBody(v *ModifyApiGroupNetworkPolicyResponseBody) *ModifyApiGroupNetworkPolicyResponse {
	s.Body = v
	return s
}

type ModifyApiGroupVpcWhitelistRequest struct {
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 9b80408147724ddab4c4e2703c6ca019
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the VPC instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// vpc-bp11w979o2s9rcr962w25
	VpcIds *string `json:"VpcIds,omitempty" xml:"VpcIds,omitempty"`
}

func (s ModifyApiGroupVpcWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupVpcWhitelistRequest) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupVpcWhitelistRequest) SetGroupId(v string) *ModifyApiGroupVpcWhitelistRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyApiGroupVpcWhitelistRequest) SetSecurityToken(v string) *ModifyApiGroupVpcWhitelistRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyApiGroupVpcWhitelistRequest) SetVpcIds(v string) *ModifyApiGroupVpcWhitelistRequest {
	s.VpcIds = &v
	return s
}

type ModifyApiGroupVpcWhitelistResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// F8B9DC8C-D6E2-5065-BD1F-0401866E7F10
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyApiGroupVpcWhitelistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupVpcWhitelistResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupVpcWhitelistResponseBody) SetRequestId(v string) *ModifyApiGroupVpcWhitelistResponseBody {
	s.RequestId = &v
	return s
}

type ModifyApiGroupVpcWhitelistResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyApiGroupVpcWhitelistResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyApiGroupVpcWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupVpcWhitelistResponse) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupVpcWhitelistResponse) SetHeaders(v map[string]*string) *ModifyApiGroupVpcWhitelistResponse {
	s.Headers = v
	return s
}

func (s *ModifyApiGroupVpcWhitelistResponse) SetStatusCode(v int32) *ModifyApiGroupVpcWhitelistResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyApiGroupVpcWhitelistResponse) SetBody(v *ModifyApiGroupVpcWhitelistResponseBody) *ModifyApiGroupVpcWhitelistResponse {
	s.Body = v
	return s
}

type ModifyAppRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20112314518278
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID must be 4 to 26 characters in length and can contain letters, digits, and underscores (_). It must start with a letter.
	//
	// If you do not want to modify the existing value, do not specify this parameter.
	//
	// example:
	//
	// jiedian_pord
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The description of the application. The description can be up to 180 characters in length.
	//
	// If you do not want to modify the existing value, do not specify this parameter.
	//
	// example:
	//
	// modidyTest
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Extend        *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The tag of objects that match the rule. You can specify multiple tags.
	//
	// example:
	//
	// Key， Value
	Tag []*ModifyAppRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ModifyAppRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAppRequest) GoString() string {
	return s.String()
}

func (s *ModifyAppRequest) SetAppId(v int64) *ModifyAppRequest {
	s.AppId = &v
	return s
}

func (s *ModifyAppRequest) SetAppName(v string) *ModifyAppRequest {
	s.AppName = &v
	return s
}

func (s *ModifyAppRequest) SetDescription(v string) *ModifyAppRequest {
	s.Description = &v
	return s
}

func (s *ModifyAppRequest) SetExtend(v string) *ModifyAppRequest {
	s.Extend = &v
	return s
}

func (s *ModifyAppRequest) SetSecurityToken(v string) *ModifyAppRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyAppRequest) SetTag(v []*ModifyAppRequestTag) *ModifyAppRequest {
	s.Tag = v
	return s
}

type ModifyAppRequestTag struct {
	// The key of the tag.
	//
	// Valid values of n: `[1, 20]`.
	//
	// This parameter is required.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// Valid values of n: `[1, 20]`.
	//
	// example:
	//
	// value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyAppRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ModifyAppRequestTag) GoString() string {
	return s.String()
}

func (s *ModifyAppRequestTag) SetKey(v string) *ModifyAppRequestTag {
	s.Key = &v
	return s
}

func (s *ModifyAppRequestTag) SetValue(v string) *ModifyAppRequestTag {
	s.Value = &v
	return s
}

type ModifyAppResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ015
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAppResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAppResponseBody) SetRequestId(v string) *ModifyAppResponseBody {
	s.RequestId = &v
	return s
}

type ModifyAppResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyAppResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAppResponse) GoString() string {
	return s.String()
}

func (s *ModifyAppResponse) SetHeaders(v map[string]*string) *ModifyAppResponse {
	s.Headers = v
	return s
}

func (s *ModifyAppResponse) SetStatusCode(v int32) *ModifyAppResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAppResponse) SetBody(v *ModifyAppResponseBody) *ModifyAppResponse {
	s.Body = v
	return s
}

type ModifyBackendRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 20bcdc9453524b78a8beb1f6de21edb7
	BackendId *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testHttpModify
	BackendName *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// HTTP
	BackendType *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
	// example:
	//
	// test
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ModifyBackendRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackendRequest) GoString() string {
	return s.String()
}

func (s *ModifyBackendRequest) SetBackendId(v string) *ModifyBackendRequest {
	s.BackendId = &v
	return s
}

func (s *ModifyBackendRequest) SetBackendName(v string) *ModifyBackendRequest {
	s.BackendName = &v
	return s
}

func (s *ModifyBackendRequest) SetBackendType(v string) *ModifyBackendRequest {
	s.BackendType = &v
	return s
}

func (s *ModifyBackendRequest) SetDescription(v string) *ModifyBackendRequest {
	s.Description = &v
	return s
}

func (s *ModifyBackendRequest) SetSecurityToken(v string) *ModifyBackendRequest {
	s.SecurityToken = &v
	return s
}

type ModifyBackendResponseBody struct {
	// example:
	//
	// 06DACA61-9359-5EC6-AEDA-C73E620E49A9
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyBackendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackendResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyBackendResponseBody) SetRequestId(v string) *ModifyBackendResponseBody {
	s.RequestId = &v
	return s
}

type ModifyBackendResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyBackendResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyBackendResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackendResponse) GoString() string {
	return s.String()
}

func (s *ModifyBackendResponse) SetHeaders(v map[string]*string) *ModifyBackendResponse {
	s.Headers = v
	return s
}

func (s *ModifyBackendResponse) SetStatusCode(v int32) *ModifyBackendResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyBackendResponse) SetBody(v *ModifyBackendResponseBody) *ModifyBackendResponse {
	s.Body = v
	return s
}

type ModifyBackendModelRequest struct {
	// example:
	//
	// 20bcdc9453524b78a8beb1f6de21edb7
	BackendId *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	// example:
	//
	// {\\"ServiceAddress\\":\\"http://121.40.XX.XX\\"}
	BackendModelData *string `json:"BackendModelData,omitempty" xml:"BackendModelData,omitempty"`
	// example:
	//
	// 3bb6375bc71c4e4c95ce05b4e7a55a9d
	BackendModelId *string `json:"BackendModelId,omitempty" xml:"BackendModelId,omitempty"`
	// example:
	//
	// OSS
	BackendType *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
	// example:
	//
	// modify plugin first
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s ModifyBackendModelRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackendModelRequest) GoString() string {
	return s.String()
}

func (s *ModifyBackendModelRequest) SetBackendId(v string) *ModifyBackendModelRequest {
	s.BackendId = &v
	return s
}

func (s *ModifyBackendModelRequest) SetBackendModelData(v string) *ModifyBackendModelRequest {
	s.BackendModelData = &v
	return s
}

func (s *ModifyBackendModelRequest) SetBackendModelId(v string) *ModifyBackendModelRequest {
	s.BackendModelId = &v
	return s
}

func (s *ModifyBackendModelRequest) SetBackendType(v string) *ModifyBackendModelRequest {
	s.BackendType = &v
	return s
}

func (s *ModifyBackendModelRequest) SetDescription(v string) *ModifyBackendModelRequest {
	s.Description = &v
	return s
}

func (s *ModifyBackendModelRequest) SetSecurityToken(v string) *ModifyBackendModelRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyBackendModelRequest) SetStageName(v string) *ModifyBackendModelRequest {
	s.StageName = &v
	return s
}

type ModifyBackendModelResponseBody struct {
	// example:
	//
	// c16a1880f5164d779f6a54f64d997cd9
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	// example:
	//
	// 19B89B04-418B-55EE-94A8-6B42CA06002A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyBackendModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackendModelResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyBackendModelResponseBody) SetOperationId(v string) *ModifyBackendModelResponseBody {
	s.OperationId = &v
	return s
}

func (s *ModifyBackendModelResponseBody) SetRequestId(v string) *ModifyBackendModelResponseBody {
	s.RequestId = &v
	return s
}

type ModifyBackendModelResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyBackendModelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyBackendModelResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackendModelResponse) GoString() string {
	return s.String()
}

func (s *ModifyBackendModelResponse) SetHeaders(v map[string]*string) *ModifyBackendModelResponse {
	s.Headers = v
	return s
}

func (s *ModifyBackendModelResponse) SetStatusCode(v int32) *ModifyBackendModelResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyBackendModelResponse) SetBody(v *ModifyBackendModelResponseBody) *ModifyBackendModelResponse {
	s.Body = v
	return s
}

type ModifyDatasetRequest struct {
	// The ID of the dataset.
	//
	// This parameter is required.
	//
	// example:
	//
	// a25a6589b2584ff490e891cc********
	DatasetId *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// The name of the dataset.
	//
	// This parameter is required.
	//
	// example:
	//
	// NewDatasetName
	DatasetName   *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ModifyDatasetRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatasetRequest) GoString() string {
	return s.String()
}

func (s *ModifyDatasetRequest) SetDatasetId(v string) *ModifyDatasetRequest {
	s.DatasetId = &v
	return s
}

func (s *ModifyDatasetRequest) SetDatasetName(v string) *ModifyDatasetRequest {
	s.DatasetName = &v
	return s
}

func (s *ModifyDatasetRequest) SetSecurityToken(v string) *ModifyDatasetRequest {
	s.SecurityToken = &v
	return s
}

type ModifyDatasetResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDatasetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatasetResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDatasetResponseBody) SetRequestId(v string) *ModifyDatasetResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDatasetResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDatasetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDatasetResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatasetResponse) GoString() string {
	return s.String()
}

func (s *ModifyDatasetResponse) SetHeaders(v map[string]*string) *ModifyDatasetResponse {
	s.Headers = v
	return s
}

func (s *ModifyDatasetResponse) SetStatusCode(v int32) *ModifyDatasetResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDatasetResponse) SetBody(v *ModifyDatasetResponseBody) *ModifyDatasetResponse {
	s.Body = v
	return s
}

type ModifyDatasetItemRequest struct {
	// The ID of the dataset.
	//
	// This parameter is required.
	//
	// example:
	//
	// a25a6589b2584ff490e891cc********
	DatasetId *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	// The ID of the data entry.
	//
	// This parameter is required.
	//
	// example:
	//
	// 5045****
	DatasetItemId *string `json:"DatasetItemId,omitempty" xml:"DatasetItemId,omitempty"`
	// The description of the data entry. The description cannot exceed 180 characters in length.
	//
	// example:
	//
	// description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The time in UTC when the data entry expires. The time is in the **yyyy-MM-ddTHH:mm:ssZ*	- format.
	//
	// example:
	//
	// 2022-09-22T12:00:00Z
	ExpiredTime   *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ModifyDatasetItemRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatasetItemRequest) GoString() string {
	return s.String()
}

func (s *ModifyDatasetItemRequest) SetDatasetId(v string) *ModifyDatasetItemRequest {
	s.DatasetId = &v
	return s
}

func (s *ModifyDatasetItemRequest) SetDatasetItemId(v string) *ModifyDatasetItemRequest {
	s.DatasetItemId = &v
	return s
}

func (s *ModifyDatasetItemRequest) SetDescription(v string) *ModifyDatasetItemRequest {
	s.Description = &v
	return s
}

func (s *ModifyDatasetItemRequest) SetExpiredTime(v string) *ModifyDatasetItemRequest {
	s.ExpiredTime = &v
	return s
}

func (s *ModifyDatasetItemRequest) SetSecurityToken(v string) *ModifyDatasetItemRequest {
	s.SecurityToken = &v
	return s
}

type ModifyDatasetItemResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// F7DE77BC-0F7D-5A18-B494-BD2C********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDatasetItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatasetItemResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDatasetItemResponseBody) SetRequestId(v string) *ModifyDatasetItemResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDatasetItemResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDatasetItemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDatasetItemResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatasetItemResponse) GoString() string {
	return s.String()
}

func (s *ModifyDatasetItemResponse) SetHeaders(v map[string]*string) *ModifyDatasetItemResponse {
	s.Headers = v
	return s
}

func (s *ModifyDatasetItemResponse) SetStatusCode(v int32) *ModifyDatasetItemResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDatasetItemResponse) SetBody(v *ModifyDatasetItemResponseBody) *ModifyDatasetItemResponse {
	s.Body = v
	return s
}

type ModifyInstanceAttributeRequest struct {
	// example:
	//
	// true
	DeleteVpcIpBlock *string `json:"DeleteVpcIpBlock,omitempty" xml:"DeleteVpcIpBlock,omitempty"`
	// example:
	//
	// true
	EgressIpv6Enable *string `json:"EgressIpv6Enable,omitempty" xml:"EgressIpv6Enable,omitempty"`
	// example:
	//
	// HTTPS2_TLS1_0
	HttpsPolicy *string `json:"HttpsPolicy,omitempty" xml:"HttpsPolicy,omitempty"`
	// example:
	//
	// true
	IPV6Enabled *string `json:"IPV6Enabled,omitempty" xml:"IPV6Enabled,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// apigateway-ht-8xxxxxxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// apigatewayInstance
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// example:
	//
	// 172.0.0.1/24
	IntranetSegments *string `json:"IntranetSegments,omitempty" xml:"IntranetSegments,omitempty"`
	// example:
	//
	// 23:00Z
	MaintainEndTime *string `json:"MaintainEndTime,omitempty" xml:"MaintainEndTime,omitempty"`
	// example:
	//
	// 18:00Z
	MaintainStartTime   *string                                            `json:"MaintainStartTime,omitempty" xml:"MaintainStartTime,omitempty"`
	ToConnectVpcIpBlock *ModifyInstanceAttributeRequestToConnectVpcIpBlock `json:"ToConnectVpcIpBlock,omitempty" xml:"ToConnectVpcIpBlock,omitempty" type:"Struct"`
	// example:
	//
	// c20d86c4-1eb3-4d0b-afe9-c586df1e2136
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
	// example:
	//
	// false
	VpcSlbIntranetEnable *string `json:"VpcSlbIntranetEnable,omitempty" xml:"VpcSlbIntranetEnable,omitempty"`
}

func (s ModifyInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeRequest) SetDeleteVpcIpBlock(v string) *ModifyInstanceAttributeRequest {
	s.DeleteVpcIpBlock = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetEgressIpv6Enable(v string) *ModifyInstanceAttributeRequest {
	s.EgressIpv6Enable = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetHttpsPolicy(v string) *ModifyInstanceAttributeRequest {
	s.HttpsPolicy = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetIPV6Enabled(v string) *ModifyInstanceAttributeRequest {
	s.IPV6Enabled = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetInstanceId(v string) *ModifyInstanceAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetInstanceName(v string) *ModifyInstanceAttributeRequest {
	s.InstanceName = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetIntranetSegments(v string) *ModifyInstanceAttributeRequest {
	s.IntranetSegments = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetMaintainEndTime(v string) *ModifyInstanceAttributeRequest {
	s.MaintainEndTime = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetMaintainStartTime(v string) *ModifyInstanceAttributeRequest {
	s.MaintainStartTime = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetToConnectVpcIpBlock(v *ModifyInstanceAttributeRequestToConnectVpcIpBlock) *ModifyInstanceAttributeRequest {
	s.ToConnectVpcIpBlock = v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetToken(v string) *ModifyInstanceAttributeRequest {
	s.Token = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetVpcSlbIntranetEnable(v string) *ModifyInstanceAttributeRequest {
	s.VpcSlbIntranetEnable = &v
	return s
}

type ModifyInstanceAttributeRequestToConnectVpcIpBlock struct {
	// example:
	//
	// 172.16.0.0/16
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// example:
	//
	// false
	Customized *bool `json:"Customized,omitempty" xml:"Customized,omitempty"`
	// example:
	//
	// vsw-wz94cqvaoe1ipxxxxxx
	VswitchId *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
	// example:
	//
	// cn-hangzhou-a
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ModifyInstanceAttributeRequestToConnectVpcIpBlock) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeRequestToConnectVpcIpBlock) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeRequestToConnectVpcIpBlock) SetCidrBlock(v string) *ModifyInstanceAttributeRequestToConnectVpcIpBlock {
	s.CidrBlock = &v
	return s
}

func (s *ModifyInstanceAttributeRequestToConnectVpcIpBlock) SetCustomized(v bool) *ModifyInstanceAttributeRequestToConnectVpcIpBlock {
	s.Customized = &v
	return s
}

func (s *ModifyInstanceAttributeRequestToConnectVpcIpBlock) SetVswitchId(v string) *ModifyInstanceAttributeRequestToConnectVpcIpBlock {
	s.VswitchId = &v
	return s
}

func (s *ModifyInstanceAttributeRequestToConnectVpcIpBlock) SetZoneId(v string) *ModifyInstanceAttributeRequestToConnectVpcIpBlock {
	s.ZoneId = &v
	return s
}

type ModifyInstanceAttributeShrinkRequest struct {
	// example:
	//
	// true
	DeleteVpcIpBlock *string `json:"DeleteVpcIpBlock,omitempty" xml:"DeleteVpcIpBlock,omitempty"`
	// example:
	//
	// true
	EgressIpv6Enable *string `json:"EgressIpv6Enable,omitempty" xml:"EgressIpv6Enable,omitempty"`
	// example:
	//
	// HTTPS2_TLS1_0
	HttpsPolicy *string `json:"HttpsPolicy,omitempty" xml:"HttpsPolicy,omitempty"`
	// example:
	//
	// true
	IPV6Enabled *string `json:"IPV6Enabled,omitempty" xml:"IPV6Enabled,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// apigateway-ht-8xxxxxxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// apigatewayInstance
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// example:
	//
	// 172.0.0.1/24
	IntranetSegments *string `json:"IntranetSegments,omitempty" xml:"IntranetSegments,omitempty"`
	// example:
	//
	// 23:00Z
	MaintainEndTime *string `json:"MaintainEndTime,omitempty" xml:"MaintainEndTime,omitempty"`
	// example:
	//
	// 18:00Z
	MaintainStartTime         *string `json:"MaintainStartTime,omitempty" xml:"MaintainStartTime,omitempty"`
	ToConnectVpcIpBlockShrink *string `json:"ToConnectVpcIpBlock,omitempty" xml:"ToConnectVpcIpBlock,omitempty"`
	// example:
	//
	// c20d86c4-1eb3-4d0b-afe9-c586df1e2136
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
	// example:
	//
	// false
	VpcSlbIntranetEnable *string `json:"VpcSlbIntranetEnable,omitempty" xml:"VpcSlbIntranetEnable,omitempty"`
}

func (s ModifyInstanceAttributeShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeShrinkRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeShrinkRequest) SetDeleteVpcIpBlock(v string) *ModifyInstanceAttributeShrinkRequest {
	s.DeleteVpcIpBlock = &v
	return s
}

func (s *ModifyInstanceAttributeShrinkRequest) SetEgressIpv6Enable(v string) *ModifyInstanceAttributeShrinkRequest {
	s.EgressIpv6Enable = &v
	return s
}

func (s *ModifyInstanceAttributeShrinkRequest) SetHttpsPolicy(v string) *ModifyInstanceAttributeShrinkRequest {
	s.HttpsPolicy = &v
	return s
}

func (s *ModifyInstanceAttributeShrinkRequest) SetIPV6Enabled(v string) *ModifyInstanceAttributeShrinkRequest {
	s.IPV6Enabled = &v
	return s
}

func (s *ModifyInstanceAttributeShrinkRequest) SetInstanceId(v string) *ModifyInstanceAttributeShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceAttributeShrinkRequest) SetInstanceName(v string) *ModifyInstanceAttributeShrinkRequest {
	s.InstanceName = &v
	return s
}

func (s *ModifyInstanceAttributeShrinkRequest) SetIntranetSegments(v string) *ModifyInstanceAttributeShrinkRequest {
	s.IntranetSegments = &v
	return s
}

func (s *ModifyInstanceAttributeShrinkRequest) SetMaintainEndTime(v string) *ModifyInstanceAttributeShrinkRequest {
	s.MaintainEndTime = &v
	return s
}

func (s *ModifyInstanceAttributeShrinkRequest) SetMaintainStartTime(v string) *ModifyInstanceAttributeShrinkRequest {
	s.MaintainStartTime = &v
	return s
}

func (s *ModifyInstanceAttributeShrinkRequest) SetToConnectVpcIpBlockShrink(v string) *ModifyInstanceAttributeShrinkRequest {
	s.ToConnectVpcIpBlockShrink = &v
	return s
}

func (s *ModifyInstanceAttributeShrinkRequest) SetToken(v string) *ModifyInstanceAttributeShrinkRequest {
	s.Token = &v
	return s
}

func (s *ModifyInstanceAttributeShrinkRequest) SetVpcSlbIntranetEnable(v string) *ModifyInstanceAttributeShrinkRequest {
	s.VpcSlbIntranetEnable = &v
	return s
}

type ModifyInstanceAttributeResponseBody struct {
	// example:
	//
	// F3186326-2C57-58E1-B6E9-XXXXXXXXXXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeResponseBody) SetRequestId(v string) *ModifyInstanceAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceAttributeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeResponse) SetHeaders(v map[string]*string) *ModifyInstanceAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceAttributeResponse) SetStatusCode(v int32) *ModifyInstanceAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceAttributeResponse) SetBody(v *ModifyInstanceAttributeResponseBody) *ModifyInstanceAttributeResponse {
	s.Body = v
	return s
}

type ModifyInstanceSpecRequest struct {
	// Specifies whether payment is automatically made during renewal. Valid values:
	//
	// 	- **True**: Automatic payment is enabled. Make sure that your Alibaba Cloud account has adequate balance.
	//
	// 	- **False**: Automatic payment is disabled. You have to manually pay in the console. Log on to the console. In the upper-right corner, choose **Expenses > User Center**. In the left-side navigation pane, click **Orders**. On the page that appears, find your order and complete the payment.
	//
	// Default value: **False**.
	//
	// example:
	//
	// true
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// apigateway-cn-v6419k43xxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The specifications of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// api.s1.small
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// Specifies whether to upgrade or downgrade the instance. Valid values:
	//
	// 	- **UPGRADE**
	//
	// 	- **DOWNGRADE**
	//
	// Default value: **UPGRADE**.
	//
	// example:
	//
	// UPGRADE
	ModifyAction *string `json:"ModifyAction,omitempty" xml:"ModifyAction,omitempty"`
	// Specifies whether to skip the Waiting for Traffic Switchover state. During the upgrade or downgrade, a new outbound IP address may be added to the API Gateway instance. The Waiting for Traffic Switchover state is used to remind users of adding the new outbound IP address to the whitelist. If you set the SkipWaitSwitch parameter to true, the instance does not enter the Waiting for Traffic Switchover state when a new outbound IP address is available. Instead, the system sends internal messages to the user.
	//
	// example:
	//
	// false
	SkipWaitSwitch *bool `json:"SkipWaitSwitch,omitempty" xml:"SkipWaitSwitch,omitempty"`
	// The password.
	//
	// This parameter is required.
	//
	// example:
	//
	// b5845042-2f2f-4e96-bd5c-36c6e5c2a68c
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s ModifyInstanceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecRequest) SetAutoPay(v bool) *ModifyInstanceSpecRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetInstanceId(v string) *ModifyInstanceSpecRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetInstanceSpec(v string) *ModifyInstanceSpecRequest {
	s.InstanceSpec = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetModifyAction(v string) *ModifyInstanceSpecRequest {
	s.ModifyAction = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetSkipWaitSwitch(v bool) *ModifyInstanceSpecRequest {
	s.SkipWaitSwitch = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetToken(v string) *ModifyInstanceSpecRequest {
	s.Token = &v
	return s
}

type ModifyInstanceSpecResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 36BBBAD4-1CFB-489F-841A-8CA52EEA787E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecResponseBody) SetRequestId(v string) *ModifyInstanceSpecResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceSpecResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceSpecResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecResponse) SetHeaders(v map[string]*string) *ModifyInstanceSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceSpecResponse) SetStatusCode(v int32) *ModifyInstanceSpecResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceSpecResponse) SetBody(v *ModifyInstanceSpecResponseBody) *ModifyInstanceSpecResponse {
	s.Body = v
	return s
}

type ModifyIntranetDomainPolicyRequest struct {
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 523e8dc7bbe04613b5b1d726c2a7889d
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// Specifies whether to enable the VPC domain name. Valid values:
	//
	// 	- TRUE
	//
	// 	- FALSE
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	VpcIntranetEnable *bool `json:"VpcIntranetEnable,omitempty" xml:"VpcIntranetEnable,omitempty"`
}

func (s ModifyIntranetDomainPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyIntranetDomainPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyIntranetDomainPolicyRequest) SetGroupId(v string) *ModifyIntranetDomainPolicyRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyIntranetDomainPolicyRequest) SetSecurityToken(v string) *ModifyIntranetDomainPolicyRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyIntranetDomainPolicyRequest) SetVpcIntranetEnable(v bool) *ModifyIntranetDomainPolicyRequest {
	s.VpcIntranetEnable = &v
	return s
}

type ModifyIntranetDomainPolicyResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyIntranetDomainPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyIntranetDomainPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyIntranetDomainPolicyResponseBody) SetRequestId(v string) *ModifyIntranetDomainPolicyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyIntranetDomainPolicyResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyIntranetDomainPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyIntranetDomainPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyIntranetDomainPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyIntranetDomainPolicyResponse) SetHeaders(v map[string]*string) *ModifyIntranetDomainPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifyIntranetDomainPolicyResponse) SetStatusCode(v int32) *ModifyIntranetDomainPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyIntranetDomainPolicyResponse) SetBody(v *ModifyIntranetDomainPolicyResponseBody) *ModifyIntranetDomainPolicyResponse {
	s.Body = v
	return s
}

type ModifyIpControlRequest struct {
	// The description. The description can be up to 200 characters in length.
	//
	// example:
	//
	// description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the ACL. The ID is unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7ea91319a34d48a09b5c9c871d9768b1
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// The name of the ACL. The name must be 4 to 50 characters in length, and can contain letters, digits, and underscores (_). The name cannot start with an underscore (_).
	//
	// example:
	//
	// testControl11
	IpControlName *string `json:"IpControlName,omitempty" xml:"IpControlName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ModifyIpControlRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpControlRequest) GoString() string {
	return s.String()
}

func (s *ModifyIpControlRequest) SetDescription(v string) *ModifyIpControlRequest {
	s.Description = &v
	return s
}

func (s *ModifyIpControlRequest) SetIpControlId(v string) *ModifyIpControlRequest {
	s.IpControlId = &v
	return s
}

func (s *ModifyIpControlRequest) SetIpControlName(v string) *ModifyIpControlRequest {
	s.IpControlName = &v
	return s
}

func (s *ModifyIpControlRequest) SetSecurityToken(v string) *ModifyIpControlRequest {
	s.SecurityToken = &v
	return s
}

type ModifyIpControlResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyIpControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpControlResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyIpControlResponseBody) SetRequestId(v string) *ModifyIpControlResponseBody {
	s.RequestId = &v
	return s
}

type ModifyIpControlResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyIpControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyIpControlResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpControlResponse) GoString() string {
	return s.String()
}

func (s *ModifyIpControlResponse) SetHeaders(v map[string]*string) *ModifyIpControlResponse {
	s.Headers = v
	return s
}

func (s *ModifyIpControlResponse) SetStatusCode(v int32) *ModifyIpControlResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyIpControlResponse) SetBody(v *ModifyIpControlResponseBody) *ModifyIpControlResponse {
	s.Body = v
	return s
}

type ModifyIpControlPolicyItemRequest struct {
	// The ID of the application that is restricted by the policy. You can configure the AppId parameter only when the value of the IpControlType parameter is ALLOW.
	//
	// 	- You can add only one application ID at a time.
	//
	// 	- If this parameter is empty, no applications are restricted.
	//
	// 	- If this parameter is not empty, not only IP addresses but also applications are restricted.
	//
	// 	- If this parameter is not empty and no security authentication method is specified for the API, all API calls are restricted.
	//
	// 	- If the value of the IpControlType parameter is REFUSE and the AppId parameter is not empty, API Gateway automatically ignores the AppId parameter and restricts only the IP addresses.
	//
	// example:
	//
	// 123
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The IP address or CIDR block that is defined in a policy. Separate multiple IP addresses or CIDR blocks with semicolons (;). You can add a maximum of 10 IP addresses or CIDR blocks.
	//
	// This parameter is required.
	//
	// example:
	//
	// 113.125.1.101;101.11.1.1
	CidrIp *string `json:"CidrIp,omitempty" xml:"CidrIp,omitempty"`
	// The ID of the ACL. The ID is unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7ea91319a34d48a09b5c9c871d9768b1
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// The ID of the policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// P151617000829241
	PolicyItemId  *string `json:"PolicyItemId,omitempty" xml:"PolicyItemId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ModifyIpControlPolicyItemRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpControlPolicyItemRequest) GoString() string {
	return s.String()
}

func (s *ModifyIpControlPolicyItemRequest) SetAppId(v string) *ModifyIpControlPolicyItemRequest {
	s.AppId = &v
	return s
}

func (s *ModifyIpControlPolicyItemRequest) SetCidrIp(v string) *ModifyIpControlPolicyItemRequest {
	s.CidrIp = &v
	return s
}

func (s *ModifyIpControlPolicyItemRequest) SetIpControlId(v string) *ModifyIpControlPolicyItemRequest {
	s.IpControlId = &v
	return s
}

func (s *ModifyIpControlPolicyItemRequest) SetPolicyItemId(v string) *ModifyIpControlPolicyItemRequest {
	s.PolicyItemId = &v
	return s
}

func (s *ModifyIpControlPolicyItemRequest) SetSecurityToken(v string) *ModifyIpControlPolicyItemRequest {
	s.SecurityToken = &v
	return s
}

type ModifyIpControlPolicyItemResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyIpControlPolicyItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpControlPolicyItemResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyIpControlPolicyItemResponseBody) SetRequestId(v string) *ModifyIpControlPolicyItemResponseBody {
	s.RequestId = &v
	return s
}

type ModifyIpControlPolicyItemResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyIpControlPolicyItemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyIpControlPolicyItemResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpControlPolicyItemResponse) GoString() string {
	return s.String()
}

func (s *ModifyIpControlPolicyItemResponse) SetHeaders(v map[string]*string) *ModifyIpControlPolicyItemResponse {
	s.Headers = v
	return s
}

func (s *ModifyIpControlPolicyItemResponse) SetStatusCode(v int32) *ModifyIpControlPolicyItemResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyIpControlPolicyItemResponse) SetBody(v *ModifyIpControlPolicyItemResponseBody) *ModifyIpControlPolicyItemResponse {
	s.Body = v
	return s
}

type ModifyLogConfigRequest struct {
	// example:
	//
	// PROVIDER
	LogType       *string `json:"LogType,omitempty" xml:"LogType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// logs-gateway
	SlsLogStore *string `json:"SlsLogStore,omitempty" xml:"SlsLogStore,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ford-api-gateway-log
	SlsProject *string `json:"SlsProject,omitempty" xml:"SlsProject,omitempty"`
}

func (s ModifyLogConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyLogConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyLogConfigRequest) SetLogType(v string) *ModifyLogConfigRequest {
	s.LogType = &v
	return s
}

func (s *ModifyLogConfigRequest) SetSecurityToken(v string) *ModifyLogConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyLogConfigRequest) SetSlsLogStore(v string) *ModifyLogConfigRequest {
	s.SlsLogStore = &v
	return s
}

func (s *ModifyLogConfigRequest) SetSlsProject(v string) *ModifyLogConfigRequest {
	s.SlsProject = &v
	return s
}

type ModifyLogConfigResponseBody struct {
	// example:
	//
	// 75A4ADCB-AA26-51FB-94D4-AB3240040974
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyLogConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyLogConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyLogConfigResponseBody) SetRequestId(v string) *ModifyLogConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyLogConfigResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyLogConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyLogConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyLogConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyLogConfigResponse) SetHeaders(v map[string]*string) *ModifyLogConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyLogConfigResponse) SetStatusCode(v int32) *ModifyLogConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyLogConfigResponse) SetBody(v *ModifyLogConfigResponseBody) *ModifyLogConfigResponse {
	s.Body = v
	return s
}

type ModifyModelRequest struct {
	// The description of the new model definition.
	//
	// example:
	//
	// Model Description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group to which the model belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 30e792398d6c4569b04c0e53a3494381
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the model.
	//
	// This parameter is required.
	//
	// example:
	//
	// Test
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	// The new name of the model.
	//
	// example:
	//
	// NewTest
	NewModelName *string `json:"NewModelName,omitempty" xml:"NewModelName,omitempty"`
	// The new definition of the model.
	//
	// example:
	//
	// {\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"format\\":\\"int64\\",\\"maximum\\":100,\\"exclusiveMaximum\\":true,\\"type\\":\\"integer\\"},\\"name\\":{\\"maxLength\\":10,\\"type\\":\\"string\\"}}}
	Schema *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
}

func (s ModifyModelRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyModelRequest) GoString() string {
	return s.String()
}

func (s *ModifyModelRequest) SetDescription(v string) *ModifyModelRequest {
	s.Description = &v
	return s
}

func (s *ModifyModelRequest) SetGroupId(v string) *ModifyModelRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyModelRequest) SetModelName(v string) *ModifyModelRequest {
	s.ModelName = &v
	return s
}

func (s *ModifyModelRequest) SetNewModelName(v string) *ModifyModelRequest {
	s.NewModelName = &v
	return s
}

func (s *ModifyModelRequest) SetSchema(v string) *ModifyModelRequest {
	s.Schema = &v
	return s
}

type ModifyModelResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 4173F95B-360C-460C-9F6C-4A960B904411
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyModelResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyModelResponseBody) SetRequestId(v string) *ModifyModelResponseBody {
	s.RequestId = &v
	return s
}

type ModifyModelResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyModelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyModelResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyModelResponse) GoString() string {
	return s.String()
}

func (s *ModifyModelResponse) SetHeaders(v map[string]*string) *ModifyModelResponse {
	s.Headers = v
	return s
}

func (s *ModifyModelResponse) SetStatusCode(v int32) *ModifyModelResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyModelResponse) SetBody(v *ModifyModelResponseBody) *ModifyModelResponse {
	s.Body = v
	return s
}

type ModifyPluginRequest struct {
	// The description of the plug-in. The description can contain a maximum of 200 characters in length.
	//
	// example:
	//
	// modify plugin first
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The statement that is used to modify the plug-in definition.
	//
	// example:
	//
	// Plugin definition
	PluginData *string `json:"PluginData,omitempty" xml:"PluginData,omitempty"`
	// The ID of the plug-in whose information you want to modify.
	//
	// This parameter is required.
	//
	// example:
	//
	// a96926e82f994915a8da40a119374537
	PluginId *string `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	// The name of the plug-in. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (_). However, it cannot start with an underscore.
	//
	// example:
	//
	// modifyCors
	PluginName    *string `json:"PluginName,omitempty" xml:"PluginName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The tag of objects that match the rule. You can specify multiple tags.
	//
	// example:
	//
	// Key， Value
	Tag []*ModifyPluginRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ModifyPluginRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPluginRequest) GoString() string {
	return s.String()
}

func (s *ModifyPluginRequest) SetDescription(v string) *ModifyPluginRequest {
	s.Description = &v
	return s
}

func (s *ModifyPluginRequest) SetPluginData(v string) *ModifyPluginRequest {
	s.PluginData = &v
	return s
}

func (s *ModifyPluginRequest) SetPluginId(v string) *ModifyPluginRequest {
	s.PluginId = &v
	return s
}

func (s *ModifyPluginRequest) SetPluginName(v string) *ModifyPluginRequest {
	s.PluginName = &v
	return s
}

func (s *ModifyPluginRequest) SetSecurityToken(v string) *ModifyPluginRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyPluginRequest) SetTag(v []*ModifyPluginRequestTag) *ModifyPluginRequest {
	s.Tag = v
	return s
}

type ModifyPluginRequestTag struct {
	// The key of the tag.
	//
	// N can be an integer from 1 to 20.``
	//
	// This parameter is required.
	//
	// example:
	//
	// env
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// N can be an integer from 1 to 20.``
	//
	// This parameter is required.
	//
	// example:
	//
	// \\" \\"
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyPluginRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ModifyPluginRequestTag) GoString() string {
	return s.String()
}

func (s *ModifyPluginRequestTag) SetKey(v string) *ModifyPluginRequestTag {
	s.Key = &v
	return s
}

func (s *ModifyPluginRequestTag) SetValue(v string) *ModifyPluginRequestTag {
	s.Value = &v
	return s
}

type ModifyPluginResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CE5722A6-AE78-4741-A9B0-6C817D360510
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyPluginResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyPluginResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyPluginResponseBody) SetRequestId(v string) *ModifyPluginResponseBody {
	s.RequestId = &v
	return s
}

type ModifyPluginResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyPluginResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyPluginResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPluginResponse) GoString() string {
	return s.String()
}

func (s *ModifyPluginResponse) SetHeaders(v map[string]*string) *ModifyPluginResponse {
	s.Headers = v
	return s
}

func (s *ModifyPluginResponse) SetStatusCode(v int32) *ModifyPluginResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyPluginResponse) SetBody(v *ModifyPluginResponseBody) *ModifyPluginResponse {
	s.Body = v
	return s
}

type ModifySignatureRequest struct {
	// The security token included in the WebSocket request header. The system uses this token to authenticate the request.
	//
	// example:
	//
	// 436fa39b-b3b9-40c5-ae5d-ce3e000e38c5
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the signature key that you want to manage.
	//
	// This parameter is required.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// The new Key value of the key. The value must be 6 to 20 characters in length and can contain letters, digits, and underscores (_). It must start with a letter.
	//
	// example:
	//
	// qwertyuiop
	SignatureKey *string `json:"SignatureKey,omitempty" xml:"SignatureKey,omitempty"`
	// The new name of the key. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (_). It must start with a letter.
	//
	// example:
	//
	// backendsignature
	SignatureName *string `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
	// The new Secret value of the key. The value must be 6 to 30 characters in length and can contain letters, digits, and special characters. Special characters include underscores (_), at signs (@), number signs (#), exclamation points (!), and asterisks (\\*). The value must start with a letter.
	//
	// example:
	//
	// asdfghjkl
	SignatureSecret *string `json:"SignatureSecret,omitempty" xml:"SignatureSecret,omitempty"`
}

func (s ModifySignatureRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySignatureRequest) GoString() string {
	return s.String()
}

func (s *ModifySignatureRequest) SetSecurityToken(v string) *ModifySignatureRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifySignatureRequest) SetSignatureId(v string) *ModifySignatureRequest {
	s.SignatureId = &v
	return s
}

func (s *ModifySignatureRequest) SetSignatureKey(v string) *ModifySignatureRequest {
	s.SignatureKey = &v
	return s
}

func (s *ModifySignatureRequest) SetSignatureName(v string) *ModifySignatureRequest {
	s.SignatureName = &v
	return s
}

func (s *ModifySignatureRequest) SetSignatureSecret(v string) *ModifySignatureRequest {
	s.SignatureSecret = &v
	return s
}

type ModifySignatureResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the key.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// The name of the key.
	//
	// example:
	//
	// backendsignature
	SignatureName *string `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
}

func (s ModifySignatureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySignatureResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySignatureResponseBody) SetRequestId(v string) *ModifySignatureResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySignatureResponseBody) SetSignatureId(v string) *ModifySignatureResponseBody {
	s.SignatureId = &v
	return s
}

func (s *ModifySignatureResponseBody) SetSignatureName(v string) *ModifySignatureResponseBody {
	s.SignatureName = &v
	return s
}

type ModifySignatureResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifySignatureResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifySignatureResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySignatureResponse) GoString() string {
	return s.String()
}

func (s *ModifySignatureResponse) SetHeaders(v map[string]*string) *ModifySignatureResponse {
	s.Headers = v
	return s
}

func (s *ModifySignatureResponse) SetStatusCode(v int32) *ModifySignatureResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySignatureResponse) SetBody(v *ModifySignatureResponseBody) *ModifySignatureResponse {
	s.Body = v
	return s
}

type ModifyTrafficControlRequest struct {
	// The default throttling value for each API.
	//
	// example:
	//
	// 10000
	ApiDefault *int32 `json:"ApiDefault,omitempty" xml:"ApiDefault,omitempty"`
	// The default throttling value for each app.
	//
	// example:
	//
	// 10000
	AppDefault *int32 `json:"AppDefault,omitempty" xml:"AppDefault,omitempty"`
	// The description of the throttling policy.
	//
	// example:
	//
	// ThrottlingTestDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The security token included in the WebSocket request header. The system uses this token to authenticate the request.
	//
	// example:
	//
	// 4223a10e-eed3-46a6-8b7c-23003f488153
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the throttling policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// tf123456
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
	// The throttling policy name. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (_). It cannot start with an underscore.
	//
	// example:
	//
	// ThrottlingTest
	TrafficControlName *string `json:"TrafficControlName,omitempty" xml:"TrafficControlName,omitempty"`
	// The unit to be used in the throttling policy. Valid values:
	//
	// 	- **SECOND**
	//
	// 	- **MINUTE**
	//
	// 	- **HOUR**
	//
	// 	- **DAY**
	//
	// example:
	//
	// HOUR
	TrafficControlUnit *string `json:"TrafficControlUnit,omitempty" xml:"TrafficControlUnit,omitempty"`
	// The default throttling value for each user.
	//
	// example:
	//
	// 10000
	UserDefault *int32 `json:"UserDefault,omitempty" xml:"UserDefault,omitempty"`
}

func (s ModifyTrafficControlRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTrafficControlRequest) GoString() string {
	return s.String()
}

func (s *ModifyTrafficControlRequest) SetApiDefault(v int32) *ModifyTrafficControlRequest {
	s.ApiDefault = &v
	return s
}

func (s *ModifyTrafficControlRequest) SetAppDefault(v int32) *ModifyTrafficControlRequest {
	s.AppDefault = &v
	return s
}

func (s *ModifyTrafficControlRequest) SetDescription(v string) *ModifyTrafficControlRequest {
	s.Description = &v
	return s
}

func (s *ModifyTrafficControlRequest) SetSecurityToken(v string) *ModifyTrafficControlRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyTrafficControlRequest) SetTrafficControlId(v string) *ModifyTrafficControlRequest {
	s.TrafficControlId = &v
	return s
}

func (s *ModifyTrafficControlRequest) SetTrafficControlName(v string) *ModifyTrafficControlRequest {
	s.TrafficControlName = &v
	return s
}

func (s *ModifyTrafficControlRequest) SetTrafficControlUnit(v string) *ModifyTrafficControlRequest {
	s.TrafficControlUnit = &v
	return s
}

func (s *ModifyTrafficControlRequest) SetUserDefault(v int32) *ModifyTrafficControlRequest {
	s.UserDefault = &v
	return s
}

type ModifyTrafficControlResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyTrafficControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTrafficControlResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTrafficControlResponseBody) SetRequestId(v string) *ModifyTrafficControlResponseBody {
	s.RequestId = &v
	return s
}

type ModifyTrafficControlResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyTrafficControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyTrafficControlResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTrafficControlResponse) GoString() string {
	return s.String()
}

func (s *ModifyTrafficControlResponse) SetHeaders(v map[string]*string) *ModifyTrafficControlResponse {
	s.Headers = v
	return s
}

func (s *ModifyTrafficControlResponse) SetStatusCode(v int32) *ModifyTrafficControlResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTrafficControlResponse) SetBody(v *ModifyTrafficControlResponseBody) *ModifyTrafficControlResponse {
	s.Body = v
	return s
}

type ModifyVpcAccessAndUpdateApisRequest struct {
	// The ID of the new instance.
	//
	// example:
	//
	// i-uf6bzcg1pr4oh5jjmxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the VPC authorization.
	//
	// >
	//
	// 	- The name of a VPC authorization cannot be changed. You cannot use this parameter to change the name of a VPC authorization.
	//
	// 	- You must set this parameter to the name of the current VPC authorization.
	//
	// This parameter is required.
	//
	// example:
	//
	// VpcName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Specifies whether to update the associated API.
	//
	// **
	//
	// **Warning:*	- If you want to update the VPC authorization of a published API, you must set this parameter to true. Otherwise, the update will not be synchronized to the backend service of the API.
	//
	// example:
	//
	// true
	NeedBatchWork *bool `json:"NeedBatchWork,omitempty" xml:"NeedBatchWork,omitempty"`
	// The new port number.
	//
	// example:
	//
	// 80
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// Specifies whether to update the VPC authorization.
	//
	// >
	//
	// 	- If the ID of the instance in your VPC is changed but the IP address of the instance remains unchanged, you can set this parameter to true to update the VPC authorization.
	//
	// example:
	//
	// false
	Refresh       *bool   `json:"Refresh,omitempty" xml:"Refresh,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The token of the request.
	//
	// example:
	//
	// c20d86c4-1eb3-4d0b-afe9-c586df1e2136
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
	// The ID of the new VPC.
	//
	// example:
	//
	// vpc-m5e7jqfppv5wbvmdw5pg2
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The hostname of the backend service.
	//
	// example:
	//
	// iot.hu***ng.com
	VpcTargetHostName *string `json:"VpcTargetHostName,omitempty" xml:"VpcTargetHostName,omitempty"`
}

func (s ModifyVpcAccessAndUpdateApisRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpcAccessAndUpdateApisRequest) GoString() string {
	return s.String()
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetInstanceId(v string) *ModifyVpcAccessAndUpdateApisRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetName(v string) *ModifyVpcAccessAndUpdateApisRequest {
	s.Name = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetNeedBatchWork(v bool) *ModifyVpcAccessAndUpdateApisRequest {
	s.NeedBatchWork = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetPort(v int32) *ModifyVpcAccessAndUpdateApisRequest {
	s.Port = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetRefresh(v bool) *ModifyVpcAccessAndUpdateApisRequest {
	s.Refresh = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetSecurityToken(v string) *ModifyVpcAccessAndUpdateApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetToken(v string) *ModifyVpcAccessAndUpdateApisRequest {
	s.Token = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetVpcId(v string) *ModifyVpcAccessAndUpdateApisRequest {
	s.VpcId = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetVpcTargetHostName(v string) *ModifyVpcAccessAndUpdateApisRequest {
	s.VpcTargetHostName = &v
	return s
}

type ModifyVpcAccessAndUpdateApisResponseBody struct {
	// The ID of the asynchronous task.
	//
	// >
	//
	// 	- If the associated API is updated, you can use the task ID in the **DescribeUpdateVpcInfoTask*	- operation to query the update result.
	//
	// example:
	//
	// 7b6d0cb72b2e4215b0129f675c889746
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// C2CEC6EA-EEBA-5FD6-8BD9-2CF01980FE39
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyVpcAccessAndUpdateApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpcAccessAndUpdateApisResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyVpcAccessAndUpdateApisResponseBody) SetOperationId(v string) *ModifyVpcAccessAndUpdateApisResponseBody {
	s.OperationId = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisResponseBody) SetRequestId(v string) *ModifyVpcAccessAndUpdateApisResponseBody {
	s.RequestId = &v
	return s
}

type ModifyVpcAccessAndUpdateApisResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyVpcAccessAndUpdateApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyVpcAccessAndUpdateApisResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpcAccessAndUpdateApisResponse) GoString() string {
	return s.String()
}

func (s *ModifyVpcAccessAndUpdateApisResponse) SetHeaders(v map[string]*string) *ModifyVpcAccessAndUpdateApisResponse {
	s.Headers = v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisResponse) SetStatusCode(v int32) *ModifyVpcAccessAndUpdateApisResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisResponse) SetBody(v *ModifyVpcAccessAndUpdateApisResponseBody) *ModifyVpcAccessAndUpdateApisResponse {
	s.Body = v
	return s
}

type OpenApiGatewayServiceResponseBody struct {
	// example:
	//
	// 210981***530495
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// example:
	//
	// 2D39D1B3-8548-508A-9CE2-7F4A3F2A7989
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OpenApiGatewayServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenApiGatewayServiceResponseBody) GoString() string {
	return s.String()
}

func (s *OpenApiGatewayServiceResponseBody) SetOrderId(v string) *OpenApiGatewayServiceResponseBody {
	s.OrderId = &v
	return s
}

func (s *OpenApiGatewayServiceResponseBody) SetRequestId(v string) *OpenApiGatewayServiceResponseBody {
	s.RequestId = &v
	return s
}

type OpenApiGatewayServiceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *OpenApiGatewayServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s OpenApiGatewayServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenApiGatewayServiceResponse) GoString() string {
	return s.String()
}

func (s *OpenApiGatewayServiceResponse) SetHeaders(v map[string]*string) *OpenApiGatewayServiceResponse {
	s.Headers = v
	return s
}

func (s *OpenApiGatewayServiceResponse) SetStatusCode(v int32) *OpenApiGatewayServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenApiGatewayServiceResponse) SetBody(v *OpenApiGatewayServiceResponseBody) *OpenApiGatewayServiceResponse {
	s.Body = v
	return s
}

type QueryRequestLogsRequest struct {
	// The ID of the request log.
	//
	// This parameter is required.
	//
	// example:
	//
	// 95657ED9-2F6F-426F-BD99-79C8********
	RequestLogId  *string `json:"RequestLogId,omitempty" xml:"RequestLogId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s QueryRequestLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRequestLogsRequest) GoString() string {
	return s.String()
}

func (s *QueryRequestLogsRequest) SetRequestLogId(v string) *QueryRequestLogsRequest {
	s.RequestLogId = &v
	return s
}

func (s *QueryRequestLogsRequest) SetSecurityToken(v string) *QueryRequestLogsRequest {
	s.SecurityToken = &v
	return s
}

type QueryRequestLogsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CE5722A6-AE78-4741-A9B0-6C81********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The request logs.
	RequestLogs *QueryRequestLogsResponseBodyRequestLogs `json:"RequestLogs,omitempty" xml:"RequestLogs,omitempty" type:"Struct"`
}

func (s QueryRequestLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryRequestLogsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryRequestLogsResponseBody) SetRequestId(v string) *QueryRequestLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryRequestLogsResponseBody) SetRequestLogs(v *QueryRequestLogsResponseBodyRequestLogs) *QueryRequestLogsResponseBody {
	s.RequestLogs = v
	return s
}

type QueryRequestLogsResponseBodyRequestLogs struct {
	RequestLog []*QueryRequestLogsResponseBodyRequestLogsRequestLog `json:"RequestLog,omitempty" xml:"RequestLog,omitempty" type:"Repeated"`
}

func (s QueryRequestLogsResponseBodyRequestLogs) String() string {
	return tea.Prettify(s)
}

func (s QueryRequestLogsResponseBodyRequestLogs) GoString() string {
	return s.String()
}

func (s *QueryRequestLogsResponseBodyRequestLogs) SetRequestLog(v []*QueryRequestLogsResponseBodyRequestLogsRequestLog) *QueryRequestLogsResponseBodyRequestLogs {
	s.RequestLog = v
	return s
}

type QueryRequestLogsResponseBodyRequestLogsRequestLog struct {
	// The API ID.
	//
	// example:
	//
	// 4b83229ebcab4ecd88956fb3********
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The API name.
	//
	// example:
	//
	// ApiName
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The application name.
	//
	// example:
	//
	// VIPROOM_VIPROOM
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The time when API Gateway finished forwarding the request to the backend service.
	BackendRequestEnd *int64 `json:"BackendRequestEnd,omitempty" xml:"BackendRequestEnd,omitempty"`
	// The time when API Gateway started to forward the request to the backend service.
	BackendRequestStart *int64 `json:"BackendRequestStart,omitempty" xml:"BackendRequestStart,omitempty"`
	// The time when API Gateway finished receiving the response from the backend service.
	BackendResponseEnd *int64 `json:"BackendResponseEnd,omitempty" xml:"BackendResponseEnd,omitempty"`
	// The time when API Gateway started to receive the response from the backend service.
	BackendResponseStart *int64 `json:"BackendResponseStart,omitempty" xml:"BackendResponseStart,omitempty"`
	// The IP address of the client that sends the request.
	//
	// example:
	//
	// 21.237.XXX.XXX
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// The X-Ca-Nonce header included in the request from the client.
	//
	// example:
	//
	// d43df9db-3b05-4cd6-888a-1c0b********
	ClientNonce *string `json:"ClientNonce,omitempty" xml:"ClientNonce,omitempty"`
	// The application ID that is used by the caller.
	//
	// example:
	//
	// 11096****
	ConsumerAppId *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty"`
	// The App Key that is used by the caller.
	//
	// example:
	//
	// 20412****
	ConsumerAppKey *string `json:"ConsumerAppKey,omitempty" xml:"ConsumerAppKey,omitempty"`
	// The custom trace ID.
	//
	// example:
	//
	// 95657ED9-2F6F-426F-BD99-79C8********
	CustomTraceId *string `json:"CustomTraceId,omitempty" xml:"CustomTraceId,omitempty"`
	// The requested domain name in the request.
	//
	// example:
	//
	// 360bdd88695c48ae8085c7f2********-ap-southeast-1.alicloudapi.com
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// The error code that is returned.
	//
	// example:
	//
	// X500ER
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message returned if the call fails.
	//
	// example:
	//
	// Backend service connect failed `Timeout connecting to [/1XX.20.0.XX:8080]`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The specific error message returned by the backend service.
	//
	// example:
	//
	// error msg
	Exception *string `json:"Exception,omitempty" xml:"Exception,omitempty"`
	// The time when API Gateway finished receiving the request.
	FrontRequestEnd *int64 `json:"FrontRequestEnd,omitempty" xml:"FrontRequestEnd,omitempty"`
	// The time when API Gateway started to receive the request.
	FrontRequestStart *int64 `json:"FrontRequestStart,omitempty" xml:"FrontRequestStart,omitempty"`
	// The time when API Gateway finished forwarding the response to the client.
	FrontResponseEnd *int64 `json:"FrontResponseEnd,omitempty" xml:"FrontResponseEnd,omitempty"`
	// The time when API Gateway started to forward the response to the client.
	FrontResponseStart *int64 `json:"FrontResponseStart,omitempty" xml:"FrontResponseStart,omitempty"`
	// The ID of the API group to which the API belongs.
	//
	// example:
	//
	// dc024277fe6c4cada79ba0bd6********
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group to which the API belongs.
	//
	// example:
	//
	// GroupName
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The HTTP method that is used to send the request.
	//
	// example:
	//
	// POST
	HttpMethod *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	// The path of the request.
	//
	// example:
	//
	// /testPath
	HttpPath *string `json:"HttpPath,omitempty" xml:"HttpPath,omitempty"`
	// The initial request ID when API Gateway calls an API. For example, if API-1 calls API-2, the initialRequestId parameter in the log of API-2 indicates the ID of the request from API-1.
	//
	// example:
	//
	// 95657ED9-2F6F-426F-BD99-79C8********
	InitialRequestId *string `json:"InitialRequestId,omitempty" xml:"InitialRequestId,omitempty"`
	// The ID of the API Gateway instance to which the API belongs.
	//
	// example:
	//
	// apigateway-bj-ab2b********
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The JSON web token (JWT) claims. The claims can be configured at the group level.
	//
	// example:
	//
	// {}
	JwtClaims *string `json:"JwtClaims,omitempty" xml:"JwtClaims,omitempty"`
	// The region in which the instance resides.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The request body. A request body cannot exceed 1,024 bytes in size.
	//
	// example:
	//
	// param=paramName
	RequestBody *string `json:"RequestBody,omitempty" xml:"RequestBody,omitempty"`
	// The request headers.
	//
	// example:
	//
	// content-type: application/x-www-form-urlencoded
	RequestHeaders *string `json:"RequestHeaders,omitempty" xml:"RequestHeaders,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 95657ED9-2F6F-426F-BD99-79C8********
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The protocol used by the client to send the request. Valid values: HTTP, HTTPS, and WS.
	//
	// example:
	//
	// HTTP
	RequestProtocol *string `json:"RequestProtocol,omitempty" xml:"RequestProtocol,omitempty"`
	// The query string for the request.
	//
	// example:
	//
	// username=name
	RequestQueryString *string `json:"RequestQueryString,omitempty" xml:"RequestQueryString,omitempty"`
	// The size of the request. Unit: bytes.
	//
	// example:
	//
	// 1923
	RequestSize *string `json:"RequestSize,omitempty" xml:"RequestSize,omitempty"`
	// The request time, in UTC.
	//
	// example:
	//
	// 2022-10-29T03:59:59Z
	RequestTime *string `json:"RequestTime,omitempty" xml:"RequestTime,omitempty"`
	// The response body. A response body cannot exceed 1,024 bytes in size.
	//
	// example:
	//
	// param=paramName
	ResponseBody *string `json:"ResponseBody,omitempty" xml:"ResponseBody,omitempty"`
	// The headers in the API response.
	//
	// example:
	//
	// content-type: application/x-www-form-urlencoded
	ResponseHeaders *string `json:"ResponseHeaders,omitempty" xml:"ResponseHeaders,omitempty"`
	// The size of returned data. Unit: bytes.
	//
	// example:
	//
	// 23441
	ResponseSize *string `json:"ResponseSize,omitempty" xml:"ResponseSize,omitempty"`
	// The total time consumed to access the backend resources. The total time includes the time consumed to request a connection to the resources, the time consumed to establish the connection, and the time consumed to call the backend service. Unit: milliseconds.
	//
	// example:
	//
	// 324
	ServiceLatency *string `json:"ServiceLatency,omitempty" xml:"ServiceLatency,omitempty"`
	// The ID of the API environment.
	//
	// example:
	//
	// 8a305b7f10334052a52d9156********
	StageId *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	// The name of the API environment.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The status code returned.
	//
	// example:
	//
	// 200
	StatusCode *string `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
	// The total time consumed by the request. Unit: milliseconds.
	//
	// example:
	//
	// 1345
	TotalLatency *string `json:"TotalLatency,omitempty" xml:"TotalLatency,omitempty"`
	// The plug-in hit by the request and the relevant context.
	//
	// example:
	//
	// []
	Plugin *string `json:"plugin,omitempty" xml:"plugin,omitempty"`
}

func (s QueryRequestLogsResponseBodyRequestLogsRequestLog) String() string {
	return tea.Prettify(s)
}

func (s QueryRequestLogsResponseBodyRequestLogsRequestLog) GoString() string {
	return s.String()
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetApiId(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ApiId = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetApiName(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ApiName = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetAppName(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.AppName = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetBackendRequestEnd(v int64) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.BackendRequestEnd = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetBackendRequestStart(v int64) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.BackendRequestStart = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetBackendResponseEnd(v int64) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.BackendResponseEnd = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetBackendResponseStart(v int64) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.BackendResponseStart = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetClientIp(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ClientIp = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetClientNonce(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ClientNonce = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetConsumerAppId(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ConsumerAppId = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetConsumerAppKey(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ConsumerAppKey = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetCustomTraceId(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.CustomTraceId = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetDomain(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.Domain = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetErrorCode(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ErrorCode = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetErrorMessage(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ErrorMessage = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetException(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.Exception = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetFrontRequestEnd(v int64) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.FrontRequestEnd = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetFrontRequestStart(v int64) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.FrontRequestStart = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetFrontResponseEnd(v int64) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.FrontResponseEnd = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetFrontResponseStart(v int64) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.FrontResponseStart = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetGroupId(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.GroupId = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetGroupName(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.GroupName = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetHttpMethod(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.HttpMethod = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetHttpPath(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.HttpPath = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetInitialRequestId(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.InitialRequestId = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetInstanceId(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.InstanceId = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetJwtClaims(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.JwtClaims = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetRegion(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.Region = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetRequestBody(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.RequestBody = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetRequestHeaders(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.RequestHeaders = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetRequestId(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.RequestId = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetRequestProtocol(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.RequestProtocol = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetRequestQueryString(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.RequestQueryString = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetRequestSize(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.RequestSize = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetRequestTime(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.RequestTime = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetResponseBody(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ResponseBody = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetResponseHeaders(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ResponseHeaders = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetResponseSize(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ResponseSize = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetServiceLatency(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ServiceLatency = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetStageId(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.StageId = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetStageName(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.StageName = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetStatusCode(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.StatusCode = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetTotalLatency(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.TotalLatency = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetPlugin(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.Plugin = &v
	return s
}

type QueryRequestLogsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryRequestLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryRequestLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRequestLogsResponse) GoString() string {
	return s.String()
}

func (s *QueryRequestLogsResponse) SetHeaders(v map[string]*string) *QueryRequestLogsResponse {
	s.Headers = v
	return s
}

func (s *QueryRequestLogsResponse) SetStatusCode(v int32) *QueryRequestLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryRequestLogsResponse) SetBody(v *QueryRequestLogsResponseBody) *QueryRequestLogsResponse {
	s.Body = v
	return s
}

type ReactivateDomainRequest struct {
	// The custom domain name.
	//
	// This parameter is required.
	//
	// example:
	//
	// api.demo.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The ID of the API group to which the domain name is bound. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 927d50c0f2e54b359919923d908bb015
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ReactivateDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s ReactivateDomainRequest) GoString() string {
	return s.String()
}

func (s *ReactivateDomainRequest) SetDomainName(v string) *ReactivateDomainRequest {
	s.DomainName = &v
	return s
}

func (s *ReactivateDomainRequest) SetGroupId(v string) *ReactivateDomainRequest {
	s.GroupId = &v
	return s
}

func (s *ReactivateDomainRequest) SetSecurityToken(v string) *ReactivateDomainRequest {
	s.SecurityToken = &v
	return s
}

type ReactivateDomainResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 6EF60BEC-0242-43AF-BB20-270359FB54A7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReactivateDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReactivateDomainResponseBody) GoString() string {
	return s.String()
}

func (s *ReactivateDomainResponseBody) SetRequestId(v string) *ReactivateDomainResponseBody {
	s.RequestId = &v
	return s
}

type ReactivateDomainResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReactivateDomainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReactivateDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s ReactivateDomainResponse) GoString() string {
	return s.String()
}

func (s *ReactivateDomainResponse) SetHeaders(v map[string]*string) *ReactivateDomainResponse {
	s.Headers = v
	return s
}

func (s *ReactivateDomainResponse) SetStatusCode(v int32) *ReactivateDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *ReactivateDomainResponse) SetBody(v *ReactivateDomainResponseBody) *ReactivateDomainResponse {
	s.Body = v
	return s
}

type RemoveAccessControlListEntryRequest struct {
	// example:
	//
	// [{\\"entry\\":\\"192.168.1.0/24\\",\\"comment\\":\\"WhiteIp\\"}]
	AclEntrys *string `json:"AclEntrys,omitempty" xml:"AclEntrys,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// acl-bp12ag0xxcfhq1ll68wp9
	AclId         *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s RemoveAccessControlListEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveAccessControlListEntryRequest) GoString() string {
	return s.String()
}

func (s *RemoveAccessControlListEntryRequest) SetAclEntrys(v string) *RemoveAccessControlListEntryRequest {
	s.AclEntrys = &v
	return s
}

func (s *RemoveAccessControlListEntryRequest) SetAclId(v string) *RemoveAccessControlListEntryRequest {
	s.AclId = &v
	return s
}

func (s *RemoveAccessControlListEntryRequest) SetSecurityToken(v string) *RemoveAccessControlListEntryRequest {
	s.SecurityToken = &v
	return s
}

type RemoveAccessControlListEntryResponseBody struct {
	// example:
	//
	// D1B18FFE-4A81-59D8-AA02-1817098977CD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveAccessControlListEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveAccessControlListEntryResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveAccessControlListEntryResponseBody) SetRequestId(v string) *RemoveAccessControlListEntryResponseBody {
	s.RequestId = &v
	return s
}

type RemoveAccessControlListEntryResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveAccessControlListEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveAccessControlListEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveAccessControlListEntryResponse) GoString() string {
	return s.String()
}

func (s *RemoveAccessControlListEntryResponse) SetHeaders(v map[string]*string) *RemoveAccessControlListEntryResponse {
	s.Headers = v
	return s
}

func (s *RemoveAccessControlListEntryResponse) SetStatusCode(v int32) *RemoveAccessControlListEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveAccessControlListEntryResponse) SetBody(v *RemoveAccessControlListEntryResponseBody) *RemoveAccessControlListEntryResponse {
	s.Body = v
	return s
}

type RemoveApiProductsAuthoritiesRequest struct {
	// The API products.
	//
	// This parameter is required.
	ApiProductIds []*string `json:"ApiProductIds,omitempty" xml:"ApiProductIds,omitempty" type:"Repeated"`
	// The application ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 110982490
	AppId         *int64  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s RemoveApiProductsAuthoritiesRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveApiProductsAuthoritiesRequest) GoString() string {
	return s.String()
}

func (s *RemoveApiProductsAuthoritiesRequest) SetApiProductIds(v []*string) *RemoveApiProductsAuthoritiesRequest {
	s.ApiProductIds = v
	return s
}

func (s *RemoveApiProductsAuthoritiesRequest) SetAppId(v int64) *RemoveApiProductsAuthoritiesRequest {
	s.AppId = &v
	return s
}

func (s *RemoveApiProductsAuthoritiesRequest) SetSecurityToken(v string) *RemoveApiProductsAuthoritiesRequest {
	s.SecurityToken = &v
	return s
}

type RemoveApiProductsAuthoritiesShrinkRequest struct {
	// The API products.
	//
	// This parameter is required.
	ApiProductIdsShrink *string `json:"ApiProductIds,omitempty" xml:"ApiProductIds,omitempty"`
	// The application ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 110982490
	AppId         *int64  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s RemoveApiProductsAuthoritiesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveApiProductsAuthoritiesShrinkRequest) GoString() string {
	return s.String()
}

func (s *RemoveApiProductsAuthoritiesShrinkRequest) SetApiProductIdsShrink(v string) *RemoveApiProductsAuthoritiesShrinkRequest {
	s.ApiProductIdsShrink = &v
	return s
}

func (s *RemoveApiProductsAuthoritiesShrinkRequest) SetAppId(v int64) *RemoveApiProductsAuthoritiesShrinkRequest {
	s.AppId = &v
	return s
}

func (s *RemoveApiProductsAuthoritiesShrinkRequest) SetSecurityToken(v string) *RemoveApiProductsAuthoritiesShrinkRequest {
	s.SecurityToken = &v
	return s
}

type RemoveApiProductsAuthoritiesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// CEB6EC62-B6C7-5082-A45A-45A204724AC2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveApiProductsAuthoritiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveApiProductsAuthoritiesResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveApiProductsAuthoritiesResponseBody) SetRequestId(v string) *RemoveApiProductsAuthoritiesResponseBody {
	s.RequestId = &v
	return s
}

type RemoveApiProductsAuthoritiesResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveApiProductsAuthoritiesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveApiProductsAuthoritiesResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveApiProductsAuthoritiesResponse) GoString() string {
	return s.String()
}

func (s *RemoveApiProductsAuthoritiesResponse) SetHeaders(v map[string]*string) *RemoveApiProductsAuthoritiesResponse {
	s.Headers = v
	return s
}

func (s *RemoveApiProductsAuthoritiesResponse) SetStatusCode(v int32) *RemoveApiProductsAuthoritiesResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveApiProductsAuthoritiesResponse) SetBody(v *RemoveApiProductsAuthoritiesResponseBody) *RemoveApiProductsAuthoritiesResponse {
	s.Body = v
	return s
}

type RemoveApisAuthoritiesRequest struct {
	// The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	//
	// This parameter is required.
	//
	// example:
	//
	// baacc592e63a4cb6a41920d9d3f91f38,jkscc489e63a4cb6a41920d9d3f92d78
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The ID of the app. The ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2386789
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The description of the authorization.
	//
	// example:
	//
	// Queries weather based on the region name
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// example:
	//
	// 523e8dc7bbe04613b5b1d726c2a7889d
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s RemoveApisAuthoritiesRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveApisAuthoritiesRequest) GoString() string {
	return s.String()
}

func (s *RemoveApisAuthoritiesRequest) SetApiIds(v string) *RemoveApisAuthoritiesRequest {
	s.ApiIds = &v
	return s
}

func (s *RemoveApisAuthoritiesRequest) SetAppId(v int64) *RemoveApisAuthoritiesRequest {
	s.AppId = &v
	return s
}

func (s *RemoveApisAuthoritiesRequest) SetDescription(v string) *RemoveApisAuthoritiesRequest {
	s.Description = &v
	return s
}

func (s *RemoveApisAuthoritiesRequest) SetGroupId(v string) *RemoveApisAuthoritiesRequest {
	s.GroupId = &v
	return s
}

func (s *RemoveApisAuthoritiesRequest) SetSecurityToken(v string) *RemoveApisAuthoritiesRequest {
	s.SecurityToken = &v
	return s
}

func (s *RemoveApisAuthoritiesRequest) SetStageName(v string) *RemoveApisAuthoritiesRequest {
	s.StageName = &v
	return s
}

type RemoveApisAuthoritiesResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// D6E46F10-F26C-4AA0-BB69-FE2743D9AE62
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveApisAuthoritiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveApisAuthoritiesResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveApisAuthoritiesResponseBody) SetRequestId(v string) *RemoveApisAuthoritiesResponseBody {
	s.RequestId = &v
	return s
}

type RemoveApisAuthoritiesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveApisAuthoritiesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveApisAuthoritiesResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveApisAuthoritiesResponse) GoString() string {
	return s.String()
}

func (s *RemoveApisAuthoritiesResponse) SetHeaders(v map[string]*string) *RemoveApisAuthoritiesResponse {
	s.Headers = v
	return s
}

func (s *RemoveApisAuthoritiesResponse) SetStatusCode(v int32) *RemoveApisAuthoritiesResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveApisAuthoritiesResponse) SetBody(v *RemoveApisAuthoritiesResponseBody) *RemoveApisAuthoritiesResponse {
	s.Body = v
	return s
}

type RemoveAppsAuthoritiesRequest struct {
	// The ID of the API. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// baacc592e63a4cb6a41920d9d3f91f38
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The IDs of applications. Separate multiple application IDs with commas (,). A maximum of 100 applications IDs can be entered.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2386789,3286798
	AppIds *string `json:"AppIds,omitempty" xml:"AppIds,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// example:
	//
	// 523e8dc7bbe04613b5b1d726c2a7889d
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s RemoveAppsAuthoritiesRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveAppsAuthoritiesRequest) GoString() string {
	return s.String()
}

func (s *RemoveAppsAuthoritiesRequest) SetApiId(v string) *RemoveAppsAuthoritiesRequest {
	s.ApiId = &v
	return s
}

func (s *RemoveAppsAuthoritiesRequest) SetAppIds(v string) *RemoveAppsAuthoritiesRequest {
	s.AppIds = &v
	return s
}

func (s *RemoveAppsAuthoritiesRequest) SetGroupId(v string) *RemoveAppsAuthoritiesRequest {
	s.GroupId = &v
	return s
}

func (s *RemoveAppsAuthoritiesRequest) SetSecurityToken(v string) *RemoveAppsAuthoritiesRequest {
	s.SecurityToken = &v
	return s
}

func (s *RemoveAppsAuthoritiesRequest) SetStageName(v string) *RemoveAppsAuthoritiesRequest {
	s.StageName = &v
	return s
}

type RemoveAppsAuthoritiesResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// D6E46F10-F26C-4AA0-BB69-FE2743D9AE62
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveAppsAuthoritiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveAppsAuthoritiesResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveAppsAuthoritiesResponseBody) SetRequestId(v string) *RemoveAppsAuthoritiesResponseBody {
	s.RequestId = &v
	return s
}

type RemoveAppsAuthoritiesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveAppsAuthoritiesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveAppsAuthoritiesResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveAppsAuthoritiesResponse) GoString() string {
	return s.String()
}

func (s *RemoveAppsAuthoritiesResponse) SetHeaders(v map[string]*string) *RemoveAppsAuthoritiesResponse {
	s.Headers = v
	return s
}

func (s *RemoveAppsAuthoritiesResponse) SetStatusCode(v int32) *RemoveAppsAuthoritiesResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveAppsAuthoritiesResponse) SetBody(v *RemoveAppsAuthoritiesResponseBody) *RemoveAppsAuthoritiesResponse {
	s.Body = v
	return s
}

type RemoveIpControlApisRequest struct {
	// The IDs of the APIs from which you want to unbind the ACL.
	//
	// 	- If this parameter is not specified, the ACL is unbound from all the APIs in the specified environment of the API group.
	//
	// 	- The IDs of APIs that you want to query. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	//
	// example:
	//
	// 123
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the ACL.
	//
	// This parameter is required.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	IpControlId   *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s RemoveIpControlApisRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveIpControlApisRequest) GoString() string {
	return s.String()
}

func (s *RemoveIpControlApisRequest) SetApiIds(v string) *RemoveIpControlApisRequest {
	s.ApiIds = &v
	return s
}

func (s *RemoveIpControlApisRequest) SetGroupId(v string) *RemoveIpControlApisRequest {
	s.GroupId = &v
	return s
}

func (s *RemoveIpControlApisRequest) SetIpControlId(v string) *RemoveIpControlApisRequest {
	s.IpControlId = &v
	return s
}

func (s *RemoveIpControlApisRequest) SetSecurityToken(v string) *RemoveIpControlApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *RemoveIpControlApisRequest) SetStageName(v string) *RemoveIpControlApisRequest {
	s.StageName = &v
	return s
}

type RemoveIpControlApisResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveIpControlApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveIpControlApisResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveIpControlApisResponseBody) SetRequestId(v string) *RemoveIpControlApisResponseBody {
	s.RequestId = &v
	return s
}

type RemoveIpControlApisResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveIpControlApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveIpControlApisResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveIpControlApisResponse) GoString() string {
	return s.String()
}

func (s *RemoveIpControlApisResponse) SetHeaders(v map[string]*string) *RemoveIpControlApisResponse {
	s.Headers = v
	return s
}

func (s *RemoveIpControlApisResponse) SetStatusCode(v int32) *RemoveIpControlApisResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveIpControlApisResponse) SetBody(v *RemoveIpControlApisResponseBody) *RemoveIpControlApisResponse {
	s.Body = v
	return s
}

type RemoveIpControlPolicyItemRequest struct {
	// The ID of the ACL. The ID is unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7ea91319a34d48a09b5c9c871d9768b1
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// The ID of a policy. Separate multiple IDs with semicolons (;). A maximum of 100 IDs can be entered.
	//
	// This parameter is required.
	//
	// example:
	//
	// P151533572852362;P151533557750260
	PolicyItemIds *string `json:"PolicyItemIds,omitempty" xml:"PolicyItemIds,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s RemoveIpControlPolicyItemRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveIpControlPolicyItemRequest) GoString() string {
	return s.String()
}

func (s *RemoveIpControlPolicyItemRequest) SetIpControlId(v string) *RemoveIpControlPolicyItemRequest {
	s.IpControlId = &v
	return s
}

func (s *RemoveIpControlPolicyItemRequest) SetPolicyItemIds(v string) *RemoveIpControlPolicyItemRequest {
	s.PolicyItemIds = &v
	return s
}

func (s *RemoveIpControlPolicyItemRequest) SetSecurityToken(v string) *RemoveIpControlPolicyItemRequest {
	s.SecurityToken = &v
	return s
}

type RemoveIpControlPolicyItemResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveIpControlPolicyItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveIpControlPolicyItemResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveIpControlPolicyItemResponseBody) SetRequestId(v string) *RemoveIpControlPolicyItemResponseBody {
	s.RequestId = &v
	return s
}

type RemoveIpControlPolicyItemResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveIpControlPolicyItemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveIpControlPolicyItemResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveIpControlPolicyItemResponse) GoString() string {
	return s.String()
}

func (s *RemoveIpControlPolicyItemResponse) SetHeaders(v map[string]*string) *RemoveIpControlPolicyItemResponse {
	s.Headers = v
	return s
}

func (s *RemoveIpControlPolicyItemResponse) SetStatusCode(v int32) *RemoveIpControlPolicyItemResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveIpControlPolicyItemResponse) SetBody(v *RemoveIpControlPolicyItemResponseBody) *RemoveIpControlPolicyItemResponse {
	s.Body = v
	return s
}

type RemoveSignatureApisRequest struct {
	// The IDs of the APIs from which you want to unbind the signature key.
	//
	// 	- If this parameter is not specified, the signature key is unbound from all the APIs in the specified environment of the API group.
	//
	// 	- The IDs of the APIs that you want to manage. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	//
	// example:
	//
	// 123
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The ID of the API group to which the API that you want to manage belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the signature key.
	//
	// This parameter is required.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s RemoveSignatureApisRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveSignatureApisRequest) GoString() string {
	return s.String()
}

func (s *RemoveSignatureApisRequest) SetApiIds(v string) *RemoveSignatureApisRequest {
	s.ApiIds = &v
	return s
}

func (s *RemoveSignatureApisRequest) SetGroupId(v string) *RemoveSignatureApisRequest {
	s.GroupId = &v
	return s
}

func (s *RemoveSignatureApisRequest) SetSecurityToken(v string) *RemoveSignatureApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *RemoveSignatureApisRequest) SetSignatureId(v string) *RemoveSignatureApisRequest {
	s.SignatureId = &v
	return s
}

func (s *RemoveSignatureApisRequest) SetStageName(v string) *RemoveSignatureApisRequest {
	s.StageName = &v
	return s
}

type RemoveSignatureApisResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveSignatureApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveSignatureApisResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveSignatureApisResponseBody) SetRequestId(v string) *RemoveSignatureApisResponseBody {
	s.RequestId = &v
	return s
}

type RemoveSignatureApisResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveSignatureApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveSignatureApisResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveSignatureApisResponse) GoString() string {
	return s.String()
}

func (s *RemoveSignatureApisResponse) SetHeaders(v map[string]*string) *RemoveSignatureApisResponse {
	s.Headers = v
	return s
}

func (s *RemoveSignatureApisResponse) SetStatusCode(v int32) *RemoveSignatureApisResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveSignatureApisResponse) SetBody(v *RemoveSignatureApisResponseBody) *RemoveSignatureApisResponse {
	s.Body = v
	return s
}

type RemoveTrafficControlApisRequest struct {
	// The IDs of the APIs from which you want to unbind a specified throttling policy.
	//
	// 	- If this parameter is not specified, the throttling policy is unbound from all the APIs in the specified environment of the API group.
	//
	// 	- Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	//
	// example:
	//
	// 3b81fd160f5645e097cc8855d75a1cf6,46fbb52840d146f186e38e8e70fc8c12
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The ID of the API group containing the APIs from which you want to unbind a specified throttling policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The security token included in the WebSocket request header. The system uses this token to authenticate the request.
	//
	// example:
	//
	// 4223a10e-eed3-46a6-8b7c-23003f488153
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The ID of the throttling policy that you want to unbind from APIs.
	//
	// This parameter is required.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
}

func (s RemoveTrafficControlApisRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveTrafficControlApisRequest) GoString() string {
	return s.String()
}

func (s *RemoveTrafficControlApisRequest) SetApiIds(v string) *RemoveTrafficControlApisRequest {
	s.ApiIds = &v
	return s
}

func (s *RemoveTrafficControlApisRequest) SetGroupId(v string) *RemoveTrafficControlApisRequest {
	s.GroupId = &v
	return s
}

func (s *RemoveTrafficControlApisRequest) SetSecurityToken(v string) *RemoveTrafficControlApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *RemoveTrafficControlApisRequest) SetStageName(v string) *RemoveTrafficControlApisRequest {
	s.StageName = &v
	return s
}

func (s *RemoveTrafficControlApisRequest) SetTrafficControlId(v string) *RemoveTrafficControlApisRequest {
	s.TrafficControlId = &v
	return s
}

type RemoveTrafficControlApisResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveTrafficControlApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveTrafficControlApisResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveTrafficControlApisResponseBody) SetRequestId(v string) *RemoveTrafficControlApisResponseBody {
	s.RequestId = &v
	return s
}

type RemoveTrafficControlApisResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveTrafficControlApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveTrafficControlApisResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveTrafficControlApisResponse) GoString() string {
	return s.String()
}

func (s *RemoveTrafficControlApisResponse) SetHeaders(v map[string]*string) *RemoveTrafficControlApisResponse {
	s.Headers = v
	return s
}

func (s *RemoveTrafficControlApisResponse) SetStatusCode(v int32) *RemoveTrafficControlApisResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveTrafficControlApisResponse) SetBody(v *RemoveTrafficControlApisResponseBody) *RemoveTrafficControlApisResponse {
	s.Body = v
	return s
}

type RemoveVpcAccessRequest struct {
	// The ID of an ECS or SLB instance in the VPC.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-uf6bzcg1pr4oh5jjmxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Specifies whether batch work is required.
	//
	// example:
	//
	// true
	NeedBatchWork *bool `json:"NeedBatchWork,omitempty" xml:"NeedBatchWork,omitempty"`
	// The port number that corresponds to the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// 80
	Port          *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the VPC.
	//
	// This parameter is required.
	//
	// example:
	//
	// vpc-uf657qec7lx42paw3qxxx
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s RemoveVpcAccessRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveVpcAccessRequest) GoString() string {
	return s.String()
}

func (s *RemoveVpcAccessRequest) SetInstanceId(v string) *RemoveVpcAccessRequest {
	s.InstanceId = &v
	return s
}

func (s *RemoveVpcAccessRequest) SetNeedBatchWork(v bool) *RemoveVpcAccessRequest {
	s.NeedBatchWork = &v
	return s
}

func (s *RemoveVpcAccessRequest) SetPort(v int32) *RemoveVpcAccessRequest {
	s.Port = &v
	return s
}

func (s *RemoveVpcAccessRequest) SetSecurityToken(v string) *RemoveVpcAccessRequest {
	s.SecurityToken = &v
	return s
}

func (s *RemoveVpcAccessRequest) SetVpcId(v string) *RemoveVpcAccessRequest {
	s.VpcId = &v
	return s
}

type RemoveVpcAccessResponseBody struct {
	// API operations
	Apis *RemoveVpcAccessResponseBodyApis `json:"Apis,omitempty" xml:"Apis,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ015
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveVpcAccessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveVpcAccessResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveVpcAccessResponseBody) SetApis(v *RemoveVpcAccessResponseBodyApis) *RemoveVpcAccessResponseBody {
	s.Apis = v
	return s
}

func (s *RemoveVpcAccessResponseBody) SetRequestId(v string) *RemoveVpcAccessResponseBody {
	s.RequestId = &v
	return s
}

type RemoveVpcAccessResponseBodyApis struct {
	Api []*RemoveVpcAccessResponseBodyApisApi `json:"Api,omitempty" xml:"Api,omitempty" type:"Repeated"`
}

func (s RemoveVpcAccessResponseBodyApis) String() string {
	return tea.Prettify(s)
}

func (s RemoveVpcAccessResponseBodyApis) GoString() string {
	return s.String()
}

func (s *RemoveVpcAccessResponseBodyApis) SetApi(v []*RemoveVpcAccessResponseBodyApisApi) *RemoveVpcAccessResponseBodyApis {
	s.Api = v
	return s
}

type RemoveVpcAccessResponseBodyApisApi struct {
	// API Id
	//
	// example:
	//
	// 551877242a4b4f3a84a56b7c3570e4a7
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 78d54ac4424d4b1792e33ca35637e8e4
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the runtime environment.
	//
	// example:
	//
	// d1e1ee28f9fb4b729db0ee8ca76ff0a5
	StageId *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
}

func (s RemoveVpcAccessResponseBodyApisApi) String() string {
	return tea.Prettify(s)
}

func (s RemoveVpcAccessResponseBodyApisApi) GoString() string {
	return s.String()
}

func (s *RemoveVpcAccessResponseBodyApisApi) SetApiId(v string) *RemoveVpcAccessResponseBodyApisApi {
	s.ApiId = &v
	return s
}

func (s *RemoveVpcAccessResponseBodyApisApi) SetGroupId(v string) *RemoveVpcAccessResponseBodyApisApi {
	s.GroupId = &v
	return s
}

func (s *RemoveVpcAccessResponseBodyApisApi) SetStageId(v string) *RemoveVpcAccessResponseBodyApisApi {
	s.StageId = &v
	return s
}

type RemoveVpcAccessResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveVpcAccessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveVpcAccessResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveVpcAccessResponse) GoString() string {
	return s.String()
}

func (s *RemoveVpcAccessResponse) SetHeaders(v map[string]*string) *RemoveVpcAccessResponse {
	s.Headers = v
	return s
}

func (s *RemoveVpcAccessResponse) SetStatusCode(v int32) *RemoveVpcAccessResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveVpcAccessResponse) SetBody(v *RemoveVpcAccessResponseBody) *RemoveVpcAccessResponse {
	s.Body = v
	return s
}

type RemoveVpcAccessAndAbolishApisRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// i-uf6iaale3gfef9t9cb41
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// true
	NeedBatchWork *bool `json:"NeedBatchWork,omitempty" xml:"NeedBatchWork,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 8080
	Port          *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// vpc-bp1iw82phcgkvupgfv0o8
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s RemoveVpcAccessAndAbolishApisRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveVpcAccessAndAbolishApisRequest) GoString() string {
	return s.String()
}

func (s *RemoveVpcAccessAndAbolishApisRequest) SetInstanceId(v string) *RemoveVpcAccessAndAbolishApisRequest {
	s.InstanceId = &v
	return s
}

func (s *RemoveVpcAccessAndAbolishApisRequest) SetNeedBatchWork(v bool) *RemoveVpcAccessAndAbolishApisRequest {
	s.NeedBatchWork = &v
	return s
}

func (s *RemoveVpcAccessAndAbolishApisRequest) SetPort(v int32) *RemoveVpcAccessAndAbolishApisRequest {
	s.Port = &v
	return s
}

func (s *RemoveVpcAccessAndAbolishApisRequest) SetSecurityToken(v string) *RemoveVpcAccessAndAbolishApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *RemoveVpcAccessAndAbolishApisRequest) SetVpcId(v string) *RemoveVpcAccessAndAbolishApisRequest {
	s.VpcId = &v
	return s
}

type RemoveVpcAccessAndAbolishApisResponseBody struct {
	// example:
	//
	// f7834d74be4e41aa8e607b0fafae9b33
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ016
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveVpcAccessAndAbolishApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveVpcAccessAndAbolishApisResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveVpcAccessAndAbolishApisResponseBody) SetOperationId(v string) *RemoveVpcAccessAndAbolishApisResponseBody {
	s.OperationId = &v
	return s
}

func (s *RemoveVpcAccessAndAbolishApisResponseBody) SetRequestId(v string) *RemoveVpcAccessAndAbolishApisResponseBody {
	s.RequestId = &v
	return s
}

type RemoveVpcAccessAndAbolishApisResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveVpcAccessAndAbolishApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveVpcAccessAndAbolishApisResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveVpcAccessAndAbolishApisResponse) GoString() string {
	return s.String()
}

func (s *RemoveVpcAccessAndAbolishApisResponse) SetHeaders(v map[string]*string) *RemoveVpcAccessAndAbolishApisResponse {
	s.Headers = v
	return s
}

func (s *RemoveVpcAccessAndAbolishApisResponse) SetStatusCode(v int32) *RemoveVpcAccessAndAbolishApisResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveVpcAccessAndAbolishApisResponse) SetBody(v *RemoveVpcAccessAndAbolishApisResponseBody) *RemoveVpcAccessAndAbolishApisResponse {
	s.Body = v
	return s
}

type ResetAppCodeRequest struct {
	// The AppCode of the app.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3aaf905a0a1f4f0eabc6d891dfa08afc
	AppCode *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	// The new AppCode of the app.
	//
	// example:
	//
	// 6f0e7ab2aa5f4b8fb18421e6edf4fb6c2
	NewAppCode    *string `json:"NewAppCode,omitempty" xml:"NewAppCode,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ResetAppCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetAppCodeRequest) GoString() string {
	return s.String()
}

func (s *ResetAppCodeRequest) SetAppCode(v string) *ResetAppCodeRequest {
	s.AppCode = &v
	return s
}

func (s *ResetAppCodeRequest) SetNewAppCode(v string) *ResetAppCodeRequest {
	s.NewAppCode = &v
	return s
}

func (s *ResetAppCodeRequest) SetSecurityToken(v string) *ResetAppCodeRequest {
	s.SecurityToken = &v
	return s
}

type ResetAppCodeResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// D1B18FFE-4A81-59D8-AA02-1817098977CD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetAppCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetAppCodeResponseBody) GoString() string {
	return s.String()
}

func (s *ResetAppCodeResponseBody) SetRequestId(v string) *ResetAppCodeResponseBody {
	s.RequestId = &v
	return s
}

type ResetAppCodeResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetAppCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetAppCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetAppCodeResponse) GoString() string {
	return s.String()
}

func (s *ResetAppCodeResponse) SetHeaders(v map[string]*string) *ResetAppCodeResponse {
	s.Headers = v
	return s
}

func (s *ResetAppCodeResponse) SetStatusCode(v int32) *ResetAppCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetAppCodeResponse) SetBody(v *ResetAppCodeResponseBody) *ResetAppCodeResponse {
	s.Body = v
	return s
}

type ResetAppSecretRequest struct {
	// The key of the application that is used to make an API call.
	//
	// This parameter is required.
	//
	// example:
	//
	// 60030986
	AppKey *string `json:"AppKey,omitempty" xml:"AppKey,omitempty"`
	// The new AppKey that you set must be globally unique.
	//
	// example:
	//
	// testAppKey
	NewAppKey *string `json:"NewAppKey,omitempty" xml:"NewAppKey,omitempty"`
	// The new key of the application. To improve compatibility, we recommend that you use other parameters.
	//
	// example:
	//
	// test***
	NewAppSecret  *string `json:"NewAppSecret,omitempty" xml:"NewAppSecret,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ResetAppSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetAppSecretRequest) GoString() string {
	return s.String()
}

func (s *ResetAppSecretRequest) SetAppKey(v string) *ResetAppSecretRequest {
	s.AppKey = &v
	return s
}

func (s *ResetAppSecretRequest) SetNewAppKey(v string) *ResetAppSecretRequest {
	s.NewAppKey = &v
	return s
}

func (s *ResetAppSecretRequest) SetNewAppSecret(v string) *ResetAppSecretRequest {
	s.NewAppSecret = &v
	return s
}

func (s *ResetAppSecretRequest) SetSecurityToken(v string) *ResetAppSecretRequest {
	s.SecurityToken = &v
	return s
}

type ResetAppSecretResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ015
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetAppSecretResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetAppSecretResponseBody) GoString() string {
	return s.String()
}

func (s *ResetAppSecretResponseBody) SetRequestId(v string) *ResetAppSecretResponseBody {
	s.RequestId = &v
	return s
}

type ResetAppSecretResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetAppSecretResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetAppSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetAppSecretResponse) GoString() string {
	return s.String()
}

func (s *ResetAppSecretResponse) SetHeaders(v map[string]*string) *ResetAppSecretResponse {
	s.Headers = v
	return s
}

func (s *ResetAppSecretResponse) SetStatusCode(v int32) *ResetAppSecretResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetAppSecretResponse) SetBody(v *ResetAppSecretResponseBody) *ResetAppSecretResponse {
	s.Body = v
	return s
}

type SdkGenerateByAppRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 110797019
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// java
	Language      *string `json:"Language,omitempty" xml:"Language,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s SdkGenerateByAppRequest) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByAppRequest) GoString() string {
	return s.String()
}

func (s *SdkGenerateByAppRequest) SetAppId(v int64) *SdkGenerateByAppRequest {
	s.AppId = &v
	return s
}

func (s *SdkGenerateByAppRequest) SetLanguage(v string) *SdkGenerateByAppRequest {
	s.Language = &v
	return s
}

func (s *SdkGenerateByAppRequest) SetSecurityToken(v string) *SdkGenerateByAppRequest {
	s.SecurityToken = &v
	return s
}

type SdkGenerateByAppResponseBody struct {
	// example:
	//
	// UEsDBBQACAAIADdwnFQAAAAAAAAAAAAAAAA2AAAAQ0FTREtfSkFWQV8xMjI3NDY2NjY0MzM0MTMzXzE2NTExMjU3MD......
	DownloadLink *string `json:"DownloadLink,omitempty" xml:"DownloadLink,omitempty"`
	// example:
	//
	// 61A16D46-EC04-5288-8A18-811B0F536CC2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SdkGenerateByAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByAppResponseBody) GoString() string {
	return s.String()
}

func (s *SdkGenerateByAppResponseBody) SetDownloadLink(v string) *SdkGenerateByAppResponseBody {
	s.DownloadLink = &v
	return s
}

func (s *SdkGenerateByAppResponseBody) SetRequestId(v string) *SdkGenerateByAppResponseBody {
	s.RequestId = &v
	return s
}

type SdkGenerateByAppResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SdkGenerateByAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SdkGenerateByAppResponse) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByAppResponse) GoString() string {
	return s.String()
}

func (s *SdkGenerateByAppResponse) SetHeaders(v map[string]*string) *SdkGenerateByAppResponse {
	s.Headers = v
	return s
}

func (s *SdkGenerateByAppResponse) SetStatusCode(v int32) *SdkGenerateByAppResponse {
	s.StatusCode = &v
	return s
}

func (s *SdkGenerateByAppResponse) SetBody(v *SdkGenerateByAppResponseBody) *SdkGenerateByAppResponse {
	s.Body = v
	return s
}

type SdkGenerateByAppForRegionRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 110906109
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// java
	Language      *string `json:"Language,omitempty" xml:"Language,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s SdkGenerateByAppForRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByAppForRegionRequest) GoString() string {
	return s.String()
}

func (s *SdkGenerateByAppForRegionRequest) SetAppId(v int64) *SdkGenerateByAppForRegionRequest {
	s.AppId = &v
	return s
}

func (s *SdkGenerateByAppForRegionRequest) SetLanguage(v string) *SdkGenerateByAppForRegionRequest {
	s.Language = &v
	return s
}

func (s *SdkGenerateByAppForRegionRequest) SetSecurityToken(v string) *SdkGenerateByAppForRegionRequest {
	s.SecurityToken = &v
	return s
}

type SdkGenerateByAppForRegionResponseBody struct {
	// example:
	//
	// UEsDBBQACAAIADdwnFQAAAAAAAAAAAAAAAA2AAAAQ0FTREtfSkFWQV8xMjI3NDY2NjY0MzM0MTMzXzE2NTExMjU3MD......
	DownloadLink *string `json:"DownloadLink,omitempty" xml:"DownloadLink,omitempty"`
	// example:
	//
	// CE5722A6-AE78-4741-A9B0-6C817D360510
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SdkGenerateByAppForRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByAppForRegionResponseBody) GoString() string {
	return s.String()
}

func (s *SdkGenerateByAppForRegionResponseBody) SetDownloadLink(v string) *SdkGenerateByAppForRegionResponseBody {
	s.DownloadLink = &v
	return s
}

func (s *SdkGenerateByAppForRegionResponseBody) SetRequestId(v string) *SdkGenerateByAppForRegionResponseBody {
	s.RequestId = &v
	return s
}

type SdkGenerateByAppForRegionResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SdkGenerateByAppForRegionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SdkGenerateByAppForRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByAppForRegionResponse) GoString() string {
	return s.String()
}

func (s *SdkGenerateByAppForRegionResponse) SetHeaders(v map[string]*string) *SdkGenerateByAppForRegionResponse {
	s.Headers = v
	return s
}

func (s *SdkGenerateByAppForRegionResponse) SetStatusCode(v int32) *SdkGenerateByAppForRegionResponse {
	s.StatusCode = &v
	return s
}

func (s *SdkGenerateByAppForRegionResponse) SetBody(v *SdkGenerateByAppForRegionResponseBody) *SdkGenerateByAppForRegionResponse {
	s.Body = v
	return s
}

type SdkGenerateByGroupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1a991a450b9548a1a3df38fd3af117c2
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// java
	Language      *string `json:"Language,omitempty" xml:"Language,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s SdkGenerateByGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByGroupRequest) GoString() string {
	return s.String()
}

func (s *SdkGenerateByGroupRequest) SetGroupId(v string) *SdkGenerateByGroupRequest {
	s.GroupId = &v
	return s
}

func (s *SdkGenerateByGroupRequest) SetLanguage(v string) *SdkGenerateByGroupRequest {
	s.Language = &v
	return s
}

func (s *SdkGenerateByGroupRequest) SetSecurityToken(v string) *SdkGenerateByGroupRequest {
	s.SecurityToken = &v
	return s
}

type SdkGenerateByGroupResponseBody struct {
	// example:
	//
	// http://oss-bucket/object
	DownloadLink *string `json:"DownloadLink,omitempty" xml:"DownloadLink,omitempty"`
	// example:
	//
	// D0075BDA-8AED-5073-A70A-FE44E86AB20F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SdkGenerateByGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByGroupResponseBody) GoString() string {
	return s.String()
}

func (s *SdkGenerateByGroupResponseBody) SetDownloadLink(v string) *SdkGenerateByGroupResponseBody {
	s.DownloadLink = &v
	return s
}

func (s *SdkGenerateByGroupResponseBody) SetRequestId(v string) *SdkGenerateByGroupResponseBody {
	s.RequestId = &v
	return s
}

type SdkGenerateByGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SdkGenerateByGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SdkGenerateByGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByGroupResponse) GoString() string {
	return s.String()
}

func (s *SdkGenerateByGroupResponse) SetHeaders(v map[string]*string) *SdkGenerateByGroupResponse {
	s.Headers = v
	return s
}

func (s *SdkGenerateByGroupResponse) SetStatusCode(v int32) *SdkGenerateByGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *SdkGenerateByGroupResponse) SetBody(v *SdkGenerateByGroupResponseBody) *SdkGenerateByGroupResponse {
	s.Body = v
	return s
}

type SetAccessControlListAttributeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// acl-bp1ohqkonqybecf4llbrc
	AclId *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// testAcl
	AclName       *string `json:"AclName,omitempty" xml:"AclName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s SetAccessControlListAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetAccessControlListAttributeRequest) GoString() string {
	return s.String()
}

func (s *SetAccessControlListAttributeRequest) SetAclId(v string) *SetAccessControlListAttributeRequest {
	s.AclId = &v
	return s
}

func (s *SetAccessControlListAttributeRequest) SetAclName(v string) *SetAccessControlListAttributeRequest {
	s.AclName = &v
	return s
}

func (s *SetAccessControlListAttributeRequest) SetSecurityToken(v string) *SetAccessControlListAttributeRequest {
	s.SecurityToken = &v
	return s
}

type SetAccessControlListAttributeResponseBody struct {
	// example:
	//
	// CEB6EC62-B6C7-5082-A45A-45A204724AC2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetAccessControlListAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetAccessControlListAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *SetAccessControlListAttributeResponseBody) SetRequestId(v string) *SetAccessControlListAttributeResponseBody {
	s.RequestId = &v
	return s
}

type SetAccessControlListAttributeResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetAccessControlListAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetAccessControlListAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetAccessControlListAttributeResponse) GoString() string {
	return s.String()
}

func (s *SetAccessControlListAttributeResponse) SetHeaders(v map[string]*string) *SetAccessControlListAttributeResponse {
	s.Headers = v
	return s
}

func (s *SetAccessControlListAttributeResponse) SetStatusCode(v int32) *SetAccessControlListAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *SetAccessControlListAttributeResponse) SetBody(v *SetAccessControlListAttributeResponseBody) *SetAccessControlListAttributeResponse {
	s.Body = v
	return s
}

type SetApiProductsAuthoritiesRequest struct {
	// This parameter is required.
	ApiProductIds []*string `json:"ApiProductIds,omitempty" xml:"ApiProductIds,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 111385984
	AppId         *int64  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AuthValidTime *string `json:"AuthValidTime,omitempty" xml:"AuthValidTime,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s SetApiProductsAuthoritiesRequest) String() string {
	return tea.Prettify(s)
}

func (s SetApiProductsAuthoritiesRequest) GoString() string {
	return s.String()
}

func (s *SetApiProductsAuthoritiesRequest) SetApiProductIds(v []*string) *SetApiProductsAuthoritiesRequest {
	s.ApiProductIds = v
	return s
}

func (s *SetApiProductsAuthoritiesRequest) SetAppId(v int64) *SetApiProductsAuthoritiesRequest {
	s.AppId = &v
	return s
}

func (s *SetApiProductsAuthoritiesRequest) SetAuthValidTime(v string) *SetApiProductsAuthoritiesRequest {
	s.AuthValidTime = &v
	return s
}

func (s *SetApiProductsAuthoritiesRequest) SetDescription(v string) *SetApiProductsAuthoritiesRequest {
	s.Description = &v
	return s
}

func (s *SetApiProductsAuthoritiesRequest) SetSecurityToken(v string) *SetApiProductsAuthoritiesRequest {
	s.SecurityToken = &v
	return s
}

type SetApiProductsAuthoritiesShrinkRequest struct {
	// This parameter is required.
	ApiProductIdsShrink *string `json:"ApiProductIds,omitempty" xml:"ApiProductIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 111385984
	AppId         *int64  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AuthValidTime *string `json:"AuthValidTime,omitempty" xml:"AuthValidTime,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s SetApiProductsAuthoritiesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SetApiProductsAuthoritiesShrinkRequest) GoString() string {
	return s.String()
}

func (s *SetApiProductsAuthoritiesShrinkRequest) SetApiProductIdsShrink(v string) *SetApiProductsAuthoritiesShrinkRequest {
	s.ApiProductIdsShrink = &v
	return s
}

func (s *SetApiProductsAuthoritiesShrinkRequest) SetAppId(v int64) *SetApiProductsAuthoritiesShrinkRequest {
	s.AppId = &v
	return s
}

func (s *SetApiProductsAuthoritiesShrinkRequest) SetAuthValidTime(v string) *SetApiProductsAuthoritiesShrinkRequest {
	s.AuthValidTime = &v
	return s
}

func (s *SetApiProductsAuthoritiesShrinkRequest) SetDescription(v string) *SetApiProductsAuthoritiesShrinkRequest {
	s.Description = &v
	return s
}

func (s *SetApiProductsAuthoritiesShrinkRequest) SetSecurityToken(v string) *SetApiProductsAuthoritiesShrinkRequest {
	s.SecurityToken = &v
	return s
}

type SetApiProductsAuthoritiesResponseBody struct {
	// example:
	//
	// 2603F41E-77FC-59A3-840E-296578A9BDE0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetApiProductsAuthoritiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetApiProductsAuthoritiesResponseBody) GoString() string {
	return s.String()
}

func (s *SetApiProductsAuthoritiesResponseBody) SetRequestId(v string) *SetApiProductsAuthoritiesResponseBody {
	s.RequestId = &v
	return s
}

type SetApiProductsAuthoritiesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetApiProductsAuthoritiesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetApiProductsAuthoritiesResponse) String() string {
	return tea.Prettify(s)
}

func (s SetApiProductsAuthoritiesResponse) GoString() string {
	return s.String()
}

func (s *SetApiProductsAuthoritiesResponse) SetHeaders(v map[string]*string) *SetApiProductsAuthoritiesResponse {
	s.Headers = v
	return s
}

func (s *SetApiProductsAuthoritiesResponse) SetStatusCode(v int32) *SetApiProductsAuthoritiesResponse {
	s.StatusCode = &v
	return s
}

func (s *SetApiProductsAuthoritiesResponse) SetBody(v *SetApiProductsAuthoritiesResponseBody) *SetApiProductsAuthoritiesResponse {
	s.Body = v
	return s
}

type SetApisAuthoritiesRequest struct {
	// The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	//
	// example:
	//
	// baacc592e63a4cb6a41920d9d3f91f38,jkscc489e63a4cb6a41920d9d3f92d78
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The ID of the app. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2386789
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The time (UTC) when the authorization expires. If this parameter is empty, the authorization does not expire.
	//
	// example:
	//
	// Fri,05Oct201816:00:00GMT
	AuthValidTime *string `json:"AuthValidTime,omitempty" xml:"AuthValidTime,omitempty"`
	// The description of the authorization.
	//
	// example:
	//
	// Queries weather based on the region name
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// example:
	//
	// 523e8dc7bbe04613b5b1d726c2a7889d
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s SetApisAuthoritiesRequest) String() string {
	return tea.Prettify(s)
}

func (s SetApisAuthoritiesRequest) GoString() string {
	return s.String()
}

func (s *SetApisAuthoritiesRequest) SetApiIds(v string) *SetApisAuthoritiesRequest {
	s.ApiIds = &v
	return s
}

func (s *SetApisAuthoritiesRequest) SetAppId(v int64) *SetApisAuthoritiesRequest {
	s.AppId = &v
	return s
}

func (s *SetApisAuthoritiesRequest) SetAuthValidTime(v string) *SetApisAuthoritiesRequest {
	s.AuthValidTime = &v
	return s
}

func (s *SetApisAuthoritiesRequest) SetDescription(v string) *SetApisAuthoritiesRequest {
	s.Description = &v
	return s
}

func (s *SetApisAuthoritiesRequest) SetGroupId(v string) *SetApisAuthoritiesRequest {
	s.GroupId = &v
	return s
}

func (s *SetApisAuthoritiesRequest) SetSecurityToken(v string) *SetApisAuthoritiesRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetApisAuthoritiesRequest) SetStageName(v string) *SetApisAuthoritiesRequest {
	s.StageName = &v
	return s
}

type SetApisAuthoritiesResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// D6E46F10-F26C-4AA0-BB69-FE2743D9AE62
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetApisAuthoritiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetApisAuthoritiesResponseBody) GoString() string {
	return s.String()
}

func (s *SetApisAuthoritiesResponseBody) SetRequestId(v string) *SetApisAuthoritiesResponseBody {
	s.RequestId = &v
	return s
}

type SetApisAuthoritiesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetApisAuthoritiesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetApisAuthoritiesResponse) String() string {
	return tea.Prettify(s)
}

func (s SetApisAuthoritiesResponse) GoString() string {
	return s.String()
}

func (s *SetApisAuthoritiesResponse) SetHeaders(v map[string]*string) *SetApisAuthoritiesResponse {
	s.Headers = v
	return s
}

func (s *SetApisAuthoritiesResponse) SetStatusCode(v int32) *SetApisAuthoritiesResponse {
	s.StatusCode = &v
	return s
}

func (s *SetApisAuthoritiesResponse) SetBody(v *SetApisAuthoritiesResponseBody) *SetApisAuthoritiesResponse {
	s.Body = v
	return s
}

type SetAppsAuthToApiProductRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 117b7a64a8b3f064eaa4a47ac62aac5e
	ApiProductId *string `json:"ApiProductId,omitempty" xml:"ApiProductId,omitempty"`
	// This parameter is required.
	AppIds []*int64 `json:"AppIds,omitempty" xml:"AppIds,omitempty" type:"Repeated"`
	// example:
	//
	// 2023-05-31T08:15:39Z
	AuthValidTime *string `json:"AuthValidTime,omitempty" xml:"AuthValidTime,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s SetAppsAuthToApiProductRequest) String() string {
	return tea.Prettify(s)
}

func (s SetAppsAuthToApiProductRequest) GoString() string {
	return s.String()
}

func (s *SetAppsAuthToApiProductRequest) SetApiProductId(v string) *SetAppsAuthToApiProductRequest {
	s.ApiProductId = &v
	return s
}

func (s *SetAppsAuthToApiProductRequest) SetAppIds(v []*int64) *SetAppsAuthToApiProductRequest {
	s.AppIds = v
	return s
}

func (s *SetAppsAuthToApiProductRequest) SetAuthValidTime(v string) *SetAppsAuthToApiProductRequest {
	s.AuthValidTime = &v
	return s
}

func (s *SetAppsAuthToApiProductRequest) SetDescription(v string) *SetAppsAuthToApiProductRequest {
	s.Description = &v
	return s
}

func (s *SetAppsAuthToApiProductRequest) SetSecurityToken(v string) *SetAppsAuthToApiProductRequest {
	s.SecurityToken = &v
	return s
}

type SetAppsAuthToApiProductResponseBody struct {
	// example:
	//
	// EF924FE4-2EDD-4CD3-89EC-34E4708574E7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetAppsAuthToApiProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetAppsAuthToApiProductResponseBody) GoString() string {
	return s.String()
}

func (s *SetAppsAuthToApiProductResponseBody) SetRequestId(v string) *SetAppsAuthToApiProductResponseBody {
	s.RequestId = &v
	return s
}

type SetAppsAuthToApiProductResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetAppsAuthToApiProductResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetAppsAuthToApiProductResponse) String() string {
	return tea.Prettify(s)
}

func (s SetAppsAuthToApiProductResponse) GoString() string {
	return s.String()
}

func (s *SetAppsAuthToApiProductResponse) SetHeaders(v map[string]*string) *SetAppsAuthToApiProductResponse {
	s.Headers = v
	return s
}

func (s *SetAppsAuthToApiProductResponse) SetStatusCode(v int32) *SetAppsAuthToApiProductResponse {
	s.StatusCode = &v
	return s
}

func (s *SetAppsAuthToApiProductResponse) SetBody(v *SetAppsAuthToApiProductResponseBody) *SetAppsAuthToApiProductResponse {
	s.Body = v
	return s
}

type SetAppsAuthoritiesRequest struct {
	// The ID of the API. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// baacc592e63a4cb6a41920d9d3f91f38
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2386789,3389798
	AppIds *string `json:"AppIds,omitempty" xml:"AppIds,omitempty"`
	// The time (UTC) when the authorization expires. If this parameter is empty, the authorization does not expire.
	//
	// example:
	//
	// Fri,05Oct201816:00:00GMT
	AuthValidTime *string `json:"AuthValidTime,omitempty" xml:"AuthValidTime,omitempty"`
	// The description of the authorization.
	//
	// example:
	//
	// Queries weather based on the region name
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// example:
	//
	// 523e8dc7bbe04613b5b1d726c2a7889d
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s SetAppsAuthoritiesRequest) String() string {
	return tea.Prettify(s)
}

func (s SetAppsAuthoritiesRequest) GoString() string {
	return s.String()
}

func (s *SetAppsAuthoritiesRequest) SetApiId(v string) *SetAppsAuthoritiesRequest {
	s.ApiId = &v
	return s
}

func (s *SetAppsAuthoritiesRequest) SetAppIds(v string) *SetAppsAuthoritiesRequest {
	s.AppIds = &v
	return s
}

func (s *SetAppsAuthoritiesRequest) SetAuthValidTime(v string) *SetAppsAuthoritiesRequest {
	s.AuthValidTime = &v
	return s
}

func (s *SetAppsAuthoritiesRequest) SetDescription(v string) *SetAppsAuthoritiesRequest {
	s.Description = &v
	return s
}

func (s *SetAppsAuthoritiesRequest) SetGroupId(v string) *SetAppsAuthoritiesRequest {
	s.GroupId = &v
	return s
}

func (s *SetAppsAuthoritiesRequest) SetSecurityToken(v string) *SetAppsAuthoritiesRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetAppsAuthoritiesRequest) SetStageName(v string) *SetAppsAuthoritiesRequest {
	s.StageName = &v
	return s
}

type SetAppsAuthoritiesResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// D6E46F10-F26C-4AA0-BB69-FE2743D9AE62
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetAppsAuthoritiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetAppsAuthoritiesResponseBody) GoString() string {
	return s.String()
}

func (s *SetAppsAuthoritiesResponseBody) SetRequestId(v string) *SetAppsAuthoritiesResponseBody {
	s.RequestId = &v
	return s
}

type SetAppsAuthoritiesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetAppsAuthoritiesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetAppsAuthoritiesResponse) String() string {
	return tea.Prettify(s)
}

func (s SetAppsAuthoritiesResponse) GoString() string {
	return s.String()
}

func (s *SetAppsAuthoritiesResponse) SetHeaders(v map[string]*string) *SetAppsAuthoritiesResponse {
	s.Headers = v
	return s
}

func (s *SetAppsAuthoritiesResponse) SetStatusCode(v int32) *SetAppsAuthoritiesResponse {
	s.StatusCode = &v
	return s
}

func (s *SetAppsAuthoritiesResponse) SetBody(v *SetAppsAuthoritiesResponseBody) *SetAppsAuthoritiesResponse {
	s.Body = v
	return s
}

type SetDomainRequest struct {
	// The environment which you can access by using the domain name. If you do not specify this parameter, the domain name can be used to access all environments.
	//
	// If you specify an environment, the domain name can be used to access only the specified environment. Valid values:
	//
	// 	- TEST
	//
	// 	- PRE
	//
	// 	- RELEASE
	//
	// If you want to use the domain name to access all environments, set this parameter to an empty string ("").
	//
	// example:
	//
	// RELEASE
	BindStageName *string `json:"BindStageName,omitempty" xml:"BindStageName,omitempty"`
	// The network type of the domain name to be bound. Default value: INTERNET. Valid values:
	//
	// 	- INTERNET
	//
	// 	- INTRANET. If you set this parameter to this value, the domain name cannot be used on the Internet.
	//
	// example:
	//
	// INTERNET
	CustomDomainType *string `json:"CustomDomainType,omitempty" xml:"CustomDomainType,omitempty"`
	// The custom domain name.
	//
	// This parameter is required.
	//
	// example:
	//
	// api.demo.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 927d50c0f2e54b359919923d908bb015
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// Specifies whether this binding relationship takes precedence over the binding relationships between the domain name and other API groups. If you set this parameter to true, this binding relationship takes precedence, and the domain name is automatically unbound from other API groups. This operation brings risks. Proceed with caution.
	//
	// example:
	//
	// false
	IsForce *bool `json:"IsForce,omitempty" xml:"IsForce,omitempty"`
	// Specifies whether to redirect HTTP requests to HTTPS requests.
	//
	// example:
	//
	// false
	IsHttpRedirectToHttps *bool `json:"IsHttpRedirectToHttps,omitempty" xml:"IsHttpRedirectToHttps,omitempty"`
}

func (s SetDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDomainRequest) GoString() string {
	return s.String()
}

func (s *SetDomainRequest) SetBindStageName(v string) *SetDomainRequest {
	s.BindStageName = &v
	return s
}

func (s *SetDomainRequest) SetCustomDomainType(v string) *SetDomainRequest {
	s.CustomDomainType = &v
	return s
}

func (s *SetDomainRequest) SetDomainName(v string) *SetDomainRequest {
	s.DomainName = &v
	return s
}

func (s *SetDomainRequest) SetGroupId(v string) *SetDomainRequest {
	s.GroupId = &v
	return s
}

func (s *SetDomainRequest) SetIsForce(v bool) *SetDomainRequest {
	s.IsForce = &v
	return s
}

func (s *SetDomainRequest) SetIsHttpRedirectToHttps(v bool) *SetDomainRequest {
	s.IsHttpRedirectToHttps = &v
	return s
}

type SetDomainResponseBody struct {
	// The binding status of the custom domain name. Valid values:
	//
	// 	- **BINDING**: The domain name has been bound.
	//
	// 	- **BOUND**: The domain name has not been bound.
	//
	// example:
	//
	// BINDING
	DomainBindingStatus *string `json:"DomainBindingStatus,omitempty" xml:"DomainBindingStatus,omitempty"`
	// The validity status of the domain name. Valid values:
	//
	// 	- **NORMAL**: The domain name is valid.
	//
	// 	- **ABNORMAL**: The domain name is invalid. This status affects API calls and must be resolved as soon as possible.
	//
	// example:
	//
	// NORMAL
	DomainLegalStatus *string `json:"DomainLegalStatus,omitempty" xml:"DomainLegalStatus,omitempty"`
	// The custom domain name.
	//
	// example:
	//
	// api.demo.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The remarks on the domain name, such as the cause of an exception.
	//
	// example:
	//
	// None
	DomainRemark *string `json:"DomainRemark,omitempty" xml:"DomainRemark,omitempty"`
	// The status of the domain name that uses the WebSocket feature.
	//
	// example:
	//
	// NORMAL
	DomainWebSocketStatus *string `json:"DomainWebSocketStatus,omitempty" xml:"DomainWebSocketStatus,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// example:
	//
	// 927d50c0f2e54b359919923d908bb015
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 0AA90E87-3506-5AA6-AFFB-A4D53B4F6231
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The second-level domain name assigned to the API group. This domain name is used to test API calls.
	//
	// example:
	//
	// xxx-cn-hangzhou.alicloudapi.com
	SubDomain *string `json:"SubDomain,omitempty" xml:"SubDomain,omitempty"`
}

func (s SetDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDomainResponseBody) GoString() string {
	return s.String()
}

func (s *SetDomainResponseBody) SetDomainBindingStatus(v string) *SetDomainResponseBody {
	s.DomainBindingStatus = &v
	return s
}

func (s *SetDomainResponseBody) SetDomainLegalStatus(v string) *SetDomainResponseBody {
	s.DomainLegalStatus = &v
	return s
}

func (s *SetDomainResponseBody) SetDomainName(v string) *SetDomainResponseBody {
	s.DomainName = &v
	return s
}

func (s *SetDomainResponseBody) SetDomainRemark(v string) *SetDomainResponseBody {
	s.DomainRemark = &v
	return s
}

func (s *SetDomainResponseBody) SetDomainWebSocketStatus(v string) *SetDomainResponseBody {
	s.DomainWebSocketStatus = &v
	return s
}

func (s *SetDomainResponseBody) SetGroupId(v string) *SetDomainResponseBody {
	s.GroupId = &v
	return s
}

func (s *SetDomainResponseBody) SetRequestId(v string) *SetDomainResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDomainResponseBody) SetSubDomain(v string) *SetDomainResponseBody {
	s.SubDomain = &v
	return s
}

type SetDomainResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetDomainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDomainResponse) GoString() string {
	return s.String()
}

func (s *SetDomainResponse) SetHeaders(v map[string]*string) *SetDomainResponse {
	s.Headers = v
	return s
}

func (s *SetDomainResponse) SetStatusCode(v int32) *SetDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDomainResponse) SetBody(v *SetDomainResponseBody) *SetDomainResponse {
	s.Body = v
	return s
}

type SetDomainCertificateRequest struct {
	// The content of the CA certificate.
	//
	// example:
	//
	// Content of the CA certificate
	CaCertificateBody *string `json:"CaCertificateBody,omitempty" xml:"CaCertificateBody,omitempty"`
	// The certificate content.
	//
	// example:
	//
	// For more information, see the following request examples
	CertificateBody *string `json:"CertificateBody,omitempty" xml:"CertificateBody,omitempty"`
	// The name of the SSL certificate.
	//
	// This parameter is required.
	//
	// example:
	//
	// test_cert
	CertificateName *string `json:"CertificateName,omitempty" xml:"CertificateName,omitempty"`
	// The private key of the SSL certificate.
	//
	// example:
	//
	// For more information, see the following request examples
	CertificatePrivateKey *string `json:"CertificatePrivateKey,omitempty" xml:"CertificatePrivateKey,omitempty"`
	// The custom domain name.
	//
	// This parameter is required.
	//
	// example:
	//
	// api.demo.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The ID of the API group to which the domain name is bound. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 927d50c0f2e54b359919923d908bb015
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The certificate verification depth.
	//
	// example:
	//
	// 2
	SslVerifyDepth *string `json:"SslVerifyDepth,omitempty" xml:"SslVerifyDepth,omitempty"`
}

func (s SetDomainCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDomainCertificateRequest) GoString() string {
	return s.String()
}

func (s *SetDomainCertificateRequest) SetCaCertificateBody(v string) *SetDomainCertificateRequest {
	s.CaCertificateBody = &v
	return s
}

func (s *SetDomainCertificateRequest) SetCertificateBody(v string) *SetDomainCertificateRequest {
	s.CertificateBody = &v
	return s
}

func (s *SetDomainCertificateRequest) SetCertificateName(v string) *SetDomainCertificateRequest {
	s.CertificateName = &v
	return s
}

func (s *SetDomainCertificateRequest) SetCertificatePrivateKey(v string) *SetDomainCertificateRequest {
	s.CertificatePrivateKey = &v
	return s
}

func (s *SetDomainCertificateRequest) SetDomainName(v string) *SetDomainCertificateRequest {
	s.DomainName = &v
	return s
}

func (s *SetDomainCertificateRequest) SetGroupId(v string) *SetDomainCertificateRequest {
	s.GroupId = &v
	return s
}

func (s *SetDomainCertificateRequest) SetSecurityToken(v string) *SetDomainCertificateRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetDomainCertificateRequest) SetSslVerifyDepth(v string) *SetDomainCertificateRequest {
	s.SslVerifyDepth = &v
	return s
}

type SetDomainCertificateResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 6EF60BEC-0242-43AF-BB20-270359FB54A7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetDomainCertificateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDomainCertificateResponseBody) GoString() string {
	return s.String()
}

func (s *SetDomainCertificateResponseBody) SetRequestId(v string) *SetDomainCertificateResponseBody {
	s.RequestId = &v
	return s
}

type SetDomainCertificateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetDomainCertificateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetDomainCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDomainCertificateResponse) GoString() string {
	return s.String()
}

func (s *SetDomainCertificateResponse) SetHeaders(v map[string]*string) *SetDomainCertificateResponse {
	s.Headers = v
	return s
}

func (s *SetDomainCertificateResponse) SetStatusCode(v int32) *SetDomainCertificateResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDomainCertificateResponse) SetBody(v *SetDomainCertificateResponseBody) *SetDomainCertificateResponse {
	s.Body = v
	return s
}

type SetDomainWebSocketStatusRequest struct {
	// The action.
	//
	// This parameter is required.
	//
	// example:
	//
	// OPEN
	ActionValue *string `json:"ActionValue,omitempty" xml:"ActionValue,omitempty"`
	// The custom domain name.
	//
	// This parameter is required.
	//
	// example:
	//
	// ac.fluvet.cn
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// cf976e63b70c4993807e7bb9345d4695
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	WSSEnable     *string `json:"WSSEnable,omitempty" xml:"WSSEnable,omitempty"`
}

func (s SetDomainWebSocketStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDomainWebSocketStatusRequest) GoString() string {
	return s.String()
}

func (s *SetDomainWebSocketStatusRequest) SetActionValue(v string) *SetDomainWebSocketStatusRequest {
	s.ActionValue = &v
	return s
}

func (s *SetDomainWebSocketStatusRequest) SetDomainName(v string) *SetDomainWebSocketStatusRequest {
	s.DomainName = &v
	return s
}

func (s *SetDomainWebSocketStatusRequest) SetGroupId(v string) *SetDomainWebSocketStatusRequest {
	s.GroupId = &v
	return s
}

func (s *SetDomainWebSocketStatusRequest) SetSecurityToken(v string) *SetDomainWebSocketStatusRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetDomainWebSocketStatusRequest) SetWSSEnable(v string) *SetDomainWebSocketStatusRequest {
	s.WSSEnable = &v
	return s
}

type SetDomainWebSocketStatusResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 61A16D46-EC04-5288-8A18-811B0F536CC2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetDomainWebSocketStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDomainWebSocketStatusResponseBody) GoString() string {
	return s.String()
}

func (s *SetDomainWebSocketStatusResponseBody) SetRequestId(v string) *SetDomainWebSocketStatusResponseBody {
	s.RequestId = &v
	return s
}

type SetDomainWebSocketStatusResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetDomainWebSocketStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetDomainWebSocketStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDomainWebSocketStatusResponse) GoString() string {
	return s.String()
}

func (s *SetDomainWebSocketStatusResponse) SetHeaders(v map[string]*string) *SetDomainWebSocketStatusResponse {
	s.Headers = v
	return s
}

func (s *SetDomainWebSocketStatusResponse) SetStatusCode(v int32) *SetDomainWebSocketStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDomainWebSocketStatusResponse) SetBody(v *SetDomainWebSocketStatusResponseBody) *SetDomainWebSocketStatusResponse {
	s.Body = v
	return s
}

type SetGroupAuthAppCodeRequest struct {
	// This parameter is required.
	AuthAppCode *string `json:"AuthAppCode,omitempty" xml:"AuthAppCode,omitempty"`
	// This parameter is required.
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s SetGroupAuthAppCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetGroupAuthAppCodeRequest) GoString() string {
	return s.String()
}

func (s *SetGroupAuthAppCodeRequest) SetAuthAppCode(v string) *SetGroupAuthAppCodeRequest {
	s.AuthAppCode = &v
	return s
}

func (s *SetGroupAuthAppCodeRequest) SetGroupId(v string) *SetGroupAuthAppCodeRequest {
	s.GroupId = &v
	return s
}

func (s *SetGroupAuthAppCodeRequest) SetSecurityToken(v string) *SetGroupAuthAppCodeRequest {
	s.SecurityToken = &v
	return s
}

type SetGroupAuthAppCodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetGroupAuthAppCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetGroupAuthAppCodeResponseBody) GoString() string {
	return s.String()
}

func (s *SetGroupAuthAppCodeResponseBody) SetRequestId(v string) *SetGroupAuthAppCodeResponseBody {
	s.RequestId = &v
	return s
}

type SetGroupAuthAppCodeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetGroupAuthAppCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetGroupAuthAppCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetGroupAuthAppCodeResponse) GoString() string {
	return s.String()
}

func (s *SetGroupAuthAppCodeResponse) SetHeaders(v map[string]*string) *SetGroupAuthAppCodeResponse {
	s.Headers = v
	return s
}

func (s *SetGroupAuthAppCodeResponse) SetStatusCode(v int32) *SetGroupAuthAppCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *SetGroupAuthAppCodeResponse) SetBody(v *SetGroupAuthAppCodeResponseBody) *SetGroupAuthAppCodeResponse {
	s.Body = v
	return s
}

type SetIpControlApisRequest struct {
	// The API IDs. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3b81fd160f5645e097cc8855d75a1cf6,46fbb52840d146f186e38e8e70fc8c12
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The ID of the API group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the ACL.
	//
	// This parameter is required.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	IpControlId   *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **PRE**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s SetIpControlApisRequest) String() string {
	return tea.Prettify(s)
}

func (s SetIpControlApisRequest) GoString() string {
	return s.String()
}

func (s *SetIpControlApisRequest) SetApiIds(v string) *SetIpControlApisRequest {
	s.ApiIds = &v
	return s
}

func (s *SetIpControlApisRequest) SetGroupId(v string) *SetIpControlApisRequest {
	s.GroupId = &v
	return s
}

func (s *SetIpControlApisRequest) SetIpControlId(v string) *SetIpControlApisRequest {
	s.IpControlId = &v
	return s
}

func (s *SetIpControlApisRequest) SetSecurityToken(v string) *SetIpControlApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetIpControlApisRequest) SetStageName(v string) *SetIpControlApisRequest {
	s.StageName = &v
	return s
}

type SetIpControlApisResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetIpControlApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetIpControlApisResponseBody) GoString() string {
	return s.String()
}

func (s *SetIpControlApisResponseBody) SetRequestId(v string) *SetIpControlApisResponseBody {
	s.RequestId = &v
	return s
}

type SetIpControlApisResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetIpControlApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetIpControlApisResponse) String() string {
	return tea.Prettify(s)
}

func (s SetIpControlApisResponse) GoString() string {
	return s.String()
}

func (s *SetIpControlApisResponse) SetHeaders(v map[string]*string) *SetIpControlApisResponse {
	s.Headers = v
	return s
}

func (s *SetIpControlApisResponse) SetStatusCode(v int32) *SetIpControlApisResponse {
	s.StatusCode = &v
	return s
}

func (s *SetIpControlApisResponse) SetBody(v *SetIpControlApisResponseBody) *SetIpControlApisResponse {
	s.Body = v
	return s
}

type SetSignatureApisRequest struct {
	// The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3b81fd160f5645e097cc8855d75a1cf6,46fbb52840d146f186e38e8e70fc8c12
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The ID of the API group to which the API that you want to manage belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the signature key.
	//
	// This parameter is required.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **PRE**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// TEST
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s SetSignatureApisRequest) String() string {
	return tea.Prettify(s)
}

func (s SetSignatureApisRequest) GoString() string {
	return s.String()
}

func (s *SetSignatureApisRequest) SetApiIds(v string) *SetSignatureApisRequest {
	s.ApiIds = &v
	return s
}

func (s *SetSignatureApisRequest) SetGroupId(v string) *SetSignatureApisRequest {
	s.GroupId = &v
	return s
}

func (s *SetSignatureApisRequest) SetSecurityToken(v string) *SetSignatureApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetSignatureApisRequest) SetSignatureId(v string) *SetSignatureApisRequest {
	s.SignatureId = &v
	return s
}

func (s *SetSignatureApisRequest) SetStageName(v string) *SetSignatureApisRequest {
	s.StageName = &v
	return s
}

type SetSignatureApisResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetSignatureApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetSignatureApisResponseBody) GoString() string {
	return s.String()
}

func (s *SetSignatureApisResponseBody) SetRequestId(v string) *SetSignatureApisResponseBody {
	s.RequestId = &v
	return s
}

type SetSignatureApisResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetSignatureApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetSignatureApisResponse) String() string {
	return tea.Prettify(s)
}

func (s SetSignatureApisResponse) GoString() string {
	return s.String()
}

func (s *SetSignatureApisResponse) SetHeaders(v map[string]*string) *SetSignatureApisResponse {
	s.Headers = v
	return s
}

func (s *SetSignatureApisResponse) SetStatusCode(v int32) *SetSignatureApisResponse {
	s.StatusCode = &v
	return s
}

func (s *SetSignatureApisResponse) SetBody(v *SetSignatureApisResponseBody) *SetSignatureApisResponse {
	s.Body = v
	return s
}

type SetTrafficControlApisRequest struct {
	// The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3b81fd160f5645e097cc8855d75a1cf6,46fbb52840d146f186e38e8e70fc8c12
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The ID of the API group containing the APIs to which you want to bind a specified throttling policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The security token included in the WebSocket request header. The system uses this token to authenticate the request.
	//
	// example:
	//
	// 556d15cb-0808-432d-ab07-33e6b961b703
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The ID of the throttling policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// dd05f1c54d6749eda95f9fa6d491449a
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
}

func (s SetTrafficControlApisRequest) String() string {
	return tea.Prettify(s)
}

func (s SetTrafficControlApisRequest) GoString() string {
	return s.String()
}

func (s *SetTrafficControlApisRequest) SetApiIds(v string) *SetTrafficControlApisRequest {
	s.ApiIds = &v
	return s
}

func (s *SetTrafficControlApisRequest) SetGroupId(v string) *SetTrafficControlApisRequest {
	s.GroupId = &v
	return s
}

func (s *SetTrafficControlApisRequest) SetSecurityToken(v string) *SetTrafficControlApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetTrafficControlApisRequest) SetStageName(v string) *SetTrafficControlApisRequest {
	s.StageName = &v
	return s
}

func (s *SetTrafficControlApisRequest) SetTrafficControlId(v string) *SetTrafficControlApisRequest {
	s.TrafficControlId = &v
	return s
}

type SetTrafficControlApisResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ004
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetTrafficControlApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetTrafficControlApisResponseBody) GoString() string {
	return s.String()
}

func (s *SetTrafficControlApisResponseBody) SetRequestId(v string) *SetTrafficControlApisResponseBody {
	s.RequestId = &v
	return s
}

type SetTrafficControlApisResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetTrafficControlApisResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetTrafficControlApisResponse) String() string {
	return tea.Prettify(s)
}

func (s SetTrafficControlApisResponse) GoString() string {
	return s.String()
}

func (s *SetTrafficControlApisResponse) SetHeaders(v map[string]*string) *SetTrafficControlApisResponse {
	s.Headers = v
	return s
}

func (s *SetTrafficControlApisResponse) SetStatusCode(v int32) *SetTrafficControlApisResponse {
	s.StatusCode = &v
	return s
}

func (s *SetTrafficControlApisResponse) SetBody(v *SetTrafficControlApisResponseBody) *SetTrafficControlApisResponse {
	s.Body = v
	return s
}

type SetVpcAccessRequest struct {
	// The description of the VPC.
	//
	// example:
	//
	// description of the VPC
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of an ECS or SLB instance in the VPC.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-uf6bzcg1pr4oh5jjmxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the authorization. The name must be unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The port number that corresponds to the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// 80
	Port          *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The tag of objects that match the rule. You can specify multiple tags.
	Tag []*SetVpcAccessRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// The ID of the VPC. The VPC must be an available one that belongs to the same account as the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// vpc-uf657qec7lx42paw3qxxx
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The host of the backend service.
	//
	// example:
	//
	// iot.hu***ng.com
	VpcTargetHostName *string `json:"VpcTargetHostName,omitempty" xml:"VpcTargetHostName,omitempty"`
}

func (s SetVpcAccessRequest) String() string {
	return tea.Prettify(s)
}

func (s SetVpcAccessRequest) GoString() string {
	return s.String()
}

func (s *SetVpcAccessRequest) SetDescription(v string) *SetVpcAccessRequest {
	s.Description = &v
	return s
}

func (s *SetVpcAccessRequest) SetInstanceId(v string) *SetVpcAccessRequest {
	s.InstanceId = &v
	return s
}

func (s *SetVpcAccessRequest) SetName(v string) *SetVpcAccessRequest {
	s.Name = &v
	return s
}

func (s *SetVpcAccessRequest) SetPort(v int32) *SetVpcAccessRequest {
	s.Port = &v
	return s
}

func (s *SetVpcAccessRequest) SetSecurityToken(v string) *SetVpcAccessRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetVpcAccessRequest) SetTag(v []*SetVpcAccessRequestTag) *SetVpcAccessRequest {
	s.Tag = v
	return s
}

func (s *SetVpcAccessRequest) SetVpcId(v string) *SetVpcAccessRequest {
	s.VpcId = &v
	return s
}

func (s *SetVpcAccessRequest) SetVpcTargetHostName(v string) *SetVpcAccessRequest {
	s.VpcTargetHostName = &v
	return s
}

type SetVpcAccessRequestTag struct {
	// The key of the tag.
	//
	// example:
	//
	// key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// 123
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SetVpcAccessRequestTag) String() string {
	return tea.Prettify(s)
}

func (s SetVpcAccessRequestTag) GoString() string {
	return s.String()
}

func (s *SetVpcAccessRequestTag) SetKey(v string) *SetVpcAccessRequestTag {
	s.Key = &v
	return s
}

func (s *SetVpcAccessRequestTag) SetValue(v string) *SetVpcAccessRequestTag {
	s.Value = &v
	return s
}

type SetVpcAccessResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ015
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the VPC access authorization.
	//
	// example:
	//
	// 4c68e061860f441ab72af7404137440e
	VpcAccessId *string `json:"VpcAccessId,omitempty" xml:"VpcAccessId,omitempty"`
}

func (s SetVpcAccessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetVpcAccessResponseBody) GoString() string {
	return s.String()
}

func (s *SetVpcAccessResponseBody) SetRequestId(v string) *SetVpcAccessResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetVpcAccessResponseBody) SetVpcAccessId(v string) *SetVpcAccessResponseBody {
	s.VpcAccessId = &v
	return s
}

type SetVpcAccessResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetVpcAccessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetVpcAccessResponse) String() string {
	return tea.Prettify(s)
}

func (s SetVpcAccessResponse) GoString() string {
	return s.String()
}

func (s *SetVpcAccessResponse) SetHeaders(v map[string]*string) *SetVpcAccessResponse {
	s.Headers = v
	return s
}

func (s *SetVpcAccessResponse) SetStatusCode(v int32) *SetVpcAccessResponse {
	s.StatusCode = &v
	return s
}

func (s *SetVpcAccessResponse) SetBody(v *SetVpcAccessResponseBody) *SetVpcAccessResponse {
	s.Body = v
	return s
}

type SetWildcardDomainPatternsRequest struct {
	// The custom domain name.
	//
	// This parameter is required.
	//
	// example:
	//
	// *.prd.e-eir.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0009db9c828549768a200320714b8930
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The wildcard domain name mode.
	//
	// example:
	//
	// [\\"{svc}.prd.e-eir.com\\"]
	WildcardDomainPatterns *string `json:"WildcardDomainPatterns,omitempty" xml:"WildcardDomainPatterns,omitempty"`
}

func (s SetWildcardDomainPatternsRequest) String() string {
	return tea.Prettify(s)
}

func (s SetWildcardDomainPatternsRequest) GoString() string {
	return s.String()
}

func (s *SetWildcardDomainPatternsRequest) SetDomainName(v string) *SetWildcardDomainPatternsRequest {
	s.DomainName = &v
	return s
}

func (s *SetWildcardDomainPatternsRequest) SetGroupId(v string) *SetWildcardDomainPatternsRequest {
	s.GroupId = &v
	return s
}

func (s *SetWildcardDomainPatternsRequest) SetSecurityToken(v string) *SetWildcardDomainPatternsRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetWildcardDomainPatternsRequest) SetWildcardDomainPatterns(v string) *SetWildcardDomainPatternsRequest {
	s.WildcardDomainPatterns = &v
	return s
}

type SetWildcardDomainPatternsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// D0075BDA-8AED-5073-A70A-FE44E86AB20F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetWildcardDomainPatternsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetWildcardDomainPatternsResponseBody) GoString() string {
	return s.String()
}

func (s *SetWildcardDomainPatternsResponseBody) SetRequestId(v string) *SetWildcardDomainPatternsResponseBody {
	s.RequestId = &v
	return s
}

type SetWildcardDomainPatternsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetWildcardDomainPatternsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetWildcardDomainPatternsResponse) String() string {
	return tea.Prettify(s)
}

func (s SetWildcardDomainPatternsResponse) GoString() string {
	return s.String()
}

func (s *SetWildcardDomainPatternsResponse) SetHeaders(v map[string]*string) *SetWildcardDomainPatternsResponse {
	s.Headers = v
	return s
}

func (s *SetWildcardDomainPatternsResponse) SetStatusCode(v int32) *SetWildcardDomainPatternsResponse {
	s.StatusCode = &v
	return s
}

func (s *SetWildcardDomainPatternsResponse) SetBody(v *SetWildcardDomainPatternsResponseBody) *SetWildcardDomainPatternsResponse {
	s.Body = v
	return s
}

type SwitchApiRequest struct {
	// The ID of the API.
	//
	// This parameter is required.
	//
	// example:
	//
	// d6f679aeb3be4b91b3688e887ca1fe16
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The description of the switch operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// for_demo
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group.
	//
	// example:
	//
	// 123
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The historical version that you want to switch to.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20160705104552292
	HistoryVersion *string `json:"HistoryVersion,omitempty" xml:"HistoryVersion,omitempty"`
	SecurityToken  *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// 	- **RELEASE**
	//
	// 	- **TEST**
	//
	// This parameter is required.
	//
	// example:
	//
	// RELEASE
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s SwitchApiRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchApiRequest) GoString() string {
	return s.String()
}

func (s *SwitchApiRequest) SetApiId(v string) *SwitchApiRequest {
	s.ApiId = &v
	return s
}

func (s *SwitchApiRequest) SetDescription(v string) *SwitchApiRequest {
	s.Description = &v
	return s
}

func (s *SwitchApiRequest) SetGroupId(v string) *SwitchApiRequest {
	s.GroupId = &v
	return s
}

func (s *SwitchApiRequest) SetHistoryVersion(v string) *SwitchApiRequest {
	s.HistoryVersion = &v
	return s
}

func (s *SwitchApiRequest) SetSecurityToken(v string) *SwitchApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *SwitchApiRequest) SetStageName(v string) *SwitchApiRequest {
	s.StageName = &v
	return s
}

type SwitchApiResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BZ001
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SwitchApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchApiResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchApiResponseBody) SetRequestId(v string) *SwitchApiResponseBody {
	s.RequestId = &v
	return s
}

type SwitchApiResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SwitchApiResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SwitchApiResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchApiResponse) GoString() string {
	return s.String()
}

func (s *SwitchApiResponse) SetHeaders(v map[string]*string) *SwitchApiResponse {
	s.Headers = v
	return s
}

func (s *SwitchApiResponse) SetStatusCode(v int32) *SwitchApiResponse {
	s.StatusCode = &v
	return s
}

func (s *SwitchApiResponse) SetBody(v *SwitchApiResponseBody) *SwitchApiResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	// The ID of the resource.
	//
	// This parameter is required.
	//
	// example:
	//
	// 285bb759342649a1b70c2093a772e087
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the resource. Tags are bound to API groups, plug-ins, and applications. You can use tags to manage cloud resources by group. Valid values:
	//
	// 	- **apiGroup**
	//
	// 	- **plugin**
	//
	// 	- **app**
	//
	// This parameter is required.
	//
	// example:
	//
	// apiGroup
	ResourceType  *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The tag of objects that match the lifecycle rule. You can specify multiple tags.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2021022811
	Tag []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetSecurityToken(v string) *TagResourcesRequest {
	s.SecurityToken = &v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	// The key of tag N.
	//
	// This parameter is required.
	//
	// example:
	//
	// env
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N.
	//
	// This parameter is required.
	//
	// example:
	//
	// \\" \\"
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// EF924FE4-2EDD-4CD3-89EC-34E4708574E7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type TagResourcesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetStatusCode(v int32) *TagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	// Specifies whether to delete all tags. This parameter is valid only when the **TagKey.N**parameter is not specified. Default value: false. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	All *bool `json:"All,omitempty" xml:"All,omitempty"`
	// The resource IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 285bb759342649a1b70c2093a772e087
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the resource. Tags are bound to API groups, plug-ins, and applications. You can use tags to manage cloud resources by group. Valid values:
	//
	// 	- **apiGroup**
	//
	// 	- **plugin**
	//
	// 	- **app**
	//
	// This parameter is required.
	//
	// example:
	//
	// apiGroup
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The security token included in the WebSocket request header. The system uses this token to authenticate the request.
	//
	// example:
	//
	// 0f96f124-1276-4f81-b52b-c554240beb4c
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The tag keys of the resource.
	//
	// example:
	//
	// env
	TagKey []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetSecurityToken(v string) *UntagResourcesRequest {
	s.SecurityToken = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

type UntagResourcesResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type UntagResourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetStatusCode(v int32) *UntagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type ValidateVpcConnectivityRequest struct {
	// The ID of the API Gateway instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// apigateway-hz-72bc18******
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the VPC access authorization.
	//
	// This parameter is required.
	//
	// example:
	//
	// 5f1b3216f9********e2c1297b6741dc
	VpcAccessId *string `json:"VpcAccessId,omitempty" xml:"VpcAccessId,omitempty"`
}

func (s ValidateVpcConnectivityRequest) String() string {
	return tea.Prettify(s)
}

func (s ValidateVpcConnectivityRequest) GoString() string {
	return s.String()
}

func (s *ValidateVpcConnectivityRequest) SetInstanceId(v string) *ValidateVpcConnectivityRequest {
	s.InstanceId = &v
	return s
}

func (s *ValidateVpcConnectivityRequest) SetSecurityToken(v string) *ValidateVpcConnectivityRequest {
	s.SecurityToken = &v
	return s
}

func (s *ValidateVpcConnectivityRequest) SetVpcAccessId(v string) *ValidateVpcConnectivityRequest {
	s.VpcAccessId = &v
	return s
}

type ValidateVpcConnectivityResponseBody struct {
	// Indicates whether the API Gateway instance is connected to the port. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// True
	Connected *bool `json:"Connected,omitempty" xml:"Connected,omitempty"`
	// Indicates whether the instance in the authorization is an ECS instance or an SLB instance when the instance ID in the authorization is an IP address. Valid values:
	//
	// 	- **ECS**
	//
	// 	- **SLB**
	//
	// 	- **INVALID**: The instance type corresponding to the IP address is invalid.
	//
	// example:
	//
	// ECS
	IpType *string `json:"IpType,omitempty" xml:"IpType,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9A591B5B-0EC2-5463-B8B8-1984AE3AEBF1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ValidateVpcConnectivityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ValidateVpcConnectivityResponseBody) GoString() string {
	return s.String()
}

func (s *ValidateVpcConnectivityResponseBody) SetConnected(v bool) *ValidateVpcConnectivityResponseBody {
	s.Connected = &v
	return s
}

func (s *ValidateVpcConnectivityResponseBody) SetIpType(v string) *ValidateVpcConnectivityResponseBody {
	s.IpType = &v
	return s
}

func (s *ValidateVpcConnectivityResponseBody) SetRequestId(v string) *ValidateVpcConnectivityResponseBody {
	s.RequestId = &v
	return s
}

type ValidateVpcConnectivityResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ValidateVpcConnectivityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ValidateVpcConnectivityResponse) String() string {
	return tea.Prettify(s)
}

func (s ValidateVpcConnectivityResponse) GoString() string {
	return s.String()
}

func (s *ValidateVpcConnectivityResponse) SetHeaders(v map[string]*string) *ValidateVpcConnectivityResponse {
	s.Headers = v
	return s
}

func (s *ValidateVpcConnectivityResponse) SetStatusCode(v int32) *ValidateVpcConnectivityResponse {
	s.StatusCode = &v
	return s
}

func (s *ValidateVpcConnectivityResponse) SetBody(v *ValidateVpcConnectivityResponseBody) *ValidateVpcConnectivityResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-qingdao":                  tea.String("apigateway.cn-qingdao.aliyuncs.com"),
		"cn-beijing":                  tea.String("apigateway.cn-beijing.aliyuncs.com"),
		"cn-zhangjiakou":              tea.String("apigateway.cn-zhangjiakou.aliyuncs.com"),
		"cn-huhehaote":                tea.String("apigateway.cn-huhehaote.aliyuncs.com"),
		"cn-wulanchabu":               tea.String("apigateway.cn-wulanchabu.aliyuncs.com"),
		"cn-hangzhou":                 tea.String("apigateway.cn-hangzhou.aliyuncs.com"),
		"cn-shanghai":                 tea.String("apigateway.cn-shanghai.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("apigateway.cn-shenzhen.aliyuncs.com"),
		"cn-heyuan":                   tea.String("apigateway.cn-heyuan.aliyuncs.com"),
		"cn-guangzhou":                tea.String("apigateway.cn-guangzhou.aliyuncs.com"),
		"cn-chengdu":                  tea.String("apigateway.cn-chengdu.aliyuncs.com"),
		"cn-hongkong":                 tea.String("apigateway.cn-hongkong.aliyuncs.com"),
		"ap-northeast-1":              tea.String("apigateway.ap-northeast-1.aliyuncs.com"),
		"ap-southeast-1":              tea.String("apigateway.ap-southeast-1.aliyuncs.com"),
		"ap-southeast-2":              tea.String("apigateway.ap-southeast-2.aliyuncs.com"),
		"ap-southeast-3":              tea.String("apigateway.ap-southeast-3.aliyuncs.com"),
		"ap-southeast-5":              tea.String("apigateway.ap-southeast-5.aliyuncs.com"),
		"ap-southeast-6":              tea.String("apigateway.ap-southeast-6.aliyuncs.com"),
		"ap-southeast-7":              tea.String("apigateway.ap-southeast-7.aliyuncs.com"),
		"us-east-1":                   tea.String("apigateway.us-east-1.aliyuncs.com"),
		"us-west-1":                   tea.String("apigateway.us-west-1.aliyuncs.com"),
		"eu-west-1":                   tea.String("apigateway.eu-west-1.aliyuncs.com"),
		"eu-central-1":                tea.String("apigateway.eu-central-1.aliyuncs.com"),
		"ap-south-1":                  tea.String("apigateway.ap-south-1.aliyuncs.com"),
		"me-east-1":                   tea.String("apigateway.me-east-1.aliyuncs.com"),
		"me-central-1":                tea.String("apigateway.me-central-1.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("apigateway.cn-hangzhou-finance.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("apigateway.cn-shanghai-finance-1.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("apigateway.cn-shenzhen-finance-1.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("apigateway.cn-north-2-gov-1.aliyuncs.com"),
		"ap-northeast-2-pop":          tea.String("apigateway.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("apigateway.cn-beijing-finance-1.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("apigateway.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("apigateway.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("apigateway.aliyuncs.com"),
		"cn-edge-1":                   tea.String("apigateway.aliyuncs.com"),
		"cn-fujian":                   tea.String("apigateway.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("apigateway.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("apigateway.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("apigateway.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("apigateway.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("apigateway.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("apigateway.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("apigateway.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("apigateway.aliyuncs.com"),
		"cn-huhehaote-nebula-1":       tea.String("apigateway.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("apigateway.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("apigateway.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("apigateway.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("apigateway.cn-shanghai-inner.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("apigateway.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("apigateway.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("apigateway.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("apigateway.aliyuncs.com"),
		"cn-wuhan":                    tea.String("apigateway.aliyuncs.com"),
		"cn-yushanfang":               tea.String("apigateway.aliyuncs.com"),
		"cn-zhangbei":                 tea.String("apigateway.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("apigateway.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("apigateway.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("apigateway.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("apigateway.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("apigateway.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("cloudapi"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unpublishes a specified API from a specified runtime environment.
//
// Description:
//
//   This operation is intended for API providers and is the opposite of DeployApi.
//
// 	- An API can be unpublished from a specified runtime environment in under 5 seconds.
//
// 	- An unpublished API cannot be called in the specified runtime environment.
//
// @param request - AbolishApiRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AbolishApiResponse
func (client *Client) AbolishApiWithOptions(request *AbolishApiRequest, runtime *util.RuntimeOptions) (_result *AbolishApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AbolishApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AbolishApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unpublishes a specified API from a specified runtime environment.
//
// Description:
//
//   This operation is intended for API providers and is the opposite of DeployApi.
//
// 	- An API can be unpublished from a specified runtime environment in under 5 seconds.
//
// 	- An unpublished API cannot be called in the specified runtime environment.
//
// @param request - AbolishApiRequest
//
// @return AbolishApiResponse
func (client *Client) AbolishApi(request *AbolishApiRequest) (_result *AbolishApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AbolishApiResponse{}
	_body, _err := client.AbolishApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// This feature provides instance-level access control capabilities for dedicated instances. Adds an IP address entry to the access control polocy of an instance.
//
// @param request - AddAccessControlListEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddAccessControlListEntryResponse
func (client *Client) AddAccessControlListEntryWithOptions(request *AddAccessControlListEntryRequest, runtime *util.RuntimeOptions) (_result *AddAccessControlListEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclEntrys)) {
		query["AclEntrys"] = request.AclEntrys
	}

	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddAccessControlListEntry"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddAccessControlListEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// This feature provides instance-level access control capabilities for dedicated instances. Adds an IP address entry to the access control polocy of an instance.
//
// @param request - AddAccessControlListEntryRequest
//
// @return AddAccessControlListEntryResponse
func (client *Client) AddAccessControlListEntry(request *AddAccessControlListEntryRequest) (_result *AddAccessControlListEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddAccessControlListEntryResponse{}
	_body, _err := client.AddAccessControlListEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a policy to an existing ACL.
//
// Description:
//
// When you call this operation, note that:
//
// 	- This operation is intended for API providers.
//
// 	- An added policy immediately takes effect on all APIs that are bound to the access control list (ACL).
//
// 	- A maximum of 100 policies can be added to an ACL.
//
// @param request - AddIpControlPolicyItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddIpControlPolicyItemResponse
func (client *Client) AddIpControlPolicyItemWithOptions(request *AddIpControlPolicyItemRequest, runtime *util.RuntimeOptions) (_result *AddIpControlPolicyItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.CidrIp)) {
		query["CidrIp"] = request.CidrIp
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddIpControlPolicyItem"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddIpControlPolicyItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a policy to an existing ACL.
//
// Description:
//
// When you call this operation, note that:
//
// 	- This operation is intended for API providers.
//
// 	- An added policy immediately takes effect on all APIs that are bound to the access control list (ACL).
//
// 	- A maximum of 100 policies can be added to an ACL.
//
// @param request - AddIpControlPolicyItemRequest
//
// @return AddIpControlPolicyItemResponse
func (client *Client) AddIpControlPolicyItem(request *AddIpControlPolicyItemRequest) (_result *AddIpControlPolicyItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddIpControlPolicyItemResponse{}
	_body, _err := client.AddIpControlPolicyItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a custom special policy to a specified throttling policy.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- If the input SpecialKey already exists, the previous configuration is overwritten. Use caution when calling this operation.
//
// 	- Special throttling policies must be added to an existing throttling policy, and can take effect on all the APIs to which the throttling policy is bound.
//
// @param request - AddTrafficSpecialControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddTrafficSpecialControlResponse
func (client *Client) AddTrafficSpecialControlWithOptions(request *AddTrafficSpecialControlRequest, runtime *util.RuntimeOptions) (_result *AddTrafficSpecialControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SpecialKey)) {
		query["SpecialKey"] = request.SpecialKey
	}

	if !tea.BoolValue(util.IsUnset(request.SpecialType)) {
		query["SpecialType"] = request.SpecialType
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficValue)) {
		query["TrafficValue"] = request.TrafficValue
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddTrafficSpecialControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddTrafficSpecialControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a custom special policy to a specified throttling policy.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- If the input SpecialKey already exists, the previous configuration is overwritten. Use caution when calling this operation.
//
// 	- Special throttling policies must be added to an existing throttling policy, and can take effect on all the APIs to which the throttling policy is bound.
//
// @param request - AddTrafficSpecialControlRequest
//
// @return AddTrafficSpecialControlResponse
func (client *Client) AddTrafficSpecialControl(request *AddTrafficSpecialControlRequest) (_result *AddTrafficSpecialControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTrafficSpecialControlResponse{}
	_body, _err := client.AddTrafficSpecialControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Attaches APIs to an API product. If the API product does not exist, the system automatically creates the API product.
//
// @param request - AttachApiProductRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachApiProductResponse
func (client *Client) AttachApiProductWithOptions(request *AttachApiProductRequest, runtime *util.RuntimeOptions) (_result *AttachApiProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiProductId)) {
		query["ApiProductId"] = request.ApiProductId
	}

	if !tea.BoolValue(util.IsUnset(request.Apis)) {
		query["Apis"] = request.Apis
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachApiProduct"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AttachApiProductResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Attaches APIs to an API product. If the API product does not exist, the system automatically creates the API product.
//
// @param request - AttachApiProductRequest
//
// @return AttachApiProductResponse
func (client *Client) AttachApiProduct(request *AttachApiProductRequest) (_result *AttachApiProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachApiProductResponse{}
	_body, _err := client.AttachApiProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Binds a plug-in to an API.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- You can only bind plug-ins to published APIs.
//
// 	- The plug-in takes effect immediately after it is bound to an API.
//
// 	- If you bind a different plug-in to an API, this plug-in takes effect immediately.
//
// @param request - AttachPluginRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachPluginResponse
func (client *Client) AttachPluginWithOptions(request *AttachPluginRequest, runtime *util.RuntimeOptions) (_result *AttachPluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PluginId)) {
		query["PluginId"] = request.PluginId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachPlugin"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AttachPluginResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Binds a plug-in to an API.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- You can only bind plug-ins to published APIs.
//
// 	- The plug-in takes effect immediately after it is bound to an API.
//
// 	- If you bind a different plug-in to an API, this plug-in takes effect immediately.
//
// @param request - AttachPluginRequest
//
// @return AttachPluginResponse
func (client *Client) AttachPlugin(request *AttachPluginRequest) (_result *AttachPluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachPluginResponse{}
	_body, _err := client.AttachPluginWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unpublishes multiple published APIs at a time.
//
// @param request - BatchAbolishApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchAbolishApisResponse
func (client *Client) BatchAbolishApisWithOptions(request *BatchAbolishApisRequest, runtime *util.RuntimeOptions) (_result *BatchAbolishApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Api)) {
		query["Api"] = request.Api
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchAbolishApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchAbolishApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unpublishes multiple published APIs at a time.
//
// @param request - BatchAbolishApisRequest
//
// @return BatchAbolishApisResponse
func (client *Client) BatchAbolishApis(request *BatchAbolishApisRequest) (_result *BatchAbolishApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchAbolishApisResponse{}
	_body, _err := client.BatchAbolishApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Publishes multiple APIs at a time.
//
// @param request - BatchDeployApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchDeployApisResponse
func (client *Client) BatchDeployApisWithOptions(request *BatchDeployApisRequest, runtime *util.RuntimeOptions) (_result *BatchDeployApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Api)) {
		query["Api"] = request.Api
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchDeployApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchDeployApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Publishes multiple APIs at a time.
//
// @param request - BatchDeployApisRequest
//
// @return BatchDeployApisResponse
func (client *Client) BatchDeployApis(request *BatchDeployApisRequest) (_result *BatchDeployApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchDeployApisResponse{}
	_body, _err := client.BatchDeployApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// This feature provides instance-level access control capabilities for dedicated instances. Creates an Access Control List (ACL). Each user is allowed to create five ACLs in each region.
//
// @param request - CreateAccessControlListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAccessControlListResponse
func (client *Client) CreateAccessControlListWithOptions(request *CreateAccessControlListRequest, runtime *util.RuntimeOptions) (_result *CreateAccessControlListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclName)) {
		query["AclName"] = request.AclName
	}

	if !tea.BoolValue(util.IsUnset(request.AddressIPVersion)) {
		query["AddressIPVersion"] = request.AddressIPVersion
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAccessControlList"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAccessControlListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// This feature provides instance-level access control capabilities for dedicated instances. Creates an Access Control List (ACL). Each user is allowed to create five ACLs in each region.
//
// @param request - CreateAccessControlListRequest
//
// @return CreateAccessControlListResponse
func (client *Client) CreateAccessControlList(request *CreateAccessControlListRequest) (_result *CreateAccessControlListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAccessControlListResponse{}
	_body, _err := client.CreateAccessControlListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an API.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- The name of an API must be unique within an API group.
//
// 	- A request path must be unique within an API group.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - CreateApiRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateApiResponse
func (client *Client) CreateApiWithOptions(request *CreateApiRequest, runtime *util.RuntimeOptions) (_result *CreateApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllowSignatureMethod)) {
		query["AllowSignatureMethod"] = request.AllowSignatureMethod
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.AppCodeAuthType)) {
		query["AppCodeAuthType"] = request.AppCodeAuthType
	}

	if !tea.BoolValue(util.IsUnset(request.AuthType)) {
		query["AuthType"] = request.AuthType
	}

	if !tea.BoolValue(util.IsUnset(request.BackendEnable)) {
		query["BackendEnable"] = request.BackendEnable
	}

	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DisableInternet)) {
		query["DisableInternet"] = request.DisableInternet
	}

	if !tea.BoolValue(util.IsUnset(request.ForceNonceCheck)) {
		query["ForceNonceCheck"] = request.ForceNonceCheck
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OpenIdConnectConfig)) {
		query["OpenIdConnectConfig"] = request.OpenIdConnectConfig
	}

	if !tea.BoolValue(util.IsUnset(request.RequestConfig)) {
		query["RequestConfig"] = request.RequestConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ResultBodyModel)) {
		query["ResultBodyModel"] = request.ResultBodyModel
	}

	if !tea.BoolValue(util.IsUnset(request.ResultType)) {
		query["ResultType"] = request.ResultType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceConfig)) {
		query["ServiceConfig"] = request.ServiceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.Visibility)) {
		query["Visibility"] = request.Visibility
	}

	if !tea.BoolValue(util.IsUnset(request.WebSocketApiType)) {
		query["WebSocketApiType"] = request.WebSocketApiType
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConstantParameters)) {
		body["ConstantParameters"] = request.ConstantParameters
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorCodeSamples)) {
		body["ErrorCodeSamples"] = request.ErrorCodeSamples
	}

	if !tea.BoolValue(util.IsUnset(request.FailResultSample)) {
		body["FailResultSample"] = request.FailResultSample
	}

	if !tea.BoolValue(util.IsUnset(request.RequestParameters)) {
		body["RequestParameters"] = request.RequestParameters
	}

	if !tea.BoolValue(util.IsUnset(request.ResultDescriptions)) {
		body["ResultDescriptions"] = request.ResultDescriptions
	}

	if !tea.BoolValue(util.IsUnset(request.ResultSample)) {
		body["ResultSample"] = request.ResultSample
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceParameters)) {
		body["ServiceParameters"] = request.ServiceParameters
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceParametersMap)) {
		body["ServiceParametersMap"] = request.ServiceParametersMap
	}

	if !tea.BoolValue(util.IsUnset(request.SystemParameters)) {
		body["SystemParameters"] = request.SystemParameters
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an API.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- The name of an API must be unique within an API group.
//
// 	- A request path must be unique within an API group.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - CreateApiRequest
//
// @return CreateApiResponse
func (client *Client) CreateApi(request *CreateApiRequest) (_result *CreateApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateApiResponse{}
	_body, _err := client.CreateApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateApiGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateApiGroupResponse
func (client *Client) CreateApiGroupWithOptions(request *CreateApiGroupRequest, runtime *util.RuntimeOptions) (_result *CreateApiGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BasePath)) {
		query["BasePath"] = request.BasePath
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateApiGroup"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateApiGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateApiGroupRequest
//
// @return CreateApiGroupResponse
func (client *Client) CreateApiGroup(request *CreateApiGroupRequest) (_result *CreateApiGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateApiGroupResponse{}
	_body, _err := client.CreateApiGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a variable to an environment.
//
// Description:
//
//   This operation is intended for API providers.
//
// @param request - CreateApiStageVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateApiStageVariableResponse
func (client *Client) CreateApiStageVariableWithOptions(request *CreateApiStageVariableRequest, runtime *util.RuntimeOptions) (_result *CreateApiStageVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageId)) {
		query["StageId"] = request.StageId
	}

	if !tea.BoolValue(util.IsUnset(request.StageRouteModel)) {
		query["StageRouteModel"] = request.StageRouteModel
	}

	if !tea.BoolValue(util.IsUnset(request.SupportRoute)) {
		query["SupportRoute"] = request.SupportRoute
	}

	if !tea.BoolValue(util.IsUnset(request.VariableName)) {
		query["VariableName"] = request.VariableName
	}

	if !tea.BoolValue(util.IsUnset(request.VariableValue)) {
		query["VariableValue"] = request.VariableValue
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateApiStageVariable"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateApiStageVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds a variable to an environment.
//
// Description:
//
//   This operation is intended for API providers.
//
// @param request - CreateApiStageVariableRequest
//
// @return CreateApiStageVariableResponse
func (client *Client) CreateApiStageVariable(request *CreateApiStageVariableRequest) (_result *CreateApiStageVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateApiStageVariableResponse{}
	_body, _err := client.CreateApiStageVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an application for calling APIs in API Gateway.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- Each application has a key-value pair which is used for identity verification when you call an API.
//
// 	- An application must be authorized to call an API.
//
// 	- Each application has only one key-value pair, which can be reset if the pair is leaked.
//
// 	- A maximum of 1,000 applications can be created for each Alibaba Cloud account.
//
// 	- You can call this operation up to 50 times per second per account.
//
// @param request - CreateAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAppResponse
func (client *Client) CreateAppWithOptions(request *CreateAppRequest, runtime *util.RuntimeOptions) (_result *CreateAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppCode)) {
		query["AppCode"] = request.AppCode
	}

	if !tea.BoolValue(util.IsUnset(request.AppKey)) {
		query["AppKey"] = request.AppKey
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.AppSecret)) {
		query["AppSecret"] = request.AppSecret
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Extend)) {
		query["Extend"] = request.Extend
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateApp"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an application for calling APIs in API Gateway.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- Each application has a key-value pair which is used for identity verification when you call an API.
//
// 	- An application must be authorized to call an API.
//
// 	- Each application has only one key-value pair, which can be reset if the pair is leaked.
//
// 	- A maximum of 1,000 applications can be created for each Alibaba Cloud account.
//
// 	- You can call this operation up to 50 times per second per account.
//
// @param request - CreateAppRequest
//
// @return CreateAppResponse
func (client *Client) CreateApp(request *CreateAppRequest) (_result *CreateAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAppResponse{}
	_body, _err := client.CreateAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建新的AppCode
//
// @param request - CreateAppCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAppCodeResponse
func (client *Client) CreateAppCodeWithOptions(request *CreateAppCodeRequest, runtime *util.RuntimeOptions) (_result *CreateAppCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppCode)) {
		query["AppCode"] = request.AppCode
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAppCode"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAppCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建新的AppCode
//
// @param request - CreateAppCodeRequest
//
// @return CreateAppCodeResponse
func (client *Client) CreateAppCode(request *CreateAppCodeRequest) (_result *CreateAppCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAppCodeResponse{}
	_body, _err := client.CreateAppCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建新的AK、SK
//
// @param request - CreateAppKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAppKeyResponse
func (client *Client) CreateAppKeyWithOptions(request *CreateAppKeyRequest, runtime *util.RuntimeOptions) (_result *CreateAppKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppKey)) {
		query["AppKey"] = request.AppKey
	}

	if !tea.BoolValue(util.IsUnset(request.AppSecret)) {
		query["AppSecret"] = request.AppSecret
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAppKey"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAppKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建新的AK、SK
//
// @param request - CreateAppKeyRequest
//
// @return CreateAppKeyResponse
func (client *Client) CreateAppKey(request *CreateAppKeyRequest) (_result *CreateAppKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAppKeyResponse{}
	_body, _err := client.CreateAppKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建后端服务
//
// @param request - CreateBackendRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateBackendResponse
func (client *Client) CreateBackendWithOptions(request *CreateBackendRequest, runtime *util.RuntimeOptions) (_result *CreateBackendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendName)) {
		query["BackendName"] = request.BackendName
	}

	if !tea.BoolValue(util.IsUnset(request.BackendType)) {
		query["BackendType"] = request.BackendType
	}

	if !tea.BoolValue(util.IsUnset(request.CreateEventBridgeServiceLinkedRole)) {
		query["CreateEventBridgeServiceLinkedRole"] = request.CreateEventBridgeServiceLinkedRole
	}

	if !tea.BoolValue(util.IsUnset(request.CreateSlr)) {
		query["CreateSlr"] = request.CreateSlr
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateBackend"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateBackendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建后端服务
//
// @param request - CreateBackendRequest
//
// @return CreateBackendResponse
func (client *Client) CreateBackend(request *CreateBackendRequest) (_result *CreateBackendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBackendResponse{}
	_body, _err := client.CreateBackendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建后端服务在环境上的配置
//
// @param request - CreateBackendModelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateBackendModelResponse
func (client *Client) CreateBackendModelWithOptions(request *CreateBackendModelRequest, runtime *util.RuntimeOptions) (_result *CreateBackendModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.BackendModelData)) {
		query["BackendModelData"] = request.BackendModelData
	}

	if !tea.BoolValue(util.IsUnset(request.BackendType)) {
		query["BackendType"] = request.BackendType
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateBackendModel"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateBackendModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建后端服务在环境上的配置
//
// @param request - CreateBackendModelRequest
//
// @return CreateBackendModelResponse
func (client *Client) CreateBackendModel(request *CreateBackendModelRequest) (_result *CreateBackendModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBackendModelResponse{}
	_body, _err := client.CreateBackendModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a custom dataset.
//
// @param request - CreateDatasetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDatasetResponse
func (client *Client) CreateDatasetWithOptions(request *CreateDatasetRequest, runtime *util.RuntimeOptions) (_result *CreateDatasetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetName)) {
		query["DatasetName"] = request.DatasetName
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetType)) {
		query["DatasetType"] = request.DatasetType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDataset"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDatasetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a custom dataset.
//
// @param request - CreateDatasetRequest
//
// @return CreateDatasetResponse
func (client *Client) CreateDataset(request *CreateDatasetRequest) (_result *CreateDatasetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDatasetResponse{}
	_body, _err := client.CreateDatasetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建自定义数据集条目
//
// @param request - CreateDatasetItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDatasetItemResponse
func (client *Client) CreateDatasetItemWithOptions(request *CreateDatasetItemRequest, runtime *util.RuntimeOptions) (_result *CreateDatasetItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		query["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiredTime)) {
		query["ExpiredTime"] = request.ExpiredTime
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Value)) {
		query["Value"] = request.Value
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDatasetItem"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDatasetItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建自定义数据集条目
//
// @param request - CreateDatasetItemRequest
//
// @return CreateDatasetItemResponse
func (client *Client) CreateDatasetItem(request *CreateDatasetItemRequest) (_result *CreateDatasetItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDatasetItemResponse{}
	_body, _err := client.CreateDatasetItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建网关实例
//
// @param request - CreateInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateInstanceResponse
func (client *Client) CreateInstanceWithOptions(request *CreateInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.HttpsPolicy)) {
		query["HttpsPolicy"] = request.HttpsPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceCidr)) {
		query["InstanceCidr"] = request.InstanceCidr
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceSpec)) {
		query["InstanceSpec"] = request.InstanceSpec
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.PricingCycle)) {
		query["PricingCycle"] = request.PricingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	if !tea.BoolValue(util.IsUnset(request.UserVpcId)) {
		query["UserVpcId"] = request.UserVpcId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneVSwitchSecurityGroup)) {
		query["ZoneVSwitchSecurityGroup"] = request.ZoneVSwitchSecurityGroup
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateInstance"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建网关实例
//
// @param request - CreateInstanceRequest
//
// @return CreateInstanceResponse
func (client *Client) CreateInstance(request *CreateInstanceRequest) (_result *CreateInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CreateInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateIntranetDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateIntranetDomainResponse
func (client *Client) CreateIntranetDomainWithOptions(request *CreateIntranetDomainRequest, runtime *util.RuntimeOptions) (_result *CreateIntranetDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateIntranetDomain"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateIntranetDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateIntranetDomainRequest
//
// @return CreateIntranetDomainResponse
func (client *Client) CreateIntranetDomain(request *CreateIntranetDomainRequest) (_result *CreateIntranetDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateIntranetDomainResponse{}
	_body, _err := client.CreateIntranetDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an access control list (ACL) in a region.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- An ACL must be bound to an API to take effect. After an ACL is bound to an API, the ACL takes effect on the API immediately.
//
// 	- You can add policies to an ACL when you create the ACL.
//
// 	- If an ACL does not have any policy, the ACL is ineffective.
//
// @param request - CreateIpControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateIpControlResponse
func (client *Client) CreateIpControlWithOptions(request *CreateIpControlRequest, runtime *util.RuntimeOptions) (_result *CreateIpControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlName)) {
		query["IpControlName"] = request.IpControlName
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlPolicys)) {
		query["IpControlPolicys"] = request.IpControlPolicys
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlType)) {
		query["IpControlType"] = request.IpControlType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateIpControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateIpControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an access control list (ACL) in a region.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- An ACL must be bound to an API to take effect. After an ACL is bound to an API, the ACL takes effect on the API immediately.
//
// 	- You can add policies to an ACL when you create the ACL.
//
// 	- If an ACL does not have any policy, the ACL is ineffective.
//
// @param request - CreateIpControlRequest
//
// @return CreateIpControlResponse
func (client *Client) CreateIpControl(request *CreateIpControlRequest) (_result *CreateIpControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateIpControlResponse{}
	_body, _err := client.CreateIpControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateLogConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLogConfigResponse
func (client *Client) CreateLogConfigWithOptions(request *CreateLogConfigRequest, runtime *util.RuntimeOptions) (_result *CreateLogConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LogType)) {
		query["LogType"] = request.LogType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SlsLogStore)) {
		query["SlsLogStore"] = request.SlsLogStore
	}

	if !tea.BoolValue(util.IsUnset(request.SlsProject)) {
		query["SlsProject"] = request.SlsProject
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLogConfig"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLogConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateLogConfigRequest
//
// @return CreateLogConfigResponse
func (client *Client) CreateLogConfig(request *CreateLogConfigRequest) (_result *CreateLogConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLogConfigResponse{}
	_body, _err := client.CreateLogConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a model for an API group.
//
// Description:
//
//   For more information about the model definition, see [JSON Schema Draft 4](https://tools.ietf.org/html/draft-zyp-json-schema-04?spm=a2c4g.11186623.2.10.2e977ff7p4BpQd).
//
// 	- JSON Schema supports only element attributes of the Object type.
//
// @param request - CreateModelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateModelResponse
func (client *Client) CreateModelWithOptions(request *CreateModelRequest, runtime *util.RuntimeOptions) (_result *CreateModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ModelName)) {
		query["ModelName"] = request.ModelName
	}

	if !tea.BoolValue(util.IsUnset(request.Schema)) {
		query["Schema"] = request.Schema
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateModel"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a model for an API group.
//
// Description:
//
//   For more information about the model definition, see [JSON Schema Draft 4](https://tools.ietf.org/html/draft-zyp-json-schema-04?spm=a2c4g.11186623.2.10.2e977ff7p4BpQd).
//
// 	- JSON Schema supports only element attributes of the Object type.
//
// @param request - CreateModelRequest
//
// @return CreateModelResponse
func (client *Client) CreateModel(request *CreateModelRequest) (_result *CreateModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateModelResponse{}
	_body, _err := client.CreateModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables CloudMonitor alerting for a specified API group.
//
// @param request - CreateMonitorGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMonitorGroupResponse
func (client *Client) CreateMonitorGroupWithOptions(request *CreateMonitorGroupRequest, runtime *util.RuntimeOptions) (_result *CreateMonitorGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Auth)) {
		query["Auth"] = request.Auth
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RawMonitorGroupId)) {
		query["RawMonitorGroupId"] = request.RawMonitorGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMonitorGroup"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMonitorGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables CloudMonitor alerting for a specified API group.
//
// @param request - CreateMonitorGroupRequest
//
// @return CreateMonitorGroupResponse
func (client *Client) CreateMonitorGroup(request *CreateMonitorGroupRequest) (_result *CreateMonitorGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMonitorGroupResponse{}
	_body, _err := client.CreateMonitorGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a plug-in.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- The number of plug-ins of the same type that each user can create is limited. Different limits apply to different plug-in types.
//
// 	- The plug-in definitions for advanced features are restricted.
//
// 	- Plug-ins must be bound to APIs to take effect. After a plug-in is bound, it takes effect on that API immediately.
//
// @param request - CreatePluginRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePluginResponse
func (client *Client) CreatePluginWithOptions(request *CreatePluginRequest, runtime *util.RuntimeOptions) (_result *CreatePluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.PluginData)) {
		query["PluginData"] = request.PluginData
	}

	if !tea.BoolValue(util.IsUnset(request.PluginName)) {
		query["PluginName"] = request.PluginName
	}

	if !tea.BoolValue(util.IsUnset(request.PluginType)) {
		query["PluginType"] = request.PluginType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePlugin"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePluginResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a plug-in.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- The number of plug-ins of the same type that each user can create is limited. Different limits apply to different plug-in types.
//
// 	- The plug-in definitions for advanced features are restricted.
//
// 	- Plug-ins must be bound to APIs to take effect. After a plug-in is bound, it takes effect on that API immediately.
//
// @param request - CreatePluginRequest
//
// @return CreatePluginResponse
func (client *Client) CreatePlugin(request *CreatePluginRequest) (_result *CreatePluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePluginResponse{}
	_body, _err := client.CreatePluginWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a backend signature key.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- The API operation only creates a key policy. You must call the binding operation to bind the key to an API.
//
// 	- After the key is bound to the API, requests sent from API Gateway to the backend service contain signature strings. You can specify whether your backend service verifies these signature strings.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - CreateSignatureRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSignatureResponse
func (client *Client) CreateSignatureWithOptions(request *CreateSignatureRequest, runtime *util.RuntimeOptions) (_result *CreateSignatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureKey)) {
		query["SignatureKey"] = request.SignatureKey
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureName)) {
		query["SignatureName"] = request.SignatureName
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureSecret)) {
		query["SignatureSecret"] = request.SignatureSecret
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSignature"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSignatureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a backend signature key.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- The API operation only creates a key policy. You must call the binding operation to bind the key to an API.
//
// 	- After the key is bound to the API, requests sent from API Gateway to the backend service contain signature strings. You can specify whether your backend service verifies these signature strings.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - CreateSignatureRequest
//
// @return CreateSignatureResponse
func (client *Client) CreateSignature(request *CreateSignatureRequest) (_result *CreateSignatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSignatureResponse{}
	_body, _err := client.CreateSignatureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a custom throttling policy.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- Throttling policies must be bound to APIs to take effect. After a policy is bound to an API, it goes into effect on that API immediately.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - CreateTrafficControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateTrafficControlResponse
func (client *Client) CreateTrafficControlWithOptions(request *CreateTrafficControlRequest, runtime *util.RuntimeOptions) (_result *CreateTrafficControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiDefault)) {
		query["ApiDefault"] = request.ApiDefault
	}

	if !tea.BoolValue(util.IsUnset(request.AppDefault)) {
		query["AppDefault"] = request.AppDefault
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlName)) {
		query["TrafficControlName"] = request.TrafficControlName
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlUnit)) {
		query["TrafficControlUnit"] = request.TrafficControlUnit
	}

	if !tea.BoolValue(util.IsUnset(request.UserDefault)) {
		query["UserDefault"] = request.UserDefault
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTrafficControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTrafficControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a custom throttling policy.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- Throttling policies must be bound to APIs to take effect. After a policy is bound to an API, it goes into effect on that API immediately.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - CreateTrafficControlRequest
//
// @return CreateTrafficControlResponse
func (client *Client) CreateTrafficControl(request *CreateTrafficControlRequest) (_result *CreateTrafficControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTrafficControlResponse{}
	_body, _err := client.CreateTrafficControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// This feature provides instance-level access control capabilities for dedicated instances. Deletes an access control policy.
//
// @param request - DeleteAccessControlListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAccessControlListResponse
func (client *Client) DeleteAccessControlListWithOptions(request *DeleteAccessControlListRequest, runtime *util.RuntimeOptions) (_result *DeleteAccessControlListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAccessControlList"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAccessControlListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// This feature provides instance-level access control capabilities for dedicated instances. Deletes an access control policy.
//
// @param request - DeleteAccessControlListRequest
//
// @return DeleteAccessControlListResponse
func (client *Client) DeleteAccessControlList(request *DeleteAccessControlListRequest) (_result *DeleteAccessControlListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAccessControlListResponse{}
	_body, _err := client.DeleteAccessControlListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes all custom special policies of a specified throttling policy.
//
// Description:
//
//   This API is intended for API providers.
//
// @param request - DeleteAllTrafficSpecialControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAllTrafficSpecialControlResponse
func (client *Client) DeleteAllTrafficSpecialControlWithOptions(request *DeleteAllTrafficSpecialControlRequest, runtime *util.RuntimeOptions) (_result *DeleteAllTrafficSpecialControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAllTrafficSpecialControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAllTrafficSpecialControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes all custom special policies of a specified throttling policy.
//
// Description:
//
//   This API is intended for API providers.
//
// @param request - DeleteAllTrafficSpecialControlRequest
//
// @return DeleteAllTrafficSpecialControlResponse
func (client *Client) DeleteAllTrafficSpecialControl(request *DeleteAllTrafficSpecialControlRequest) (_result *DeleteAllTrafficSpecialControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAllTrafficSpecialControlResponse{}
	_body, _err := client.DeleteAllTrafficSpecialControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an API.
//
// Description:
//
//   This operation is intended for API providers and cannot be undone after it is complete.
//
// 	- An API that is running in the runtime environment must be unpublished before you can delete the API.****
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - DeleteApiRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteApiResponse
func (client *Client) DeleteApiWithOptions(request *DeleteApiRequest, runtime *util.RuntimeOptions) (_result *DeleteApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an API.
//
// Description:
//
//   This operation is intended for API providers and cannot be undone after it is complete.
//
// 	- An API that is running in the runtime environment must be unpublished before you can delete the API.****
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - DeleteApiRequest
//
// @return DeleteApiResponse
func (client *Client) DeleteApi(request *DeleteApiRequest) (_result *DeleteApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteApiResponse{}
	_body, _err := client.DeleteApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an API group.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- An API group that contains APIs cannot be deleted. To delete the API group, you must first delete its APIs.
//
// 	- After an API group is deleted, the second-level domain name bound to the API group is automatically invalidated.
//
// 	- If the specified API group does not exist, a success response is returned.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - DeleteApiGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteApiGroupResponse
func (client *Client) DeleteApiGroupWithOptions(request *DeleteApiGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteApiGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteApiGroup"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteApiGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an API group.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- An API group that contains APIs cannot be deleted. To delete the API group, you must first delete its APIs.
//
// 	- After an API group is deleted, the second-level domain name bound to the API group is automatically invalidated.
//
// 	- If the specified API group does not exist, a success response is returned.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - DeleteApiGroupRequest
//
// @return DeleteApiGroupResponse
func (client *Client) DeleteApiGroup(request *DeleteApiGroupRequest) (_result *DeleteApiGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteApiGroupResponse{}
	_body, _err := client.DeleteApiGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an API product. Deleting an API product causes the association between APIs and the deleted API product to be deleted as well. Exercise caution when you delete an API product. If any API in the API product is associated with an application, the API product fails to be deleted.
//
// @param request - DeleteApiProductRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteApiProductResponse
func (client *Client) DeleteApiProductWithOptions(request *DeleteApiProductRequest, runtime *util.RuntimeOptions) (_result *DeleteApiProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiProductId)) {
		query["ApiProductId"] = request.ApiProductId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteApiProduct"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteApiProductResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an API product. Deleting an API product causes the association between APIs and the deleted API product to be deleted as well. Exercise caution when you delete an API product. If any API in the API product is associated with an application, the API product fails to be deleted.
//
// @param request - DeleteApiProductRequest
//
// @return DeleteApiProductResponse
func (client *Client) DeleteApiProduct(request *DeleteApiProductRequest) (_result *DeleteApiProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteApiProductResponse{}
	_body, _err := client.DeleteApiProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a specified variable in a specified environment.
//
// Description:
//
//   This operation is intended for API providers.
//
// @param request - DeleteApiStageVariableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteApiStageVariableResponse
func (client *Client) DeleteApiStageVariableWithOptions(request *DeleteApiStageVariableRequest, runtime *util.RuntimeOptions) (_result *DeleteApiStageVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageId)) {
		query["StageId"] = request.StageId
	}

	if !tea.BoolValue(util.IsUnset(request.VariableName)) {
		query["VariableName"] = request.VariableName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteApiStageVariable"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteApiStageVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a specified variable in a specified environment.
//
// Description:
//
//   This operation is intended for API providers.
//
// @param request - DeleteApiStageVariableRequest
//
// @return DeleteApiStageVariableResponse
func (client *Client) DeleteApiStageVariable(request *DeleteApiStageVariableRequest) (_result *DeleteApiStageVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteApiStageVariableResponse{}
	_body, _err := client.DeleteApiStageVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an application.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- After an application is deleted, the application and its API authorization cannot be restored.
//
// 	- You can call this operation up to 50 times per second per account.
//
// @param request - DeleteAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAppResponse
func (client *Client) DeleteAppWithOptions(request *DeleteAppRequest, runtime *util.RuntimeOptions) (_result *DeleteAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteApp"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an application.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- After an application is deleted, the application and its API authorization cannot be restored.
//
// 	- You can call this operation up to 50 times per second per account.
//
// @param request - DeleteAppRequest
//
// @return DeleteAppResponse
func (client *Client) DeleteApp(request *DeleteAppRequest) (_result *DeleteAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAppResponse{}
	_body, _err := client.DeleteAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除新的AppCode
//
// @param request - DeleteAppCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAppCodeResponse
func (client *Client) DeleteAppCodeWithOptions(request *DeleteAppCodeRequest, runtime *util.RuntimeOptions) (_result *DeleteAppCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppCode)) {
		query["AppCode"] = request.AppCode
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAppCode"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAppCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除新的AppCode
//
// @param request - DeleteAppCodeRequest
//
// @return DeleteAppCodeResponse
func (client *Client) DeleteAppCode(request *DeleteAppCodeRequest) (_result *DeleteAppCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAppCodeResponse{}
	_body, _err := client.DeleteAppCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除新的AppKey
//
// @param request - DeleteAppKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAppKeyResponse
func (client *Client) DeleteAppKeyWithOptions(request *DeleteAppKeyRequest, runtime *util.RuntimeOptions) (_result *DeleteAppKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppKey)) {
		query["AppKey"] = request.AppKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAppKey"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAppKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除新的AppKey
//
// @param request - DeleteAppKeyRequest
//
// @return DeleteAppKeyResponse
func (client *Client) DeleteAppKey(request *DeleteAppKeyRequest) (_result *DeleteAppKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAppKeyResponse{}
	_body, _err := client.DeleteAppKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a backend service.
//
// @param request - DeleteBackendRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteBackendResponse
func (client *Client) DeleteBackendWithOptions(request *DeleteBackendRequest, runtime *util.RuntimeOptions) (_result *DeleteBackendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteBackend"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteBackendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a backend service.
//
// @param request - DeleteBackendRequest
//
// @return DeleteBackendResponse
func (client *Client) DeleteBackend(request *DeleteBackendRequest) (_result *DeleteBackendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBackendResponse{}
	_body, _err := client.DeleteBackendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the definition of a backend service in an environment. After the definition is deleted, the API that uses the backend service and is published to this environment will be unpublished.
//
// @param request - DeleteBackendModelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteBackendModelResponse
func (client *Client) DeleteBackendModelWithOptions(request *DeleteBackendModelRequest, runtime *util.RuntimeOptions) (_result *DeleteBackendModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.BackendModelId)) {
		query["BackendModelId"] = request.BackendModelId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteBackendModel"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteBackendModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the definition of a backend service in an environment. After the definition is deleted, the API that uses the backend service and is published to this environment will be unpublished.
//
// @param request - DeleteBackendModelRequest
//
// @return DeleteBackendModelResponse
func (client *Client) DeleteBackendModel(request *DeleteBackendModelRequest) (_result *DeleteBackendModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBackendModelResponse{}
	_body, _err := client.DeleteBackendModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除自定义数据集
//
// @param request - DeleteDatasetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDatasetResponse
func (client *Client) DeleteDatasetWithOptions(request *DeleteDatasetRequest, runtime *util.RuntimeOptions) (_result *DeleteDatasetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		query["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataset"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDatasetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除自定义数据集
//
// @param request - DeleteDatasetRequest
//
// @return DeleteDatasetResponse
func (client *Client) DeleteDataset(request *DeleteDatasetRequest) (_result *DeleteDatasetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDatasetResponse{}
	_body, _err := client.DeleteDatasetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a data entry from a custom dataset.
//
// @param request - DeleteDatasetItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDatasetItemResponse
func (client *Client) DeleteDatasetItemWithOptions(request *DeleteDatasetItemRequest, runtime *util.RuntimeOptions) (_result *DeleteDatasetItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		query["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetItemId)) {
		query["DatasetItemId"] = request.DatasetItemId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDatasetItem"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDatasetItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a data entry from a custom dataset.
//
// @param request - DeleteDatasetItemRequest
//
// @return DeleteDatasetItemResponse
func (client *Client) DeleteDatasetItem(request *DeleteDatasetItemRequest) (_result *DeleteDatasetItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDatasetItemResponse{}
	_body, _err := client.DeleteDatasetItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unbinds a custom domain name from a specified API group.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- If the specified domain name does not exist, a successful response will still appear.
//
// 	- Unbinding a domain name from an API group will affect access to the APIs in the group. Exercise caution when using this operation.
//
// @param request - DeleteDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDomainResponse
func (client *Client) DeleteDomainWithOptions(request *DeleteDomainRequest, runtime *util.RuntimeOptions) (_result *DeleteDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDomain"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unbinds a custom domain name from a specified API group.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- If the specified domain name does not exist, a successful response will still appear.
//
// 	- Unbinding a domain name from an API group will affect access to the APIs in the group. Exercise caution when using this operation.
//
// @param request - DeleteDomainRequest
//
// @return DeleteDomainResponse
func (client *Client) DeleteDomain(request *DeleteDomainRequest) (_result *DeleteDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDomainResponse{}
	_body, _err := client.DeleteDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the SSL certificate of a specified domain name. This operation is intended for API providers. If the SSL certificate does not exist, a success response is still returned. If the specified API group does not exist, the InvalidGroupId.NotFound error is returned. Access over HTTPS is not supported after the SSL certificate is deleted. Exercise caution when using this API operation.
//
// @param request - DeleteDomainCertificateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDomainCertificateResponse
func (client *Client) DeleteDomainCertificateWithOptions(request *DeleteDomainCertificateRequest, runtime *util.RuntimeOptions) (_result *DeleteDomainCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CertificateId)) {
		query["CertificateId"] = request.CertificateId
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDomainCertificate"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDomainCertificateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the SSL certificate of a specified domain name. This operation is intended for API providers. If the SSL certificate does not exist, a success response is still returned. If the specified API group does not exist, the InvalidGroupId.NotFound error is returned. Access over HTTPS is not supported after the SSL certificate is deleted. Exercise caution when using this API operation.
//
// @param request - DeleteDomainCertificateRequest
//
// @return DeleteDomainCertificateResponse
func (client *Client) DeleteDomainCertificate(request *DeleteDomainCertificateRequest) (_result *DeleteDomainCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDomainCertificateResponse{}
	_body, _err := client.DeleteDomainCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an API Gateway instance.
//
// @param request - DeleteInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteInstanceResponse
func (client *Client) DeleteInstanceWithOptions(request *DeleteInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteInstance"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an API Gateway instance.
//
// @param request - DeleteInstanceRequest
//
// @return DeleteInstanceResponse
func (client *Client) DeleteInstance(request *DeleteInstanceRequest) (_result *DeleteInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteInstanceResponse{}
	_body, _err := client.DeleteInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an access control list (ACL).
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- If the ACL is bound to an API, you must unbind the ACL from the API before you can delete the ACL. Otherwise, an error is returned.
//
// 	- If you call this operation on an ACL that does not exist, a success message is returned.
//
// @param request - DeleteIpControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteIpControlResponse
func (client *Client) DeleteIpControlWithOptions(request *DeleteIpControlRequest, runtime *util.RuntimeOptions) (_result *DeleteIpControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteIpControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteIpControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an access control list (ACL).
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- If the ACL is bound to an API, you must unbind the ACL from the API before you can delete the ACL. Otherwise, an error is returned.
//
// 	- If you call this operation on an ACL that does not exist, a success message is returned.
//
// @param request - DeleteIpControlRequest
//
// @return DeleteIpControlResponse
func (client *Client) DeleteIpControl(request *DeleteIpControlRequest) (_result *DeleteIpControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteIpControlResponse{}
	_body, _err := client.DeleteIpControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Delete the specified log configuration.
//
// @param request - DeleteLogConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLogConfigResponse
func (client *Client) DeleteLogConfigWithOptions(request *DeleteLogConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLogConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LogType)) {
		query["LogType"] = request.LogType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLogConfig"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLogConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Delete the specified log configuration.
//
// @param request - DeleteLogConfigRequest
//
// @return DeleteLogConfigResponse
func (client *Client) DeleteLogConfig(request *DeleteLogConfigRequest) (_result *DeleteLogConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLogConfigResponse{}
	_body, _err := client.DeleteLogConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a model from Model Management for an API group.
//
// @param request - DeleteModelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteModelResponse
func (client *Client) DeleteModelWithOptions(request *DeleteModelRequest, runtime *util.RuntimeOptions) (_result *DeleteModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ModelName)) {
		query["ModelName"] = request.ModelName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteModel"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a model from Model Management for an API group.
//
// @param request - DeleteModelRequest
//
// @return DeleteModelResponse
func (client *Client) DeleteModel(request *DeleteModelRequest) (_result *DeleteModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteModelResponse{}
	_body, _err := client.DeleteModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a CloudMonitor application group corresponding to an API group.
//
// @param request - DeleteMonitorGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMonitorGroupResponse
func (client *Client) DeleteMonitorGroupWithOptions(request *DeleteMonitorGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteMonitorGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RawMonitorGroupId)) {
		query["RawMonitorGroupId"] = request.RawMonitorGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMonitorGroup"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMonitorGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a CloudMonitor application group corresponding to an API group.
//
// @param request - DeleteMonitorGroupRequest
//
// @return DeleteMonitorGroupResponse
func (client *Client) DeleteMonitorGroup(request *DeleteMonitorGroupRequest) (_result *DeleteMonitorGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMonitorGroupResponse{}
	_body, _err := client.DeleteMonitorGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a plug-in.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- You must first unbind the plug-in from the API. Otherwise, an error is reported when you delete the plug-in.
//
// @param request - DeletePluginRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePluginResponse
func (client *Client) DeletePluginWithOptions(request *DeletePluginRequest, runtime *util.RuntimeOptions) (_result *DeletePluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PluginId)) {
		query["PluginId"] = request.PluginId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePlugin"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePluginResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a plug-in.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- You must first unbind the plug-in from the API. Otherwise, an error is reported when you delete the plug-in.
//
// @param request - DeletePluginRequest
//
// @return DeletePluginResponse
func (client *Client) DeletePlugin(request *DeletePluginRequest) (_result *DeletePluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePluginResponse{}
	_body, _err := client.DeletePluginWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a backend signature key.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- This API operation deletes an existing backend signature key.
//
// 	- You cannot delete a key that is bound to an API. To delete the key, you must unbind it first.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - DeleteSignatureRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSignatureResponse
func (client *Client) DeleteSignatureWithOptions(request *DeleteSignatureRequest, runtime *util.RuntimeOptions) (_result *DeleteSignatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureId)) {
		query["SignatureId"] = request.SignatureId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSignature"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSignatureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a backend signature key.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- This API operation deletes an existing backend signature key.
//
// 	- You cannot delete a key that is bound to an API. To delete the key, you must unbind it first.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - DeleteSignatureRequest
//
// @return DeleteSignatureResponse
func (client *Client) DeleteSignature(request *DeleteSignatureRequest) (_result *DeleteSignatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSignatureResponse{}
	_body, _err := client.DeleteSignatureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a custom throttling policy and the special throttling rules in the policy.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- If the throttling policy you want to delete is bound to APIs, you need to unbind the policy first. Otherwise, an error is reported when you delete the policy.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - DeleteTrafficControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteTrafficControlResponse
func (client *Client) DeleteTrafficControlWithOptions(request *DeleteTrafficControlRequest, runtime *util.RuntimeOptions) (_result *DeleteTrafficControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTrafficControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTrafficControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a custom throttling policy and the special throttling rules in the policy.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- If the throttling policy you want to delete is bound to APIs, you need to unbind the policy first. Otherwise, an error is reported when you delete the policy.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - DeleteTrafficControlRequest
//
// @return DeleteTrafficControlResponse
func (client *Client) DeleteTrafficControl(request *DeleteTrafficControlRequest) (_result *DeleteTrafficControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTrafficControlResponse{}
	_body, _err := client.DeleteTrafficControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a custom special throttling policy.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- You can obtain the input parameters required in this operation by calling other APIs.
//
// @param request - DeleteTrafficSpecialControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteTrafficSpecialControlResponse
func (client *Client) DeleteTrafficSpecialControlWithOptions(request *DeleteTrafficSpecialControlRequest, runtime *util.RuntimeOptions) (_result *DeleteTrafficSpecialControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SpecialKey)) {
		query["SpecialKey"] = request.SpecialKey
	}

	if !tea.BoolValue(util.IsUnset(request.SpecialType)) {
		query["SpecialType"] = request.SpecialType
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTrafficSpecialControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTrafficSpecialControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a custom special throttling policy.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- You can obtain the input parameters required in this operation by calling other APIs.
//
// @param request - DeleteTrafficSpecialControlRequest
//
// @return DeleteTrafficSpecialControlResponse
func (client *Client) DeleteTrafficSpecialControl(request *DeleteTrafficSpecialControlRequest) (_result *DeleteTrafficSpecialControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTrafficSpecialControlResponse{}
	_body, _err := client.DeleteTrafficSpecialControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Publishes an API to an environment.
//
// Description:
//
//   This operation is intended for API providers. Only the API that you have defined and published to a runtime environment can be called.
//
// 	- An API is published to a cluster in under 5 seconds.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - DeployApiRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeployApiResponse
func (client *Client) DeployApiWithOptions(request *DeployApiRequest, runtime *util.RuntimeOptions) (_result *DeployApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeployApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeployApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Publishes an API to an environment.
//
// Description:
//
//   This operation is intended for API providers. Only the API that you have defined and published to a runtime environment can be called.
//
// 	- An API is published to a cluster in under 5 seconds.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - DeployApiRequest
//
// @return DeployApiResponse
func (client *Client) DeployApi(request *DeployApiRequest) (_result *DeployApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeployApiResponse{}
	_body, _err := client.DeployApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAbolishApiTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAbolishApiTaskResponse
func (client *Client) DescribeAbolishApiTaskWithOptions(request *DescribeAbolishApiTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeAbolishApiTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperationUid)) {
		query["OperationUid"] = request.OperationUid
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAbolishApiTask"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAbolishApiTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAbolishApiTaskRequest
//
// @return DescribeAbolishApiTaskResponse
func (client *Client) DescribeAbolishApiTask(request *DescribeAbolishApiTaskRequest) (_result *DescribeAbolishApiTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAbolishApiTaskResponse{}
	_body, _err := client.DescribeAbolishApiTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// This feature provides instance-level access control for dedicated instances. Queries the details of an access control policy.
//
// @param request - DescribeAccessControlListAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAccessControlListAttributeResponse
func (client *Client) DescribeAccessControlListAttributeWithOptions(request *DescribeAccessControlListAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeAccessControlListAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAccessControlListAttribute"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAccessControlListAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// This feature provides instance-level access control for dedicated instances. Queries the details of an access control policy.
//
// @param request - DescribeAccessControlListAttributeRequest
//
// @return DescribeAccessControlListAttributeResponse
func (client *Client) DescribeAccessControlListAttribute(request *DescribeAccessControlListAttributeRequest) (_result *DescribeAccessControlListAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccessControlListAttributeResponse{}
	_body, _err := client.DescribeAccessControlListAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// This feature provides instance-level access control for dedicated instances. Queries access control policies.
//
// @param request - DescribeAccessControlListsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAccessControlListsResponse
func (client *Client) DescribeAccessControlListsWithOptions(request *DescribeAccessControlListsRequest, runtime *util.RuntimeOptions) (_result *DescribeAccessControlListsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclName)) {
		query["AclName"] = request.AclName
	}

	if !tea.BoolValue(util.IsUnset(request.AddressIPVersion)) {
		query["AddressIPVersion"] = request.AddressIPVersion
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAccessControlLists"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAccessControlListsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// This feature provides instance-level access control for dedicated instances. Queries access control policies.
//
// @param request - DescribeAccessControlListsRequest
//
// @return DescribeAccessControlListsResponse
func (client *Client) DescribeAccessControlLists(request *DescribeAccessControlListsRequest) (_result *DescribeAccessControlListsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccessControlListsResponse{}
	_body, _err := client.DescribeAccessControlListsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the definition of an API.
//
// Description:
//
//   This operation is intended for API providers.
//
// @param request - DescribeApiRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiResponse
func (client *Client) DescribeApiWithOptions(request *DescribeApiRequest, runtime *util.RuntimeOptions) (_result *DescribeApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the definition of an API.
//
// Description:
//
//   This operation is intended for API providers.
//
// @param request - DescribeApiRequest
//
// @return DescribeApiResponse
func (client *Client) DescribeApi(request *DescribeApiRequest) (_result *DescribeApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiResponse{}
	_body, _err := client.DescribeApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the documentation of an API.
//
// Description:
//
//   For API callers, the specified API must be a public or authorized private API that has been published to a runtime environment.
//
// 	- When you call this operation as an API caller, the service information, parameter definitions, and other details of the API you specify are returned.
//
// 	- When you call this operation as an API provider, the definition of the specified API running in the specified runtime environment is returned. The returned definition takes effect in the runtime environment, and may be different from the definition of the API you modify.
//
// 	- Before you call this operation as an API provider, ensure that the API to be queried is a public one or that your application has been authorized to call the API, because authentication on API callers is required.
//
// @param request - DescribeApiDocRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiDocResponse
func (client *Client) DescribeApiDocWithOptions(request *DescribeApiDocRequest, runtime *util.RuntimeOptions) (_result *DescribeApiDocResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiDoc"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiDocResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the documentation of an API.
//
// Description:
//
//   For API callers, the specified API must be a public or authorized private API that has been published to a runtime environment.
//
// 	- When you call this operation as an API caller, the service information, parameter definitions, and other details of the API you specify are returned.
//
// 	- When you call this operation as an API provider, the definition of the specified API running in the specified runtime environment is returned. The returned definition takes effect in the runtime environment, and may be different from the definition of the API you modify.
//
// 	- Before you call this operation as an API provider, ensure that the API to be queried is a public one or that your application has been authorized to call the API, because authentication on API callers is required.
//
// @param request - DescribeApiDocRequest
//
// @return DescribeApiDocResponse
func (client *Client) DescribeApiDoc(request *DescribeApiDocRequest) (_result *DescribeApiDocResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiDocResponse{}
	_body, _err := client.DescribeApiDocWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// You can call this operation to query details about an API group, including the automatically assigned second-level domain name, custom domain name, and SSL certificate.
//
// Description:
//
//   This operation is intended for API providers.
//
// @param request - DescribeApiGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiGroupResponse
func (client *Client) DescribeApiGroupWithOptions(request *DescribeApiGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeApiGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiGroup"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// You can call this operation to query details about an API group, including the automatically assigned second-level domain name, custom domain name, and SSL certificate.
//
// Description:
//
//   This operation is intended for API providers.
//
// @param request - DescribeApiGroupRequest
//
// @return DescribeApiGroupResponse
func (client *Client) DescribeApiGroup(request *DescribeApiGroupRequest) (_result *DescribeApiGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiGroupResponse{}
	_body, _err := client.DescribeApiGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the VPC whitelist that is allowed to access an API group.
//
// @param request - DescribeApiGroupVpcWhitelistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiGroupVpcWhitelistResponse
func (client *Client) DescribeApiGroupVpcWhitelistWithOptions(request *DescribeApiGroupVpcWhitelistRequest, runtime *util.RuntimeOptions) (_result *DescribeApiGroupVpcWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiGroupVpcWhitelist"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiGroupVpcWhitelistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the VPC whitelist that is allowed to access an API group.
//
// @param request - DescribeApiGroupVpcWhitelistRequest
//
// @return DescribeApiGroupVpcWhitelistResponse
func (client *Client) DescribeApiGroupVpcWhitelist(request *DescribeApiGroupVpcWhitelistRequest) (_result *DescribeApiGroupVpcWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiGroupVpcWhitelistResponse{}
	_body, _err := client.DescribeApiGroupVpcWhitelistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries existing API groups and their basic information.
//
// Description:
//
//   This operation is intended for API providers.
//
// @param request - DescribeApiGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiGroupsResponse
func (client *Client) DescribeApiGroupsWithOptions(request *DescribeApiGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeApiGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnableTagAuth)) {
		query["EnableTagAuth"] = request.EnableTagAuth
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		query["Sort"] = request.Sort
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiGroups"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries existing API groups and their basic information.
//
// Description:
//
//   This operation is intended for API providers.
//
// @param request - DescribeApiGroupsRequest
//
// @return DescribeApiGroupsResponse
func (client *Client) DescribeApiGroups(request *DescribeApiGroupsRequest) (_result *DescribeApiGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiGroupsResponse{}
	_body, _err := client.DescribeApiGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the historical versions of a specified API.
//
// Description:
//
//   This operation is intended for API providers. Only APIs that have been published have historical version records.
//
// 	- This operation allows you to obtain the historical versions of an API. This operation is always called by other operations.
//
// @param request - DescribeApiHistoriesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiHistoriesResponse
func (client *Client) DescribeApiHistoriesWithOptions(request *DescribeApiHistoriesRequest, runtime *util.RuntimeOptions) (_result *DescribeApiHistoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiHistories"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiHistoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the historical versions of a specified API.
//
// Description:
//
//   This operation is intended for API providers. Only APIs that have been published have historical version records.
//
// 	- This operation allows you to obtain the historical versions of an API. This operation is always called by other operations.
//
// @param request - DescribeApiHistoriesRequest
//
// @return DescribeApiHistoriesResponse
func (client *Client) DescribeApiHistories(request *DescribeApiHistoriesRequest) (_result *DescribeApiHistoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiHistoriesResponse{}
	_body, _err := client.DescribeApiHistoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a specified historical version of a specified API definition.
//
// Description:
//
// Queries the details of a specified historical version of a specified API definition.
//
// 	- This API is intended for API providers.
//
// 	- API Gateway records the time and definition of an API every time the API is published. You can use the version number obtained from other operations to query definition details at a certain publication.
//
// @param request - DescribeApiHistoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiHistoryResponse
func (client *Client) DescribeApiHistoryWithOptions(request *DescribeApiHistoryRequest, runtime *util.RuntimeOptions) (_result *DescribeApiHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HistoryVersion)) {
		query["HistoryVersion"] = request.HistoryVersion
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiHistory"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiHistoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a specified historical version of a specified API definition.
//
// Description:
//
// Queries the details of a specified historical version of a specified API definition.
//
// 	- This API is intended for API providers.
//
// 	- API Gateway records the time and definition of an API every time the API is published. You can use the version number obtained from other operations to query definition details at a certain publication.
//
// @param request - DescribeApiHistoryRequest
//
// @return DescribeApiHistoryResponse
func (client *Client) DescribeApiHistory(request *DescribeApiHistoryRequest) (_result *DescribeApiHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiHistoryResponse{}
	_body, _err := client.DescribeApiHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the access control lists (ACLs) that are bound to all the APIs in an API group in a specified environment.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- If an optional parameter is not specified, all results are returned on separate pages.
//
// ·
//
// @param request - DescribeApiIpControlsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiIpControlsResponse
func (client *Client) DescribeApiIpControlsWithOptions(request *DescribeApiIpControlsRequest, runtime *util.RuntimeOptions) (_result *DescribeApiIpControlsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiIpControls"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiIpControlsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the access control lists (ACLs) that are bound to all the APIs in an API group in a specified environment.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- If an optional parameter is not specified, all results are returned on separate pages.
//
// ·
//
// @param request - DescribeApiIpControlsRequest
//
// @return DescribeApiIpControlsResponse
func (client *Client) DescribeApiIpControls(request *DescribeApiIpControlsRequest) (_result *DescribeApiIpControlsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiIpControlsResponse{}
	_body, _err := client.DescribeApiIpControlsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the response time statistics of an API.
//
// Description:
//
// You can call this operation to query the latency metrics in milliseconds for a specified API.
//
// 	- This API is intended for API providers.
//
// 	- Only statistics for API calls made in the release environment are collected by default.
//
// @param request - DescribeApiLatencyDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiLatencyDataResponse
func (client *Client) DescribeApiLatencyDataWithOptions(request *DescribeApiLatencyDataRequest, runtime *util.RuntimeOptions) (_result *DescribeApiLatencyDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiLatencyData"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiLatencyDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the response time statistics of an API.
//
// Description:
//
// You can call this operation to query the latency metrics in milliseconds for a specified API.
//
// 	- This API is intended for API providers.
//
// 	- Only statistics for API calls made in the release environment are collected by default.
//
// @param request - DescribeApiLatencyDataRequest
//
// @return DescribeApiLatencyDataResponse
func (client *Client) DescribeApiLatencyData(request *DescribeApiLatencyDataRequest) (_result *DescribeApiLatencyDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiLatencyDataResponse{}
	_body, _err := client.DescribeApiLatencyDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the Alibaba Cloud Marketplace attributes of an API.
//
// @param request - DescribeApiMarketAttributesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiMarketAttributesResponse
func (client *Client) DescribeApiMarketAttributesWithOptions(request *DescribeApiMarketAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeApiMarketAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiMarketAttributes"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiMarketAttributesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the Alibaba Cloud Marketplace attributes of an API.
//
// @param request - DescribeApiMarketAttributesRequest
//
// @return DescribeApiMarketAttributesResponse
func (client *Client) DescribeApiMarketAttributes(request *DescribeApiMarketAttributesRequest) (_result *DescribeApiMarketAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiMarketAttributesResponse{}
	_body, _err := client.DescribeApiMarketAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the attached APIs of an API product.
//
// @param request - DescribeApiProductApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiProductApisResponse
func (client *Client) DescribeApiProductApisWithOptions(request *DescribeApiProductApisRequest, runtime *util.RuntimeOptions) (_result *DescribeApiProductApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiProductId)) {
		query["ApiProductId"] = request.ApiProductId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiProductApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiProductApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the attached APIs of an API product.
//
// @param request - DescribeApiProductApisRequest
//
// @return DescribeApiProductApisResponse
func (client *Client) DescribeApiProductApis(request *DescribeApiProductApisRequest) (_result *DescribeApiProductApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiProductApisResponse{}
	_body, _err := client.DescribeApiProductApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries API products by application.
//
// @param request - DescribeApiProductsByAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiProductsByAppResponse
func (client *Client) DescribeApiProductsByAppWithOptions(request *DescribeApiProductsByAppRequest, runtime *util.RuntimeOptions) (_result *DescribeApiProductsByAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiProductsByApp"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiProductsByAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries API products by application.
//
// @param request - DescribeApiProductsByAppRequest
//
// @return DescribeApiProductsByAppResponse
func (client *Client) DescribeApiProductsByApp(request *DescribeApiProductsByAppRequest) (_result *DescribeApiProductsByAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiProductsByAppResponse{}
	_body, _err := client.DescribeApiProductsByAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the QPS statistics of an API.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- Only statistics for API calls made in the release environment are collected by default.
//
// @param request - DescribeApiQpsDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiQpsDataResponse
func (client *Client) DescribeApiQpsDataWithOptions(request *DescribeApiQpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeApiQpsDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiQpsData"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiQpsDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the QPS statistics of an API.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- Only statistics for API calls made in the release environment are collected by default.
//
// @param request - DescribeApiQpsDataRequest
//
// @return DescribeApiQpsDataResponse
func (client *Client) DescribeApiQpsData(request *DescribeApiQpsDataRequest) (_result *DescribeApiQpsDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiQpsDataResponse{}
	_body, _err := client.DescribeApiQpsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the backend signature keys that are bound to the APIs of a specified API group in a specified environment.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- The ApiIds parameter is optional. If this parameter is not specified, all results in the specified environment of an API group are returned.
//
// @param request - DescribeApiSignaturesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiSignaturesResponse
func (client *Client) DescribeApiSignaturesWithOptions(request *DescribeApiSignaturesRequest, runtime *util.RuntimeOptions) (_result *DescribeApiSignaturesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiSignatures"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiSignaturesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the backend signature keys that are bound to the APIs of a specified API group in a specified environment.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- The ApiIds parameter is optional. If this parameter is not specified, all results in the specified environment of an API group are returned.
//
// @param request - DescribeApiSignaturesRequest
//
// @return DescribeApiSignaturesResponse
func (client *Client) DescribeApiSignatures(request *DescribeApiSignaturesRequest) (_result *DescribeApiSignaturesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiSignaturesResponse{}
	_body, _err := client.DescribeApiSignaturesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the throttling policies bound to all members of an API group in a specified environment.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- The ApiIds parameter is optional. If this parameter is not specified, all results in the specified environment of an API group are returned.
//
// @param request - DescribeApiTrafficControlsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiTrafficControlsResponse
func (client *Client) DescribeApiTrafficControlsWithOptions(request *DescribeApiTrafficControlsRequest, runtime *util.RuntimeOptions) (_result *DescribeApiTrafficControlsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiTrafficControls"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiTrafficControlsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the throttling policies bound to all members of an API group in a specified environment.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- The ApiIds parameter is optional. If this parameter is not specified, all results in the specified environment of an API group are returned.
//
// @param request - DescribeApiTrafficControlsRequest
//
// @return DescribeApiTrafficControlsResponse
func (client *Client) DescribeApiTrafficControls(request *DescribeApiTrafficControlsRequest) (_result *DescribeApiTrafficControlsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiTrafficControlsResponse{}
	_body, _err := client.DescribeApiTrafficControlsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the statistics on the traffic of an API.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- Only statistics for API calls made in the release environment are collected by default.
//
// @param request - DescribeApiTrafficDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApiTrafficDataResponse
func (client *Client) DescribeApiTrafficDataWithOptions(request *DescribeApiTrafficDataRequest, runtime *util.RuntimeOptions) (_result *DescribeApiTrafficDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiTrafficData"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiTrafficDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics on the traffic of an API.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- Only statistics for API calls made in the release environment are collected by default.
//
// @param request - DescribeApiTrafficDataRequest
//
// @return DescribeApiTrafficDataResponse
func (client *Client) DescribeApiTrafficData(request *DescribeApiTrafficDataRequest) (_result *DescribeApiTrafficDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiTrafficDataResponse{}
	_body, _err := client.DescribeApiTrafficDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of APIs that are being defined.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- This operation returns a list of all APIs that are being defined. The basic information about these APIs is also returned in the list.
//
// 	- This operation returns all APIs that are being edited, regardless of their environments. The returned definitions may be different from the definitions in the environments.
//
// @param request - DescribeApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApisResponse
func (client *Client) DescribeApisWithOptions(request *DescribeApisRequest, runtime *util.RuntimeOptions) (_result *DescribeApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiMethod)) {
		query["ApiMethod"] = request.ApiMethod
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.ApiPath)) {
		query["ApiPath"] = request.ApiPath
	}

	if !tea.BoolValue(util.IsUnset(request.CatalogId)) {
		query["CatalogId"] = request.CatalogId
	}

	if !tea.BoolValue(util.IsUnset(request.EnableTagAuth)) {
		query["EnableTagAuth"] = request.EnableTagAuth
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.UnDeployed)) {
		query["UnDeployed"] = request.UnDeployed
	}

	if !tea.BoolValue(util.IsUnset(request.Visibility)) {
		query["Visibility"] = request.Visibility
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of APIs that are being defined.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- This operation returns a list of all APIs that are being defined. The basic information about these APIs is also returned in the list.
//
// 	- This operation returns all APIs that are being edited, regardless of their environments. The returned definitions may be different from the definitions in the environments.
//
// @param request - DescribeApisRequest
//
// @return DescribeApisResponse
func (client *Client) DescribeApis(request *DescribeApisRequest) (_result *DescribeApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApisResponse{}
	_body, _err := client.DescribeApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeApisByAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApisByAppResponse
func (client *Client) DescribeApisByAppWithOptions(request *DescribeApisByAppRequest, runtime *util.RuntimeOptions) (_result *DescribeApisByAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.ApiUid)) {
		query["ApiUid"] = request.ApiUid
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Method)) {
		query["Method"] = request.Method
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		query["Path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApisByApp"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApisByAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeApisByAppRequest
//
// @return DescribeApisByAppResponse
func (client *Client) DescribeApisByApp(request *DescribeApisByAppRequest) (_result *DescribeApisByAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApisByAppResponse{}
	_body, _err := client.DescribeApisByAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries APIs in the draft or published state that are created by using a specified backend service.
//
// @param request - DescribeApisByBackendRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApisByBackendResponse
func (client *Client) DescribeApisByBackendWithOptions(request *DescribeApisByBackendRequest, runtime *util.RuntimeOptions) (_result *DescribeApisByBackendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApisByBackend"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApisByBackendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries APIs in the draft or published state that are created by using a specified backend service.
//
// @param request - DescribeApisByBackendRequest
//
// @return DescribeApisByBackendResponse
func (client *Client) DescribeApisByBackend(request *DescribeApisByBackendRequest) (_result *DescribeApisByBackendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApisByBackendResponse{}
	_body, _err := client.DescribeApisByBackendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the APIs that are bound to an access control list (ACL).
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- You can specify PageNumber to obtain the result on the specified page.
//
// @param request - DescribeApisByIpControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApisByIpControlResponse
func (client *Client) DescribeApisByIpControlWithOptions(request *DescribeApisByIpControlRequest, runtime *util.RuntimeOptions) (_result *DescribeApisByIpControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApisByIpControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApisByIpControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the APIs that are bound to an access control list (ACL).
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- You can specify PageNumber to obtain the result on the specified page.
//
// @param request - DescribeApisByIpControlRequest
//
// @return DescribeApisByIpControlResponse
func (client *Client) DescribeApisByIpControl(request *DescribeApisByIpControlRequest) (_result *DescribeApisByIpControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApisByIpControlResponse{}
	_body, _err := client.DescribeApisByIpControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the APIs to which a specified backend signature key is bound.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- The results are returned on separate pages. You can specify PageNumber to obtain the result on the specified page.
//
// @param request - DescribeApisBySignatureRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApisBySignatureResponse
func (client *Client) DescribeApisBySignatureWithOptions(request *DescribeApisBySignatureRequest, runtime *util.RuntimeOptions) (_result *DescribeApisBySignatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureId)) {
		query["SignatureId"] = request.SignatureId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApisBySignature"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApisBySignatureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the APIs to which a specified backend signature key is bound.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- The results are returned on separate pages. You can specify PageNumber to obtain the result on the specified page.
//
// @param request - DescribeApisBySignatureRequest
//
// @return DescribeApisBySignatureResponse
func (client *Client) DescribeApisBySignature(request *DescribeApisBySignatureRequest) (_result *DescribeApisBySignatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApisBySignatureResponse{}
	_body, _err := client.DescribeApisBySignatureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the APIs to which a specified throttling policy is bound.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- You can specify PageNumber to obtain the result on the specified page.
//
// @param request - DescribeApisByTrafficControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApisByTrafficControlResponse
func (client *Client) DescribeApisByTrafficControlWithOptions(request *DescribeApisByTrafficControlRequest, runtime *util.RuntimeOptions) (_result *DescribeApisByTrafficControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApisByTrafficControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApisByTrafficControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the APIs to which a specified throttling policy is bound.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- You can specify PageNumber to obtain the result on the specified page.
//
// @param request - DescribeApisByTrafficControlRequest
//
// @return DescribeApisByTrafficControlResponse
func (client *Client) DescribeApisByTrafficControl(request *DescribeApisByTrafficControlRequest) (_result *DescribeApisByTrafficControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApisByTrafficControlResponse{}
	_body, _err := client.DescribeApisByTrafficControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeApisByVpcAccessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApisByVpcAccessResponse
func (client *Client) DescribeApisByVpcAccessWithOptions(request *DescribeApisByVpcAccessRequest, runtime *util.RuntimeOptions) (_result *DescribeApisByVpcAccessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.VpcName)) {
		query["VpcName"] = request.VpcName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApisByVpcAccess"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApisByVpcAccessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeApisByVpcAccessRequest
//
// @return DescribeApisByVpcAccessResponse
func (client *Client) DescribeApisByVpcAccess(request *DescribeApisByVpcAccessRequest) (_result *DescribeApisByVpcAccessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApisByVpcAccessResponse{}
	_body, _err := client.DescribeApisByVpcAccessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries APIs by application. The environment information is also returned.
//
// @param request - DescribeApisWithStageNameIntegratedByAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApisWithStageNameIntegratedByAppResponse
func (client *Client) DescribeApisWithStageNameIntegratedByAppWithOptions(request *DescribeApisWithStageNameIntegratedByAppRequest, runtime *util.RuntimeOptions) (_result *DescribeApisWithStageNameIntegratedByAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.ApiUid)) {
		query["ApiUid"] = request.ApiUid
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Method)) {
		query["Method"] = request.Method
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		query["Path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApisWithStageNameIntegratedByApp"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApisWithStageNameIntegratedByAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries APIs by application. The environment information is also returned.
//
// @param request - DescribeApisWithStageNameIntegratedByAppRequest
//
// @return DescribeApisWithStageNameIntegratedByAppResponse
func (client *Client) DescribeApisWithStageNameIntegratedByApp(request *DescribeApisWithStageNameIntegratedByAppRequest) (_result *DescribeApisWithStageNameIntegratedByAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApisWithStageNameIntegratedByAppResponse{}
	_body, _err := client.DescribeApisWithStageNameIntegratedByAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the apps that can be authorized.
//
// @param request - DescribeAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAppResponse
func (client *Client) DescribeAppWithOptions(request *DescribeAppRequest, runtime *util.RuntimeOptions) (_result *DescribeAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApp"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the apps that can be authorized.
//
// @param request - DescribeAppRequest
//
// @return DescribeAppResponse
func (client *Client) DescribeApp(request *DescribeAppRequest) (_result *DescribeAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAppResponse{}
	_body, _err := client.DescribeAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries apps and their basic information.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- AppId is optional.
//
// @param request - DescribeAppAttributesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAppAttributesResponse
func (client *Client) DescribeAppAttributesWithOptions(request *DescribeAppAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeAppAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppCode)) {
		query["AppCode"] = request.AppCode
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppKey)) {
		query["AppKey"] = request.AppKey
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.EnableTagAuth)) {
		query["EnableTagAuth"] = request.EnableTagAuth
	}

	if !tea.BoolValue(util.IsUnset(request.Extend)) {
		query["Extend"] = request.Extend
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		query["Sort"] = request.Sort
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAppAttributes"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAppAttributesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries apps and their basic information.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- AppId is optional.
//
// @param request - DescribeAppAttributesRequest
//
// @return DescribeAppAttributesResponse
func (client *Client) DescribeAppAttributes(request *DescribeAppAttributesRequest) (_result *DescribeAppAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAppAttributesResponse{}
	_body, _err := client.DescribeAppAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// This key is used for authentication when an API call is made.
//
// Description:
//
//   This operation is intended for API callers.
//
// @param request - DescribeAppSecurityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAppSecurityResponse
func (client *Client) DescribeAppSecurityWithOptions(request *DescribeAppSecurityRequest, runtime *util.RuntimeOptions) (_result *DescribeAppSecurityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAppSecurity"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAppSecurityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// This key is used for authentication when an API call is made.
//
// Description:
//
//   This operation is intended for API callers.
//
// @param request - DescribeAppSecurityRequest
//
// @return DescribeAppSecurityResponse
func (client *Client) DescribeAppSecurity(request *DescribeAppSecurityRequest) (_result *DescribeAppSecurityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAppSecurityResponse{}
	_body, _err := client.DescribeAppSecurityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the apps. App information is returned only to the app owner.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- API providers can use the app IDs or their Apsara Stack tenant accounts to query app information.
//
// 	- Each provider can call this operation for a maximum of 200 times every day in a region.
//
// @param request - DescribeAppsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAppsResponse
func (client *Client) DescribeAppsWithOptions(request *DescribeAppsRequest, runtime *util.RuntimeOptions) (_result *DescribeAppsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppOwner)) {
		query["AppOwner"] = request.AppOwner
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApps"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAppsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the apps. App information is returned only to the app owner.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- API providers can use the app IDs or their Apsara Stack tenant accounts to query app information.
//
// 	- Each provider can call this operation for a maximum of 200 times every day in a region.
//
// @param request - DescribeAppsRequest
//
// @return DescribeAppsResponse
func (client *Client) DescribeApps(request *DescribeAppsRequest) (_result *DescribeAppsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAppsResponse{}
	_body, _err := client.DescribeAppsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries authorized applications by API product.
//
// @param request - DescribeAppsByApiProductRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAppsByApiProductResponse
func (client *Client) DescribeAppsByApiProductWithOptions(request *DescribeAppsByApiProductRequest, runtime *util.RuntimeOptions) (_result *DescribeAppsByApiProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiProductId)) {
		query["ApiProductId"] = request.ApiProductId
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAppsByApiProduct"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAppsByApiProductResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries authorized applications by API product.
//
// @param request - DescribeAppsByApiProductRequest
//
// @return DescribeAppsByApiProductResponse
func (client *Client) DescribeAppsByApiProduct(request *DescribeAppsByApiProductRequest) (_result *DescribeAppsByApiProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAppsByApiProductResponse{}
	_body, _err := client.DescribeAppsByApiProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the authorized APIs of a specified APP.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- The specified application can call all APIs included in the responses.
//
// @param request - DescribeAuthorizedApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAuthorizedApisResponse
func (client *Client) DescribeAuthorizedApisWithOptions(request *DescribeAuthorizedApisRequest, runtime *util.RuntimeOptions) (_result *DescribeAuthorizedApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAuthorizedApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAuthorizedApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the authorized APIs of a specified APP.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- The specified application can call all APIs included in the responses.
//
// @param request - DescribeAuthorizedApisRequest
//
// @return DescribeAuthorizedApisResponse
func (client *Client) DescribeAuthorizedApis(request *DescribeAuthorizedApisRequest) (_result *DescribeAuthorizedApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAuthorizedApisResponse{}
	_body, _err := client.DescribeAuthorizedApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the current apps.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- All applications included in the responses have access to the specified API.
//
// @param request - DescribeAuthorizedAppsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAuthorizedAppsResponse
func (client *Client) DescribeAuthorizedAppsWithOptions(request *DescribeAuthorizedAppsRequest, runtime *util.RuntimeOptions) (_result *DescribeAuthorizedAppsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.AppOwnerId)) {
		query["AppOwnerId"] = request.AppOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAuthorizedApps"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAuthorizedAppsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the current apps.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- All applications included in the responses have access to the specified API.
//
// @param request - DescribeAuthorizedAppsRequest
//
// @return DescribeAuthorizedAppsResponse
func (client *Client) DescribeAuthorizedApps(request *DescribeAuthorizedAppsRequest) (_result *DescribeAuthorizedAppsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAuthorizedAppsResponse{}
	_body, _err := client.DescribeAuthorizedAppsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a backend service and its URL configured for each environment.
//
// @param request - DescribeBackendInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBackendInfoResponse
func (client *Client) DescribeBackendInfoWithOptions(request *DescribeBackendInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeBackendInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBackendInfo"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBackendInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a backend service and its URL configured for each environment.
//
// @param request - DescribeBackendInfoRequest
//
// @return DescribeBackendInfoResponse
func (client *Client) DescribeBackendInfo(request *DescribeBackendInfoRequest) (_result *DescribeBackendInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackendInfoResponse{}
	_body, _err := client.DescribeBackendInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries backend services. You can filter backend services by backend service name and backend service type.
//
// @param request - DescribeBackendListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBackendListResponse
func (client *Client) DescribeBackendListWithOptions(request *DescribeBackendListRequest, runtime *util.RuntimeOptions) (_result *DescribeBackendListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendName)) {
		query["BackendName"] = request.BackendName
	}

	if !tea.BoolValue(util.IsUnset(request.BackendType)) {
		query["BackendType"] = request.BackendType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBackendList"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBackendListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries backend services. You can filter backend services by backend service name and backend service type.
//
// @param request - DescribeBackendListRequest
//
// @return DescribeBackendListResponse
func (client *Client) DescribeBackendList(request *DescribeBackendListRequest) (_result *DescribeBackendListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackendListResponse{}
	_body, _err := client.DescribeBackendListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a single dataset.
//
// @param request - DescribeDatasetInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDatasetInfoResponse
func (client *Client) DescribeDatasetInfoWithOptions(request *DescribeDatasetInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeDatasetInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		query["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDatasetInfo"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDatasetInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a single dataset.
//
// @param request - DescribeDatasetInfoRequest
//
// @return DescribeDatasetInfoResponse
func (client *Client) DescribeDatasetInfo(request *DescribeDatasetInfoRequest) (_result *DescribeDatasetInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDatasetInfoResponse{}
	_body, _err := client.DescribeDatasetInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a data entry in a custom dataset.
//
// @param request - DescribeDatasetItemInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDatasetItemInfoResponse
func (client *Client) DescribeDatasetItemInfoWithOptions(request *DescribeDatasetItemInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeDatasetItemInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		query["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetItemId)) {
		query["DatasetItemId"] = request.DatasetItemId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Value)) {
		query["Value"] = request.Value
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDatasetItemInfo"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDatasetItemInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a data entry in a custom dataset.
//
// @param request - DescribeDatasetItemInfoRequest
//
// @return DescribeDatasetItemInfoResponse
func (client *Client) DescribeDatasetItemInfo(request *DescribeDatasetItemInfoRequest) (_result *DescribeDatasetItemInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDatasetItemInfoResponse{}
	_body, _err := client.DescribeDatasetItemInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the data entries of a custom dataset.
//
// @param request - DescribeDatasetItemListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDatasetItemListResponse
func (client *Client) DescribeDatasetItemListWithOptions(request *DescribeDatasetItemListRequest, runtime *util.RuntimeOptions) (_result *DescribeDatasetItemListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		query["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetItemIds)) {
		query["DatasetItemIds"] = request.DatasetItemIds
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDatasetItemList"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDatasetItemListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the data entries of a custom dataset.
//
// @param request - DescribeDatasetItemListRequest
//
// @return DescribeDatasetItemListResponse
func (client *Client) DescribeDatasetItemList(request *DescribeDatasetItemListRequest) (_result *DescribeDatasetItemListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDatasetItemListResponse{}
	_body, _err := client.DescribeDatasetItemListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries custom datasets.
//
// @param request - DescribeDatasetListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDatasetListResponse
func (client *Client) DescribeDatasetListWithOptions(request *DescribeDatasetListRequest, runtime *util.RuntimeOptions) (_result *DescribeDatasetListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetIds)) {
		query["DatasetIds"] = request.DatasetIds
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDatasetList"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDatasetListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries custom datasets.
//
// @param request - DescribeDatasetListRequest
//
// @return DescribeDatasetListResponse
func (client *Client) DescribeDatasetList(request *DescribeDatasetListRequest) (_result *DescribeDatasetListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDatasetListResponse{}
	_body, _err := client.DescribeDatasetListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the progress of an asynchronous API publishing task.
//
// @param request - DescribeDeployApiTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDeployApiTaskResponse
func (client *Client) DescribeDeployApiTaskWithOptions(request *DescribeDeployApiTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeDeployApiTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperationUid)) {
		query["OperationUid"] = request.OperationUid
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDeployApiTask"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDeployApiTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the progress of an asynchronous API publishing task.
//
// @param request - DescribeDeployApiTaskRequest
//
// @return DescribeDeployApiTaskResponse
func (client *Client) DescribeDeployApiTask(request *DescribeDeployApiTaskRequest) (_result *DescribeDeployApiTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDeployApiTaskResponse{}
	_body, _err := client.DescribeDeployApiTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the definition of an API that takes effect in an environment. The definition may differ from the definition being edited.
//
// @param request - DescribeDeployedApiRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDeployedApiResponse
func (client *Client) DescribeDeployedApiWithOptions(request *DescribeDeployedApiRequest, runtime *util.RuntimeOptions) (_result *DescribeDeployedApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDeployedApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDeployedApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the definition of an API that takes effect in an environment. The definition may differ from the definition being edited.
//
// @param request - DescribeDeployedApiRequest
//
// @return DescribeDeployedApiResponse
func (client *Client) DescribeDeployedApi(request *DescribeDeployedApiRequest) (_result *DescribeDeployedApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDeployedApiResponse{}
	_body, _err := client.DescribeDeployedApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the APIs that are published to and running in an environment.
//
// Description:
//
//   This operation is intended for API callers.
//
// @param request - DescribeDeployedApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDeployedApisResponse
func (client *Client) DescribeDeployedApisWithOptions(request *DescribeDeployedApisRequest, runtime *util.RuntimeOptions) (_result *DescribeDeployedApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiMethod)) {
		query["ApiMethod"] = request.ApiMethod
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.ApiPath)) {
		query["ApiPath"] = request.ApiPath
	}

	if !tea.BoolValue(util.IsUnset(request.EnableTagAuth)) {
		query["EnableTagAuth"] = request.EnableTagAuth
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDeployedApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDeployedApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the APIs that are published to and running in an environment.
//
// Description:
//
//   This operation is intended for API callers.
//
// @param request - DescribeDeployedApisRequest
//
// @return DescribeDeployedApisResponse
func (client *Client) DescribeDeployedApis(request *DescribeDeployedApisRequest) (_result *DescribeDeployedApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDeployedApisResponse{}
	_body, _err := client.DescribeDeployedApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details about a bound custom domain name, including the system assigned second-level domain name, custom domain name, and SSL certificate.
//
// @param request - DescribeDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDomainResponse
func (client *Client) DescribeDomainWithOptions(request *DescribeDomainRequest, runtime *util.RuntimeOptions) (_result *DescribeDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDomain"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details about a bound custom domain name, including the system assigned second-level domain name, custom domain name, and SSL certificate.
//
// @param request - DescribeDomainRequest
//
// @return DescribeDomainResponse
func (client *Client) DescribeDomain(request *DescribeDomainRequest) (_result *DescribeDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDomainResponse{}
	_body, _err := client.DescribeDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the average latency of an API group in an environment.
//
// @param request - DescribeGroupLatencyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupLatencyResponse
func (client *Client) DescribeGroupLatencyWithOptions(request *DescribeGroupLatencyRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupLatencyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroupLatency"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupLatencyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the average latency of an API group in an environment.
//
// @param request - DescribeGroupLatencyRequest
//
// @return DescribeGroupLatencyResponse
func (client *Client) DescribeGroupLatency(request *DescribeGroupLatencyRequest) (_result *DescribeGroupLatencyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupLatencyResponse{}
	_body, _err := client.DescribeGroupLatencyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the statistics on the number of requests directed to an API group within a period of time.
//
// @param request - DescribeGroupQpsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupQpsResponse
func (client *Client) DescribeGroupQpsWithOptions(request *DescribeGroupQpsRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupQpsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroupQps"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupQpsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics on the number of requests directed to an API group within a period of time.
//
// @param request - DescribeGroupQpsRequest
//
// @return DescribeGroupQpsResponse
func (client *Client) DescribeGroupQps(request *DescribeGroupQpsRequest) (_result *DescribeGroupQpsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupQpsResponse{}
	_body, _err := client.DescribeGroupQpsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the traffic of an API group.
//
// @param request - DescribeGroupTrafficRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupTrafficResponse
func (client *Client) DescribeGroupTrafficWithOptions(request *DescribeGroupTrafficRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupTrafficResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroupTraffic"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupTrafficResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the traffic of an API group.
//
// @param request - DescribeGroupTrafficRequest
//
// @return DescribeGroupTrafficResponse
func (client *Client) DescribeGroupTraffic(request *DescribeGroupTrafficRequest) (_result *DescribeGroupTrafficResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupTrafficResponse{}
	_body, _err := client.DescribeGroupTrafficWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeHistoryApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHistoryApisResponse
func (client *Client) DescribeHistoryApisWithOptions(request *DescribeHistoryApisRequest, runtime *util.RuntimeOptions) (_result *DescribeHistoryApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHistoryApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHistoryApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeHistoryApisRequest
//
// @return DescribeHistoryApisResponse
func (client *Client) DescribeHistoryApis(request *DescribeHistoryApisRequest) (_result *DescribeHistoryApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHistoryApisResponse{}
	_body, _err := client.DescribeHistoryApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the result of an OAS API import task.
//
// @param request - DescribeImportOASTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImportOASTaskResponse
func (client *Client) DescribeImportOASTaskWithOptions(request *DescribeImportOASTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeImportOASTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperationId)) {
		query["OperationId"] = request.OperationId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImportOASTask"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImportOASTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the result of an OAS API import task.
//
// @param request - DescribeImportOASTaskRequest
//
// @return DescribeImportOASTaskResponse
func (client *Client) DescribeImportOASTask(request *DescribeImportOASTaskRequest) (_result *DescribeImportOASTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImportOASTaskResponse{}
	_body, _err := client.DescribeImportOASTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of lost connections to a dedicated instance within a period of time.
//
// @param request - DescribeInstanceDropConnectionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceDropConnectionsResponse
func (client *Client) DescribeInstanceDropConnectionsWithOptions(request *DescribeInstanceDropConnectionsRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceDropConnectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SbcName)) {
		query["SbcName"] = request.SbcName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceDropConnections"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceDropConnectionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of lost connections to a dedicated instance within a period of time.
//
// @param request - DescribeInstanceDropConnectionsRequest
//
// @return DescribeInstanceDropConnectionsResponse
func (client *Client) DescribeInstanceDropConnections(request *DescribeInstanceDropConnectionsRequest) (_result *DescribeInstanceDropConnectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceDropConnectionsResponse{}
	_body, _err := client.DescribeInstanceDropConnectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of dropped packets within a period of time.
//
// @param request - DescribeInstanceDropPacketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceDropPacketResponse
func (client *Client) DescribeInstanceDropPacketWithOptions(request *DescribeInstanceDropPacketRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceDropPacketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SbcName)) {
		query["SbcName"] = request.SbcName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceDropPacket"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceDropPacketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of dropped packets within a period of time.
//
// @param request - DescribeInstanceDropPacketRequest
//
// @return DescribeInstanceDropPacketResponse
func (client *Client) DescribeInstanceDropPacket(request *DescribeInstanceDropPacketRequest) (_result *DescribeInstanceDropPacketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceDropPacketResponse{}
	_body, _err := client.DescribeInstanceDropPacketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the distribution of HTTP status codes of requests to a dedicated instance within a period of time.
//
// @param request - DescribeInstanceHttpCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceHttpCodeResponse
func (client *Client) DescribeInstanceHttpCodeWithOptions(request *DescribeInstanceHttpCodeRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceHttpCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceHttpCode"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceHttpCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the distribution of HTTP status codes of requests to a dedicated instance within a period of time.
//
// @param request - DescribeInstanceHttpCodeRequest
//
// @return DescribeInstanceHttpCodeResponse
func (client *Client) DescribeInstanceHttpCode(request *DescribeInstanceHttpCodeRequest) (_result *DescribeInstanceHttpCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceHttpCodeResponse{}
	_body, _err := client.DescribeInstanceHttpCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the average latency of a dedicated instance over a period of time.
//
// @param request - DescribeInstanceLatencyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceLatencyResponse
func (client *Client) DescribeInstanceLatencyWithOptions(request *DescribeInstanceLatencyRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceLatencyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceLatency"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceLatencyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the average latency of a dedicated instance over a period of time.
//
// @param request - DescribeInstanceLatencyRequest
//
// @return DescribeInstanceLatencyResponse
func (client *Client) DescribeInstanceLatency(request *DescribeInstanceLatencyRequest) (_result *DescribeInstanceLatencyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceLatencyResponse{}
	_body, _err := client.DescribeInstanceLatencyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of new connections to a dedicated instance within a period of time.
//
// @param request - DescribeInstanceNewConnectionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceNewConnectionsResponse
func (client *Client) DescribeInstanceNewConnectionsWithOptions(request *DescribeInstanceNewConnectionsRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceNewConnectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SbcName)) {
		query["SbcName"] = request.SbcName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceNewConnections"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceNewConnectionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of new connections to a dedicated instance within a period of time.
//
// @param request - DescribeInstanceNewConnectionsRequest
//
// @return DescribeInstanceNewConnectionsResponse
func (client *Client) DescribeInstanceNewConnections(request *DescribeInstanceNewConnectionsRequest) (_result *DescribeInstanceNewConnectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceNewConnectionsResponse{}
	_body, _err := client.DescribeInstanceNewConnectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the numbers of inbound and outbound packets of a dedicated instance within a period of time.
//
// @param request - DescribeInstancePacketsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstancePacketsResponse
func (client *Client) DescribeInstancePacketsWithOptions(request *DescribeInstancePacketsRequest, runtime *util.RuntimeOptions) (_result *DescribeInstancePacketsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SbcName)) {
		query["SbcName"] = request.SbcName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstancePackets"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstancePacketsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the numbers of inbound and outbound packets of a dedicated instance within a period of time.
//
// @param request - DescribeInstancePacketsRequest
//
// @return DescribeInstancePacketsResponse
func (client *Client) DescribeInstancePackets(request *DescribeInstancePacketsRequest) (_result *DescribeInstancePacketsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstancePacketsResponse{}
	_body, _err := client.DescribeInstancePacketsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of requests to a dedicated instance within a period of time.
//
// @param request - DescribeInstanceQpsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceQpsResponse
func (client *Client) DescribeInstanceQpsWithOptions(request *DescribeInstanceQpsRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceQpsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceQps"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceQpsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of requests to a dedicated instance within a period of time.
//
// @param request - DescribeInstanceQpsRequest
//
// @return DescribeInstanceQpsResponse
func (client *Client) DescribeInstanceQps(request *DescribeInstanceQpsRequest) (_result *DescribeInstanceQpsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceQpsResponse{}
	_body, _err := client.DescribeInstanceQpsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of concurrent connections to a dedicated instance within a period of time.
//
// @param request - DescribeInstanceSlbConnectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceSlbConnectResponse
func (client *Client) DescribeInstanceSlbConnectWithOptions(request *DescribeInstanceSlbConnectRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceSlbConnectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SbcName)) {
		query["SbcName"] = request.SbcName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceSlbConnect"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceSlbConnectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of concurrent connections to a dedicated instance within a period of time.
//
// @param request - DescribeInstanceSlbConnectRequest
//
// @return DescribeInstanceSlbConnectResponse
func (client *Client) DescribeInstanceSlbConnect(request *DescribeInstanceSlbConnectRequest) (_result *DescribeInstanceSlbConnectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceSlbConnectResponse{}
	_body, _err := client.DescribeInstanceSlbConnectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the request traffic and response traffic of a dedicated instance within a period of time.
//
// @param request - DescribeInstanceTrafficRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceTrafficResponse
func (client *Client) DescribeInstanceTrafficWithOptions(request *DescribeInstanceTrafficRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceTrafficResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceTraffic"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceTrafficResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the request traffic and response traffic of a dedicated instance within a period of time.
//
// @param request - DescribeInstanceTrafficRequest
//
// @return DescribeInstanceTrafficResponse
func (client *Client) DescribeInstanceTraffic(request *DescribeInstanceTrafficRequest) (_result *DescribeInstanceTrafficResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceTrafficResponse{}
	_body, _err := client.DescribeInstanceTrafficWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询实例信息
//
// @param request - DescribeInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstancesResponse
func (client *Client) DescribeInstancesWithOptions(request *DescribeInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnableTagAuthorization)) {
		query["EnableTagAuthorization"] = request.EnableTagAuthorization
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstances"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询实例信息
//
// @param request - DescribeInstancesRequest
//
// @return DescribeInstancesResponse
func (client *Client) DescribeInstances(request *DescribeInstancesRequest) (_result *DescribeInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstancesResponse{}
	_body, _err := client.DescribeInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the rule entries of an IP address-based traffic control policy.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- You can filter the query results by policy ID.
//
// @param request - DescribeIpControlPolicyItemsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeIpControlPolicyItemsResponse
func (client *Client) DescribeIpControlPolicyItemsWithOptions(request *DescribeIpControlPolicyItemsRequest, runtime *util.RuntimeOptions) (_result *DescribeIpControlPolicyItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyItemId)) {
		query["PolicyItemId"] = request.PolicyItemId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeIpControlPolicyItems"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeIpControlPolicyItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the rule entries of an IP address-based traffic control policy.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- You can filter the query results by policy ID.
//
// @param request - DescribeIpControlPolicyItemsRequest
//
// @return DescribeIpControlPolicyItemsResponse
func (client *Client) DescribeIpControlPolicyItems(request *DescribeIpControlPolicyItemsRequest) (_result *DescribeIpControlPolicyItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIpControlPolicyItemsResponse{}
	_body, _err := client.DescribeIpControlPolicyItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries custom access control lists (ACLs) on separate pages.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- This operation is used to query the ACLs in a region. Region is a system parameter.
//
// 	- You can filter the query results by ACL ID, name, or type.
//
// 	- This operation cannot be used to query specific policies. If you want to query specific policies, call the [DescribeIpControlPolicyItems](~~DescribeIpControlPolicyItems~~) operation.
//
// @param request - DescribeIpControlsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeIpControlsResponse
func (client *Client) DescribeIpControlsWithOptions(request *DescribeIpControlsRequest, runtime *util.RuntimeOptions) (_result *DescribeIpControlsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlName)) {
		query["IpControlName"] = request.IpControlName
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlType)) {
		query["IpControlType"] = request.IpControlType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeIpControls"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeIpControlsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries custom access control lists (ACLs) on separate pages.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- This operation is used to query the ACLs in a region. Region is a system parameter.
//
// 	- You can filter the query results by ACL ID, name, or type.
//
// 	- This operation cannot be used to query specific policies. If you want to query specific policies, call the [DescribeIpControlPolicyItems](~~DescribeIpControlPolicyItems~~) operation.
//
// @param request - DescribeIpControlsRequest
//
// @return DescribeIpControlsResponse
func (client *Client) DescribeIpControls(request *DescribeIpControlsRequest) (_result *DescribeIpControlsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIpControlsResponse{}
	_body, _err := client.DescribeIpControlsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeLogConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLogConfigResponse
func (client *Client) DescribeLogConfigWithOptions(request *DescribeLogConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLogConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LogType)) {
		query["LogType"] = request.LogType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLogConfig"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLogConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeLogConfigRequest
//
// @return DescribeLogConfigResponse
func (client *Client) DescribeLogConfig(request *DescribeLogConfigRequest) (_result *DescribeLogConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLogConfigResponse{}
	_body, _err := client.DescribeLogConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of remaining ordered relationships for a purchaser.
//
// @param request - DescribeMarketRemainsQuotaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMarketRemainsQuotaResponse
func (client *Client) DescribeMarketRemainsQuotaWithOptions(request *DescribeMarketRemainsQuotaRequest, runtime *util.RuntimeOptions) (_result *DescribeMarketRemainsQuotaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMarketRemainsQuota"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMarketRemainsQuotaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of remaining ordered relationships for a purchaser.
//
// @param request - DescribeMarketRemainsQuotaRequest
//
// @return DescribeMarketRemainsQuotaResponse
func (client *Client) DescribeMarketRemainsQuota(request *DescribeMarketRemainsQuotaRequest) (_result *DescribeMarketRemainsQuotaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMarketRemainsQuotaResponse{}
	_body, _err := client.DescribeMarketRemainsQuotaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the created models of an API group.
//
// Description:
//
//   Fuzzy queries are supported.
//
// @param request - DescribeModelsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeModelsResponse
func (client *Client) DescribeModelsWithOptions(request *DescribeModelsRequest, runtime *util.RuntimeOptions) (_result *DescribeModelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ModelId)) {
		query["ModelId"] = request.ModelId
	}

	if !tea.BoolValue(util.IsUnset(request.ModelName)) {
		query["ModelName"] = request.ModelName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeModels"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeModelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the created models of an API group.
//
// Description:
//
//   Fuzzy queries are supported.
//
// @param request - DescribeModelsRequest
//
// @return DescribeModelsResponse
func (client *Client) DescribeModels(request *DescribeModelsRequest) (_result *DescribeModelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeModelsResponse{}
	_body, _err := client.DescribeModelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据查询查询绑定的API列表
//
// @param request - DescribePluginApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePluginApisResponse
func (client *Client) DescribePluginApisWithOptions(request *DescribePluginApisRequest, runtime *util.RuntimeOptions) (_result *DescribePluginApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Method)) {
		query["Method"] = request.Method
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		query["Path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.PluginId)) {
		query["PluginId"] = request.PluginId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePluginApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePluginApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据查询查询绑定的API列表
//
// @param request - DescribePluginApisRequest
//
// @return DescribePluginApisResponse
func (client *Client) DescribePluginApis(request *DescribePluginApisRequest) (_result *DescribePluginApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePluginApisResponse{}
	_body, _err := client.DescribePluginApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribePluginSchemasRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePluginSchemasResponse
func (client *Client) DescribePluginSchemasWithOptions(request *DescribePluginSchemasRequest, runtime *util.RuntimeOptions) (_result *DescribePluginSchemasResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePluginSchemas"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePluginSchemasResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribePluginSchemasRequest
//
// @return DescribePluginSchemasResponse
func (client *Client) DescribePluginSchemas(request *DescribePluginSchemasRequest) (_result *DescribePluginSchemasResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePluginSchemasResponse{}
	_body, _err := client.DescribePluginSchemasWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribePluginTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePluginTemplatesResponse
func (client *Client) DescribePluginTemplatesWithOptions(request *DescribePluginTemplatesRequest, runtime *util.RuntimeOptions) (_result *DescribePluginTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.PluginName)) {
		query["PluginName"] = request.PluginName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePluginTemplates"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePluginTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribePluginTemplatesRequest
//
// @return DescribePluginTemplatesResponse
func (client *Client) DescribePluginTemplates(request *DescribePluginTemplatesRequest) (_result *DescribePluginTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePluginTemplatesResponse{}
	_body, _err := client.DescribePluginTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries API Gateway plug-ins and the details of the plug-ins.
//
// Description:
//
//   This operation supports pagination.
//
// 	- This operation allows you to query plug-ins by business type.
//
// 	- This operation allows you to query plug-ins by ID.
//
// 	- This operation allows you to query plug-ins by name.
//
// @param request - DescribePluginsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePluginsResponse
func (client *Client) DescribePluginsWithOptions(request *DescribePluginsRequest, runtime *util.RuntimeOptions) (_result *DescribePluginsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PluginId)) {
		query["PluginId"] = request.PluginId
	}

	if !tea.BoolValue(util.IsUnset(request.PluginName)) {
		query["PluginName"] = request.PluginName
	}

	if !tea.BoolValue(util.IsUnset(request.PluginType)) {
		query["PluginType"] = request.PluginType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePlugins"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePluginsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries API Gateway plug-ins and the details of the plug-ins.
//
// Description:
//
//   This operation supports pagination.
//
// 	- This operation allows you to query plug-ins by business type.
//
// 	- This operation allows you to query plug-ins by ID.
//
// 	- This operation allows you to query plug-ins by name.
//
// @param request - DescribePluginsRequest
//
// @return DescribePluginsResponse
func (client *Client) DescribePlugins(request *DescribePluginsRequest) (_result *DescribePluginsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePluginsResponse{}
	_body, _err := client.DescribePluginsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the plug-ins that are bound to a running API in an environment.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- This operation supports pagination.
//
// @param request - DescribePluginsByApiRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePluginsByApiResponse
func (client *Client) DescribePluginsByApiWithOptions(request *DescribePluginsByApiRequest, runtime *util.RuntimeOptions) (_result *DescribePluginsByApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePluginsByApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePluginsByApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the plug-ins that are bound to a running API in an environment.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- This operation supports pagination.
//
// @param request - DescribePluginsByApiRequest
//
// @return DescribePluginsByApiResponse
func (client *Client) DescribePluginsByApi(request *DescribePluginsByApiRequest) (_result *DescribePluginsByApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePluginsByApiResponse{}
	_body, _err := client.DescribePluginsByApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details about an API group purchased from Alibaba Cloud Marketplace.
//
// @param request - DescribePurchasedApiGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePurchasedApiGroupResponse
func (client *Client) DescribePurchasedApiGroupWithOptions(request *DescribePurchasedApiGroupRequest, runtime *util.RuntimeOptions) (_result *DescribePurchasedApiGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePurchasedApiGroup"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePurchasedApiGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details about an API group purchased from Alibaba Cloud Marketplace.
//
// @param request - DescribePurchasedApiGroupRequest
//
// @return DescribePurchasedApiGroupResponse
func (client *Client) DescribePurchasedApiGroup(request *DescribePurchasedApiGroupRequest) (_result *DescribePurchasedApiGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePurchasedApiGroupResponse{}
	_body, _err := client.DescribePurchasedApiGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries API groups that are purchased from Alibaba Cloud Marketplace.
//
// @param request - DescribePurchasedApiGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePurchasedApiGroupsResponse
func (client *Client) DescribePurchasedApiGroupsWithOptions(request *DescribePurchasedApiGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribePurchasedApiGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePurchasedApiGroups"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePurchasedApiGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries API groups that are purchased from Alibaba Cloud Marketplace.
//
// @param request - DescribePurchasedApiGroupsRequest
//
// @return DescribePurchasedApiGroupsResponse
func (client *Client) DescribePurchasedApiGroups(request *DescribePurchasedApiGroupsRequest) (_result *DescribePurchasedApiGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePurchasedApiGroupsResponse{}
	_body, _err := client.DescribePurchasedApiGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries APIs that are purchased from Alibaba Cloud Marketplace.
//
// @param request - DescribePurchasedApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePurchasedApisResponse
func (client *Client) DescribePurchasedApisWithOptions(request *DescribePurchasedApisRequest, runtime *util.RuntimeOptions) (_result *DescribePurchasedApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.Visibility)) {
		query["Visibility"] = request.Visibility
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePurchasedApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePurchasedApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries APIs that are purchased from Alibaba Cloud Marketplace.
//
// @param request - DescribePurchasedApisRequest
//
// @return DescribePurchasedApisResponse
func (client *Client) DescribePurchasedApis(request *DescribePurchasedApisRequest) (_result *DescribePurchasedApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePurchasedApisResponse{}
	_body, _err := client.DescribePurchasedApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the Alibaba Cloud regions that are supported by API Gateway.
//
// Description:
//
// This operation queries regions in which API Gateway is available.
//
// 	- This operation is intended for API providers and callers.
//
// @param request - DescribeRegionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRegionsResponse
func (client *Client) DescribeRegionsWithOptions(request *DescribeRegionsRequest, runtime *util.RuntimeOptions) (_result *DescribeRegionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRegions"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the Alibaba Cloud regions that are supported by API Gateway.
//
// Description:
//
// This operation queries regions in which API Gateway is available.
//
// 	- This operation is intended for API providers and callers.
//
// @param request - DescribeRegionsRequest
//
// @return DescribeRegionsResponse
func (client *Client) DescribeRegions(request *DescribeRegionsRequest) (_result *DescribeRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DescribeRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries backend signature keys.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- This operation is used to query the backend signature keys in a Region. Region is a system parameter.
//
// @param request - DescribeSignaturesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSignaturesResponse
func (client *Client) DescribeSignaturesWithOptions(request *DescribeSignaturesRequest, runtime *util.RuntimeOptions) (_result *DescribeSignaturesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureId)) {
		query["SignatureId"] = request.SignatureId
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureName)) {
		query["SignatureName"] = request.SignatureName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSignatures"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSignaturesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries backend signature keys.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- This operation is used to query the backend signature keys in a Region. Region is a system parameter.
//
// @param request - DescribeSignaturesRequest
//
// @return DescribeSignaturesResponse
func (client *Client) DescribeSignatures(request *DescribeSignaturesRequest) (_result *DescribeSignaturesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSignaturesResponse{}
	_body, _err := client.DescribeSignaturesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the backend signature keys that are bound to a specified API.
//
// Description:
//
//   This API is intended for API providers.
//
// @param request - DescribeSignaturesByApiRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSignaturesByApiResponse
func (client *Client) DescribeSignaturesByApiWithOptions(request *DescribeSignaturesByApiRequest, runtime *util.RuntimeOptions) (_result *DescribeSignaturesByApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSignaturesByApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSignaturesByApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the backend signature keys that are bound to a specified API.
//
// Description:
//
//   This API is intended for API providers.
//
// @param request - DescribeSignaturesByApiRequest
//
// @return DescribeSignaturesByApiResponse
func (client *Client) DescribeSignaturesByApi(request *DescribeSignaturesByApiRequest) (_result *DescribeSignaturesByApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSignaturesByApiResponse{}
	_body, _err := client.DescribeSignaturesByApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of API Gateway resources in a region.
//
// @param request - DescribeSummaryDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSummaryDataResponse
func (client *Client) DescribeSummaryDataWithOptions(request *DescribeSummaryDataRequest, runtime *util.RuntimeOptions) (_result *DescribeSummaryDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSummaryData"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSummaryDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of API Gateway resources in a region.
//
// @param request - DescribeSummaryDataRequest
//
// @return DescribeSummaryDataResponse
func (client *Client) DescribeSummaryData(request *DescribeSummaryDataRequest) (_result *DescribeSummaryDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSummaryDataResponse{}
	_body, _err := client.DescribeSummaryDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the common parameters supported by the system.
//
// Description:
//
//   This API is intended for API callers.
//
// 	- The response of this API contains the system parameters that are optional in API definitions.
//
// @param request - DescribeSystemParametersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSystemParametersResponse
func (client *Client) DescribeSystemParametersWithOptions(request *DescribeSystemParametersRequest, runtime *util.RuntimeOptions) (_result *DescribeSystemParametersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSystemParameters"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSystemParametersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the common parameters supported by the system.
//
// Description:
//
//   This API is intended for API callers.
//
// 	- The response of this API contains the system parameters that are optional in API definitions.
//
// @param request - DescribeSystemParametersRequest
//
// @return DescribeSystemParametersResponse
func (client *Client) DescribeSystemParameters(request *DescribeSystemParametersRequest) (_result *DescribeSystemParametersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSystemParametersResponse{}
	_body, _err := client.DescribeSystemParametersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries custom throttling policies and their details. Conditional queries are supported.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- This API can be used to query all existing throttling policies (including special throttling policies) and their details.
//
// 	- You can specify query conditions. For example, you can query the throttling policies bound to a specified API or in a specified environment.
//
// @param request - DescribeTrafficControlsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTrafficControlsResponse
func (client *Client) DescribeTrafficControlsWithOptions(request *DescribeTrafficControlsRequest, runtime *util.RuntimeOptions) (_result *DescribeTrafficControlsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlName)) {
		query["TrafficControlName"] = request.TrafficControlName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTrafficControls"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTrafficControlsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries custom throttling policies and their details. Conditional queries are supported.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- This API can be used to query all existing throttling policies (including special throttling policies) and their details.
//
// 	- You can specify query conditions. For example, you can query the throttling policies bound to a specified API or in a specified environment.
//
// @param request - DescribeTrafficControlsRequest
//
// @return DescribeTrafficControlsResponse
func (client *Client) DescribeTrafficControls(request *DescribeTrafficControlsRequest) (_result *DescribeTrafficControlsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTrafficControlsResponse{}
	_body, _err := client.DescribeTrafficControlsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the throttling policy that is bound to a specific API.
//
// Description:
//
//   This API is intended for API providers.
//
// @param request - DescribeTrafficControlsByApiRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTrafficControlsByApiResponse
func (client *Client) DescribeTrafficControlsByApiWithOptions(request *DescribeTrafficControlsByApiRequest, runtime *util.RuntimeOptions) (_result *DescribeTrafficControlsByApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTrafficControlsByApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTrafficControlsByApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the throttling policy that is bound to a specific API.
//
// Description:
//
//   This API is intended for API providers.
//
// @param request - DescribeTrafficControlsByApiRequest
//
// @return DescribeTrafficControlsByApiResponse
func (client *Client) DescribeTrafficControlsByApi(request *DescribeTrafficControlsByApiRequest) (_result *DescribeTrafficControlsByApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTrafficControlsByApiResponse{}
	_body, _err := client.DescribeTrafficControlsByApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询批量更新API后端元定结果
//
// @param request - DescribeUpdateBackendTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUpdateBackendTaskResponse
func (client *Client) DescribeUpdateBackendTaskWithOptions(request *DescribeUpdateBackendTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeUpdateBackendTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperationUid)) {
		query["OperationUid"] = request.OperationUid
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUpdateBackendTask"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUpdateBackendTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询批量更新API后端元定结果
//
// @param request - DescribeUpdateBackendTaskRequest
//
// @return DescribeUpdateBackendTaskResponse
func (client *Client) DescribeUpdateBackendTask(request *DescribeUpdateBackendTaskRequest) (_result *DescribeUpdateBackendTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUpdateBackendTaskResponse{}
	_body, _err := client.DescribeUpdateBackendTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeUpdateVpcInfoTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUpdateVpcInfoTaskResponse
func (client *Client) DescribeUpdateVpcInfoTaskWithOptions(request *DescribeUpdateVpcInfoTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeUpdateVpcInfoTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperationUid)) {
		query["OperationUid"] = request.OperationUid
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUpdateVpcInfoTask"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUpdateVpcInfoTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeUpdateVpcInfoTaskRequest
//
// @return DescribeUpdateVpcInfoTaskResponse
func (client *Client) DescribeUpdateVpcInfoTask(request *DescribeUpdateVpcInfoTaskRequest) (_result *DescribeUpdateVpcInfoTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUpdateVpcInfoTaskResponse{}
	_body, _err := client.DescribeUpdateVpcInfoTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries VPC access authorizations.
//
// @param request - DescribeVpcAccessesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVpcAccessesResponse
func (client *Client) DescribeVpcAccessesWithOptions(request *DescribeVpcAccessesRequest, runtime *util.RuntimeOptions) (_result *DescribeVpcAccessesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccurateQuery)) {
		query["AccurateQuery"] = request.AccurateQuery
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.VpcAccessId)) {
		query["VpcAccessId"] = request.VpcAccessId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVpcAccesses"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVpcAccessesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries VPC access authorizations.
//
// @param request - DescribeVpcAccessesRequest
//
// @return DescribeVpcAccessesResponse
func (client *Client) DescribeVpcAccesses(request *DescribeVpcAccessesRequest) (_result *DescribeVpcAccessesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpcAccessesResponse{}
	_body, _err := client.DescribeVpcAccessesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries zones in a region.
//
// @param request - DescribeZonesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeZonesResponse
func (client *Client) DescribeZonesWithOptions(request *DescribeZonesRequest, runtime *util.RuntimeOptions) (_result *DescribeZonesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeZones"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeZonesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries zones in a region.
//
// @param request - DescribeZonesRequest
//
// @return DescribeZonesResponse
func (client *Client) DescribeZones(request *DescribeZonesRequest) (_result *DescribeZonesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeZonesResponse{}
	_body, _err := client.DescribeZonesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Detaches APIs from an API product.
//
// @param request - DetachApiProductRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetachApiProductResponse
func (client *Client) DetachApiProductWithOptions(request *DetachApiProductRequest, runtime *util.RuntimeOptions) (_result *DetachApiProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiProductId)) {
		query["ApiProductId"] = request.ApiProductId
	}

	if !tea.BoolValue(util.IsUnset(request.Apis)) {
		query["Apis"] = request.Apis
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachApiProduct"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DetachApiProductResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Detaches APIs from an API product.
//
// @param request - DetachApiProductRequest
//
// @return DetachApiProductResponse
func (client *Client) DetachApiProduct(request *DetachApiProductRequest) (_result *DetachApiProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachApiProductResponse{}
	_body, _err := client.DetachApiProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 解绑插件
//
// @param request - DetachPluginRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetachPluginResponse
func (client *Client) DetachPluginWithOptions(request *DetachPluginRequest, runtime *util.RuntimeOptions) (_result *DetachPluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PluginId)) {
		query["PluginId"] = request.PluginId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachPlugin"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DetachPluginResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 解绑插件
//
// @param request - DetachPluginRequest
//
// @return DetachPluginResponse
func (client *Client) DetachPlugin(request *DetachPluginRequest) (_result *DetachPluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachPluginResponse{}
	_body, _err := client.DetachPluginWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// This feature provides instance-level access control capabilities for dedicated API Gateway instances. Disables access control on an instance.
//
// @param request - DisableInstanceAccessControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableInstanceAccessControlResponse
func (client *Client) DisableInstanceAccessControlWithOptions(request *DisableInstanceAccessControlRequest, runtime *util.RuntimeOptions) (_result *DisableInstanceAccessControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.AddressIPVersion)) {
		query["AddressIPVersion"] = request.AddressIPVersion
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableInstanceAccessControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableInstanceAccessControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// This feature provides instance-level access control capabilities for dedicated API Gateway instances. Disables access control on an instance.
//
// @param request - DisableInstanceAccessControlRequest
//
// @return DisableInstanceAccessControlResponse
func (client *Client) DisableInstanceAccessControl(request *DisableInstanceAccessControlRequest) (_result *DisableInstanceAccessControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableInstanceAccessControlResponse{}
	_body, _err := client.DisableInstanceAccessControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Checks the syntax before Swagger-compliant data is imported.
//
// @param tmpReq - DryRunSwaggerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DryRunSwaggerResponse
func (client *Client) DryRunSwaggerWithOptions(tmpReq *DryRunSwaggerRequest, runtime *util.RuntimeOptions) (_result *DryRunSwaggerResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DryRunSwaggerShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.GlobalCondition)) {
		request.GlobalConditionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.GlobalCondition, tea.String("GlobalCondition"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataFormat)) {
		query["DataFormat"] = request.DataFormat
	}

	if !tea.BoolValue(util.IsUnset(request.GlobalConditionShrink)) {
		query["GlobalCondition"] = request.GlobalConditionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Overwrite)) {
		query["Overwrite"] = request.Overwrite
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Data)) {
		body["Data"] = request.Data
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DryRunSwagger"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DryRunSwaggerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Checks the syntax before Swagger-compliant data is imported.
//
// @param request - DryRunSwaggerRequest
//
// @return DryRunSwaggerResponse
func (client *Client) DryRunSwagger(request *DryRunSwaggerRequest) (_result *DryRunSwaggerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DryRunSwaggerResponse{}
	_body, _err := client.DryRunSwaggerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 开启实例的访问控制
//
// @param request - EnableInstanceAccessControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableInstanceAccessControlResponse
func (client *Client) EnableInstanceAccessControlWithOptions(request *EnableInstanceAccessControlRequest, runtime *util.RuntimeOptions) (_result *EnableInstanceAccessControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.AclType)) {
		query["AclType"] = request.AclType
	}

	if !tea.BoolValue(util.IsUnset(request.AddressIPVersion)) {
		query["AddressIPVersion"] = request.AddressIPVersion
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableInstanceAccessControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableInstanceAccessControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 开启实例的访问控制
//
// @param request - EnableInstanceAccessControlRequest
//
// @return EnableInstanceAccessControlResponse
func (client *Client) EnableInstanceAccessControl(request *EnableInstanceAccessControlRequest) (_result *EnableInstanceAccessControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableInstanceAccessControlResponse{}
	_body, _err := client.EnableInstanceAccessControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Imports APIs based on the OAS standard.
//
// @param request - ImportOASRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportOASResponse
func (client *Client) ImportOASWithOptions(request *ImportOASRequest, runtime *util.RuntimeOptions) (_result *ImportOASResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthType)) {
		query["AuthType"] = request.AuthType
	}

	if !tea.BoolValue(util.IsUnset(request.BackendName)) {
		query["BackendName"] = request.BackendName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.IgnoreWarning)) {
		query["IgnoreWarning"] = request.IgnoreWarning
	}

	if !tea.BoolValue(util.IsUnset(request.OASVersion)) {
		query["OASVersion"] = request.OASVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Overwrite)) {
		query["Overwrite"] = request.Overwrite
	}

	if !tea.BoolValue(util.IsUnset(request.RequestMode)) {
		query["RequestMode"] = request.RequestMode
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SkipDryRun)) {
		query["SkipDryRun"] = request.SkipDryRun
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Data)) {
		body["Data"] = request.Data
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportOAS"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportOASResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Imports APIs based on the OAS standard.
//
// @param request - ImportOASRequest
//
// @return ImportOASResponse
func (client *Client) ImportOAS(request *ImportOASRequest) (_result *ImportOASResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportOASResponse{}
	_body, _err := client.ImportOASWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an API by importing Swagger-compliant data.
//
// Description:
//
//   Alibaba Cloud supports extensions based on Swagger 2.0.
//
// 	- Alibaba Cloud supports Swagger configuration files in JSON and YAML formats.
//
// @param tmpReq - ImportSwaggerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportSwaggerResponse
func (client *Client) ImportSwaggerWithOptions(tmpReq *ImportSwaggerRequest, runtime *util.RuntimeOptions) (_result *ImportSwaggerResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ImportSwaggerShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.GlobalCondition)) {
		request.GlobalConditionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.GlobalCondition, tea.String("GlobalCondition"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataFormat)) {
		query["DataFormat"] = request.DataFormat
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.GlobalConditionShrink)) {
		query["GlobalCondition"] = request.GlobalConditionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Overwrite)) {
		query["Overwrite"] = request.Overwrite
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Data)) {
		body["Data"] = request.Data
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportSwagger"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportSwaggerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an API by importing Swagger-compliant data.
//
// Description:
//
//   Alibaba Cloud supports extensions based on Swagger 2.0.
//
// 	- Alibaba Cloud supports Swagger configuration files in JSON and YAML formats.
//
// @param request - ImportSwaggerRequest
//
// @return ImportSwaggerResponse
func (client *Client) ImportSwagger(request *ImportSwaggerRequest) (_result *ImportSwaggerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportSwaggerResponse{}
	_body, _err := client.ImportSwaggerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the visible resource tags.
//
// Description:
//
//   The Tag.N.Key and Tag.N.Value parameters constitute a key-value pair.
//
// 	- ResourceId.N must meet all the key-value pairs that are entered. If you enter multiple key-value pairs, resources that contain the specified key-value pairs are returned.
//
// 	- This operation is used to query resource tags based on conditions. If no relationship matches the conditions, an empty list is returned.
//
// 	- You can query both user tags and visible system tags.
//
// 	- In addition to the required parameters, you can also specify ResourceId.N to query the visible resource tags of a specified resource in a region.
//
// 	- You can also specify Tag.N.Key to query the visible keys of a specified key in a region.
//
// 	- At least one of ResourceId.N, Tag.N.Key, and Tag.N.Value exists.
//
// 	- You can query tags of the same type or different types in a single operation.
//
// 	- You can query all your user types and visible system tags.
//
// @param request - ListTagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTagResources"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the visible resource tags.
//
// Description:
//
//   The Tag.N.Key and Tag.N.Value parameters constitute a key-value pair.
//
// 	- ResourceId.N must meet all the key-value pairs that are entered. If you enter multiple key-value pairs, resources that contain the specified key-value pairs are returned.
//
// 	- This operation is used to query resource tags based on conditions. If no relationship matches the conditions, an empty list is returned.
//
// 	- You can query both user tags and visible system tags.
//
// 	- In addition to the required parameters, you can also specify ResourceId.N to query the visible resource tags of a specified resource in a region.
//
// 	- You can also specify Tag.N.Key to query the visible keys of a specified key in a region.
//
// 	- At least one of ResourceId.N, Tag.N.Key, and Tag.N.Value exists.
//
// 	- You can query tags of the same type or different types in a single operation.
//
// 	- You can query all your user types and visible system tags.
//
// @param request - ListTagResourcesRequest
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the definition of an API.
//
// Description:
//
// *This operation is intended for API providers.**
//
// 	- This API operation requires a full update. Updates of partial parameters are not supported.
//
// 	- When you modify an API name, make sure that the name of each API within the same group is unique.
//
// 	- When you modify the request path, make sure that each request path within the same group is unique.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - ModifyApiRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyApiResponse
func (client *Client) ModifyApiWithOptions(request *ModifyApiRequest, runtime *util.RuntimeOptions) (_result *ModifyApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllowSignatureMethod)) {
		query["AllowSignatureMethod"] = request.AllowSignatureMethod
	}

	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.AppCodeAuthType)) {
		query["AppCodeAuthType"] = request.AppCodeAuthType
	}

	if !tea.BoolValue(util.IsUnset(request.AuthType)) {
		query["AuthType"] = request.AuthType
	}

	if !tea.BoolValue(util.IsUnset(request.BackendEnable)) {
		query["BackendEnable"] = request.BackendEnable
	}

	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DisableInternet)) {
		query["DisableInternet"] = request.DisableInternet
	}

	if !tea.BoolValue(util.IsUnset(request.ForceNonceCheck)) {
		query["ForceNonceCheck"] = request.ForceNonceCheck
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OpenIdConnectConfig)) {
		query["OpenIdConnectConfig"] = request.OpenIdConnectConfig
	}

	if !tea.BoolValue(util.IsUnset(request.RequestConfig)) {
		query["RequestConfig"] = request.RequestConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ResultBodyModel)) {
		query["ResultBodyModel"] = request.ResultBodyModel
	}

	if !tea.BoolValue(util.IsUnset(request.ResultType)) {
		query["ResultType"] = request.ResultType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceConfig)) {
		query["ServiceConfig"] = request.ServiceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Visibility)) {
		query["Visibility"] = request.Visibility
	}

	if !tea.BoolValue(util.IsUnset(request.WebSocketApiType)) {
		query["WebSocketApiType"] = request.WebSocketApiType
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConstantParameters)) {
		body["ConstantParameters"] = request.ConstantParameters
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorCodeSamples)) {
		body["ErrorCodeSamples"] = request.ErrorCodeSamples
	}

	if !tea.BoolValue(util.IsUnset(request.FailResultSample)) {
		body["FailResultSample"] = request.FailResultSample
	}

	if !tea.BoolValue(util.IsUnset(request.RequestParameters)) {
		body["RequestParameters"] = request.RequestParameters
	}

	if !tea.BoolValue(util.IsUnset(request.ResultDescriptions)) {
		body["ResultDescriptions"] = request.ResultDescriptions
	}

	if !tea.BoolValue(util.IsUnset(request.ResultSample)) {
		body["ResultSample"] = request.ResultSample
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceParameters)) {
		body["ServiceParameters"] = request.ServiceParameters
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceParametersMap)) {
		body["ServiceParametersMap"] = request.ServiceParametersMap
	}

	if !tea.BoolValue(util.IsUnset(request.SystemParameters)) {
		body["SystemParameters"] = request.SystemParameters
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the definition of an API.
//
// Description:
//
// *This operation is intended for API providers.**
//
// 	- This API operation requires a full update. Updates of partial parameters are not supported.
//
// 	- When you modify an API name, make sure that the name of each API within the same group is unique.
//
// 	- When you modify the request path, make sure that each request path within the same group is unique.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - ModifyApiRequest
//
// @return ModifyApiResponse
func (client *Client) ModifyApi(request *ModifyApiRequest) (_result *ModifyApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyApiResponse{}
	_body, _err := client.ModifyApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the draft definition of an API. This operation is different from the ModifyApi operation. This operation does not require all information about the API. You need to only specify the parameters that you want to modify. For example, if you want to change the authentication method of the API from Anonymous to APP, you specify APP as the value of AuthType and do not need to configure other parameters.
//
// @param request - ModifyApiConfigurationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyApiConfigurationResponse
func (client *Client) ModifyApiConfigurationWithOptions(request *ModifyApiConfigurationRequest, runtime *util.RuntimeOptions) (_result *ModifyApiConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllowSignatureMethod)) {
		query["AllowSignatureMethod"] = request.AllowSignatureMethod
	}

	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.AppCodeAuthType)) {
		query["AppCodeAuthType"] = request.AppCodeAuthType
	}

	if !tea.BoolValue(util.IsUnset(request.AuthType)) {
		query["AuthType"] = request.AuthType
	}

	if !tea.BoolValue(util.IsUnset(request.BackendName)) {
		query["BackendName"] = request.BackendName
	}

	if !tea.BoolValue(util.IsUnset(request.BodyFormat)) {
		query["BodyFormat"] = request.BodyFormat
	}

	if !tea.BoolValue(util.IsUnset(request.BodyModel)) {
		query["BodyModel"] = request.BodyModel
	}

	if !tea.BoolValue(util.IsUnset(request.ContentTypeCategory)) {
		query["ContentTypeCategory"] = request.ContentTypeCategory
	}

	if !tea.BoolValue(util.IsUnset(request.ContentTypeValue)) {
		query["ContentTypeValue"] = request.ContentTypeValue
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DisableInternet)) {
		query["DisableInternet"] = request.DisableInternet
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorCodeSamples)) {
		query["ErrorCodeSamples"] = request.ErrorCodeSamples
	}

	if !tea.BoolValue(util.IsUnset(request.FailResultSample)) {
		query["FailResultSample"] = request.FailResultSample
	}

	if !tea.BoolValue(util.IsUnset(request.ForceNonceCheck)) {
		query["ForceNonceCheck"] = request.ForceNonceCheck
	}

	if !tea.BoolValue(util.IsUnset(request.FunctionComputeConfig)) {
		query["FunctionComputeConfig"] = request.FunctionComputeConfig
	}

	if !tea.BoolValue(util.IsUnset(request.HttpConfig)) {
		query["HttpConfig"] = request.HttpConfig
	}

	if !tea.BoolValue(util.IsUnset(request.MockConfig)) {
		query["MockConfig"] = request.MockConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ModelName)) {
		query["ModelName"] = request.ModelName
	}

	if !tea.BoolValue(util.IsUnset(request.OssConfig)) {
		query["OssConfig"] = request.OssConfig
	}

	if !tea.BoolValue(util.IsUnset(request.PostBodyDescription)) {
		query["PostBodyDescription"] = request.PostBodyDescription
	}

	if !tea.BoolValue(util.IsUnset(request.RequestHttpMethod)) {
		query["RequestHttpMethod"] = request.RequestHttpMethod
	}

	if !tea.BoolValue(util.IsUnset(request.RequestMode)) {
		query["RequestMode"] = request.RequestMode
	}

	if !tea.BoolValue(util.IsUnset(request.RequestParameters)) {
		query["RequestParameters"] = request.RequestParameters
	}

	if !tea.BoolValue(util.IsUnset(request.RequestPath)) {
		query["RequestPath"] = request.RequestPath
	}

	if !tea.BoolValue(util.IsUnset(request.RequestProtocol)) {
		query["RequestProtocol"] = request.RequestProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.ResultSample)) {
		query["ResultSample"] = request.ResultSample
	}

	if !tea.BoolValue(util.IsUnset(request.ResultType)) {
		query["ResultType"] = request.ResultType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceParameters)) {
		query["ServiceParameters"] = request.ServiceParameters
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceParametersMap)) {
		query["ServiceParametersMap"] = request.ServiceParametersMap
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceProtocol)) {
		query["ServiceProtocol"] = request.ServiceProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceTimeout)) {
		query["ServiceTimeout"] = request.ServiceTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.UseBackendService)) {
		query["UseBackendService"] = request.UseBackendService
	}

	if !tea.BoolValue(util.IsUnset(request.Visibility)) {
		query["Visibility"] = request.Visibility
	}

	if !tea.BoolValue(util.IsUnset(request.VpcConfig)) {
		query["VpcConfig"] = request.VpcConfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyApiConfiguration"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyApiConfigurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the draft definition of an API. This operation is different from the ModifyApi operation. This operation does not require all information about the API. You need to only specify the parameters that you want to modify. For example, if you want to change the authentication method of the API from Anonymous to APP, you specify APP as the value of AuthType and do not need to configure other parameters.
//
// @param request - ModifyApiConfigurationRequest
//
// @return ModifyApiConfigurationResponse
func (client *Client) ModifyApiConfiguration(request *ModifyApiConfigurationRequest) (_result *ModifyApiConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyApiConfigurationResponse{}
	_body, _err := client.ModifyApiConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the name, description, or basepath of an existing API group.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - ModifyApiGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyApiGroupResponse
func (client *Client) ModifyApiGroupWithOptions(request *ModifyApiGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyApiGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BasePath)) {
		query["BasePath"] = request.BasePath
	}

	if !tea.BoolValue(util.IsUnset(request.CompatibleFlags)) {
		query["CompatibleFlags"] = request.CompatibleFlags
	}

	if !tea.BoolValue(util.IsUnset(request.CustomTraceConfig)) {
		query["CustomTraceConfig"] = request.CustomTraceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.CustomerConfigs)) {
		query["CustomerConfigs"] = request.CustomerConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.DefaultDomain)) {
		query["DefaultDomain"] = request.DefaultDomain
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.PassthroughHeaders)) {
		query["PassthroughHeaders"] = request.PassthroughHeaders
	}

	if !tea.BoolValue(util.IsUnset(request.RpcPattern)) {
		query["RpcPattern"] = request.RpcPattern
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SupportSSE)) {
		query["SupportSSE"] = request.SupportSSE
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.UserLogConfig)) {
		query["UserLogConfig"] = request.UserLogConfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyApiGroup"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyApiGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the name, description, or basepath of an existing API group.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - ModifyApiGroupRequest
//
// @return ModifyApiGroupResponse
func (client *Client) ModifyApiGroup(request *ModifyApiGroupRequest) (_result *ModifyApiGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyApiGroupResponse{}
	_body, _err := client.ModifyApiGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyApiGroupInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyApiGroupInstanceResponse
func (client *Client) ModifyApiGroupInstanceWithOptions(request *ModifyApiGroupInstanceRequest, runtime *util.RuntimeOptions) (_result *ModifyApiGroupInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.TargetInstanceId)) {
		query["TargetInstanceId"] = request.TargetInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyApiGroupInstance"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyApiGroupInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyApiGroupInstanceRequest
//
// @return ModifyApiGroupInstanceResponse
func (client *Client) ModifyApiGroupInstance(request *ModifyApiGroupInstanceRequest) (_result *ModifyApiGroupInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyApiGroupInstanceResponse{}
	_body, _err := client.ModifyApiGroupInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the network policy of an API group.
//
// @param request - ModifyApiGroupNetworkPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyApiGroupNetworkPolicyResponse
func (client *Client) ModifyApiGroupNetworkPolicyWithOptions(request *ModifyApiGroupNetworkPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyApiGroupNetworkPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HttpsPolicy)) {
		query["HttpsPolicy"] = request.HttpsPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.InnerDomainEnable)) {
		query["InnerDomainEnable"] = request.InnerDomainEnable
	}

	if !tea.BoolValue(util.IsUnset(request.InternetEnable)) {
		query["InternetEnable"] = request.InternetEnable
	}

	if !tea.BoolValue(util.IsUnset(request.InternetIPV6Enable)) {
		query["InternetIPV6Enable"] = request.InternetIPV6Enable
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.VpcIntranetEnable)) {
		query["VpcIntranetEnable"] = request.VpcIntranetEnable
	}

	if !tea.BoolValue(util.IsUnset(request.VpcSlbIntranetEnable)) {
		query["VpcSlbIntranetEnable"] = request.VpcSlbIntranetEnable
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyApiGroupNetworkPolicy"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyApiGroupNetworkPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the network policy of an API group.
//
// @param request - ModifyApiGroupNetworkPolicyRequest
//
// @return ModifyApiGroupNetworkPolicyResponse
func (client *Client) ModifyApiGroupNetworkPolicy(request *ModifyApiGroupNetworkPolicyRequest) (_result *ModifyApiGroupNetworkPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyApiGroupNetworkPolicyResponse{}
	_body, _err := client.ModifyApiGroupNetworkPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the VPC whitelist of an API group.
//
// @param request - ModifyApiGroupVpcWhitelistRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyApiGroupVpcWhitelistResponse
func (client *Client) ModifyApiGroupVpcWhitelistWithOptions(request *ModifyApiGroupVpcWhitelistRequest, runtime *util.RuntimeOptions) (_result *ModifyApiGroupVpcWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.VpcIds)) {
		query["VpcIds"] = request.VpcIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyApiGroupVpcWhitelist"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyApiGroupVpcWhitelistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the VPC whitelist of an API group.
//
// @param request - ModifyApiGroupVpcWhitelistRequest
//
// @return ModifyApiGroupVpcWhitelistResponse
func (client *Client) ModifyApiGroupVpcWhitelist(request *ModifyApiGroupVpcWhitelistRequest) (_result *ModifyApiGroupVpcWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyApiGroupVpcWhitelistResponse{}
	_body, _err := client.ModifyApiGroupVpcWhitelistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a specified application.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- **AppName*	- or **Description*	- can be modified. If these parameters are not specified, no modifications are made and the operation will directly return a success response.
//
// 	- You can call this operation up to 50 times per second per account.
//
// @param request - ModifyAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyAppResponse
func (client *Client) ModifyAppWithOptions(request *ModifyAppRequest, runtime *util.RuntimeOptions) (_result *ModifyAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Extend)) {
		query["Extend"] = request.Extend
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyApp"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a specified application.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- **AppName*	- or **Description*	- can be modified. If these parameters are not specified, no modifications are made and the operation will directly return a success response.
//
// 	- You can call this operation up to 50 times per second per account.
//
// @param request - ModifyAppRequest
//
// @return ModifyAppResponse
func (client *Client) ModifyApp(request *ModifyAppRequest) (_result *ModifyAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAppResponse{}
	_body, _err := client.ModifyAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改后端服务
//
// @param request - ModifyBackendRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyBackendResponse
func (client *Client) ModifyBackendWithOptions(request *ModifyBackendRequest, runtime *util.RuntimeOptions) (_result *ModifyBackendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.BackendName)) {
		query["BackendName"] = request.BackendName
	}

	if !tea.BoolValue(util.IsUnset(request.BackendType)) {
		query["BackendType"] = request.BackendType
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyBackend"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyBackendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改后端服务
//
// @param request - ModifyBackendRequest
//
// @return ModifyBackendResponse
func (client *Client) ModifyBackend(request *ModifyBackendRequest) (_result *ModifyBackendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBackendResponse{}
	_body, _err := client.ModifyBackendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改后端服务在环境上的定义
//
// @param request - ModifyBackendModelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyBackendModelResponse
func (client *Client) ModifyBackendModelWithOptions(request *ModifyBackendModelRequest, runtime *util.RuntimeOptions) (_result *ModifyBackendModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.BackendModelData)) {
		query["BackendModelData"] = request.BackendModelData
	}

	if !tea.BoolValue(util.IsUnset(request.BackendModelId)) {
		query["BackendModelId"] = request.BackendModelId
	}

	if !tea.BoolValue(util.IsUnset(request.BackendType)) {
		query["BackendType"] = request.BackendType
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyBackendModel"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyBackendModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改后端服务在环境上的定义
//
// @param request - ModifyBackendModelRequest
//
// @return ModifyBackendModelResponse
func (client *Client) ModifyBackendModel(request *ModifyBackendModelRequest) (_result *ModifyBackendModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBackendModelResponse{}
	_body, _err := client.ModifyBackendModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the name of a custom dataset.
//
// @param request - ModifyDatasetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDatasetResponse
func (client *Client) ModifyDatasetWithOptions(request *ModifyDatasetRequest, runtime *util.RuntimeOptions) (_result *ModifyDatasetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		query["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetName)) {
		query["DatasetName"] = request.DatasetName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDataset"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDatasetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the name of a custom dataset.
//
// @param request - ModifyDatasetRequest
//
// @return ModifyDatasetResponse
func (client *Client) ModifyDataset(request *ModifyDatasetRequest) (_result *ModifyDatasetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDatasetResponse{}
	_body, _err := client.ModifyDatasetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the expiration time and description of a data entry in a custom dataset.
//
// @param request - ModifyDatasetItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDatasetItemResponse
func (client *Client) ModifyDatasetItemWithOptions(request *ModifyDatasetItemRequest, runtime *util.RuntimeOptions) (_result *ModifyDatasetItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		query["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetItemId)) {
		query["DatasetItemId"] = request.DatasetItemId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiredTime)) {
		query["ExpiredTime"] = request.ExpiredTime
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDatasetItem"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDatasetItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the expiration time and description of a data entry in a custom dataset.
//
// @param request - ModifyDatasetItemRequest
//
// @return ModifyDatasetItemResponse
func (client *Client) ModifyDatasetItem(request *ModifyDatasetItemRequest) (_result *ModifyDatasetItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDatasetItemResponse{}
	_body, _err := client.ModifyDatasetItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改API网关实例属性
//
// @param tmpReq - ModifyInstanceAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyInstanceAttributeResponse
func (client *Client) ModifyInstanceAttributeWithOptions(tmpReq *ModifyInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ModifyInstanceAttributeShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ToConnectVpcIpBlock)) {
		request.ToConnectVpcIpBlockShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ToConnectVpcIpBlock, tea.String("ToConnectVpcIpBlock"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeleteVpcIpBlock)) {
		query["DeleteVpcIpBlock"] = request.DeleteVpcIpBlock
	}

	if !tea.BoolValue(util.IsUnset(request.EgressIpv6Enable)) {
		query["EgressIpv6Enable"] = request.EgressIpv6Enable
	}

	if !tea.BoolValue(util.IsUnset(request.HttpsPolicy)) {
		query["HttpsPolicy"] = request.HttpsPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.IPV6Enabled)) {
		query["IPV6Enabled"] = request.IPV6Enabled
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.IntranetSegments)) {
		query["IntranetSegments"] = request.IntranetSegments
	}

	if !tea.BoolValue(util.IsUnset(request.MaintainEndTime)) {
		query["MaintainEndTime"] = request.MaintainEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaintainStartTime)) {
		query["MaintainStartTime"] = request.MaintainStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.ToConnectVpcIpBlockShrink)) {
		query["ToConnectVpcIpBlock"] = request.ToConnectVpcIpBlockShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	if !tea.BoolValue(util.IsUnset(request.VpcSlbIntranetEnable)) {
		query["VpcSlbIntranetEnable"] = request.VpcSlbIntranetEnable
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceAttribute"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改API网关实例属性
//
// @param request - ModifyInstanceAttributeRequest
//
// @return ModifyInstanceAttributeResponse
func (client *Client) ModifyInstanceAttribute(request *ModifyInstanceAttributeRequest) (_result *ModifyInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAttributeResponse{}
	_body, _err := client.ModifyInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Upgrades or downgrades the configurations of an API Gateway instance.
//
// @param request - ModifyInstanceSpecRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyInstanceSpecResponse
func (client *Client) ModifyInstanceSpecWithOptions(request *ModifyInstanceSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceSpec)) {
		query["InstanceSpec"] = request.InstanceSpec
	}

	if !tea.BoolValue(util.IsUnset(request.ModifyAction)) {
		query["ModifyAction"] = request.ModifyAction
	}

	if !tea.BoolValue(util.IsUnset(request.SkipWaitSwitch)) {
		query["SkipWaitSwitch"] = request.SkipWaitSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceSpec"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceSpecResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Upgrades or downgrades the configurations of an API Gateway instance.
//
// @param request - ModifyInstanceSpecRequest
//
// @return ModifyInstanceSpecResponse
func (client *Client) ModifyInstanceSpec(request *ModifyInstanceSpecRequest) (_result *ModifyInstanceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceSpecResponse{}
	_body, _err := client.ModifyInstanceSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the VPC domain name policy of an API group.
//
// @param request - ModifyIntranetDomainPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyIntranetDomainPolicyResponse
func (client *Client) ModifyIntranetDomainPolicyWithOptions(request *ModifyIntranetDomainPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyIntranetDomainPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.VpcIntranetEnable)) {
		query["VpcIntranetEnable"] = request.VpcIntranetEnable
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyIntranetDomainPolicy"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyIntranetDomainPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the VPC domain name policy of an API group.
//
// @param request - ModifyIntranetDomainPolicyRequest
//
// @return ModifyIntranetDomainPolicyResponse
func (client *Client) ModifyIntranetDomainPolicy(request *ModifyIntranetDomainPolicyRequest) (_result *ModifyIntranetDomainPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyIntranetDomainPolicyResponse{}
	_body, _err := client.ModifyIntranetDomainPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies an access control list (ACL).
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- This operation allows you to modify only the name and description of an ACL. You cannot modify the type of the ACL.
//
// @param request - ModifyIpControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyIpControlResponse
func (client *Client) ModifyIpControlWithOptions(request *ModifyIpControlRequest, runtime *util.RuntimeOptions) (_result *ModifyIpControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlName)) {
		query["IpControlName"] = request.IpControlName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyIpControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyIpControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies an access control list (ACL).
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- This operation allows you to modify only the name and description of an ACL. You cannot modify the type of the ACL.
//
// @param request - ModifyIpControlRequest
//
// @return ModifyIpControlResponse
func (client *Client) ModifyIpControl(request *ModifyIpControlRequest) (_result *ModifyIpControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyIpControlResponse{}
	_body, _err := client.ModifyIpControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a policy in an access control list (ACL).
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- The modification immediately takes effect on all the APIs that are bound to the policy.
//
// 	- This operation causes a full modification of the content of a policy.
//
// @param request - ModifyIpControlPolicyItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyIpControlPolicyItemResponse
func (client *Client) ModifyIpControlPolicyItemWithOptions(request *ModifyIpControlPolicyItemRequest, runtime *util.RuntimeOptions) (_result *ModifyIpControlPolicyItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.CidrIp)) {
		query["CidrIp"] = request.CidrIp
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyItemId)) {
		query["PolicyItemId"] = request.PolicyItemId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyIpControlPolicyItem"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyIpControlPolicyItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a policy in an access control list (ACL).
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- The modification immediately takes effect on all the APIs that are bound to the policy.
//
// 	- This operation causes a full modification of the content of a policy.
//
// @param request - ModifyIpControlPolicyItemRequest
//
// @return ModifyIpControlPolicyItemResponse
func (client *Client) ModifyIpControlPolicyItem(request *ModifyIpControlPolicyItemRequest) (_result *ModifyIpControlPolicyItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyIpControlPolicyItemResponse{}
	_body, _err := client.ModifyIpControlPolicyItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyLogConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyLogConfigResponse
func (client *Client) ModifyLogConfigWithOptions(request *ModifyLogConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyLogConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LogType)) {
		query["LogType"] = request.LogType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SlsLogStore)) {
		query["SlsLogStore"] = request.SlsLogStore
	}

	if !tea.BoolValue(util.IsUnset(request.SlsProject)) {
		query["SlsProject"] = request.SlsProject
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyLogConfig"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyLogConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyLogConfigRequest
//
// @return ModifyLogConfigResponse
func (client *Client) ModifyLogConfig(request *ModifyLogConfigRequest) (_result *ModifyLogConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyLogConfigResponse{}
	_body, _err := client.ModifyLogConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the model of an API group.
//
// @param request - ModifyModelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyModelResponse
func (client *Client) ModifyModelWithOptions(request *ModifyModelRequest, runtime *util.RuntimeOptions) (_result *ModifyModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ModelName)) {
		query["ModelName"] = request.ModelName
	}

	if !tea.BoolValue(util.IsUnset(request.NewModelName)) {
		query["NewModelName"] = request.NewModelName
	}

	if !tea.BoolValue(util.IsUnset(request.Schema)) {
		query["Schema"] = request.Schema
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyModel"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Updates the model of an API group.
//
// @param request - ModifyModelRequest
//
// @return ModifyModelResponse
func (client *Client) ModifyModel(request *ModifyModelRequest) (_result *ModifyModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyModelResponse{}
	_body, _err := client.ModifyModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the information of a plug-in.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- The name of the plug-in must be unique.
//
// @param request - ModifyPluginRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyPluginResponse
func (client *Client) ModifyPluginWithOptions(request *ModifyPluginRequest, runtime *util.RuntimeOptions) (_result *ModifyPluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.PluginData)) {
		query["PluginData"] = request.PluginData
	}

	if !tea.BoolValue(util.IsUnset(request.PluginId)) {
		query["PluginId"] = request.PluginId
	}

	if !tea.BoolValue(util.IsUnset(request.PluginName)) {
		query["PluginName"] = request.PluginName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyPlugin"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyPluginResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the information of a plug-in.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- The name of the plug-in must be unique.
//
// @param request - ModifyPluginRequest
//
// @return ModifyPluginResponse
func (client *Client) ModifyPlugin(request *ModifyPluginRequest) (_result *ModifyPluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPluginResponse{}
	_body, _err := client.ModifyPluginWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a backend signature key.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- This API operation modifies the name, Key value, and Secret value of an existing signature key.
//
// 	- Note that the modification takes effect immediately. If the key has been bound to an API, you must adjust the backend signature verification based on the new key accordingly.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - ModifySignatureRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySignatureResponse
func (client *Client) ModifySignatureWithOptions(request *ModifySignatureRequest, runtime *util.RuntimeOptions) (_result *ModifySignatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureId)) {
		query["SignatureId"] = request.SignatureId
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureKey)) {
		query["SignatureKey"] = request.SignatureKey
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureName)) {
		query["SignatureName"] = request.SignatureName
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureSecret)) {
		query["SignatureSecret"] = request.SignatureSecret
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySignature"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySignatureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a backend signature key.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- This API operation modifies the name, Key value, and Secret value of an existing signature key.
//
// 	- Note that the modification takes effect immediately. If the key has been bound to an API, you must adjust the backend signature verification based on the new key accordingly.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - ModifySignatureRequest
//
// @return ModifySignatureResponse
func (client *Client) ModifySignature(request *ModifySignatureRequest) (_result *ModifySignatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySignatureResponse{}
	_body, _err := client.ModifySignatureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the settings of a custom throttling policy.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- The modifications take effect on the bound APIs instantly.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - ModifyTrafficControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyTrafficControlResponse
func (client *Client) ModifyTrafficControlWithOptions(request *ModifyTrafficControlRequest, runtime *util.RuntimeOptions) (_result *ModifyTrafficControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiDefault)) {
		query["ApiDefault"] = request.ApiDefault
	}

	if !tea.BoolValue(util.IsUnset(request.AppDefault)) {
		query["AppDefault"] = request.AppDefault
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlName)) {
		query["TrafficControlName"] = request.TrafficControlName
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlUnit)) {
		query["TrafficControlUnit"] = request.TrafficControlUnit
	}

	if !tea.BoolValue(util.IsUnset(request.UserDefault)) {
		query["UserDefault"] = request.UserDefault
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTrafficControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTrafficControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the settings of a custom throttling policy.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- The modifications take effect on the bound APIs instantly.
//
// 	- The QPS limit on this operation is 50 per user.
//
// @param request - ModifyTrafficControlRequest
//
// @return ModifyTrafficControlResponse
func (client *Client) ModifyTrafficControl(request *ModifyTrafficControlRequest) (_result *ModifyTrafficControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTrafficControlResponse{}
	_body, _err := client.ModifyTrafficControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a virtual private cloud (VPC) authorization and updates the metadata of the API associated with the VPC authorization.
//
// @param request - ModifyVpcAccessAndUpdateApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyVpcAccessAndUpdateApisResponse
func (client *Client) ModifyVpcAccessAndUpdateApisWithOptions(request *ModifyVpcAccessAndUpdateApisRequest, runtime *util.RuntimeOptions) (_result *ModifyVpcAccessAndUpdateApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NeedBatchWork)) {
		query["NeedBatchWork"] = request.NeedBatchWork
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.Refresh)) {
		query["Refresh"] = request.Refresh
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcTargetHostName)) {
		query["VpcTargetHostName"] = request.VpcTargetHostName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyVpcAccessAndUpdateApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyVpcAccessAndUpdateApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a virtual private cloud (VPC) authorization and updates the metadata of the API associated with the VPC authorization.
//
// @param request - ModifyVpcAccessAndUpdateApisRequest
//
// @return ModifyVpcAccessAndUpdateApisResponse
func (client *Client) ModifyVpcAccessAndUpdateApis(request *ModifyVpcAccessAndUpdateApisRequest) (_result *ModifyVpcAccessAndUpdateApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVpcAccessAndUpdateApisResponse{}
	_body, _err := client.ModifyVpcAccessAndUpdateApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - OpenApiGatewayServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OpenApiGatewayServiceResponse
func (client *Client) OpenApiGatewayServiceWithOptions(runtime *util.RuntimeOptions) (_result *OpenApiGatewayServiceResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("OpenApiGatewayService"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenApiGatewayServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return OpenApiGatewayServiceResponse
func (client *Client) OpenApiGatewayService() (_result *OpenApiGatewayServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenApiGatewayServiceResponse{}
	_body, _err := client.OpenApiGatewayServiceWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the request logs of a user.
//
// @param request - QueryRequestLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryRequestLogsResponse
func (client *Client) QueryRequestLogsWithOptions(request *QueryRequestLogsRequest, runtime *util.RuntimeOptions) (_result *QueryRequestLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RequestLogId)) {
		query["RequestLogId"] = request.RequestLogId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryRequestLogs"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryRequestLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the request logs of a user.
//
// @param request - QueryRequestLogsRequest
//
// @return QueryRequestLogsResponse
func (client *Client) QueryRequestLogs(request *QueryRequestLogsRequest) (_result *QueryRequestLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryRequestLogsResponse{}
	_body, _err := client.QueryRequestLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Reactivates a custom domain name whose validity status is Abnormal.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- You must solve the problem that is mentioned in the domain name exception prompt before you can reactivate the domain name.
//
// 	- A typical reason why a custom domain name becomes abnormal is that the domain name does not have an ICP filing or the domain name is included in a blacklist by the administration. When a custom domain name is abnormal, users cannot use it to access APIs.
//
// 	- You can call this operation to reactivate the domain name to resume normal access.
//
// @param request - ReactivateDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReactivateDomainResponse
func (client *Client) ReactivateDomainWithOptions(request *ReactivateDomainRequest, runtime *util.RuntimeOptions) (_result *ReactivateDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReactivateDomain"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReactivateDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Reactivates a custom domain name whose validity status is Abnormal.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- You must solve the problem that is mentioned in the domain name exception prompt before you can reactivate the domain name.
//
// 	- A typical reason why a custom domain name becomes abnormal is that the domain name does not have an ICP filing or the domain name is included in a blacklist by the administration. When a custom domain name is abnormal, users cannot use it to access APIs.
//
// 	- You can call this operation to reactivate the domain name to resume normal access.
//
// @param request - ReactivateDomainRequest
//
// @return ReactivateDomainResponse
func (client *Client) ReactivateDomain(request *ReactivateDomainRequest) (_result *ReactivateDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReactivateDomainResponse{}
	_body, _err := client.ReactivateDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除访问控制策略中IP条目
//
// @param request - RemoveAccessControlListEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveAccessControlListEntryResponse
func (client *Client) RemoveAccessControlListEntryWithOptions(request *RemoveAccessControlListEntryRequest, runtime *util.RuntimeOptions) (_result *RemoveAccessControlListEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclEntrys)) {
		query["AclEntrys"] = request.AclEntrys
	}

	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveAccessControlListEntry"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveAccessControlListEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除访问控制策略中IP条目
//
// @param request - RemoveAccessControlListEntryRequest
//
// @return RemoveAccessControlListEntryResponse
func (client *Client) RemoveAccessControlListEntry(request *RemoveAccessControlListEntryRequest) (_result *RemoveAccessControlListEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveAccessControlListEntryResponse{}
	_body, _err := client.RemoveAccessControlListEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Revokes permissions on API products from an application.
//
// @param tmpReq - RemoveApiProductsAuthoritiesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveApiProductsAuthoritiesResponse
func (client *Client) RemoveApiProductsAuthoritiesWithOptions(tmpReq *RemoveApiProductsAuthoritiesRequest, runtime *util.RuntimeOptions) (_result *RemoveApiProductsAuthoritiesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RemoveApiProductsAuthoritiesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ApiProductIds)) {
		request.ApiProductIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ApiProductIds, tea.String("ApiProductIds"), tea.String("simple"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiProductIdsShrink)) {
		query["ApiProductIds"] = request.ApiProductIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveApiProductsAuthorities"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveApiProductsAuthoritiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Revokes permissions on API products from an application.
//
// @param request - RemoveApiProductsAuthoritiesRequest
//
// @return RemoveApiProductsAuthoritiesResponse
func (client *Client) RemoveApiProductsAuthorities(request *RemoveApiProductsAuthoritiesRequest) (_result *RemoveApiProductsAuthoritiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveApiProductsAuthoritiesResponse{}
	_body, _err := client.RemoveApiProductsAuthoritiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Revokes the access permissions on multiple APIs from a specified application.
//
// Description:
//
//   This operation is intended for API providers and callers.
//
// 	- Before you revoke access permissions, check by whom the permissions were granted. API providers can only revoke permissions granted by a Provider, and API callers can only revoke permissions granted by a Consumer.
//
// @param request - RemoveApisAuthoritiesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveApisAuthoritiesResponse
func (client *Client) RemoveApisAuthoritiesWithOptions(request *RemoveApisAuthoritiesRequest, runtime *util.RuntimeOptions) (_result *RemoveApisAuthoritiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveApisAuthorities"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveApisAuthoritiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Revokes the access permissions on multiple APIs from a specified application.
//
// Description:
//
//   This operation is intended for API providers and callers.
//
// 	- Before you revoke access permissions, check by whom the permissions were granted. API providers can only revoke permissions granted by a Provider, and API callers can only revoke permissions granted by a Consumer.
//
// @param request - RemoveApisAuthoritiesRequest
//
// @return RemoveApisAuthoritiesResponse
func (client *Client) RemoveApisAuthorities(request *RemoveApisAuthoritiesRequest) (_result *RemoveApisAuthoritiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveApisAuthoritiesResponse{}
	_body, _err := client.RemoveApisAuthoritiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Revokes the access permissions on a specified API from multiple applications. In this case, multiple applications map to a single API.
//
// Description:
//
//   This operation is intended for API providers and callers.
//
// 	- Before you revoke access permissions, check by whom the permissions were granted. API providers can only revoke permissions granted by a Provider, and API callers can only revoke permissions granted by a Consumer.
//
// @param request - RemoveAppsAuthoritiesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveAppsAuthoritiesResponse
func (client *Client) RemoveAppsAuthoritiesWithOptions(request *RemoveAppsAuthoritiesRequest, runtime *util.RuntimeOptions) (_result *RemoveAppsAuthoritiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.AppIds)) {
		query["AppIds"] = request.AppIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveAppsAuthorities"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveAppsAuthoritiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Revokes the access permissions on a specified API from multiple applications. In this case, multiple applications map to a single API.
//
// Description:
//
//   This operation is intended for API providers and callers.
//
// 	- Before you revoke access permissions, check by whom the permissions were granted. API providers can only revoke permissions granted by a Provider, and API callers can only revoke permissions granted by a Consumer.
//
// @param request - RemoveAppsAuthoritiesRequest
//
// @return RemoveAppsAuthoritiesResponse
func (client *Client) RemoveAppsAuthorities(request *RemoveAppsAuthoritiesRequest) (_result *RemoveAppsAuthoritiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveAppsAuthoritiesResponse{}
	_body, _err := client.RemoveAppsAuthoritiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unbinds an API from an access control list (ACL).
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- The unbinding takes effect immediately. After the API is unbound from the ACL, the corresponding environment does not have any IP address access control in place for the API.
//
// @param request - RemoveIpControlApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveIpControlApisResponse
func (client *Client) RemoveIpControlApisWithOptions(request *RemoveIpControlApisRequest, runtime *util.RuntimeOptions) (_result *RemoveIpControlApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveIpControlApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveIpControlApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unbinds an API from an access control list (ACL).
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- The unbinding takes effect immediately. After the API is unbound from the ACL, the corresponding environment does not have any IP address access control in place for the API.
//
// @param request - RemoveIpControlApisRequest
//
// @return RemoveIpControlApisResponse
func (client *Client) RemoveIpControlApis(request *RemoveIpControlApisRequest) (_result *RemoveIpControlApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveIpControlApisResponse{}
	_body, _err := client.RemoveIpControlApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes one or more policies from an access control list (ACL).
//
// Description:
//
//   This operation is intended for API providers.
//
// @param request - RemoveIpControlPolicyItemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveIpControlPolicyItemResponse
func (client *Client) RemoveIpControlPolicyItemWithOptions(request *RemoveIpControlPolicyItemRequest, runtime *util.RuntimeOptions) (_result *RemoveIpControlPolicyItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyItemIds)) {
		query["PolicyItemIds"] = request.PolicyItemIds
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveIpControlPolicyItem"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveIpControlPolicyItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes one or more policies from an access control list (ACL).
//
// Description:
//
//   This operation is intended for API providers.
//
// @param request - RemoveIpControlPolicyItemRequest
//
// @return RemoveIpControlPolicyItemResponse
func (client *Client) RemoveIpControlPolicyItem(request *RemoveIpControlPolicyItemRequest) (_result *RemoveIpControlPolicyItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveIpControlPolicyItemResponse{}
	_body, _err := client.RemoveIpControlPolicyItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unbinds a backend signature key from APIs.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- The operation takes effect immediately. The request sent from API Gateway to the backend service does not contain the signature string. The corresponding verification step can be removed from the backend.
//
// @param request - RemoveSignatureApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveSignatureApisResponse
func (client *Client) RemoveSignatureApisWithOptions(request *RemoveSignatureApisRequest, runtime *util.RuntimeOptions) (_result *RemoveSignatureApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureId)) {
		query["SignatureId"] = request.SignatureId
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveSignatureApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveSignatureApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unbinds a backend signature key from APIs.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- The operation takes effect immediately. The request sent from API Gateway to the backend service does not contain the signature string. The corresponding verification step can be removed from the backend.
//
// @param request - RemoveSignatureApisRequest
//
// @return RemoveSignatureApisResponse
func (client *Client) RemoveSignatureApis(request *RemoveSignatureApisRequest) (_result *RemoveSignatureApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveSignatureApisResponse{}
	_body, _err := client.RemoveSignatureApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unbinds a specified throttling policy from APIs.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- This API allows you to unbind a specified throttling policy from up to 100 APIs at a time.
//
// @param request - RemoveTrafficControlApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveTrafficControlApisResponse
func (client *Client) RemoveTrafficControlApisWithOptions(request *RemoveTrafficControlApisRequest, runtime *util.RuntimeOptions) (_result *RemoveTrafficControlApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveTrafficControlApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveTrafficControlApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unbinds a specified throttling policy from APIs.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- This API allows you to unbind a specified throttling policy from up to 100 APIs at a time.
//
// @param request - RemoveTrafficControlApisRequest
//
// @return RemoveTrafficControlApisResponse
func (client *Client) RemoveTrafficControlApis(request *RemoveTrafficControlApisRequest) (_result *RemoveTrafficControlApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveTrafficControlApisResponse{}
	_body, _err := client.RemoveTrafficControlApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a VPC authorization without unpublishing the associated APIs.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- Revokes the permissions of API Gateway to access your VPC instance.
//
// >  Deleting an authorization affects the associated API. Before you delete the authorization, make sure that it is not used by the API.
//
// @param request - RemoveVpcAccessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveVpcAccessResponse
func (client *Client) RemoveVpcAccessWithOptions(request *RemoveVpcAccessRequest, runtime *util.RuntimeOptions) (_result *RemoveVpcAccessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NeedBatchWork)) {
		query["NeedBatchWork"] = request.NeedBatchWork
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveVpcAccess"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveVpcAccessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a VPC authorization without unpublishing the associated APIs.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- Revokes the permissions of API Gateway to access your VPC instance.
//
// >  Deleting an authorization affects the associated API. Before you delete the authorization, make sure that it is not used by the API.
//
// @param request - RemoveVpcAccessRequest
//
// @return RemoveVpcAccessResponse
func (client *Client) RemoveVpcAccess(request *RemoveVpcAccessRequest) (_result *RemoveVpcAccessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveVpcAccessResponse{}
	_body, _err := client.RemoveVpcAccessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RemoveVpcAccessAndAbolishApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveVpcAccessAndAbolishApisResponse
func (client *Client) RemoveVpcAccessAndAbolishApisWithOptions(request *RemoveVpcAccessAndAbolishApisRequest, runtime *util.RuntimeOptions) (_result *RemoveVpcAccessAndAbolishApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NeedBatchWork)) {
		query["NeedBatchWork"] = request.NeedBatchWork
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveVpcAccessAndAbolishApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveVpcAccessAndAbolishApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RemoveVpcAccessAndAbolishApisRequest
//
// @return RemoveVpcAccessAndAbolishApisResponse
func (client *Client) RemoveVpcAccessAndAbolishApis(request *RemoveVpcAccessAndAbolishApisRequest) (_result *RemoveVpcAccessAndAbolishApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveVpcAccessAndAbolishApisResponse{}
	_body, _err := client.RemoveVpcAccessAndAbolishApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resets the AppCode of an app.
//
// @param request - ResetAppCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetAppCodeResponse
func (client *Client) ResetAppCodeWithOptions(request *ResetAppCodeRequest, runtime *util.RuntimeOptions) (_result *ResetAppCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppCode)) {
		query["AppCode"] = request.AppCode
	}

	if !tea.BoolValue(util.IsUnset(request.NewAppCode)) {
		query["NewAppCode"] = request.NewAppCode
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetAppCode"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetAppCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Resets the AppCode of an app.
//
// @param request - ResetAppCodeRequest
//
// @return ResetAppCodeResponse
func (client *Client) ResetAppCode(request *ResetAppCodeRequest) (_result *ResetAppCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetAppCodeResponse{}
	_body, _err := client.ResetAppCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resets the key of an application.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- A new secret is automatically generated after you have called this operation. This secret cannot be customized.
//
// 	- The results returned by this operation do not contain the application secret. You can obtain the secret by calling DescribeAppSecurity.
//
// @param request - ResetAppSecretRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetAppSecretResponse
func (client *Client) ResetAppSecretWithOptions(request *ResetAppSecretRequest, runtime *util.RuntimeOptions) (_result *ResetAppSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppKey)) {
		query["AppKey"] = request.AppKey
	}

	if !tea.BoolValue(util.IsUnset(request.NewAppKey)) {
		query["NewAppKey"] = request.NewAppKey
	}

	if !tea.BoolValue(util.IsUnset(request.NewAppSecret)) {
		query["NewAppSecret"] = request.NewAppSecret
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetAppSecret"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetAppSecretResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Resets the key of an application.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- A new secret is automatically generated after you have called this operation. This secret cannot be customized.
//
// 	- The results returned by this operation do not contain the application secret. You can obtain the secret by calling DescribeAppSecurity.
//
// @param request - ResetAppSecretRequest
//
// @return ResetAppSecretResponse
func (client *Client) ResetAppSecret(request *ResetAppSecretRequest) (_result *ResetAppSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetAppSecretResponse{}
	_body, _err := client.ResetAppSecretWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SdkGenerateByAppRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SdkGenerateByAppResponse
func (client *Client) SdkGenerateByAppWithOptions(request *SdkGenerateByAppRequest, runtime *util.RuntimeOptions) (_result *SdkGenerateByAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SdkGenerateByApp"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SdkGenerateByAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SdkGenerateByAppRequest
//
// @return SdkGenerateByAppResponse
func (client *Client) SdkGenerateByApp(request *SdkGenerateByAppRequest) (_result *SdkGenerateByAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SdkGenerateByAppResponse{}
	_body, _err := client.SdkGenerateByAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 生成与App关联的API的SDK
//
// @param request - SdkGenerateByAppForRegionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SdkGenerateByAppForRegionResponse
func (client *Client) SdkGenerateByAppForRegionWithOptions(request *SdkGenerateByAppForRegionRequest, runtime *util.RuntimeOptions) (_result *SdkGenerateByAppForRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SdkGenerateByAppForRegion"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SdkGenerateByAppForRegionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 生成与App关联的API的SDK
//
// @param request - SdkGenerateByAppForRegionRequest
//
// @return SdkGenerateByAppForRegionResponse
func (client *Client) SdkGenerateByAppForRegion(request *SdkGenerateByAppForRegionRequest) (_result *SdkGenerateByAppForRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SdkGenerateByAppForRegionResponse{}
	_body, _err := client.SdkGenerateByAppForRegionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SdkGenerateByGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SdkGenerateByGroupResponse
func (client *Client) SdkGenerateByGroupWithOptions(request *SdkGenerateByGroupRequest, runtime *util.RuntimeOptions) (_result *SdkGenerateByGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SdkGenerateByGroup"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SdkGenerateByGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SdkGenerateByGroupRequest
//
// @return SdkGenerateByGroupResponse
func (client *Client) SdkGenerateByGroup(request *SdkGenerateByGroupRequest) (_result *SdkGenerateByGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SdkGenerateByGroupResponse{}
	_body, _err := client.SdkGenerateByGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改访问控制策略的名称
//
// @param request - SetAccessControlListAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetAccessControlListAttributeResponse
func (client *Client) SetAccessControlListAttributeWithOptions(request *SetAccessControlListAttributeRequest, runtime *util.RuntimeOptions) (_result *SetAccessControlListAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.AclName)) {
		query["AclName"] = request.AclName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetAccessControlListAttribute"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetAccessControlListAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改访问控制策略的名称
//
// @param request - SetAccessControlListAttributeRequest
//
// @return SetAccessControlListAttributeResponse
func (client *Client) SetAccessControlListAttribute(request *SetAccessControlListAttributeRequest) (_result *SetAccessControlListAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetAccessControlListAttributeResponse{}
	_body, _err := client.SetAccessControlListAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 给多个API产品添加APP授权
//
// @param tmpReq - SetApiProductsAuthoritiesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetApiProductsAuthoritiesResponse
func (client *Client) SetApiProductsAuthoritiesWithOptions(tmpReq *SetApiProductsAuthoritiesRequest, runtime *util.RuntimeOptions) (_result *SetApiProductsAuthoritiesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SetApiProductsAuthoritiesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ApiProductIds)) {
		request.ApiProductIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ApiProductIds, tea.String("ApiProductIds"), tea.String("simple"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiProductIdsShrink)) {
		query["ApiProductIds"] = request.ApiProductIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AuthValidTime)) {
		query["AuthValidTime"] = request.AuthValidTime
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetApiProductsAuthorities"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetApiProductsAuthoritiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 给多个API产品添加APP授权
//
// @param request - SetApiProductsAuthoritiesRequest
//
// @return SetApiProductsAuthoritiesResponse
func (client *Client) SetApiProductsAuthorities(request *SetApiProductsAuthoritiesRequest) (_result *SetApiProductsAuthoritiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetApiProductsAuthoritiesResponse{}
	_body, _err := client.SetApiProductsAuthoritiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Authorizes a specified application to call multiple APIs.
//
// Description:
//
//   This operation is intended for API providers and callers.
//
// 	- API providers can authorize any apps to call their APIs.
//
// 	- API callers can authorize their own apps to call the APIs that they have purchased.
//
// @param request - SetApisAuthoritiesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetApisAuthoritiesResponse
func (client *Client) SetApisAuthoritiesWithOptions(request *SetApisAuthoritiesRequest, runtime *util.RuntimeOptions) (_result *SetApisAuthoritiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AuthValidTime)) {
		query["AuthValidTime"] = request.AuthValidTime
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetApisAuthorities"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetApisAuthoritiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Authorizes a specified application to call multiple APIs.
//
// Description:
//
//   This operation is intended for API providers and callers.
//
// 	- API providers can authorize any apps to call their APIs.
//
// 	- API callers can authorize their own apps to call the APIs that they have purchased.
//
// @param request - SetApisAuthoritiesRequest
//
// @return SetApisAuthoritiesResponse
func (client *Client) SetApisAuthorities(request *SetApisAuthoritiesRequest) (_result *SetApisAuthoritiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetApisAuthoritiesResponse{}
	_body, _err := client.SetApisAuthoritiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 将多个APP授权给API产品
//
// @param request - SetAppsAuthToApiProductRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetAppsAuthToApiProductResponse
func (client *Client) SetAppsAuthToApiProductWithOptions(request *SetAppsAuthToApiProductRequest, runtime *util.RuntimeOptions) (_result *SetAppsAuthToApiProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiProductId)) {
		query["ApiProductId"] = request.ApiProductId
	}

	if !tea.BoolValue(util.IsUnset(request.AppIds)) {
		query["AppIds"] = request.AppIds
	}

	if !tea.BoolValue(util.IsUnset(request.AuthValidTime)) {
		query["AuthValidTime"] = request.AuthValidTime
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetAppsAuthToApiProduct"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetAppsAuthToApiProductResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 将多个APP授权给API产品
//
// @param request - SetAppsAuthToApiProductRequest
//
// @return SetAppsAuthToApiProductResponse
func (client *Client) SetAppsAuthToApiProduct(request *SetAppsAuthToApiProductRequest) (_result *SetAppsAuthToApiProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetAppsAuthToApiProductResponse{}
	_body, _err := client.SetAppsAuthToApiProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Grants access permissions on a specified API to multiple applications.
//
// Description:
//
//   This operation is intended for API providers and callers.
//
// 	- API providers can authorize any apps to call their APIs.
//
// 	- API callers can authorize their own apps to call the APIs that they have purchased.
//
// @param request - SetAppsAuthoritiesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetAppsAuthoritiesResponse
func (client *Client) SetAppsAuthoritiesWithOptions(request *SetAppsAuthoritiesRequest, runtime *util.RuntimeOptions) (_result *SetAppsAuthoritiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.AppIds)) {
		query["AppIds"] = request.AppIds
	}

	if !tea.BoolValue(util.IsUnset(request.AuthValidTime)) {
		query["AuthValidTime"] = request.AuthValidTime
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetAppsAuthorities"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetAppsAuthoritiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Grants access permissions on a specified API to multiple applications.
//
// Description:
//
//   This operation is intended for API providers and callers.
//
// 	- API providers can authorize any apps to call their APIs.
//
// 	- API callers can authorize their own apps to call the APIs that they have purchased.
//
// @param request - SetAppsAuthoritiesRequest
//
// @return SetAppsAuthoritiesResponse
func (client *Client) SetAppsAuthorities(request *SetAppsAuthoritiesRequest) (_result *SetAppsAuthoritiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetAppsAuthoritiesResponse{}
	_body, _err := client.SetAppsAuthoritiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Binds a custom domain name to a specified API group.
//
// @param request - SetDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetDomainResponse
func (client *Client) SetDomainWithOptions(request *SetDomainRequest, runtime *util.RuntimeOptions) (_result *SetDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BindStageName)) {
		query["BindStageName"] = request.BindStageName
	}

	if !tea.BoolValue(util.IsUnset(request.CustomDomainType)) {
		query["CustomDomainType"] = request.CustomDomainType
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.IsForce)) {
		query["IsForce"] = request.IsForce
	}

	if !tea.BoolValue(util.IsUnset(request.IsHttpRedirectToHttps)) {
		query["IsHttpRedirectToHttps"] = request.IsHttpRedirectToHttps
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDomain"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Binds a custom domain name to a specified API group.
//
// @param request - SetDomainRequest
//
// @return SetDomainResponse
func (client *Client) SetDomain(request *SetDomainRequest) (_result *SetDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDomainResponse{}
	_body, _err := client.SetDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Uploads an SSL certificate for a custom domain name.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- The SSL certificate must match the custom domain name.
//
// 	- After the SSL certificate is bound, HTTPS-based API services become available.
//
// @param request - SetDomainCertificateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetDomainCertificateResponse
func (client *Client) SetDomainCertificateWithOptions(request *SetDomainCertificateRequest, runtime *util.RuntimeOptions) (_result *SetDomainCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CaCertificateBody)) {
		query["CaCertificateBody"] = request.CaCertificateBody
	}

	if !tea.BoolValue(util.IsUnset(request.CertificateBody)) {
		query["CertificateBody"] = request.CertificateBody
	}

	if !tea.BoolValue(util.IsUnset(request.CertificateName)) {
		query["CertificateName"] = request.CertificateName
	}

	if !tea.BoolValue(util.IsUnset(request.CertificatePrivateKey)) {
		query["CertificatePrivateKey"] = request.CertificatePrivateKey
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SslVerifyDepth)) {
		query["SslVerifyDepth"] = request.SslVerifyDepth
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDomainCertificate"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDomainCertificateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Uploads an SSL certificate for a custom domain name.
//
// Description:
//
//   This operation is intended for API providers.
//
// 	- The SSL certificate must match the custom domain name.
//
// 	- After the SSL certificate is bound, HTTPS-based API services become available.
//
// @param request - SetDomainCertificateRequest
//
// @return SetDomainCertificateResponse
func (client *Client) SetDomainCertificate(request *SetDomainCertificateRequest) (_result *SetDomainCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDomainCertificateResponse{}
	_body, _err := client.SetDomainCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables or disables WebSocket for a custom domain name.
//
// @param request - SetDomainWebSocketStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetDomainWebSocketStatusResponse
func (client *Client) SetDomainWebSocketStatusWithOptions(request *SetDomainWebSocketStatusRequest, runtime *util.RuntimeOptions) (_result *SetDomainWebSocketStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActionValue)) {
		query["ActionValue"] = request.ActionValue
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.WSSEnable)) {
		query["WSSEnable"] = request.WSSEnable
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDomainWebSocketStatus"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDomainWebSocketStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables WebSocket for a custom domain name.
//
// @param request - SetDomainWebSocketStatusRequest
//
// @return SetDomainWebSocketStatusResponse
func (client *Client) SetDomainWebSocketStatus(request *SetDomainWebSocketStatusRequest) (_result *SetDomainWebSocketStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDomainWebSocketStatusResponse{}
	_body, _err := client.SetDomainWebSocketStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SetGroupAuthAppCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetGroupAuthAppCodeResponse
func (client *Client) SetGroupAuthAppCodeWithOptions(request *SetGroupAuthAppCodeRequest, runtime *util.RuntimeOptions) (_result *SetGroupAuthAppCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthAppCode)) {
		query["AuthAppCode"] = request.AuthAppCode
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetGroupAuthAppCode"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetGroupAuthAppCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SetGroupAuthAppCodeRequest
//
// @return SetGroupAuthAppCodeResponse
func (client *Client) SetGroupAuthAppCode(request *SetGroupAuthAppCodeRequest) (_result *SetGroupAuthAppCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetGroupAuthAppCodeResponse{}
	_body, _err := client.SetGroupAuthAppCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a binding relationship between specified access control lists (ACLs) and APIs.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- A maximum of 100 APIs can be bound at a time.
//
// @param request - SetIpControlApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetIpControlApisResponse
func (client *Client) SetIpControlApisWithOptions(request *SetIpControlApisRequest, runtime *util.RuntimeOptions) (_result *SetIpControlApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetIpControlApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetIpControlApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a binding relationship between specified access control lists (ACLs) and APIs.
//
// Description:
//
//   This operation is intended for API callers.
//
// 	- A maximum of 100 APIs can be bound at a time.
//
// @param request - SetIpControlApisRequest
//
// @return SetIpControlApisResponse
func (client *Client) SetIpControlApis(request *SetIpControlApisRequest) (_result *SetIpControlApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetIpControlApisResponse{}
	_body, _err := client.SetIpControlApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Binds a signature key to APIs.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- This operation allows you to bind a signature key to an API. You can bind signature keys for up to 100 APIs at a time.
//
// @param request - SetSignatureApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetSignatureApisResponse
func (client *Client) SetSignatureApisWithOptions(request *SetSignatureApisRequest, runtime *util.RuntimeOptions) (_result *SetSignatureApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureId)) {
		query["SignatureId"] = request.SignatureId
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetSignatureApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetSignatureApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Binds a signature key to APIs.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- This operation allows you to bind a signature key to an API. You can bind signature keys for up to 100 APIs at a time.
//
// @param request - SetSignatureApisRequest
//
// @return SetSignatureApisResponse
func (client *Client) SetSignatureApis(request *SetSignatureApisRequest) (_result *SetSignatureApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetSignatureApisResponse{}
	_body, _err := client.SetSignatureApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Binds a throttling policy to APIs.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- This API allows you to bind a specific throttling policy to up to 100 APIs at a time.
//
// @param request - SetTrafficControlApisRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetTrafficControlApisResponse
func (client *Client) SetTrafficControlApisWithOptions(request *SetTrafficControlApisRequest, runtime *util.RuntimeOptions) (_result *SetTrafficControlApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetTrafficControlApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetTrafficControlApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Binds a throttling policy to APIs.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- This API allows you to bind a specific throttling policy to up to 100 APIs at a time.
//
// @param request - SetTrafficControlApisRequest
//
// @return SetTrafficControlApisResponse
func (client *Client) SetTrafficControlApis(request *SetTrafficControlApisRequest) (_result *SetTrafficControlApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetTrafficControlApisResponse{}
	_body, _err := client.SetTrafficControlApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a virtual private cloud (VPC) access authorization and enables reverse access.
//
// Description:
//
// This operation is intended for API providers.
//
// 	- This operation is used to authorize API Gateway to access your VPC instance.
//
// @param request - SetVpcAccessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetVpcAccessResponse
func (client *Client) SetVpcAccessWithOptions(request *SetVpcAccessRequest, runtime *util.RuntimeOptions) (_result *SetVpcAccessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcTargetHostName)) {
		query["VpcTargetHostName"] = request.VpcTargetHostName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetVpcAccess"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetVpcAccessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a virtual private cloud (VPC) access authorization and enables reverse access.
//
// Description:
//
// This operation is intended for API providers.
//
// 	- This operation is used to authorize API Gateway to access your VPC instance.
//
// @param request - SetVpcAccessRequest
//
// @return SetVpcAccessResponse
func (client *Client) SetVpcAccess(request *SetVpcAccessRequest) (_result *SetVpcAccessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetVpcAccessResponse{}
	_body, _err := client.SetVpcAccessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Specifies a wildcard domain name template for a bound custom domain name.
//
// @param request - SetWildcardDomainPatternsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetWildcardDomainPatternsResponse
func (client *Client) SetWildcardDomainPatternsWithOptions(request *SetWildcardDomainPatternsRequest, runtime *util.RuntimeOptions) (_result *SetWildcardDomainPatternsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.WildcardDomainPatterns)) {
		query["WildcardDomainPatterns"] = request.WildcardDomainPatterns
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetWildcardDomainPatterns"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetWildcardDomainPatternsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Specifies a wildcard domain name template for a bound custom domain name.
//
// @param request - SetWildcardDomainPatternsRequest
//
// @return SetWildcardDomainPatternsResponse
func (client *Client) SetWildcardDomainPatterns(request *SetWildcardDomainPatternsRequest) (_result *SetWildcardDomainPatternsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetWildcardDomainPatternsResponse{}
	_body, _err := client.SetWildcardDomainPatternsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Switches the definition of an API in a specified runtime environment to a historical version.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- The historical version can be obtained by calling the **DescribeHistoryApis*	- operation.
//
// 	- Only APIs that have been published more than once have historical versions.
//
// 	- This operation can only be performed on running APIs. Exercise caution when you perform this operation because the operation cannot be undone. The operation takes up to 5 seconds.
//
// 	- The switch operation is essentially a publish operation. A reason for this operation must be provided.
//
// @param request - SwitchApiRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SwitchApiResponse
func (client *Client) SwitchApiWithOptions(request *SwitchApiRequest, runtime *util.RuntimeOptions) (_result *SwitchApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HistoryVersion)) {
		query["HistoryVersion"] = request.HistoryVersion
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SwitchApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SwitchApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Switches the definition of an API in a specified runtime environment to a historical version.
//
// Description:
//
//   This API is intended for API providers.
//
// 	- The historical version can be obtained by calling the **DescribeHistoryApis*	- operation.
//
// 	- Only APIs that have been published more than once have historical versions.
//
// 	- This operation can only be performed on running APIs. Exercise caution when you perform this operation because the operation cannot be undone. The operation takes up to 5 seconds.
//
// 	- The switch operation is essentially a publish operation. A reason for this operation must be provided.
//
// @param request - SwitchApiRequest
//
// @return SwitchApiResponse
func (client *Client) SwitchApi(request *SwitchApiRequest) (_result *SwitchApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchApiResponse{}
	_body, _err := client.SwitchApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a tag-resource relationship.
//
// Description:
//
//   All tags (key-value pairs) are applied to all resources of a specified ResourceId, with each resource specified as ResourceId.N.
//
// 	- Tag.N is a resource tag consisting of a key-value pair: Tag.N.Key and Tag.N.Value.
//
// 	- If you call this operation to tag multiple resources simultaneously, either all or none of the resources will be tagged.
//
// 	- If you specify Tag.1.Value in addition to required parameters, you must also specify Tag.1.Key. Otherwise, an InvalidParameter.TagKey error is reported. A tag that has a value must have the corresponding key, but the key can be an empty string.
//
// 	- If a tag with the same key has been bound to a resource, the new tag will overwrite the existing one.
//
// @param request - TagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TagResourcesResponse
func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResources"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a tag-resource relationship.
//
// Description:
//
//   All tags (key-value pairs) are applied to all resources of a specified ResourceId, with each resource specified as ResourceId.N.
//
// 	- Tag.N is a resource tag consisting of a key-value pair: Tag.N.Key and Tag.N.Value.
//
// 	- If you call this operation to tag multiple resources simultaneously, either all or none of the resources will be tagged.
//
// 	- If you specify Tag.1.Value in addition to required parameters, you must also specify Tag.1.Key. Otherwise, an InvalidParameter.TagKey error is reported. A tag that has a value must have the corresponding key, but the key can be an empty string.
//
// 	- If a tag with the same key has been bound to a resource, the new tag will overwrite the existing one.
//
// @param request - TagResourcesRequest
//
// @return TagResourcesResponse
func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes tags from resources.
//
// Description:
//
//   If you call this operation to untag multiple resources simultaneously, either all or none of the resources will be untagged.
//
// 	- If you specify resource IDs without specifying tag keys and set the All parameter to true, all tags bound to the specified resources will be deleted. If a resource does not have any tags, the request is not processed but a success is returned.
//
// 	- If you specify resource IDs without specifying tag keys and set the All parameter to false, the request is not processed but a success is returned.
//
// 	- When tag keys are specified, the All parameter is invalid.
//
// 	- When multiple resources and key-value pairs are specified, the specified tags bound to the resources are deleted.
//
// @param request - UntagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UntagResourcesResponse
func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResources"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes tags from resources.
//
// Description:
//
//   If you call this operation to untag multiple resources simultaneously, either all or none of the resources will be untagged.
//
// 	- If you specify resource IDs without specifying tag keys and set the All parameter to true, all tags bound to the specified resources will be deleted. If a resource does not have any tags, the request is not processed but a success is returned.
//
// 	- If you specify resource IDs without specifying tag keys and set the All parameter to false, the request is not processed but a success is returned.
//
// 	- When tag keys are specified, the All parameter is invalid.
//
// 	- When multiple resources and key-value pairs are specified, the specified tags bound to the resources are deleted.
//
// @param request - UntagResourcesRequest
//
// @return UntagResourcesResponse
func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Tests the network connectivity between an API Gateway instance and a port on an Elastic Compute Service (ECS) or Server Load Balance (SLB) instance in a virtual private cloud (VPC) access authorization.
//
// @param request - ValidateVpcConnectivityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ValidateVpcConnectivityResponse
func (client *Client) ValidateVpcConnectivityWithOptions(request *ValidateVpcConnectivityRequest, runtime *util.RuntimeOptions) (_result *ValidateVpcConnectivityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.VpcAccessId)) {
		query["VpcAccessId"] = request.VpcAccessId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ValidateVpcConnectivity"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ValidateVpcConnectivityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Tests the network connectivity between an API Gateway instance and a port on an Elastic Compute Service (ECS) or Server Load Balance (SLB) instance in a virtual private cloud (VPC) access authorization.
//
// @param request - ValidateVpcConnectivityRequest
//
// @return ValidateVpcConnectivityResponse
func (client *Client) ValidateVpcConnectivity(request *ValidateVpcConnectivityRequest) (_result *ValidateVpcConnectivityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ValidateVpcConnectivityResponse{}
	_body, _err := client.ValidateVpcConnectivityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
