// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AbolishApiRequest struct {
	ApiId         *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageName     *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s AbolishApiRequest) String() string {
	return tea.Prettify(s)
}

func (s AbolishApiRequest) GoString() string {
	return s.String()
}

func (s *AbolishApiRequest) SetApiId(v string) *AbolishApiRequest {
	s.ApiId = &v
	return s
}

func (s *AbolishApiRequest) SetGroupId(v string) *AbolishApiRequest {
	s.GroupId = &v
	return s
}

func (s *AbolishApiRequest) SetSecurityToken(v string) *AbolishApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *AbolishApiRequest) SetStageName(v string) *AbolishApiRequest {
	s.StageName = &v
	return s
}

type AbolishApiResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AbolishApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AbolishApiResponseBody) GoString() string {
	return s.String()
}

func (s *AbolishApiResponseBody) SetRequestId(v string) *AbolishApiResponseBody {
	s.RequestId = &v
	return s
}

type AbolishApiResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AbolishApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AbolishApiResponse) String() string {
	return tea.Prettify(s)
}

func (s AbolishApiResponse) GoString() string {
	return s.String()
}

func (s *AbolishApiResponse) SetHeaders(v map[string]*string) *AbolishApiResponse {
	s.Headers = v
	return s
}

func (s *AbolishApiResponse) SetStatusCode(v int32) *AbolishApiResponse {
	s.StatusCode = &v
	return s
}

func (s *AbolishApiResponse) SetBody(v *AbolishApiResponseBody) *AbolishApiResponse {
	s.Body = v
	return s
}

type AddAccessControlListEntryRequest struct {
	AclEntrys     *string `json:"AclEntrys,omitempty" xml:"AclEntrys,omitempty"`
	AclId         *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s AddAccessControlListEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAccessControlListEntryRequest) GoString() string {
	return s.String()
}

func (s *AddAccessControlListEntryRequest) SetAclEntrys(v string) *AddAccessControlListEntryRequest {
	s.AclEntrys = &v
	return s
}

func (s *AddAccessControlListEntryRequest) SetAclId(v string) *AddAccessControlListEntryRequest {
	s.AclId = &v
	return s
}

func (s *AddAccessControlListEntryRequest) SetSecurityToken(v string) *AddAccessControlListEntryRequest {
	s.SecurityToken = &v
	return s
}

type AddAccessControlListEntryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddAccessControlListEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddAccessControlListEntryResponseBody) GoString() string {
	return s.String()
}

func (s *AddAccessControlListEntryResponseBody) SetRequestId(v string) *AddAccessControlListEntryResponseBody {
	s.RequestId = &v
	return s
}

type AddAccessControlListEntryResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddAccessControlListEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddAccessControlListEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAccessControlListEntryResponse) GoString() string {
	return s.String()
}

func (s *AddAccessControlListEntryResponse) SetHeaders(v map[string]*string) *AddAccessControlListEntryResponse {
	s.Headers = v
	return s
}

func (s *AddAccessControlListEntryResponse) SetStatusCode(v int32) *AddAccessControlListEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *AddAccessControlListEntryResponse) SetBody(v *AddAccessControlListEntryResponseBody) *AddAccessControlListEntryResponse {
	s.Body = v
	return s
}

type AddIpControlPolicyItemRequest struct {
	// The ID of the policy. The ID is unique.
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the request.
	CidrIp *string `json:"CidrIp,omitempty" xml:"CidrIp,omitempty"`
	// The IP addresses or CIDR blocks involved in the policy. Separate multiple IP addresses or CIDR blocks with semicolons (;). You can specify a maximum of 10 IP addresses or CIDR blocks.
	IpControlId   *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s AddIpControlPolicyItemRequest) String() string {
	return tea.Prettify(s)
}

func (s AddIpControlPolicyItemRequest) GoString() string {
	return s.String()
}

func (s *AddIpControlPolicyItemRequest) SetAppId(v string) *AddIpControlPolicyItemRequest {
	s.AppId = &v
	return s
}

func (s *AddIpControlPolicyItemRequest) SetCidrIp(v string) *AddIpControlPolicyItemRequest {
	s.CidrIp = &v
	return s
}

func (s *AddIpControlPolicyItemRequest) SetIpControlId(v string) *AddIpControlPolicyItemRequest {
	s.IpControlId = &v
	return s
}

func (s *AddIpControlPolicyItemRequest) SetSecurityToken(v string) *AddIpControlPolicyItemRequest {
	s.SecurityToken = &v
	return s
}

type AddIpControlPolicyItemResponseBody struct {
	// When you call this operation, note that:
	//
	// *   This operation is intended for API providers.
	// *   An added policy immediately takes effect on all APIs that are bound to the access control list (ACL).
	// *   A maximum of 100 policies can be added to an ACL.
	PolicyItemId *string `json:"PolicyItemId,omitempty" xml:"PolicyItemId,omitempty"`
	// Adds a policy to an existing ACL.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddIpControlPolicyItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddIpControlPolicyItemResponseBody) GoString() string {
	return s.String()
}

func (s *AddIpControlPolicyItemResponseBody) SetPolicyItemId(v string) *AddIpControlPolicyItemResponseBody {
	s.PolicyItemId = &v
	return s
}

func (s *AddIpControlPolicyItemResponseBody) SetRequestId(v string) *AddIpControlPolicyItemResponseBody {
	s.RequestId = &v
	return s
}

type AddIpControlPolicyItemResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddIpControlPolicyItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddIpControlPolicyItemResponse) String() string {
	return tea.Prettify(s)
}

func (s AddIpControlPolicyItemResponse) GoString() string {
	return s.String()
}

func (s *AddIpControlPolicyItemResponse) SetHeaders(v map[string]*string) *AddIpControlPolicyItemResponse {
	s.Headers = v
	return s
}

func (s *AddIpControlPolicyItemResponse) SetStatusCode(v int32) *AddIpControlPolicyItemResponse {
	s.StatusCode = &v
	return s
}

func (s *AddIpControlPolicyItemResponse) SetBody(v *AddIpControlPolicyItemResponseBody) *AddIpControlPolicyItemResponse {
	s.Body = v
	return s
}

type AddTrafficSpecialControlRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the request.
	SpecialKey *string `json:"SpecialKey,omitempty" xml:"SpecialKey,omitempty"`
	// The special throttling value.
	SpecialType *string `json:"SpecialType,omitempty" xml:"SpecialType,omitempty"`
	// The ID of the app or Alibaba Cloud account. Specify this parameter based on the value of the **SpecialType** parameter. You can view your account ID on the [Account Management](https://account.console.aliyun.com/?spm=a2c4g.11186623.2.15.3f053654YpMPwo#/secure) page.
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
	// *   This API is intended for API providers.
	// *   If the input SpecialKey already exists, the previous configuration is overwritten. Use caution when calling this operation.
	// *   Special throttling policies must be added to an existing throttling policy, and can take effect on all the APIs to which the throttling policy is bound.
	TrafficValue *int32 `json:"TrafficValue,omitempty" xml:"TrafficValue,omitempty"`
}

func (s AddTrafficSpecialControlRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTrafficSpecialControlRequest) GoString() string {
	return s.String()
}

func (s *AddTrafficSpecialControlRequest) SetSecurityToken(v string) *AddTrafficSpecialControlRequest {
	s.SecurityToken = &v
	return s
}

func (s *AddTrafficSpecialControlRequest) SetSpecialKey(v string) *AddTrafficSpecialControlRequest {
	s.SpecialKey = &v
	return s
}

func (s *AddTrafficSpecialControlRequest) SetSpecialType(v string) *AddTrafficSpecialControlRequest {
	s.SpecialType = &v
	return s
}

func (s *AddTrafficSpecialControlRequest) SetTrafficControlId(v string) *AddTrafficSpecialControlRequest {
	s.TrafficControlId = &v
	return s
}

func (s *AddTrafficSpecialControlRequest) SetTrafficValue(v int32) *AddTrafficSpecialControlRequest {
	s.TrafficValue = &v
	return s
}

type AddTrafficSpecialControlResponseBody struct {
	// Adds a custom special policy to a specified throttling policy.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddTrafficSpecialControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTrafficSpecialControlResponseBody) GoString() string {
	return s.String()
}

func (s *AddTrafficSpecialControlResponseBody) SetRequestId(v string) *AddTrafficSpecialControlResponseBody {
	s.RequestId = &v
	return s
}

type AddTrafficSpecialControlResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddTrafficSpecialControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddTrafficSpecialControlResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTrafficSpecialControlResponse) GoString() string {
	return s.String()
}

func (s *AddTrafficSpecialControlResponse) SetHeaders(v map[string]*string) *AddTrafficSpecialControlResponse {
	s.Headers = v
	return s
}

func (s *AddTrafficSpecialControlResponse) SetStatusCode(v int32) *AddTrafficSpecialControlResponse {
	s.StatusCode = &v
	return s
}

func (s *AddTrafficSpecialControlResponse) SetBody(v *AddTrafficSpecialControlResponseBody) *AddTrafficSpecialControlResponse {
	s.Body = v
	return s
}

type AttachPluginRequest struct {
	ApiId         *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiIds        *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	PluginId      *string `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageName     *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s AttachPluginRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachPluginRequest) GoString() string {
	return s.String()
}

func (s *AttachPluginRequest) SetApiId(v string) *AttachPluginRequest {
	s.ApiId = &v
	return s
}

func (s *AttachPluginRequest) SetApiIds(v string) *AttachPluginRequest {
	s.ApiIds = &v
	return s
}

func (s *AttachPluginRequest) SetGroupId(v string) *AttachPluginRequest {
	s.GroupId = &v
	return s
}

func (s *AttachPluginRequest) SetPluginId(v string) *AttachPluginRequest {
	s.PluginId = &v
	return s
}

func (s *AttachPluginRequest) SetSecurityToken(v string) *AttachPluginRequest {
	s.SecurityToken = &v
	return s
}

func (s *AttachPluginRequest) SetStageName(v string) *AttachPluginRequest {
	s.StageName = &v
	return s
}

type AttachPluginResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AttachPluginResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachPluginResponseBody) GoString() string {
	return s.String()
}

func (s *AttachPluginResponseBody) SetRequestId(v string) *AttachPluginResponseBody {
	s.RequestId = &v
	return s
}

type AttachPluginResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AttachPluginResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AttachPluginResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachPluginResponse) GoString() string {
	return s.String()
}

func (s *AttachPluginResponse) SetHeaders(v map[string]*string) *AttachPluginResponse {
	s.Headers = v
	return s
}

func (s *AttachPluginResponse) SetStatusCode(v int32) *AttachPluginResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachPluginResponse) SetBody(v *AttachPluginResponseBody) *AttachPluginResponse {
	s.Body = v
	return s
}

type BatchAbolishApisRequest struct {
	Api           []*BatchAbolishApisRequestApi `json:"Api,omitempty" xml:"Api,omitempty" type:"Repeated"`
	SecurityToken *string                       `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s BatchAbolishApisRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchAbolishApisRequest) GoString() string {
	return s.String()
}

func (s *BatchAbolishApisRequest) SetApi(v []*BatchAbolishApisRequestApi) *BatchAbolishApisRequest {
	s.Api = v
	return s
}

func (s *BatchAbolishApisRequest) SetSecurityToken(v string) *BatchAbolishApisRequest {
	s.SecurityToken = &v
	return s
}

type BatchAbolishApisRequestApi struct {
	ApiUid    *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	StageId   *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s BatchAbolishApisRequestApi) String() string {
	return tea.Prettify(s)
}

func (s BatchAbolishApisRequestApi) GoString() string {
	return s.String()
}

func (s *BatchAbolishApisRequestApi) SetApiUid(v string) *BatchAbolishApisRequestApi {
	s.ApiUid = &v
	return s
}

func (s *BatchAbolishApisRequestApi) SetGroupId(v string) *BatchAbolishApisRequestApi {
	s.GroupId = &v
	return s
}

func (s *BatchAbolishApisRequestApi) SetStageId(v string) *BatchAbolishApisRequestApi {
	s.StageId = &v
	return s
}

func (s *BatchAbolishApisRequestApi) SetStageName(v string) *BatchAbolishApisRequestApi {
	s.StageName = &v
	return s
}

type BatchAbolishApisResponseBody struct {
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchAbolishApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchAbolishApisResponseBody) GoString() string {
	return s.String()
}

func (s *BatchAbolishApisResponseBody) SetOperationId(v string) *BatchAbolishApisResponseBody {
	s.OperationId = &v
	return s
}

func (s *BatchAbolishApisResponseBody) SetRequestId(v string) *BatchAbolishApisResponseBody {
	s.RequestId = &v
	return s
}

type BatchAbolishApisResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *BatchAbolishApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchAbolishApisResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchAbolishApisResponse) GoString() string {
	return s.String()
}

func (s *BatchAbolishApisResponse) SetHeaders(v map[string]*string) *BatchAbolishApisResponse {
	s.Headers = v
	return s
}

func (s *BatchAbolishApisResponse) SetStatusCode(v int32) *BatchAbolishApisResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchAbolishApisResponse) SetBody(v *BatchAbolishApisResponseBody) *BatchAbolishApisResponse {
	s.Body = v
	return s
}

type BatchDeployApisRequest struct {
	// b4f5c342b8bc4ef88ccda0332402e0fa
	Api []*BatchDeployApisRequestApi `json:"Api,omitempty" xml:"Api,omitempty" type:"Repeated"`
	// 2b35dd68345b472f8051647306a16415
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The description.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s BatchDeployApisRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchDeployApisRequest) GoString() string {
	return s.String()
}

func (s *BatchDeployApisRequest) SetApi(v []*BatchDeployApisRequestApi) *BatchDeployApisRequest {
	s.Api = v
	return s
}

func (s *BatchDeployApisRequest) SetDescription(v string) *BatchDeployApisRequest {
	s.Description = &v
	return s
}

func (s *BatchDeployApisRequest) SetSecurityToken(v string) *BatchDeployApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *BatchDeployApisRequest) SetStageName(v string) *BatchDeployApisRequest {
	s.StageName = &v
	return s
}

type BatchDeployApisRequestApi struct {
	// Publishes multiple APIs at a time.
	ApiUid *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	// The APIs that you want to operate.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s BatchDeployApisRequestApi) String() string {
	return tea.Prettify(s)
}

func (s BatchDeployApisRequestApi) GoString() string {
	return s.String()
}

func (s *BatchDeployApisRequestApi) SetApiUid(v string) *BatchDeployApisRequestApi {
	s.ApiUid = &v
	return s
}

func (s *BatchDeployApisRequestApi) SetGroupId(v string) *BatchDeployApisRequestApi {
	s.GroupId = &v
	return s
}

type BatchDeployApisResponseBody struct {
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchDeployApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchDeployApisResponseBody) GoString() string {
	return s.String()
}

func (s *BatchDeployApisResponseBody) SetOperationId(v string) *BatchDeployApisResponseBody {
	s.OperationId = &v
	return s
}

func (s *BatchDeployApisResponseBody) SetRequestId(v string) *BatchDeployApisResponseBody {
	s.RequestId = &v
	return s
}

type BatchDeployApisResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *BatchDeployApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchDeployApisResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchDeployApisResponse) GoString() string {
	return s.String()
}

func (s *BatchDeployApisResponse) SetHeaders(v map[string]*string) *BatchDeployApisResponse {
	s.Headers = v
	return s
}

func (s *BatchDeployApisResponse) SetStatusCode(v int32) *BatchDeployApisResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchDeployApisResponse) SetBody(v *BatchDeployApisResponseBody) *BatchDeployApisResponse {
	s.Body = v
	return s
}

type CreateAccessControlListRequest struct {
	// The name of the ACL. The name must be 1 to 30 characters in length, and can contain letters, digits, periods (.), hyphens (-), forward slashes (/), and underscores (\_). The name must be unique within the region.
	AclName          *string `json:"AclName,omitempty" xml:"AclName,omitempty"`
	AddressIPVersion *string `json:"AddressIPVersion,omitempty" xml:"AddressIPVersion,omitempty"`
	SecurityToken    *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s CreateAccessControlListRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAccessControlListRequest) GoString() string {
	return s.String()
}

func (s *CreateAccessControlListRequest) SetAclName(v string) *CreateAccessControlListRequest {
	s.AclName = &v
	return s
}

func (s *CreateAccessControlListRequest) SetAddressIPVersion(v string) *CreateAccessControlListRequest {
	s.AddressIPVersion = &v
	return s
}

func (s *CreateAccessControlListRequest) SetSecurityToken(v string) *CreateAccessControlListRequest {
	s.SecurityToken = &v
	return s
}

type CreateAccessControlListResponseBody struct {
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAccessControlListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAccessControlListResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAccessControlListResponseBody) SetRequestId(v string) *CreateAccessControlListResponseBody {
	s.RequestId = &v
	return s
}

type CreateAccessControlListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateAccessControlListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateAccessControlListResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAccessControlListResponse) GoString() string {
	return s.String()
}

func (s *CreateAccessControlListResponse) SetHeaders(v map[string]*string) *CreateAccessControlListResponse {
	s.Headers = v
	return s
}

func (s *CreateAccessControlListResponse) SetStatusCode(v int32) *CreateAccessControlListResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAccessControlListResponse) SetBody(v *CreateAccessControlListResponseBody) *CreateAccessControlListResponse {
	s.Body = v
	return s
}

type CreateApiRequest struct {
	// If the **AuthType** is **APP** authentication, you need to pass this value to specify the signature algorithm. If you do not specify this parameter, the default value HmacSHA256 is used. Valid values:
	//
	// *   HmacSHA256
	// *   HmacSHA1,HmacSHA256
	AllowSignatureMethod *string `json:"AllowSignatureMethod,omitempty" xml:"AllowSignatureMethod,omitempty"`
	// The name of the API that you want to create. The name must be unique within the API group. The name must be 4 to 50 characters in length. It must start with a letter and can contain letters, digits, and underscores (\_).
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// If the **AuthType** parameter is set to **APP**, the valid values are:
	//
	// *   **DEFAULT**: The default value that is used if no other values are passed. This value indicates that the settings of the group are used.
	// *   **DISABLE**: The authentication is disabled.
	// *   **HEADER**: AppCode can be placed in the Header parameter for authentication.
	// *   **HEADER_QUERY**: AppCode can be placed in the Header or Query parameter for authentication.
	AppCodeAuthType *string `json:"AppCodeAuthType,omitempty" xml:"AppCodeAuthType,omitempty"`
	// API安全认证类型，目前可以取值：
	//
	// - **APP**：只允许已授权的APP调用
	// - **ANONYMOUS**：允许匿名调用，设置为允许匿名调用需要注意：
	//   任何能够获取该API服务信息的人，都将能够调用该API。网关不会对调用者做身份认证，也无法设置按用户的流量控制，若开放该API请设置好按API的流量控制。
	AuthType *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	// Specifies whether to enable backend services.
	BackendEnable *bool `json:"BackendEnable,omitempty" xml:"BackendEnable,omitempty"`
	// The IDof the backend service
	BackendId *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	// The parameters of the API.
	ConstantParameters *string `json:"ConstantParameters,omitempty" xml:"ConstantParameters,omitempty"`
	// The description of the API. The description can be up to 180 characters in length.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// *   Specifies whether to set **DisableInternet** to **true** to limit API calls to within the VPC.
	// *   If you set **DisableInternet** to **false**, the limit is lifted. The default value is false when you create an API.
	DisableInternet *bool `json:"DisableInternet,omitempty" xml:"DisableInternet,omitempty"`
	// The sample error codes returned by the backend service.
	//
	// For more information, see [ErrorCodeSample](~~44392~~).
	ErrorCodeSamples *string `json:"ErrorCodeSamples,omitempty" xml:"ErrorCodeSamples,omitempty"`
	// The sample error response from the backend service.
	FailResultSample *string `json:"FailResultSample,omitempty" xml:"FailResultSample,omitempty"`
	// *   Specifies whether to set **ForceNonceCheck** to **true** to force the check of X-Ca-Nonce during the request. This is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
	// *   If you set **ForceNonceCheck** to **false**, the check is not performed. The default value is false when you create an API.
	ForceNonceCheck *bool `json:"ForceNonceCheck,omitempty" xml:"ForceNonceCheck,omitempty"`
	// The ID of the API group.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The switch status of ACL. Valid values:- **on** and **off**.
	OpenIdConnectConfig *string `json:"OpenIdConnectConfig,omitempty" xml:"OpenIdConnectConfig,omitempty"`
	// The configuration items of API requests sent by the consumer to API Gateway.
	//
	// For more information, see [RequestConfig](~~43985~~).
	RequestConfig *string `json:"RequestConfig,omitempty" xml:"RequestConfig,omitempty"`
	// The parameters of API requests sent by the consumer to API Gateway.
	//
	// For more information, see [RequestParameter](~~43986~~).
	RequestParameters *string `json:"RequestParameters,omitempty" xml:"RequestParameters,omitempty"`
	// The return description of the API.
	ResultBodyModel *string `json:"ResultBodyModel,omitempty" xml:"ResultBodyModel,omitempty"`
	// The return description of the API.
	ResultDescriptions *string `json:"ResultDescriptions,omitempty" xml:"ResultDescriptions,omitempty"`
	// The sample response from the backend service.
	ResultSample *string `json:"ResultSample,omitempty" xml:"ResultSample,omitempty"`
	// The format of the response from the backend service. Valid values: JSON, TEXT, BINARY, XML, and HTML. Default value: JSON.
	ResultType    *string `json:"ResultType,omitempty" xml:"ResultType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The configuration items of API requests sent by API Gateway to the backend service.
	//
	// For more information, see [ServiceConfig](~~43987~~).
	ServiceConfig *string `json:"ServiceConfig,omitempty" xml:"ServiceConfig,omitempty"`
	// The parameters of API requests sent by API Gateway to the backend service.
	//
	// For more information, see [ServiceParameter](~~43988~~).
	ServiceParameters *string `json:"ServiceParameters,omitempty" xml:"ServiceParameters,omitempty"`
	// The mappings between parameters of requests sent by the consumer to API Gateway and parameters of requests sent by API Gateway to the backend service.
	//
	// For more information, see [ServiceParameterMap](~~43989~~).
	ServiceParametersMap *string `json:"ServiceParametersMap,omitempty" xml:"ServiceParametersMap,omitempty"`
	// The common parameters of APIs in JSON format.
	SystemParameters *string `json:"SystemParameters,omitempty" xml:"SystemParameters,omitempty"`
	// Specifies whether to make the API public. Valid values:
	//
	// *   **PUBLIC**: Make the API public. If you set this parameter to PUBLIC, this API is displayed on the APIs page for all users after the API is published to the production environment.
	// *   **PRIVATE**: Make the API private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
	// The type of the two-way communication API.
	//
	// *   **COMMON**: common API
	// *   **REGISTER**: registered API
	// *   **UNREGISTER**: unregistered API
	// *   **NOTIFY**: downstream notification API
	WebSocketApiType *string `json:"WebSocketApiType,omitempty" xml:"WebSocketApiType,omitempty"`
}

func (s CreateApiRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApiRequest) GoString() string {
	return s.String()
}

func (s *CreateApiRequest) SetAllowSignatureMethod(v string) *CreateApiRequest {
	s.AllowSignatureMethod = &v
	return s
}

func (s *CreateApiRequest) SetApiName(v string) *CreateApiRequest {
	s.ApiName = &v
	return s
}

func (s *CreateApiRequest) SetAppCodeAuthType(v string) *CreateApiRequest {
	s.AppCodeAuthType = &v
	return s
}

func (s *CreateApiRequest) SetAuthType(v string) *CreateApiRequest {
	s.AuthType = &v
	return s
}

func (s *CreateApiRequest) SetBackendEnable(v bool) *CreateApiRequest {
	s.BackendEnable = &v
	return s
}

func (s *CreateApiRequest) SetBackendId(v string) *CreateApiRequest {
	s.BackendId = &v
	return s
}

func (s *CreateApiRequest) SetConstantParameters(v string) *CreateApiRequest {
	s.ConstantParameters = &v
	return s
}

func (s *CreateApiRequest) SetDescription(v string) *CreateApiRequest {
	s.Description = &v
	return s
}

func (s *CreateApiRequest) SetDisableInternet(v bool) *CreateApiRequest {
	s.DisableInternet = &v
	return s
}

func (s *CreateApiRequest) SetErrorCodeSamples(v string) *CreateApiRequest {
	s.ErrorCodeSamples = &v
	return s
}

func (s *CreateApiRequest) SetFailResultSample(v string) *CreateApiRequest {
	s.FailResultSample = &v
	return s
}

func (s *CreateApiRequest) SetForceNonceCheck(v bool) *CreateApiRequest {
	s.ForceNonceCheck = &v
	return s
}

func (s *CreateApiRequest) SetGroupId(v string) *CreateApiRequest {
	s.GroupId = &v
	return s
}

func (s *CreateApiRequest) SetOpenIdConnectConfig(v string) *CreateApiRequest {
	s.OpenIdConnectConfig = &v
	return s
}

func (s *CreateApiRequest) SetRequestConfig(v string) *CreateApiRequest {
	s.RequestConfig = &v
	return s
}

func (s *CreateApiRequest) SetRequestParameters(v string) *CreateApiRequest {
	s.RequestParameters = &v
	return s
}

func (s *CreateApiRequest) SetResultBodyModel(v string) *CreateApiRequest {
	s.ResultBodyModel = &v
	return s
}

func (s *CreateApiRequest) SetResultDescriptions(v string) *CreateApiRequest {
	s.ResultDescriptions = &v
	return s
}

func (s *CreateApiRequest) SetResultSample(v string) *CreateApiRequest {
	s.ResultSample = &v
	return s
}

func (s *CreateApiRequest) SetResultType(v string) *CreateApiRequest {
	s.ResultType = &v
	return s
}

func (s *CreateApiRequest) SetSecurityToken(v string) *CreateApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateApiRequest) SetServiceConfig(v string) *CreateApiRequest {
	s.ServiceConfig = &v
	return s
}

func (s *CreateApiRequest) SetServiceParameters(v string) *CreateApiRequest {
	s.ServiceParameters = &v
	return s
}

func (s *CreateApiRequest) SetServiceParametersMap(v string) *CreateApiRequest {
	s.ServiceParametersMap = &v
	return s
}

func (s *CreateApiRequest) SetSystemParameters(v string) *CreateApiRequest {
	s.SystemParameters = &v
	return s
}

func (s *CreateApiRequest) SetVisibility(v string) *CreateApiRequest {
	s.Visibility = &v
	return s
}

func (s *CreateApiRequest) SetWebSocketApiType(v string) *CreateApiRequest {
	s.WebSocketApiType = &v
	return s
}

type CreateApiResponseBody struct {
	// The ID of the API.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateApiResponseBody) GoString() string {
	return s.String()
}

func (s *CreateApiResponseBody) SetApiId(v string) *CreateApiResponseBody {
	s.ApiId = &v
	return s
}

func (s *CreateApiResponseBody) SetRequestId(v string) *CreateApiResponseBody {
	s.RequestId = &v
	return s
}

type CreateApiResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateApiResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApiResponse) GoString() string {
	return s.String()
}

func (s *CreateApiResponse) SetHeaders(v map[string]*string) *CreateApiResponse {
	s.Headers = v
	return s
}

func (s *CreateApiResponse) SetStatusCode(v int32) *CreateApiResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateApiResponse) SetBody(v *CreateApiResponseBody) *CreateApiResponse {
	s.Body = v
	return s
}

type CreateApiGroupRequest struct {
	BasePath      *string                     `json:"BasePath,omitempty" xml:"BasePath,omitempty"`
	Description   *string                     `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupName     *string                     `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	InstanceId    *string                     `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityToken *string                     `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag           []*CreateApiGroupRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateApiGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApiGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateApiGroupRequest) SetBasePath(v string) *CreateApiGroupRequest {
	s.BasePath = &v
	return s
}

func (s *CreateApiGroupRequest) SetDescription(v string) *CreateApiGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateApiGroupRequest) SetGroupName(v string) *CreateApiGroupRequest {
	s.GroupName = &v
	return s
}

func (s *CreateApiGroupRequest) SetInstanceId(v string) *CreateApiGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateApiGroupRequest) SetSecurityToken(v string) *CreateApiGroupRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateApiGroupRequest) SetTag(v []*CreateApiGroupRequestTag) *CreateApiGroupRequest {
	s.Tag = v
	return s
}

type CreateApiGroupRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateApiGroupRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateApiGroupRequestTag) GoString() string {
	return s.String()
}

func (s *CreateApiGroupRequestTag) SetKey(v string) *CreateApiGroupRequestTag {
	s.Key = &v
	return s
}

func (s *CreateApiGroupRequestTag) SetValue(v string) *CreateApiGroupRequestTag {
	s.Value = &v
	return s
}

type CreateApiGroupResponseBody struct {
	BasePath     *string `json:"BasePath,omitempty" xml:"BasePath,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId      *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName    *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SubDomain    *string `json:"SubDomain,omitempty" xml:"SubDomain,omitempty"`
	TagStatus    *bool   `json:"TagStatus,omitempty" xml:"TagStatus,omitempty"`
}

func (s CreateApiGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateApiGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateApiGroupResponseBody) SetBasePath(v string) *CreateApiGroupResponseBody {
	s.BasePath = &v
	return s
}

func (s *CreateApiGroupResponseBody) SetDescription(v string) *CreateApiGroupResponseBody {
	s.Description = &v
	return s
}

func (s *CreateApiGroupResponseBody) SetGroupId(v string) *CreateApiGroupResponseBody {
	s.GroupId = &v
	return s
}

func (s *CreateApiGroupResponseBody) SetGroupName(v string) *CreateApiGroupResponseBody {
	s.GroupName = &v
	return s
}

func (s *CreateApiGroupResponseBody) SetInstanceId(v string) *CreateApiGroupResponseBody {
	s.InstanceId = &v
	return s
}

func (s *CreateApiGroupResponseBody) SetInstanceType(v string) *CreateApiGroupResponseBody {
	s.InstanceType = &v
	return s
}

func (s *CreateApiGroupResponseBody) SetRequestId(v string) *CreateApiGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateApiGroupResponseBody) SetSubDomain(v string) *CreateApiGroupResponseBody {
	s.SubDomain = &v
	return s
}

func (s *CreateApiGroupResponseBody) SetTagStatus(v bool) *CreateApiGroupResponseBody {
	s.TagStatus = &v
	return s
}

type CreateApiGroupResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateApiGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateApiGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApiGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateApiGroupResponse) SetHeaders(v map[string]*string) *CreateApiGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateApiGroupResponse) SetStatusCode(v int32) *CreateApiGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateApiGroupResponse) SetBody(v *CreateApiGroupResponseBody) *CreateApiGroupResponse {
	s.Body = v
	return s
}

type CreateApiStageVariableRequest struct {
	GroupId         *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken   *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageId         *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	StageRouteModel *string `json:"StageRouteModel,omitempty" xml:"StageRouteModel,omitempty"`
	SupportRoute    *bool   `json:"SupportRoute,omitempty" xml:"SupportRoute,omitempty"`
	VariableName    *string `json:"VariableName,omitempty" xml:"VariableName,omitempty"`
	VariableValue   *string `json:"VariableValue,omitempty" xml:"VariableValue,omitempty"`
}

func (s CreateApiStageVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApiStageVariableRequest) GoString() string {
	return s.String()
}

func (s *CreateApiStageVariableRequest) SetGroupId(v string) *CreateApiStageVariableRequest {
	s.GroupId = &v
	return s
}

func (s *CreateApiStageVariableRequest) SetSecurityToken(v string) *CreateApiStageVariableRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateApiStageVariableRequest) SetStageId(v string) *CreateApiStageVariableRequest {
	s.StageId = &v
	return s
}

func (s *CreateApiStageVariableRequest) SetStageRouteModel(v string) *CreateApiStageVariableRequest {
	s.StageRouteModel = &v
	return s
}

func (s *CreateApiStageVariableRequest) SetSupportRoute(v bool) *CreateApiStageVariableRequest {
	s.SupportRoute = &v
	return s
}

func (s *CreateApiStageVariableRequest) SetVariableName(v string) *CreateApiStageVariableRequest {
	s.VariableName = &v
	return s
}

func (s *CreateApiStageVariableRequest) SetVariableValue(v string) *CreateApiStageVariableRequest {
	s.VariableValue = &v
	return s
}

type CreateApiStageVariableResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateApiStageVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateApiStageVariableResponseBody) GoString() string {
	return s.String()
}

func (s *CreateApiStageVariableResponseBody) SetRequestId(v string) *CreateApiStageVariableResponseBody {
	s.RequestId = &v
	return s
}

type CreateApiStageVariableResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateApiStageVariableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateApiStageVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApiStageVariableResponse) GoString() string {
	return s.String()
}

func (s *CreateApiStageVariableResponse) SetHeaders(v map[string]*string) *CreateApiStageVariableResponse {
	s.Headers = v
	return s
}

func (s *CreateApiStageVariableResponse) SetStatusCode(v int32) *CreateApiStageVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateApiStageVariableResponse) SetBody(v *CreateApiStageVariableResponseBody) *CreateApiStageVariableResponse {
	s.Body = v
	return s
}

type CreateAppRequest struct {
	AppCode       *string                `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AppKey        *string                `json:"AppKey,omitempty" xml:"AppKey,omitempty"`
	AppName       *string                `json:"AppName,omitempty" xml:"AppName,omitempty"`
	AppSecret     *string                `json:"AppSecret,omitempty" xml:"AppSecret,omitempty"`
	Description   *string                `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken *string                `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag           []*CreateAppRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateAppRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAppRequest) GoString() string {
	return s.String()
}

func (s *CreateAppRequest) SetAppCode(v string) *CreateAppRequest {
	s.AppCode = &v
	return s
}

func (s *CreateAppRequest) SetAppKey(v string) *CreateAppRequest {
	s.AppKey = &v
	return s
}

func (s *CreateAppRequest) SetAppName(v string) *CreateAppRequest {
	s.AppName = &v
	return s
}

func (s *CreateAppRequest) SetAppSecret(v string) *CreateAppRequest {
	s.AppSecret = &v
	return s
}

func (s *CreateAppRequest) SetDescription(v string) *CreateAppRequest {
	s.Description = &v
	return s
}

func (s *CreateAppRequest) SetSecurityToken(v string) *CreateAppRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateAppRequest) SetTag(v []*CreateAppRequestTag) *CreateAppRequest {
	s.Tag = v
	return s
}

type CreateAppRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateAppRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateAppRequestTag) GoString() string {
	return s.String()
}

func (s *CreateAppRequestTag) SetKey(v string) *CreateAppRequestTag {
	s.Key = &v
	return s
}

func (s *CreateAppRequestTag) SetValue(v string) *CreateAppRequestTag {
	s.Value = &v
	return s
}

type CreateAppResponseBody struct {
	AppId     *int64  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagStatus *bool   `json:"TagStatus,omitempty" xml:"TagStatus,omitempty"`
}

func (s CreateAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAppResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAppResponseBody) SetAppId(v int64) *CreateAppResponseBody {
	s.AppId = &v
	return s
}

func (s *CreateAppResponseBody) SetRequestId(v string) *CreateAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAppResponseBody) SetTagStatus(v bool) *CreateAppResponseBody {
	s.TagStatus = &v
	return s
}

type CreateAppResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateAppResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAppResponse) GoString() string {
	return s.String()
}

func (s *CreateAppResponse) SetHeaders(v map[string]*string) *CreateAppResponse {
	s.Headers = v
	return s
}

func (s *CreateAppResponse) SetStatusCode(v int32) *CreateAppResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAppResponse) SetBody(v *CreateAppResponseBody) *CreateAppResponse {
	s.Body = v
	return s
}

type CreateBackendRequest struct {
	BackendName                        *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	BackendType                        *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
	CreateEventBridgeServiceLinkedRole *bool   `json:"CreateEventBridgeServiceLinkedRole,omitempty" xml:"CreateEventBridgeServiceLinkedRole,omitempty"`
	Description                        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken                      *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s CreateBackendRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBackendRequest) GoString() string {
	return s.String()
}

func (s *CreateBackendRequest) SetBackendName(v string) *CreateBackendRequest {
	s.BackendName = &v
	return s
}

func (s *CreateBackendRequest) SetBackendType(v string) *CreateBackendRequest {
	s.BackendType = &v
	return s
}

func (s *CreateBackendRequest) SetCreateEventBridgeServiceLinkedRole(v bool) *CreateBackendRequest {
	s.CreateEventBridgeServiceLinkedRole = &v
	return s
}

func (s *CreateBackendRequest) SetDescription(v string) *CreateBackendRequest {
	s.Description = &v
	return s
}

func (s *CreateBackendRequest) SetSecurityToken(v string) *CreateBackendRequest {
	s.SecurityToken = &v
	return s
}

type CreateBackendResponseBody struct {
	BackendId *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateBackendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBackendResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBackendResponseBody) SetBackendId(v string) *CreateBackendResponseBody {
	s.BackendId = &v
	return s
}

func (s *CreateBackendResponseBody) SetRequestId(v string) *CreateBackendResponseBody {
	s.RequestId = &v
	return s
}

type CreateBackendResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateBackendResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateBackendResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBackendResponse) GoString() string {
	return s.String()
}

func (s *CreateBackendResponse) SetHeaders(v map[string]*string) *CreateBackendResponse {
	s.Headers = v
	return s
}

func (s *CreateBackendResponse) SetStatusCode(v int32) *CreateBackendResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateBackendResponse) SetBody(v *CreateBackendResponseBody) *CreateBackendResponse {
	s.Body = v
	return s
}

type CreateBackendModelRequest struct {
	BackendId        *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	BackendModelData *string `json:"BackendModelData,omitempty" xml:"BackendModelData,omitempty"`
	BackendType      *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
	Description      *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken    *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageName        *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s CreateBackendModelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBackendModelRequest) GoString() string {
	return s.String()
}

func (s *CreateBackendModelRequest) SetBackendId(v string) *CreateBackendModelRequest {
	s.BackendId = &v
	return s
}

func (s *CreateBackendModelRequest) SetBackendModelData(v string) *CreateBackendModelRequest {
	s.BackendModelData = &v
	return s
}

func (s *CreateBackendModelRequest) SetBackendType(v string) *CreateBackendModelRequest {
	s.BackendType = &v
	return s
}

func (s *CreateBackendModelRequest) SetDescription(v string) *CreateBackendModelRequest {
	s.Description = &v
	return s
}

func (s *CreateBackendModelRequest) SetSecurityToken(v string) *CreateBackendModelRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateBackendModelRequest) SetStageName(v string) *CreateBackendModelRequest {
	s.StageName = &v
	return s
}

type CreateBackendModelResponseBody struct {
	BackendModelId *string `json:"BackendModelId,omitempty" xml:"BackendModelId,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateBackendModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBackendModelResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBackendModelResponseBody) SetBackendModelId(v string) *CreateBackendModelResponseBody {
	s.BackendModelId = &v
	return s
}

func (s *CreateBackendModelResponseBody) SetRequestId(v string) *CreateBackendModelResponseBody {
	s.RequestId = &v
	return s
}

type CreateBackendModelResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateBackendModelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateBackendModelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBackendModelResponse) GoString() string {
	return s.String()
}

func (s *CreateBackendModelResponse) SetHeaders(v map[string]*string) *CreateBackendModelResponse {
	s.Headers = v
	return s
}

func (s *CreateBackendModelResponse) SetStatusCode(v int32) *CreateBackendModelResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateBackendModelResponse) SetBody(v *CreateBackendModelResponseBody) *CreateBackendModelResponse {
	s.Body = v
	return s
}

type CreateDatasetRequest struct {
	DatasetName   *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	DatasetType   *string `json:"DatasetType,omitempty" xml:"DatasetType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s CreateDatasetRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetRequest) GoString() string {
	return s.String()
}

func (s *CreateDatasetRequest) SetDatasetName(v string) *CreateDatasetRequest {
	s.DatasetName = &v
	return s
}

func (s *CreateDatasetRequest) SetDatasetType(v string) *CreateDatasetRequest {
	s.DatasetType = &v
	return s
}

func (s *CreateDatasetRequest) SetSecurityToken(v string) *CreateDatasetRequest {
	s.SecurityToken = &v
	return s
}

type CreateDatasetResponseBody struct {
	DatasetId *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDatasetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDatasetResponseBody) SetDatasetId(v string) *CreateDatasetResponseBody {
	s.DatasetId = &v
	return s
}

func (s *CreateDatasetResponseBody) SetRequestId(v string) *CreateDatasetResponseBody {
	s.RequestId = &v
	return s
}

type CreateDatasetResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateDatasetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDatasetResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetResponse) GoString() string {
	return s.String()
}

func (s *CreateDatasetResponse) SetHeaders(v map[string]*string) *CreateDatasetResponse {
	s.Headers = v
	return s
}

func (s *CreateDatasetResponse) SetStatusCode(v int32) *CreateDatasetResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDatasetResponse) SetBody(v *CreateDatasetResponseBody) *CreateDatasetResponse {
	s.Body = v
	return s
}

type CreateDatasetItemRequest struct {
	DatasetId     *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ExpiredTime   *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Value         *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDatasetItemRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetItemRequest) GoString() string {
	return s.String()
}

func (s *CreateDatasetItemRequest) SetDatasetId(v string) *CreateDatasetItemRequest {
	s.DatasetId = &v
	return s
}

func (s *CreateDatasetItemRequest) SetDescription(v string) *CreateDatasetItemRequest {
	s.Description = &v
	return s
}

func (s *CreateDatasetItemRequest) SetExpiredTime(v string) *CreateDatasetItemRequest {
	s.ExpiredTime = &v
	return s
}

func (s *CreateDatasetItemRequest) SetSecurityToken(v string) *CreateDatasetItemRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateDatasetItemRequest) SetValue(v string) *CreateDatasetItemRequest {
	s.Value = &v
	return s
}

type CreateDatasetItemResponseBody struct {
	DatasetItemId *string `json:"DatasetItemId,omitempty" xml:"DatasetItemId,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDatasetItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetItemResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDatasetItemResponseBody) SetDatasetItemId(v string) *CreateDatasetItemResponseBody {
	s.DatasetItemId = &v
	return s
}

func (s *CreateDatasetItemResponseBody) SetRequestId(v string) *CreateDatasetItemResponseBody {
	s.RequestId = &v
	return s
}

type CreateDatasetItemResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateDatasetItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDatasetItemResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDatasetItemResponse) GoString() string {
	return s.String()
}

func (s *CreateDatasetItemResponse) SetHeaders(v map[string]*string) *CreateDatasetItemResponse {
	s.Headers = v
	return s
}

func (s *CreateDatasetItemResponse) SetStatusCode(v int32) *CreateDatasetItemResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDatasetItemResponse) SetBody(v *CreateDatasetItemResponseBody) *CreateDatasetItemResponse {
	s.Body = v
	return s
}

type CreateInstanceRequest struct {
	AutoPay                  *bool                                            `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	ChargeType               *string                                          `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	Duration                 *int32                                           `json:"Duration,omitempty" xml:"Duration,omitempty"`
	HttpsPolicy              *string                                          `json:"HttpsPolicy,omitempty" xml:"HttpsPolicy,omitempty"`
	InstanceCidr             *string                                          `json:"InstanceCidr,omitempty" xml:"InstanceCidr,omitempty"`
	InstanceName             *string                                          `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceSpec             *string                                          `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	InstanceType             *string                                          `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	PricingCycle             *string                                          `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	Tag                      []*CreateInstanceRequestTag                      `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	Token                    *string                                          `json:"Token,omitempty" xml:"Token,omitempty"`
	UserVpcId                *string                                          `json:"UserVpcId,omitempty" xml:"UserVpcId,omitempty"`
	ZoneId                   *string                                          `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ZoneVSwitchSecurityGroup []*CreateInstanceRequestZoneVSwitchSecurityGroup `json:"ZoneVSwitchSecurityGroup,omitempty" xml:"ZoneVSwitchSecurityGroup,omitempty" type:"Repeated"`
}

func (s CreateInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequest) SetAutoPay(v bool) *CreateInstanceRequest {
	s.AutoPay = &v
	return s
}

func (s *CreateInstanceRequest) SetChargeType(v string) *CreateInstanceRequest {
	s.ChargeType = &v
	return s
}

func (s *CreateInstanceRequest) SetDuration(v int32) *CreateInstanceRequest {
	s.Duration = &v
	return s
}

func (s *CreateInstanceRequest) SetHttpsPolicy(v string) *CreateInstanceRequest {
	s.HttpsPolicy = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceCidr(v string) *CreateInstanceRequest {
	s.InstanceCidr = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceName(v string) *CreateInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceSpec(v string) *CreateInstanceRequest {
	s.InstanceSpec = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceType(v string) *CreateInstanceRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateInstanceRequest) SetPricingCycle(v string) *CreateInstanceRequest {
	s.PricingCycle = &v
	return s
}

func (s *CreateInstanceRequest) SetTag(v []*CreateInstanceRequestTag) *CreateInstanceRequest {
	s.Tag = v
	return s
}

func (s *CreateInstanceRequest) SetToken(v string) *CreateInstanceRequest {
	s.Token = &v
	return s
}

func (s *CreateInstanceRequest) SetUserVpcId(v string) *CreateInstanceRequest {
	s.UserVpcId = &v
	return s
}

func (s *CreateInstanceRequest) SetZoneId(v string) *CreateInstanceRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateInstanceRequest) SetZoneVSwitchSecurityGroup(v []*CreateInstanceRequestZoneVSwitchSecurityGroup) *CreateInstanceRequest {
	s.ZoneVSwitchSecurityGroup = v
	return s
}

type CreateInstanceRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateInstanceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestTag) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestTag) SetKey(v string) *CreateInstanceRequestTag {
	s.Key = &v
	return s
}

func (s *CreateInstanceRequestTag) SetValue(v string) *CreateInstanceRequestTag {
	s.Value = &v
	return s
}

type CreateInstanceRequestZoneVSwitchSecurityGroup struct {
	CidrBlock       *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	VSwitchId       *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ZoneId          *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateInstanceRequestZoneVSwitchSecurityGroup) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestZoneVSwitchSecurityGroup) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestZoneVSwitchSecurityGroup) SetCidrBlock(v string) *CreateInstanceRequestZoneVSwitchSecurityGroup {
	s.CidrBlock = &v
	return s
}

func (s *CreateInstanceRequestZoneVSwitchSecurityGroup) SetSecurityGroupId(v string) *CreateInstanceRequestZoneVSwitchSecurityGroup {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateInstanceRequestZoneVSwitchSecurityGroup) SetVSwitchId(v string) *CreateInstanceRequestZoneVSwitchSecurityGroup {
	s.VSwitchId = &v
	return s
}

func (s *CreateInstanceRequestZoneVSwitchSecurityGroup) SetZoneId(v string) *CreateInstanceRequestZoneVSwitchSecurityGroup {
	s.ZoneId = &v
	return s
}

type CreateInstanceResponseBody struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagStatus  *bool   `json:"TagStatus,omitempty" xml:"TagStatus,omitempty"`
}

func (s CreateInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBody) SetInstanceId(v string) *CreateInstanceResponseBody {
	s.InstanceId = &v
	return s
}

func (s *CreateInstanceResponseBody) SetRequestId(v string) *CreateInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateInstanceResponseBody) SetTagStatus(v bool) *CreateInstanceResponseBody {
	s.TagStatus = &v
	return s
}

type CreateInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponse) SetHeaders(v map[string]*string) *CreateInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateInstanceResponse) SetStatusCode(v int32) *CreateInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInstanceResponse) SetBody(v *CreateInstanceResponseBody) *CreateInstanceResponse {
	s.Body = v
	return s
}

type CreateIntranetDomainRequest struct {
	// The custom domain name.
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s CreateIntranetDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIntranetDomainRequest) GoString() string {
	return s.String()
}

func (s *CreateIntranetDomainRequest) SetGroupId(v string) *CreateIntranetDomainRequest {
	s.GroupId = &v
	return s
}

func (s *CreateIntranetDomainRequest) SetSecurityToken(v string) *CreateIntranetDomainRequest {
	s.SecurityToken = &v
	return s
}

type CreateIntranetDomainResponseBody struct {
	// The ID of the request.
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// auditing
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateIntranetDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateIntranetDomainResponseBody) GoString() string {
	return s.String()
}

func (s *CreateIntranetDomainResponseBody) SetDomainName(v string) *CreateIntranetDomainResponseBody {
	s.DomainName = &v
	return s
}

func (s *CreateIntranetDomainResponseBody) SetRequestId(v string) *CreateIntranetDomainResponseBody {
	s.RequestId = &v
	return s
}

type CreateIntranetDomainResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateIntranetDomainResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateIntranetDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIntranetDomainResponse) GoString() string {
	return s.String()
}

func (s *CreateIntranetDomainResponse) SetHeaders(v map[string]*string) *CreateIntranetDomainResponse {
	s.Headers = v
	return s
}

func (s *CreateIntranetDomainResponse) SetStatusCode(v int32) *CreateIntranetDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateIntranetDomainResponse) SetBody(v *CreateIntranetDomainResponseBody) *CreateIntranetDomainResponse {
	s.Body = v
	return s
}

type CreateIpControlRequest struct {
	Description      *string                                   `json:"Description,omitempty" xml:"Description,omitempty"`
	IpControlName    *string                                   `json:"IpControlName,omitempty" xml:"IpControlName,omitempty"`
	IpControlPolicys []*CreateIpControlRequestIpControlPolicys `json:"IpControlPolicys,omitempty" xml:"IpControlPolicys,omitempty" type:"Repeated"`
	IpControlType    *string                                   `json:"IpControlType,omitempty" xml:"IpControlType,omitempty"`
	SecurityToken    *string                                   `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s CreateIpControlRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIpControlRequest) GoString() string {
	return s.String()
}

func (s *CreateIpControlRequest) SetDescription(v string) *CreateIpControlRequest {
	s.Description = &v
	return s
}

func (s *CreateIpControlRequest) SetIpControlName(v string) *CreateIpControlRequest {
	s.IpControlName = &v
	return s
}

func (s *CreateIpControlRequest) SetIpControlPolicys(v []*CreateIpControlRequestIpControlPolicys) *CreateIpControlRequest {
	s.IpControlPolicys = v
	return s
}

func (s *CreateIpControlRequest) SetIpControlType(v string) *CreateIpControlRequest {
	s.IpControlType = &v
	return s
}

func (s *CreateIpControlRequest) SetSecurityToken(v string) *CreateIpControlRequest {
	s.SecurityToken = &v
	return s
}

type CreateIpControlRequestIpControlPolicys struct {
	AppId  *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	CidrIp *string `json:"CidrIp,omitempty" xml:"CidrIp,omitempty"`
}

func (s CreateIpControlRequestIpControlPolicys) String() string {
	return tea.Prettify(s)
}

func (s CreateIpControlRequestIpControlPolicys) GoString() string {
	return s.String()
}

func (s *CreateIpControlRequestIpControlPolicys) SetAppId(v string) *CreateIpControlRequestIpControlPolicys {
	s.AppId = &v
	return s
}

func (s *CreateIpControlRequestIpControlPolicys) SetCidrIp(v string) *CreateIpControlRequestIpControlPolicys {
	s.CidrIp = &v
	return s
}

type CreateIpControlResponseBody struct {
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateIpControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateIpControlResponseBody) GoString() string {
	return s.String()
}

func (s *CreateIpControlResponseBody) SetIpControlId(v string) *CreateIpControlResponseBody {
	s.IpControlId = &v
	return s
}

func (s *CreateIpControlResponseBody) SetRequestId(v string) *CreateIpControlResponseBody {
	s.RequestId = &v
	return s
}

type CreateIpControlResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateIpControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateIpControlResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIpControlResponse) GoString() string {
	return s.String()
}

func (s *CreateIpControlResponse) SetHeaders(v map[string]*string) *CreateIpControlResponse {
	s.Headers = v
	return s
}

func (s *CreateIpControlResponse) SetStatusCode(v int32) *CreateIpControlResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateIpControlResponse) SetBody(v *CreateIpControlResponseBody) *CreateIpControlResponse {
	s.Body = v
	return s
}

type CreateLogConfigRequest struct {
	LogType       *string `json:"LogType,omitempty" xml:"LogType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// slslogstore
	SlsLogStore *string `json:"SlsLogStore,omitempty" xml:"SlsLogStore,omitempty"`
	SlsProject  *string `json:"SlsProject,omitempty" xml:"SlsProject,omitempty"`
}

func (s CreateLogConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLogConfigRequest) GoString() string {
	return s.String()
}

func (s *CreateLogConfigRequest) SetLogType(v string) *CreateLogConfigRequest {
	s.LogType = &v
	return s
}

func (s *CreateLogConfigRequest) SetSecurityToken(v string) *CreateLogConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateLogConfigRequest) SetSlsLogStore(v string) *CreateLogConfigRequest {
	s.SlsLogStore = &v
	return s
}

func (s *CreateLogConfigRequest) SetSlsProject(v string) *CreateLogConfigRequest {
	s.SlsProject = &v
	return s
}

type CreateLogConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLogConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLogConfigResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLogConfigResponseBody) SetRequestId(v string) *CreateLogConfigResponseBody {
	s.RequestId = &v
	return s
}

type CreateLogConfigResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateLogConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLogConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLogConfigResponse) GoString() string {
	return s.String()
}

func (s *CreateLogConfigResponse) SetHeaders(v map[string]*string) *CreateLogConfigResponse {
	s.Headers = v
	return s
}

func (s *CreateLogConfigResponse) SetStatusCode(v int32) *CreateLogConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLogConfigResponse) SetBody(v *CreateLogConfigResponseBody) *CreateLogConfigResponse {
	s.Body = v
	return s
}

type CreateModelRequest struct {
	// The description of the model definition.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group to which the model belongs.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the model. The name must be unique within the group.
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	// The definition of the model in JSON Schema.
	Schema *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
}

func (s CreateModelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateModelRequest) GoString() string {
	return s.String()
}

func (s *CreateModelRequest) SetDescription(v string) *CreateModelRequest {
	s.Description = &v
	return s
}

func (s *CreateModelRequest) SetGroupId(v string) *CreateModelRequest {
	s.GroupId = &v
	return s
}

func (s *CreateModelRequest) SetModelName(v string) *CreateModelRequest {
	s.ModelName = &v
	return s
}

func (s *CreateModelRequest) SetSchema(v string) *CreateModelRequest {
	s.Schema = &v
	return s
}

type CreateModelResponseBody struct {
	// The time when the model was created.
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The description of the created model.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group to which the created model belongs.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the created model.
	ModelId *string `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	// The name of the created model.
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	// The URI of the created model.
	ModelRef *string `json:"ModelRef,omitempty" xml:"ModelRef,omitempty"`
	// The time when the model is last modified.
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The region to which the created model belongs.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The definition of the created model.
	Schema *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
}

func (s CreateModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateModelResponseBody) GoString() string {
	return s.String()
}

func (s *CreateModelResponseBody) SetCreatedTime(v string) *CreateModelResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *CreateModelResponseBody) SetDescription(v string) *CreateModelResponseBody {
	s.Description = &v
	return s
}

func (s *CreateModelResponseBody) SetGroupId(v string) *CreateModelResponseBody {
	s.GroupId = &v
	return s
}

func (s *CreateModelResponseBody) SetModelId(v string) *CreateModelResponseBody {
	s.ModelId = &v
	return s
}

func (s *CreateModelResponseBody) SetModelName(v string) *CreateModelResponseBody {
	s.ModelName = &v
	return s
}

func (s *CreateModelResponseBody) SetModelRef(v string) *CreateModelResponseBody {
	s.ModelRef = &v
	return s
}

func (s *CreateModelResponseBody) SetModifiedTime(v string) *CreateModelResponseBody {
	s.ModifiedTime = &v
	return s
}

func (s *CreateModelResponseBody) SetRegionId(v string) *CreateModelResponseBody {
	s.RegionId = &v
	return s
}

func (s *CreateModelResponseBody) SetRequestId(v string) *CreateModelResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateModelResponseBody) SetSchema(v string) *CreateModelResponseBody {
	s.Schema = &v
	return s
}

type CreateModelResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateModelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateModelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateModelResponse) GoString() string {
	return s.String()
}

func (s *CreateModelResponse) SetHeaders(v map[string]*string) *CreateModelResponse {
	s.Headers = v
	return s
}

func (s *CreateModelResponse) SetStatusCode(v int32) *CreateModelResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateModelResponse) SetBody(v *CreateModelResponseBody) *CreateModelResponse {
	s.Body = v
	return s
}

type CreateMonitorGroupRequest struct {
	Auth              *string `json:"Auth,omitempty" xml:"Auth,omitempty"`
	GroupId           *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	RawMonitorGroupId *int64  `json:"RawMonitorGroupId,omitempty" xml:"RawMonitorGroupId,omitempty"`
	SecurityToken     *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s CreateMonitorGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupRequest) SetAuth(v string) *CreateMonitorGroupRequest {
	s.Auth = &v
	return s
}

func (s *CreateMonitorGroupRequest) SetGroupId(v string) *CreateMonitorGroupRequest {
	s.GroupId = &v
	return s
}

func (s *CreateMonitorGroupRequest) SetRawMonitorGroupId(v int64) *CreateMonitorGroupRequest {
	s.RawMonitorGroupId = &v
	return s
}

func (s *CreateMonitorGroupRequest) SetSecurityToken(v string) *CreateMonitorGroupRequest {
	s.SecurityToken = &v
	return s
}

type CreateMonitorGroupResponseBody struct {
	MonitorGroupId *int64  `json:"MonitorGroupId,omitempty" xml:"MonitorGroupId,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateMonitorGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupResponseBody) SetMonitorGroupId(v int64) *CreateMonitorGroupResponseBody {
	s.MonitorGroupId = &v
	return s
}

func (s *CreateMonitorGroupResponseBody) SetRequestId(v string) *CreateMonitorGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateMonitorGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMonitorGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMonitorGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupResponse) SetHeaders(v map[string]*string) *CreateMonitorGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateMonitorGroupResponse) SetStatusCode(v int32) *CreateMonitorGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMonitorGroupResponse) SetBody(v *CreateMonitorGroupResponseBody) *CreateMonitorGroupResponse {
	s.Body = v
	return s
}

type CreatePluginRequest struct {
	Description   *string                   `json:"Description,omitempty" xml:"Description,omitempty"`
	PluginData    *string                   `json:"PluginData,omitempty" xml:"PluginData,omitempty"`
	PluginName    *string                   `json:"PluginName,omitempty" xml:"PluginName,omitempty"`
	PluginType    *string                   `json:"PluginType,omitempty" xml:"PluginType,omitempty"`
	SecurityToken *string                   `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag           []*CreatePluginRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreatePluginRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePluginRequest) GoString() string {
	return s.String()
}

func (s *CreatePluginRequest) SetDescription(v string) *CreatePluginRequest {
	s.Description = &v
	return s
}

func (s *CreatePluginRequest) SetPluginData(v string) *CreatePluginRequest {
	s.PluginData = &v
	return s
}

func (s *CreatePluginRequest) SetPluginName(v string) *CreatePluginRequest {
	s.PluginName = &v
	return s
}

func (s *CreatePluginRequest) SetPluginType(v string) *CreatePluginRequest {
	s.PluginType = &v
	return s
}

func (s *CreatePluginRequest) SetSecurityToken(v string) *CreatePluginRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreatePluginRequest) SetTag(v []*CreatePluginRequestTag) *CreatePluginRequest {
	s.Tag = v
	return s
}

type CreatePluginRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreatePluginRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreatePluginRequestTag) GoString() string {
	return s.String()
}

func (s *CreatePluginRequestTag) SetKey(v string) *CreatePluginRequestTag {
	s.Key = &v
	return s
}

func (s *CreatePluginRequestTag) SetValue(v string) *CreatePluginRequestTag {
	s.Value = &v
	return s
}

type CreatePluginResponseBody struct {
	PluginId  *string `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagStatus *bool   `json:"TagStatus,omitempty" xml:"TagStatus,omitempty"`
}

func (s CreatePluginResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePluginResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePluginResponseBody) SetPluginId(v string) *CreatePluginResponseBody {
	s.PluginId = &v
	return s
}

func (s *CreatePluginResponseBody) SetRequestId(v string) *CreatePluginResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePluginResponseBody) SetTagStatus(v bool) *CreatePluginResponseBody {
	s.TagStatus = &v
	return s
}

type CreatePluginResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreatePluginResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreatePluginResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePluginResponse) GoString() string {
	return s.String()
}

func (s *CreatePluginResponse) SetHeaders(v map[string]*string) *CreatePluginResponse {
	s.Headers = v
	return s
}

func (s *CreatePluginResponse) SetStatusCode(v int32) *CreatePluginResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePluginResponse) SetBody(v *CreatePluginResponseBody) *CreatePluginResponse {
	s.Body = v
	return s
}

type CreateSignatureRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the request.
	SignatureKey *string `json:"SignatureKey,omitempty" xml:"SignatureKey,omitempty"`
	// The Secret value of the key. The value must be 6 to 30 characters in length and can contain letters, digits, and special characters. Special characters include underscores (\_), at signs (@), number signs (#), exclamation points (!), and asterisks (\*). The value must start with a letter.
	SignatureName *string `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
	// The ID of the back-end signature key.
	SignatureSecret *string `json:"SignatureSecret,omitempty" xml:"SignatureSecret,omitempty"`
}

func (s CreateSignatureRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSignatureRequest) GoString() string {
	return s.String()
}

func (s *CreateSignatureRequest) SetSecurityToken(v string) *CreateSignatureRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateSignatureRequest) SetSignatureKey(v string) *CreateSignatureRequest {
	s.SignatureKey = &v
	return s
}

func (s *CreateSignatureRequest) SetSignatureName(v string) *CreateSignatureRequest {
	s.SignatureName = &v
	return s
}

func (s *CreateSignatureRequest) SetSignatureSecret(v string) *CreateSignatureRequest {
	s.SignatureSecret = &v
	return s
}

type CreateSignatureResponseBody struct {
	// The name of the back-end signature key.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// *   This API is intended for API providers.
	// *   The API operation only creates a key policy. You must call the binding operation to bind the key to an API.
	// *   After the key is bound to the API, requests sent from API Gateway to the backend service contain signature strings. You can specify whether your backend service verifies these signature strings.
	// *   The QPS limit on this operation is 50 per user.
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// Creates a backend signature key.
	SignatureName *string `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
}

func (s CreateSignatureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSignatureResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSignatureResponseBody) SetRequestId(v string) *CreateSignatureResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSignatureResponseBody) SetSignatureId(v string) *CreateSignatureResponseBody {
	s.SignatureId = &v
	return s
}

func (s *CreateSignatureResponseBody) SetSignatureName(v string) *CreateSignatureResponseBody {
	s.SignatureName = &v
	return s
}

type CreateSignatureResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateSignatureResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSignatureResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSignatureResponse) GoString() string {
	return s.String()
}

func (s *CreateSignatureResponse) SetHeaders(v map[string]*string) *CreateSignatureResponse {
	s.Headers = v
	return s
}

func (s *CreateSignatureResponse) SetStatusCode(v int32) *CreateSignatureResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSignatureResponse) SetBody(v *CreateSignatureResponseBody) *CreateSignatureResponse {
	s.Body = v
	return s
}

type CreateTrafficControlRequest struct {
	// The default throttling value for each app.
	ApiDefault *int32 `json:"ApiDefault,omitempty" xml:"ApiDefault,omitempty"`
	// ThrottlingTestDescription
	AppDefault *int32 `json:"AppDefault,omitempty" xml:"AppDefault,omitempty"`
	// The ID of the throttling policy.
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The unit to be used in the throttling policy. Valid values:
	//
	// *   **SECOND**
	// *   **MINUTE**
	// *   **HOUR**
	// *   **DAY**
	TrafficControlName *string `json:"TrafficControlName,omitempty" xml:"TrafficControlName,omitempty"`
	// The default throttling value for each user.
	TrafficControlUnit *string `json:"TrafficControlUnit,omitempty" xml:"TrafficControlUnit,omitempty"`
	// The description of the throttling policy.
	UserDefault *int32 `json:"UserDefault,omitempty" xml:"UserDefault,omitempty"`
}

func (s CreateTrafficControlRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTrafficControlRequest) GoString() string {
	return s.String()
}

func (s *CreateTrafficControlRequest) SetApiDefault(v int32) *CreateTrafficControlRequest {
	s.ApiDefault = &v
	return s
}

func (s *CreateTrafficControlRequest) SetAppDefault(v int32) *CreateTrafficControlRequest {
	s.AppDefault = &v
	return s
}

func (s *CreateTrafficControlRequest) SetDescription(v string) *CreateTrafficControlRequest {
	s.Description = &v
	return s
}

func (s *CreateTrafficControlRequest) SetSecurityToken(v string) *CreateTrafficControlRequest {
	s.SecurityToken = &v
	return s
}

func (s *CreateTrafficControlRequest) SetTrafficControlName(v string) *CreateTrafficControlRequest {
	s.TrafficControlName = &v
	return s
}

func (s *CreateTrafficControlRequest) SetTrafficControlUnit(v string) *CreateTrafficControlRequest {
	s.TrafficControlUnit = &v
	return s
}

func (s *CreateTrafficControlRequest) SetUserDefault(v int32) *CreateTrafficControlRequest {
	s.UserDefault = &v
	return s
}

type CreateTrafficControlResponseBody struct {
	// Creates a custom throttling policy.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// *   This API is intended for API providers.
	// *   Throttling policies must be bound to APIs to take effect. After a policy is bound to an API, it goes into effect on that API immediately.
	// *   The QPS limit on this operation is 50 per user.
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
}

func (s CreateTrafficControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTrafficControlResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTrafficControlResponseBody) SetRequestId(v string) *CreateTrafficControlResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTrafficControlResponseBody) SetTrafficControlId(v string) *CreateTrafficControlResponseBody {
	s.TrafficControlId = &v
	return s
}

type CreateTrafficControlResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateTrafficControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateTrafficControlResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTrafficControlResponse) GoString() string {
	return s.String()
}

func (s *CreateTrafficControlResponse) SetHeaders(v map[string]*string) *CreateTrafficControlResponse {
	s.Headers = v
	return s
}

func (s *CreateTrafficControlResponse) SetStatusCode(v int32) *CreateTrafficControlResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTrafficControlResponse) SetBody(v *CreateTrafficControlResponseBody) *CreateTrafficControlResponse {
	s.Body = v
	return s
}

type DeleteAccessControlListRequest struct {
	AclId         *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteAccessControlListRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAccessControlListRequest) GoString() string {
	return s.String()
}

func (s *DeleteAccessControlListRequest) SetAclId(v string) *DeleteAccessControlListRequest {
	s.AclId = &v
	return s
}

func (s *DeleteAccessControlListRequest) SetSecurityToken(v string) *DeleteAccessControlListRequest {
	s.SecurityToken = &v
	return s
}

type DeleteAccessControlListResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAccessControlListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAccessControlListResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAccessControlListResponseBody) SetRequestId(v string) *DeleteAccessControlListResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAccessControlListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteAccessControlListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteAccessControlListResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAccessControlListResponse) GoString() string {
	return s.String()
}

func (s *DeleteAccessControlListResponse) SetHeaders(v map[string]*string) *DeleteAccessControlListResponse {
	s.Headers = v
	return s
}

func (s *DeleteAccessControlListResponse) SetStatusCode(v int32) *DeleteAccessControlListResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAccessControlListResponse) SetBody(v *DeleteAccessControlListResponseBody) *DeleteAccessControlListResponse {
	s.Body = v
	return s
}

type DeleteAllTrafficSpecialControlRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// *   This API is intended for API providers.
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
}

func (s DeleteAllTrafficSpecialControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAllTrafficSpecialControlRequest) GoString() string {
	return s.String()
}

func (s *DeleteAllTrafficSpecialControlRequest) SetSecurityToken(v string) *DeleteAllTrafficSpecialControlRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteAllTrafficSpecialControlRequest) SetTrafficControlId(v string) *DeleteAllTrafficSpecialControlRequest {
	s.TrafficControlId = &v
	return s
}

type DeleteAllTrafficSpecialControlResponseBody struct {
	// Deletes all custom special policies of a specified throttling policy.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAllTrafficSpecialControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAllTrafficSpecialControlResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAllTrafficSpecialControlResponseBody) SetRequestId(v string) *DeleteAllTrafficSpecialControlResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAllTrafficSpecialControlResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteAllTrafficSpecialControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteAllTrafficSpecialControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAllTrafficSpecialControlResponse) GoString() string {
	return s.String()
}

func (s *DeleteAllTrafficSpecialControlResponse) SetHeaders(v map[string]*string) *DeleteAllTrafficSpecialControlResponse {
	s.Headers = v
	return s
}

func (s *DeleteAllTrafficSpecialControlResponse) SetStatusCode(v int32) *DeleteAllTrafficSpecialControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAllTrafficSpecialControlResponse) SetBody(v *DeleteAllTrafficSpecialControlResponseBody) *DeleteAllTrafficSpecialControlResponse {
	s.Body = v
	return s
}

type DeleteApiRequest struct {
	ApiId         *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiRequest) GoString() string {
	return s.String()
}

func (s *DeleteApiRequest) SetApiId(v string) *DeleteApiRequest {
	s.ApiId = &v
	return s
}

func (s *DeleteApiRequest) SetGroupId(v string) *DeleteApiRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteApiRequest) SetSecurityToken(v string) *DeleteApiRequest {
	s.SecurityToken = &v
	return s
}

type DeleteApiResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteApiResponseBody) SetRequestId(v string) *DeleteApiResponseBody {
	s.RequestId = &v
	return s
}

type DeleteApiResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiResponse) GoString() string {
	return s.String()
}

func (s *DeleteApiResponse) SetHeaders(v map[string]*string) *DeleteApiResponse {
	s.Headers = v
	return s
}

func (s *DeleteApiResponse) SetStatusCode(v int32) *DeleteApiResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteApiResponse) SetBody(v *DeleteApiResponseBody) *DeleteApiResponse {
	s.Body = v
	return s
}

type DeleteApiGroupRequest struct {
	GroupId       *string                     `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string                     `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag           []*DeleteApiGroupRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DeleteApiGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteApiGroupRequest) SetGroupId(v string) *DeleteApiGroupRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteApiGroupRequest) SetSecurityToken(v string) *DeleteApiGroupRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteApiGroupRequest) SetTag(v []*DeleteApiGroupRequestTag) *DeleteApiGroupRequest {
	s.Tag = v
	return s
}

type DeleteApiGroupRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DeleteApiGroupRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiGroupRequestTag) GoString() string {
	return s.String()
}

func (s *DeleteApiGroupRequestTag) SetKey(v string) *DeleteApiGroupRequestTag {
	s.Key = &v
	return s
}

func (s *DeleteApiGroupRequestTag) SetValue(v string) *DeleteApiGroupRequestTag {
	s.Value = &v
	return s
}

type DeleteApiGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteApiGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteApiGroupResponseBody) SetRequestId(v string) *DeleteApiGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteApiGroupResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteApiGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteApiGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteApiGroupResponse) SetHeaders(v map[string]*string) *DeleteApiGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteApiGroupResponse) SetStatusCode(v int32) *DeleteApiGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteApiGroupResponse) SetBody(v *DeleteApiGroupResponseBody) *DeleteApiGroupResponse {
	s.Body = v
	return s
}

type DeleteApiStageVariableRequest struct {
	// The name of the variable to be deleted. This parameter is case-sensitive.
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the request.
	StageId *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	// *   This operation is intended for API providers.
	VariableName *string `json:"VariableName,omitempty" xml:"VariableName,omitempty"`
}

func (s DeleteApiStageVariableRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiStageVariableRequest) GoString() string {
	return s.String()
}

func (s *DeleteApiStageVariableRequest) SetGroupId(v string) *DeleteApiStageVariableRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteApiStageVariableRequest) SetSecurityToken(v string) *DeleteApiStageVariableRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteApiStageVariableRequest) SetStageId(v string) *DeleteApiStageVariableRequest {
	s.StageId = &v
	return s
}

func (s *DeleteApiStageVariableRequest) SetVariableName(v string) *DeleteApiStageVariableRequest {
	s.VariableName = &v
	return s
}

type DeleteApiStageVariableResponseBody struct {
	// Deletes a specified variable in a specified environment.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteApiStageVariableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiStageVariableResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteApiStageVariableResponseBody) SetRequestId(v string) *DeleteApiStageVariableResponseBody {
	s.RequestId = &v
	return s
}

type DeleteApiStageVariableResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteApiStageVariableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteApiStageVariableResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApiStageVariableResponse) GoString() string {
	return s.String()
}

func (s *DeleteApiStageVariableResponse) SetHeaders(v map[string]*string) *DeleteApiStageVariableResponse {
	s.Headers = v
	return s
}

func (s *DeleteApiStageVariableResponse) SetStatusCode(v int32) *DeleteApiStageVariableResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteApiStageVariableResponse) SetBody(v *DeleteApiStageVariableResponseBody) *DeleteApiStageVariableResponse {
	s.Body = v
	return s
}

type DeleteAppRequest struct {
	AppId         *int64                 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	SecurityToken *string                `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag           []*DeleteAppRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DeleteAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppRequest) GoString() string {
	return s.String()
}

func (s *DeleteAppRequest) SetAppId(v int64) *DeleteAppRequest {
	s.AppId = &v
	return s
}

func (s *DeleteAppRequest) SetSecurityToken(v string) *DeleteAppRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteAppRequest) SetTag(v []*DeleteAppRequestTag) *DeleteAppRequest {
	s.Tag = v
	return s
}

type DeleteAppRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DeleteAppRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppRequestTag) GoString() string {
	return s.String()
}

func (s *DeleteAppRequestTag) SetKey(v string) *DeleteAppRequestTag {
	s.Key = &v
	return s
}

func (s *DeleteAppRequestTag) SetValue(v string) *DeleteAppRequestTag {
	s.Value = &v
	return s
}

type DeleteAppResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAppResponseBody) SetRequestId(v string) *DeleteAppResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAppResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppResponse) GoString() string {
	return s.String()
}

func (s *DeleteAppResponse) SetHeaders(v map[string]*string) *DeleteAppResponse {
	s.Headers = v
	return s
}

func (s *DeleteAppResponse) SetStatusCode(v int32) *DeleteAppResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAppResponse) SetBody(v *DeleteAppResponseBody) *DeleteAppResponse {
	s.Body = v
	return s
}

type DeleteBackendRequest struct {
	BackendId     *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteBackendRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackendRequest) GoString() string {
	return s.String()
}

func (s *DeleteBackendRequest) SetBackendId(v string) *DeleteBackendRequest {
	s.BackendId = &v
	return s
}

func (s *DeleteBackendRequest) SetSecurityToken(v string) *DeleteBackendRequest {
	s.SecurityToken = &v
	return s
}

type DeleteBackendResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteBackendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackendResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBackendResponseBody) SetRequestId(v string) *DeleteBackendResponseBody {
	s.RequestId = &v
	return s
}

type DeleteBackendResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteBackendResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteBackendResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackendResponse) GoString() string {
	return s.String()
}

func (s *DeleteBackendResponse) SetHeaders(v map[string]*string) *DeleteBackendResponse {
	s.Headers = v
	return s
}

func (s *DeleteBackendResponse) SetStatusCode(v int32) *DeleteBackendResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteBackendResponse) SetBody(v *DeleteBackendResponseBody) *DeleteBackendResponse {
	s.Body = v
	return s
}

type DeleteBackendModelRequest struct {
	BackendId      *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	BackendModelId *string `json:"BackendModelId,omitempty" xml:"BackendModelId,omitempty"`
	SecurityToken  *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageName      *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DeleteBackendModelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackendModelRequest) GoString() string {
	return s.String()
}

func (s *DeleteBackendModelRequest) SetBackendId(v string) *DeleteBackendModelRequest {
	s.BackendId = &v
	return s
}

func (s *DeleteBackendModelRequest) SetBackendModelId(v string) *DeleteBackendModelRequest {
	s.BackendModelId = &v
	return s
}

func (s *DeleteBackendModelRequest) SetSecurityToken(v string) *DeleteBackendModelRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteBackendModelRequest) SetStageName(v string) *DeleteBackendModelRequest {
	s.StageName = &v
	return s
}

type DeleteBackendModelResponseBody struct {
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteBackendModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackendModelResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBackendModelResponseBody) SetOperationId(v string) *DeleteBackendModelResponseBody {
	s.OperationId = &v
	return s
}

func (s *DeleteBackendModelResponseBody) SetRequestId(v string) *DeleteBackendModelResponseBody {
	s.RequestId = &v
	return s
}

type DeleteBackendModelResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteBackendModelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteBackendModelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackendModelResponse) GoString() string {
	return s.String()
}

func (s *DeleteBackendModelResponse) SetHeaders(v map[string]*string) *DeleteBackendModelResponse {
	s.Headers = v
	return s
}

func (s *DeleteBackendModelResponse) SetStatusCode(v int32) *DeleteBackendModelResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteBackendModelResponse) SetBody(v *DeleteBackendModelResponseBody) *DeleteBackendModelResponse {
	s.Body = v
	return s
}

type DeleteDatasetRequest struct {
	DatasetId     *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteDatasetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetRequest) GoString() string {
	return s.String()
}

func (s *DeleteDatasetRequest) SetDatasetId(v string) *DeleteDatasetRequest {
	s.DatasetId = &v
	return s
}

func (s *DeleteDatasetRequest) SetSecurityToken(v string) *DeleteDatasetRequest {
	s.SecurityToken = &v
	return s
}

type DeleteDatasetResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDatasetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDatasetResponseBody) SetRequestId(v string) *DeleteDatasetResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDatasetResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteDatasetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDatasetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetResponse) GoString() string {
	return s.String()
}

func (s *DeleteDatasetResponse) SetHeaders(v map[string]*string) *DeleteDatasetResponse {
	s.Headers = v
	return s
}

func (s *DeleteDatasetResponse) SetStatusCode(v int32) *DeleteDatasetResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDatasetResponse) SetBody(v *DeleteDatasetResponseBody) *DeleteDatasetResponse {
	s.Body = v
	return s
}

type DeleteDatasetItemRequest struct {
	DatasetId     *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	DatasetItemId *string `json:"DatasetItemId,omitempty" xml:"DatasetItemId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteDatasetItemRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetItemRequest) GoString() string {
	return s.String()
}

func (s *DeleteDatasetItemRequest) SetDatasetId(v string) *DeleteDatasetItemRequest {
	s.DatasetId = &v
	return s
}

func (s *DeleteDatasetItemRequest) SetDatasetItemId(v string) *DeleteDatasetItemRequest {
	s.DatasetItemId = &v
	return s
}

func (s *DeleteDatasetItemRequest) SetSecurityToken(v string) *DeleteDatasetItemRequest {
	s.SecurityToken = &v
	return s
}

type DeleteDatasetItemResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDatasetItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetItemResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDatasetItemResponseBody) SetRequestId(v string) *DeleteDatasetItemResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDatasetItemResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteDatasetItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDatasetItemResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatasetItemResponse) GoString() string {
	return s.String()
}

func (s *DeleteDatasetItemResponse) SetHeaders(v map[string]*string) *DeleteDatasetItemResponse {
	s.Headers = v
	return s
}

func (s *DeleteDatasetItemResponse) SetStatusCode(v int32) *DeleteDatasetItemResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDatasetItemResponse) SetBody(v *DeleteDatasetItemResponseBody) *DeleteDatasetItemResponse {
	s.Body = v
	return s
}

type DeleteDomainRequest struct {
	// *   This operation is intended for API providers.
	// *   If the specified domain name does not exist, a successful response will still appear.
	// *   Unbinding a domain name from an API group will affect access to the APIs in the group. Exercise caution when using this operation.
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The ID of the request.
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDomainRequest) GoString() string {
	return s.String()
}

func (s *DeleteDomainRequest) SetDomainName(v string) *DeleteDomainRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteDomainRequest) SetGroupId(v string) *DeleteDomainRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteDomainRequest) SetSecurityToken(v string) *DeleteDomainRequest {
	s.SecurityToken = &v
	return s
}

type DeleteDomainResponseBody struct {
	// Unbinds a custom domain name from a specified API group.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDomainResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDomainResponseBody) SetRequestId(v string) *DeleteDomainResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDomainResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteDomainResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDomainResponse) GoString() string {
	return s.String()
}

func (s *DeleteDomainResponse) SetHeaders(v map[string]*string) *DeleteDomainResponse {
	s.Headers = v
	return s
}

func (s *DeleteDomainResponse) SetStatusCode(v int32) *DeleteDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDomainResponse) SetBody(v *DeleteDomainResponseBody) *DeleteDomainResponse {
	s.Body = v
	return s
}

type DeleteDomainCertificateRequest struct {
	CertificateId *string `json:"CertificateId,omitempty" xml:"CertificateId,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteDomainCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDomainCertificateRequest) GoString() string {
	return s.String()
}

func (s *DeleteDomainCertificateRequest) SetCertificateId(v string) *DeleteDomainCertificateRequest {
	s.CertificateId = &v
	return s
}

func (s *DeleteDomainCertificateRequest) SetDomainName(v string) *DeleteDomainCertificateRequest {
	s.DomainName = &v
	return s
}

func (s *DeleteDomainCertificateRequest) SetGroupId(v string) *DeleteDomainCertificateRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteDomainCertificateRequest) SetSecurityToken(v string) *DeleteDomainCertificateRequest {
	s.SecurityToken = &v
	return s
}

type DeleteDomainCertificateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDomainCertificateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDomainCertificateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDomainCertificateResponseBody) SetRequestId(v string) *DeleteDomainCertificateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDomainCertificateResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteDomainCertificateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDomainCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDomainCertificateResponse) GoString() string {
	return s.String()
}

func (s *DeleteDomainCertificateResponse) SetHeaders(v map[string]*string) *DeleteDomainCertificateResponse {
	s.Headers = v
	return s
}

func (s *DeleteDomainCertificateResponse) SetStatusCode(v int32) *DeleteDomainCertificateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDomainCertificateResponse) SetBody(v *DeleteDomainCertificateResponseBody) *DeleteDomainCertificateResponse {
	s.Body = v
	return s
}

type DeleteInstanceRequest struct {
	InstanceId *string                     `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Tag        []*DeleteInstanceRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DeleteInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteInstanceRequest) SetInstanceId(v string) *DeleteInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteInstanceRequest) SetTag(v []*DeleteInstanceRequestTag) *DeleteInstanceRequest {
	s.Tag = v
	return s
}

type DeleteInstanceRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DeleteInstanceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceRequestTag) GoString() string {
	return s.String()
}

func (s *DeleteInstanceRequestTag) SetKey(v string) *DeleteInstanceRequestTag {
	s.Key = &v
	return s
}

func (s *DeleteInstanceRequestTag) SetValue(v string) *DeleteInstanceRequestTag {
	s.Value = &v
	return s
}

type DeleteInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteInstanceResponseBody) SetRequestId(v string) *DeleteInstanceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteInstanceResponse) SetHeaders(v map[string]*string) *DeleteInstanceResponse {
	s.Headers = v
	return s
}

func (s *DeleteInstanceResponse) SetStatusCode(v int32) *DeleteInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteInstanceResponse) SetBody(v *DeleteInstanceResponseBody) *DeleteInstanceResponse {
	s.Body = v
	return s
}

type DeleteIpControlRequest struct {
	// *   This operation is intended for API providers.
	// *   If the ACL is bound to an API, you must unbind the ACL from the API before you can delete the ACL. Otherwise, an error is returned.
	// *   If you call this operation on an ACL that does not exist, a success message is returned.
	IpControlId   *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteIpControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteIpControlRequest) GoString() string {
	return s.String()
}

func (s *DeleteIpControlRequest) SetIpControlId(v string) *DeleteIpControlRequest {
	s.IpControlId = &v
	return s
}

func (s *DeleteIpControlRequest) SetSecurityToken(v string) *DeleteIpControlRequest {
	s.SecurityToken = &v
	return s
}

type DeleteIpControlResponseBody struct {
	// Deletes an access control list (ACL).
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteIpControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteIpControlResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteIpControlResponseBody) SetRequestId(v string) *DeleteIpControlResponseBody {
	s.RequestId = &v
	return s
}

type DeleteIpControlResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteIpControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteIpControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteIpControlResponse) GoString() string {
	return s.String()
}

func (s *DeleteIpControlResponse) SetHeaders(v map[string]*string) *DeleteIpControlResponse {
	s.Headers = v
	return s
}

func (s *DeleteIpControlResponse) SetStatusCode(v int32) *DeleteIpControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteIpControlResponse) SetBody(v *DeleteIpControlResponseBody) *DeleteIpControlResponse {
	s.Body = v
	return s
}

type DeleteLogConfigRequest struct {
	LogType       *string `json:"LogType,omitempty" xml:"LogType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteLogConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLogConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteLogConfigRequest) SetLogType(v string) *DeleteLogConfigRequest {
	s.LogType = &v
	return s
}

func (s *DeleteLogConfigRequest) SetSecurityToken(v string) *DeleteLogConfigRequest {
	s.SecurityToken = &v
	return s
}

type DeleteLogConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLogConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLogConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLogConfigResponseBody) SetRequestId(v string) *DeleteLogConfigResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLogConfigResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLogConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLogConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLogConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteLogConfigResponse) SetHeaders(v map[string]*string) *DeleteLogConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteLogConfigResponse) SetStatusCode(v int32) *DeleteLogConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLogConfigResponse) SetBody(v *DeleteLogConfigResponseBody) *DeleteLogConfigResponse {
	s.Body = v
	return s
}

type DeleteModelRequest struct {
	// The ID of the request.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the API group to which the model belongs.
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
}

func (s DeleteModelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteModelRequest) GoString() string {
	return s.String()
}

func (s *DeleteModelRequest) SetGroupId(v string) *DeleteModelRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteModelRequest) SetModelName(v string) *DeleteModelRequest {
	s.ModelName = &v
	return s
}

type DeleteModelResponseBody struct {
	// Deletes a model from Model Management for an API group.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteModelResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteModelResponseBody) SetRequestId(v string) *DeleteModelResponseBody {
	s.RequestId = &v
	return s
}

type DeleteModelResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteModelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteModelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteModelResponse) GoString() string {
	return s.String()
}

func (s *DeleteModelResponse) SetHeaders(v map[string]*string) *DeleteModelResponse {
	s.Headers = v
	return s
}

func (s *DeleteModelResponse) SetStatusCode(v int32) *DeleteModelResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteModelResponse) SetBody(v *DeleteModelResponseBody) *DeleteModelResponse {
	s.Body = v
	return s
}

type DeleteMonitorGroupRequest struct {
	GroupId           *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	RawMonitorGroupId *int64  `json:"RawMonitorGroupId,omitempty" xml:"RawMonitorGroupId,omitempty"`
	SecurityToken     *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DeleteMonitorGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupRequest) SetGroupId(v string) *DeleteMonitorGroupRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteMonitorGroupRequest) SetRawMonitorGroupId(v int64) *DeleteMonitorGroupRequest {
	s.RawMonitorGroupId = &v
	return s
}

func (s *DeleteMonitorGroupRequest) SetSecurityToken(v string) *DeleteMonitorGroupRequest {
	s.SecurityToken = &v
	return s
}

type DeleteMonitorGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMonitorGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupResponseBody) SetRequestId(v string) *DeleteMonitorGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMonitorGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMonitorGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMonitorGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupResponse) SetHeaders(v map[string]*string) *DeleteMonitorGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteMonitorGroupResponse) SetStatusCode(v int32) *DeleteMonitorGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMonitorGroupResponse) SetBody(v *DeleteMonitorGroupResponseBody) *DeleteMonitorGroupResponse {
	s.Body = v
	return s
}

type DeletePluginRequest struct {
	PluginId      *string                   `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	SecurityToken *string                   `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag           []*DeletePluginRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DeletePluginRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePluginRequest) GoString() string {
	return s.String()
}

func (s *DeletePluginRequest) SetPluginId(v string) *DeletePluginRequest {
	s.PluginId = &v
	return s
}

func (s *DeletePluginRequest) SetSecurityToken(v string) *DeletePluginRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeletePluginRequest) SetTag(v []*DeletePluginRequestTag) *DeletePluginRequest {
	s.Tag = v
	return s
}

type DeletePluginRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DeletePluginRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DeletePluginRequestTag) GoString() string {
	return s.String()
}

func (s *DeletePluginRequestTag) SetKey(v string) *DeletePluginRequestTag {
	s.Key = &v
	return s
}

func (s *DeletePluginRequestTag) SetValue(v string) *DeletePluginRequestTag {
	s.Value = &v
	return s
}

type DeletePluginResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePluginResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePluginResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePluginResponseBody) SetRequestId(v string) *DeletePluginResponseBody {
	s.RequestId = &v
	return s
}

type DeletePluginResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeletePluginResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeletePluginResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePluginResponse) GoString() string {
	return s.String()
}

func (s *DeletePluginResponse) SetHeaders(v map[string]*string) *DeletePluginResponse {
	s.Headers = v
	return s
}

func (s *DeletePluginResponse) SetStatusCode(v int32) *DeletePluginResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePluginResponse) SetBody(v *DeletePluginResponseBody) *DeletePluginResponse {
	s.Body = v
	return s
}

type DeleteSignatureRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// *   This API is intended for API providers.
	// *   This API operation deletes an existing backend signature key.
	// *   You cannot delete a key that is bound to an API. To delete the key, you must unbind it first.
	// *   The QPS limit on this operation is 50 per user.
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
}

func (s DeleteSignatureRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSignatureRequest) GoString() string {
	return s.String()
}

func (s *DeleteSignatureRequest) SetSecurityToken(v string) *DeleteSignatureRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteSignatureRequest) SetSignatureId(v string) *DeleteSignatureRequest {
	s.SignatureId = &v
	return s
}

type DeleteSignatureResponseBody struct {
	// Deletes a backend signature key.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSignatureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSignatureResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSignatureResponseBody) SetRequestId(v string) *DeleteSignatureResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSignatureResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSignatureResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSignatureResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSignatureResponse) GoString() string {
	return s.String()
}

func (s *DeleteSignatureResponse) SetHeaders(v map[string]*string) *DeleteSignatureResponse {
	s.Headers = v
	return s
}

func (s *DeleteSignatureResponse) SetStatusCode(v int32) *DeleteSignatureResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSignatureResponse) SetBody(v *DeleteSignatureResponseBody) *DeleteSignatureResponse {
	s.Body = v
	return s
}

type DeleteTrafficControlRequest struct {
	SecurityToken    *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
}

func (s DeleteTrafficControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTrafficControlRequest) GoString() string {
	return s.String()
}

func (s *DeleteTrafficControlRequest) SetSecurityToken(v string) *DeleteTrafficControlRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteTrafficControlRequest) SetTrafficControlId(v string) *DeleteTrafficControlRequest {
	s.TrafficControlId = &v
	return s
}

type DeleteTrafficControlResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteTrafficControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTrafficControlResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTrafficControlResponseBody) SetRequestId(v string) *DeleteTrafficControlResponseBody {
	s.RequestId = &v
	return s
}

type DeleteTrafficControlResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteTrafficControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteTrafficControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTrafficControlResponse) GoString() string {
	return s.String()
}

func (s *DeleteTrafficControlResponse) SetHeaders(v map[string]*string) *DeleteTrafficControlResponse {
	s.Headers = v
	return s
}

func (s *DeleteTrafficControlResponse) SetStatusCode(v int32) *DeleteTrafficControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTrafficControlResponse) SetBody(v *DeleteTrafficControlResponseBody) *DeleteTrafficControlResponse {
	s.Body = v
	return s
}

type DeleteTrafficSpecialControlRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// *   This API is intended for API providers.
	// *   You can obtain the input parameters required in this operation by calling other APIs.
	SpecialKey *string `json:"SpecialKey,omitempty" xml:"SpecialKey,omitempty"`
	// The ID of the request.
	SpecialType *string `json:"SpecialType,omitempty" xml:"SpecialType,omitempty"`
	// The ID of the app or Alibaba Cloud account. You can view your account ID on the [Account Management](https://account.console.aliyun.com/?spm=a2c4g.11186623.2.15.343130a8sDi8cO#/secure) page.
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
}

func (s DeleteTrafficSpecialControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTrafficSpecialControlRequest) GoString() string {
	return s.String()
}

func (s *DeleteTrafficSpecialControlRequest) SetSecurityToken(v string) *DeleteTrafficSpecialControlRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeleteTrafficSpecialControlRequest) SetSpecialKey(v string) *DeleteTrafficSpecialControlRequest {
	s.SpecialKey = &v
	return s
}

func (s *DeleteTrafficSpecialControlRequest) SetSpecialType(v string) *DeleteTrafficSpecialControlRequest {
	s.SpecialType = &v
	return s
}

func (s *DeleteTrafficSpecialControlRequest) SetTrafficControlId(v string) *DeleteTrafficSpecialControlRequest {
	s.TrafficControlId = &v
	return s
}

type DeleteTrafficSpecialControlResponseBody struct {
	// Deletes a custom special throttling policy.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteTrafficSpecialControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTrafficSpecialControlResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTrafficSpecialControlResponseBody) SetRequestId(v string) *DeleteTrafficSpecialControlResponseBody {
	s.RequestId = &v
	return s
}

type DeleteTrafficSpecialControlResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteTrafficSpecialControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteTrafficSpecialControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTrafficSpecialControlResponse) GoString() string {
	return s.String()
}

func (s *DeleteTrafficSpecialControlResponse) SetHeaders(v map[string]*string) *DeleteTrafficSpecialControlResponse {
	s.Headers = v
	return s
}

func (s *DeleteTrafficSpecialControlResponse) SetStatusCode(v int32) *DeleteTrafficSpecialControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTrafficSpecialControlResponse) SetBody(v *DeleteTrafficSpecialControlResponseBody) *DeleteTrafficSpecialControlResponse {
	s.Body = v
	return s
}

type DeployApiRequest struct {
	// The publishing remarks.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// *   This operation is intended for API providers. Only the API that you have defined and published to a runtime environment can be called.
	// *   An API is published to a cluster in less than 5 seconds.
	// *   The QPS limit on this operation is 50 per user.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **PRE: the pre-release environment**
	// *   **TEST: the test environment**
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the request.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DeployApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployApiRequest) GoString() string {
	return s.String()
}

func (s *DeployApiRequest) SetApiId(v string) *DeployApiRequest {
	s.ApiId = &v
	return s
}

func (s *DeployApiRequest) SetDescription(v string) *DeployApiRequest {
	s.Description = &v
	return s
}

func (s *DeployApiRequest) SetGroupId(v string) *DeployApiRequest {
	s.GroupId = &v
	return s
}

func (s *DeployApiRequest) SetSecurityToken(v string) *DeployApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *DeployApiRequest) SetStageName(v string) *DeployApiRequest {
	s.StageName = &v
	return s
}

type DeployApiResponseBody struct {
	// Publishes an API to a specified environment.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeployApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeployApiResponseBody) GoString() string {
	return s.String()
}

func (s *DeployApiResponseBody) SetRequestId(v string) *DeployApiResponseBody {
	s.RequestId = &v
	return s
}

type DeployApiResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeployApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeployApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployApiResponse) GoString() string {
	return s.String()
}

func (s *DeployApiResponse) SetHeaders(v map[string]*string) *DeployApiResponse {
	s.Headers = v
	return s
}

func (s *DeployApiResponse) SetStatusCode(v int32) *DeployApiResponse {
	s.StatusCode = &v
	return s
}

func (s *DeployApiResponse) SetBody(v *DeployApiResponseBody) *DeployApiResponse {
	s.Body = v
	return s
}

type DescribeAbolishApiTaskRequest struct {
	OperationUid  *string `json:"OperationUid,omitempty" xml:"OperationUid,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeAbolishApiTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAbolishApiTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeAbolishApiTaskRequest) SetOperationUid(v string) *DescribeAbolishApiTaskRequest {
	s.OperationUid = &v
	return s
}

func (s *DescribeAbolishApiTaskRequest) SetSecurityToken(v string) *DescribeAbolishApiTaskRequest {
	s.SecurityToken = &v
	return s
}

type DescribeAbolishApiTaskResponseBody struct {
	ApiAbolishResults *DescribeAbolishApiTaskResponseBodyApiAbolishResults `json:"ApiAbolishResults,omitempty" xml:"ApiAbolishResults,omitempty" type:"Struct"`
	RequestId         *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAbolishApiTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAbolishApiTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAbolishApiTaskResponseBody) SetApiAbolishResults(v *DescribeAbolishApiTaskResponseBodyApiAbolishResults) *DescribeAbolishApiTaskResponseBody {
	s.ApiAbolishResults = v
	return s
}

func (s *DescribeAbolishApiTaskResponseBody) SetRequestId(v string) *DescribeAbolishApiTaskResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAbolishApiTaskResponseBodyApiAbolishResults struct {
	ApiAbolishResult []*DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult `json:"ApiAbolishResult,omitempty" xml:"ApiAbolishResult,omitempty" type:"Repeated"`
}

func (s DescribeAbolishApiTaskResponseBodyApiAbolishResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeAbolishApiTaskResponseBodyApiAbolishResults) GoString() string {
	return s.String()
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResults) SetApiAbolishResult(v []*DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) *DescribeAbolishApiTaskResponseBodyApiAbolishResults {
	s.ApiAbolishResult = v
	return s
}

type DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult struct {
	AbolishStatus *string `json:"AbolishStatus,omitempty" xml:"AbolishStatus,omitempty"`
	ApiName       *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiUid        *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	ErrorMsg      *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName     *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	StageId       *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	StageName     *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) GoString() string {
	return s.String()
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) SetAbolishStatus(v string) *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult {
	s.AbolishStatus = &v
	return s
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) SetApiName(v string) *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult {
	s.ApiName = &v
	return s
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) SetApiUid(v string) *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult {
	s.ApiUid = &v
	return s
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) SetErrorMsg(v string) *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) SetGroupId(v string) *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult {
	s.GroupId = &v
	return s
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) SetGroupName(v string) *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult {
	s.GroupName = &v
	return s
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) SetStageId(v string) *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult {
	s.StageId = &v
	return s
}

func (s *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult) SetStageName(v string) *DescribeAbolishApiTaskResponseBodyApiAbolishResultsApiAbolishResult {
	s.StageName = &v
	return s
}

type DescribeAbolishApiTaskResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAbolishApiTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAbolishApiTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAbolishApiTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeAbolishApiTaskResponse) SetHeaders(v map[string]*string) *DescribeAbolishApiTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeAbolishApiTaskResponse) SetStatusCode(v int32) *DescribeAbolishApiTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAbolishApiTaskResponse) SetBody(v *DescribeAbolishApiTaskResponseBody) *DescribeAbolishApiTaskResponse {
	s.Body = v
	return s
}

type DescribeAccessControlListAttributeRequest struct {
	AclId         *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeAccessControlListAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListAttributeRequest) SetAclId(v string) *DescribeAccessControlListAttributeRequest {
	s.AclId = &v
	return s
}

func (s *DescribeAccessControlListAttributeRequest) SetSecurityToken(v string) *DescribeAccessControlListAttributeRequest {
	s.SecurityToken = &v
	return s
}

type DescribeAccessControlListAttributeResponseBody struct {
	AclEntrys *DescribeAccessControlListAttributeResponseBodyAclEntrys `json:"AclEntrys,omitempty" xml:"AclEntrys,omitempty" type:"Struct"`
	AclId     *string                                                  `json:"AclId,omitempty" xml:"AclId,omitempty"`
	AclName   *string                                                  `json:"AclName,omitempty" xml:"AclName,omitempty"`
	IsUsed    *string                                                  `json:"IsUsed,omitempty" xml:"IsUsed,omitempty"`
	RequestId *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAccessControlListAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListAttributeResponseBody) SetAclEntrys(v *DescribeAccessControlListAttributeResponseBodyAclEntrys) *DescribeAccessControlListAttributeResponseBody {
	s.AclEntrys = v
	return s
}

func (s *DescribeAccessControlListAttributeResponseBody) SetAclId(v string) *DescribeAccessControlListAttributeResponseBody {
	s.AclId = &v
	return s
}

func (s *DescribeAccessControlListAttributeResponseBody) SetAclName(v string) *DescribeAccessControlListAttributeResponseBody {
	s.AclName = &v
	return s
}

func (s *DescribeAccessControlListAttributeResponseBody) SetIsUsed(v string) *DescribeAccessControlListAttributeResponseBody {
	s.IsUsed = &v
	return s
}

func (s *DescribeAccessControlListAttributeResponseBody) SetRequestId(v string) *DescribeAccessControlListAttributeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAccessControlListAttributeResponseBodyAclEntrys struct {
	AclEntry []*DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry `json:"AclEntry,omitempty" xml:"AclEntry,omitempty" type:"Repeated"`
}

func (s DescribeAccessControlListAttributeResponseBodyAclEntrys) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListAttributeResponseBodyAclEntrys) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListAttributeResponseBodyAclEntrys) SetAclEntry(v []*DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry) *DescribeAccessControlListAttributeResponseBodyAclEntrys {
	s.AclEntry = v
	return s
}

type DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry struct {
	AclEntryComment *string `json:"AclEntryComment,omitempty" xml:"AclEntryComment,omitempty"`
	AclEntryIp      *string `json:"AclEntryIp,omitempty" xml:"AclEntryIp,omitempty"`
}

func (s DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry) SetAclEntryComment(v string) *DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry {
	s.AclEntryComment = &v
	return s
}

func (s *DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry) SetAclEntryIp(v string) *DescribeAccessControlListAttributeResponseBodyAclEntrysAclEntry {
	s.AclEntryIp = &v
	return s
}

type DescribeAccessControlListAttributeResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAccessControlListAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAccessControlListAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListAttributeResponse) SetHeaders(v map[string]*string) *DescribeAccessControlListAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeAccessControlListAttributeResponse) SetStatusCode(v int32) *DescribeAccessControlListAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAccessControlListAttributeResponse) SetBody(v *DescribeAccessControlListAttributeResponseBody) *DescribeAccessControlListAttributeResponse {
	s.Body = v
	return s
}

type DescribeAccessControlListsRequest struct {
	AclName          *string `json:"AclName,omitempty" xml:"AclName,omitempty"`
	AddressIPVersion *string `json:"AddressIPVersion,omitempty" xml:"AddressIPVersion,omitempty"`
	PageNumber       *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken    *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeAccessControlListsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListsRequest) SetAclName(v string) *DescribeAccessControlListsRequest {
	s.AclName = &v
	return s
}

func (s *DescribeAccessControlListsRequest) SetAddressIPVersion(v string) *DescribeAccessControlListsRequest {
	s.AddressIPVersion = &v
	return s
}

func (s *DescribeAccessControlListsRequest) SetPageNumber(v int32) *DescribeAccessControlListsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAccessControlListsRequest) SetPageSize(v int32) *DescribeAccessControlListsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAccessControlListsRequest) SetSecurityToken(v string) *DescribeAccessControlListsRequest {
	s.SecurityToken = &v
	return s
}

type DescribeAccessControlListsResponseBody struct {
	Acls       *DescribeAccessControlListsResponseBodyAcls `json:"Acls,omitempty" xml:"Acls,omitempty" type:"Struct"`
	PageNumber *int32                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAccessControlListsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListsResponseBody) SetAcls(v *DescribeAccessControlListsResponseBodyAcls) *DescribeAccessControlListsResponseBody {
	s.Acls = v
	return s
}

func (s *DescribeAccessControlListsResponseBody) SetPageNumber(v int32) *DescribeAccessControlListsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAccessControlListsResponseBody) SetPageSize(v int32) *DescribeAccessControlListsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAccessControlListsResponseBody) SetRequestId(v string) *DescribeAccessControlListsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAccessControlListsResponseBody) SetTotalCount(v int32) *DescribeAccessControlListsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeAccessControlListsResponseBodyAcls struct {
	Acl []*DescribeAccessControlListsResponseBodyAclsAcl `json:"Acl,omitempty" xml:"Acl,omitempty" type:"Repeated"`
}

func (s DescribeAccessControlListsResponseBodyAcls) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListsResponseBodyAcls) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListsResponseBodyAcls) SetAcl(v []*DescribeAccessControlListsResponseBodyAclsAcl) *DescribeAccessControlListsResponseBodyAcls {
	s.Acl = v
	return s
}

type DescribeAccessControlListsResponseBodyAclsAcl struct {
	AclId            *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	AclName          *string `json:"AclName,omitempty" xml:"AclName,omitempty"`
	AddressIPVersion *string `json:"AddressIPVersion,omitempty" xml:"AddressIPVersion,omitempty"`
}

func (s DescribeAccessControlListsResponseBodyAclsAcl) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListsResponseBodyAclsAcl) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListsResponseBodyAclsAcl) SetAclId(v string) *DescribeAccessControlListsResponseBodyAclsAcl {
	s.AclId = &v
	return s
}

func (s *DescribeAccessControlListsResponseBodyAclsAcl) SetAclName(v string) *DescribeAccessControlListsResponseBodyAclsAcl {
	s.AclName = &v
	return s
}

func (s *DescribeAccessControlListsResponseBodyAclsAcl) SetAddressIPVersion(v string) *DescribeAccessControlListsResponseBodyAclsAcl {
	s.AddressIPVersion = &v
	return s
}

type DescribeAccessControlListsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAccessControlListsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAccessControlListsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccessControlListsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccessControlListsResponse) SetHeaders(v map[string]*string) *DescribeAccessControlListsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAccessControlListsResponse) SetStatusCode(v int32) *DescribeAccessControlListsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAccessControlListsResponse) SetBody(v *DescribeAccessControlListsResponseBody) *DescribeAccessControlListsResponse {
	s.Body = v
	return s
}

type DescribeApiRequest struct {
	// Description
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// System parameters sent by API Gateway to the backend service
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiRequest) SetApiId(v string) *DescribeApiRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiRequest) SetGroupId(v string) *DescribeApiRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiRequest) SetSecurityToken(v string) *DescribeApiRequest {
	s.SecurityToken = &v
	return s
}

type DescribeApiResponseBody struct {
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	AllowSignatureMethod *string `json:"AllowSignatureMethod,omitempty" xml:"AllowSignatureMethod,omitempty"`
	// Description
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The minimum parameter value when **ParameterType** is set to Int, Long, Float, or Double.
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The request mode. Valid values: MAPPING and PASSTHROUGH.
	AppCodeAuthType *string `json:"AppCodeAuthType,omitempty" xml:"AppCodeAuthType,omitempty"`
	// The sample error codes returned by the backend service.
	AuthType *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	// The timeout period of the backend service. Unit: milliseconds.
	BackendConfig *DescribeApiResponseBodyBackendConfig `json:"BackendConfig,omitempty" xml:"BackendConfig,omitempty" type:"Struct"`
	// The corresponding frontend parameter name. It must be included in RequestParametersObject and matches ApiParameterName in RequestParameter data.
	BackendEnable *bool `json:"BackendEnable,omitempty" xml:"BackendEnable,omitempty"`
	// The name of the backend service parameter.
	ConstantParameters *DescribeApiResponseBodyConstantParameters `json:"ConstantParameters,omitempty" xml:"ConstantParameters,omitempty" type:"Struct"`
	// The type of the Function Compute instance.
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The name of the HTTP header.
	CustomSystemParameters *DescribeApiResponseBodyCustomSystemParameters `json:"CustomSystemParameters,omitempty" xml:"CustomSystemParameters,omitempty" type:"Struct"`
	// DescribeApi
	DeployedInfos *DescribeApiResponseBodyDeployedInfos `json:"DeployedInfos,omitempty" xml:"DeployedInfos,omitempty" type:"Struct"`
	// Specifies whether to enable the VPC channel. Valid values:
	//
	// *   **TRUE**: The VPC channel is enabled. You must create the corresponding VPC access authorization before you can enable a VPC channel.
	// *   **FALSE**: The VPC channel is not enabled.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The API request path. If the complete API URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the API request path is ` /object/add  `.
	DisableInternet *bool `json:"DisableInternet,omitempty" xml:"DisableInternet,omitempty"`
	// The name of the VPC access authorization.
	ErrorCodeSamples *DescribeApiResponseBodyErrorCodeSamples `json:"ErrorCodeSamples,omitempty" xml:"ErrorCodeSamples,omitempty" type:"Struct"`
	// The maximum parameter value when **ParameterType** is set to Int, Long, Float, or Double.
	FailResultSample *string `json:"FailResultSample,omitempty" xml:"FailResultSample,omitempty"`
	// The ID of the result.
	ForceNonceCheck *bool `json:"ForceNonceCheck,omitempty" xml:"ForceNonceCheck,omitempty"`
	// The path used to call the back-end service. If the complete back-end service path is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, **ServicePath** is `/object/add`.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the parent node.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The ID of the API.
	Mock *string `json:"Mock,omitempty" xml:"Mock,omitempty"`
	// The ID of the API group.
	MockResult *string `json:"MockResult,omitempty" xml:"MockResult,omitempty"`
	// Backend configuration items when the backend service is Function Compute
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The description of the API.
	OpenIdConnectConfig *DescribeApiResponseBodyOpenIdConnectConfig `json:"OpenIdConnectConfig,omitempty" xml:"OpenIdConnectConfig,omitempty" type:"Struct"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Age
	RequestConfig *DescribeApiResponseBodyRequestConfig `json:"RequestConfig,omitempty" xml:"RequestConfig,omitempty" type:"Struct"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	RequestParameters *DescribeApiResponseBodyRequestParameters `json:"RequestParameters,omitempty" xml:"RequestParameters,omitempty" type:"Struct"`
	// The ID of the API group.
	ResultBodyModel *string `json:"ResultBodyModel,omitempty" xml:"ResultBodyModel,omitempty"`
	// The last modification time of the API.
	ResultDescriptions *DescribeApiResponseBodyResultDescriptions `json:"ResultDescriptions,omitempty" xml:"ResultDescriptions,omitempty" type:"Struct"`
	// The ID of the ECS or SLB instance in the VPC.
	ResultSample *string `json:"ResultSample,omitempty" xml:"ResultSample,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	ResultType *string `json:"ResultType,omitempty" xml:"ResultType,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the RAM role to be assumed by API Gateway to access Function Compute.
	ServiceConfig *DescribeApiResponseBodyServiceConfig `json:"ServiceConfig,omitempty" xml:"ServiceConfig,omitempty" type:"Struct"`
	// The Arn that is authorized by a RAM user to EventBridge.
	ServiceParameters *DescribeApiResponseBodyServiceParameters `json:"ServiceParameters,omitempty" xml:"ServiceParameters,omitempty" type:"Struct"`
	// Error codes
	ServiceParametersMap *DescribeApiResponseBodyServiceParametersMap `json:"ServiceParametersMap,omitempty" xml:"ServiceParametersMap,omitempty" type:"Struct"`
	// If **AuthType** is set to **APP**, the valid values are:
	//
	// *   **DEFAULT**: The default value that is used if no other values are passed. This value means that the setting of the group is used.
	// *   **DISABLE**: The authentication is disabled.
	// *   **HEADER**: AppCode can be placed in the Header parameter for authentication.
	// *   **HEADER_QUERY**: AppCode can be placed in the Header or Query parameter for authentication.
	SystemParameters *DescribeApiResponseBodySystemParameters `json:"SystemParameters,omitempty" xml:"SystemParameters,omitempty" type:"Struct"`
	// Specifies whether to limit API calls to within the VPC. Valid values:
	//
	// *   **true**: Only API calls from the VPC are supported.
	// *   **false**: API calls from the VPC and Internet are both supported.
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
	// The ID of the region where the OSS instance is located.
	WebSocketApiType *string `json:"WebSocketApiType,omitempty" xml:"WebSocketApiType,omitempty"`
}

func (s DescribeApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBody) SetAllowSignatureMethod(v string) *DescribeApiResponseBody {
	s.AllowSignatureMethod = &v
	return s
}

func (s *DescribeApiResponseBody) SetApiId(v string) *DescribeApiResponseBody {
	s.ApiId = &v
	return s
}

func (s *DescribeApiResponseBody) SetApiName(v string) *DescribeApiResponseBody {
	s.ApiName = &v
	return s
}

func (s *DescribeApiResponseBody) SetAppCodeAuthType(v string) *DescribeApiResponseBody {
	s.AppCodeAuthType = &v
	return s
}

func (s *DescribeApiResponseBody) SetAuthType(v string) *DescribeApiResponseBody {
	s.AuthType = &v
	return s
}

func (s *DescribeApiResponseBody) SetBackendConfig(v *DescribeApiResponseBodyBackendConfig) *DescribeApiResponseBody {
	s.BackendConfig = v
	return s
}

func (s *DescribeApiResponseBody) SetBackendEnable(v bool) *DescribeApiResponseBody {
	s.BackendEnable = &v
	return s
}

func (s *DescribeApiResponseBody) SetConstantParameters(v *DescribeApiResponseBodyConstantParameters) *DescribeApiResponseBody {
	s.ConstantParameters = v
	return s
}

func (s *DescribeApiResponseBody) SetCreatedTime(v string) *DescribeApiResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeApiResponseBody) SetCustomSystemParameters(v *DescribeApiResponseBodyCustomSystemParameters) *DescribeApiResponseBody {
	s.CustomSystemParameters = v
	return s
}

func (s *DescribeApiResponseBody) SetDeployedInfos(v *DescribeApiResponseBodyDeployedInfos) *DescribeApiResponseBody {
	s.DeployedInfos = v
	return s
}

func (s *DescribeApiResponseBody) SetDescription(v string) *DescribeApiResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeApiResponseBody) SetDisableInternet(v bool) *DescribeApiResponseBody {
	s.DisableInternet = &v
	return s
}

func (s *DescribeApiResponseBody) SetErrorCodeSamples(v *DescribeApiResponseBodyErrorCodeSamples) *DescribeApiResponseBody {
	s.ErrorCodeSamples = v
	return s
}

func (s *DescribeApiResponseBody) SetFailResultSample(v string) *DescribeApiResponseBody {
	s.FailResultSample = &v
	return s
}

func (s *DescribeApiResponseBody) SetForceNonceCheck(v bool) *DescribeApiResponseBody {
	s.ForceNonceCheck = &v
	return s
}

func (s *DescribeApiResponseBody) SetGroupId(v string) *DescribeApiResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeApiResponseBody) SetGroupName(v string) *DescribeApiResponseBody {
	s.GroupName = &v
	return s
}

func (s *DescribeApiResponseBody) SetMock(v string) *DescribeApiResponseBody {
	s.Mock = &v
	return s
}

func (s *DescribeApiResponseBody) SetMockResult(v string) *DescribeApiResponseBody {
	s.MockResult = &v
	return s
}

func (s *DescribeApiResponseBody) SetModifiedTime(v string) *DescribeApiResponseBody {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeApiResponseBody) SetOpenIdConnectConfig(v *DescribeApiResponseBodyOpenIdConnectConfig) *DescribeApiResponseBody {
	s.OpenIdConnectConfig = v
	return s
}

func (s *DescribeApiResponseBody) SetRegionId(v string) *DescribeApiResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeApiResponseBody) SetRequestConfig(v *DescribeApiResponseBodyRequestConfig) *DescribeApiResponseBody {
	s.RequestConfig = v
	return s
}

func (s *DescribeApiResponseBody) SetRequestId(v string) *DescribeApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiResponseBody) SetRequestParameters(v *DescribeApiResponseBodyRequestParameters) *DescribeApiResponseBody {
	s.RequestParameters = v
	return s
}

func (s *DescribeApiResponseBody) SetResultBodyModel(v string) *DescribeApiResponseBody {
	s.ResultBodyModel = &v
	return s
}

func (s *DescribeApiResponseBody) SetResultDescriptions(v *DescribeApiResponseBodyResultDescriptions) *DescribeApiResponseBody {
	s.ResultDescriptions = v
	return s
}

func (s *DescribeApiResponseBody) SetResultSample(v string) *DescribeApiResponseBody {
	s.ResultSample = &v
	return s
}

func (s *DescribeApiResponseBody) SetResultType(v string) *DescribeApiResponseBody {
	s.ResultType = &v
	return s
}

func (s *DescribeApiResponseBody) SetServiceConfig(v *DescribeApiResponseBodyServiceConfig) *DescribeApiResponseBody {
	s.ServiceConfig = v
	return s
}

func (s *DescribeApiResponseBody) SetServiceParameters(v *DescribeApiResponseBodyServiceParameters) *DescribeApiResponseBody {
	s.ServiceParameters = v
	return s
}

func (s *DescribeApiResponseBody) SetServiceParametersMap(v *DescribeApiResponseBodyServiceParametersMap) *DescribeApiResponseBody {
	s.ServiceParametersMap = v
	return s
}

func (s *DescribeApiResponseBody) SetSystemParameters(v *DescribeApiResponseBodySystemParameters) *DescribeApiResponseBody {
	s.SystemParameters = v
	return s
}

func (s *DescribeApiResponseBody) SetVisibility(v string) *DescribeApiResponseBody {
	s.Visibility = &v
	return s
}

func (s *DescribeApiResponseBody) SetWebSocketApiType(v string) *DescribeApiResponseBody {
	s.WebSocketApiType = &v
	return s
}

type DescribeApiResponseBodyBackendConfig struct {
	// The function name defined in Function Compute.
	BackendId *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	// The protocol type supported by the API. Valid values: HTTP and HTTPS. Separate multiple values with commas (,), such as "HTTP,HTTPS".
	BackendName *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	// The deployment status. Valid values: DEPLOYED and NONDEPLOYED.
	BackendType *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
}

func (s DescribeApiResponseBodyBackendConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyBackendConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyBackendConfig) SetBackendId(v string) *DescribeApiResponseBodyBackendConfig {
	s.BackendId = &v
	return s
}

func (s *DescribeApiResponseBodyBackendConfig) SetBackendName(v string) *DescribeApiResponseBodyBackendConfig {
	s.BackendName = &v
	return s
}

func (s *DescribeApiResponseBodyBackendConfig) SetBackendType(v string) *DescribeApiResponseBodyBackendConfig {
	s.BackendType = &v
	return s
}

type DescribeApiResponseBodyConstantParameters struct {
	ConstantParameter []*DescribeApiResponseBodyConstantParametersConstantParameter `json:"ConstantParameter,omitempty" xml:"ConstantParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyConstantParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyConstantParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyConstantParameters) SetConstantParameter(v []*DescribeApiResponseBodyConstantParametersConstantParameter) *DescribeApiResponseBodyConstantParameters {
	s.ConstantParameter = v
	return s
}

type DescribeApiResponseBodyConstantParametersConstantParameter struct {
	// The data type of the back-end service parameter.
	ConstantValue *string `json:"ConstantValue,omitempty" xml:"ConstantValue,omitempty"`
	// The API request path.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The value of the ContentType header when the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the parameter that corresponds to the token.
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiResponseBodyConstantParametersConstantParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyConstantParametersConstantParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyConstantParametersConstantParameter) SetConstantValue(v string) *DescribeApiResponseBodyConstantParametersConstantParameter {
	s.ConstantValue = &v
	return s
}

func (s *DescribeApiResponseBodyConstantParametersConstantParameter) SetDescription(v string) *DescribeApiResponseBodyConstantParametersConstantParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiResponseBodyConstantParametersConstantParameter) SetLocation(v string) *DescribeApiResponseBodyConstantParametersConstantParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiResponseBodyConstantParametersConstantParameter) SetServiceParameterName(v string) *DescribeApiResponseBodyConstantParametersConstantParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiResponseBodyCustomSystemParameters struct {
	CustomSystemParameter []*DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter `json:"CustomSystemParameter,omitempty" xml:"CustomSystemParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyCustomSystemParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyCustomSystemParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyCustomSystemParameters) SetCustomSystemParameter(v []*DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter) *DescribeApiResponseBodyCustomSystemParameters {
	s.CustomSystemParameter = v
	return s
}

type DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter struct {
	// The ID of the region where the EventBridge instance is located.
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The effective version.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the request.
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The default value.
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// Client IP Address
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter) SetDemoValue(v string) *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter) SetDescription(v string) *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter) SetLocation(v string) *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter) SetParameterName(v string) *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.ParameterName = &v
	return s
}

func (s *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter) SetServiceParameterName(v string) *DescribeApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiResponseBodyDeployedInfos struct {
	DeployedInfo []*DescribeApiResponseBodyDeployedInfosDeployedInfo `json:"DeployedInfo,omitempty" xml:"DeployedInfo,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyDeployedInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyDeployedInfos) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyDeployedInfos) SetDeployedInfo(v []*DescribeApiResponseBodyDeployedInfosDeployedInfo) *DescribeApiResponseBodyDeployedInfos {
	s.DeployedInfo = v
	return s
}

type DescribeApiResponseBodyDeployedInfosDeployedInfo struct {
	DeployedStatus   *string `json:"DeployedStatus,omitempty" xml:"DeployedStatus,omitempty"`
	EffectiveVersion *string `json:"EffectiveVersion,omitempty" xml:"EffectiveVersion,omitempty"`
	// 382271
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiResponseBodyDeployedInfosDeployedInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyDeployedInfosDeployedInfo) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyDeployedInfosDeployedInfo) SetDeployedStatus(v string) *DescribeApiResponseBodyDeployedInfosDeployedInfo {
	s.DeployedStatus = &v
	return s
}

func (s *DescribeApiResponseBodyDeployedInfosDeployedInfo) SetEffectiveVersion(v string) *DescribeApiResponseBodyDeployedInfosDeployedInfo {
	s.EffectiveVersion = &v
	return s
}

func (s *DescribeApiResponseBodyDeployedInfosDeployedInfo) SetStageName(v string) *DescribeApiResponseBodyDeployedInfosDeployedInfo {
	s.StageName = &v
	return s
}

type DescribeApiResponseBodyErrorCodeSamples struct {
	ErrorCodeSample []*DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample `json:"ErrorCodeSample,omitempty" xml:"ErrorCodeSample,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyErrorCodeSamples) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyErrorCodeSamples) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyErrorCodeSamples) SetErrorCodeSample(v []*DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample) *DescribeApiResponseBodyErrorCodeSamples {
	s.ErrorCodeSample = v
	return s
}

type DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample struct {
	// The protocol used by the backend service. Valid values: HTTP and HTTPS.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The description of the request body.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Configuration items related to VPC channels
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The status code returned for service mocking.
	Model *string `json:"Model,omitempty" xml:"Model,omitempty"`
}

func (s DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample) SetCode(v string) *DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Code = &v
	return s
}

func (s *DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample) SetDescription(v string) *DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Description = &v
	return s
}

func (s *DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample) SetMessage(v string) *DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Message = &v
	return s
}

func (s *DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample) SetModel(v string) *DescribeApiResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Model = &v
	return s
}

type DescribeApiResponseBodyOpenIdConnectConfig struct {
	// The type of the two-way communication API. Valid values:
	//
	// *   **COMMON**: general APIs
	// *   **REGISTER**: registered APIs
	// *   **UNREGISTER**: unregistered APIs
	// *   **NOTIFY**: downstream notification
	//
	// For more information, see [Two-way communication](~~66031~~).
	IdTokenParamName *string `json:"IdTokenParamName,omitempty" xml:"IdTokenParamName,omitempty"`
	// Backend configurations
	OpenIdApiType *string `json:"OpenIdApiType,omitempty" xml:"OpenIdApiType,omitempty"`
	// The HTTP method used to call a backend service. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.
	PublicKey *string `json:"PublicKey,omitempty" xml:"PublicKey,omitempty"`
	// The port number that corresponds to the instance.
	PublicKeyId *string `json:"PublicKeyId,omitempty" xml:"PublicKeyId,omitempty"`
}

func (s DescribeApiResponseBodyOpenIdConnectConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyOpenIdConnectConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyOpenIdConnectConfig) SetIdTokenParamName(v string) *DescribeApiResponseBodyOpenIdConnectConfig {
	s.IdTokenParamName = &v
	return s
}

func (s *DescribeApiResponseBodyOpenIdConnectConfig) SetOpenIdApiType(v string) *DescribeApiResponseBodyOpenIdConnectConfig {
	s.OpenIdApiType = &v
	return s
}

func (s *DescribeApiResponseBodyOpenIdConnectConfig) SetPublicKey(v string) *DescribeApiResponseBodyOpenIdConnectConfig {
	s.PublicKey = &v
	return s
}

func (s *DescribeApiResponseBodyOpenIdConnectConfig) SetPublicKeyId(v string) *DescribeApiResponseBodyOpenIdConnectConfig {
	s.PublicKeyId = &v
	return s
}

type DescribeApiResponseBodyRequestConfig struct {
	// The JSON Schema used for JSON validation when **ParameterType** is set to String.
	BodyFormat *string `json:"BodyFormat,omitempty" xml:"BodyFormat,omitempty"`
	// The minimum parameter length when **ParameterType** is set to String.
	BodyModel *string `json:"BodyModel,omitempty" xml:"BodyModel,omitempty"`
	// The format of the response from the backend service. Valid values: JSON, TEXT, BINARY, XML, and HTML.
	PostBodyDescription *string `json:"PostBodyDescription,omitempty" xml:"PostBodyDescription,omitempty"`
	// The type of a request parameter. Valid values: String, Int, Long, Float, Double, and Boolean.
	RequestHttpMethod *string `json:"RequestHttpMethod,omitempty" xml:"RequestHttpMethod,omitempty"`
	// The name of the API group.
	RequestMode *string `json:"RequestMode,omitempty" xml:"RequestMode,omitempty"`
	// The name of the system parameter. Valid values: CaClientIp, CaDomain, CaRequestHandleTime, CaAppId, CaRequestId, CaHttpSchema, and CaProxy.
	RequestPath *string `json:"RequestPath,omitempty" xml:"RequestPath,omitempty"`
	// Examples
	RequestProtocol *string `json:"RequestProtocol,omitempty" xml:"RequestProtocol,omitempty"`
}

func (s DescribeApiResponseBodyRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyRequestConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyRequestConfig) SetBodyFormat(v string) *DescribeApiResponseBodyRequestConfig {
	s.BodyFormat = &v
	return s
}

func (s *DescribeApiResponseBodyRequestConfig) SetBodyModel(v string) *DescribeApiResponseBodyRequestConfig {
	s.BodyModel = &v
	return s
}

func (s *DescribeApiResponseBodyRequestConfig) SetPostBodyDescription(v string) *DescribeApiResponseBodyRequestConfig {
	s.PostBodyDescription = &v
	return s
}

func (s *DescribeApiResponseBodyRequestConfig) SetRequestHttpMethod(v string) *DescribeApiResponseBodyRequestConfig {
	s.RequestHttpMethod = &v
	return s
}

func (s *DescribeApiResponseBodyRequestConfig) SetRequestMode(v string) *DescribeApiResponseBodyRequestConfig {
	s.RequestMode = &v
	return s
}

func (s *DescribeApiResponseBodyRequestConfig) SetRequestPath(v string) *DescribeApiResponseBodyRequestConfig {
	s.RequestPath = &v
	return s
}

func (s *DescribeApiResponseBodyRequestConfig) SetRequestProtocol(v string) *DescribeApiResponseBodyRequestConfig {
	s.RequestProtocol = &v
	return s
}

type DescribeApiResponseBodyRequestParameters struct {
	RequestParameter []*DescribeApiResponseBodyRequestParametersRequestParameter `json:"RequestParameter,omitempty" xml:"RequestParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyRequestParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyRequestParameters) SetRequestParameter(v []*DescribeApiResponseBodyRequestParametersRequestParameter) *DescribeApiResponseBodyRequestParameters {
	s.RequestParameter = v
	return s
}

type DescribeApiResponseBodyRequestParametersRequestParameter struct {
	// Indicates whether a subnode exists.
	ApiParameterName *string `json:"ApiParameterName,omitempty" xml:"ApiParameterName,omitempty"`
	// The security authentication method of the API. Valid values:
	//
	// *   **APP**: Only authorized applications can call the API.
	//
	// *   **ANONYMOUS**: The API can be anonymously called. In this mode, you must take note of the following rules:
	//
	//     *   All users who have obtained the API service information can call this API. API Gateway does not authenticate callers and cannot set user-specific throttling policies. If you make this API public, set API-specific throttling policies.
	//     *   We recommend that you do not make the API whose security authentication method is ANONYMOUS available in Alibaba Cloud Marketplace because API Gateway cannot meter calls on the caller or limit the number of calls on the API. If you want to make the API group to which the API belongs available in Alibaba Cloud Marketplace, we recommend that you move the API to another group, set its type to PRIVATE, or set its security authentication method to APP.
	//
	// *   **APPOPENID**: The OpenID Connect account authentication method is used. Only applications authorized by OpenID Connect can call the API. If this method is selected, the OpenIdConnectConfig parameter is required.
	ArrayItemsType *string `json:"ArrayItemsType,omitempty" xml:"ArrayItemsType,omitempty"`
	// The configuration items of API requests sent by API Gateway to the backend service.
	DefaultValue *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	// The OpenID Connect mode. Valid values:
	//
	// *   **IDTOKEN**: indicates the APIs that are called by clients to obtain tokens. If you specify this value, the PublicKeyId parameter and the PublicKey parameter are required.
	// *   **BUSINESS**: indicates business APIs. Tokens are used to call the business APIs. If you specify this value, the IdTokenParamName parameter is required.
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The returned description of the API.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The event bus.
	DocOrder *int32 `json:"DocOrder,omitempty" xml:"DocOrder,omitempty"`
	// The sample response from the backend service.
	DocShow *string `json:"DocShow,omitempty" xml:"DocShow,omitempty"`
	// The name of the parameter.
	EnumValue *string `json:"EnumValue,omitempty" xml:"EnumValue,omitempty"`
	// The regular expression used for parameter validation when **ParameterType** is set to String.
	JsonScheme *string `json:"JsonScheme,omitempty" xml:"JsonScheme,omitempty"`
	// The ID of the VPC.
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// Backend service type
	MaxLength *int64 `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	// Specifies whether to enable backend services.
	MaxValue *int64 `json:"MaxValue,omitempty" xml:"MaxValue,omitempty"`
	// The name of the backend service parameter.
	MinLength *int64 `json:"MinLength,omitempty" xml:"MinLength,omitempty"`
	// The name of the system parameter. Valid values: CaClientIp, CaDomain, CaRequestHandleTime, CaAppId, CaRequestId, CaHttpSchema, and CaProxy.
	MinValue *int64 `json:"MinValue,omitempty" xml:"MinValue,omitempty"`
	// The region where the Function Compute instance is located.
	ParameterType *string `json:"ParameterType,omitempty" xml:"ParameterType,omitempty"`
	// Configuration items of EventBridge
	RegularExpression *string `json:"RegularExpression,omitempty" xml:"RegularExpression,omitempty"`
	// The UserId parameter is missing from the request.
	Required *string `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s DescribeApiResponseBodyRequestParametersRequestParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyRequestParametersRequestParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetApiParameterName(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.ApiParameterName = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetArrayItemsType(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.ArrayItemsType = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetDefaultValue(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.DefaultValue = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetDemoValue(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetDescription(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetDocOrder(v int32) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.DocOrder = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetDocShow(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.DocShow = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetEnumValue(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.EnumValue = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetJsonScheme(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.JsonScheme = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetLocation(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetMaxLength(v int64) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.MaxLength = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetMaxValue(v int64) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.MaxValue = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetMinLength(v int64) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.MinLength = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetMinValue(v int64) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.MinValue = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetParameterType(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.ParameterType = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetRegularExpression(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.RegularExpression = &v
	return s
}

func (s *DescribeApiResponseBodyRequestParametersRequestParameter) SetRequired(v string) *DescribeApiResponseBodyRequestParametersRequestParameter {
	s.Required = &v
	return s
}

type DescribeApiResponseBodyResultDescriptions struct {
	ResultDescription []*DescribeApiResponseBodyResultDescriptionsResultDescription `json:"ResultDescription,omitempty" xml:"ResultDescription,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyResultDescriptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyResultDescriptions) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyResultDescriptions) SetResultDescription(v []*DescribeApiResponseBodyResultDescriptionsResultDescription) *DescribeApiResponseBodyResultDescriptions {
	s.ResultDescription = v
	return s
}

type DescribeApiResponseBodyResultDescriptionsResultDescription struct {
	// The ContentType header type used when you call the backend service over HTTP.
	//
	// *   **DEFAULT**: the default header type in API Gateway
	// *   **CUSTOM**: a custom header type
	// *   **CLIENT**: the ContentType header type of the client
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Client IP Address
	HasChild *bool `json:"HasChild,omitempty" xml:"HasChild,omitempty"`
	// The result returned when the Mock mode is enabled.
	Id  *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The creation time of the API.
	Mandatory *bool   `json:"Mandatory,omitempty" xml:"Mandatory,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The OSS bucket.
	Pid  *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeApiResponseBodyResultDescriptionsResultDescription) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyResultDescriptionsResultDescription) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyResultDescriptionsResultDescription) SetDescription(v string) *DescribeApiResponseBodyResultDescriptionsResultDescription {
	s.Description = &v
	return s
}

func (s *DescribeApiResponseBodyResultDescriptionsResultDescription) SetHasChild(v bool) *DescribeApiResponseBodyResultDescriptionsResultDescription {
	s.HasChild = &v
	return s
}

func (s *DescribeApiResponseBodyResultDescriptionsResultDescription) SetId(v string) *DescribeApiResponseBodyResultDescriptionsResultDescription {
	s.Id = &v
	return s
}

func (s *DescribeApiResponseBodyResultDescriptionsResultDescription) SetKey(v string) *DescribeApiResponseBodyResultDescriptionsResultDescription {
	s.Key = &v
	return s
}

func (s *DescribeApiResponseBodyResultDescriptionsResultDescription) SetMandatory(v bool) *DescribeApiResponseBodyResultDescriptionsResultDescription {
	s.Mandatory = &v
	return s
}

func (s *DescribeApiResponseBodyResultDescriptionsResultDescription) SetName(v string) *DescribeApiResponseBodyResultDescriptionsResultDescription {
	s.Name = &v
	return s
}

func (s *DescribeApiResponseBodyResultDescriptionsResultDescription) SetPid(v string) *DescribeApiResponseBodyResultDescriptionsResultDescription {
	s.Pid = &v
	return s
}

func (s *DescribeApiResponseBodyResultDescriptionsResultDescription) SetType(v string) *DescribeApiResponseBodyResultDescriptionsResultDescription {
	s.Type = &v
	return s
}

type DescribeApiResponseBodyServiceConfig struct {
	// auditing
	AoneAppName *string `json:"AoneAppName,omitempty" xml:"AoneAppName,omitempty"`
	// The HTTP method used to make the request. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.
	ContentTypeCatagory *string `json:"ContentTypeCatagory,omitempty" xml:"ContentTypeCatagory,omitempty"`
	// The API publishing status.
	ContentTypeValue *string `json:"ContentTypeValue,omitempty" xml:"ContentTypeValue,omitempty"`
	// Indicates whether the request parameter is required.
	EventBridgeConfig *DescribeApiResponseBodyServiceConfigEventBridgeConfig `json:"EventBridgeConfig,omitempty" xml:"EventBridgeConfig,omitempty" type:"Struct"`
	// Examples
	FunctionComputeConfig *DescribeApiResponseBodyServiceConfigFunctionComputeConfig `json:"FunctionComputeConfig,omitempty" xml:"FunctionComputeConfig,omitempty" type:"Struct"`
	// The returned description of the API.
	Mock *string `json:"Mock,omitempty" xml:"Mock,omitempty"`
	// The value of the ContentType header when the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.
	MockHeaders *DescribeApiResponseBodyServiceConfigMockHeaders `json:"MockHeaders,omitempty" xml:"MockHeaders,omitempty" type:"Struct"`
	// The service name defined in Function Compute.
	MockResult *string `json:"MockResult,omitempty" xml:"MockResult,omitempty"`
	// Indicates whether the parameter is required. Valid values: **REQUIRED** and **OPTIONAL**.
	MockStatusCode *int32 `json:"MockStatusCode,omitempty" xml:"MockStatusCode,omitempty"`
	// sex
	OssConfig *DescribeApiResponseBodyServiceConfigOssConfig `json:"OssConfig,omitempty" xml:"OssConfig,omitempty" type:"Struct"`
	// Specifies whether to enable the Mock mode. Valid values:
	//
	// *   OPEN: The Mock mode is enabled.
	// *   CLOSED: The Mock mode is not enabled.
	ServiceAddress *string `json:"ServiceAddress,omitempty" xml:"ServiceAddress,omitempty"`
	// Error message
	ServiceHttpMethod *string `json:"ServiceHttpMethod,omitempty" xml:"ServiceHttpMethod,omitempty"`
	// The mappings between parameters of requests sent by the consumer to API Gateway and parameters of requests sent by API Gateway to the backend service.
	ServicePath *string `json:"ServicePath,omitempty" xml:"ServicePath,omitempty"`
	// The sample error response from the backend service.
	ServiceProtocol *string `json:"ServiceProtocol,omitempty" xml:"ServiceProtocol,omitempty"`
	// Information when the backend service is OSS
	ServiceTimeout *int32 `json:"ServiceTimeout,omitempty" xml:"ServiceTimeout,omitempty"`
	// The configuration items of API requests sent by the consumer to API Gateway.
	ServiceVpcEnable *string `json:"ServiceVpcEnable,omitempty" xml:"ServiceVpcEnable,omitempty"`
	// The backend only receives the service path.
	VpcConfig *DescribeApiResponseBodyServiceConfigVpcConfig `json:"VpcConfig,omitempty" xml:"VpcConfig,omitempty" type:"Struct"`
}

func (s DescribeApiResponseBodyServiceConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceConfig) SetAoneAppName(v string) *DescribeApiResponseBodyServiceConfig {
	s.AoneAppName = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetContentTypeCatagory(v string) *DescribeApiResponseBodyServiceConfig {
	s.ContentTypeCatagory = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetContentTypeValue(v string) *DescribeApiResponseBodyServiceConfig {
	s.ContentTypeValue = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetEventBridgeConfig(v *DescribeApiResponseBodyServiceConfigEventBridgeConfig) *DescribeApiResponseBodyServiceConfig {
	s.EventBridgeConfig = v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetFunctionComputeConfig(v *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) *DescribeApiResponseBodyServiceConfig {
	s.FunctionComputeConfig = v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetMock(v string) *DescribeApiResponseBodyServiceConfig {
	s.Mock = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetMockHeaders(v *DescribeApiResponseBodyServiceConfigMockHeaders) *DescribeApiResponseBodyServiceConfig {
	s.MockHeaders = v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetMockResult(v string) *DescribeApiResponseBodyServiceConfig {
	s.MockResult = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetMockStatusCode(v int32) *DescribeApiResponseBodyServiceConfig {
	s.MockStatusCode = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetOssConfig(v *DescribeApiResponseBodyServiceConfigOssConfig) *DescribeApiResponseBodyServiceConfig {
	s.OssConfig = v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetServiceAddress(v string) *DescribeApiResponseBodyServiceConfig {
	s.ServiceAddress = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetServiceHttpMethod(v string) *DescribeApiResponseBodyServiceConfig {
	s.ServiceHttpMethod = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetServicePath(v string) *DescribeApiResponseBodyServiceConfig {
	s.ServicePath = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetServiceProtocol(v string) *DescribeApiResponseBodyServiceConfig {
	s.ServiceProtocol = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetServiceTimeout(v int32) *DescribeApiResponseBodyServiceConfig {
	s.ServiceTimeout = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetServiceVpcEnable(v string) *DescribeApiResponseBodyServiceConfig {
	s.ServiceVpcEnable = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfig) SetVpcConfig(v *DescribeApiResponseBodyServiceConfigVpcConfig) *DescribeApiResponseBodyServiceConfig {
	s.VpcConfig = v
	return s
}

type DescribeApiResponseBodyServiceConfigEventBridgeConfig struct {
	// The URL used to call the back-end service. If the complete back-end service URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the value of **ServiceAddress** is `http://api.a.com:8080`.
	EventBridgeRegionId *string `json:"EventBridgeRegionId,omitempty" xml:"EventBridgeRegionId,omitempty"`
	// The region ID of the API.
	EventBus *string `json:"EventBus,omitempty" xml:"EventBus,omitempty"`
	// The name of the corresponding backend parameter.
	EventSource *string `json:"EventSource,omitempty" xml:"EventSource,omitempty"`
	// The public key.
	RoleArn *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s DescribeApiResponseBodyServiceConfigEventBridgeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceConfigEventBridgeConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceConfigEventBridgeConfig) SetEventBridgeRegionId(v string) *DescribeApiResponseBodyServiceConfigEventBridgeConfig {
	s.EventBridgeRegionId = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigEventBridgeConfig) SetEventBus(v string) *DescribeApiResponseBodyServiceConfigEventBridgeConfig {
	s.EventBus = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigEventBridgeConfig) SetEventSource(v string) *DescribeApiResponseBodyServiceConfigEventBridgeConfig {
	s.EventSource = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigEventBridgeConfig) SetRoleArn(v string) *DescribeApiResponseBodyServiceConfigEventBridgeConfig {
	s.RoleArn = &v
	return s
}

type DescribeApiResponseBodyServiceConfigFunctionComputeConfig struct {
	// The name of the backend service.
	ContentTypeCatagory *string `json:"ContentTypeCatagory,omitempty" xml:"ContentTypeCatagory,omitempty"`
	// The value of the parameter.
	ContentTypeValue *string `json:"ContentTypeValue,omitempty" xml:"ContentTypeValue,omitempty"`
	// The result returned for service mocking.
	FcBaseUrl *string `json:"FcBaseUrl,omitempty" xml:"FcBaseUrl,omitempty"`
	// The parameters of API requests sent by API Gateway to the backend service.
	FcType *string `json:"FcType,omitempty" xml:"FcType,omitempty"`
	// Specifies whether to carry the header : X-Ca-Nonce when calling an API. This is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent reply attacks. Valid values:
	//
	// *   **true**: This field is forcibly checked when an API is requested to prevent replay attacks.
	// *   **false**: This field is not checked.
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	// Specifies whether to enable the Mock mode. Valid values:
	//
	// *   **TRUE**: The Mock mode is enabled.
	// *   **FALSE**: The Mock mode is not enabled.
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The type of the array element.
	OnlyBusinessPath *bool `json:"OnlyBusinessPath,omitempty" xml:"OnlyBusinessPath,omitempty"`
	// The application name in AONE.
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The maximum parameter length when **ParameterType** is set to String.
	Qualifier *string `json:"Qualifier,omitempty" xml:"Qualifier,omitempty"`
	// The parameters of API requests sent by the consumer to API Gateway.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The description.
	RoleArn *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	// The event source.
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeApiResponseBodyServiceConfigFunctionComputeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceConfigFunctionComputeConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetContentTypeCatagory(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.ContentTypeCatagory = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetContentTypeValue(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.ContentTypeValue = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetFcBaseUrl(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.FcBaseUrl = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetFcType(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.FcType = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetFunctionName(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.FunctionName = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetMethod(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.Method = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetOnlyBusinessPath(v bool) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.OnlyBusinessPath = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetPath(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.Path = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetQualifier(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.Qualifier = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetRegionId(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.RegionId = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetRoleArn(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.RoleArn = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigFunctionComputeConfig) SetServiceName(v string) *DescribeApiResponseBodyServiceConfigFunctionComputeConfig {
	s.ServiceName = &v
	return s
}

type DescribeApiResponseBodyServiceConfigMockHeaders struct {
	MockHeader []*DescribeApiResponseBodyServiceConfigMockHeadersMockHeader `json:"MockHeader,omitempty" xml:"MockHeader,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyServiceConfigMockHeaders) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceConfigMockHeaders) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceConfigMockHeaders) SetMockHeader(v []*DescribeApiResponseBodyServiceConfigMockHeadersMockHeader) *DescribeApiResponseBodyServiceConfigMockHeaders {
	s.MockHeader = v
	return s
}

type DescribeApiResponseBodyServiceConfigMockHeadersMockHeader struct {
	// The ContentType header type used when you call the backend service over HTTP.
	//
	// *   **DEFAULT**: the default header type in API Gateway
	// *   **CUSTOM**: a custom header type
	// *   **CLIENT**: the ContentType header type of the client
	HeaderName *string `json:"HeaderName,omitempty" xml:"HeaderName,omitempty"`
	// The order in the document.
	HeaderValue *string `json:"HeaderValue,omitempty" xml:"HeaderValue,omitempty"`
}

func (s DescribeApiResponseBodyServiceConfigMockHeadersMockHeader) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceConfigMockHeadersMockHeader) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceConfigMockHeadersMockHeader) SetHeaderName(v string) *DescribeApiResponseBodyServiceConfigMockHeadersMockHeader {
	s.HeaderName = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigMockHeadersMockHeader) SetHeaderValue(v string) *DescribeApiResponseBodyServiceConfigMockHeadersMockHeader {
	s.HeaderValue = &v
	return s
}

type DescribeApiResponseBodyServiceConfigOssConfig struct {
	Action *string `json:"Action,omitempty" xml:"Action,omitempty"`
	// Examples
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	Key        *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The ID of the backend service.
	OssRegionId *string `json:"OssRegionId,omitempty" xml:"OssRegionId,omitempty"`
}

func (s DescribeApiResponseBodyServiceConfigOssConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceConfigOssConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceConfigOssConfig) SetAction(v string) *DescribeApiResponseBodyServiceConfigOssConfig {
	s.Action = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigOssConfig) SetBucketName(v string) *DescribeApiResponseBodyServiceConfigOssConfig {
	s.BucketName = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigOssConfig) SetKey(v string) *DescribeApiResponseBodyServiceConfigOssConfig {
	s.Key = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigOssConfig) SetOssRegionId(v string) *DescribeApiResponseBodyServiceConfigOssConfig {
	s.OssRegionId = &v
	return s
}

type DescribeApiResponseBodyServiceConfigVpcConfig struct {
	// This parameter takes effect only when the RequestMode parameter is set to MAPPING.********
	//
	// The server data transmission method used for POST and PUT requests. Valid values: FORM and STREAM. FORM indicates that data in key-value pairs is transmitted as forms. STREAM indicates that data is transmitted as byte streams.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Model
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Configuration items of the third-party OpenID Connect authentication method
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The value of the HTTP header.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// System parameters sent by API Gateway to the backend service
	VpcScheme *string `json:"VpcScheme,omitempty" xml:"VpcScheme,omitempty"`
}

func (s DescribeApiResponseBodyServiceConfigVpcConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceConfigVpcConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceConfigVpcConfig) SetInstanceId(v string) *DescribeApiResponseBodyServiceConfigVpcConfig {
	s.InstanceId = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigVpcConfig) SetName(v string) *DescribeApiResponseBodyServiceConfigVpcConfig {
	s.Name = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigVpcConfig) SetPort(v int32) *DescribeApiResponseBodyServiceConfigVpcConfig {
	s.Port = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigVpcConfig) SetVpcId(v string) *DescribeApiResponseBodyServiceConfigVpcConfig {
	s.VpcId = &v
	return s
}

func (s *DescribeApiResponseBodyServiceConfigVpcConfig) SetVpcScheme(v string) *DescribeApiResponseBodyServiceConfigVpcConfig {
	s.VpcScheme = &v
	return s
}

type DescribeApiResponseBodyServiceParameters struct {
	ServiceParameter []*DescribeApiResponseBodyServiceParametersServiceParameter `json:"ServiceParameter,omitempty" xml:"ServiceParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyServiceParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceParameters) SetServiceParameter(v []*DescribeApiResponseBodyServiceParametersServiceParameter) *DescribeApiResponseBodyServiceParameters {
	s.ServiceParameter = v
	return s
}

type DescribeApiResponseBodyServiceParametersServiceParameter struct {
	// The name of the runtime environment. Valid values: RELEASE and TEST.
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The hash values that can be entered when **ParameterType** is set to Int, Long, Float, Double, or String. Separate different values with commas (,), such as 1,2,3,4,9 or A,B,C,E,F.
	ParameterType *string `json:"ParameterType,omitempty" xml:"ParameterType,omitempty"`
	// Description
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiResponseBodyServiceParametersServiceParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceParametersServiceParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceParametersServiceParameter) SetLocation(v string) *DescribeApiResponseBodyServiceParametersServiceParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiResponseBodyServiceParametersServiceParameter) SetParameterType(v string) *DescribeApiResponseBodyServiceParametersServiceParameter {
	s.ParameterType = &v
	return s
}

func (s *DescribeApiResponseBodyServiceParametersServiceParameter) SetServiceParameterName(v string) *DescribeApiResponseBodyServiceParametersServiceParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiResponseBodyServiceParametersMap struct {
	ServiceParameterMap []*DescribeApiResponseBodyServiceParametersMapServiceParameterMap `json:"ServiceParameterMap,omitempty" xml:"ServiceParameterMap,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodyServiceParametersMap) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceParametersMap) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceParametersMap) SetServiceParameterMap(v []*DescribeApiResponseBodyServiceParametersMapServiceParameterMap) *DescribeApiResponseBodyServiceParametersMap {
	s.ServiceParameterMap = v
	return s
}

type DescribeApiResponseBodyServiceParametersMapServiceParameterMap struct {
	// The name of the backend service parameter.
	RequestParameterName *string `json:"RequestParameterName,omitempty" xml:"RequestParameterName,omitempty"`
	// The body model.
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiResponseBodyServiceParametersMapServiceParameterMap) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodyServiceParametersMapServiceParameterMap) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodyServiceParametersMapServiceParameterMap) SetRequestParameterName(v string) *DescribeApiResponseBodyServiceParametersMapServiceParameterMap {
	s.RequestParameterName = &v
	return s
}

func (s *DescribeApiResponseBodyServiceParametersMapServiceParameterMap) SetServiceParameterName(v string) *DescribeApiResponseBodyServiceParametersMapServiceParameterMap {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiResponseBodySystemParameters struct {
	SystemParameter []*DescribeApiResponseBodySystemParametersSystemParameter `json:"SystemParameter,omitempty" xml:"SystemParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiResponseBodySystemParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodySystemParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodySystemParameters) SetSystemParameter(v []*DescribeApiResponseBodySystemParametersSystemParameter) *DescribeApiResponseBodySystemParameters {
	s.SystemParameter = v
	return s
}

type DescribeApiResponseBodySystemParametersSystemParameter struct {
	// The root path of Function Compute.
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The name of the API, which is unique in the group.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// sex
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The request method.
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// Indicates whether the document is public. Valid values: **PUBLIC** and **PRIVATE**.
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiResponseBodySystemParametersSystemParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponseBodySystemParametersSystemParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiResponseBodySystemParametersSystemParameter) SetDemoValue(v string) *DescribeApiResponseBodySystemParametersSystemParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeApiResponseBodySystemParametersSystemParameter) SetDescription(v string) *DescribeApiResponseBodySystemParametersSystemParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiResponseBodySystemParametersSystemParameter) SetLocation(v string) *DescribeApiResponseBodySystemParametersSystemParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiResponseBodySystemParametersSystemParameter) SetParameterName(v string) *DescribeApiResponseBodySystemParametersSystemParameter {
	s.ParameterName = &v
	return s
}

func (s *DescribeApiResponseBodySystemParametersSystemParameter) SetServiceParameterName(v string) *DescribeApiResponseBodySystemParametersSystemParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiResponse) SetHeaders(v map[string]*string) *DescribeApiResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiResponse) SetStatusCode(v int32) *DescribeApiResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiResponse) SetBody(v *DescribeApiResponseBody) *DescribeApiResponse {
	s.Body = v
	return s
}

type DescribeApiDocRequest struct {
	ApiId         *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageName     *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiDocRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiDocRequest) SetApiId(v string) *DescribeApiDocRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiDocRequest) SetGroupId(v string) *DescribeApiDocRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiDocRequest) SetSecurityToken(v string) *DescribeApiDocRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiDocRequest) SetStageName(v string) *DescribeApiDocRequest {
	s.StageName = &v
	return s
}

type DescribeApiDocResponseBody struct {
	ApiId              *string                                       `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiName            *string                                       `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	AuthType           *string                                       `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	DeployedTime       *string                                       `json:"DeployedTime,omitempty" xml:"DeployedTime,omitempty"`
	Description        *string                                       `json:"Description,omitempty" xml:"Description,omitempty"`
	DisableInternet    *bool                                         `json:"DisableInternet,omitempty" xml:"DisableInternet,omitempty"`
	ErrorCodeSamples   *DescribeApiDocResponseBodyErrorCodeSamples   `json:"ErrorCodeSamples,omitempty" xml:"ErrorCodeSamples,omitempty" type:"Struct"`
	FailResultSample   *string                                       `json:"FailResultSample,omitempty" xml:"FailResultSample,omitempty"`
	ForceNonceCheck    *bool                                         `json:"ForceNonceCheck,omitempty" xml:"ForceNonceCheck,omitempty"`
	GroupId            *string                                       `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName          *string                                       `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	RegionId           *string                                       `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RequestConfig      *DescribeApiDocResponseBodyRequestConfig      `json:"RequestConfig,omitempty" xml:"RequestConfig,omitempty" type:"Struct"`
	RequestId          *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RequestParameters  *DescribeApiDocResponseBodyRequestParameters  `json:"RequestParameters,omitempty" xml:"RequestParameters,omitempty" type:"Struct"`
	ResultDescriptions *DescribeApiDocResponseBodyResultDescriptions `json:"ResultDescriptions,omitempty" xml:"ResultDescriptions,omitempty" type:"Struct"`
	ResultSample       *string                                       `json:"ResultSample,omitempty" xml:"ResultSample,omitempty"`
	ResultType         *string                                       `json:"ResultType,omitempty" xml:"ResultType,omitempty"`
	StageName          *string                                       `json:"StageName,omitempty" xml:"StageName,omitempty"`
	Visibility         *string                                       `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribeApiDocResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiDocResponseBody) SetApiId(v string) *DescribeApiDocResponseBody {
	s.ApiId = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetApiName(v string) *DescribeApiDocResponseBody {
	s.ApiName = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetAuthType(v string) *DescribeApiDocResponseBody {
	s.AuthType = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetDeployedTime(v string) *DescribeApiDocResponseBody {
	s.DeployedTime = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetDescription(v string) *DescribeApiDocResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetDisableInternet(v bool) *DescribeApiDocResponseBody {
	s.DisableInternet = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetErrorCodeSamples(v *DescribeApiDocResponseBodyErrorCodeSamples) *DescribeApiDocResponseBody {
	s.ErrorCodeSamples = v
	return s
}

func (s *DescribeApiDocResponseBody) SetFailResultSample(v string) *DescribeApiDocResponseBody {
	s.FailResultSample = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetForceNonceCheck(v bool) *DescribeApiDocResponseBody {
	s.ForceNonceCheck = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetGroupId(v string) *DescribeApiDocResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetGroupName(v string) *DescribeApiDocResponseBody {
	s.GroupName = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetRegionId(v string) *DescribeApiDocResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetRequestConfig(v *DescribeApiDocResponseBodyRequestConfig) *DescribeApiDocResponseBody {
	s.RequestConfig = v
	return s
}

func (s *DescribeApiDocResponseBody) SetRequestId(v string) *DescribeApiDocResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetRequestParameters(v *DescribeApiDocResponseBodyRequestParameters) *DescribeApiDocResponseBody {
	s.RequestParameters = v
	return s
}

func (s *DescribeApiDocResponseBody) SetResultDescriptions(v *DescribeApiDocResponseBodyResultDescriptions) *DescribeApiDocResponseBody {
	s.ResultDescriptions = v
	return s
}

func (s *DescribeApiDocResponseBody) SetResultSample(v string) *DescribeApiDocResponseBody {
	s.ResultSample = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetResultType(v string) *DescribeApiDocResponseBody {
	s.ResultType = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetStageName(v string) *DescribeApiDocResponseBody {
	s.StageName = &v
	return s
}

func (s *DescribeApiDocResponseBody) SetVisibility(v string) *DescribeApiDocResponseBody {
	s.Visibility = &v
	return s
}

type DescribeApiDocResponseBodyErrorCodeSamples struct {
	ErrorCodeSample []*DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample `json:"ErrorCodeSample,omitempty" xml:"ErrorCodeSample,omitempty" type:"Repeated"`
}

func (s DescribeApiDocResponseBodyErrorCodeSamples) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocResponseBodyErrorCodeSamples) GoString() string {
	return s.String()
}

func (s *DescribeApiDocResponseBodyErrorCodeSamples) SetErrorCodeSample(v []*DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample) *DescribeApiDocResponseBodyErrorCodeSamples {
	s.ErrorCodeSample = v
	return s
}

type DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample struct {
	Code        *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Message     *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample) GoString() string {
	return s.String()
}

func (s *DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample) SetCode(v string) *DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Code = &v
	return s
}

func (s *DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample) SetDescription(v string) *DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Description = &v
	return s
}

func (s *DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample) SetMessage(v string) *DescribeApiDocResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Message = &v
	return s
}

type DescribeApiDocResponseBodyRequestConfig struct {
	BodyFormat          *string `json:"BodyFormat,omitempty" xml:"BodyFormat,omitempty"`
	PostBodyDescription *string `json:"PostBodyDescription,omitempty" xml:"PostBodyDescription,omitempty"`
	RequestHttpMethod   *string `json:"RequestHttpMethod,omitempty" xml:"RequestHttpMethod,omitempty"`
	RequestMode         *string `json:"RequestMode,omitempty" xml:"RequestMode,omitempty"`
	RequestPath         *string `json:"RequestPath,omitempty" xml:"RequestPath,omitempty"`
	RequestProtocol     *string `json:"RequestProtocol,omitempty" xml:"RequestProtocol,omitempty"`
}

func (s DescribeApiDocResponseBodyRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocResponseBodyRequestConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiDocResponseBodyRequestConfig) SetBodyFormat(v string) *DescribeApiDocResponseBodyRequestConfig {
	s.BodyFormat = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestConfig) SetPostBodyDescription(v string) *DescribeApiDocResponseBodyRequestConfig {
	s.PostBodyDescription = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestConfig) SetRequestHttpMethod(v string) *DescribeApiDocResponseBodyRequestConfig {
	s.RequestHttpMethod = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestConfig) SetRequestMode(v string) *DescribeApiDocResponseBodyRequestConfig {
	s.RequestMode = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestConfig) SetRequestPath(v string) *DescribeApiDocResponseBodyRequestConfig {
	s.RequestPath = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestConfig) SetRequestProtocol(v string) *DescribeApiDocResponseBodyRequestConfig {
	s.RequestProtocol = &v
	return s
}

type DescribeApiDocResponseBodyRequestParameters struct {
	RequestParameter []*DescribeApiDocResponseBodyRequestParametersRequestParameter `json:"RequestParameter,omitempty" xml:"RequestParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiDocResponseBodyRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocResponseBodyRequestParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiDocResponseBodyRequestParameters) SetRequestParameter(v []*DescribeApiDocResponseBodyRequestParametersRequestParameter) *DescribeApiDocResponseBodyRequestParameters {
	s.RequestParameter = v
	return s
}

type DescribeApiDocResponseBodyRequestParametersRequestParameter struct {
	ApiParameterName *string `json:"ApiParameterName,omitempty" xml:"ApiParameterName,omitempty"`
	ArrayItemsType   *string `json:"ArrayItemsType,omitempty" xml:"ArrayItemsType,omitempty"`
	DefaultValue     *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	DemoValue        *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	Description      *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DocOrder         *int32  `json:"DocOrder,omitempty" xml:"DocOrder,omitempty"`
	DocShow          *string `json:"DocShow,omitempty" xml:"DocShow,omitempty"`
	EnumValue        *string `json:"EnumValue,omitempty" xml:"EnumValue,omitempty"`
	// JSON scheme
	JsonScheme        *string `json:"JsonScheme,omitempty" xml:"JsonScheme,omitempty"`
	Location          *string `json:"Location,omitempty" xml:"Location,omitempty"`
	MaxLength         *int64  `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	MaxValue          *int64  `json:"MaxValue,omitempty" xml:"MaxValue,omitempty"`
	MinLength         *int64  `json:"MinLength,omitempty" xml:"MinLength,omitempty"`
	MinValue          *int64  `json:"MinValue,omitempty" xml:"MinValue,omitempty"`
	ParameterType     *string `json:"ParameterType,omitempty" xml:"ParameterType,omitempty"`
	RegularExpression *string `json:"RegularExpression,omitempty" xml:"RegularExpression,omitempty"`
	Required          *string `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s DescribeApiDocResponseBodyRequestParametersRequestParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocResponseBodyRequestParametersRequestParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetApiParameterName(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.ApiParameterName = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetArrayItemsType(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.ArrayItemsType = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetDefaultValue(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.DefaultValue = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetDemoValue(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetDescription(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetDocOrder(v int32) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.DocOrder = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetDocShow(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.DocShow = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetEnumValue(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.EnumValue = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetJsonScheme(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.JsonScheme = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetLocation(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetMaxLength(v int64) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.MaxLength = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetMaxValue(v int64) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.MaxValue = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetMinLength(v int64) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.MinLength = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetMinValue(v int64) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.MinValue = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetParameterType(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.ParameterType = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetRegularExpression(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.RegularExpression = &v
	return s
}

func (s *DescribeApiDocResponseBodyRequestParametersRequestParameter) SetRequired(v string) *DescribeApiDocResponseBodyRequestParametersRequestParameter {
	s.Required = &v
	return s
}

type DescribeApiDocResponseBodyResultDescriptions struct {
	ResultDescription []*DescribeApiDocResponseBodyResultDescriptionsResultDescription `json:"ResultDescription,omitempty" xml:"ResultDescription,omitempty" type:"Repeated"`
}

func (s DescribeApiDocResponseBodyResultDescriptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocResponseBodyResultDescriptions) GoString() string {
	return s.String()
}

func (s *DescribeApiDocResponseBodyResultDescriptions) SetResultDescription(v []*DescribeApiDocResponseBodyResultDescriptionsResultDescription) *DescribeApiDocResponseBodyResultDescriptions {
	s.ResultDescription = v
	return s
}

type DescribeApiDocResponseBodyResultDescriptionsResultDescription struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	HasChild    *bool   `json:"HasChild,omitempty" xml:"HasChild,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Key         *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Mandatory   *bool   `json:"Mandatory,omitempty" xml:"Mandatory,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Pid         *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeApiDocResponseBodyResultDescriptionsResultDescription) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocResponseBodyResultDescriptionsResultDescription) GoString() string {
	return s.String()
}

func (s *DescribeApiDocResponseBodyResultDescriptionsResultDescription) SetDescription(v string) *DescribeApiDocResponseBodyResultDescriptionsResultDescription {
	s.Description = &v
	return s
}

func (s *DescribeApiDocResponseBodyResultDescriptionsResultDescription) SetHasChild(v bool) *DescribeApiDocResponseBodyResultDescriptionsResultDescription {
	s.HasChild = &v
	return s
}

func (s *DescribeApiDocResponseBodyResultDescriptionsResultDescription) SetId(v string) *DescribeApiDocResponseBodyResultDescriptionsResultDescription {
	s.Id = &v
	return s
}

func (s *DescribeApiDocResponseBodyResultDescriptionsResultDescription) SetKey(v string) *DescribeApiDocResponseBodyResultDescriptionsResultDescription {
	s.Key = &v
	return s
}

func (s *DescribeApiDocResponseBodyResultDescriptionsResultDescription) SetMandatory(v bool) *DescribeApiDocResponseBodyResultDescriptionsResultDescription {
	s.Mandatory = &v
	return s
}

func (s *DescribeApiDocResponseBodyResultDescriptionsResultDescription) SetName(v string) *DescribeApiDocResponseBodyResultDescriptionsResultDescription {
	s.Name = &v
	return s
}

func (s *DescribeApiDocResponseBodyResultDescriptionsResultDescription) SetPid(v string) *DescribeApiDocResponseBodyResultDescriptionsResultDescription {
	s.Pid = &v
	return s
}

func (s *DescribeApiDocResponseBodyResultDescriptionsResultDescription) SetType(v string) *DescribeApiDocResponseBodyResultDescriptionsResultDescription {
	s.Type = &v
	return s
}

type DescribeApiDocResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApiDocResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApiDocResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiDocResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiDocResponse) SetHeaders(v map[string]*string) *DescribeApiDocResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiDocResponse) SetStatusCode(v int32) *DescribeApiDocResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiDocResponse) SetBody(v *DescribeApiDocResponseBody) *DescribeApiDocResponse {
	s.Body = v
	return s
}

type DescribeApiGroupRequest struct {
	// The ID of the API group. This ID is generated by the system and globally unique.
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The object tags that match the lifecycle rule. You can specify multiple tags.
	Tag []*DescribeApiGroupRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeApiGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupRequest) SetGroupId(v string) *DescribeApiGroupRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiGroupRequest) SetSecurityToken(v string) *DescribeApiGroupRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiGroupRequest) SetTag(v []*DescribeApiGroupRequestTag) *DescribeApiGroupRequest {
	s.Tag = v
	return s
}

type DescribeApiGroupRequestTag struct {
	// The key of the tag.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeApiGroupRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupRequestTag) SetKey(v string) *DescribeApiGroupRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeApiGroupRequestTag) SetValue(v string) *DescribeApiGroupRequestTag {
	s.Value = &v
	return s
}

type DescribeApiGroupResponseBody struct {
	// The root path of the API.
	BasePath *string `json:"BasePath,omitempty" xml:"BasePath,omitempty"`
	// The billing status of the API group.
	//
	// *   **NORMAL**: The API group is normal.
	// *   **LOCKED**: The API group is locked due to overdue payments.
	BillingStatus *string `json:"BillingStatus,omitempty" xml:"BillingStatus,omitempty"`
	// The VPC second-level domain name.
	ClassicVpcSubDomain *string `json:"ClassicVpcSubDomain,omitempty" xml:"ClassicVpcSubDomain,omitempty"`
	// The products on Alibaba Cloud Marketplace.
	CloudMarketCommodity *bool `json:"CloudMarketCommodity,omitempty" xml:"CloudMarketCommodity,omitempty"`
	// The CloudMonitor application group.
	CmsMonitorGroup *string `json:"CmsMonitorGroup,omitempty" xml:"CmsMonitorGroup,omitempty"`
	// The list of associated tags. Separate multiple tags with commas (,).
	CompatibleFlags *string `json:"CompatibleFlags,omitempty" xml:"CompatibleFlags,omitempty"`
	// The creation time (UTC) of the API group.
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The custom domain name information.
	CustomDomains *DescribeApiGroupResponseBodyCustomDomains `json:"CustomDomains,omitempty" xml:"CustomDomains,omitempty" type:"Struct"`
	// The custom trace configuration.
	CustomTraceConfig *string `json:"CustomTraceConfig,omitempty" xml:"CustomTraceConfig,omitempty"`
	// The list of custom configuration items.
	CustomerConfigs       *string `json:"CustomerConfigs,omitempty" xml:"CustomerConfigs,omitempty"`
	DedicatedInstanceType *string `json:"DedicatedInstanceType,omitempty" xml:"DedicatedInstanceType,omitempty"`
	// The default domain name.
	DefaultDomain *string `json:"DefaultDomain,omitempty" xml:"DefaultDomain,omitempty"`
	// The description of the API group.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the group to which the API belongs.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The HTTPS policy.
	HttpsPolicy *string `json:"HttpsPolicy,omitempty" xml:"HttpsPolicy,omitempty"`
	// The validity status of the API group. Valid values:
	//
	// *   **NORMAL**: The API group is normal.
	// *   **LOCKED**: The API group is locked because it is not valid.
	IllegalStatus *string `json:"IllegalStatus,omitempty" xml:"IllegalStatus,omitempty"`
	// The ID of the instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the instance.
	//
	// *   CLASSIC_SHARED: shared instance that uses the classic network configuration
	// *   VPC_SHARED: shared instance that uses VPC
	// *   VPC_DEDICATED: dedicated instance that uses VPC
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The VIP list of the instance.
	InstanceVipList *string `json:"InstanceVipList,omitempty" xml:"InstanceVipList,omitempty"`
	// The IPv6 status.
	Ipv6Status *string `json:"Ipv6Status,omitempty" xml:"Ipv6Status,omitempty"`
	// The last modification time (UTC) of the API group.
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// Specifies whether to pass headers.
	PassthroughHeaders *string `json:"PassthroughHeaders,omitempty" xml:"PassthroughHeaders,omitempty"`
	// The region to which the API group belongs.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The RPC mode.
	RpcPattern *string `json:"RpcPattern,omitempty" xml:"RpcPattern,omitempty"`
	// The runtime environment information.
	StageItems *DescribeApiGroupResponseBodyStageItems `json:"StageItems,omitempty" xml:"StageItems,omitempty" type:"Struct"`
	// The status of the API group.
	//
	// *   **NORMAL**: The API group is normal.
	// *   **DELETE**: The API group is deleted.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The second-level domain name automatically assigned to the API group.
	SubDomain *string `json:"SubDomain,omitempty" xml:"SubDomain,omitempty"`
	// The upper QPS limit of the API group. The default value is 500. You can increase the upper limit by submitting an application.
	TrafficLimit *int32 `json:"TrafficLimit,omitempty" xml:"TrafficLimit,omitempty"`
	// The user log settings.
	UserLogConfig *string `json:"UserLogConfig,omitempty" xml:"UserLogConfig,omitempty"`
	// The VPC domain name.
	VpcDomain *string `json:"VpcDomain,omitempty" xml:"VpcDomain,omitempty"`
	// The VPC SLB domain name.
	VpcSlbIntranetDomain *string `json:"VpcSlbIntranetDomain,omitempty" xml:"VpcSlbIntranetDomain,omitempty"`
}

func (s DescribeApiGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupResponseBody) SetBasePath(v string) *DescribeApiGroupResponseBody {
	s.BasePath = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetBillingStatus(v string) *DescribeApiGroupResponseBody {
	s.BillingStatus = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetClassicVpcSubDomain(v string) *DescribeApiGroupResponseBody {
	s.ClassicVpcSubDomain = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetCloudMarketCommodity(v bool) *DescribeApiGroupResponseBody {
	s.CloudMarketCommodity = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetCmsMonitorGroup(v string) *DescribeApiGroupResponseBody {
	s.CmsMonitorGroup = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetCompatibleFlags(v string) *DescribeApiGroupResponseBody {
	s.CompatibleFlags = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetCreatedTime(v string) *DescribeApiGroupResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetCustomDomains(v *DescribeApiGroupResponseBodyCustomDomains) *DescribeApiGroupResponseBody {
	s.CustomDomains = v
	return s
}

func (s *DescribeApiGroupResponseBody) SetCustomTraceConfig(v string) *DescribeApiGroupResponseBody {
	s.CustomTraceConfig = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetCustomerConfigs(v string) *DescribeApiGroupResponseBody {
	s.CustomerConfigs = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetDedicatedInstanceType(v string) *DescribeApiGroupResponseBody {
	s.DedicatedInstanceType = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetDefaultDomain(v string) *DescribeApiGroupResponseBody {
	s.DefaultDomain = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetDescription(v string) *DescribeApiGroupResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetGroupId(v string) *DescribeApiGroupResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetGroupName(v string) *DescribeApiGroupResponseBody {
	s.GroupName = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetHttpsPolicy(v string) *DescribeApiGroupResponseBody {
	s.HttpsPolicy = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetIllegalStatus(v string) *DescribeApiGroupResponseBody {
	s.IllegalStatus = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetInstanceId(v string) *DescribeApiGroupResponseBody {
	s.InstanceId = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetInstanceType(v string) *DescribeApiGroupResponseBody {
	s.InstanceType = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetInstanceVipList(v string) *DescribeApiGroupResponseBody {
	s.InstanceVipList = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetIpv6Status(v string) *DescribeApiGroupResponseBody {
	s.Ipv6Status = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetModifiedTime(v string) *DescribeApiGroupResponseBody {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetPassthroughHeaders(v string) *DescribeApiGroupResponseBody {
	s.PassthroughHeaders = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetRegionId(v string) *DescribeApiGroupResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetRequestId(v string) *DescribeApiGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetRpcPattern(v string) *DescribeApiGroupResponseBody {
	s.RpcPattern = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetStageItems(v *DescribeApiGroupResponseBodyStageItems) *DescribeApiGroupResponseBody {
	s.StageItems = v
	return s
}

func (s *DescribeApiGroupResponseBody) SetStatus(v string) *DescribeApiGroupResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetSubDomain(v string) *DescribeApiGroupResponseBody {
	s.SubDomain = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetTrafficLimit(v int32) *DescribeApiGroupResponseBody {
	s.TrafficLimit = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetUserLogConfig(v string) *DescribeApiGroupResponseBody {
	s.UserLogConfig = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetVpcDomain(v string) *DescribeApiGroupResponseBody {
	s.VpcDomain = &v
	return s
}

func (s *DescribeApiGroupResponseBody) SetVpcSlbIntranetDomain(v string) *DescribeApiGroupResponseBody {
	s.VpcSlbIntranetDomain = &v
	return s
}

type DescribeApiGroupResponseBodyCustomDomains struct {
	DomainItem []*DescribeApiGroupResponseBodyCustomDomainsDomainItem `json:"DomainItem,omitempty" xml:"DomainItem,omitempty" type:"Repeated"`
}

func (s DescribeApiGroupResponseBodyCustomDomains) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupResponseBodyCustomDomains) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupResponseBodyCustomDomains) SetDomainItem(v []*DescribeApiGroupResponseBodyCustomDomainsDomainItem) *DescribeApiGroupResponseBodyCustomDomains {
	s.DomainItem = v
	return s
}

type DescribeApiGroupResponseBodyCustomDomainsDomainItem struct {
	// The name of the bound runtime environment.
	BindStageName *string `json:"BindStageName,omitempty" xml:"BindStageName,omitempty"`
	// The unique ID of the SSL certificate, which is automatically generated by the system.
	CertificateId *string `json:"CertificateId,omitempty" xml:"CertificateId,omitempty"`
	// The name of the SSL certificate.
	CertificateName       *string `json:"CertificateName,omitempty" xml:"CertificateName,omitempty"`
	CertificateValidEnd   *int64  `json:"CertificateValidEnd,omitempty" xml:"CertificateValidEnd,omitempty"`
	CertificateValidStart *int64  `json:"CertificateValidStart,omitempty" xml:"CertificateValidStart,omitempty"`
	// The type of the custom domain name.
	CustomDomainType *string `json:"CustomDomainType,omitempty" xml:"CustomDomainType,omitempty"`
	// The binding status of the custom domain name. Valid values:
	//
	// *   **BINDING**: The domain name is bound.
	// *   **BOUND**: The domain name is not bound.
	DomainBindingStatus *string `json:"DomainBindingStatus,omitempty" xml:"DomainBindingStatus,omitempty"`
	// The domain name resolution status. Valid values:
	//
	// *   **RESOLVED**: The domain name has been resolved.
	// *   **UNRESOLVED**: The domain name has not been resolved.
	DomainCNAMEStatus *string `json:"DomainCNAMEStatus,omitempty" xml:"DomainCNAMEStatus,omitempty"`
	// The validity status of the domain name. Valid values:
	//
	// *   **NORMAL**: The domain name is valid.
	// *   **ABNORMAL**: The domain name is invalid. This status affects API calls and must be resolved as soon as possible.
	DomainLegalStatus *string `json:"DomainLegalStatus,omitempty" xml:"DomainLegalStatus,omitempty"`
	// The domain name.
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The domain name-related remarks, such as the cause for a domain name exception.
	DomainRemark *string `json:"DomainRemark,omitempty" xml:"DomainRemark,omitempty"`
	// The status of the domain name that uses the WebSocket feature.
	DomainWebSocketStatus *string `json:"DomainWebSocketStatus,omitempty" xml:"DomainWebSocketStatus,omitempty"`
	// Indicates whether to redirect HTTP requests to HTTPS.
	IsHttpRedirectToHttps *bool `json:"IsHttpRedirectToHttps,omitempty" xml:"IsHttpRedirectToHttps,omitempty"`
	// The wildcard domain name mode.
	WildcardDomainPatterns *string `json:"WildcardDomainPatterns,omitempty" xml:"WildcardDomainPatterns,omitempty"`
	WssEnable              *string `json:"WssEnable,omitempty" xml:"WssEnable,omitempty"`
}

func (s DescribeApiGroupResponseBodyCustomDomainsDomainItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupResponseBodyCustomDomainsDomainItem) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetBindStageName(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.BindStageName = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetCertificateId(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.CertificateId = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetCertificateName(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.CertificateName = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetCertificateValidEnd(v int64) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.CertificateValidEnd = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetCertificateValidStart(v int64) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.CertificateValidStart = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetCustomDomainType(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.CustomDomainType = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetDomainBindingStatus(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.DomainBindingStatus = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetDomainCNAMEStatus(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.DomainCNAMEStatus = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetDomainLegalStatus(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.DomainLegalStatus = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetDomainName(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.DomainName = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetDomainRemark(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.DomainRemark = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetDomainWebSocketStatus(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.DomainWebSocketStatus = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetIsHttpRedirectToHttps(v bool) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.IsHttpRedirectToHttps = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetWildcardDomainPatterns(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.WildcardDomainPatterns = &v
	return s
}

func (s *DescribeApiGroupResponseBodyCustomDomainsDomainItem) SetWssEnable(v string) *DescribeApiGroupResponseBodyCustomDomainsDomainItem {
	s.WssEnable = &v
	return s
}

type DescribeApiGroupResponseBodyStageItems struct {
	StageInfo []*DescribeApiGroupResponseBodyStageItemsStageInfo `json:"StageInfo,omitempty" xml:"StageInfo,omitempty" type:"Repeated"`
}

func (s DescribeApiGroupResponseBodyStageItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupResponseBodyStageItems) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupResponseBodyStageItems) SetStageInfo(v []*DescribeApiGroupResponseBodyStageItemsStageInfo) *DescribeApiGroupResponseBodyStageItems {
	s.StageInfo = v
	return s
}

type DescribeApiGroupResponseBodyStageItemsStageInfo struct {
	// The description of the runtime environment.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the runtime environment.
	StageId *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	// The name of the runtime environment.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiGroupResponseBodyStageItemsStageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupResponseBodyStageItemsStageInfo) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupResponseBodyStageItemsStageInfo) SetDescription(v string) *DescribeApiGroupResponseBodyStageItemsStageInfo {
	s.Description = &v
	return s
}

func (s *DescribeApiGroupResponseBodyStageItemsStageInfo) SetStageId(v string) *DescribeApiGroupResponseBodyStageItemsStageInfo {
	s.StageId = &v
	return s
}

func (s *DescribeApiGroupResponseBodyStageItemsStageInfo) SetStageName(v string) *DescribeApiGroupResponseBodyStageItemsStageInfo {
	s.StageName = &v
	return s
}

type DescribeApiGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApiGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApiGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupResponse) SetHeaders(v map[string]*string) *DescribeApiGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiGroupResponse) SetStatusCode(v int32) *DescribeApiGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiGroupResponse) SetBody(v *DescribeApiGroupResponseBody) *DescribeApiGroupResponse {
	s.Body = v
	return s
}

type DescribeApiGroupVpcWhitelistRequest struct {
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeApiGroupVpcWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupVpcWhitelistRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupVpcWhitelistRequest) SetGroupId(v string) *DescribeApiGroupVpcWhitelistRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiGroupVpcWhitelistRequest) SetSecurityToken(v string) *DescribeApiGroupVpcWhitelistRequest {
	s.SecurityToken = &v
	return s
}

type DescribeApiGroupVpcWhitelistResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VpcIds    *string `json:"VpcIds,omitempty" xml:"VpcIds,omitempty"`
}

func (s DescribeApiGroupVpcWhitelistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupVpcWhitelistResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupVpcWhitelistResponseBody) SetRequestId(v string) *DescribeApiGroupVpcWhitelistResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiGroupVpcWhitelistResponseBody) SetVpcIds(v string) *DescribeApiGroupVpcWhitelistResponseBody {
	s.VpcIds = &v
	return s
}

type DescribeApiGroupVpcWhitelistResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApiGroupVpcWhitelistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApiGroupVpcWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupVpcWhitelistResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupVpcWhitelistResponse) SetHeaders(v map[string]*string) *DescribeApiGroupVpcWhitelistResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiGroupVpcWhitelistResponse) SetStatusCode(v int32) *DescribeApiGroupVpcWhitelistResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiGroupVpcWhitelistResponse) SetBody(v *DescribeApiGroupVpcWhitelistResponseBody) *DescribeApiGroupVpcWhitelistResponse {
	s.Body = v
	return s
}

type DescribeApiGroupsRequest struct {
	EnableTagAuth *bool                          `json:"EnableTagAuth,omitempty" xml:"EnableTagAuth,omitempty"`
	GroupId       *string                        `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName     *string                        `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	InstanceId    *string                        `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber    *int32                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string                        `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Sort          *string                        `json:"Sort,omitempty" xml:"Sort,omitempty"`
	Tag           []*DescribeApiGroupsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeApiGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsRequest) SetEnableTagAuth(v bool) *DescribeApiGroupsRequest {
	s.EnableTagAuth = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetGroupId(v string) *DescribeApiGroupsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetGroupName(v string) *DescribeApiGroupsRequest {
	s.GroupName = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetInstanceId(v string) *DescribeApiGroupsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetPageNumber(v int32) *DescribeApiGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetPageSize(v int32) *DescribeApiGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetSecurityToken(v string) *DescribeApiGroupsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetSort(v string) *DescribeApiGroupsRequest {
	s.Sort = &v
	return s
}

func (s *DescribeApiGroupsRequest) SetTag(v []*DescribeApiGroupsRequestTag) *DescribeApiGroupsRequest {
	s.Tag = v
	return s
}

type DescribeApiGroupsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeApiGroupsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsRequestTag) SetKey(v string) *DescribeApiGroupsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeApiGroupsRequestTag) SetValue(v string) *DescribeApiGroupsRequestTag {
	s.Value = &v
	return s
}

type DescribeApiGroupsResponseBody struct {
	ApiGroupAttributes *DescribeApiGroupsResponseBodyApiGroupAttributes `json:"ApiGroupAttributes,omitempty" xml:"ApiGroupAttributes,omitempty" type:"Struct"`
	PageNumber         *int32                                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize           *int32                                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId          *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount         *int32                                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApiGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsResponseBody) SetApiGroupAttributes(v *DescribeApiGroupsResponseBodyApiGroupAttributes) *DescribeApiGroupsResponseBody {
	s.ApiGroupAttributes = v
	return s
}

func (s *DescribeApiGroupsResponseBody) SetPageNumber(v int32) *DescribeApiGroupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiGroupsResponseBody) SetPageSize(v int32) *DescribeApiGroupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApiGroupsResponseBody) SetRequestId(v string) *DescribeApiGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiGroupsResponseBody) SetTotalCount(v int32) *DescribeApiGroupsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApiGroupsResponseBodyApiGroupAttributes struct {
	ApiGroupAttribute []*DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute `json:"ApiGroupAttribute,omitempty" xml:"ApiGroupAttribute,omitempty" type:"Repeated"`
}

func (s DescribeApiGroupsResponseBodyApiGroupAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsResponseBodyApiGroupAttributes) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributes) SetApiGroupAttribute(v []*DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) *DescribeApiGroupsResponseBodyApiGroupAttributes {
	s.ApiGroupAttribute = v
	return s
}

type DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute struct {
	BasePath      *string                                                               `json:"BasePath,omitempty" xml:"BasePath,omitempty"`
	BillingStatus *string                                                               `json:"BillingStatus,omitempty" xml:"BillingStatus,omitempty"`
	CreatedTime   *string                                                               `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description   *string                                                               `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId       *string                                                               `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName     *string                                                               `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	HttpsPolicy   *string                                                               `json:"HttpsPolicy,omitempty" xml:"HttpsPolicy,omitempty"`
	IllegalStatus *string                                                               `json:"IllegalStatus,omitempty" xml:"IllegalStatus,omitempty"`
	InstanceId    *string                                                               `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceType  *string                                                               `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	ModifiedTime  *string                                                               `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	RegionId      *string                                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SubDomain     *string                                                               `json:"SubDomain,omitempty" xml:"SubDomain,omitempty"`
	Tags          *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	TrafficLimit  *int32                                                                `json:"TrafficLimit,omitempty" xml:"TrafficLimit,omitempty"`
}

func (s DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetBasePath(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.BasePath = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetBillingStatus(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.BillingStatus = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetCreatedTime(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.CreatedTime = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetDescription(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.Description = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetGroupId(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.GroupId = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetGroupName(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.GroupName = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetHttpsPolicy(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.HttpsPolicy = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetIllegalStatus(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.IllegalStatus = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetInstanceId(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.InstanceId = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetInstanceType(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.InstanceType = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetModifiedTime(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetRegionId(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetSubDomain(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.SubDomain = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetTags(v *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTags) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.Tags = v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute) SetTrafficLimit(v int32) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttribute {
	s.TrafficLimit = &v
	return s
}

type DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTags struct {
	TagInfo []*DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo `json:"TagInfo,omitempty" xml:"TagInfo,omitempty" type:"Repeated"`
}

func (s DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTags) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTags) SetTagInfo(v []*DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTags {
	s.TagInfo = v
	return s
}

type DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo) SetKey(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo {
	s.Key = &v
	return s
}

func (s *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo) SetValue(v string) *DescribeApiGroupsResponseBodyApiGroupAttributesApiGroupAttributeTagsTagInfo {
	s.Value = &v
	return s
}

type DescribeApiGroupsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApiGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApiGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiGroupsResponse) SetHeaders(v map[string]*string) *DescribeApiGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiGroupsResponse) SetStatusCode(v int32) *DescribeApiGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiGroupsResponse) SetBody(v *DescribeApiGroupsResponseBody) *DescribeApiGroupsResponse {
	s.Body = v
	return s
}

type DescribeApiHistoriesRequest struct {
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The ID of the API.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the request.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The page number of the returned page.
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The name of the API. The name is used for fuzzy match.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiHistoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoriesRequest) SetApiId(v string) *DescribeApiHistoriesRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiHistoriesRequest) SetApiName(v string) *DescribeApiHistoriesRequest {
	s.ApiName = &v
	return s
}

func (s *DescribeApiHistoriesRequest) SetGroupId(v string) *DescribeApiHistoriesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiHistoriesRequest) SetPageNumber(v int32) *DescribeApiHistoriesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiHistoriesRequest) SetPageSize(v int32) *DescribeApiHistoriesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApiHistoriesRequest) SetSecurityToken(v string) *DescribeApiHistoriesRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiHistoriesRequest) SetStageName(v string) *DescribeApiHistoriesRequest {
	s.StageName = &v
	return s
}

type DescribeApiHistoriesResponseBody struct {
	// The ID of the API.
	ApiHisItems *DescribeApiHistoriesResponseBodyApiHisItems `json:"ApiHisItems,omitempty" xml:"ApiHisItems,omitempty" type:"Struct"`
	// The number of entries returned per page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The returned API information. It is an array consisting of ApiHisItem data.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether an API version is effective. Valid values: ONLINE and OFFLINE.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApiHistoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoriesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoriesResponseBody) SetApiHisItems(v *DescribeApiHistoriesResponseBodyApiHisItems) *DescribeApiHistoriesResponseBody {
	s.ApiHisItems = v
	return s
}

func (s *DescribeApiHistoriesResponseBody) SetPageNumber(v int32) *DescribeApiHistoriesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiHistoriesResponseBody) SetPageSize(v int32) *DescribeApiHistoriesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApiHistoriesResponseBody) SetRequestId(v string) *DescribeApiHistoriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiHistoriesResponseBody) SetTotalCount(v int32) *DescribeApiHistoriesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApiHistoriesResponseBodyApiHisItems struct {
	ApiHisItem []*DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem `json:"ApiHisItem,omitempty" xml:"ApiHisItem,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoriesResponseBodyApiHisItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoriesResponseBodyApiHisItems) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoriesResponseBodyApiHisItems) SetApiHisItem(v []*DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) *DescribeApiHistoriesResponseBodyApiHisItems {
	s.ApiHisItem = v
	return s
}

type DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem struct {
	// Creates an object
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The region where the API is located.
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The historical version of the API.
	DeployedTime *string `json:"DeployedTime,omitempty" xml:"DeployedTime,omitempty"`
	// The name of the group to which an API belongs.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **TEST.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The publishing time (UTC) of the API.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// CreateObject
	HistoryVersion *string `json:"HistoryVersion,omitempty" xml:"HistoryVersion,omitempty"`
	// Queries the historical versions of a specified API.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the API.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The description of the API.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetApiId(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.ApiId = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetApiName(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.ApiName = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetDeployedTime(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.DeployedTime = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetDescription(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.Description = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetGroupId(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.GroupId = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetGroupName(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.GroupName = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetHistoryVersion(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.HistoryVersion = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetRegionId(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.RegionId = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetStageName(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.StageName = &v
	return s
}

func (s *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem) SetStatus(v string) *DescribeApiHistoriesResponseBodyApiHisItemsApiHisItem {
	s.Status = &v
	return s
}

type DescribeApiHistoriesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApiHistoriesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApiHistoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoriesResponse) SetHeaders(v map[string]*string) *DescribeApiHistoriesResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiHistoriesResponse) SetStatusCode(v int32) *DescribeApiHistoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiHistoriesResponse) SetBody(v *DescribeApiHistoriesResponseBody) *DescribeApiHistoriesResponse {
	s.Body = v
	return s
}

type DescribeApiHistoryRequest struct {
	// The ID of the API.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the API group to which the API belongs. This ID is generated by the system and globally unique.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The historical version number of the API.
	HistoryVersion *string `json:"HistoryVersion,omitempty" xml:"HistoryVersion,omitempty"`
	SecurityToken  *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment to which the API is published. Valid values:
	//
	// *   **RELEASE**: production environment
	// *   **TEST**: test environment
	// *   **PRE**: staging environment
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryRequest) SetApiId(v string) *DescribeApiHistoryRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiHistoryRequest) SetGroupId(v string) *DescribeApiHistoryRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiHistoryRequest) SetHistoryVersion(v string) *DescribeApiHistoryRequest {
	s.HistoryVersion = &v
	return s
}

func (s *DescribeApiHistoryRequest) SetSecurityToken(v string) *DescribeApiHistoryRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiHistoryRequest) SetStageName(v string) *DescribeApiHistoryRequest {
	s.StageName = &v
	return s
}

type DescribeApiHistoryResponseBody struct {
	// The signature algorithm that is used if the **AuthType** parameter is set to **APP**. If no value is specified for the AllowSignatureMethod parameter, the default value HmacSHA256 is used. Valid values:
	//
	// *   HmacSHA256
	// *   HmacSHA1,HmacSHA256
	AllowSignatureMethod *string `json:"AllowSignatureMethod,omitempty" xml:"AllowSignatureMethod,omitempty"`
	// The ID of the API.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API.
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The type of AppCode authentication. Default value: DEFAULT. Valid values:
	//
	// *   DEFAULT: AppCode authentication is supported after the API is published in Alibaba Cloud Marketplace.
	// *   DISABLE: AppCode authentication is not supported.
	// *   HEADER: AppCode authentication is supported only in Header parameters.
	// *   HEADER_QUERY: AppCode authentication is supported in Header or Query parameters.
	AppCodeAuthType *string `json:"AppCodeAuthType,omitempty" xml:"AppCodeAuthType,omitempty"`
	// The type of the security authentication that is used for the API. Valid values:
	//
	// *   **APP**: The API can be called only by authorized applications.
	//
	// *   **ANONYMOUS**: The API can be anonymously called. Take note of the following information:
	//
	//     *   All users who have obtained the API service information can call this API. API Gateway neither authenticates callers nor sets user-specific throttling policies. If this API is a public one, you must set throttling policies for it.
	AuthType *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	// The configuration items of the backend service.
	BackendConfig *DescribeApiHistoryResponseBodyBackendConfig `json:"BackendConfig,omitempty" xml:"BackendConfig,omitempty" type:"Struct"`
	// Indicates whether the backend service is enabled.
	BackendEnable *bool `json:"BackendEnable,omitempty" xml:"BackendEnable,omitempty"`
	// The constant parameters.
	ConstantParameters *DescribeApiHistoryResponseBodyConstantParameters `json:"ConstantParameters,omitempty" xml:"ConstantParameters,omitempty" type:"Struct"`
	// The custom system parameters.
	CustomSystemParameters *DescribeApiHistoryResponseBodyCustomSystemParameters `json:"CustomSystemParameters,omitempty" xml:"CustomSystemParameters,omitempty" type:"Struct"`
	// The time when the API was published. The time is displayed in UTC.
	DeployedTime *string `json:"DeployedTime,omitempty" xml:"DeployedTime,omitempty"`
	// The description of the API.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// *   If the **DisableInternet** parameter is set to **true**, you call the API only over internal networks.
	// *   If the **DisableInternet** parameter is set to **false**, no limit is imposed on networks. When you create an API, the default value of this parameter is false.
	DisableInternet *bool `json:"DisableInternet,omitempty" xml:"DisableInternet,omitempty"`
	// The sample error codes that are returned from the backend service.
	//
	// For more information, see [ErrorCodeSample](~~44392~~).
	ErrorCodeSamples *DescribeApiHistoryResponseBodyErrorCodeSamples `json:"ErrorCodeSamples,omitempty" xml:"ErrorCodeSamples,omitempty" type:"Struct"`
	// The sample error response that is returned from the backend service.
	FailResultSample *string `json:"FailResultSample,omitempty" xml:"FailResultSample,omitempty"`
	// *   Indicates whether to forcefully check X-Ca-Nonce. X-Ca-Nonce is the unique identifier of a request and is generally identified by UUID. If the **ForceNonceCheck** parameter is set to **true**, X-Ca-Nonce is forcefully checked. After API Gateway receives this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps defend against replay attacks.
	// *   If the **ForceNonceCheck** parameter is set to **false**, X-Ca-Nonce is not checked. When you create an API, the default value of this parameter is false.
	ForceNonceCheck *bool `json:"ForceNonceCheck,omitempty" xml:"ForceNonceCheck,omitempty"`
	// The ID of the API group.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The historical version number of the API.
	HistoryVersion *string `json:"HistoryVersion,omitempty" xml:"HistoryVersion,omitempty"`
	// The configuration items of third-party OpenID Connect authentication.
	OpenIdConnectConfig *DescribeApiHistoryResponseBodyOpenIdConnectConfig `json:"OpenIdConnectConfig,omitempty" xml:"OpenIdConnectConfig,omitempty" type:"Struct"`
	// The ID of the region where the API is deployed.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The configuration items of API requests that are sent from the consumer to API Gateway.
	//
	// For more information, see [RequestConfig](~~43985~~).
	RequestConfig *DescribeApiHistoryResponseBodyRequestConfig `json:"RequestConfig,omitempty" xml:"RequestConfig,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The parameters of API requests that are sent from the consumer to API Gateway.
	//
	// For more information, see [RequestParameter](~~43986~~).
	RequestParameters *DescribeApiHistoryResponseBodyRequestParameters `json:"RequestParameters,omitempty" xml:"RequestParameters,omitempty" type:"Struct"`
	// The response of the API.
	ResultBodyModel *string `json:"ResultBodyModel,omitempty" xml:"ResultBodyModel,omitempty"`
	// The descriptions that are returned for the API.
	ResultDescriptions *DescribeApiHistoryResponseBodyResultDescriptions `json:"ResultDescriptions,omitempty" xml:"ResultDescriptions,omitempty" type:"Struct"`
	// The sample response.
	ResultSample *string `json:"ResultSample,omitempty" xml:"ResultSample,omitempty"`
	// The type of data that is returned.
	ResultType *string `json:"ResultType,omitempty" xml:"ResultType,omitempty"`
	// The information about backend service calls.
	ServiceConfig *DescribeApiHistoryResponseBodyServiceConfig `json:"ServiceConfig,omitempty" xml:"ServiceConfig,omitempty" type:"Struct"`
	// The parameters of API requests that are sent from API Gateway to the backend service.
	//
	// For more information, see [ServiceParameter](~~43988~~).
	ServiceParameters *DescribeApiHistoryResponseBodyServiceParameters `json:"ServiceParameters,omitempty" xml:"ServiceParameters,omitempty" type:"Struct"`
	// The mappings between the parameters of requests sent from the consumer to API Gateway and the parameters of requests sent from API Gateway to the backend service.
	//
	// For more information, see [ServiceParameterMap](~~43989~~).
	ServiceParametersMap *DescribeApiHistoryResponseBodyServiceParametersMap `json:"ServiceParametersMap,omitempty" xml:"ServiceParametersMap,omitempty" type:"Struct"`
	// The environment to which the API is published. Valid values:
	//
	// *   **RELEASE**: production environment
	// *   **PRE**: staging environment
	// *   **TEST**: test environment
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The system parameters of the API in the JSON format.
	SystemParameters *DescribeApiHistoryResponseBodySystemParameters `json:"SystemParameters,omitempty" xml:"SystemParameters,omitempty" type:"Struct"`
	// Indicates whether the API is public. Valid values:
	//
	// *   **PUBLIC**: The API is public. If you publish the definition of a public API to the production environment, the definition is displayed on the APIs page for all users.
	// *   **PRIVATE**: The API is private. If you publish an API group that contains a private API in Alibaba Cloud Marketplace, the API is not displayed in Alibaba Cloud Marketplace.
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
	// The type of the API that is used in bidirectional communication. Valid values:
	//
	// *   **COMMON**: common API
	// *   **REGISTER**: registered API
	// *   **UNREGISTER**: unregistered API
	// *   **NOTIFY**: downstream notification API
	WebSocketApiType *string `json:"WebSocketApiType,omitempty" xml:"WebSocketApiType,omitempty"`
}

func (s DescribeApiHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBody) SetAllowSignatureMethod(v string) *DescribeApiHistoryResponseBody {
	s.AllowSignatureMethod = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetApiId(v string) *DescribeApiHistoryResponseBody {
	s.ApiId = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetApiName(v string) *DescribeApiHistoryResponseBody {
	s.ApiName = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetAppCodeAuthType(v string) *DescribeApiHistoryResponseBody {
	s.AppCodeAuthType = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetAuthType(v string) *DescribeApiHistoryResponseBody {
	s.AuthType = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetBackendConfig(v *DescribeApiHistoryResponseBodyBackendConfig) *DescribeApiHistoryResponseBody {
	s.BackendConfig = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetBackendEnable(v bool) *DescribeApiHistoryResponseBody {
	s.BackendEnable = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetConstantParameters(v *DescribeApiHistoryResponseBodyConstantParameters) *DescribeApiHistoryResponseBody {
	s.ConstantParameters = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetCustomSystemParameters(v *DescribeApiHistoryResponseBodyCustomSystemParameters) *DescribeApiHistoryResponseBody {
	s.CustomSystemParameters = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetDeployedTime(v string) *DescribeApiHistoryResponseBody {
	s.DeployedTime = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetDescription(v string) *DescribeApiHistoryResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetDisableInternet(v bool) *DescribeApiHistoryResponseBody {
	s.DisableInternet = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetErrorCodeSamples(v *DescribeApiHistoryResponseBodyErrorCodeSamples) *DescribeApiHistoryResponseBody {
	s.ErrorCodeSamples = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetFailResultSample(v string) *DescribeApiHistoryResponseBody {
	s.FailResultSample = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetForceNonceCheck(v bool) *DescribeApiHistoryResponseBody {
	s.ForceNonceCheck = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetGroupId(v string) *DescribeApiHistoryResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetGroupName(v string) *DescribeApiHistoryResponseBody {
	s.GroupName = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetHistoryVersion(v string) *DescribeApiHistoryResponseBody {
	s.HistoryVersion = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetOpenIdConnectConfig(v *DescribeApiHistoryResponseBodyOpenIdConnectConfig) *DescribeApiHistoryResponseBody {
	s.OpenIdConnectConfig = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetRegionId(v string) *DescribeApiHistoryResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetRequestConfig(v *DescribeApiHistoryResponseBodyRequestConfig) *DescribeApiHistoryResponseBody {
	s.RequestConfig = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetRequestId(v string) *DescribeApiHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetRequestParameters(v *DescribeApiHistoryResponseBodyRequestParameters) *DescribeApiHistoryResponseBody {
	s.RequestParameters = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetResultBodyModel(v string) *DescribeApiHistoryResponseBody {
	s.ResultBodyModel = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetResultDescriptions(v *DescribeApiHistoryResponseBodyResultDescriptions) *DescribeApiHistoryResponseBody {
	s.ResultDescriptions = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetResultSample(v string) *DescribeApiHistoryResponseBody {
	s.ResultSample = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetResultType(v string) *DescribeApiHistoryResponseBody {
	s.ResultType = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetServiceConfig(v *DescribeApiHistoryResponseBodyServiceConfig) *DescribeApiHistoryResponseBody {
	s.ServiceConfig = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetServiceParameters(v *DescribeApiHistoryResponseBodyServiceParameters) *DescribeApiHistoryResponseBody {
	s.ServiceParameters = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetServiceParametersMap(v *DescribeApiHistoryResponseBodyServiceParametersMap) *DescribeApiHistoryResponseBody {
	s.ServiceParametersMap = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetStageName(v string) *DescribeApiHistoryResponseBody {
	s.StageName = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetStatus(v string) *DescribeApiHistoryResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetSystemParameters(v *DescribeApiHistoryResponseBodySystemParameters) *DescribeApiHistoryResponseBody {
	s.SystemParameters = v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetVisibility(v string) *DescribeApiHistoryResponseBody {
	s.Visibility = &v
	return s
}

func (s *DescribeApiHistoryResponseBody) SetWebSocketApiType(v string) *DescribeApiHistoryResponseBody {
	s.WebSocketApiType = &v
	return s
}

type DescribeApiHistoryResponseBodyBackendConfig struct {
	// The ID of the backend service.
	BackendId *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	// The name of the backend service.
	BackendName *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	// The type of the backend service.
	BackendType *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
}

func (s DescribeApiHistoryResponseBodyBackendConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyBackendConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyBackendConfig) SetBackendId(v string) *DescribeApiHistoryResponseBodyBackendConfig {
	s.BackendId = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyBackendConfig) SetBackendName(v string) *DescribeApiHistoryResponseBodyBackendConfig {
	s.BackendName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyBackendConfig) SetBackendType(v string) *DescribeApiHistoryResponseBodyBackendConfig {
	s.BackendType = &v
	return s
}

type DescribeApiHistoryResponseBodyConstantParameters struct {
	ConstantParameter []*DescribeApiHistoryResponseBodyConstantParametersConstantParameter `json:"ConstantParameter,omitempty" xml:"ConstantParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodyConstantParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyConstantParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyConstantParameters) SetConstantParameter(v []*DescribeApiHistoryResponseBodyConstantParametersConstantParameter) *DescribeApiHistoryResponseBodyConstantParameters {
	s.ConstantParameter = v
	return s
}

type DescribeApiHistoryResponseBodyConstantParametersConstantParameter struct {
	// The value of the constant parameter.
	ConstantValue *string `json:"ConstantValue,omitempty" xml:"ConstantValue,omitempty"`
	// The description of the parameter.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The location of the parameter. Valid values: BODY, HEAD, QUERY, and PATH.
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the backend parameter that corresponds to the constant parameter.
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiHistoryResponseBodyConstantParametersConstantParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyConstantParametersConstantParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyConstantParametersConstantParameter) SetConstantValue(v string) *DescribeApiHistoryResponseBodyConstantParametersConstantParameter {
	s.ConstantValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyConstantParametersConstantParameter) SetDescription(v string) *DescribeApiHistoryResponseBodyConstantParametersConstantParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyConstantParametersConstantParameter) SetLocation(v string) *DescribeApiHistoryResponseBodyConstantParametersConstantParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyConstantParametersConstantParameter) SetServiceParameterName(v string) *DescribeApiHistoryResponseBodyConstantParametersConstantParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiHistoryResponseBodyCustomSystemParameters struct {
	CustomSystemParameter []*DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter `json:"CustomSystemParameter,omitempty" xml:"CustomSystemParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodyCustomSystemParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyCustomSystemParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyCustomSystemParameters) SetCustomSystemParameter(v []*DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter) *DescribeApiHistoryResponseBodyCustomSystemParameters {
	s.CustomSystemParameter = v
	return s
}

type DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter struct {
	// The sample value of the parameter.
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The description of the parameter.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The location of the parameter. Valid values: BODY, HEAD, QUERY, and PATH.
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the parameter.
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The name of the backend parameter that corresponds to the custom system parameter.
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter) SetDemoValue(v string) *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter) SetDescription(v string) *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter) SetLocation(v string) *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter) SetParameterName(v string) *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter {
	s.ParameterName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter) SetServiceParameterName(v string) *DescribeApiHistoryResponseBodyCustomSystemParametersCustomSystemParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiHistoryResponseBodyErrorCodeSamples struct {
	ErrorCodeSample []*DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample `json:"ErrorCodeSample,omitempty" xml:"ErrorCodeSample,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodyErrorCodeSamples) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyErrorCodeSamples) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyErrorCodeSamples) SetErrorCodeSample(v []*DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample) *DescribeApiHistoryResponseBodyErrorCodeSamples {
	s.ErrorCodeSample = v
	return s
}

type DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample struct {
	// The error code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The error message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample) SetCode(v string) *DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Code = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample) SetDescription(v string) *DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Description = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample) SetMessage(v string) *DescribeApiHistoryResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Message = &v
	return s
}

type DescribeApiHistoryResponseBodyOpenIdConnectConfig struct {
	// The name of the parameter that corresponds to the token.
	IdTokenParamName *string `json:"IdTokenParamName,omitempty" xml:"IdTokenParamName,omitempty"`
	// *   ****
	// *   ****
	OpenIdApiType *string `json:"OpenIdApiType,omitempty" xml:"OpenIdApiType,omitempty"`
	// The public key of the API.
	PublicKey *string `json:"PublicKey,omitempty" xml:"PublicKey,omitempty"`
	// The ID of the public key.
	PublicKeyId *string `json:"PublicKeyId,omitempty" xml:"PublicKeyId,omitempty"`
}

func (s DescribeApiHistoryResponseBodyOpenIdConnectConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyOpenIdConnectConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyOpenIdConnectConfig) SetIdTokenParamName(v string) *DescribeApiHistoryResponseBodyOpenIdConnectConfig {
	s.IdTokenParamName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyOpenIdConnectConfig) SetOpenIdApiType(v string) *DescribeApiHistoryResponseBodyOpenIdConnectConfig {
	s.OpenIdApiType = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyOpenIdConnectConfig) SetPublicKey(v string) *DescribeApiHistoryResponseBodyOpenIdConnectConfig {
	s.PublicKey = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyOpenIdConnectConfig) SetPublicKeyId(v string) *DescribeApiHistoryResponseBodyOpenIdConnectConfig {
	s.PublicKeyId = &v
	return s
}

type DescribeApiHistoryResponseBodyRequestConfig struct {
	// The format in which data was transmitted to the server for a POST or PUT request. Valid values: FORM and STREAM. FORM indicates that data was transmitted as forms that consist of key-value pairs. STREAM indicates that data was transmitted as byte streams. This parameter takes effect when the RequestMode parameter is set to MAPPING.
	BodyFormat *string `json:"BodyFormat,omitempty" xml:"BodyFormat,omitempty"`
	// The body model.
	BodyModel *string `json:"BodyModel,omitempty" xml:"BodyModel,omitempty"`
	// The description of the request body.
	PostBodyDescription *string `json:"PostBodyDescription,omitempty" xml:"PostBodyDescription,omitempty"`
	// The HTTP request method. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.
	RequestHttpMethod *string `json:"RequestHttpMethod,omitempty" xml:"RequestHttpMethod,omitempty"`
	// The request mode of the parameters. Valid values:
	//
	// *   MAPPING: Parameters are mapped. Unknown parameters are filtered out.
	// *   PASSTHROUGH: Parameters are passed through.
	// *   MAPPING_PASSTHROUGH: Parameters are mapped. Unknown parameters are passed through.
	RequestMode *string `json:"RequestMode,omitempty" xml:"RequestMode,omitempty"`
	// The request path of the API.
	RequestPath *string `json:"RequestPath,omitempty" xml:"RequestPath,omitempty"`
	// The type of the protocol that is supported by the API. Valid values: HTTP, HTTPS, and WebSocket. Separate multiple values with commas (,). Example: "HTTP,HTTPS".
	RequestProtocol *string `json:"RequestProtocol,omitempty" xml:"RequestProtocol,omitempty"`
}

func (s DescribeApiHistoryResponseBodyRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyRequestConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyRequestConfig) SetBodyFormat(v string) *DescribeApiHistoryResponseBodyRequestConfig {
	s.BodyFormat = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestConfig) SetBodyModel(v string) *DescribeApiHistoryResponseBodyRequestConfig {
	s.BodyModel = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestConfig) SetPostBodyDescription(v string) *DescribeApiHistoryResponseBodyRequestConfig {
	s.PostBodyDescription = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestConfig) SetRequestHttpMethod(v string) *DescribeApiHistoryResponseBodyRequestConfig {
	s.RequestHttpMethod = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestConfig) SetRequestMode(v string) *DescribeApiHistoryResponseBodyRequestConfig {
	s.RequestMode = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestConfig) SetRequestPath(v string) *DescribeApiHistoryResponseBodyRequestConfig {
	s.RequestPath = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestConfig) SetRequestProtocol(v string) *DescribeApiHistoryResponseBodyRequestConfig {
	s.RequestProtocol = &v
	return s
}

type DescribeApiHistoryResponseBodyRequestParameters struct {
	RequestParameter []*DescribeApiHistoryResponseBodyRequestParametersRequestParameter `json:"RequestParameter,omitempty" xml:"RequestParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodyRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyRequestParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyRequestParameters) SetRequestParameter(v []*DescribeApiHistoryResponseBodyRequestParametersRequestParameter) *DescribeApiHistoryResponseBodyRequestParameters {
	s.RequestParameter = v
	return s
}

type DescribeApiHistoryResponseBodyRequestParametersRequestParameter struct {
	// The name of the parameter in the API request.
	ApiParameterName *string `json:"ApiParameterName,omitempty" xml:"ApiParameterName,omitempty"`
	// The type of the array element.
	ArrayItemsType *string `json:"ArrayItemsType,omitempty" xml:"ArrayItemsType,omitempty"`
	// The default value of the parameter.
	DefaultValue *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	// The sample value of the parameter.
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The description of the parameter.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The order in which the parameter is sorted in the document.
	DocOrder *int32 `json:"DocOrder,omitempty" xml:"DocOrder,omitempty"`
	// Indicates whether the document is public. Valid values: **PUBLIC** and **PRIVATE**.
	DocShow *string `json:"DocShow,omitempty" xml:"DocShow,omitempty"`
	// The hash values can be specified if the **ParameterType** parameter is set to Int, Long, Float, Double, or String. Separate multiple hash values with commas (,). Examples: 1,2,3,4,9 and A,B,C,E,F.
	EnumValue *string `json:"EnumValue,omitempty" xml:"EnumValue,omitempty"`
	// The JSON scheme.
	JsonScheme *string `json:"JsonScheme,omitempty" xml:"JsonScheme,omitempty"`
	// The location of the parameter. Valid values: BODY, HEAD, QUERY, and PATH.
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The maximum length of the parameter value if the **ParameterType** parameter is set to String.
	MaxLength *int64 `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	// The maximum value of the parameter if the **ParameterType** parameter is set to Int, Long, Float, or Double.
	MaxValue *int64 `json:"MaxValue,omitempty" xml:"MaxValue,omitempty"`
	// The minimum length of the parameter value if the **ParameterType** parameter is set to String.
	MinLength *int64 `json:"MinLength,omitempty" xml:"MinLength,omitempty"`
	// The minimum value of the parameter if the **ParameterType** parameter is set to Int, Long, Float, or Double.
	MinValue *int64 `json:"MinValue,omitempty" xml:"MinValue,omitempty"`
	// The data type of the parameter. Valid values: String, Int, Long, Float, Double, and Boolean.
	ParameterType *string `json:"ParameterType,omitempty" xml:"ParameterType,omitempty"`
	// The regular expression that is used to validate the parameter if the **ParameterType** parameter is set to String.
	RegularExpression *string `json:"RegularExpression,omitempty" xml:"RegularExpression,omitempty"`
	// Indicates whether the parameter is required. Valid values: **REQUIRED** and **OPTIONAL**.
	Required *string `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s DescribeApiHistoryResponseBodyRequestParametersRequestParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyRequestParametersRequestParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetApiParameterName(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.ApiParameterName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetArrayItemsType(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.ArrayItemsType = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetDefaultValue(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.DefaultValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetDemoValue(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetDescription(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetDocOrder(v int32) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.DocOrder = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetDocShow(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.DocShow = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetEnumValue(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.EnumValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetJsonScheme(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.JsonScheme = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetLocation(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetMaxLength(v int64) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.MaxLength = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetMaxValue(v int64) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.MaxValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetMinLength(v int64) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.MinLength = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetMinValue(v int64) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.MinValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetParameterType(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.ParameterType = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetRegularExpression(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.RegularExpression = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyRequestParametersRequestParameter) SetRequired(v string) *DescribeApiHistoryResponseBodyRequestParametersRequestParameter {
	s.Required = &v
	return s
}

type DescribeApiHistoryResponseBodyResultDescriptions struct {
	ResultDescription []*DescribeApiHistoryResponseBodyResultDescriptionsResultDescription `json:"ResultDescription,omitempty" xml:"ResultDescription,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodyResultDescriptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyResultDescriptions) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyResultDescriptions) SetResultDescription(v []*DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) *DescribeApiHistoryResponseBodyResultDescriptions {
	s.ResultDescription = v
	return s
}

type DescribeApiHistoryResponseBodyResultDescriptionsResultDescription struct {
	// The description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Indicates whether a subnode exists.
	HasChild *bool `json:"HasChild,omitempty" xml:"HasChild,omitempty"`
	// The ID of the result.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The primary key of the result.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// Indicates whether the parameter is required.
	Mandatory *bool `json:"Mandatory,omitempty" xml:"Mandatory,omitempty"`
	// The name of the result.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the parent node.
	Pid *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The type of the result.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) SetDescription(v string) *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription {
	s.Description = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) SetHasChild(v bool) *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription {
	s.HasChild = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) SetId(v string) *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription {
	s.Id = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) SetKey(v string) *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription {
	s.Key = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) SetMandatory(v bool) *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription {
	s.Mandatory = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) SetName(v string) *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription {
	s.Name = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) SetPid(v string) *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription {
	s.Pid = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription) SetType(v string) *DescribeApiHistoryResponseBodyResultDescriptionsResultDescription {
	s.Type = &v
	return s
}

type DescribeApiHistoryResponseBodyServiceConfig struct {
	// The ContentType header that is used if the ServiceProtocol parameter is set to HTTP. Valid values:
	//
	// *   DEFAULT: the default header in API Gateway
	// *   CUSTOM: a custom header
	// *   CLIENT: the ContentType header of the client
	ContentTypeCatagory *string `json:"ContentTypeCatagory,omitempty" xml:"ContentTypeCatagory,omitempty"`
	// The value of the ContentType header if the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.
	ContentTypeValue *string `json:"ContentTypeValue,omitempty" xml:"ContentTypeValue,omitempty"`
	// The configuration items of EventBridge.
	EventBridgeConfig *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig `json:"EventBridgeConfig,omitempty" xml:"EventBridgeConfig,omitempty" type:"Struct"`
	// The configuration items of the backend service whose type is Function Compute.
	FunctionComputeConfig *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig `json:"FunctionComputeConfig,omitempty" xml:"FunctionComputeConfig,omitempty" type:"Struct"`
	// Indicates whether the mock mode is enabled. Valid values:
	//
	// *   TRUE
	// *   FALSE
	Mock *string `json:"Mock,omitempty" xml:"Mock,omitempty"`
	// The mock headers.
	MockHeaders *DescribeApiHistoryResponseBodyServiceConfigMockHeaders `json:"MockHeaders,omitempty" xml:"MockHeaders,omitempty" type:"Struct"`
	// The result that is returned if the Mock parameter is set to TRUE.
	MockResult *string `json:"MockResult,omitempty" xml:"MockResult,omitempty"`
	// The status code that is returned for service mocking.
	MockStatusCode *int32 `json:"MockStatusCode,omitempty" xml:"MockStatusCode,omitempty"`
	// The configuration items of the backend service whose type is Object Storage Service (OSS).
	OssConfig *DescribeApiHistoryResponseBodyServiceConfigOssConfig `json:"OssConfig,omitempty" xml:"OssConfig,omitempty" type:"Struct"`
	// The URL that is used to call the backend service.
	ServiceAddress *string `json:"ServiceAddress,omitempty" xml:"ServiceAddress,omitempty"`
	// The HTTP request method that is used if the ServiceProtocol parameter is set to HTTP. Valid values: PUT, GET, POST, DELETE, PATCH, HEAD, OPTIONS, and ANY.
	ServiceHttpMethod *string `json:"ServiceHttpMethod,omitempty" xml:"ServiceHttpMethod,omitempty"`
	// The path that is used when the backend service is called.
	ServicePath *string `json:"ServicePath,omitempty" xml:"ServicePath,omitempty"`
	// The protocol of the backend service. Only HTTP, HTTPS, and Function Compute are supported.
	ServiceProtocol *string `json:"ServiceProtocol,omitempty" xml:"ServiceProtocol,omitempty"`
	// The timeout period of the backend service. Unit: milliseconds.
	ServiceTimeout *int32 `json:"ServiceTimeout,omitempty" xml:"ServiceTimeout,omitempty"`
	// Indicates whether the VPC channel is enabled. Valid values:
	//
	// *   TRUE
	// *   FALSE
	//
	// Before you can enable the VPC channel, make sure that a VPC authorization is added.
	ServiceVpcEnable *string `json:"ServiceVpcEnable,omitempty" xml:"ServiceVpcEnable,omitempty"`
	// The configuration items of the VPC channel.
	VpcConfig *DescribeApiHistoryResponseBodyServiceConfigVpcConfig `json:"VpcConfig,omitempty" xml:"VpcConfig,omitempty" type:"Struct"`
	// The ID of the virtual private cloud (VPC).
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeApiHistoryResponseBodyServiceConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetContentTypeCatagory(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.ContentTypeCatagory = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetContentTypeValue(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.ContentTypeValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetEventBridgeConfig(v *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig) *DescribeApiHistoryResponseBodyServiceConfig {
	s.EventBridgeConfig = v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetFunctionComputeConfig(v *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) *DescribeApiHistoryResponseBodyServiceConfig {
	s.FunctionComputeConfig = v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetMock(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.Mock = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetMockHeaders(v *DescribeApiHistoryResponseBodyServiceConfigMockHeaders) *DescribeApiHistoryResponseBodyServiceConfig {
	s.MockHeaders = v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetMockResult(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.MockResult = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetMockStatusCode(v int32) *DescribeApiHistoryResponseBodyServiceConfig {
	s.MockStatusCode = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetOssConfig(v *DescribeApiHistoryResponseBodyServiceConfigOssConfig) *DescribeApiHistoryResponseBodyServiceConfig {
	s.OssConfig = v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetServiceAddress(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.ServiceAddress = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetServiceHttpMethod(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.ServiceHttpMethod = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetServicePath(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.ServicePath = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetServiceProtocol(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.ServiceProtocol = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetServiceTimeout(v int32) *DescribeApiHistoryResponseBodyServiceConfig {
	s.ServiceTimeout = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetServiceVpcEnable(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.ServiceVpcEnable = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetVpcConfig(v *DescribeApiHistoryResponseBodyServiceConfigVpcConfig) *DescribeApiHistoryResponseBodyServiceConfig {
	s.VpcConfig = v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfig) SetVpcId(v string) *DescribeApiHistoryResponseBodyServiceConfig {
	s.VpcId = &v
	return s
}

type DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig struct {
	// The ID of the region where EventBridge is deployed.
	EventBridgeRegionId *string `json:"EventBridgeRegionId,omitempty" xml:"EventBridgeRegionId,omitempty"`
	// The event bus.
	EventBus *string `json:"EventBus,omitempty" xml:"EventBus,omitempty"`
	// The event source.
	EventSource *string `json:"EventSource,omitempty" xml:"EventSource,omitempty"`
	// The ARN of the RAM role that is assigned to EventBridge.
	RoleArn *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig) SetEventBridgeRegionId(v string) *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig {
	s.EventBridgeRegionId = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig) SetEventBus(v string) *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig {
	s.EventBus = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig) SetEventSource(v string) *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig {
	s.EventSource = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig) SetRoleArn(v string) *DescribeApiHistoryResponseBodyServiceConfigEventBridgeConfig {
	s.RoleArn = &v
	return s
}

type DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig struct {
	// The ContentType header that is used if the ServiceProtocol parameter is set to HTTP. Valid values:
	//
	// *   **DEFAULT**: the default header in API Gateway
	// *   **CUSTOM**: a custom header
	// *   **CLIENT**: the ContentType header of the client
	ContentTypeCatagory *string `json:"ContentTypeCatagory,omitempty" xml:"ContentTypeCatagory,omitempty"`
	// The value of the ContentType header if the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.
	ContentTypeValue *string `json:"ContentTypeValue,omitempty" xml:"ContentTypeValue,omitempty"`
	// The root path of the service in Function Compute.
	FcBaseUrl *string `json:"FcBaseUrl,omitempty" xml:"FcBaseUrl,omitempty"`
	// The type of the service in Function Compute.
	FcType *string `json:"FcType,omitempty" xml:"FcType,omitempty"`
	// The function name that is defined in Function Compute.
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	// The request method.
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// Indicates whether the backend receives only the service path.
	OnlyBusinessPath *bool `json:"OnlyBusinessPath,omitempty" xml:"OnlyBusinessPath,omitempty"`
	// The path of the API request.
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The alias of the function.
	Qualifier *string `json:"Qualifier,omitempty" xml:"Qualifier,omitempty"`
	// The ID of the region.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the RAM role that is assumed by API Gateway to access Function Compute.
	RoleArn *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	// The service name that is defined in Function Compute.
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetContentTypeCatagory(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.ContentTypeCatagory = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetContentTypeValue(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.ContentTypeValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetFcBaseUrl(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.FcBaseUrl = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetFcType(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.FcType = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetFunctionName(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.FunctionName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetMethod(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.Method = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetOnlyBusinessPath(v bool) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.OnlyBusinessPath = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetPath(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.Path = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetQualifier(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.Qualifier = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetRegionId(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.RegionId = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetRoleArn(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.RoleArn = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig) SetServiceName(v string) *DescribeApiHistoryResponseBodyServiceConfigFunctionComputeConfig {
	s.ServiceName = &v
	return s
}

type DescribeApiHistoryResponseBodyServiceConfigMockHeaders struct {
	MockHeader []*DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader `json:"MockHeader,omitempty" xml:"MockHeader,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodyServiceConfigMockHeaders) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceConfigMockHeaders) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceConfigMockHeaders) SetMockHeader(v []*DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader) *DescribeApiHistoryResponseBodyServiceConfigMockHeaders {
	s.MockHeader = v
	return s
}

type DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader struct {
	// The name of the HTTP header
	HeaderName *string `json:"HeaderName,omitempty" xml:"HeaderName,omitempty"`
	// The value of the HTTP header.
	HeaderValue *string `json:"HeaderValue,omitempty" xml:"HeaderValue,omitempty"`
}

func (s DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader) SetHeaderName(v string) *DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader {
	s.HeaderName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader) SetHeaderValue(v string) *DescribeApiHistoryResponseBodyServiceConfigMockHeadersMockHeader {
	s.HeaderValue = &v
	return s
}

type DescribeApiHistoryResponseBodyServiceConfigOssConfig struct {
	Action *string `json:"Action,omitempty" xml:"Action,omitempty"`
	// The name of the OSS bucket.
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	Key        *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The ID of the region where OSS is deployed.
	OssRegionId *string `json:"OssRegionId,omitempty" xml:"OssRegionId,omitempty"`
}

func (s DescribeApiHistoryResponseBodyServiceConfigOssConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceConfigOssConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceConfigOssConfig) SetAction(v string) *DescribeApiHistoryResponseBodyServiceConfigOssConfig {
	s.Action = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigOssConfig) SetBucketName(v string) *DescribeApiHistoryResponseBodyServiceConfigOssConfig {
	s.BucketName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigOssConfig) SetKey(v string) *DescribeApiHistoryResponseBodyServiceConfigOssConfig {
	s.Key = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigOssConfig) SetOssRegionId(v string) *DescribeApiHistoryResponseBodyServiceConfigOssConfig {
	s.OssRegionId = &v
	return s
}

type DescribeApiHistoryResponseBodyServiceConfigVpcConfig struct {
	// The ID of the Elastic Compute Service (ECS) or Server Load Balancer (SLB) instance in the VPC.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the VPC.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The port number that corresponds to the instance.
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the VPC.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The protocol of the VPC.
	VpcScheme *string `json:"VpcScheme,omitempty" xml:"VpcScheme,omitempty"`
}

func (s DescribeApiHistoryResponseBodyServiceConfigVpcConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceConfigVpcConfig) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceConfigVpcConfig) SetInstanceId(v string) *DescribeApiHistoryResponseBodyServiceConfigVpcConfig {
	s.InstanceId = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigVpcConfig) SetName(v string) *DescribeApiHistoryResponseBodyServiceConfigVpcConfig {
	s.Name = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigVpcConfig) SetPort(v int32) *DescribeApiHistoryResponseBodyServiceConfigVpcConfig {
	s.Port = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigVpcConfig) SetVpcId(v string) *DescribeApiHistoryResponseBodyServiceConfigVpcConfig {
	s.VpcId = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceConfigVpcConfig) SetVpcScheme(v string) *DescribeApiHistoryResponseBodyServiceConfigVpcConfig {
	s.VpcScheme = &v
	return s
}

type DescribeApiHistoryResponseBodyServiceParameters struct {
	ServiceParameter []*DescribeApiHistoryResponseBodyServiceParametersServiceParameter `json:"ServiceParameter,omitempty" xml:"ServiceParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodyServiceParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceParameters) SetServiceParameter(v []*DescribeApiHistoryResponseBodyServiceParametersServiceParameter) *DescribeApiHistoryResponseBodyServiceParameters {
	s.ServiceParameter = v
	return s
}

type DescribeApiHistoryResponseBodyServiceParametersServiceParameter struct {
	// The location of the parameter. Valid values: BODY, HEAD, QUERY, and PATH.
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The data type of the parameter. Valid values: STRING, NUMBER, and BOOLEAN.
	ParameterType *string `json:"ParameterType,omitempty" xml:"ParameterType,omitempty"`
	// The name of the backend parameter.
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiHistoryResponseBodyServiceParametersServiceParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceParametersServiceParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceParametersServiceParameter) SetLocation(v string) *DescribeApiHistoryResponseBodyServiceParametersServiceParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceParametersServiceParameter) SetParameterType(v string) *DescribeApiHistoryResponseBodyServiceParametersServiceParameter {
	s.ParameterType = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceParametersServiceParameter) SetServiceParameterName(v string) *DescribeApiHistoryResponseBodyServiceParametersServiceParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiHistoryResponseBodyServiceParametersMap struct {
	ServiceParameterMap []*DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap `json:"ServiceParameterMap,omitempty" xml:"ServiceParameterMap,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodyServiceParametersMap) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceParametersMap) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceParametersMap) SetServiceParameterMap(v []*DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap) *DescribeApiHistoryResponseBodyServiceParametersMap {
	s.ServiceParameterMap = v
	return s
}

type DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap struct {
	// The name of the frontend parameter. The name must be included in RequestParametersObject and match ApiParameterName in RequestParameters.
	RequestParameterName *string `json:"RequestParameterName,omitempty" xml:"RequestParameterName,omitempty"`
	// The name of the backend parameter.
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap) SetRequestParameterName(v string) *DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap {
	s.RequestParameterName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap) SetServiceParameterName(v string) *DescribeApiHistoryResponseBodyServiceParametersMapServiceParameterMap {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiHistoryResponseBodySystemParameters struct {
	SystemParameter []*DescribeApiHistoryResponseBodySystemParametersSystemParameter `json:"SystemParameter,omitempty" xml:"SystemParameter,omitempty" type:"Repeated"`
}

func (s DescribeApiHistoryResponseBodySystemParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodySystemParameters) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodySystemParameters) SetSystemParameter(v []*DescribeApiHistoryResponseBodySystemParametersSystemParameter) *DescribeApiHistoryResponseBodySystemParameters {
	s.SystemParameter = v
	return s
}

type DescribeApiHistoryResponseBodySystemParametersSystemParameter struct {
	// The sample value of the parameter.
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The description of the parameter.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The location of the parameter. Valid values: BODY, HEAD, QUERY, and PATH.
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the parameter. Valid values: CaClientIp, CaDomain, CaRequestHandleTime, CaAppId, CaRequestId, CaHttpSchema, and CaProxy.
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The name of the backend parameter that corresponds to the system parameter.
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeApiHistoryResponseBodySystemParametersSystemParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponseBodySystemParametersSystemParameter) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponseBodySystemParametersSystemParameter) SetDemoValue(v string) *DescribeApiHistoryResponseBodySystemParametersSystemParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeApiHistoryResponseBodySystemParametersSystemParameter) SetDescription(v string) *DescribeApiHistoryResponseBodySystemParametersSystemParameter {
	s.Description = &v
	return s
}

func (s *DescribeApiHistoryResponseBodySystemParametersSystemParameter) SetLocation(v string) *DescribeApiHistoryResponseBodySystemParametersSystemParameter {
	s.Location = &v
	return s
}

func (s *DescribeApiHistoryResponseBodySystemParametersSystemParameter) SetParameterName(v string) *DescribeApiHistoryResponseBodySystemParametersSystemParameter {
	s.ParameterName = &v
	return s
}

func (s *DescribeApiHistoryResponseBodySystemParametersSystemParameter) SetServiceParameterName(v string) *DescribeApiHistoryResponseBodySystemParametersSystemParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeApiHistoryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApiHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApiHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiHistoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiHistoryResponse) SetHeaders(v map[string]*string) *DescribeApiHistoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiHistoryResponse) SetStatusCode(v int32) *DescribeApiHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiHistoryResponse) SetBody(v *DescribeApiHistoryResponseBody) *DescribeApiHistoryResponse {
	s.Body = v
	return s
}

type DescribeApiIpControlsRequest struct {
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The ID of the request.
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The IDs of APIs. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiIpControlsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiIpControlsRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiIpControlsRequest) SetApiIds(v string) *DescribeApiIpControlsRequest {
	s.ApiIds = &v
	return s
}

func (s *DescribeApiIpControlsRequest) SetGroupId(v string) *DescribeApiIpControlsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiIpControlsRequest) SetPageNumber(v int32) *DescribeApiIpControlsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiIpControlsRequest) SetPageSize(v int32) *DescribeApiIpControlsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApiIpControlsRequest) SetSecurityToken(v string) *DescribeApiIpControlsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiIpControlsRequest) SetStageName(v string) *DescribeApiIpControlsRequest {
	s.StageName = &v
	return s
}

type DescribeApiIpControlsResponseBody struct {
	// The ID of the API.
	ApiIpControls *DescribeApiIpControlsResponseBodyApiIpControls `json:"ApiIpControls,omitempty" xml:"ApiIpControls,omitempty" type:"Struct"`
	// The number of entries returned per page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The information about the ACLs. The information is an array of ApiIpControlItem data.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The time of binding.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApiIpControlsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiIpControlsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiIpControlsResponseBody) SetApiIpControls(v *DescribeApiIpControlsResponseBodyApiIpControls) *DescribeApiIpControlsResponseBody {
	s.ApiIpControls = v
	return s
}

func (s *DescribeApiIpControlsResponseBody) SetPageNumber(v int32) *DescribeApiIpControlsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiIpControlsResponseBody) SetPageSize(v int32) *DescribeApiIpControlsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApiIpControlsResponseBody) SetRequestId(v string) *DescribeApiIpControlsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiIpControlsResponseBody) SetTotalCount(v int32) *DescribeApiIpControlsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApiIpControlsResponseBodyApiIpControls struct {
	ApiIpControlItem []*DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem `json:"ApiIpControlItem,omitempty" xml:"ApiIpControlItem,omitempty" type:"Repeated"`
}

func (s DescribeApiIpControlsResponseBodyApiIpControls) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiIpControlsResponseBodyApiIpControls) GoString() string {
	return s.String()
}

func (s *DescribeApiIpControlsResponseBodyApiIpControls) SetApiIpControlItem(v []*DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem) *DescribeApiIpControlsResponseBodyApiIpControls {
	s.ApiIpControlItem = v
	return s
}

type DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem struct {
	// The name of the ACL.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// Queries the access control lists (ACLs) that are bound to all the APIs in an API group in a specified environment.
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The ID of the ACL.
	BoundTime *string `json:"BoundTime,omitempty" xml:"BoundTime,omitempty"`
	// The name of the API.
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// *   This operation is intended for API callers.
	// *   If an optional parameter is not specified, all results are returned on separate pages.
	//
	// ·
	IpControlName *string `json:"IpControlName,omitempty" xml:"IpControlName,omitempty"`
}

func (s DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem) GoString() string {
	return s.String()
}

func (s *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem) SetApiId(v string) *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem {
	s.ApiId = &v
	return s
}

func (s *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem) SetApiName(v string) *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem {
	s.ApiName = &v
	return s
}

func (s *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem) SetBoundTime(v string) *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem {
	s.BoundTime = &v
	return s
}

func (s *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem) SetIpControlId(v string) *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem {
	s.IpControlId = &v
	return s
}

func (s *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem) SetIpControlName(v string) *DescribeApiIpControlsResponseBodyApiIpControlsApiIpControlItem {
	s.IpControlName = &v
	return s
}

type DescribeApiIpControlsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApiIpControlsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApiIpControlsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiIpControlsResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiIpControlsResponse) SetHeaders(v map[string]*string) *DescribeApiIpControlsResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiIpControlsResponse) SetStatusCode(v int32) *DescribeApiIpControlsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiIpControlsResponse) SetBody(v *DescribeApiIpControlsResponseBody) *DescribeApiIpControlsResponse {
	s.Body = v
	return s
}

type DescribeApiLatencyDataRequest struct {
	ApiId         *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageName     *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeApiLatencyDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiLatencyDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiLatencyDataRequest) SetApiId(v string) *DescribeApiLatencyDataRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiLatencyDataRequest) SetEndTime(v string) *DescribeApiLatencyDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeApiLatencyDataRequest) SetGroupId(v string) *DescribeApiLatencyDataRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiLatencyDataRequest) SetSecurityToken(v string) *DescribeApiLatencyDataRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiLatencyDataRequest) SetStageName(v string) *DescribeApiLatencyDataRequest {
	s.StageName = &v
	return s
}

func (s *DescribeApiLatencyDataRequest) SetStartTime(v string) *DescribeApiLatencyDataRequest {
	s.StartTime = &v
	return s
}

type DescribeApiLatencyDataResponseBody struct {
	CallLatencys *DescribeApiLatencyDataResponseBodyCallLatencys `json:"CallLatencys,omitempty" xml:"CallLatencys,omitempty" type:"Struct"`
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeApiLatencyDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiLatencyDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiLatencyDataResponseBody) SetCallLatencys(v *DescribeApiLatencyDataResponseBodyCallLatencys) *DescribeApiLatencyDataResponseBody {
	s.CallLatencys = v
	return s
}

func (s *DescribeApiLatencyDataResponseBody) SetRequestId(v string) *DescribeApiLatencyDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeApiLatencyDataResponseBodyCallLatencys struct {
	MonitorItem []*DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeApiLatencyDataResponseBodyCallLatencys) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiLatencyDataResponseBodyCallLatencys) GoString() string {
	return s.String()
}

func (s *DescribeApiLatencyDataResponseBodyCallLatencys) SetMonitorItem(v []*DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem) *DescribeApiLatencyDataResponseBodyCallLatencys {
	s.MonitorItem = v
	return s
}

type DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem struct {
	ItemTime  *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem) SetItemTime(v string) *DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem) SetItemValue(v string) *DescribeApiLatencyDataResponseBodyCallLatencysMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeApiLatencyDataResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApiLatencyDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApiLatencyDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiLatencyDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiLatencyDataResponse) SetHeaders(v map[string]*string) *DescribeApiLatencyDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiLatencyDataResponse) SetStatusCode(v int32) *DescribeApiLatencyDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiLatencyDataResponse) SetBody(v *DescribeApiLatencyDataResponseBody) *DescribeApiLatencyDataResponse {
	s.Body = v
	return s
}

type DescribeApiMarketAttributesRequest struct {
	ApiId         *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeApiMarketAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiMarketAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiMarketAttributesRequest) SetApiId(v string) *DescribeApiMarketAttributesRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiMarketAttributesRequest) SetGroupId(v string) *DescribeApiMarketAttributesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiMarketAttributesRequest) SetSecurityToken(v string) *DescribeApiMarketAttributesRequest {
	s.SecurityToken = &v
	return s
}

type DescribeApiMarketAttributesResponseBody struct {
	ApiId              *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	MarketChargingMode *string `json:"MarketChargingMode,omitempty" xml:"MarketChargingMode,omitempty"`
	NeedCharging       *string `json:"NeedCharging,omitempty" xml:"NeedCharging,omitempty"`
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeApiMarketAttributesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiMarketAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiMarketAttributesResponseBody) SetApiId(v string) *DescribeApiMarketAttributesResponseBody {
	s.ApiId = &v
	return s
}

func (s *DescribeApiMarketAttributesResponseBody) SetMarketChargingMode(v string) *DescribeApiMarketAttributesResponseBody {
	s.MarketChargingMode = &v
	return s
}

func (s *DescribeApiMarketAttributesResponseBody) SetNeedCharging(v string) *DescribeApiMarketAttributesResponseBody {
	s.NeedCharging = &v
	return s
}

func (s *DescribeApiMarketAttributesResponseBody) SetRequestId(v string) *DescribeApiMarketAttributesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeApiMarketAttributesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApiMarketAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApiMarketAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiMarketAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiMarketAttributesResponse) SetHeaders(v map[string]*string) *DescribeApiMarketAttributesResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiMarketAttributesResponse) SetStatusCode(v int32) *DescribeApiMarketAttributesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiMarketAttributesResponse) SetBody(v *DescribeApiMarketAttributesResponseBody) *DescribeApiMarketAttributesResponse {
	s.Body = v
	return s
}

type DescribeApiQpsDataRequest struct {
	ApiId         *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageName     *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeApiQpsDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiQpsDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiQpsDataRequest) SetApiId(v string) *DescribeApiQpsDataRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiQpsDataRequest) SetEndTime(v string) *DescribeApiQpsDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeApiQpsDataRequest) SetGroupId(v string) *DescribeApiQpsDataRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiQpsDataRequest) SetSecurityToken(v string) *DescribeApiQpsDataRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiQpsDataRequest) SetStageName(v string) *DescribeApiQpsDataRequest {
	s.StageName = &v
	return s
}

func (s *DescribeApiQpsDataRequest) SetStartTime(v string) *DescribeApiQpsDataRequest {
	s.StartTime = &v
	return s
}

type DescribeApiQpsDataResponseBody struct {
	CallFails     *DescribeApiQpsDataResponseBodyCallFails     `json:"CallFails,omitempty" xml:"CallFails,omitempty" type:"Struct"`
	CallSuccesses *DescribeApiQpsDataResponseBodyCallSuccesses `json:"CallSuccesses,omitempty" xml:"CallSuccesses,omitempty" type:"Struct"`
	RequestId     *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeApiQpsDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiQpsDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiQpsDataResponseBody) SetCallFails(v *DescribeApiQpsDataResponseBodyCallFails) *DescribeApiQpsDataResponseBody {
	s.CallFails = v
	return s
}

func (s *DescribeApiQpsDataResponseBody) SetCallSuccesses(v *DescribeApiQpsDataResponseBodyCallSuccesses) *DescribeApiQpsDataResponseBody {
	s.CallSuccesses = v
	return s
}

func (s *DescribeApiQpsDataResponseBody) SetRequestId(v string) *DescribeApiQpsDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeApiQpsDataResponseBodyCallFails struct {
	MonitorItem []*DescribeApiQpsDataResponseBodyCallFailsMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeApiQpsDataResponseBodyCallFails) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiQpsDataResponseBodyCallFails) GoString() string {
	return s.String()
}

func (s *DescribeApiQpsDataResponseBodyCallFails) SetMonitorItem(v []*DescribeApiQpsDataResponseBodyCallFailsMonitorItem) *DescribeApiQpsDataResponseBodyCallFails {
	s.MonitorItem = v
	return s
}

type DescribeApiQpsDataResponseBodyCallFailsMonitorItem struct {
	ItemTime  *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeApiQpsDataResponseBodyCallFailsMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiQpsDataResponseBodyCallFailsMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeApiQpsDataResponseBodyCallFailsMonitorItem) SetItemTime(v string) *DescribeApiQpsDataResponseBodyCallFailsMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeApiQpsDataResponseBodyCallFailsMonitorItem) SetItemValue(v string) *DescribeApiQpsDataResponseBodyCallFailsMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeApiQpsDataResponseBodyCallSuccesses struct {
	MonitorItem []*DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeApiQpsDataResponseBodyCallSuccesses) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiQpsDataResponseBodyCallSuccesses) GoString() string {
	return s.String()
}

func (s *DescribeApiQpsDataResponseBodyCallSuccesses) SetMonitorItem(v []*DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem) *DescribeApiQpsDataResponseBodyCallSuccesses {
	s.MonitorItem = v
	return s
}

type DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem struct {
	ItemTime  *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem) SetItemTime(v string) *DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem) SetItemValue(v string) *DescribeApiQpsDataResponseBodyCallSuccessesMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeApiQpsDataResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApiQpsDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApiQpsDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiQpsDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiQpsDataResponse) SetHeaders(v map[string]*string) *DescribeApiQpsDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiQpsDataResponse) SetStatusCode(v int32) *DescribeApiQpsDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiQpsDataResponse) SetBody(v *DescribeApiQpsDataResponseBody) *DescribeApiQpsDataResponse {
	s.Body = v
	return s
}

type DescribeApiSignaturesRequest struct {
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The ID of the request.
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The IDs of the APIs that you want to query. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiSignaturesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiSignaturesRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiSignaturesRequest) SetApiIds(v string) *DescribeApiSignaturesRequest {
	s.ApiIds = &v
	return s
}

func (s *DescribeApiSignaturesRequest) SetGroupId(v string) *DescribeApiSignaturesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiSignaturesRequest) SetPageNumber(v int32) *DescribeApiSignaturesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiSignaturesRequest) SetPageSize(v int32) *DescribeApiSignaturesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApiSignaturesRequest) SetSecurityToken(v string) *DescribeApiSignaturesRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiSignaturesRequest) SetStageName(v string) *DescribeApiSignaturesRequest {
	s.StageName = &v
	return s
}

type DescribeApiSignaturesResponseBody struct {
	// The ID of the API.
	ApiSignatures *DescribeApiSignaturesResponseBodyApiSignatures `json:"ApiSignatures,omitempty" xml:"ApiSignatures,omitempty" type:"Struct"`
	// The number of entries returned per page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The returned signature key information. It is an array consisting of ApiSignatureItem data.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The time when the backend signature key was bound.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApiSignaturesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiSignaturesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiSignaturesResponseBody) SetApiSignatures(v *DescribeApiSignaturesResponseBodyApiSignatures) *DescribeApiSignaturesResponseBody {
	s.ApiSignatures = v
	return s
}

func (s *DescribeApiSignaturesResponseBody) SetPageNumber(v int32) *DescribeApiSignaturesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiSignaturesResponseBody) SetPageSize(v int32) *DescribeApiSignaturesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApiSignaturesResponseBody) SetRequestId(v string) *DescribeApiSignaturesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiSignaturesResponseBody) SetTotalCount(v int32) *DescribeApiSignaturesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApiSignaturesResponseBodyApiSignatures struct {
	ApiSignatureItem []*DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem `json:"ApiSignatureItem,omitempty" xml:"ApiSignatureItem,omitempty" type:"Repeated"`
}

func (s DescribeApiSignaturesResponseBodyApiSignatures) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiSignaturesResponseBodyApiSignatures) GoString() string {
	return s.String()
}

func (s *DescribeApiSignaturesResponseBodyApiSignatures) SetApiSignatureItem(v []*DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem) *DescribeApiSignaturesResponseBodyApiSignatures {
	s.ApiSignatureItem = v
	return s
}

type DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem struct {
	// The name of the backend signature key.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// Queries the backend signature keys that are bound to the APIs of a specified API group in a specified environment.
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The ID of the backend signature key.
	BoundTime *string `json:"BoundTime,omitempty" xml:"BoundTime,omitempty"`
	// The name of the API.
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// *   This API is intended for API providers.
	// *   The ApiIds parameter is optional. If this parameter is not specified, all results in the specified environment of an API group are returned.
	SignatureName *string `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
}

func (s DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem) GoString() string {
	return s.String()
}

func (s *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem) SetApiId(v string) *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem {
	s.ApiId = &v
	return s
}

func (s *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem) SetApiName(v string) *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem {
	s.ApiName = &v
	return s
}

func (s *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem) SetBoundTime(v string) *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem {
	s.BoundTime = &v
	return s
}

func (s *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem) SetSignatureId(v string) *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem {
	s.SignatureId = &v
	return s
}

func (s *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem) SetSignatureName(v string) *DescribeApiSignaturesResponseBodyApiSignaturesApiSignatureItem {
	s.SignatureName = &v
	return s
}

type DescribeApiSignaturesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApiSignaturesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApiSignaturesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiSignaturesResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiSignaturesResponse) SetHeaders(v map[string]*string) *DescribeApiSignaturesResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiSignaturesResponse) SetStatusCode(v int32) *DescribeApiSignaturesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiSignaturesResponse) SetBody(v *DescribeApiSignaturesResponseBody) *DescribeApiSignaturesResponse {
	s.Body = v
	return s
}

type DescribeApiTrafficControlsRequest struct {
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The ID of the request.
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The IDs of APIs that you want to query. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApiTrafficControlsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficControlsRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficControlsRequest) SetApiIds(v string) *DescribeApiTrafficControlsRequest {
	s.ApiIds = &v
	return s
}

func (s *DescribeApiTrafficControlsRequest) SetGroupId(v string) *DescribeApiTrafficControlsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiTrafficControlsRequest) SetPageNumber(v int32) *DescribeApiTrafficControlsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiTrafficControlsRequest) SetPageSize(v int32) *DescribeApiTrafficControlsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApiTrafficControlsRequest) SetSecurityToken(v string) *DescribeApiTrafficControlsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiTrafficControlsRequest) SetStageName(v string) *DescribeApiTrafficControlsRequest {
	s.StageName = &v
	return s
}

type DescribeApiTrafficControlsResponseBody struct {
	// The ID of the API.
	ApiTrafficControls *DescribeApiTrafficControlsResponseBodyApiTrafficControls `json:"ApiTrafficControls,omitempty" xml:"ApiTrafficControls,omitempty" type:"Struct"`
	// The number of entries returned per page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The returned throttling policy information. It is an array consisting of ApiTrafficControlItem data.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The binding time of the throttling policy.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApiTrafficControlsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficControlsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficControlsResponseBody) SetApiTrafficControls(v *DescribeApiTrafficControlsResponseBodyApiTrafficControls) *DescribeApiTrafficControlsResponseBody {
	s.ApiTrafficControls = v
	return s
}

func (s *DescribeApiTrafficControlsResponseBody) SetPageNumber(v int32) *DescribeApiTrafficControlsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApiTrafficControlsResponseBody) SetPageSize(v int32) *DescribeApiTrafficControlsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApiTrafficControlsResponseBody) SetRequestId(v string) *DescribeApiTrafficControlsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApiTrafficControlsResponseBody) SetTotalCount(v int32) *DescribeApiTrafficControlsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApiTrafficControlsResponseBodyApiTrafficControls struct {
	ApiTrafficControlItem []*DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem `json:"ApiTrafficControlItem,omitempty" xml:"ApiTrafficControlItem,omitempty" type:"Repeated"`
}

func (s DescribeApiTrafficControlsResponseBodyApiTrafficControls) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficControlsResponseBodyApiTrafficControls) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficControlsResponseBodyApiTrafficControls) SetApiTrafficControlItem(v []*DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem) *DescribeApiTrafficControlsResponseBodyApiTrafficControls {
	s.ApiTrafficControlItem = v
	return s
}

type DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem struct {
	// The name of the throttling policy.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// Queries the throttling policies bound to all members of an API group in a specified environment.
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The ID of the throttling policy.
	BoundTime *string `json:"BoundTime,omitempty" xml:"BoundTime,omitempty"`
	// API operation
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
	// *   This API is intended for API providers.
	// *   The ApiIds parameter is optional. If this parameter is not specified, all results in the specified environment of an API group are returned.
	TrafficControlName *string `json:"TrafficControlName,omitempty" xml:"TrafficControlName,omitempty"`
}

func (s DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem) SetApiId(v string) *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem {
	s.ApiId = &v
	return s
}

func (s *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem) SetApiName(v string) *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem {
	s.ApiName = &v
	return s
}

func (s *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem) SetBoundTime(v string) *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem {
	s.BoundTime = &v
	return s
}

func (s *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem) SetTrafficControlId(v string) *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem {
	s.TrafficControlId = &v
	return s
}

func (s *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem) SetTrafficControlName(v string) *DescribeApiTrafficControlsResponseBodyApiTrafficControlsApiTrafficControlItem {
	s.TrafficControlName = &v
	return s
}

type DescribeApiTrafficControlsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApiTrafficControlsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApiTrafficControlsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficControlsResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficControlsResponse) SetHeaders(v map[string]*string) *DescribeApiTrafficControlsResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiTrafficControlsResponse) SetStatusCode(v int32) *DescribeApiTrafficControlsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiTrafficControlsResponse) SetBody(v *DescribeApiTrafficControlsResponseBody) *DescribeApiTrafficControlsResponse {
	s.Body = v
	return s
}

type DescribeApiTrafficDataRequest struct {
	ApiId         *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageName     *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeApiTrafficDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficDataRequest) SetApiId(v string) *DescribeApiTrafficDataRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApiTrafficDataRequest) SetEndTime(v string) *DescribeApiTrafficDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeApiTrafficDataRequest) SetGroupId(v string) *DescribeApiTrafficDataRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApiTrafficDataRequest) SetSecurityToken(v string) *DescribeApiTrafficDataRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApiTrafficDataRequest) SetStageName(v string) *DescribeApiTrafficDataRequest {
	s.StageName = &v
	return s
}

func (s *DescribeApiTrafficDataRequest) SetStartTime(v string) *DescribeApiTrafficDataRequest {
	s.StartTime = &v
	return s
}

type DescribeApiTrafficDataResponseBody struct {
	CallDownloads *DescribeApiTrafficDataResponseBodyCallDownloads `json:"CallDownloads,omitempty" xml:"CallDownloads,omitempty" type:"Struct"`
	CallUploads   *DescribeApiTrafficDataResponseBodyCallUploads   `json:"CallUploads,omitempty" xml:"CallUploads,omitempty" type:"Struct"`
	RequestId     *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeApiTrafficDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficDataResponseBody) SetCallDownloads(v *DescribeApiTrafficDataResponseBodyCallDownloads) *DescribeApiTrafficDataResponseBody {
	s.CallDownloads = v
	return s
}

func (s *DescribeApiTrafficDataResponseBody) SetCallUploads(v *DescribeApiTrafficDataResponseBodyCallUploads) *DescribeApiTrafficDataResponseBody {
	s.CallUploads = v
	return s
}

func (s *DescribeApiTrafficDataResponseBody) SetRequestId(v string) *DescribeApiTrafficDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeApiTrafficDataResponseBodyCallDownloads struct {
	MonitorItem []*DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeApiTrafficDataResponseBodyCallDownloads) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficDataResponseBodyCallDownloads) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficDataResponseBodyCallDownloads) SetMonitorItem(v []*DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem) *DescribeApiTrafficDataResponseBodyCallDownloads {
	s.MonitorItem = v
	return s
}

type DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem struct {
	ItemTime  *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem) SetItemTime(v string) *DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem) SetItemValue(v string) *DescribeApiTrafficDataResponseBodyCallDownloadsMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeApiTrafficDataResponseBodyCallUploads struct {
	MonitorItem []*DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeApiTrafficDataResponseBodyCallUploads) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficDataResponseBodyCallUploads) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficDataResponseBodyCallUploads) SetMonitorItem(v []*DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem) *DescribeApiTrafficDataResponseBodyCallUploads {
	s.MonitorItem = v
	return s
}

type DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem struct {
	ItemTime  *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem) SetItemTime(v string) *DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem) SetItemValue(v string) *DescribeApiTrafficDataResponseBodyCallUploadsMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeApiTrafficDataResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApiTrafficDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApiTrafficDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApiTrafficDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeApiTrafficDataResponse) SetHeaders(v map[string]*string) *DescribeApiTrafficDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeApiTrafficDataResponse) SetStatusCode(v int32) *DescribeApiTrafficDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApiTrafficDataResponse) SetBody(v *DescribeApiTrafficDataResponseBody) *DescribeApiTrafficDataResponse {
	s.Body = v
	return s
}

type DescribeApisRequest struct {
	// The API ID.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The HTTP method of the API request.
	ApiMethod *string `json:"ApiMethod,omitempty" xml:"ApiMethod,omitempty"`
	// The API name. The name is used for fuzzy match.
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The request path of the API.
	ApiPath *string `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	// The category ID.
	CatalogId *string `json:"CatalogId,omitempty" xml:"CatalogId,omitempty"`
	// Specifies whether to enable tag verification.
	EnableTagAuth *bool `json:"EnableTagAuth,omitempty" xml:"EnableTagAuth,omitempty"`
	// The API group ID.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Default value: 10.
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageName     *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The tags of objects that match the rule.
	Tag []*DescribeApisRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// Specifies whether to filter unpublished APIs.
	UnDeployed *bool `json:"UnDeployed,omitempty" xml:"UnDeployed,omitempty"`
	// Specifies whether the API is public. Valid values:
	//
	// *   **PUBLIC**: The API is public. If you publish the definition of a public API to the production environment, the definition is displayed on the APIs page for all users.
	// *   **PRIVATE**: The API is private. If you publish an API group that contains a private API in Alibaba Cloud Marketplace, the API is not displayed in Alibaba Cloud Marketplace.
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribeApisRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisRequest) GoString() string {
	return s.String()
}

func (s *DescribeApisRequest) SetApiId(v string) *DescribeApisRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeApisRequest) SetApiMethod(v string) *DescribeApisRequest {
	s.ApiMethod = &v
	return s
}

func (s *DescribeApisRequest) SetApiName(v string) *DescribeApisRequest {
	s.ApiName = &v
	return s
}

func (s *DescribeApisRequest) SetApiPath(v string) *DescribeApisRequest {
	s.ApiPath = &v
	return s
}

func (s *DescribeApisRequest) SetCatalogId(v string) *DescribeApisRequest {
	s.CatalogId = &v
	return s
}

func (s *DescribeApisRequest) SetEnableTagAuth(v bool) *DescribeApisRequest {
	s.EnableTagAuth = &v
	return s
}

func (s *DescribeApisRequest) SetGroupId(v string) *DescribeApisRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeApisRequest) SetPageNumber(v int32) *DescribeApisRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisRequest) SetPageSize(v int32) *DescribeApisRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApisRequest) SetSecurityToken(v string) *DescribeApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApisRequest) SetStageName(v string) *DescribeApisRequest {
	s.StageName = &v
	return s
}

func (s *DescribeApisRequest) SetTag(v []*DescribeApisRequestTag) *DescribeApisRequest {
	s.Tag = v
	return s
}

func (s *DescribeApisRequest) SetUnDeployed(v bool) *DescribeApisRequest {
	s.UnDeployed = &v
	return s
}

func (s *DescribeApisRequest) SetVisibility(v string) *DescribeApisRequest {
	s.Visibility = &v
	return s
}

type DescribeApisRequestTag struct {
	// The tag key.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeApisRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeApisRequestTag) SetKey(v string) *DescribeApisRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeApisRequestTag) SetValue(v string) *DescribeApisRequestTag {
	s.Value = &v
	return s
}

type DescribeApisResponseBody struct {
	// The queried API definitions.
	ApiSummarys *DescribeApisResponseBodyApiSummarys `json:"ApiSummarys,omitempty" xml:"ApiSummarys,omitempty" type:"Struct"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApisResponseBody) SetApiSummarys(v *DescribeApisResponseBodyApiSummarys) *DescribeApisResponseBody {
	s.ApiSummarys = v
	return s
}

func (s *DescribeApisResponseBody) SetPageNumber(v int32) *DescribeApisResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisResponseBody) SetPageSize(v int32) *DescribeApisResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApisResponseBody) SetRequestId(v string) *DescribeApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApisResponseBody) SetTotalCount(v int32) *DescribeApisResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApisResponseBodyApiSummarys struct {
	ApiSummary []*DescribeApisResponseBodyApiSummarysApiSummary `json:"ApiSummary,omitempty" xml:"ApiSummary,omitempty" type:"Repeated"`
}

func (s DescribeApisResponseBodyApiSummarys) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponseBodyApiSummarys) GoString() string {
	return s.String()
}

func (s *DescribeApisResponseBodyApiSummarys) SetApiSummary(v []*DescribeApisResponseBodyApiSummarysApiSummary) *DescribeApisResponseBodyApiSummarys {
	s.ApiSummary = v
	return s
}

type DescribeApisResponseBodyApiSummarysApiSummary struct {
	// The API ID.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The HTTP method of the API request.
	ApiMethod *string `json:"ApiMethod,omitempty" xml:"ApiMethod,omitempty"`
	// The API name.
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The request path of the API.
	ApiPath *string `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	// The time when the API was created. The time is displayed in UTC.
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The API publishing statuses.
	DeployedInfos *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfos `json:"DeployedInfos,omitempty" xml:"DeployedInfos,omitempty" type:"Struct"`
	// The API description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The API group ID.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group to which the API belongs.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The time when the API was modified. The time is displayed in UTC.
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The ID of the region to which the API belongs.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The tags that are added to the APIs.
	TagList *DescribeApisResponseBodyApiSummarysApiSummaryTagList `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Struct"`
	// Indicates whether the API is public. Valid values:
	//
	// *   **PUBLIC**: The API is public.
	// *   **PRIVATE**: The API is private.
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribeApisResponseBodyApiSummarysApiSummary) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponseBodyApiSummarysApiSummary) GoString() string {
	return s.String()
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetApiId(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.ApiId = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetApiMethod(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.ApiMethod = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetApiName(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.ApiName = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetApiPath(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.ApiPath = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetCreatedTime(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.CreatedTime = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetDeployedInfos(v *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfos) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.DeployedInfos = v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetDescription(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.Description = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetGroupId(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.GroupId = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetGroupName(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.GroupName = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetModifiedTime(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetRegionId(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.RegionId = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetTagList(v *DescribeApisResponseBodyApiSummarysApiSummaryTagList) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.TagList = v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummary) SetVisibility(v string) *DescribeApisResponseBodyApiSummarysApiSummary {
	s.Visibility = &v
	return s
}

type DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfos struct {
	DeployedInfo []*DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo `json:"DeployedInfo,omitempty" xml:"DeployedInfo,omitempty" type:"Repeated"`
}

func (s DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfos) GoString() string {
	return s.String()
}

func (s *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfos) SetDeployedInfo(v []*DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo) *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfos {
	s.DeployedInfo = v
	return s
}

type DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo struct {
	// The deployment status. Valid values: DEPLOYED and NONDEPLOYED.
	DeployedStatus *string `json:"DeployedStatus,omitempty" xml:"DeployedStatus,omitempty"`
	// The deployed version.
	EffectiveVersion *string `json:"EffectiveVersion,omitempty" xml:"EffectiveVersion,omitempty"`
	// Stage Name:
	//
	// *   **RELEASE**: production environment
	// *   **PRE**: staging environment
	// *   **TEST**: test environment
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo) GoString() string {
	return s.String()
}

func (s *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo) SetDeployedStatus(v string) *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo {
	s.DeployedStatus = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo) SetEffectiveVersion(v string) *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo {
	s.EffectiveVersion = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo) SetStageName(v string) *DescribeApisResponseBodyApiSummarysApiSummaryDeployedInfosDeployedInfo {
	s.StageName = &v
	return s
}

type DescribeApisResponseBodyApiSummarysApiSummaryTagList struct {
	Tag []*DescribeApisResponseBodyApiSummarysApiSummaryTagListTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeApisResponseBodyApiSummarysApiSummaryTagList) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponseBodyApiSummarysApiSummaryTagList) GoString() string {
	return s.String()
}

func (s *DescribeApisResponseBodyApiSummarysApiSummaryTagList) SetTag(v []*DescribeApisResponseBodyApiSummarysApiSummaryTagListTag) *DescribeApisResponseBodyApiSummarysApiSummaryTagList {
	s.Tag = v
	return s
}

type DescribeApisResponseBodyApiSummarysApiSummaryTagListTag struct {
	// The tag key.
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The tag value.
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeApisResponseBodyApiSummarysApiSummaryTagListTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponseBodyApiSummarysApiSummaryTagListTag) GoString() string {
	return s.String()
}

func (s *DescribeApisResponseBodyApiSummarysApiSummaryTagListTag) SetTagKey(v string) *DescribeApisResponseBodyApiSummarysApiSummaryTagListTag {
	s.TagKey = &v
	return s
}

func (s *DescribeApisResponseBodyApiSummarysApiSummaryTagListTag) SetTagValue(v string) *DescribeApisResponseBodyApiSummarysApiSummaryTagListTag {
	s.TagValue = &v
	return s
}

type DescribeApisResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApisResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisResponse) GoString() string {
	return s.String()
}

func (s *DescribeApisResponse) SetHeaders(v map[string]*string) *DescribeApisResponse {
	s.Headers = v
	return s
}

func (s *DescribeApisResponse) SetStatusCode(v int32) *DescribeApisResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApisResponse) SetBody(v *DescribeApisResponseBody) *DescribeApisResponse {
	s.Body = v
	return s
}

type DescribeApisByAppRequest struct {
	ApiName       *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiUid        *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	AppId         *int64  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Method        *string `json:"Method,omitempty" xml:"Method,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Path          *string `json:"Path,omitempty" xml:"Path,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeApisByAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByAppRequest) GoString() string {
	return s.String()
}

func (s *DescribeApisByAppRequest) SetApiName(v string) *DescribeApisByAppRequest {
	s.ApiName = &v
	return s
}

func (s *DescribeApisByAppRequest) SetApiUid(v string) *DescribeApisByAppRequest {
	s.ApiUid = &v
	return s
}

func (s *DescribeApisByAppRequest) SetAppId(v int64) *DescribeApisByAppRequest {
	s.AppId = &v
	return s
}

func (s *DescribeApisByAppRequest) SetDescription(v string) *DescribeApisByAppRequest {
	s.Description = &v
	return s
}

func (s *DescribeApisByAppRequest) SetMethod(v string) *DescribeApisByAppRequest {
	s.Method = &v
	return s
}

func (s *DescribeApisByAppRequest) SetPageNumber(v int32) *DescribeApisByAppRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByAppRequest) SetPageSize(v int32) *DescribeApisByAppRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByAppRequest) SetPath(v string) *DescribeApisByAppRequest {
	s.Path = &v
	return s
}

func (s *DescribeApisByAppRequest) SetSecurityToken(v string) *DescribeApisByAppRequest {
	s.SecurityToken = &v
	return s
}

type DescribeApisByAppResponseBody struct {
	AppApiRelationInfos *DescribeApisByAppResponseBodyAppApiRelationInfos `json:"AppApiRelationInfos,omitempty" xml:"AppApiRelationInfos,omitempty" type:"Struct"`
	PageNumber          *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize            *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId           *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount          *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApisByAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByAppResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApisByAppResponseBody) SetAppApiRelationInfos(v *DescribeApisByAppResponseBodyAppApiRelationInfos) *DescribeApisByAppResponseBody {
	s.AppApiRelationInfos = v
	return s
}

func (s *DescribeApisByAppResponseBody) SetPageNumber(v int32) *DescribeApisByAppResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByAppResponseBody) SetPageSize(v int32) *DescribeApisByAppResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByAppResponseBody) SetRequestId(v string) *DescribeApisByAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApisByAppResponseBody) SetTotalCount(v int32) *DescribeApisByAppResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApisByAppResponseBodyAppApiRelationInfos struct {
	AppApiRelationInfo []*DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo `json:"AppApiRelationInfo,omitempty" xml:"AppApiRelationInfo,omitempty" type:"Repeated"`
}

func (s DescribeApisByAppResponseBodyAppApiRelationInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByAppResponseBodyAppApiRelationInfos) GoString() string {
	return s.String()
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfos) SetAppApiRelationInfo(v []*DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) *DescribeApisByAppResponseBodyAppApiRelationInfos {
	s.AppApiRelationInfo = v
	return s
}

type DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo struct {
	ApiId               *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiName             *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	AuthVaildTime       *string `json:"AuthVaildTime,omitempty" xml:"AuthVaildTime,omitempty"`
	AuthorizationSource *string `json:"AuthorizationSource,omitempty" xml:"AuthorizationSource,omitempty"`
	CreatedTime         *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId             *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName           *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	Method              *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Operator            *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	Path                *string `json:"Path,omitempty" xml:"Path,omitempty"`
	RegionId            *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StageName           *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) GoString() string {
	return s.String()
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetApiId(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.ApiId = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetApiName(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.ApiName = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetAuthVaildTime(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.AuthVaildTime = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetAuthorizationSource(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.AuthorizationSource = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetCreatedTime(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.CreatedTime = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetDescription(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.Description = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetGroupId(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.GroupId = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetGroupName(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.GroupName = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetMethod(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.Method = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetOperator(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.Operator = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetPath(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.Path = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetRegionId(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo) SetStageName(v string) *DescribeApisByAppResponseBodyAppApiRelationInfosAppApiRelationInfo {
	s.StageName = &v
	return s
}

type DescribeApisByAppResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApisByAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApisByAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByAppResponse) GoString() string {
	return s.String()
}

func (s *DescribeApisByAppResponse) SetHeaders(v map[string]*string) *DescribeApisByAppResponse {
	s.Headers = v
	return s
}

func (s *DescribeApisByAppResponse) SetStatusCode(v int32) *DescribeApisByAppResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApisByAppResponse) SetBody(v *DescribeApisByAppResponseBody) *DescribeApisByAppResponse {
	s.Body = v
	return s
}

type DescribeApisByBackendRequest struct {
	BackendId     *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageName     *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeApisByBackendRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByBackendRequest) GoString() string {
	return s.String()
}

func (s *DescribeApisByBackendRequest) SetBackendId(v string) *DescribeApisByBackendRequest {
	s.BackendId = &v
	return s
}

func (s *DescribeApisByBackendRequest) SetPageNumber(v int32) *DescribeApisByBackendRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByBackendRequest) SetPageSize(v int32) *DescribeApisByBackendRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByBackendRequest) SetSecurityToken(v string) *DescribeApisByBackendRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApisByBackendRequest) SetStageName(v string) *DescribeApisByBackendRequest {
	s.StageName = &v
	return s
}

type DescribeApisByBackendResponseBody struct {
	ApiInfoList *DescribeApisByBackendResponseBodyApiInfoList `json:"ApiInfoList,omitempty" xml:"ApiInfoList,omitempty" type:"Struct"`
	PageNumber  *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApisByBackendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByBackendResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApisByBackendResponseBody) SetApiInfoList(v *DescribeApisByBackendResponseBodyApiInfoList) *DescribeApisByBackendResponseBody {
	s.ApiInfoList = v
	return s
}

func (s *DescribeApisByBackendResponseBody) SetPageNumber(v int32) *DescribeApisByBackendResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByBackendResponseBody) SetPageSize(v int32) *DescribeApisByBackendResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByBackendResponseBody) SetRequestId(v string) *DescribeApisByBackendResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApisByBackendResponseBody) SetTotalCount(v int32) *DescribeApisByBackendResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApisByBackendResponseBodyApiInfoList struct {
	ApiInfo []*DescribeApisByBackendResponseBodyApiInfoListApiInfo `json:"ApiInfo,omitempty" xml:"ApiInfo,omitempty" type:"Repeated"`
}

func (s DescribeApisByBackendResponseBodyApiInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByBackendResponseBodyApiInfoList) GoString() string {
	return s.String()
}

func (s *DescribeApisByBackendResponseBodyApiInfoList) SetApiInfo(v []*DescribeApisByBackendResponseBodyApiInfoListApiInfo) *DescribeApisByBackendResponseBodyApiInfoList {
	s.ApiInfo = v
	return s
}

type DescribeApisByBackendResponseBodyApiInfoListApiInfo struct {
	ApiId       *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiName     *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId     *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName   *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	Method      *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Path        *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s DescribeApisByBackendResponseBodyApiInfoListApiInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByBackendResponseBodyApiInfoListApiInfo) GoString() string {
	return s.String()
}

func (s *DescribeApisByBackendResponseBodyApiInfoListApiInfo) SetApiId(v string) *DescribeApisByBackendResponseBodyApiInfoListApiInfo {
	s.ApiId = &v
	return s
}

func (s *DescribeApisByBackendResponseBodyApiInfoListApiInfo) SetApiName(v string) *DescribeApisByBackendResponseBodyApiInfoListApiInfo {
	s.ApiName = &v
	return s
}

func (s *DescribeApisByBackendResponseBodyApiInfoListApiInfo) SetDescription(v string) *DescribeApisByBackendResponseBodyApiInfoListApiInfo {
	s.Description = &v
	return s
}

func (s *DescribeApisByBackendResponseBodyApiInfoListApiInfo) SetGroupId(v string) *DescribeApisByBackendResponseBodyApiInfoListApiInfo {
	s.GroupId = &v
	return s
}

func (s *DescribeApisByBackendResponseBodyApiInfoListApiInfo) SetGroupName(v string) *DescribeApisByBackendResponseBodyApiInfoListApiInfo {
	s.GroupName = &v
	return s
}

func (s *DescribeApisByBackendResponseBodyApiInfoListApiInfo) SetMethod(v string) *DescribeApisByBackendResponseBodyApiInfoListApiInfo {
	s.Method = &v
	return s
}

func (s *DescribeApisByBackendResponseBodyApiInfoListApiInfo) SetPath(v string) *DescribeApisByBackendResponseBodyApiInfoListApiInfo {
	s.Path = &v
	return s
}

type DescribeApisByBackendResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApisByBackendResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApisByBackendResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByBackendResponse) GoString() string {
	return s.String()
}

func (s *DescribeApisByBackendResponse) SetHeaders(v map[string]*string) *DescribeApisByBackendResponse {
	s.Headers = v
	return s
}

func (s *DescribeApisByBackendResponse) SetStatusCode(v int32) *DescribeApisByBackendResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApisByBackendResponse) SetBody(v *DescribeApisByBackendResponseBody) *DescribeApisByBackendResponse {
	s.Body = v
	return s
}

type DescribeApisByIpControlRequest struct {
	// The number of the page to return. Pages start from page 1. Default value: 1.
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// The ID of the request.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The page number of the returned page.
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeApisByIpControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByIpControlRequest) GoString() string {
	return s.String()
}

func (s *DescribeApisByIpControlRequest) SetIpControlId(v string) *DescribeApisByIpControlRequest {
	s.IpControlId = &v
	return s
}

func (s *DescribeApisByIpControlRequest) SetPageNumber(v int32) *DescribeApisByIpControlRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByIpControlRequest) SetPageSize(v int32) *DescribeApisByIpControlRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByIpControlRequest) SetSecurityToken(v string) *DescribeApisByIpControlRequest {
	s.SecurityToken = &v
	return s
}

type DescribeApisByIpControlResponseBody struct {
	// Indicates whether the API is public. Valid values:
	//
	// *   **PUBLIC**
	// *   **PRIVATE**
	ApiInfos *DescribeApisByIpControlResponseBodyApiInfos `json:"ApiInfos,omitempty" xml:"ApiInfos,omitempty" type:"Struct"`
	// The number of entries returned per page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The returned API information. It is an array consisting of ApiInfo data.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The binding time of the API.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApisByIpControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByIpControlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApisByIpControlResponseBody) SetApiInfos(v *DescribeApisByIpControlResponseBodyApiInfos) *DescribeApisByIpControlResponseBody {
	s.ApiInfos = v
	return s
}

func (s *DescribeApisByIpControlResponseBody) SetPageNumber(v int32) *DescribeApisByIpControlResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByIpControlResponseBody) SetPageSize(v int32) *DescribeApisByIpControlResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByIpControlResponseBody) SetRequestId(v string) *DescribeApisByIpControlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApisByIpControlResponseBody) SetTotalCount(v int32) *DescribeApisByIpControlResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApisByIpControlResponseBodyApiInfos struct {
	ApiInfo []*DescribeApisByIpControlResponseBodyApiInfosApiInfo `json:"ApiInfo,omitempty" xml:"ApiInfo,omitempty" type:"Repeated"`
}

func (s DescribeApisByIpControlResponseBodyApiInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByIpControlResponseBodyApiInfos) GoString() string {
	return s.String()
}

func (s *DescribeApisByIpControlResponseBodyApiInfos) SetApiInfo(v []*DescribeApisByIpControlResponseBodyApiInfosApiInfo) *DescribeApisByIpControlResponseBodyApiInfos {
	s.ApiInfo = v
	return s
}

type DescribeApisByIpControlResponseBodyApiInfosApiInfo struct {
	// Description
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// *   This API is intended for API providers.
	// *   You can specify PageNumber to obtain the result on the specified page.
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The ID of the API.
	BoundTime *string `json:"BoundTime,omitempty" xml:"BoundTime,omitempty"`
	// The name of the API group.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The API operation.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **TEST**
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Queries the APIs that are bound to an access control list (ACL).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The region where the API is located.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The description of the API.
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribeApisByIpControlResponseBodyApiInfosApiInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByIpControlResponseBodyApiInfosApiInfo) GoString() string {
	return s.String()
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetApiId(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.ApiId = &v
	return s
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetApiName(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.ApiName = &v
	return s
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetBoundTime(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.BoundTime = &v
	return s
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetDescription(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.Description = &v
	return s
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetGroupId(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.GroupId = &v
	return s
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetGroupName(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.GroupName = &v
	return s
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetRegionId(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetStageName(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.StageName = &v
	return s
}

func (s *DescribeApisByIpControlResponseBodyApiInfosApiInfo) SetVisibility(v string) *DescribeApisByIpControlResponseBodyApiInfosApiInfo {
	s.Visibility = &v
	return s
}

type DescribeApisByIpControlResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApisByIpControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApisByIpControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByIpControlResponse) GoString() string {
	return s.String()
}

func (s *DescribeApisByIpControlResponse) SetHeaders(v map[string]*string) *DescribeApisByIpControlResponse {
	s.Headers = v
	return s
}

func (s *DescribeApisByIpControlResponse) SetStatusCode(v int32) *DescribeApisByIpControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApisByIpControlResponse) SetBody(v *DescribeApisByIpControlResponseBody) *DescribeApisByIpControlResponse {
	s.Body = v
	return s
}

type DescribeApisBySignatureRequest struct {
	// The ID of the request.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The page number of the returned page.
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
}

func (s DescribeApisBySignatureRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisBySignatureRequest) GoString() string {
	return s.String()
}

func (s *DescribeApisBySignatureRequest) SetPageNumber(v int32) *DescribeApisBySignatureRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisBySignatureRequest) SetPageSize(v int32) *DescribeApisBySignatureRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApisBySignatureRequest) SetSecurityToken(v string) *DescribeApisBySignatureRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApisBySignatureRequest) SetSignatureId(v string) *DescribeApisBySignatureRequest {
	s.SignatureId = &v
	return s
}

type DescribeApisBySignatureResponseBody struct {
	// Indicates whether the API is public. Valid values:
	//
	// *   **PUBLIC**
	// *   **PRIVATE**
	ApiInfos *DescribeApisBySignatureResponseBodyApiInfos `json:"ApiInfos,omitempty" xml:"ApiInfos,omitempty" type:"Struct"`
	// The number of entries returned per page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The returned API information. It is an array consisting of ApiInfo data.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The binding time of the API.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApisBySignatureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisBySignatureResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApisBySignatureResponseBody) SetApiInfos(v *DescribeApisBySignatureResponseBodyApiInfos) *DescribeApisBySignatureResponseBody {
	s.ApiInfos = v
	return s
}

func (s *DescribeApisBySignatureResponseBody) SetPageNumber(v int32) *DescribeApisBySignatureResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisBySignatureResponseBody) SetPageSize(v int32) *DescribeApisBySignatureResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApisBySignatureResponseBody) SetRequestId(v string) *DescribeApisBySignatureResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApisBySignatureResponseBody) SetTotalCount(v int32) *DescribeApisBySignatureResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApisBySignatureResponseBodyApiInfos struct {
	ApiInfo []*DescribeApisBySignatureResponseBodyApiInfosApiInfo `json:"ApiInfo,omitempty" xml:"ApiInfo,omitempty" type:"Repeated"`
}

func (s DescribeApisBySignatureResponseBodyApiInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisBySignatureResponseBodyApiInfos) GoString() string {
	return s.String()
}

func (s *DescribeApisBySignatureResponseBodyApiInfos) SetApiInfo(v []*DescribeApisBySignatureResponseBodyApiInfosApiInfo) *DescribeApisBySignatureResponseBodyApiInfos {
	s.ApiInfo = v
	return s
}

type DescribeApisBySignatureResponseBodyApiInfosApiInfo struct {
	// Description
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// *   This API is intended for API providers.
	// *   The results are returned on separate pages. You can specify PageNumber to obtain the result on the specified page.
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The ID of the API.
	BoundTime *string `json:"BoundTime,omitempty" xml:"BoundTime,omitempty"`
	// The name of the group to which the API belongs.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the API.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **TEST**
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Queries the APIs to which a specified backend signature key is bound.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The region where the API is located.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The description of the API.
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribeApisBySignatureResponseBodyApiInfosApiInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisBySignatureResponseBodyApiInfosApiInfo) GoString() string {
	return s.String()
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetApiId(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.ApiId = &v
	return s
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetApiName(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.ApiName = &v
	return s
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetBoundTime(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.BoundTime = &v
	return s
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetDescription(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.Description = &v
	return s
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetGroupId(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.GroupId = &v
	return s
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetGroupName(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.GroupName = &v
	return s
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetRegionId(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetStageName(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.StageName = &v
	return s
}

func (s *DescribeApisBySignatureResponseBodyApiInfosApiInfo) SetVisibility(v string) *DescribeApisBySignatureResponseBodyApiInfosApiInfo {
	s.Visibility = &v
	return s
}

type DescribeApisBySignatureResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApisBySignatureResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApisBySignatureResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisBySignatureResponse) GoString() string {
	return s.String()
}

func (s *DescribeApisBySignatureResponse) SetHeaders(v map[string]*string) *DescribeApisBySignatureResponse {
	s.Headers = v
	return s
}

func (s *DescribeApisBySignatureResponse) SetStatusCode(v int32) *DescribeApisBySignatureResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApisBySignatureResponse) SetBody(v *DescribeApisBySignatureResponseBody) *DescribeApisBySignatureResponse {
	s.Body = v
	return s
}

type DescribeApisByTrafficControlRequest struct {
	// The ID of the request.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The page number of the returned page.
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
}

func (s DescribeApisByTrafficControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByTrafficControlRequest) GoString() string {
	return s.String()
}

func (s *DescribeApisByTrafficControlRequest) SetPageNumber(v int32) *DescribeApisByTrafficControlRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByTrafficControlRequest) SetPageSize(v int32) *DescribeApisByTrafficControlRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByTrafficControlRequest) SetSecurityToken(v string) *DescribeApisByTrafficControlRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeApisByTrafficControlRequest) SetTrafficControlId(v string) *DescribeApisByTrafficControlRequest {
	s.TrafficControlId = &v
	return s
}

type DescribeApisByTrafficControlResponseBody struct {
	// Indicates whether the API is public. Valid values:
	//
	// *   **PUBLIC**
	// *   **PRIVATE**
	ApiInfos *DescribeApisByTrafficControlResponseBodyApiInfos `json:"ApiInfos,omitempty" xml:"ApiInfos,omitempty" type:"Struct"`
	// The number of entries returned per page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The returned API information. It is an array consisting of ApiInfo data.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The binding time of the API.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeApisByTrafficControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByTrafficControlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApisByTrafficControlResponseBody) SetApiInfos(v *DescribeApisByTrafficControlResponseBodyApiInfos) *DescribeApisByTrafficControlResponseBody {
	s.ApiInfos = v
	return s
}

func (s *DescribeApisByTrafficControlResponseBody) SetPageNumber(v int32) *DescribeApisByTrafficControlResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBody) SetPageSize(v int32) *DescribeApisByTrafficControlResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBody) SetRequestId(v string) *DescribeApisByTrafficControlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBody) SetTotalCount(v int32) *DescribeApisByTrafficControlResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeApisByTrafficControlResponseBodyApiInfos struct {
	ApiInfo []*DescribeApisByTrafficControlResponseBodyApiInfosApiInfo `json:"ApiInfo,omitempty" xml:"ApiInfo,omitempty" type:"Repeated"`
}

func (s DescribeApisByTrafficControlResponseBodyApiInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByTrafficControlResponseBodyApiInfos) GoString() string {
	return s.String()
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfos) SetApiInfo(v []*DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) *DescribeApisByTrafficControlResponseBodyApiInfos {
	s.ApiInfo = v
	return s
}

type DescribeApisByTrafficControlResponseBodyApiInfosApiInfo struct {
	// Description
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// *   This API is intended for API providers.
	// *   You can specify PageNumber to obtain the result on the specified page.
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The ID of the API.
	BoundTime *string `json:"BoundTime,omitempty" xml:"BoundTime,omitempty"`
	// The name of the group to which an API belongs.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the API
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **TEST**
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Queries the APIs to which a specified throttling policy is bound.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The region where the API is located.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The description of the API.
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) GoString() string {
	return s.String()
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetApiId(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.ApiId = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetApiName(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.ApiName = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetBoundTime(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.BoundTime = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetDescription(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.Description = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetGroupId(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.GroupId = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetGroupName(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.GroupName = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetRegionId(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetStageName(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.StageName = &v
	return s
}

func (s *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo) SetVisibility(v string) *DescribeApisByTrafficControlResponseBodyApiInfosApiInfo {
	s.Visibility = &v
	return s
}

type DescribeApisByTrafficControlResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApisByTrafficControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApisByTrafficControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApisByTrafficControlResponse) GoString() string {
	return s.String()
}

func (s *DescribeApisByTrafficControlResponse) SetHeaders(v map[string]*string) *DescribeApisByTrafficControlResponse {
	s.Headers = v
	return s
}

func (s *DescribeApisByTrafficControlResponse) SetStatusCode(v int32) *DescribeApisByTrafficControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApisByTrafficControlResponse) SetBody(v *DescribeApisByTrafficControlResponseBody) *DescribeApisByTrafficControlResponse {
	s.Body = v
	return s
}

type DescribeAppRequest struct {
	AppId         *int64  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppRequest) GoString() string {
	return s.String()
}

func (s *DescribeAppRequest) SetAppId(v int64) *DescribeAppRequest {
	s.AppId = &v
	return s
}

func (s *DescribeAppRequest) SetSecurityToken(v string) *DescribeAppRequest {
	s.SecurityToken = &v
	return s
}

type DescribeAppResponseBody struct {
	AppId        *int64  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName      *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	CreatedTime  *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAppResponseBody) SetAppId(v int64) *DescribeAppResponseBody {
	s.AppId = &v
	return s
}

func (s *DescribeAppResponseBody) SetAppName(v string) *DescribeAppResponseBody {
	s.AppName = &v
	return s
}

func (s *DescribeAppResponseBody) SetCreatedTime(v string) *DescribeAppResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeAppResponseBody) SetDescription(v string) *DescribeAppResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeAppResponseBody) SetModifiedTime(v string) *DescribeAppResponseBody {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeAppResponseBody) SetRequestId(v string) *DescribeAppResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAppResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppResponse) GoString() string {
	return s.String()
}

func (s *DescribeAppResponse) SetHeaders(v map[string]*string) *DescribeAppResponse {
	s.Headers = v
	return s
}

func (s *DescribeAppResponse) SetStatusCode(v int32) *DescribeAppResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAppResponse) SetBody(v *DescribeAppResponseBody) *DescribeAppResponse {
	s.Body = v
	return s
}

type DescribeAppAttributesRequest struct {
	AppCode       *string                            `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AppId         *int64                             `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppKey        *string                            `json:"AppKey,omitempty" xml:"AppKey,omitempty"`
	AppName       *string                            `json:"AppName,omitempty" xml:"AppName,omitempty"`
	EnableTagAuth *bool                              `json:"EnableTagAuth,omitempty" xml:"EnableTagAuth,omitempty"`
	PageNumber    *int32                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string                            `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Sort          *string                            `json:"Sort,omitempty" xml:"Sort,omitempty"`
	Tag           []*DescribeAppAttributesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeAppAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAppAttributesRequest) SetAppCode(v string) *DescribeAppAttributesRequest {
	s.AppCode = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetAppId(v int64) *DescribeAppAttributesRequest {
	s.AppId = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetAppKey(v string) *DescribeAppAttributesRequest {
	s.AppKey = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetAppName(v string) *DescribeAppAttributesRequest {
	s.AppName = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetEnableTagAuth(v bool) *DescribeAppAttributesRequest {
	s.EnableTagAuth = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetPageNumber(v int32) *DescribeAppAttributesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetPageSize(v int32) *DescribeAppAttributesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetSecurityToken(v string) *DescribeAppAttributesRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetSort(v string) *DescribeAppAttributesRequest {
	s.Sort = &v
	return s
}

func (s *DescribeAppAttributesRequest) SetTag(v []*DescribeAppAttributesRequestTag) *DescribeAppAttributesRequest {
	s.Tag = v
	return s
}

type DescribeAppAttributesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeAppAttributesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppAttributesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeAppAttributesRequestTag) SetKey(v string) *DescribeAppAttributesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeAppAttributesRequestTag) SetValue(v string) *DescribeAppAttributesRequestTag {
	s.Value = &v
	return s
}

type DescribeAppAttributesResponseBody struct {
	Apps       *DescribeAppAttributesResponseBodyApps `json:"Apps,omitempty" xml:"Apps,omitempty" type:"Struct"`
	PageNumber *int32                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAppAttributesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAppAttributesResponseBody) SetApps(v *DescribeAppAttributesResponseBodyApps) *DescribeAppAttributesResponseBody {
	s.Apps = v
	return s
}

func (s *DescribeAppAttributesResponseBody) SetPageNumber(v int32) *DescribeAppAttributesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAppAttributesResponseBody) SetPageSize(v int32) *DescribeAppAttributesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAppAttributesResponseBody) SetRequestId(v string) *DescribeAppAttributesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAppAttributesResponseBody) SetTotalCount(v int32) *DescribeAppAttributesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeAppAttributesResponseBodyApps struct {
	AppAttribute []*DescribeAppAttributesResponseBodyAppsAppAttribute `json:"AppAttribute,omitempty" xml:"AppAttribute,omitempty" type:"Repeated"`
}

func (s DescribeAppAttributesResponseBodyApps) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppAttributesResponseBodyApps) GoString() string {
	return s.String()
}

func (s *DescribeAppAttributesResponseBodyApps) SetAppAttribute(v []*DescribeAppAttributesResponseBodyAppsAppAttribute) *DescribeAppAttributesResponseBodyApps {
	s.AppAttribute = v
	return s
}

type DescribeAppAttributesResponseBodyAppsAppAttribute struct {
	AppId        *int64                                                 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName      *string                                                `json:"AppName,omitempty" xml:"AppName,omitempty"`
	CreatedTime  *string                                                `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description  *string                                                `json:"Description,omitempty" xml:"Description,omitempty"`
	ModifiedTime *string                                                `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	Tags         *DescribeAppAttributesResponseBodyAppsAppAttributeTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s DescribeAppAttributesResponseBodyAppsAppAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppAttributesResponseBodyAppsAppAttribute) GoString() string {
	return s.String()
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttribute) SetAppId(v int64) *DescribeAppAttributesResponseBodyAppsAppAttribute {
	s.AppId = &v
	return s
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttribute) SetAppName(v string) *DescribeAppAttributesResponseBodyAppsAppAttribute {
	s.AppName = &v
	return s
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttribute) SetCreatedTime(v string) *DescribeAppAttributesResponseBodyAppsAppAttribute {
	s.CreatedTime = &v
	return s
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttribute) SetDescription(v string) *DescribeAppAttributesResponseBodyAppsAppAttribute {
	s.Description = &v
	return s
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttribute) SetModifiedTime(v string) *DescribeAppAttributesResponseBodyAppsAppAttribute {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttribute) SetTags(v *DescribeAppAttributesResponseBodyAppsAppAttributeTags) *DescribeAppAttributesResponseBodyAppsAppAttribute {
	s.Tags = v
	return s
}

type DescribeAppAttributesResponseBodyAppsAppAttributeTags struct {
	TagInfo []*DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo `json:"TagInfo,omitempty" xml:"TagInfo,omitempty" type:"Repeated"`
}

func (s DescribeAppAttributesResponseBodyAppsAppAttributeTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppAttributesResponseBodyAppsAppAttributeTags) GoString() string {
	return s.String()
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttributeTags) SetTagInfo(v []*DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo) *DescribeAppAttributesResponseBodyAppsAppAttributeTags {
	s.TagInfo = v
	return s
}

type DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo) GoString() string {
	return s.String()
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo) SetKey(v string) *DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo {
	s.Key = &v
	return s
}

func (s *DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo) SetValue(v string) *DescribeAppAttributesResponseBodyAppsAppAttributeTagsTagInfo {
	s.Value = &v
	return s
}

type DescribeAppAttributesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAppAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAppAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAppAttributesResponse) SetHeaders(v map[string]*string) *DescribeAppAttributesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAppAttributesResponse) SetStatusCode(v int32) *DescribeAppAttributesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAppAttributesResponse) SetBody(v *DescribeAppAttributesResponseBody) *DescribeAppAttributesResponse {
	s.Body = v
	return s
}

type DescribeAppSecurityRequest struct {
	AppId         *int64                           `json:"AppId,omitempty" xml:"AppId,omitempty"`
	SecurityToken *string                          `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag           []*DescribeAppSecurityRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeAppSecurityRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppSecurityRequest) GoString() string {
	return s.String()
}

func (s *DescribeAppSecurityRequest) SetAppId(v int64) *DescribeAppSecurityRequest {
	s.AppId = &v
	return s
}

func (s *DescribeAppSecurityRequest) SetSecurityToken(v string) *DescribeAppSecurityRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeAppSecurityRequest) SetTag(v []*DescribeAppSecurityRequestTag) *DescribeAppSecurityRequest {
	s.Tag = v
	return s
}

type DescribeAppSecurityRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeAppSecurityRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppSecurityRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeAppSecurityRequestTag) SetKey(v string) *DescribeAppSecurityRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeAppSecurityRequestTag) SetValue(v string) *DescribeAppSecurityRequestTag {
	s.Value = &v
	return s
}

type DescribeAppSecurityResponseBody struct {
	AppCode      *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AppKey       *string `json:"AppKey,omitempty" xml:"AppKey,omitempty"`
	AppSecret    *string `json:"AppSecret,omitempty" xml:"AppSecret,omitempty"`
	CreatedTime  *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAppSecurityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppSecurityResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAppSecurityResponseBody) SetAppCode(v string) *DescribeAppSecurityResponseBody {
	s.AppCode = &v
	return s
}

func (s *DescribeAppSecurityResponseBody) SetAppKey(v string) *DescribeAppSecurityResponseBody {
	s.AppKey = &v
	return s
}

func (s *DescribeAppSecurityResponseBody) SetAppSecret(v string) *DescribeAppSecurityResponseBody {
	s.AppSecret = &v
	return s
}

func (s *DescribeAppSecurityResponseBody) SetCreatedTime(v string) *DescribeAppSecurityResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeAppSecurityResponseBody) SetModifiedTime(v string) *DescribeAppSecurityResponseBody {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeAppSecurityResponseBody) SetRequestId(v string) *DescribeAppSecurityResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAppSecurityResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAppSecurityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAppSecurityResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppSecurityResponse) GoString() string {
	return s.String()
}

func (s *DescribeAppSecurityResponse) SetHeaders(v map[string]*string) *DescribeAppSecurityResponse {
	s.Headers = v
	return s
}

func (s *DescribeAppSecurityResponse) SetStatusCode(v int32) *DescribeAppSecurityResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAppSecurityResponse) SetBody(v *DescribeAppSecurityResponseBody) *DescribeAppSecurityResponse {
	s.Body = v
	return s
}

type DescribeAppsRequest struct {
	// The number of the page to return. Pages start from page 1. Default value: 1.
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	AppOwner *int64 `json:"AppOwner,omitempty" xml:"AppOwner,omitempty"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The ID of the request.
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeAppsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAppsRequest) SetAppId(v int64) *DescribeAppsRequest {
	s.AppId = &v
	return s
}

func (s *DescribeAppsRequest) SetAppOwner(v int64) *DescribeAppsRequest {
	s.AppOwner = &v
	return s
}

func (s *DescribeAppsRequest) SetPageNumber(v int32) *DescribeAppsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAppsRequest) SetPageSize(v int32) *DescribeAppsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAppsRequest) SetSecurityToken(v string) *DescribeAppsRequest {
	s.SecurityToken = &v
	return s
}

type DescribeAppsResponseBody struct {
	// The description of the app.
	Apps *DescribeAppsResponseBodyApps `json:"Apps,omitempty" xml:"Apps,omitempty" type:"Struct"`
	// The number of entries returned per page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The returned app information. It is an array consisting of AppItem data.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The name of the app.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAppsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAppsResponseBody) SetApps(v *DescribeAppsResponseBodyApps) *DescribeAppsResponseBody {
	s.Apps = v
	return s
}

func (s *DescribeAppsResponseBody) SetPageNumber(v int32) *DescribeAppsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAppsResponseBody) SetPageSize(v int32) *DescribeAppsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAppsResponseBody) SetRequestId(v string) *DescribeAppsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAppsResponseBody) SetTotalCount(v int32) *DescribeAppsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeAppsResponseBodyApps struct {
	AppItem []*DescribeAppsResponseBodyAppsAppItem `json:"AppItem,omitempty" xml:"AppItem,omitempty" type:"Repeated"`
}

func (s DescribeAppsResponseBodyApps) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppsResponseBodyApps) GoString() string {
	return s.String()
}

func (s *DescribeAppsResponseBodyApps) SetAppItem(v []*DescribeAppsResponseBodyAppsAppItem) *DescribeAppsResponseBodyApps {
	s.AppItem = v
	return s
}

type DescribeAppsResponseBodyAppsAppItem struct {
	// Queries the apps. App information is returned only to the app owner.
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the app.
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// *   This API is intended for API providers.
	// *   API providers can use the app IDs or their Apsara Stack tenant accounts to query app information.
	// *   Each provider can call this operation for a maximum of 200 times every day in a region.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s DescribeAppsResponseBodyAppsAppItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppsResponseBodyAppsAppItem) GoString() string {
	return s.String()
}

func (s *DescribeAppsResponseBodyAppsAppItem) SetAppId(v int64) *DescribeAppsResponseBodyAppsAppItem {
	s.AppId = &v
	return s
}

func (s *DescribeAppsResponseBodyAppsAppItem) SetAppName(v string) *DescribeAppsResponseBodyAppsAppItem {
	s.AppName = &v
	return s
}

func (s *DescribeAppsResponseBodyAppsAppItem) SetDescription(v string) *DescribeAppsResponseBodyAppsAppItem {
	s.Description = &v
	return s
}

type DescribeAppsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAppsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAppsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAppsResponse) SetHeaders(v map[string]*string) *DescribeAppsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAppsResponse) SetStatusCode(v int32) *DescribeAppsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAppsResponse) SetBody(v *DescribeAppsResponseBody) *DescribeAppsResponse {
	s.Body = v
	return s
}

type DescribeAuthorizedApisRequest struct {
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The ID of the request.
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeAuthorizedApisRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedApisRequest) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedApisRequest) SetAppId(v int64) *DescribeAuthorizedApisRequest {
	s.AppId = &v
	return s
}

func (s *DescribeAuthorizedApisRequest) SetPageNumber(v int32) *DescribeAuthorizedApisRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAuthorizedApisRequest) SetPageSize(v int32) *DescribeAuthorizedApisRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAuthorizedApisRequest) SetSecurityToken(v string) *DescribeAuthorizedApisRequest {
	s.SecurityToken = &v
	return s
}

type DescribeAuthorizedApisResponseBody struct {
	// The authorization source. Valid values:
	//
	// *   **CONSOLE**
	// *   **API**
	AuthorizedApis *DescribeAuthorizedApisResponseBodyAuthorizedApis `json:"AuthorizedApis,omitempty" xml:"AuthorizedApis,omitempty" type:"Struct"`
	// The number of entries returned per page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The authorized API set.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The unique identifier of the API, which is generated by the system.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAuthorizedApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedApisResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedApisResponseBody) SetAuthorizedApis(v *DescribeAuthorizedApisResponseBodyAuthorizedApis) *DescribeAuthorizedApisResponseBody {
	s.AuthorizedApis = v
	return s
}

func (s *DescribeAuthorizedApisResponseBody) SetPageNumber(v int32) *DescribeAuthorizedApisResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBody) SetPageSize(v int32) *DescribeAuthorizedApisResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBody) SetRequestId(v string) *DescribeAuthorizedApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBody) SetTotalCount(v int32) *DescribeAuthorizedApisResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeAuthorizedApisResponseBodyAuthorizedApis struct {
	AuthorizedApi []*DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi `json:"AuthorizedApi,omitempty" xml:"AuthorizedApi,omitempty" type:"Repeated"`
}

func (s DescribeAuthorizedApisResponseBodyAuthorizedApis) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedApisResponseBodyAuthorizedApis) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApis) SetAuthorizedApi(v []*DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) *DescribeAuthorizedApisResponseBodyAuthorizedApis {
	s.AuthorizedApi = v
	return s
}

type DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi struct {
	// The expiration time of the authorization in UTC.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// *   This operation is intended for API callers.
	// *   The specified application can call all APIs included in the responses.
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// Queries weather based on the region name
	AuthVaildTime *string `json:"AuthVaildTime,omitempty" xml:"AuthVaildTime,omitempty"`
	// The description of the authorization.
	AuthorizationSource *string `json:"AuthorizationSource,omitempty" xml:"AuthorizationSource,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **TEST**
	AuthorizedTime *string `json:"AuthorizedTime,omitempty" xml:"AuthorizedTime,omitempty"`
	// The name of the API group.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The authorizer. Valid values:
	//
	// *   **PROVIDER:** the API owner
	// *   **CONSUMER:** the API caller
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The authorization time in UTC.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The name of the API operation.
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// Queries the authorized APIs of a specified application.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The region to which the API belongs.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetApiId(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.ApiId = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetApiName(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.ApiName = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetAuthVaildTime(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.AuthVaildTime = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetAuthorizationSource(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.AuthorizationSource = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetAuthorizedTime(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.AuthorizedTime = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetDescription(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.Description = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetGroupId(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.GroupId = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetGroupName(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.GroupName = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetOperator(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.Operator = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetRegionId(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.RegionId = &v
	return s
}

func (s *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi) SetStageName(v string) *DescribeAuthorizedApisResponseBodyAuthorizedApisAuthorizedApi {
	s.StageName = &v
	return s
}

type DescribeAuthorizedApisResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAuthorizedApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAuthorizedApisResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedApisResponse) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedApisResponse) SetHeaders(v map[string]*string) *DescribeAuthorizedApisResponse {
	s.Headers = v
	return s
}

func (s *DescribeAuthorizedApisResponse) SetStatusCode(v int32) *DescribeAuthorizedApisResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAuthorizedApisResponse) SetBody(v *DescribeAuthorizedApisResponseBody) *DescribeAuthorizedApisResponse {
	s.Body = v
	return s
}

type DescribeAuthorizedAppsRequest struct {
	ApiId         *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	AppId         *int64  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	AppOwnerId    *int64  `json:"AppOwnerId,omitempty" xml:"AppOwnerId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageName     *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeAuthorizedAppsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedAppsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedAppsRequest) SetApiId(v string) *DescribeAuthorizedAppsRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeAuthorizedAppsRequest) SetAppId(v int64) *DescribeAuthorizedAppsRequest {
	s.AppId = &v
	return s
}

func (s *DescribeAuthorizedAppsRequest) SetAppName(v string) *DescribeAuthorizedAppsRequest {
	s.AppName = &v
	return s
}

func (s *DescribeAuthorizedAppsRequest) SetAppOwnerId(v int64) *DescribeAuthorizedAppsRequest {
	s.AppOwnerId = &v
	return s
}

func (s *DescribeAuthorizedAppsRequest) SetGroupId(v string) *DescribeAuthorizedAppsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeAuthorizedAppsRequest) SetPageNumber(v int32) *DescribeAuthorizedAppsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAuthorizedAppsRequest) SetPageSize(v int32) *DescribeAuthorizedAppsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAuthorizedAppsRequest) SetSecurityToken(v string) *DescribeAuthorizedAppsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeAuthorizedAppsRequest) SetStageName(v string) *DescribeAuthorizedAppsRequest {
	s.StageName = &v
	return s
}

type DescribeAuthorizedAppsResponseBody struct {
	AuthorizedApps *DescribeAuthorizedAppsResponseBodyAuthorizedApps `json:"AuthorizedApps,omitempty" xml:"AuthorizedApps,omitempty" type:"Struct"`
	PageNumber     *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount     *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAuthorizedAppsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedAppsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedAppsResponseBody) SetAuthorizedApps(v *DescribeAuthorizedAppsResponseBodyAuthorizedApps) *DescribeAuthorizedAppsResponseBody {
	s.AuthorizedApps = v
	return s
}

func (s *DescribeAuthorizedAppsResponseBody) SetPageNumber(v int32) *DescribeAuthorizedAppsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBody) SetPageSize(v int32) *DescribeAuthorizedAppsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBody) SetRequestId(v string) *DescribeAuthorizedAppsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBody) SetTotalCount(v int32) *DescribeAuthorizedAppsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeAuthorizedAppsResponseBodyAuthorizedApps struct {
	AuthorizedApp []*DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp `json:"AuthorizedApp,omitempty" xml:"AuthorizedApp,omitempty" type:"Repeated"`
}

func (s DescribeAuthorizedAppsResponseBodyAuthorizedApps) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedAppsResponseBodyAuthorizedApps) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedApps) SetAuthorizedApp(v []*DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) *DescribeAuthorizedAppsResponseBodyAuthorizedApps {
	s.AuthorizedApp = v
	return s
}

type DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp struct {
	AppId               *int64  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName             *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	AuthVaildTime       *string `json:"AuthVaildTime,omitempty" xml:"AuthVaildTime,omitempty"`
	AuthorizationSource *string `json:"AuthorizationSource,omitempty" xml:"AuthorizationSource,omitempty"`
	AuthorizedTime      *string `json:"AuthorizedTime,omitempty" xml:"AuthorizedTime,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Operator            *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	StageName           *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetAppId(v int64) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.AppId = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetAppName(v string) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.AppName = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetAuthVaildTime(v string) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.AuthVaildTime = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetAuthorizationSource(v string) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.AuthorizationSource = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetAuthorizedTime(v string) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.AuthorizedTime = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetDescription(v string) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.Description = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetOperator(v string) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.Operator = &v
	return s
}

func (s *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp) SetStageName(v string) *DescribeAuthorizedAppsResponseBodyAuthorizedAppsAuthorizedApp {
	s.StageName = &v
	return s
}

type DescribeAuthorizedAppsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAuthorizedAppsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAuthorizedAppsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAuthorizedAppsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAuthorizedAppsResponse) SetHeaders(v map[string]*string) *DescribeAuthorizedAppsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAuthorizedAppsResponse) SetStatusCode(v int32) *DescribeAuthorizedAppsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAuthorizedAppsResponse) SetBody(v *DescribeAuthorizedAppsResponseBody) *DescribeAuthorizedAppsResponse {
	s.Body = v
	return s
}

type DescribeBackendInfoRequest struct {
	BackendId     *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeBackendInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoRequest) SetBackendId(v string) *DescribeBackendInfoRequest {
	s.BackendId = &v
	return s
}

func (s *DescribeBackendInfoRequest) SetSecurityToken(v string) *DescribeBackendInfoRequest {
	s.SecurityToken = &v
	return s
}

type DescribeBackendInfoResponseBody struct {
	BackendInfo *DescribeBackendInfoResponseBodyBackendInfo `json:"BackendInfo,omitempty" xml:"BackendInfo,omitempty" type:"Struct"`
	RequestId   *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBackendInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBody) SetBackendInfo(v *DescribeBackendInfoResponseBodyBackendInfo) *DescribeBackendInfoResponseBody {
	s.BackendInfo = v
	return s
}

func (s *DescribeBackendInfoResponseBody) SetRequestId(v string) *DescribeBackendInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfo struct {
	BackendId     *string                                                    `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	BackendModels []*DescribeBackendInfoResponseBodyBackendInfoBackendModels `json:"BackendModels,omitempty" xml:"BackendModels,omitempty" type:"Repeated"`
	BackendName   *string                                                    `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	BackendType   *string                                                    `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
	CreatedTime   *string                                                    `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description   *string                                                    `json:"Description,omitempty" xml:"Description,omitempty"`
	ModifiedTime  *string                                                    `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfo) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfo) SetBackendId(v string) *DescribeBackendInfoResponseBodyBackendInfo {
	s.BackendId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfo) SetBackendModels(v []*DescribeBackendInfoResponseBodyBackendInfoBackendModels) *DescribeBackendInfoResponseBodyBackendInfo {
	s.BackendModels = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfo) SetBackendName(v string) *DescribeBackendInfoResponseBodyBackendInfo {
	s.BackendName = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfo) SetBackendType(v string) *DescribeBackendInfoResponseBodyBackendInfo {
	s.BackendType = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfo) SetCreatedTime(v string) *DescribeBackendInfoResponseBodyBackendInfo {
	s.CreatedTime = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfo) SetDescription(v string) *DescribeBackendInfoResponseBodyBackendInfo {
	s.Description = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfo) SetModifiedTime(v string) *DescribeBackendInfoResponseBodyBackendInfo {
	s.ModifiedTime = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModels struct {
	BackendConfig  *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig `json:"BackendConfig,omitempty" xml:"BackendConfig,omitempty" type:"Struct"`
	BackendModelId *string                                                               `json:"BackendModelId,omitempty" xml:"BackendModelId,omitempty"`
	Description    *string                                                               `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtCreate      *string                                                               `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified    *string                                                               `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	StageModeId    *string                                                               `json:"StageModeId,omitempty" xml:"StageModeId,omitempty"`
	StageName      *string                                                               `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModels) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModels) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModels) SetBackendConfig(v *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) *DescribeBackendInfoResponseBodyBackendInfoBackendModels {
	s.BackendConfig = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModels) SetBackendModelId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModels {
	s.BackendModelId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModels) SetDescription(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModels {
	s.Description = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModels) SetGmtCreate(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModels {
	s.GmtCreate = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModels) SetGmtModified(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModels {
	s.GmtModified = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModels) SetStageModeId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModels {
	s.StageModeId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModels) SetStageName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModels {
	s.StageName = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig struct {
	EventBridgeConfig     *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig     `json:"EventBridgeConfig,omitempty" xml:"EventBridgeConfig,omitempty" type:"Struct"`
	FunctionComputeConfig *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig `json:"FunctionComputeConfig,omitempty" xml:"FunctionComputeConfig,omitempty" type:"Struct"`
	HttpTargetHostName    *string                                                                                    `json:"HttpTargetHostName,omitempty" xml:"HttpTargetHostName,omitempty"`
	MockConfig            *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig            `json:"MockConfig,omitempty" xml:"MockConfig,omitempty" type:"Struct"`
	OssConfig             *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig             `json:"OssConfig,omitempty" xml:"OssConfig,omitempty" type:"Struct"`
	ServiceAddress        *string                                                                                    `json:"ServiceAddress,omitempty" xml:"ServiceAddress,omitempty"`
	Type                  *string                                                                                    `json:"Type,omitempty" xml:"Type,omitempty"`
	VpcConfig             *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig             `json:"VpcConfig,omitempty" xml:"VpcConfig,omitempty" type:"Struct"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetEventBridgeConfig(v *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.EventBridgeConfig = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetFunctionComputeConfig(v *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.FunctionComputeConfig = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetHttpTargetHostName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.HttpTargetHostName = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetMockConfig(v *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.MockConfig = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetOssConfig(v *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.OssConfig = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetServiceAddress(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.ServiceAddress = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetType(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.Type = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig) SetVpcConfig(v *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfig {
	s.VpcConfig = v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig struct {
	EventBridgeRegionId *string `json:"EventBridgeRegionId,omitempty" xml:"EventBridgeRegionId,omitempty"`
	EventBus            *string `json:"EventBus,omitempty" xml:"EventBus,omitempty"`
	EventSource         *string `json:"EventSource,omitempty" xml:"EventSource,omitempty"`
	RoleArn             *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig) SetEventBridgeRegionId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig {
	s.EventBridgeRegionId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig) SetEventBus(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig {
	s.EventBus = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig) SetEventSource(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig {
	s.EventSource = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig) SetRoleArn(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigEventBridgeConfig {
	s.RoleArn = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig struct {
	FcBaseUrl        *string `json:"FcBaseUrl,omitempty" xml:"FcBaseUrl,omitempty"`
	FcRegionId       *string `json:"FcRegionId,omitempty" xml:"FcRegionId,omitempty"`
	FcType           *string `json:"FcType,omitempty" xml:"FcType,omitempty"`
	FunctionName     *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	OnlyBusinessPath *bool   `json:"OnlyBusinessPath,omitempty" xml:"OnlyBusinessPath,omitempty"`
	Qualifier        *string `json:"Qualifier,omitempty" xml:"Qualifier,omitempty"`
	RoleArn          *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	ServiceName      *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) SetFcBaseUrl(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig {
	s.FcBaseUrl = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) SetFcRegionId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig {
	s.FcRegionId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) SetFcType(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig {
	s.FcType = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) SetFunctionName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig {
	s.FunctionName = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) SetOnlyBusinessPath(v bool) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig {
	s.OnlyBusinessPath = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) SetQualifier(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig {
	s.Qualifier = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) SetRoleArn(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig {
	s.RoleArn = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig) SetServiceName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigFunctionComputeConfig {
	s.ServiceName = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig struct {
	MockHeaders    []*DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders `json:"MockHeaders,omitempty" xml:"MockHeaders,omitempty" type:"Repeated"`
	MockResult     *string                                                                                      `json:"MockResult,omitempty" xml:"MockResult,omitempty"`
	MockStatusCode *string                                                                                      `json:"MockStatusCode,omitempty" xml:"MockStatusCode,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig) SetMockHeaders(v []*DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig {
	s.MockHeaders = v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig) SetMockResult(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig {
	s.MockResult = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig) SetMockStatusCode(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfig {
	s.MockStatusCode = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders struct {
	HeaderName  *string `json:"HeaderName,omitempty" xml:"HeaderName,omitempty"`
	HeaderValue *string `json:"HeaderValue,omitempty" xml:"HeaderValue,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders) SetHeaderName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders {
	s.HeaderName = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders) SetHeaderValue(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigMockConfigMockHeaders {
	s.HeaderValue = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig struct {
	BucketName  *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	OssRegionId *string `json:"OssRegionId,omitempty" xml:"OssRegionId,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig) SetBucketName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig {
	s.BucketName = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig) SetOssRegionId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigOssConfig {
	s.OssRegionId = &v
	return s
}

type DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig struct {
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Port              *int64  `json:"Port,omitempty" xml:"Port,omitempty"`
	VpcAccessId       *string `json:"VpcAccessId,omitempty" xml:"VpcAccessId,omitempty"`
	VpcId             *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VpcScheme         *string `json:"VpcScheme,omitempty" xml:"VpcScheme,omitempty"`
	VpcTargetHostName *string `json:"VpcTargetHostName,omitempty" xml:"VpcTargetHostName,omitempty"`
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) SetInstanceId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig {
	s.InstanceId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) SetName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig {
	s.Name = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) SetPort(v int64) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig {
	s.Port = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) SetVpcAccessId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig {
	s.VpcAccessId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) SetVpcId(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig {
	s.VpcId = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) SetVpcScheme(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig {
	s.VpcScheme = &v
	return s
}

func (s *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig) SetVpcTargetHostName(v string) *DescribeBackendInfoResponseBodyBackendInfoBackendModelsBackendConfigVpcConfig {
	s.VpcTargetHostName = &v
	return s
}

type DescribeBackendInfoResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeBackendInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBackendInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackendInfoResponse) SetHeaders(v map[string]*string) *DescribeBackendInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackendInfoResponse) SetStatusCode(v int32) *DescribeBackendInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBackendInfoResponse) SetBody(v *DescribeBackendInfoResponseBody) *DescribeBackendInfoResponse {
	s.Body = v
	return s
}

type DescribeBackendListRequest struct {
	BackendName   *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	BackendType   *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeBackendListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendListRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackendListRequest) SetBackendName(v string) *DescribeBackendListRequest {
	s.BackendName = &v
	return s
}

func (s *DescribeBackendListRequest) SetBackendType(v string) *DescribeBackendListRequest {
	s.BackendType = &v
	return s
}

func (s *DescribeBackendListRequest) SetPageNumber(v int32) *DescribeBackendListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeBackendListRequest) SetPageSize(v int32) *DescribeBackendListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeBackendListRequest) SetSecurityToken(v string) *DescribeBackendListRequest {
	s.SecurityToken = &v
	return s
}

type DescribeBackendListResponseBody struct {
	BackendInfoList []*DescribeBackendListResponseBodyBackendInfoList `json:"BackendInfoList,omitempty" xml:"BackendInfoList,omitempty" type:"Repeated"`
	PageNumber      *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId       *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount      *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeBackendListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackendListResponseBody) SetBackendInfoList(v []*DescribeBackendListResponseBodyBackendInfoList) *DescribeBackendListResponseBody {
	s.BackendInfoList = v
	return s
}

func (s *DescribeBackendListResponseBody) SetPageNumber(v int32) *DescribeBackendListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeBackendListResponseBody) SetPageSize(v int32) *DescribeBackendListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeBackendListResponseBody) SetRequestId(v string) *DescribeBackendListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBackendListResponseBody) SetTotalCount(v int32) *DescribeBackendListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeBackendListResponseBodyBackendInfoList struct {
	BackendId    *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	BackendName  *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	BackendType  *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
	CreatedTime  *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
}

func (s DescribeBackendListResponseBodyBackendInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendListResponseBodyBackendInfoList) GoString() string {
	return s.String()
}

func (s *DescribeBackendListResponseBodyBackendInfoList) SetBackendId(v string) *DescribeBackendListResponseBodyBackendInfoList {
	s.BackendId = &v
	return s
}

func (s *DescribeBackendListResponseBodyBackendInfoList) SetBackendName(v string) *DescribeBackendListResponseBodyBackendInfoList {
	s.BackendName = &v
	return s
}

func (s *DescribeBackendListResponseBodyBackendInfoList) SetBackendType(v string) *DescribeBackendListResponseBodyBackendInfoList {
	s.BackendType = &v
	return s
}

func (s *DescribeBackendListResponseBodyBackendInfoList) SetCreatedTime(v string) *DescribeBackendListResponseBodyBackendInfoList {
	s.CreatedTime = &v
	return s
}

func (s *DescribeBackendListResponseBodyBackendInfoList) SetDescription(v string) *DescribeBackendListResponseBodyBackendInfoList {
	s.Description = &v
	return s
}

func (s *DescribeBackendListResponseBodyBackendInfoList) SetModifiedTime(v string) *DescribeBackendListResponseBodyBackendInfoList {
	s.ModifiedTime = &v
	return s
}

type DescribeBackendListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeBackendListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBackendListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackendListResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackendListResponse) SetHeaders(v map[string]*string) *DescribeBackendListResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackendListResponse) SetStatusCode(v int32) *DescribeBackendListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBackendListResponse) SetBody(v *DescribeBackendListResponseBody) *DescribeBackendListResponse {
	s.Body = v
	return s
}

type DescribeDatasetInfoRequest struct {
	DatasetId     *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeDatasetInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeDatasetInfoRequest) SetDatasetId(v string) *DescribeDatasetInfoRequest {
	s.DatasetId = &v
	return s
}

func (s *DescribeDatasetInfoRequest) SetSecurityToken(v string) *DescribeDatasetInfoRequest {
	s.SecurityToken = &v
	return s
}

type DescribeDatasetInfoResponseBody struct {
	DatasetInfo *DescribeDatasetInfoResponseBodyDatasetInfo `json:"DatasetInfo,omitempty" xml:"DatasetInfo,omitempty" type:"Struct"`
	RequestId   *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDatasetInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDatasetInfoResponseBody) SetDatasetInfo(v *DescribeDatasetInfoResponseBodyDatasetInfo) *DescribeDatasetInfoResponseBody {
	s.DatasetInfo = v
	return s
}

func (s *DescribeDatasetInfoResponseBody) SetRequestId(v string) *DescribeDatasetInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDatasetInfoResponseBodyDatasetInfo struct {
	CreatedTime  *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	DatasetId    *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	DatasetName  *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	DatasetType  *string `json:"DatasetType,omitempty" xml:"DatasetType,omitempty"`
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
}

func (s DescribeDatasetInfoResponseBodyDatasetInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetInfoResponseBodyDatasetInfo) GoString() string {
	return s.String()
}

func (s *DescribeDatasetInfoResponseBodyDatasetInfo) SetCreatedTime(v string) *DescribeDatasetInfoResponseBodyDatasetInfo {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDatasetInfoResponseBodyDatasetInfo) SetDatasetId(v string) *DescribeDatasetInfoResponseBodyDatasetInfo {
	s.DatasetId = &v
	return s
}

func (s *DescribeDatasetInfoResponseBodyDatasetInfo) SetDatasetName(v string) *DescribeDatasetInfoResponseBodyDatasetInfo {
	s.DatasetName = &v
	return s
}

func (s *DescribeDatasetInfoResponseBodyDatasetInfo) SetDatasetType(v string) *DescribeDatasetInfoResponseBodyDatasetInfo {
	s.DatasetType = &v
	return s
}

func (s *DescribeDatasetInfoResponseBodyDatasetInfo) SetModifiedTime(v string) *DescribeDatasetInfoResponseBodyDatasetInfo {
	s.ModifiedTime = &v
	return s
}

type DescribeDatasetInfoResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDatasetInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDatasetInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeDatasetInfoResponse) SetHeaders(v map[string]*string) *DescribeDatasetInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeDatasetInfoResponse) SetStatusCode(v int32) *DescribeDatasetInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDatasetInfoResponse) SetBody(v *DescribeDatasetInfoResponseBody) *DescribeDatasetInfoResponse {
	s.Body = v
	return s
}

type DescribeDatasetItemInfoRequest struct {
	DatasetId     *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	DatasetItemId *string `json:"DatasetItemId,omitempty" xml:"DatasetItemId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Value         *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDatasetItemInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetItemInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeDatasetItemInfoRequest) SetDatasetId(v string) *DescribeDatasetItemInfoRequest {
	s.DatasetId = &v
	return s
}

func (s *DescribeDatasetItemInfoRequest) SetDatasetItemId(v string) *DescribeDatasetItemInfoRequest {
	s.DatasetItemId = &v
	return s
}

func (s *DescribeDatasetItemInfoRequest) SetSecurityToken(v string) *DescribeDatasetItemInfoRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeDatasetItemInfoRequest) SetValue(v string) *DescribeDatasetItemInfoRequest {
	s.Value = &v
	return s
}

type DescribeDatasetItemInfoResponseBody struct {
	DatasetItemInfo *DescribeDatasetItemInfoResponseBodyDatasetItemInfo `json:"DatasetItemInfo,omitempty" xml:"DatasetItemInfo,omitempty" type:"Struct"`
	RequestId       *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDatasetItemInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetItemInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDatasetItemInfoResponseBody) SetDatasetItemInfo(v *DescribeDatasetItemInfoResponseBodyDatasetItemInfo) *DescribeDatasetItemInfoResponseBody {
	s.DatasetItemInfo = v
	return s
}

func (s *DescribeDatasetItemInfoResponseBody) SetRequestId(v string) *DescribeDatasetItemInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDatasetItemInfoResponseBodyDatasetItemInfo struct {
	CreatedTime   *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	DatasetId     *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	DatasetItemId *string `json:"DatasetItemId,omitempty" xml:"DatasetItemId,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ExpiredTime   *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	ModifiedTime  *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	Value         *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDatasetItemInfoResponseBodyDatasetItemInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetItemInfoResponseBodyDatasetItemInfo) GoString() string {
	return s.String()
}

func (s *DescribeDatasetItemInfoResponseBodyDatasetItemInfo) SetCreatedTime(v string) *DescribeDatasetItemInfoResponseBodyDatasetItemInfo {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDatasetItemInfoResponseBodyDatasetItemInfo) SetDatasetId(v string) *DescribeDatasetItemInfoResponseBodyDatasetItemInfo {
	s.DatasetId = &v
	return s
}

func (s *DescribeDatasetItemInfoResponseBodyDatasetItemInfo) SetDatasetItemId(v string) *DescribeDatasetItemInfoResponseBodyDatasetItemInfo {
	s.DatasetItemId = &v
	return s
}

func (s *DescribeDatasetItemInfoResponseBodyDatasetItemInfo) SetDescription(v string) *DescribeDatasetItemInfoResponseBodyDatasetItemInfo {
	s.Description = &v
	return s
}

func (s *DescribeDatasetItemInfoResponseBodyDatasetItemInfo) SetExpiredTime(v string) *DescribeDatasetItemInfoResponseBodyDatasetItemInfo {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDatasetItemInfoResponseBodyDatasetItemInfo) SetModifiedTime(v string) *DescribeDatasetItemInfoResponseBodyDatasetItemInfo {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeDatasetItemInfoResponseBodyDatasetItemInfo) SetValue(v string) *DescribeDatasetItemInfoResponseBodyDatasetItemInfo {
	s.Value = &v
	return s
}

type DescribeDatasetItemInfoResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDatasetItemInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDatasetItemInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetItemInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeDatasetItemInfoResponse) SetHeaders(v map[string]*string) *DescribeDatasetItemInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeDatasetItemInfoResponse) SetStatusCode(v int32) *DescribeDatasetItemInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDatasetItemInfoResponse) SetBody(v *DescribeDatasetItemInfoResponseBody) *DescribeDatasetItemInfoResponse {
	s.Body = v
	return s
}

type DescribeDatasetItemListRequest struct {
	DatasetId      *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	DatasetItemIds *string `json:"DatasetItemIds,omitempty" xml:"DatasetItemIds,omitempty"`
	PageNumber     *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken  *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeDatasetItemListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetItemListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDatasetItemListRequest) SetDatasetId(v string) *DescribeDatasetItemListRequest {
	s.DatasetId = &v
	return s
}

func (s *DescribeDatasetItemListRequest) SetDatasetItemIds(v string) *DescribeDatasetItemListRequest {
	s.DatasetItemIds = &v
	return s
}

func (s *DescribeDatasetItemListRequest) SetPageNumber(v int32) *DescribeDatasetItemListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDatasetItemListRequest) SetPageSize(v int32) *DescribeDatasetItemListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDatasetItemListRequest) SetSecurityToken(v string) *DescribeDatasetItemListRequest {
	s.SecurityToken = &v
	return s
}

type DescribeDatasetItemListResponseBody struct {
	DatasetItemInfoList []*DescribeDatasetItemListResponseBodyDatasetItemInfoList `json:"DatasetItemInfoList,omitempty" xml:"DatasetItemInfoList,omitempty" type:"Repeated"`
	PageNumber          *int32                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize            *int32                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId           *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount          *int32                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDatasetItemListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetItemListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDatasetItemListResponseBody) SetDatasetItemInfoList(v []*DescribeDatasetItemListResponseBodyDatasetItemInfoList) *DescribeDatasetItemListResponseBody {
	s.DatasetItemInfoList = v
	return s
}

func (s *DescribeDatasetItemListResponseBody) SetPageNumber(v int32) *DescribeDatasetItemListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDatasetItemListResponseBody) SetPageSize(v int32) *DescribeDatasetItemListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDatasetItemListResponseBody) SetRequestId(v string) *DescribeDatasetItemListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDatasetItemListResponseBody) SetTotalCount(v int32) *DescribeDatasetItemListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDatasetItemListResponseBodyDatasetItemInfoList struct {
	CreatedTime   *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	DatasetId     *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	DatasetItemId *string `json:"DatasetItemId,omitempty" xml:"DatasetItemId,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ExpiredTime   *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	ModifiedTime  *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	Value         *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDatasetItemListResponseBodyDatasetItemInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetItemListResponseBodyDatasetItemInfoList) GoString() string {
	return s.String()
}

func (s *DescribeDatasetItemListResponseBodyDatasetItemInfoList) SetCreatedTime(v string) *DescribeDatasetItemListResponseBodyDatasetItemInfoList {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDatasetItemListResponseBodyDatasetItemInfoList) SetDatasetId(v string) *DescribeDatasetItemListResponseBodyDatasetItemInfoList {
	s.DatasetId = &v
	return s
}

func (s *DescribeDatasetItemListResponseBodyDatasetItemInfoList) SetDatasetItemId(v string) *DescribeDatasetItemListResponseBodyDatasetItemInfoList {
	s.DatasetItemId = &v
	return s
}

func (s *DescribeDatasetItemListResponseBodyDatasetItemInfoList) SetDescription(v string) *DescribeDatasetItemListResponseBodyDatasetItemInfoList {
	s.Description = &v
	return s
}

func (s *DescribeDatasetItemListResponseBodyDatasetItemInfoList) SetExpiredTime(v string) *DescribeDatasetItemListResponseBodyDatasetItemInfoList {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDatasetItemListResponseBodyDatasetItemInfoList) SetModifiedTime(v string) *DescribeDatasetItemListResponseBodyDatasetItemInfoList {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeDatasetItemListResponseBodyDatasetItemInfoList) SetValue(v string) *DescribeDatasetItemListResponseBodyDatasetItemInfoList {
	s.Value = &v
	return s
}

type DescribeDatasetItemListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDatasetItemListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDatasetItemListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetItemListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDatasetItemListResponse) SetHeaders(v map[string]*string) *DescribeDatasetItemListResponse {
	s.Headers = v
	return s
}

func (s *DescribeDatasetItemListResponse) SetStatusCode(v int32) *DescribeDatasetItemListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDatasetItemListResponse) SetBody(v *DescribeDatasetItemListResponseBody) *DescribeDatasetItemListResponse {
	s.Body = v
	return s
}

type DescribeDatasetListRequest struct {
	DatasetIds    *string `json:"DatasetIds,omitempty" xml:"DatasetIds,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeDatasetListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDatasetListRequest) SetDatasetIds(v string) *DescribeDatasetListRequest {
	s.DatasetIds = &v
	return s
}

func (s *DescribeDatasetListRequest) SetPageNumber(v int32) *DescribeDatasetListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDatasetListRequest) SetPageSize(v int32) *DescribeDatasetListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDatasetListRequest) SetSecurityToken(v string) *DescribeDatasetListRequest {
	s.SecurityToken = &v
	return s
}

type DescribeDatasetListResponseBody struct {
	DatasetInfoList []*DescribeDatasetListResponseBodyDatasetInfoList `json:"DatasetInfoList,omitempty" xml:"DatasetInfoList,omitempty" type:"Repeated"`
	PageNumber      *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId       *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount      *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDatasetListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDatasetListResponseBody) SetDatasetInfoList(v []*DescribeDatasetListResponseBodyDatasetInfoList) *DescribeDatasetListResponseBody {
	s.DatasetInfoList = v
	return s
}

func (s *DescribeDatasetListResponseBody) SetPageNumber(v int32) *DescribeDatasetListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDatasetListResponseBody) SetPageSize(v int32) *DescribeDatasetListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDatasetListResponseBody) SetRequestId(v string) *DescribeDatasetListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDatasetListResponseBody) SetTotalCount(v int32) *DescribeDatasetListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDatasetListResponseBodyDatasetInfoList struct {
	CreatedTime  *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	DatasetId    *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	DatasetName  *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	DatasetType  *string `json:"DatasetType,omitempty" xml:"DatasetType,omitempty"`
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
}

func (s DescribeDatasetListResponseBodyDatasetInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetListResponseBodyDatasetInfoList) GoString() string {
	return s.String()
}

func (s *DescribeDatasetListResponseBodyDatasetInfoList) SetCreatedTime(v string) *DescribeDatasetListResponseBodyDatasetInfoList {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDatasetListResponseBodyDatasetInfoList) SetDatasetId(v string) *DescribeDatasetListResponseBodyDatasetInfoList {
	s.DatasetId = &v
	return s
}

func (s *DescribeDatasetListResponseBodyDatasetInfoList) SetDatasetName(v string) *DescribeDatasetListResponseBodyDatasetInfoList {
	s.DatasetName = &v
	return s
}

func (s *DescribeDatasetListResponseBodyDatasetInfoList) SetDatasetType(v string) *DescribeDatasetListResponseBodyDatasetInfoList {
	s.DatasetType = &v
	return s
}

func (s *DescribeDatasetListResponseBodyDatasetInfoList) SetModifiedTime(v string) *DescribeDatasetListResponseBodyDatasetInfoList {
	s.ModifiedTime = &v
	return s
}

type DescribeDatasetListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDatasetListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDatasetListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatasetListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDatasetListResponse) SetHeaders(v map[string]*string) *DescribeDatasetListResponse {
	s.Headers = v
	return s
}

func (s *DescribeDatasetListResponse) SetStatusCode(v int32) *DescribeDatasetListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDatasetListResponse) SetBody(v *DescribeDatasetListResponseBody) *DescribeDatasetListResponse {
	s.Body = v
	return s
}

type DescribeDeployApiTaskRequest struct {
	OperationUid  *string `json:"OperationUid,omitempty" xml:"OperationUid,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeDeployApiTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployApiTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeDeployApiTaskRequest) SetOperationUid(v string) *DescribeDeployApiTaskRequest {
	s.OperationUid = &v
	return s
}

func (s *DescribeDeployApiTaskRequest) SetSecurityToken(v string) *DescribeDeployApiTaskRequest {
	s.SecurityToken = &v
	return s
}

type DescribeDeployApiTaskResponseBody struct {
	DeployedResults *DescribeDeployApiTaskResponseBodyDeployedResults `json:"DeployedResults,omitempty" xml:"DeployedResults,omitempty" type:"Struct"`
	RequestId       *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDeployApiTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployApiTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDeployApiTaskResponseBody) SetDeployedResults(v *DescribeDeployApiTaskResponseBodyDeployedResults) *DescribeDeployApiTaskResponseBody {
	s.DeployedResults = v
	return s
}

func (s *DescribeDeployApiTaskResponseBody) SetRequestId(v string) *DescribeDeployApiTaskResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDeployApiTaskResponseBodyDeployedResults struct {
	DeployedResult []*DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult `json:"DeployedResult,omitempty" xml:"DeployedResult,omitempty" type:"Repeated"`
}

func (s DescribeDeployApiTaskResponseBodyDeployedResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployApiTaskResponseBodyDeployedResults) GoString() string {
	return s.String()
}

func (s *DescribeDeployApiTaskResponseBodyDeployedResults) SetDeployedResult(v []*DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult) *DescribeDeployApiTaskResponseBodyDeployedResults {
	s.DeployedResult = v
	return s
}

type DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult struct {
	ApiUid         *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	DeployedStatus *string `json:"DeployedStatus,omitempty" xml:"DeployedStatus,omitempty"`
	ErrorMsg       *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	GroupId        *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	StageName      *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult) GoString() string {
	return s.String()
}

func (s *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult) SetApiUid(v string) *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult {
	s.ApiUid = &v
	return s
}

func (s *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult) SetDeployedStatus(v string) *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult {
	s.DeployedStatus = &v
	return s
}

func (s *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult) SetErrorMsg(v string) *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult) SetGroupId(v string) *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult {
	s.GroupId = &v
	return s
}

func (s *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult) SetStageName(v string) *DescribeDeployApiTaskResponseBodyDeployedResultsDeployedResult {
	s.StageName = &v
	return s
}

type DescribeDeployApiTaskResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDeployApiTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDeployApiTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployApiTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeDeployApiTaskResponse) SetHeaders(v map[string]*string) *DescribeDeployApiTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeDeployApiTaskResponse) SetStatusCode(v int32) *DescribeDeployApiTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDeployApiTaskResponse) SetBody(v *DescribeDeployApiTaskResponseBody) *DescribeDeployApiTaskResponse {
	s.Body = v
	return s
}

type DescribeDeployedApiRequest struct {
	// The ID of the API.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the API group. An API group ID is generated by the system and is globally unique.
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment in which the API runs. Valid values:
	//
	// *   **RELEASE**: the production environment
	// *   **PRE**: the pre-release environment
	// *   **TEST**: the test environment
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeDeployedApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiRequest) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiRequest) SetApiId(v string) *DescribeDeployedApiRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeDeployedApiRequest) SetGroupId(v string) *DescribeDeployedApiRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeDeployedApiRequest) SetSecurityToken(v string) *DescribeDeployedApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeDeployedApiRequest) SetStageName(v string) *DescribeDeployedApiRequest {
	s.StageName = &v
	return s
}

type DescribeDeployedApiResponseBody struct {
	// The signature method used by the client. Valid values:
	//
	// *   HmacSHA256
	// *   HmacSHA1,HmacSHA256
	AllowSignatureMethod *string `json:"AllowSignatureMethod,omitempty" xml:"AllowSignatureMethod,omitempty"`
	// The ID of the API.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API.
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// The authentication method of the API. Valid values:
	//
	// *   **APP:** Only authorized apps are allowed to call the API.
	//
	// *   **ANONYMOUS**: The API can be anonymously called. In this mode, you must take note of the following rules:
	//
	//     *   All users who have obtained the API service information can call this API. API Gateway does not authenticate callers and cannot set user-specific throttling policies. If the API is made public, set API-specific throttling policies.
	AuthType *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	// The constant parameters.
	ConstantParameters *DescribeDeployedApiResponseBodyConstantParameters `json:"ConstantParameters,omitempty" xml:"ConstantParameters,omitempty" type:"Struct"`
	// The custom system parameters.
	CustomSystemParameters *DescribeDeployedApiResponseBodyCustomSystemParameters `json:"CustomSystemParameters,omitempty" xml:"CustomSystemParameters,omitempty" type:"Struct"`
	// The deployment time. Format: yyyy-mm-ddhh:mm:ss.
	DeployedTime *string `json:"DeployedTime,omitempty" xml:"DeployedTime,omitempty"`
	// The description of the parameter.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// *   Indicates whether to call the API only in an internal network. If this parameter is set to **true**, the API can be called only in an internal network.
	// *   If this parameter is set to **false**, the API can be called over the Internet and in an internal network.
	//
	// > If you do not configure this parameter when you modify the API, the original value is used.
	DisableInternet *bool `json:"DisableInternet,omitempty" xml:"DisableInternet,omitempty"`
	// The sample error codes returned by the backend service.
	//
	// For more information, see [ErrorCodeSample](~~44392~~).
	ErrorCodeSamples *DescribeDeployedApiResponseBodyErrorCodeSamples `json:"ErrorCodeSamples,omitempty" xml:"ErrorCodeSamples,omitempty" type:"Struct"`
	// The sample error response from the backend service.
	FailResultSample *string `json:"FailResultSample,omitempty" xml:"FailResultSample,omitempty"`
	// *   Indicates whether to forcibly check X-Ca-Nonce. If the **ForceNonceCheck** parameter is set to **true**, X-Ca-Nonce is forcibly checked. X-Ca-Nonce is the unique identifier of a request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
	// *   If the **ForceNonceCheck** parameter is set to **false**, the X-Ca-Nonce is not checked. Default value: false.
	ForceNonceCheck *bool `json:"ForceNonceCheck,omitempty" xml:"ForceNonceCheck,omitempty"`
	// The ID of the API group.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The configuration items of the third-party OpenID Connect authentication method.
	OpenIdConnectConfig *DescribeDeployedApiResponseBodyOpenIdConnectConfig `json:"OpenIdConnectConfig,omitempty" xml:"OpenIdConnectConfig,omitempty" type:"Struct"`
	// The region in which the API group resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The configuration items of API requests sent by the consumer to API Gateway.
	//
	// For more information, see [RequestConfig](~~43985~~).
	RequestConfig *DescribeDeployedApiResponseBodyRequestConfig `json:"RequestConfig,omitempty" xml:"RequestConfig,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The parameters of API requests sent by the consumer to API Gateway.
	//
	// For more information, see [RequestParameter](~~43986~~).
	RequestParameters *DescribeDeployedApiResponseBodyRequestParameters `json:"RequestParameters,omitempty" xml:"RequestParameters,omitempty" type:"Struct"`
	// The return description of the API.
	ResultBodyModel *string `json:"ResultBodyModel,omitempty" xml:"ResultBodyModel,omitempty"`
	// The returned description of the API.
	ResultDescriptions *DescribeDeployedApiResponseBodyResultDescriptions `json:"ResultDescriptions,omitempty" xml:"ResultDescriptions,omitempty" type:"Struct"`
	// The sample response from the backend service.
	ResultSample *string `json:"ResultSample,omitempty" xml:"ResultSample,omitempty"`
	// The format of the response from the backend service. Valid values: JSON, TEXT, BINARY, XML, and HTML. Default value: JSON.
	ResultType *string `json:"ResultType,omitempty" xml:"ResultType,omitempty"`
	// The configuration items of API requests sent by API Gateway to the backend service.
	//
	// For more information, see [ServiceConfig](~~43987~~).
	ServiceConfig *DescribeDeployedApiResponseBodyServiceConfig `json:"ServiceConfig,omitempty" xml:"ServiceConfig,omitempty" type:"Struct"`
	// The parameters of API requests sent by API Gateway to the backend service.
	//
	// For more information, see [ServiceParameter](~~43988~~).
	ServiceParameters *DescribeDeployedApiResponseBodyServiceParameters `json:"ServiceParameters,omitempty" xml:"ServiceParameters,omitempty" type:"Struct"`
	// The mappings between parameters of requests sent by the consumer to API Gateway and parameters of requests sent by API Gateway to the backend service.
	//
	// For more information, see [ServiceParameterMap](~~43989~~).
	ServiceParametersMap *DescribeDeployedApiResponseBodyServiceParametersMap `json:"ServiceParametersMap,omitempty" xml:"ServiceParametersMap,omitempty" type:"Struct"`
	// The environment in which the API runs. Valid values:
	//
	// *   **RELEASE**: the production environment
	// *   **PRE**: the pre-release environment
	// *   **TEST**: the test environment
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The system parameters.
	SystemParameters *DescribeDeployedApiResponseBodySystemParameters `json:"SystemParameters,omitempty" xml:"SystemParameters,omitempty" type:"Struct"`
	// Indicates whether the API is public. Valid values:
	//
	// *   **PUBLIC:** The API is public. If this parameter is set to PUBLIC, the API is displayed on the APIs page for all users after the API is published to the production environment.
	// *   **PRIVATE:** The API is private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribeDeployedApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBody) SetAllowSignatureMethod(v string) *DescribeDeployedApiResponseBody {
	s.AllowSignatureMethod = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetApiId(v string) *DescribeDeployedApiResponseBody {
	s.ApiId = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetApiName(v string) *DescribeDeployedApiResponseBody {
	s.ApiName = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetAuthType(v string) *DescribeDeployedApiResponseBody {
	s.AuthType = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetConstantParameters(v *DescribeDeployedApiResponseBodyConstantParameters) *DescribeDeployedApiResponseBody {
	s.ConstantParameters = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetCustomSystemParameters(v *DescribeDeployedApiResponseBodyCustomSystemParameters) *DescribeDeployedApiResponseBody {
	s.CustomSystemParameters = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetDeployedTime(v string) *DescribeDeployedApiResponseBody {
	s.DeployedTime = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetDescription(v string) *DescribeDeployedApiResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetDisableInternet(v bool) *DescribeDeployedApiResponseBody {
	s.DisableInternet = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetErrorCodeSamples(v *DescribeDeployedApiResponseBodyErrorCodeSamples) *DescribeDeployedApiResponseBody {
	s.ErrorCodeSamples = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetFailResultSample(v string) *DescribeDeployedApiResponseBody {
	s.FailResultSample = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetForceNonceCheck(v bool) *DescribeDeployedApiResponseBody {
	s.ForceNonceCheck = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetGroupId(v string) *DescribeDeployedApiResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetGroupName(v string) *DescribeDeployedApiResponseBody {
	s.GroupName = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetOpenIdConnectConfig(v *DescribeDeployedApiResponseBodyOpenIdConnectConfig) *DescribeDeployedApiResponseBody {
	s.OpenIdConnectConfig = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetRegionId(v string) *DescribeDeployedApiResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetRequestConfig(v *DescribeDeployedApiResponseBodyRequestConfig) *DescribeDeployedApiResponseBody {
	s.RequestConfig = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetRequestId(v string) *DescribeDeployedApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetRequestParameters(v *DescribeDeployedApiResponseBodyRequestParameters) *DescribeDeployedApiResponseBody {
	s.RequestParameters = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetResultBodyModel(v string) *DescribeDeployedApiResponseBody {
	s.ResultBodyModel = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetResultDescriptions(v *DescribeDeployedApiResponseBodyResultDescriptions) *DescribeDeployedApiResponseBody {
	s.ResultDescriptions = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetResultSample(v string) *DescribeDeployedApiResponseBody {
	s.ResultSample = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetResultType(v string) *DescribeDeployedApiResponseBody {
	s.ResultType = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetServiceConfig(v *DescribeDeployedApiResponseBodyServiceConfig) *DescribeDeployedApiResponseBody {
	s.ServiceConfig = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetServiceParameters(v *DescribeDeployedApiResponseBodyServiceParameters) *DescribeDeployedApiResponseBody {
	s.ServiceParameters = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetServiceParametersMap(v *DescribeDeployedApiResponseBodyServiceParametersMap) *DescribeDeployedApiResponseBody {
	s.ServiceParametersMap = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetStageName(v string) *DescribeDeployedApiResponseBody {
	s.StageName = &v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetSystemParameters(v *DescribeDeployedApiResponseBodySystemParameters) *DescribeDeployedApiResponseBody {
	s.SystemParameters = v
	return s
}

func (s *DescribeDeployedApiResponseBody) SetVisibility(v string) *DescribeDeployedApiResponseBody {
	s.Visibility = &v
	return s
}

type DescribeDeployedApiResponseBodyConstantParameters struct {
	ConstantParameter []*DescribeDeployedApiResponseBodyConstantParametersConstantParameter `json:"ConstantParameter,omitempty" xml:"ConstantParameter,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodyConstantParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyConstantParameters) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyConstantParameters) SetConstantParameter(v []*DescribeDeployedApiResponseBodyConstantParametersConstantParameter) *DescribeDeployedApiResponseBodyConstantParameters {
	s.ConstantParameter = v
	return s
}

type DescribeDeployedApiResponseBodyConstantParametersConstantParameter struct {
	// The constant value.
	ConstantValue *string `json:"ConstantValue,omitempty" xml:"ConstantValue,omitempty"`
	// The description of the parameter.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the backend service parameter.
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeDeployedApiResponseBodyConstantParametersConstantParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyConstantParametersConstantParameter) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyConstantParametersConstantParameter) SetConstantValue(v string) *DescribeDeployedApiResponseBodyConstantParametersConstantParameter {
	s.ConstantValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyConstantParametersConstantParameter) SetDescription(v string) *DescribeDeployedApiResponseBodyConstantParametersConstantParameter {
	s.Description = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyConstantParametersConstantParameter) SetLocation(v string) *DescribeDeployedApiResponseBodyConstantParametersConstantParameter {
	s.Location = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyConstantParametersConstantParameter) SetServiceParameterName(v string) *DescribeDeployedApiResponseBodyConstantParametersConstantParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeDeployedApiResponseBodyCustomSystemParameters struct {
	CustomSystemParameter []*DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter `json:"CustomSystemParameter,omitempty" xml:"CustomSystemParameter,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodyCustomSystemParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyCustomSystemParameters) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyCustomSystemParameters) SetCustomSystemParameter(v []*DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter) *DescribeDeployedApiResponseBodyCustomSystemParameters {
	s.CustomSystemParameter = v
	return s
}

type DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter struct {
	// The sample value.
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The description of the parameter.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the custom system parameter.
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The name of the corresponding backend parameter.
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter) SetDemoValue(v string) *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter) SetDescription(v string) *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.Description = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter) SetLocation(v string) *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.Location = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter) SetParameterName(v string) *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.ParameterName = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter) SetServiceParameterName(v string) *DescribeDeployedApiResponseBodyCustomSystemParametersCustomSystemParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeDeployedApiResponseBodyErrorCodeSamples struct {
	ErrorCodeSample []*DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample `json:"ErrorCodeSample,omitempty" xml:"ErrorCodeSample,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodyErrorCodeSamples) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyErrorCodeSamples) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyErrorCodeSamples) SetErrorCodeSample(v []*DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample) *DescribeDeployedApiResponseBodyErrorCodeSamples {
	s.ErrorCodeSample = v
	return s
}

type DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample struct {
	// The error code returned if the request failed.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The description of the error.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The error message returned if the request failed.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample) SetCode(v string) *DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Code = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample) SetDescription(v string) *DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Description = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample) SetMessage(v string) *DescribeDeployedApiResponseBodyErrorCodeSamplesErrorCodeSample {
	s.Message = &v
	return s
}

type DescribeDeployedApiResponseBodyOpenIdConnectConfig struct {
	// The name of the parameter that corresponds to the token.
	IdTokenParamName *string `json:"IdTokenParamName,omitempty" xml:"IdTokenParamName,omitempty"`
	// The OpenID Connect mode. Valid values:
	//
	// *   **IDTOKEN:** OpenID Connect calls the authentication API to issue tokens. If the value is specified, the PublicKeyId parameter and the PublicKey parameter are required.
	// *   **BUSINESS:** OpenID Connect calls the business API to verify identities by using existing tokens. If this value is specified, the IdTokenParamName parameter is required.
	OpenIdApiType *string `json:"OpenIdApiType,omitempty" xml:"OpenIdApiType,omitempty"`
	// The public key of the API.
	PublicKey *string `json:"PublicKey,omitempty" xml:"PublicKey,omitempty"`
	// The ID of the public key.
	PublicKeyId *string `json:"PublicKeyId,omitempty" xml:"PublicKeyId,omitempty"`
}

func (s DescribeDeployedApiResponseBodyOpenIdConnectConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyOpenIdConnectConfig) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyOpenIdConnectConfig) SetIdTokenParamName(v string) *DescribeDeployedApiResponseBodyOpenIdConnectConfig {
	s.IdTokenParamName = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyOpenIdConnectConfig) SetOpenIdApiType(v string) *DescribeDeployedApiResponseBodyOpenIdConnectConfig {
	s.OpenIdApiType = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyOpenIdConnectConfig) SetPublicKey(v string) *DescribeDeployedApiResponseBodyOpenIdConnectConfig {
	s.PublicKey = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyOpenIdConnectConfig) SetPublicKeyId(v string) *DescribeDeployedApiResponseBodyOpenIdConnectConfig {
	s.PublicKeyId = &v
	return s
}

type DescribeDeployedApiResponseBodyRequestConfig struct {
	// This parameter takes effect only when the **RequestMode** parameter is set to **MAPPING**.
	//
	// The format in which data is transmitted to the server for POST and PUT requests. Valid values: **FORM** and **STREAM**. FORM indicates that data is transmitted in the key-value pair format. STREAM indicates that data is transmitted as byte streams.
	BodyFormat *string `json:"BodyFormat,omitempty" xml:"BodyFormat,omitempty"`
	// The body model.
	BodyModel *string `json:"BodyModel,omitempty" xml:"BodyModel,omitempty"`
	// The description of the request body.
	PostBodyDescription *string `json:"PostBodyDescription,omitempty" xml:"PostBodyDescription,omitempty"`
	// The HTTP method that is used to make the request. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.
	RequestHttpMethod *string `json:"RequestHttpMethod,omitempty" xml:"RequestHttpMethod,omitempty"`
	// The request mode. Valid values:
	//
	// *   MAPPING: Parameters are mapped. Unknown parameters are filtered out.
	// *   PASSTHROUGH: Parameters are passed through.
	// *   MAPPING_PASSTHROUGH: Parameters are mapped. Unknown parameters are passed through.
	RequestMode *string `json:"RequestMode,omitempty" xml:"RequestMode,omitempty"`
	// The path of the API request. If the complete API URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, The path of the API request is ` /object/add  `.
	RequestPath *string `json:"RequestPath,omitempty" xml:"RequestPath,omitempty"`
	// The protocol type supported by the API. Valid values: HTTP, HTTPS, and WebSocket. Separate multiple values with commas (,). Example: "HTTP,HTTPS".
	RequestProtocol *string `json:"RequestProtocol,omitempty" xml:"RequestProtocol,omitempty"`
}

func (s DescribeDeployedApiResponseBodyRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyRequestConfig) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyRequestConfig) SetBodyFormat(v string) *DescribeDeployedApiResponseBodyRequestConfig {
	s.BodyFormat = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestConfig) SetBodyModel(v string) *DescribeDeployedApiResponseBodyRequestConfig {
	s.BodyModel = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestConfig) SetPostBodyDescription(v string) *DescribeDeployedApiResponseBodyRequestConfig {
	s.PostBodyDescription = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestConfig) SetRequestHttpMethod(v string) *DescribeDeployedApiResponseBodyRequestConfig {
	s.RequestHttpMethod = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestConfig) SetRequestMode(v string) *DescribeDeployedApiResponseBodyRequestConfig {
	s.RequestMode = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestConfig) SetRequestPath(v string) *DescribeDeployedApiResponseBodyRequestConfig {
	s.RequestPath = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestConfig) SetRequestProtocol(v string) *DescribeDeployedApiResponseBodyRequestConfig {
	s.RequestProtocol = &v
	return s
}

type DescribeDeployedApiResponseBodyRequestParameters struct {
	RequestParameter []*DescribeDeployedApiResponseBodyRequestParametersRequestParameter `json:"RequestParameter,omitempty" xml:"RequestParameter,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodyRequestParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyRequestParameters) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyRequestParameters) SetRequestParameter(v []*DescribeDeployedApiResponseBodyRequestParametersRequestParameter) *DescribeDeployedApiResponseBodyRequestParameters {
	s.RequestParameter = v
	return s
}

type DescribeDeployedApiResponseBodyRequestParametersRequestParameter struct {
	// The name of the API parameter.
	ApiParameterName *string `json:"ApiParameterName,omitempty" xml:"ApiParameterName,omitempty"`
	// The type of the array element.
	ArrayItemsType *string `json:"ArrayItemsType,omitempty" xml:"ArrayItemsType,omitempty"`
	// The default value.
	DefaultValue *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	// The sample value.
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The parameter description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The order in the document.
	DocOrder *int32 `json:"DocOrder,omitempty" xml:"DocOrder,omitempty"`
	// Indicates whether the document is public. Valid values: **PUBLIC** and **PRIVATE**.
	DocShow *string `json:"DocShow,omitempty" xml:"DocShow,omitempty"`
	// The hash values that can be entered when **ParameterType** is set to Int, Long, Float, Double, or String. Separate different values with commas (,). Examples: 1,2,3,4,9 and A,B,C,E,F.
	EnumValue *string `json:"EnumValue,omitempty" xml:"EnumValue,omitempty"`
	// JSON scheme
	JsonScheme *string `json:"JsonScheme,omitempty" xml:"JsonScheme,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The maximum length of the **ParameterType** parameter when the parameter is set to String.
	MaxLength *int64 `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	// The maximum value of the **ParameterType** parameter when the parameter is set to Int, Long, Float, or Double.
	MaxValue *int64 `json:"MaxValue,omitempty" xml:"MaxValue,omitempty"`
	// The minimum length of the **ParameterType** parameter when the parameter is set to String.
	MinLength *int64 `json:"MinLength,omitempty" xml:"MinLength,omitempty"`
	// The minimum value of the **ParameterType** parameter when the parameter is set to Int, Long, Float, or Double.
	MinValue *int64 `json:"MinValue,omitempty" xml:"MinValue,omitempty"`
	// The type of the parameter. Valid values: String, Int, Long, Float, Double, and Boolean.
	ParameterType *string `json:"ParameterType,omitempty" xml:"ParameterType,omitempty"`
	// The regular expression used for parameter validation when **ParameterType** is set to String.
	RegularExpression *string `json:"RegularExpression,omitempty" xml:"RegularExpression,omitempty"`
	// Indicates whether the parameter is required. Valid values: **REQUIRED** and **OPTIONAL**.
	Required *string `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s DescribeDeployedApiResponseBodyRequestParametersRequestParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyRequestParametersRequestParameter) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetApiParameterName(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.ApiParameterName = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetArrayItemsType(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.ArrayItemsType = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetDefaultValue(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.DefaultValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetDemoValue(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetDescription(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.Description = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetDocOrder(v int32) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.DocOrder = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetDocShow(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.DocShow = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetEnumValue(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.EnumValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetJsonScheme(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.JsonScheme = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetLocation(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.Location = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetMaxLength(v int64) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.MaxLength = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetMaxValue(v int64) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.MaxValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetMinLength(v int64) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.MinLength = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetMinValue(v int64) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.MinValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetParameterType(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.ParameterType = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetRegularExpression(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.RegularExpression = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyRequestParametersRequestParameter) SetRequired(v string) *DescribeDeployedApiResponseBodyRequestParametersRequestParameter {
	s.Required = &v
	return s
}

type DescribeDeployedApiResponseBodyResultDescriptions struct {
	ResultDescription []*DescribeDeployedApiResponseBodyResultDescriptionsResultDescription `json:"ResultDescription,omitempty" xml:"ResultDescription,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodyResultDescriptions) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyResultDescriptions) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyResultDescriptions) SetResultDescription(v []*DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) *DescribeDeployedApiResponseBodyResultDescriptions {
	s.ResultDescription = v
	return s
}

type DescribeDeployedApiResponseBodyResultDescriptionsResultDescription struct {
	// The description of the parameter.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	HasChild    *bool   `json:"HasChild,omitempty" xml:"HasChild,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Key         *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// Indicates whether the parameter is required.
	Mandatory *bool   `json:"Mandatory,omitempty" xml:"Mandatory,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Pid       *string `json:"Pid,omitempty" xml:"Pid,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) SetDescription(v string) *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription {
	s.Description = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) SetHasChild(v bool) *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription {
	s.HasChild = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) SetId(v string) *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription {
	s.Id = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) SetKey(v string) *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription {
	s.Key = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) SetMandatory(v bool) *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription {
	s.Mandatory = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) SetName(v string) *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription {
	s.Name = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) SetPid(v string) *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription {
	s.Pid = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription) SetType(v string) *DescribeDeployedApiResponseBodyResultDescriptionsResultDescription {
	s.Type = &v
	return s
}

type DescribeDeployedApiResponseBodyServiceConfig struct {
	// The backend configuration items when the backend service is Function Compute.
	FunctionComputeConfig *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig `json:"FunctionComputeConfig,omitempty" xml:"FunctionComputeConfig,omitempty" type:"Struct"`
	// Indicates whether the Mock mode is enabled. Valid values:
	//
	// *   **TRUE:** The Mock mode is enabled.
	// *   **FALSE:** The Mock mode is not enabled.
	Mock *string `json:"Mock,omitempty" xml:"Mock,omitempty"`
	// The mock headers.
	MockHeaders *DescribeDeployedApiResponseBodyServiceConfigMockHeaders `json:"MockHeaders,omitempty" xml:"MockHeaders,omitempty" type:"Struct"`
	// The result returned when the Mock mode is enabled.
	MockResult *string `json:"MockResult,omitempty" xml:"MockResult,omitempty"`
	// The status code returned for service mock.
	MockStatusCode *int32 `json:"MockStatusCode,omitempty" xml:"MockStatusCode,omitempty"`
	// The URL that is used to call the backend service. If the complete URL of a backend service is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the value of ServiceAddress is **http://api.a.com:8080**.``
	ServiceAddress *string `json:"ServiceAddress,omitempty" xml:"ServiceAddress,omitempty"`
	// The HTTP method that is used to call a backend service. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.
	ServiceHttpMethod *string `json:"ServiceHttpMethod,omitempty" xml:"ServiceHttpMethod,omitempty"`
	// The path that is used to call the backend service. If the complete URL of a backend service is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the value of the **ServicePath** parameter is `/object/add`.
	ServicePath *string `json:"ServicePath,omitempty" xml:"ServicePath,omitempty"`
	// The backend service protocol. Only HTTP, HTTPS, and Function Compute are supported.
	ServiceProtocol *string `json:"ServiceProtocol,omitempty" xml:"ServiceProtocol,omitempty"`
	// The timeout period of the backend service. Unit: milliseconds.
	ServiceTimeout *int32 `json:"ServiceTimeout,omitempty" xml:"ServiceTimeout,omitempty"`
	// Indicates whether to enable the VPC channel. Valid values:
	//
	// *   **TRUE**: The VPC channel is enabled. You can enable a VPC channel only after you create the corresponding access authorization for the VPC.
	// *   **FALSE**: The VPC channel is not enabled.
	ServiceVpcEnable *string `json:"ServiceVpcEnable,omitempty" xml:"ServiceVpcEnable,omitempty"`
	// The configuration items of the VPC channel.
	VpcConfig *DescribeDeployedApiResponseBodyServiceConfigVpcConfig `json:"VpcConfig,omitempty" xml:"VpcConfig,omitempty" type:"Struct"`
	// The ID of the VPC.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeDeployedApiResponseBodyServiceConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceConfig) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetFunctionComputeConfig(v *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) *DescribeDeployedApiResponseBodyServiceConfig {
	s.FunctionComputeConfig = v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetMock(v string) *DescribeDeployedApiResponseBodyServiceConfig {
	s.Mock = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetMockHeaders(v *DescribeDeployedApiResponseBodyServiceConfigMockHeaders) *DescribeDeployedApiResponseBodyServiceConfig {
	s.MockHeaders = v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetMockResult(v string) *DescribeDeployedApiResponseBodyServiceConfig {
	s.MockResult = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetMockStatusCode(v int32) *DescribeDeployedApiResponseBodyServiceConfig {
	s.MockStatusCode = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetServiceAddress(v string) *DescribeDeployedApiResponseBodyServiceConfig {
	s.ServiceAddress = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetServiceHttpMethod(v string) *DescribeDeployedApiResponseBodyServiceConfig {
	s.ServiceHttpMethod = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetServicePath(v string) *DescribeDeployedApiResponseBodyServiceConfig {
	s.ServicePath = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetServiceProtocol(v string) *DescribeDeployedApiResponseBodyServiceConfig {
	s.ServiceProtocol = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetServiceTimeout(v int32) *DescribeDeployedApiResponseBodyServiceConfig {
	s.ServiceTimeout = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetServiceVpcEnable(v string) *DescribeDeployedApiResponseBodyServiceConfig {
	s.ServiceVpcEnable = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetVpcConfig(v *DescribeDeployedApiResponseBodyServiceConfigVpcConfig) *DescribeDeployedApiResponseBodyServiceConfig {
	s.VpcConfig = v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfig) SetVpcId(v string) *DescribeDeployedApiResponseBodyServiceConfig {
	s.VpcId = &v
	return s
}

type DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig struct {
	// The ContentType header used when a backend HTTP service is called. Valid values:
	//
	// *   **DEFAULT:** the default header in API Gateway
	// *   **CUSTOM:** a custom header
	// *   **CLIENT:** the ContentType header specified by the client
	ContentTypeCatagory *string `json:"ContentTypeCatagory,omitempty" xml:"ContentTypeCatagory,omitempty"`
	// The value of the ContentType header when the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.
	ContentTypeValue *string `json:"ContentTypeValue,omitempty" xml:"ContentTypeValue,omitempty"`
	// The root path of Function Compute.
	FcBaseUrl *string `json:"FcBaseUrl,omitempty" xml:"FcBaseUrl,omitempty"`
	// The type of the Function Compute instance.
	FcType *string `json:"FcType,omitempty" xml:"FcType,omitempty"`
	// The function name defined in Function Compute.
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	// The request method.
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// Indicates whether the backend receives only the service path.
	OnlyBusinessPath *bool `json:"OnlyBusinessPath,omitempty" xml:"OnlyBusinessPath,omitempty"`
	// The API request path.
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The alias of the function.
	Qualifier *string `json:"Qualifier,omitempty" xml:"Qualifier,omitempty"`
	// The region in which the instance resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ARN of the RAM role assumed by API Gateway to access Function Compute.
	RoleArn *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	// The service name defined in Function Compute.
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetContentTypeCatagory(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.ContentTypeCatagory = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetContentTypeValue(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.ContentTypeValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetFcBaseUrl(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.FcBaseUrl = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetFcType(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.FcType = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetFunctionName(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.FunctionName = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetMethod(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.Method = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetOnlyBusinessPath(v bool) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.OnlyBusinessPath = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetPath(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.Path = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetQualifier(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.Qualifier = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetRegionId(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.RegionId = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetRoleArn(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.RoleArn = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig) SetServiceName(v string) *DescribeDeployedApiResponseBodyServiceConfigFunctionComputeConfig {
	s.ServiceName = &v
	return s
}

type DescribeDeployedApiResponseBodyServiceConfigMockHeaders struct {
	MockHeader []*DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader `json:"MockHeader,omitempty" xml:"MockHeader,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodyServiceConfigMockHeaders) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceConfigMockHeaders) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceConfigMockHeaders) SetMockHeader(v []*DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader) *DescribeDeployedApiResponseBodyServiceConfigMockHeaders {
	s.MockHeader = v
	return s
}

type DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader struct {
	// The name of the HTTP header parameter.
	HeaderName *string `json:"HeaderName,omitempty" xml:"HeaderName,omitempty"`
	// The value of the HTTP header parameter.
	HeaderValue *string `json:"HeaderValue,omitempty" xml:"HeaderValue,omitempty"`
}

func (s DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader) SetHeaderName(v string) *DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader {
	s.HeaderName = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader) SetHeaderValue(v string) *DescribeDeployedApiResponseBodyServiceConfigMockHeadersMockHeader {
	s.HeaderValue = &v
	return s
}

type DescribeDeployedApiResponseBodyServiceConfigVpcConfig struct {
	// The ID of the Elastic Compute Service (ECS) or Server Load Balancer (SLB) instance in the VPC.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the VPC access authorization.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The port number that corresponds to the instance.
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the VPC.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeDeployedApiResponseBodyServiceConfigVpcConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceConfigVpcConfig) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceConfigVpcConfig) SetInstanceId(v string) *DescribeDeployedApiResponseBodyServiceConfigVpcConfig {
	s.InstanceId = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigVpcConfig) SetName(v string) *DescribeDeployedApiResponseBodyServiceConfigVpcConfig {
	s.Name = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigVpcConfig) SetPort(v int32) *DescribeDeployedApiResponseBodyServiceConfigVpcConfig {
	s.Port = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceConfigVpcConfig) SetVpcId(v string) *DescribeDeployedApiResponseBodyServiceConfigVpcConfig {
	s.VpcId = &v
	return s
}

type DescribeDeployedApiResponseBodyServiceParameters struct {
	ServiceParameter []*DescribeDeployedApiResponseBodyServiceParametersServiceParameter `json:"ServiceParameter,omitempty" xml:"ServiceParameter,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodyServiceParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceParameters) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceParameters) SetServiceParameter(v []*DescribeDeployedApiResponseBodyServiceParametersServiceParameter) *DescribeDeployedApiResponseBodyServiceParameters {
	s.ServiceParameter = v
	return s
}

type DescribeDeployedApiResponseBodyServiceParametersServiceParameter struct {
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The data type of the backend service parameter. Valid values: STRING, NUMBER, and BOOLEAN.
	ParameterType *string `json:"ParameterType,omitempty" xml:"ParameterType,omitempty"`
	// The name of the backend service parameter.
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeDeployedApiResponseBodyServiceParametersServiceParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceParametersServiceParameter) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceParametersServiceParameter) SetLocation(v string) *DescribeDeployedApiResponseBodyServiceParametersServiceParameter {
	s.Location = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceParametersServiceParameter) SetParameterType(v string) *DescribeDeployedApiResponseBodyServiceParametersServiceParameter {
	s.ParameterType = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceParametersServiceParameter) SetServiceParameterName(v string) *DescribeDeployedApiResponseBodyServiceParametersServiceParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeDeployedApiResponseBodyServiceParametersMap struct {
	ServiceParameterMap []*DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap `json:"ServiceParameterMap,omitempty" xml:"ServiceParameterMap,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodyServiceParametersMap) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceParametersMap) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceParametersMap) SetServiceParameterMap(v []*DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap) *DescribeDeployedApiResponseBodyServiceParametersMap {
	s.ServiceParameterMap = v
	return s
}

type DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap struct {
	// The name of the frontend input parameter.
	RequestParameterName *string `json:"RequestParameterName,omitempty" xml:"RequestParameterName,omitempty"`
	// The name of the backend service parameter.
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap) SetRequestParameterName(v string) *DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap {
	s.RequestParameterName = &v
	return s
}

func (s *DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap) SetServiceParameterName(v string) *DescribeDeployedApiResponseBodyServiceParametersMapServiceParameterMap {
	s.ServiceParameterName = &v
	return s
}

type DescribeDeployedApiResponseBodySystemParameters struct {
	SystemParameter []*DescribeDeployedApiResponseBodySystemParametersSystemParameter `json:"SystemParameter,omitempty" xml:"SystemParameter,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApiResponseBodySystemParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodySystemParameters) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodySystemParameters) SetSystemParameter(v []*DescribeDeployedApiResponseBodySystemParametersSystemParameter) *DescribeDeployedApiResponseBodySystemParameters {
	s.SystemParameter = v
	return s
}

type DescribeDeployedApiResponseBodySystemParametersSystemParameter struct {
	// The example.
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The description of the parameter.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The parameter location. Valid values: BODY, HEAD, QUERY, and PATH.
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// The name of the system parameter. Valid values: CaClientIp, CaDomain, CaRequestHandleTime, CaAppId, CaRequestId, CaHttpSchema, CaProxy.
	ParameterName *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	// The name of the corresponding backend parameter.
	ServiceParameterName *string `json:"ServiceParameterName,omitempty" xml:"ServiceParameterName,omitempty"`
}

func (s DescribeDeployedApiResponseBodySystemParametersSystemParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponseBodySystemParametersSystemParameter) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponseBodySystemParametersSystemParameter) SetDemoValue(v string) *DescribeDeployedApiResponseBodySystemParametersSystemParameter {
	s.DemoValue = &v
	return s
}

func (s *DescribeDeployedApiResponseBodySystemParametersSystemParameter) SetDescription(v string) *DescribeDeployedApiResponseBodySystemParametersSystemParameter {
	s.Description = &v
	return s
}

func (s *DescribeDeployedApiResponseBodySystemParametersSystemParameter) SetLocation(v string) *DescribeDeployedApiResponseBodySystemParametersSystemParameter {
	s.Location = &v
	return s
}

func (s *DescribeDeployedApiResponseBodySystemParametersSystemParameter) SetParameterName(v string) *DescribeDeployedApiResponseBodySystemParametersSystemParameter {
	s.ParameterName = &v
	return s
}

func (s *DescribeDeployedApiResponseBodySystemParametersSystemParameter) SetServiceParameterName(v string) *DescribeDeployedApiResponseBodySystemParametersSystemParameter {
	s.ServiceParameterName = &v
	return s
}

type DescribeDeployedApiResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDeployedApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDeployedApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApiResponse) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApiResponse) SetHeaders(v map[string]*string) *DescribeDeployedApiResponse {
	s.Headers = v
	return s
}

func (s *DescribeDeployedApiResponse) SetStatusCode(v int32) *DescribeDeployedApiResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDeployedApiResponse) SetBody(v *DescribeDeployedApiResponseBody) *DescribeDeployedApiResponse {
	s.Body = v
	return s
}

type DescribeDeployedApisRequest struct {
	ApiId         *string                           `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiMethod     *string                           `json:"ApiMethod,omitempty" xml:"ApiMethod,omitempty"`
	ApiName       *string                           `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiPath       *string                           `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	EnableTagAuth *bool                             `json:"EnableTagAuth,omitempty" xml:"EnableTagAuth,omitempty"`
	GroupId       *string                           `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	PageNumber    *int32                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string                           `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageName     *string                           `json:"StageName,omitempty" xml:"StageName,omitempty"`
	Tag           []*DescribeDeployedApisRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApisRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApisRequest) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApisRequest) SetApiId(v string) *DescribeDeployedApisRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetApiMethod(v string) *DescribeDeployedApisRequest {
	s.ApiMethod = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetApiName(v string) *DescribeDeployedApisRequest {
	s.ApiName = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetApiPath(v string) *DescribeDeployedApisRequest {
	s.ApiPath = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetEnableTagAuth(v bool) *DescribeDeployedApisRequest {
	s.EnableTagAuth = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetGroupId(v string) *DescribeDeployedApisRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetPageNumber(v int32) *DescribeDeployedApisRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetPageSize(v int32) *DescribeDeployedApisRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetSecurityToken(v string) *DescribeDeployedApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetStageName(v string) *DescribeDeployedApisRequest {
	s.StageName = &v
	return s
}

func (s *DescribeDeployedApisRequest) SetTag(v []*DescribeDeployedApisRequestTag) *DescribeDeployedApisRequest {
	s.Tag = v
	return s
}

type DescribeDeployedApisRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDeployedApisRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApisRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApisRequestTag) SetKey(v string) *DescribeDeployedApisRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDeployedApisRequestTag) SetValue(v string) *DescribeDeployedApisRequestTag {
	s.Value = &v
	return s
}

type DescribeDeployedApisResponseBody struct {
	DeployedApis *DescribeDeployedApisResponseBodyDeployedApis `json:"DeployedApis,omitempty" xml:"DeployedApis,omitempty" type:"Struct"`
	PageNumber   *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount   *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDeployedApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApisResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApisResponseBody) SetDeployedApis(v *DescribeDeployedApisResponseBodyDeployedApis) *DescribeDeployedApisResponseBody {
	s.DeployedApis = v
	return s
}

func (s *DescribeDeployedApisResponseBody) SetPageNumber(v int32) *DescribeDeployedApisResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDeployedApisResponseBody) SetPageSize(v int32) *DescribeDeployedApisResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDeployedApisResponseBody) SetRequestId(v string) *DescribeDeployedApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDeployedApisResponseBody) SetTotalCount(v int32) *DescribeDeployedApisResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDeployedApisResponseBodyDeployedApis struct {
	DeployedApiItem []*DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem `json:"DeployedApiItem,omitempty" xml:"DeployedApiItem,omitempty" type:"Repeated"`
}

func (s DescribeDeployedApisResponseBodyDeployedApis) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApisResponseBodyDeployedApis) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApisResponseBodyDeployedApis) SetDeployedApiItem(v []*DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) *DescribeDeployedApisResponseBodyDeployedApis {
	s.DeployedApiItem = v
	return s
}

type DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem struct {
	ApiId        *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiMethod    *string `json:"ApiMethod,omitempty" xml:"ApiMethod,omitempty"`
	ApiName      *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiPath      *string `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	DeployedTime *string `json:"DeployedTime,omitempty" xml:"DeployedTime,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId      *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName    *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StageName    *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	Visibility   *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetApiId(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.ApiId = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetApiMethod(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.ApiMethod = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetApiName(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.ApiName = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetApiPath(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.ApiPath = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetDeployedTime(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.DeployedTime = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetDescription(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.Description = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetGroupId(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.GroupId = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetGroupName(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.GroupName = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetRegionId(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.RegionId = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetStageName(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.StageName = &v
	return s
}

func (s *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem) SetVisibility(v string) *DescribeDeployedApisResponseBodyDeployedApisDeployedApiItem {
	s.Visibility = &v
	return s
}

type DescribeDeployedApisResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDeployedApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDeployedApisResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeployedApisResponse) GoString() string {
	return s.String()
}

func (s *DescribeDeployedApisResponse) SetHeaders(v map[string]*string) *DescribeDeployedApisResponse {
	s.Headers = v
	return s
}

func (s *DescribeDeployedApisResponse) SetStatusCode(v int32) *DescribeDeployedApisResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDeployedApisResponse) SetBody(v *DescribeDeployedApisResponseBody) *DescribeDeployedApisResponse {
	s.Body = v
	return s
}

type DescribeDomainRequest struct {
	// The custom domain name.
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The private key of the SSL certificate.
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainRequest) GoString() string {
	return s.String()
}

func (s *DescribeDomainRequest) SetDomainName(v string) *DescribeDomainRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeDomainRequest) SetGroupId(v string) *DescribeDomainRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeDomainRequest) SetSecurityToken(v string) *DescribeDomainRequest {
	s.SecurityToken = &v
	return s
}

type DescribeDomainResponseBody struct {
	// The domain name resolution status. Valid values:
	//
	// *   RESOLVED: The domain name has been resolved.
	// *   UNRESOLVED: The domain name has not been resolved.
	CertificateBody *string `json:"CertificateBody,omitempty" xml:"CertificateBody,omitempty"`
	// The ID of the request.
	CertificateId *string `json:"CertificateId,omitempty" xml:"CertificateId,omitempty"`
	// The ID of the API group to which the domain name is bound. This ID is generated by the system and globally unique.
	CertificateName *string `json:"CertificateName,omitempty" xml:"CertificateName,omitempty"`
	// The binding status of the custom domain name. Valid values:
	//
	// *   BINDING: The domain name has been bound.
	// *   BOUND: The domain name has not been bound.
	CertificatePrivateKey *string `json:"CertificatePrivateKey,omitempty" xml:"CertificatePrivateKey,omitempty"`
	CertificateValidEnd   *int64  `json:"CertificateValidEnd,omitempty" xml:"CertificateValidEnd,omitempty"`
	CertificateValidStart *int64  `json:"CertificateValidStart,omitempty" xml:"CertificateValidStart,omitempty"`
	// The domain name does not have an ICP filing.
	DomainBindingStatus *string `json:"DomainBindingStatus,omitempty" xml:"DomainBindingStatus,omitempty"`
	// Queries details about a bound custom domain name, including the automatically assigned second-level domain name, custom domain name, and SSL certificate.
	DomainCNAMEStatus *string `json:"DomainCNAMEStatus,omitempty" xml:"DomainCNAMEStatus,omitempty"`
	// The content of the certificate.
	DomainLegalStatus *string `json:"DomainLegalStatus,omitempty" xml:"DomainLegalStatus,omitempty"`
	// Remarks about the domain name, such as the cause of an exception.
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The unique ID of the SSL certificate, which is automatically generated by the system.
	DomainRemark *string `json:"DomainRemark,omitempty" xml:"DomainRemark,omitempty"`
	// The name of the SSL certificate.
	DomainWebSocketStatus *string `json:"DomainWebSocketStatus,omitempty" xml:"DomainWebSocketStatus,omitempty"`
	// The second-level domain name that is automatically assigned to the API group.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The validity status of the domain name. Valid values:
	//
	// *   NORMAL
	// *   ABNORMAL: This status affects API calls and must be resolved as soon as possible.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// *   This operation is intended for API providers.
	SubDomain *string `json:"SubDomain,omitempty" xml:"SubDomain,omitempty"`
}

func (s DescribeDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDomainResponseBody) SetCertificateBody(v string) *DescribeDomainResponseBody {
	s.CertificateBody = &v
	return s
}

func (s *DescribeDomainResponseBody) SetCertificateId(v string) *DescribeDomainResponseBody {
	s.CertificateId = &v
	return s
}

func (s *DescribeDomainResponseBody) SetCertificateName(v string) *DescribeDomainResponseBody {
	s.CertificateName = &v
	return s
}

func (s *DescribeDomainResponseBody) SetCertificatePrivateKey(v string) *DescribeDomainResponseBody {
	s.CertificatePrivateKey = &v
	return s
}

func (s *DescribeDomainResponseBody) SetCertificateValidEnd(v int64) *DescribeDomainResponseBody {
	s.CertificateValidEnd = &v
	return s
}

func (s *DescribeDomainResponseBody) SetCertificateValidStart(v int64) *DescribeDomainResponseBody {
	s.CertificateValidStart = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainBindingStatus(v string) *DescribeDomainResponseBody {
	s.DomainBindingStatus = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainCNAMEStatus(v string) *DescribeDomainResponseBody {
	s.DomainCNAMEStatus = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainLegalStatus(v string) *DescribeDomainResponseBody {
	s.DomainLegalStatus = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainName(v string) *DescribeDomainResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainRemark(v string) *DescribeDomainResponseBody {
	s.DomainRemark = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainWebSocketStatus(v string) *DescribeDomainResponseBody {
	s.DomainWebSocketStatus = &v
	return s
}

func (s *DescribeDomainResponseBody) SetGroupId(v string) *DescribeDomainResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeDomainResponseBody) SetRequestId(v string) *DescribeDomainResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDomainResponseBody) SetSubDomain(v string) *DescribeDomainResponseBody {
	s.SubDomain = &v
	return s
}

type DescribeDomainResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDomainResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDomainResponse) GoString() string {
	return s.String()
}

func (s *DescribeDomainResponse) SetHeaders(v map[string]*string) *DescribeDomainResponse {
	s.Headers = v
	return s
}

func (s *DescribeDomainResponse) SetStatusCode(v int32) *DescribeDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDomainResponse) SetBody(v *DescribeDomainResponseBody) *DescribeDomainResponse {
	s.Body = v
	return s
}

type DescribeHistoryApisRequest struct {
	ApiId         *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiName       *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	PageNumber    *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageName     *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeHistoryApisRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHistoryApisRequest) GoString() string {
	return s.String()
}

func (s *DescribeHistoryApisRequest) SetApiId(v string) *DescribeHistoryApisRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeHistoryApisRequest) SetApiName(v string) *DescribeHistoryApisRequest {
	s.ApiName = &v
	return s
}

func (s *DescribeHistoryApisRequest) SetGroupId(v string) *DescribeHistoryApisRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeHistoryApisRequest) SetPageNumber(v string) *DescribeHistoryApisRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeHistoryApisRequest) SetPageSize(v string) *DescribeHistoryApisRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeHistoryApisRequest) SetSecurityToken(v string) *DescribeHistoryApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeHistoryApisRequest) SetStageName(v string) *DescribeHistoryApisRequest {
	s.StageName = &v
	return s
}

type DescribeHistoryApisResponseBody struct {
	ApiHisItems *DescribeHistoryApisResponseBodyApiHisItems `json:"ApiHisItems,omitempty" xml:"ApiHisItems,omitempty" type:"Struct"`
	PageNumber  *int32                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeHistoryApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHistoryApisResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHistoryApisResponseBody) SetApiHisItems(v *DescribeHistoryApisResponseBodyApiHisItems) *DescribeHistoryApisResponseBody {
	s.ApiHisItems = v
	return s
}

func (s *DescribeHistoryApisResponseBody) SetPageNumber(v int32) *DescribeHistoryApisResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeHistoryApisResponseBody) SetPageSize(v int32) *DescribeHistoryApisResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeHistoryApisResponseBody) SetRequestId(v string) *DescribeHistoryApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHistoryApisResponseBody) SetTotalCount(v int32) *DescribeHistoryApisResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeHistoryApisResponseBodyApiHisItems struct {
	ApiHisItem []*DescribeHistoryApisResponseBodyApiHisItemsApiHisItem `json:"ApiHisItem,omitempty" xml:"ApiHisItem,omitempty" type:"Repeated"`
}

func (s DescribeHistoryApisResponseBodyApiHisItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeHistoryApisResponseBodyApiHisItems) GoString() string {
	return s.String()
}

func (s *DescribeHistoryApisResponseBodyApiHisItems) SetApiHisItem(v []*DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) *DescribeHistoryApisResponseBodyApiHisItems {
	s.ApiHisItem = v
	return s
}

type DescribeHistoryApisResponseBodyApiHisItemsApiHisItem struct {
	ApiId          *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiName        *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	DeployedTime   *string `json:"DeployedTime,omitempty" xml:"DeployedTime,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId        *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName      *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	HistoryVersion *string `json:"HistoryVersion,omitempty" xml:"HistoryVersion,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StageName      *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) GoString() string {
	return s.String()
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetApiId(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.ApiId = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetApiName(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.ApiName = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetDeployedTime(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.DeployedTime = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetDescription(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.Description = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetGroupId(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.GroupId = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetGroupName(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.GroupName = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetHistoryVersion(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.HistoryVersion = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetRegionId(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.RegionId = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetStageName(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.StageName = &v
	return s
}

func (s *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem) SetStatus(v string) *DescribeHistoryApisResponseBodyApiHisItemsApiHisItem {
	s.Status = &v
	return s
}

type DescribeHistoryApisResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeHistoryApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeHistoryApisResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHistoryApisResponse) GoString() string {
	return s.String()
}

func (s *DescribeHistoryApisResponse) SetHeaders(v map[string]*string) *DescribeHistoryApisResponse {
	s.Headers = v
	return s
}

func (s *DescribeHistoryApisResponse) SetStatusCode(v int32) *DescribeHistoryApisResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHistoryApisResponse) SetBody(v *DescribeHistoryApisResponseBody) *DescribeHistoryApisResponse {
	s.Body = v
	return s
}

type DescribeImportOASTaskRequest struct {
	OperationId   *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeImportOASTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImportOASTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeImportOASTaskRequest) SetOperationId(v string) *DescribeImportOASTaskRequest {
	s.OperationId = &v
	return s
}

func (s *DescribeImportOASTaskRequest) SetSecurityToken(v string) *DescribeImportOASTaskRequest {
	s.SecurityToken = &v
	return s
}

type DescribeImportOASTaskResponseBody struct {
	ApiResults   *DescribeImportOASTaskResponseBodyApiResults   `json:"ApiResults,omitempty" xml:"ApiResults,omitempty" type:"Struct"`
	ModelResults *DescribeImportOASTaskResponseBodyModelResults `json:"ModelResults,omitempty" xml:"ModelResults,omitempty" type:"Struct"`
	RequestId    *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskStatus   *string                                        `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
}

func (s DescribeImportOASTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImportOASTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImportOASTaskResponseBody) SetApiResults(v *DescribeImportOASTaskResponseBodyApiResults) *DescribeImportOASTaskResponseBody {
	s.ApiResults = v
	return s
}

func (s *DescribeImportOASTaskResponseBody) SetModelResults(v *DescribeImportOASTaskResponseBodyModelResults) *DescribeImportOASTaskResponseBody {
	s.ModelResults = v
	return s
}

func (s *DescribeImportOASTaskResponseBody) SetRequestId(v string) *DescribeImportOASTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImportOASTaskResponseBody) SetTaskStatus(v string) *DescribeImportOASTaskResponseBody {
	s.TaskStatus = &v
	return s
}

type DescribeImportOASTaskResponseBodyApiResults struct {
	ApiResult []*DescribeImportOASTaskResponseBodyApiResultsApiResult `json:"ApiResult,omitempty" xml:"ApiResult,omitempty" type:"Repeated"`
}

func (s DescribeImportOASTaskResponseBodyApiResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeImportOASTaskResponseBodyApiResults) GoString() string {
	return s.String()
}

func (s *DescribeImportOASTaskResponseBodyApiResults) SetApiResult(v []*DescribeImportOASTaskResponseBodyApiResultsApiResult) *DescribeImportOASTaskResponseBodyApiResults {
	s.ApiResult = v
	return s
}

type DescribeImportOASTaskResponseBodyApiResultsApiResult struct {
	ApiId        *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiName      *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	GroupId      *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Method       *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Path         *string `json:"Path,omitempty" xml:"Path,omitempty"`
	UpdateStatus *string `json:"UpdateStatus,omitempty" xml:"UpdateStatus,omitempty"`
}

func (s DescribeImportOASTaskResponseBodyApiResultsApiResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeImportOASTaskResponseBodyApiResultsApiResult) GoString() string {
	return s.String()
}

func (s *DescribeImportOASTaskResponseBodyApiResultsApiResult) SetApiId(v string) *DescribeImportOASTaskResponseBodyApiResultsApiResult {
	s.ApiId = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyApiResultsApiResult) SetApiName(v string) *DescribeImportOASTaskResponseBodyApiResultsApiResult {
	s.ApiName = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyApiResultsApiResult) SetDescription(v string) *DescribeImportOASTaskResponseBodyApiResultsApiResult {
	s.Description = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyApiResultsApiResult) SetErrorMessage(v string) *DescribeImportOASTaskResponseBodyApiResultsApiResult {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyApiResultsApiResult) SetGroupId(v string) *DescribeImportOASTaskResponseBodyApiResultsApiResult {
	s.GroupId = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyApiResultsApiResult) SetMethod(v string) *DescribeImportOASTaskResponseBodyApiResultsApiResult {
	s.Method = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyApiResultsApiResult) SetPath(v string) *DescribeImportOASTaskResponseBodyApiResultsApiResult {
	s.Path = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyApiResultsApiResult) SetUpdateStatus(v string) *DescribeImportOASTaskResponseBodyApiResultsApiResult {
	s.UpdateStatus = &v
	return s
}

type DescribeImportOASTaskResponseBodyModelResults struct {
	ModelResult []*DescribeImportOASTaskResponseBodyModelResultsModelResult `json:"ModelResult,omitempty" xml:"ModelResult,omitempty" type:"Repeated"`
}

func (s DescribeImportOASTaskResponseBodyModelResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeImportOASTaskResponseBodyModelResults) GoString() string {
	return s.String()
}

func (s *DescribeImportOASTaskResponseBodyModelResults) SetModelResult(v []*DescribeImportOASTaskResponseBodyModelResultsModelResult) *DescribeImportOASTaskResponseBodyModelResults {
	s.ModelResult = v
	return s
}

type DescribeImportOASTaskResponseBodyModelResultsModelResult struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	GroupId      *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ModelId      *string `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	ModelName    *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	UpdateStatus *string `json:"UpdateStatus,omitempty" xml:"UpdateStatus,omitempty"`
}

func (s DescribeImportOASTaskResponseBodyModelResultsModelResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeImportOASTaskResponseBodyModelResultsModelResult) GoString() string {
	return s.String()
}

func (s *DescribeImportOASTaskResponseBodyModelResultsModelResult) SetErrorMessage(v string) *DescribeImportOASTaskResponseBodyModelResultsModelResult {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyModelResultsModelResult) SetGroupId(v string) *DescribeImportOASTaskResponseBodyModelResultsModelResult {
	s.GroupId = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyModelResultsModelResult) SetModelId(v string) *DescribeImportOASTaskResponseBodyModelResultsModelResult {
	s.ModelId = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyModelResultsModelResult) SetModelName(v string) *DescribeImportOASTaskResponseBodyModelResultsModelResult {
	s.ModelName = &v
	return s
}

func (s *DescribeImportOASTaskResponseBodyModelResultsModelResult) SetUpdateStatus(v string) *DescribeImportOASTaskResponseBodyModelResultsModelResult {
	s.UpdateStatus = &v
	return s
}

type DescribeImportOASTaskResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImportOASTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImportOASTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImportOASTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeImportOASTaskResponse) SetHeaders(v map[string]*string) *DescribeImportOASTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeImportOASTaskResponse) SetStatusCode(v int32) *DescribeImportOASTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImportOASTaskResponse) SetBody(v *DescribeImportOASTaskResponseBody) *DescribeImportOASTaskResponse {
	s.Body = v
	return s
}

type DescribeInstanceDropConnectionsRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the dedicated instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The statistical metric. Valid values:
	//
	// *   Maximum
	// *   Minimum
	// *   Average
	SbcName       *string `json:"SbcName,omitempty" xml:"SbcName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceDropConnectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropConnectionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropConnectionsRequest) SetEndTime(v string) *DescribeInstanceDropConnectionsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceDropConnectionsRequest) SetInstanceId(v string) *DescribeInstanceDropConnectionsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceDropConnectionsRequest) SetSbcName(v string) *DescribeInstanceDropConnectionsRequest {
	s.SbcName = &v
	return s
}

func (s *DescribeInstanceDropConnectionsRequest) SetSecurityToken(v string) *DescribeInstanceDropConnectionsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstanceDropConnectionsRequest) SetStartTime(v string) *DescribeInstanceDropConnectionsRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceDropConnectionsResponseBody struct {
	// The list of dropped connections in the instance.
	InstanceDropConnections *DescribeInstanceDropConnectionsResponseBodyInstanceDropConnections `json:"InstanceDropConnections,omitempty" xml:"InstanceDropConnections,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceDropConnectionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropConnectionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropConnectionsResponseBody) SetInstanceDropConnections(v *DescribeInstanceDropConnectionsResponseBodyInstanceDropConnections) *DescribeInstanceDropConnectionsResponseBody {
	s.InstanceDropConnections = v
	return s
}

func (s *DescribeInstanceDropConnectionsResponseBody) SetRequestId(v string) *DescribeInstanceDropConnectionsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceDropConnectionsResponseBodyInstanceDropConnections struct {
	MonitorItem []*DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstanceDropConnectionsResponseBodyInstanceDropConnections) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropConnectionsResponseBodyInstanceDropConnections) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropConnectionsResponseBodyInstanceDropConnections) SetMonitorItem(v []*DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem) *DescribeInstanceDropConnectionsResponseBodyInstanceDropConnections {
	s.MonitorItem = v
	return s
}

type DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem struct {
	// The monitoring time. The time follows the ISO 8601 standard. Format: YYYY-MM-DDThh:mm:ssZ
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The number of dropped packets in the instance.
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem) SetItemTime(v string) *DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem) SetItemValue(v string) *DescribeInstanceDropConnectionsResponseBodyInstanceDropConnectionsMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstanceDropConnectionsResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceDropConnectionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceDropConnectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropConnectionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropConnectionsResponse) SetHeaders(v map[string]*string) *DescribeInstanceDropConnectionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceDropConnectionsResponse) SetStatusCode(v int32) *DescribeInstanceDropConnectionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceDropConnectionsResponse) SetBody(v *DescribeInstanceDropConnectionsResponseBody) *DescribeInstanceDropConnectionsResponse {
	s.Body = v
	return s
}

type DescribeInstanceDropPacketRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The statistical metric. Valid values:
	//
	// *   Maximum
	// *   Minimum
	// *   Average
	SbcName       *string `json:"SbcName,omitempty" xml:"SbcName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceDropPacketRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropPacketRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropPacketRequest) SetEndTime(v string) *DescribeInstanceDropPacketRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceDropPacketRequest) SetInstanceId(v string) *DescribeInstanceDropPacketRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceDropPacketRequest) SetSbcName(v string) *DescribeInstanceDropPacketRequest {
	s.SbcName = &v
	return s
}

func (s *DescribeInstanceDropPacketRequest) SetSecurityToken(v string) *DescribeInstanceDropPacketRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstanceDropPacketRequest) SetStartTime(v string) *DescribeInstanceDropPacketRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceDropPacketResponseBody struct {
	// The list of dropped packets in the instance.
	InstanceDropPacket *DescribeInstanceDropPacketResponseBodyInstanceDropPacket `json:"InstanceDropPacket,omitempty" xml:"InstanceDropPacket,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceDropPacketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropPacketResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropPacketResponseBody) SetInstanceDropPacket(v *DescribeInstanceDropPacketResponseBodyInstanceDropPacket) *DescribeInstanceDropPacketResponseBody {
	s.InstanceDropPacket = v
	return s
}

func (s *DescribeInstanceDropPacketResponseBody) SetRequestId(v string) *DescribeInstanceDropPacketResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceDropPacketResponseBodyInstanceDropPacket struct {
	MonitorItem []*DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstanceDropPacketResponseBodyInstanceDropPacket) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropPacketResponseBodyInstanceDropPacket) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropPacketResponseBodyInstanceDropPacket) SetMonitorItem(v []*DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem) *DescribeInstanceDropPacketResponseBodyInstanceDropPacket {
	s.MonitorItem = v
	return s
}

type DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem struct {
	// The metric. Valid values:
	//
	// *   InstanceDropPacketRX: the number of inbound packets dropped in the instance per second.
	// *   InstanceDropPacketTX: the number of outbound packets dropped in the instance per second.
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The monitoring time. The time follows the ISO 8601 standard. Format: YYYY-MM-DDThh:mm:ssZ
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The number of dropped packets in the instance.
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem) SetItem(v string) *DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem {
	s.Item = &v
	return s
}

func (s *DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem) SetItemTime(v string) *DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem) SetItemValue(v string) *DescribeInstanceDropPacketResponseBodyInstanceDropPacketMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstanceDropPacketResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceDropPacketResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceDropPacketResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDropPacketResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDropPacketResponse) SetHeaders(v map[string]*string) *DescribeInstanceDropPacketResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceDropPacketResponse) SetStatusCode(v int32) *DescribeInstanceDropPacketResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceDropPacketResponse) SetBody(v *DescribeInstanceDropPacketResponseBody) *DescribeInstanceDropPacketResponse {
	s.Body = v
	return s
}

type DescribeInstanceHttpCodeRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment in which the API is requested. Valid values:
	//
	// *   **RELEASE**: the production environment
	// *   **PRE**: the pre-release environment
	// *   **TEST**: the test environment
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceHttpCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHttpCodeRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHttpCodeRequest) SetEndTime(v string) *DescribeInstanceHttpCodeRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceHttpCodeRequest) SetInstanceId(v string) *DescribeInstanceHttpCodeRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceHttpCodeRequest) SetSecurityToken(v string) *DescribeInstanceHttpCodeRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstanceHttpCodeRequest) SetStageName(v string) *DescribeInstanceHttpCodeRequest {
	s.StageName = &v
	return s
}

func (s *DescribeInstanceHttpCodeRequest) SetStartTime(v string) *DescribeInstanceHttpCodeRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceHttpCodeResponseBody struct {
	// The list of HTTP status codes returned.
	InstanceHttpCode *DescribeInstanceHttpCodeResponseBodyInstanceHttpCode `json:"InstanceHttpCode,omitempty" xml:"InstanceHttpCode,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceHttpCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHttpCodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHttpCodeResponseBody) SetInstanceHttpCode(v *DescribeInstanceHttpCodeResponseBodyInstanceHttpCode) *DescribeInstanceHttpCodeResponseBody {
	s.InstanceHttpCode = v
	return s
}

func (s *DescribeInstanceHttpCodeResponseBody) SetRequestId(v string) *DescribeInstanceHttpCodeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceHttpCodeResponseBodyInstanceHttpCode struct {
	MonitorItem []*DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstanceHttpCodeResponseBodyInstanceHttpCode) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHttpCodeResponseBodyInstanceHttpCode) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHttpCodeResponseBodyInstanceHttpCode) SetMonitorItem(v []*DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem) *DescribeInstanceHttpCodeResponseBodyInstanceHttpCode {
	s.MonitorItem = v
	return s
}

type DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem struct {
	// The HTTP status code.
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The number of HTTP status codes returned.
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem) SetItemTime(v string) *DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem) SetItemValue(v string) *DescribeInstanceHttpCodeResponseBodyInstanceHttpCodeMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstanceHttpCodeResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceHttpCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceHttpCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceHttpCodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceHttpCodeResponse) SetHeaders(v map[string]*string) *DescribeInstanceHttpCodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceHttpCodeResponse) SetStatusCode(v int32) *DescribeInstanceHttpCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceHttpCodeResponse) SetBody(v *DescribeInstanceHttpCodeResponseBody) *DescribeInstanceHttpCodeResponse {
	s.Body = v
	return s
}

type DescribeInstanceLatencyRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment in which the API is requested. Valid values:
	//
	// *   **RELEASE**: the production environment
	// *   **PRE**: the pre-release environment
	// *   **TEST**: the test environment
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceLatencyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceLatencyRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceLatencyRequest) SetEndTime(v string) *DescribeInstanceLatencyRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceLatencyRequest) SetInstanceId(v string) *DescribeInstanceLatencyRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceLatencyRequest) SetSecurityToken(v string) *DescribeInstanceLatencyRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstanceLatencyRequest) SetStageName(v string) *DescribeInstanceLatencyRequest {
	s.StageName = &v
	return s
}

func (s *DescribeInstanceLatencyRequest) SetStartTime(v string) *DescribeInstanceLatencyRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceLatencyResponseBody struct {
	// The list of average latencies in the instance.
	InstanceLatency *DescribeInstanceLatencyResponseBodyInstanceLatency `json:"InstanceLatency,omitempty" xml:"InstanceLatency,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceLatencyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceLatencyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceLatencyResponseBody) SetInstanceLatency(v *DescribeInstanceLatencyResponseBodyInstanceLatency) *DescribeInstanceLatencyResponseBody {
	s.InstanceLatency = v
	return s
}

func (s *DescribeInstanceLatencyResponseBody) SetRequestId(v string) *DescribeInstanceLatencyResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceLatencyResponseBodyInstanceLatency struct {
	MonitorItem []*DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstanceLatencyResponseBodyInstanceLatency) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceLatencyResponseBodyInstanceLatency) GoString() string {
	return s.String()
}

func (s *DescribeInstanceLatencyResponseBodyInstanceLatency) SetMonitorItem(v []*DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem) *DescribeInstanceLatencyResponseBodyInstanceLatency {
	s.MonitorItem = v
	return s
}

type DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem struct {
	// The metric. Valid values:
	//
	// *   gatewayLatency API: the processing latency of API Gateway
	// *   latency: the processing latency of the backend service.
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The value of the average latency.
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem) SetItem(v string) *DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem {
	s.Item = &v
	return s
}

func (s *DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem) SetItemTime(v string) *DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem) SetItemValue(v string) *DescribeInstanceLatencyResponseBodyInstanceLatencyMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstanceLatencyResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceLatencyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceLatencyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceLatencyResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceLatencyResponse) SetHeaders(v map[string]*string) *DescribeInstanceLatencyResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceLatencyResponse) SetStatusCode(v int32) *DescribeInstanceLatencyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceLatencyResponse) SetBody(v *DescribeInstanceLatencyResponseBody) *DescribeInstanceLatencyResponse {
	s.Body = v
	return s
}

type DescribeInstanceNewConnectionsRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The statistical metric. Valid values:
	//
	// *   Maximum
	// *   Minimum
	// *   Average
	SbcName       *string `json:"SbcName,omitempty" xml:"SbcName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceNewConnectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceNewConnectionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceNewConnectionsRequest) SetEndTime(v string) *DescribeInstanceNewConnectionsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceNewConnectionsRequest) SetInstanceId(v string) *DescribeInstanceNewConnectionsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceNewConnectionsRequest) SetSbcName(v string) *DescribeInstanceNewConnectionsRequest {
	s.SbcName = &v
	return s
}

func (s *DescribeInstanceNewConnectionsRequest) SetSecurityToken(v string) *DescribeInstanceNewConnectionsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstanceNewConnectionsRequest) SetStartTime(v string) *DescribeInstanceNewConnectionsRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceNewConnectionsResponseBody struct {
	// The list of new connections in the instance.
	InstanceNewConnections *DescribeInstanceNewConnectionsResponseBodyInstanceNewConnections `json:"InstanceNewConnections,omitempty" xml:"InstanceNewConnections,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceNewConnectionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceNewConnectionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceNewConnectionsResponseBody) SetInstanceNewConnections(v *DescribeInstanceNewConnectionsResponseBodyInstanceNewConnections) *DescribeInstanceNewConnectionsResponseBody {
	s.InstanceNewConnections = v
	return s
}

func (s *DescribeInstanceNewConnectionsResponseBody) SetRequestId(v string) *DescribeInstanceNewConnectionsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceNewConnectionsResponseBodyInstanceNewConnections struct {
	MonitorItem []*DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstanceNewConnectionsResponseBodyInstanceNewConnections) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceNewConnectionsResponseBodyInstanceNewConnections) GoString() string {
	return s.String()
}

func (s *DescribeInstanceNewConnectionsResponseBodyInstanceNewConnections) SetMonitorItem(v []*DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem) *DescribeInstanceNewConnectionsResponseBodyInstanceNewConnections {
	s.MonitorItem = v
	return s
}

type DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem struct {
	// The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The number of new connections in the instance.
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem) SetItemTime(v string) *DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem) SetItemValue(v string) *DescribeInstanceNewConnectionsResponseBodyInstanceNewConnectionsMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstanceNewConnectionsResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceNewConnectionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceNewConnectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceNewConnectionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceNewConnectionsResponse) SetHeaders(v map[string]*string) *DescribeInstanceNewConnectionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceNewConnectionsResponse) SetStatusCode(v int32) *DescribeInstanceNewConnectionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceNewConnectionsResponse) SetBody(v *DescribeInstanceNewConnectionsResponseBody) *DescribeInstanceNewConnectionsResponse {
	s.Body = v
	return s
}

type DescribeInstancePacketsRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The statistical metric. Valid values:
	//
	// *   Maximum
	// *   Minimum
	// *   Average
	SbcName       *string `json:"SbcName,omitempty" xml:"SbcName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstancePacketsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancePacketsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstancePacketsRequest) SetEndTime(v string) *DescribeInstancePacketsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstancePacketsRequest) SetInstanceId(v string) *DescribeInstancePacketsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancePacketsRequest) SetSbcName(v string) *DescribeInstancePacketsRequest {
	s.SbcName = &v
	return s
}

func (s *DescribeInstancePacketsRequest) SetSecurityToken(v string) *DescribeInstancePacketsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstancePacketsRequest) SetStartTime(v string) *DescribeInstancePacketsRequest {
	s.StartTime = &v
	return s
}

type DescribeInstancePacketsResponseBody struct {
	// The list of inbound and outbound data packets in the instance.
	InstancePackets *DescribeInstancePacketsResponseBodyInstancePackets `json:"InstancePackets,omitempty" xml:"InstancePackets,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstancePacketsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancePacketsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstancePacketsResponseBody) SetInstancePackets(v *DescribeInstancePacketsResponseBodyInstancePackets) *DescribeInstancePacketsResponseBody {
	s.InstancePackets = v
	return s
}

func (s *DescribeInstancePacketsResponseBody) SetRequestId(v string) *DescribeInstancePacketsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstancePacketsResponseBodyInstancePackets struct {
	MonitorItem []*DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstancePacketsResponseBodyInstancePackets) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancePacketsResponseBodyInstancePackets) GoString() string {
	return s.String()
}

func (s *DescribeInstancePacketsResponseBodyInstancePackets) SetMonitorItem(v []*DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem) *DescribeInstancePacketsResponseBodyInstancePackets {
	s.MonitorItem = v
	return s
}

type DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem struct {
	// The metric. Valid values:
	//
	// *   InstancePacketRX: inbound data packets
	// *   InstancePacketTX: outbound data packets
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The number of inbound and outbound data packets in the instance.
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem) SetItem(v string) *DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem {
	s.Item = &v
	return s
}

func (s *DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem) SetItemTime(v string) *DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem) SetItemValue(v string) *DescribeInstancePacketsResponseBodyInstancePacketsMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstancePacketsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstancePacketsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstancePacketsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancePacketsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstancePacketsResponse) SetHeaders(v map[string]*string) *DescribeInstancePacketsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstancePacketsResponse) SetStatusCode(v int32) *DescribeInstancePacketsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstancePacketsResponse) SetBody(v *DescribeInstancePacketsResponseBody) *DescribeInstancePacketsResponse {
	s.Body = v
	return s
}

type DescribeInstanceQpsRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment in which the API is requested. Valid values:
	//
	// *   **RELEASE**: the production environment
	// *   **PRE**: the pre-release environment
	// *   **TEST**: the test environment
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceQpsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceQpsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceQpsRequest) SetEndTime(v string) *DescribeInstanceQpsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceQpsRequest) SetInstanceId(v string) *DescribeInstanceQpsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceQpsRequest) SetSecurityToken(v string) *DescribeInstanceQpsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstanceQpsRequest) SetStageName(v string) *DescribeInstanceQpsRequest {
	s.StageName = &v
	return s
}

func (s *DescribeInstanceQpsRequest) SetStartTime(v string) *DescribeInstanceQpsRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceQpsResponseBody struct {
	// The list of requests sent to the APIs in the instance.
	InstanceQps *DescribeInstanceQpsResponseBodyInstanceQps `json:"InstanceQps,omitempty" xml:"InstanceQps,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceQpsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceQpsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceQpsResponseBody) SetInstanceQps(v *DescribeInstanceQpsResponseBodyInstanceQps) *DescribeInstanceQpsResponseBody {
	s.InstanceQps = v
	return s
}

func (s *DescribeInstanceQpsResponseBody) SetRequestId(v string) *DescribeInstanceQpsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceQpsResponseBodyInstanceQps struct {
	MonitorItem []*DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstanceQpsResponseBodyInstanceQps) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceQpsResponseBodyInstanceQps) GoString() string {
	return s.String()
}

func (s *DescribeInstanceQpsResponseBodyInstanceQps) SetMonitorItem(v []*DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem) *DescribeInstanceQpsResponseBodyInstanceQps {
	s.MonitorItem = v
	return s
}

type DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem struct {
	// The monitoring time. The time follows the ISO 8601 standard. Format: YYYY-MM-DDThh:mm:ssZ
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The number of requests sent to the APIs in the instance.
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem) SetItemTime(v string) *DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem) SetItemValue(v string) *DescribeInstanceQpsResponseBodyInstanceQpsMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstanceQpsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceQpsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceQpsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceQpsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceQpsResponse) SetHeaders(v map[string]*string) *DescribeInstanceQpsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceQpsResponse) SetStatusCode(v int32) *DescribeInstanceQpsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceQpsResponse) SetBody(v *DescribeInstanceQpsResponseBody) *DescribeInstanceQpsResponse {
	s.Body = v
	return s
}

type DescribeInstanceSlbConnectRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The statistical metric. Valid values:
	//
	// *   Maximum
	// *   Minimum
	// *   Average
	SbcName       *string `json:"SbcName,omitempty" xml:"SbcName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceSlbConnectRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSlbConnectRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSlbConnectRequest) SetEndTime(v string) *DescribeInstanceSlbConnectRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceSlbConnectRequest) SetInstanceId(v string) *DescribeInstanceSlbConnectRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceSlbConnectRequest) SetSbcName(v string) *DescribeInstanceSlbConnectRequest {
	s.SbcName = &v
	return s
}

func (s *DescribeInstanceSlbConnectRequest) SetSecurityToken(v string) *DescribeInstanceSlbConnectRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstanceSlbConnectRequest) SetStartTime(v string) *DescribeInstanceSlbConnectRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceSlbConnectResponseBody struct {
	// The list of concurrent connections in the instance.
	InstanceSlbConnect *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnect `json:"InstanceSlbConnect,omitempty" xml:"InstanceSlbConnect,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceSlbConnectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSlbConnectResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSlbConnectResponseBody) SetInstanceSlbConnect(v *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnect) *DescribeInstanceSlbConnectResponseBody {
	s.InstanceSlbConnect = v
	return s
}

func (s *DescribeInstanceSlbConnectResponseBody) SetRequestId(v string) *DescribeInstanceSlbConnectResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceSlbConnectResponseBodyInstanceSlbConnect struct {
	MonitorItem []*DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstanceSlbConnectResponseBodyInstanceSlbConnect) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSlbConnectResponseBodyInstanceSlbConnect) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnect) SetMonitorItem(v []*DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem) *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnect {
	s.MonitorItem = v
	return s
}

type DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem struct {
	// The metric. Valid values:
	//
	// *   InstanceMaxConnection: the maximum number of connections
	// *   InstanceInactiveConnection: the number of inactive connections
	// *   InstanceActiveConnection: the number of active connections
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The number of concurrent connections in the instance.
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem) SetItem(v string) *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem {
	s.Item = &v
	return s
}

func (s *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem) SetItemTime(v string) *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem) SetItemValue(v string) *DescribeInstanceSlbConnectResponseBodyInstanceSlbConnectMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstanceSlbConnectResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceSlbConnectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceSlbConnectResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSlbConnectResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSlbConnectResponse) SetHeaders(v map[string]*string) *DescribeInstanceSlbConnectResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceSlbConnectResponse) SetStatusCode(v int32) *DescribeInstanceSlbConnectResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceSlbConnectResponse) SetBody(v *DescribeInstanceSlbConnectResponseBody) *DescribeInstanceSlbConnectResponse {
	s.Body = v
	return s
}

type DescribeInstanceTrafficRequest struct {
	// The end time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment in which the API runs. Valid values:
	//
	// *   **RELEASE**: the production environment
	// *   **PRE**: the pre-release environment
	// *   **TEST: the test environment**
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The start time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceTrafficRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTrafficRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTrafficRequest) SetEndTime(v string) *DescribeInstanceTrafficRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceTrafficRequest) SetInstanceId(v string) *DescribeInstanceTrafficRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceTrafficRequest) SetSecurityToken(v string) *DescribeInstanceTrafficRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstanceTrafficRequest) SetStageName(v string) *DescribeInstanceTrafficRequest {
	s.StageName = &v
	return s
}

func (s *DescribeInstanceTrafficRequest) SetStartTime(v string) *DescribeInstanceTrafficRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceTrafficResponseBody struct {
	// The traffic consumed by the requests and responses in the instance.
	InstanceTraffic *DescribeInstanceTrafficResponseBodyInstanceTraffic `json:"InstanceTraffic,omitempty" xml:"InstanceTraffic,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceTrafficResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTrafficResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTrafficResponseBody) SetInstanceTraffic(v *DescribeInstanceTrafficResponseBodyInstanceTraffic) *DescribeInstanceTrafficResponseBody {
	s.InstanceTraffic = v
	return s
}

func (s *DescribeInstanceTrafficResponseBody) SetRequestId(v string) *DescribeInstanceTrafficResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceTrafficResponseBodyInstanceTraffic struct {
	MonitorItem []*DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem `json:"MonitorItem,omitempty" xml:"MonitorItem,omitempty" type:"Repeated"`
}

func (s DescribeInstanceTrafficResponseBodyInstanceTraffic) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTrafficResponseBodyInstanceTraffic) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTrafficResponseBodyInstanceTraffic) SetMonitorItem(v []*DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem) *DescribeInstanceTrafficResponseBodyInstanceTraffic {
	s.MonitorItem = v
	return s
}

type DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem struct {
	// The metric. Valid values:
	//
	// *   inbound: traffic consumed by requests
	// *   outbound: traffic consumed by responses
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The monitoring time. The time follows the ISO 8601 standard and UTC time is used. Format: YYYY-MM-DDThh:mm:ssZ
	ItemTime *string `json:"ItemTime,omitempty" xml:"ItemTime,omitempty"`
	// The amount of traffic consumed by the requests and responses in the instance.
	ItemValue *string `json:"ItemValue,omitempty" xml:"ItemValue,omitempty"`
}

func (s DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem) SetItem(v string) *DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem {
	s.Item = &v
	return s
}

func (s *DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem) SetItemTime(v string) *DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem {
	s.ItemTime = &v
	return s
}

func (s *DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem) SetItemValue(v string) *DescribeInstanceTrafficResponseBodyInstanceTrafficMonitorItem {
	s.ItemValue = &v
	return s
}

type DescribeInstanceTrafficResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceTrafficResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceTrafficResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTrafficResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTrafficResponse) SetHeaders(v map[string]*string) *DescribeInstanceTrafficResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceTrafficResponse) SetStatusCode(v int32) *DescribeInstanceTrafficResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceTrafficResponse) SetBody(v *DescribeInstanceTrafficResponseBody) *DescribeInstanceTrafficResponse {
	s.Body = v
	return s
}

type DescribeInstancesRequest struct {
	EnableTagAuthorization *bool                          `json:"EnableTagAuthorization,omitempty" xml:"EnableTagAuthorization,omitempty"`
	InstanceId             *string                        `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Language               *string                        `json:"Language,omitempty" xml:"Language,omitempty"`
	SecurityToken          *string                        `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag                    []*DescribeInstancesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstancesRequest) SetEnableTagAuthorization(v bool) *DescribeInstancesRequest {
	s.EnableTagAuthorization = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceId(v string) *DescribeInstancesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancesRequest) SetLanguage(v string) *DescribeInstancesRequest {
	s.Language = &v
	return s
}

func (s *DescribeInstancesRequest) SetSecurityToken(v string) *DescribeInstancesRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeInstancesRequest) SetTag(v []*DescribeInstancesRequestTag) *DescribeInstancesRequest {
	s.Tag = v
	return s
}

type DescribeInstancesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeInstancesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeInstancesRequestTag) SetKey(v string) *DescribeInstancesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeInstancesRequestTag) SetValue(v string) *DescribeInstancesRequestTag {
	s.Value = &v
	return s
}

type DescribeInstancesResponseBody struct {
	Instances  *DescribeInstancesResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Struct"`
	PageNumber *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBody) SetInstances(v *DescribeInstancesResponseBodyInstances) *DescribeInstancesResponseBody {
	s.Instances = v
	return s
}

func (s *DescribeInstancesResponseBody) SetPageNumber(v int32) *DescribeInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetPageSize(v int32) *DescribeInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetRequestId(v string) *DescribeInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetTotalCount(v int32) *DescribeInstancesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeInstancesResponseBodyInstances struct {
	InstanceAttribute []*DescribeInstancesResponseBodyInstancesInstanceAttribute `json:"InstanceAttribute,omitempty" xml:"InstanceAttribute,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstances) SetInstanceAttribute(v []*DescribeInstancesResponseBodyInstancesInstanceAttribute) *DescribeInstancesResponseBodyInstances {
	s.InstanceAttribute = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceAttribute struct {
	AclId                *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	AclName              *string `json:"AclName,omitempty" xml:"AclName,omitempty"`
	AclStatus            *string `json:"AclStatus,omitempty" xml:"AclStatus,omitempty"`
	AclType              *string `json:"AclType,omitempty" xml:"AclType,omitempty"`
	ClassicEgressAddress *string `json:"ClassicEgressAddress,omitempty" xml:"ClassicEgressAddress,omitempty"`
	// VPC融合类型专享实例联通的用户VPC ID
	ConnectVpcId *string `json:"ConnectVpcId,omitempty" xml:"ConnectVpcId,omitempty"`
	CreatedTime  *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// 专享实例类型
	// - vpc_connect：VPC融合类型专享实例
	// - normal：传统类型专享实例
	DedicatedInstanceType *string `json:"DedicatedInstanceType,omitempty" xml:"DedicatedInstanceType,omitempty"`
	EgressIpv6Enable      *bool   `json:"EgressIpv6Enable,omitempty" xml:"EgressIpv6Enable,omitempty"`
	ExpiredTime           *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	HttpsPolicies         *string `json:"HttpsPolicies,omitempty" xml:"HttpsPolicies,omitempty"`
	IPV6AclId             *string `json:"IPV6AclId,omitempty" xml:"IPV6AclId,omitempty"`
	IPV6AclName           *string `json:"IPV6AclName,omitempty" xml:"IPV6AclName,omitempty"`
	IPV6AclStatus         *string `json:"IPV6AclStatus,omitempty" xml:"IPV6AclStatus,omitempty"`
	IPV6AclType           *string `json:"IPV6AclType,omitempty" xml:"IPV6AclType,omitempty"`
	InstanceChargeType    *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	// 专享实例所在网段
	// - 172.16.0.0/12
	// - 192.168.0.0/16
	InstanceCidrBlock      *string                                                                        `json:"InstanceCidrBlock,omitempty" xml:"InstanceCidrBlock,omitempty"`
	InstanceClusterId      *string                                                                        `json:"InstanceClusterId,omitempty" xml:"InstanceClusterId,omitempty"`
	InstanceId             *string                                                                        `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName           *string                                                                        `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceRpsLimit       *int32                                                                         `json:"InstanceRpsLimit,omitempty" xml:"InstanceRpsLimit,omitempty"`
	InstanceSpec           *string                                                                        `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	InstanceSpecAttributes *DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributes `json:"InstanceSpecAttributes,omitempty" xml:"InstanceSpecAttributes,omitempty" type:"Struct"`
	InstanceType           *string                                                                        `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InternetEgressAddress  *string                                                                        `json:"InternetEgressAddress,omitempty" xml:"InternetEgressAddress,omitempty"`
	IntranetSegments       *string                                                                        `json:"IntranetSegments,omitempty" xml:"IntranetSegments,omitempty"`
	// VPC融合类型专享实例连通的用户VPC内的网络信息
	NetworkInterfaceAttributes *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributes `json:"NetworkInterfaceAttributes,omitempty" xml:"NetworkInterfaceAttributes,omitempty" type:"Struct"`
	RegionId                   *string                                                                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Status                     *string                                                                            `json:"Status,omitempty" xml:"Status,omitempty"`
	SupportIpv6                *bool                                                                              `json:"SupportIpv6,omitempty" xml:"SupportIpv6,omitempty"`
	UserVpcId                  *string                                                                            `json:"UserVpcId,omitempty" xml:"UserVpcId,omitempty"`
	UserVswitchId              *string                                                                            `json:"UserVswitchId,omitempty" xml:"UserVswitchId,omitempty"`
	VipTypeList                *string                                                                            `json:"VipTypeList,omitempty" xml:"VipTypeList,omitempty"`
	VpcEgressAddress           *string                                                                            `json:"VpcEgressAddress,omitempty" xml:"VpcEgressAddress,omitempty"`
	VpcIntranetEnable          *bool                                                                              `json:"VpcIntranetEnable,omitempty" xml:"VpcIntranetEnable,omitempty"`
	VpcOwnerId                 *int64                                                                             `json:"VpcOwnerId,omitempty" xml:"VpcOwnerId,omitempty"`
	VpcSlbIntranetEnable       *bool                                                                              `json:"VpcSlbIntranetEnable,omitempty" xml:"VpcSlbIntranetEnable,omitempty"`
	ZoneId                     *string                                                                            `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ZoneLocalName              *string                                                                            `json:"ZoneLocalName,omitempty" xml:"ZoneLocalName,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetAclId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.AclId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetAclName(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.AclName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetAclStatus(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.AclStatus = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetAclType(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.AclType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetClassicEgressAddress(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.ClassicEgressAddress = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetConnectVpcId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.ConnectVpcId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetCreatedTime(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.CreatedTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetDedicatedInstanceType(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.DedicatedInstanceType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetEgressIpv6Enable(v bool) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.EgressIpv6Enable = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetExpiredTime(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetHttpsPolicies(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.HttpsPolicies = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetIPV6AclId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.IPV6AclId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetIPV6AclName(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.IPV6AclName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetIPV6AclStatus(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.IPV6AclStatus = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetIPV6AclType(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.IPV6AclType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceChargeType(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceCidrBlock(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceCidrBlock = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceClusterId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceClusterId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceName(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceRpsLimit(v int32) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceRpsLimit = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceSpec(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceSpec = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceSpecAttributes(v *DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributes) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceSpecAttributes = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInstanceType(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetInternetEgressAddress(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.InternetEgressAddress = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetIntranetSegments(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.IntranetSegments = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetNetworkInterfaceAttributes(v *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributes) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.NetworkInterfaceAttributes = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetRegionId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetStatus(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.Status = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetSupportIpv6(v bool) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.SupportIpv6 = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetUserVpcId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.UserVpcId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetUserVswitchId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.UserVswitchId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetVipTypeList(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.VipTypeList = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetVpcEgressAddress(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.VpcEgressAddress = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetVpcIntranetEnable(v bool) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.VpcIntranetEnable = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetVpcOwnerId(v int64) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.VpcOwnerId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetVpcSlbIntranetEnable(v bool) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.VpcSlbIntranetEnable = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetZoneId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.ZoneId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttribute) SetZoneLocalName(v string) *DescribeInstancesResponseBodyInstancesInstanceAttribute {
	s.ZoneLocalName = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributes struct {
	SpecAttribute []*DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute `json:"SpecAttribute,omitempty" xml:"SpecAttribute,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributes) SetSpecAttribute(v []*DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute) *DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributes {
	s.SpecAttribute = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute struct {
	LocalName *string `json:"LocalName,omitempty" xml:"LocalName,omitempty"`
	Value     *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute) SetLocalName(v string) *DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute {
	s.LocalName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute) SetValue(v string) *DescribeInstancesResponseBodyInstancesInstanceAttributeInstanceSpecAttributesSpecAttribute {
	s.Value = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributes struct {
	NetworkInterfaceAttribute []*DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute `json:"NetworkInterfaceAttribute,omitempty" xml:"NetworkInterfaceAttribute,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributes) SetNetworkInterfaceAttribute(v []*DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute) *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributes {
	s.NetworkInterfaceAttribute = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute struct {
	// vSwitch的网段。
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// 弹性网卡ID
	NetworkInterfaceId *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	// 安全组的ID，同一个安全组内的服务可以互相访问。
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// 虚拟交换机ID
	VswitchId *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
	// 可用区ID
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute) SetCidrBlock(v string) *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute {
	s.CidrBlock = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute) SetNetworkInterfaceId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute) SetSecurityGroupId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute) SetVswitchId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute {
	s.VswitchId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute) SetZoneId(v string) *DescribeInstancesResponseBodyInstancesInstanceAttributeNetworkInterfaceAttributesNetworkInterfaceAttribute {
	s.ZoneId = &v
	return s
}

type DescribeInstancesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponse) SetHeaders(v map[string]*string) *DescribeInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstancesResponse) SetStatusCode(v int32) *DescribeInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstancesResponse) SetBody(v *DescribeInstancesResponseBody) *DescribeInstancesResponse {
	s.Body = v
	return s
}

type DescribeIpControlPolicyItemsRequest struct {
	IpControlId   *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PolicyItemId  *string `json:"PolicyItemId,omitempty" xml:"PolicyItemId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeIpControlPolicyItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlPolicyItemsRequest) GoString() string {
	return s.String()
}

func (s *DescribeIpControlPolicyItemsRequest) SetIpControlId(v string) *DescribeIpControlPolicyItemsRequest {
	s.IpControlId = &v
	return s
}

func (s *DescribeIpControlPolicyItemsRequest) SetPageNumber(v int32) *DescribeIpControlPolicyItemsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeIpControlPolicyItemsRequest) SetPageSize(v int32) *DescribeIpControlPolicyItemsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeIpControlPolicyItemsRequest) SetPolicyItemId(v string) *DescribeIpControlPolicyItemsRequest {
	s.PolicyItemId = &v
	return s
}

func (s *DescribeIpControlPolicyItemsRequest) SetSecurityToken(v string) *DescribeIpControlPolicyItemsRequest {
	s.SecurityToken = &v
	return s
}

type DescribeIpControlPolicyItemsResponseBody struct {
	IpControlPolicyItems *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItems `json:"IpControlPolicyItems,omitempty" xml:"IpControlPolicyItems,omitempty" type:"Struct"`
	PageNumber           *int32                                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId            *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount           *int32                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeIpControlPolicyItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlPolicyItemsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeIpControlPolicyItemsResponseBody) SetIpControlPolicyItems(v *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItems) *DescribeIpControlPolicyItemsResponseBody {
	s.IpControlPolicyItems = v
	return s
}

func (s *DescribeIpControlPolicyItemsResponseBody) SetPageNumber(v int32) *DescribeIpControlPolicyItemsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeIpControlPolicyItemsResponseBody) SetPageSize(v int32) *DescribeIpControlPolicyItemsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeIpControlPolicyItemsResponseBody) SetRequestId(v string) *DescribeIpControlPolicyItemsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeIpControlPolicyItemsResponseBody) SetTotalCount(v int32) *DescribeIpControlPolicyItemsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItems struct {
	IpControlPolicyItem []*DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem `json:"IpControlPolicyItem,omitempty" xml:"IpControlPolicyItem,omitempty" type:"Repeated"`
}

func (s DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItems) GoString() string {
	return s.String()
}

func (s *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItems) SetIpControlPolicyItem(v []*DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem) *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItems {
	s.IpControlPolicyItem = v
	return s
}

type DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem struct {
	AppId        *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	CidrIp       *string `json:"CidrIp,omitempty" xml:"CidrIp,omitempty"`
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	PolicyItemId *string `json:"PolicyItemId,omitempty" xml:"PolicyItemId,omitempty"`
}

func (s DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem) GoString() string {
	return s.String()
}

func (s *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem) SetAppId(v string) *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem {
	s.AppId = &v
	return s
}

func (s *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem) SetCidrIp(v string) *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem {
	s.CidrIp = &v
	return s
}

func (s *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem) SetCreateTime(v string) *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem {
	s.CreateTime = &v
	return s
}

func (s *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem) SetModifiedTime(v string) *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem) SetPolicyItemId(v string) *DescribeIpControlPolicyItemsResponseBodyIpControlPolicyItemsIpControlPolicyItem {
	s.PolicyItemId = &v
	return s
}

type DescribeIpControlPolicyItemsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeIpControlPolicyItemsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeIpControlPolicyItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlPolicyItemsResponse) GoString() string {
	return s.String()
}

func (s *DescribeIpControlPolicyItemsResponse) SetHeaders(v map[string]*string) *DescribeIpControlPolicyItemsResponse {
	s.Headers = v
	return s
}

func (s *DescribeIpControlPolicyItemsResponse) SetStatusCode(v int32) *DescribeIpControlPolicyItemsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeIpControlPolicyItemsResponse) SetBody(v *DescribeIpControlPolicyItemsResponseBody) *DescribeIpControlPolicyItemsResponse {
	s.Body = v
	return s
}

type DescribeIpControlsRequest struct {
	// The ID of the ACL. The ID is unique.
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// The name of the ACL.
	IpControlName *string `json:"IpControlName,omitempty" xml:"IpControlName,omitempty"`
	// The type of the ACL. Valid values:
	//
	// *   **ALLOW**: a whitelist
	// *   **REFUSE**: a blacklist
	IpControlType *string `json:"IpControlType,omitempty" xml:"IpControlType,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeIpControlsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlsRequest) GoString() string {
	return s.String()
}

func (s *DescribeIpControlsRequest) SetIpControlId(v string) *DescribeIpControlsRequest {
	s.IpControlId = &v
	return s
}

func (s *DescribeIpControlsRequest) SetIpControlName(v string) *DescribeIpControlsRequest {
	s.IpControlName = &v
	return s
}

func (s *DescribeIpControlsRequest) SetIpControlType(v string) *DescribeIpControlsRequest {
	s.IpControlType = &v
	return s
}

func (s *DescribeIpControlsRequest) SetPageNumber(v int32) *DescribeIpControlsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeIpControlsRequest) SetPageSize(v int32) *DescribeIpControlsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeIpControlsRequest) SetSecurityToken(v string) *DescribeIpControlsRequest {
	s.SecurityToken = &v
	return s
}

type DescribeIpControlsResponseBody struct {
	// The information about the ACL. The information is an array that consists of IpControlInfo data. The information does not include specific policies.
	IpControlInfos *DescribeIpControlsResponseBodyIpControlInfos `json:"IpControlInfos,omitempty" xml:"IpControlInfos,omitempty" type:"Struct"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeIpControlsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeIpControlsResponseBody) SetIpControlInfos(v *DescribeIpControlsResponseBodyIpControlInfos) *DescribeIpControlsResponseBody {
	s.IpControlInfos = v
	return s
}

func (s *DescribeIpControlsResponseBody) SetPageNumber(v int32) *DescribeIpControlsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeIpControlsResponseBody) SetPageSize(v int32) *DescribeIpControlsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeIpControlsResponseBody) SetRequestId(v string) *DescribeIpControlsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeIpControlsResponseBody) SetTotalCount(v int32) *DescribeIpControlsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeIpControlsResponseBodyIpControlInfos struct {
	IpControlInfo []*DescribeIpControlsResponseBodyIpControlInfosIpControlInfo `json:"IpControlInfo,omitempty" xml:"IpControlInfo,omitempty" type:"Repeated"`
}

func (s DescribeIpControlsResponseBodyIpControlInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlsResponseBodyIpControlInfos) GoString() string {
	return s.String()
}

func (s *DescribeIpControlsResponseBodyIpControlInfos) SetIpControlInfo(v []*DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) *DescribeIpControlsResponseBodyIpControlInfos {
	s.IpControlInfo = v
	return s
}

type DescribeIpControlsResponseBodyIpControlInfosIpControlInfo struct {
	// The time when the ACL was created. The time is displayed in UTC.
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the ACL.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the ACL.
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// The name of the ACL.
	IpControlName *string `json:"IpControlName,omitempty" xml:"IpControlName,omitempty"`
	// The type of the ACL.
	IpControlType *string `json:"IpControlType,omitempty" xml:"IpControlType,omitempty"`
	// The time when the ACL was modified. The time is displayed in UTC.
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The ID of the region in which the ACL is deployed.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) GoString() string {
	return s.String()
}

func (s *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) SetCreateTime(v string) *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo {
	s.CreateTime = &v
	return s
}

func (s *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) SetDescription(v string) *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo {
	s.Description = &v
	return s
}

func (s *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) SetIpControlId(v string) *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo {
	s.IpControlId = &v
	return s
}

func (s *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) SetIpControlName(v string) *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo {
	s.IpControlName = &v
	return s
}

func (s *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) SetIpControlType(v string) *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo {
	s.IpControlType = &v
	return s
}

func (s *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) SetModifiedTime(v string) *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo) SetRegionId(v string) *DescribeIpControlsResponseBodyIpControlInfosIpControlInfo {
	s.RegionId = &v
	return s
}

type DescribeIpControlsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeIpControlsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeIpControlsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeIpControlsResponse) GoString() string {
	return s.String()
}

func (s *DescribeIpControlsResponse) SetHeaders(v map[string]*string) *DescribeIpControlsResponse {
	s.Headers = v
	return s
}

func (s *DescribeIpControlsResponse) SetStatusCode(v int32) *DescribeIpControlsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeIpControlsResponse) SetBody(v *DescribeIpControlsResponseBody) *DescribeIpControlsResponse {
	s.Body = v
	return s
}

type DescribeLogConfigRequest struct {
	LogType       *string `json:"LogType,omitempty" xml:"LogType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeLogConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeLogConfigRequest) SetLogType(v string) *DescribeLogConfigRequest {
	s.LogType = &v
	return s
}

func (s *DescribeLogConfigRequest) SetSecurityToken(v string) *DescribeLogConfigRequest {
	s.SecurityToken = &v
	return s
}

type DescribeLogConfigResponseBody struct {
	LogInfos  *DescribeLogConfigResponseBodyLogInfos `json:"LogInfos,omitempty" xml:"LogInfos,omitempty" type:"Struct"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLogConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLogConfigResponseBody) SetLogInfos(v *DescribeLogConfigResponseBodyLogInfos) *DescribeLogConfigResponseBody {
	s.LogInfos = v
	return s
}

func (s *DescribeLogConfigResponseBody) SetRequestId(v string) *DescribeLogConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLogConfigResponseBodyLogInfos struct {
	LogInfo []*DescribeLogConfigResponseBodyLogInfosLogInfo `json:"LogInfo,omitempty" xml:"LogInfo,omitempty" type:"Repeated"`
}

func (s DescribeLogConfigResponseBodyLogInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogConfigResponseBodyLogInfos) GoString() string {
	return s.String()
}

func (s *DescribeLogConfigResponseBodyLogInfos) SetLogInfo(v []*DescribeLogConfigResponseBodyLogInfosLogInfo) *DescribeLogConfigResponseBodyLogInfos {
	s.LogInfo = v
	return s
}

type DescribeLogConfigResponseBodyLogInfosLogInfo struct {
	LogType     *string `json:"LogType,omitempty" xml:"LogType,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SlsLogStore *string `json:"SlsLogStore,omitempty" xml:"SlsLogStore,omitempty"`
	SlsProject  *string `json:"SlsProject,omitempty" xml:"SlsProject,omitempty"`
}

func (s DescribeLogConfigResponseBodyLogInfosLogInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogConfigResponseBodyLogInfosLogInfo) GoString() string {
	return s.String()
}

func (s *DescribeLogConfigResponseBodyLogInfosLogInfo) SetLogType(v string) *DescribeLogConfigResponseBodyLogInfosLogInfo {
	s.LogType = &v
	return s
}

func (s *DescribeLogConfigResponseBodyLogInfosLogInfo) SetRegionId(v string) *DescribeLogConfigResponseBodyLogInfosLogInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeLogConfigResponseBodyLogInfosLogInfo) SetSlsLogStore(v string) *DescribeLogConfigResponseBodyLogInfosLogInfo {
	s.SlsLogStore = &v
	return s
}

func (s *DescribeLogConfigResponseBodyLogInfosLogInfo) SetSlsProject(v string) *DescribeLogConfigResponseBodyLogInfosLogInfo {
	s.SlsProject = &v
	return s
}

type DescribeLogConfigResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLogConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLogConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeLogConfigResponse) SetHeaders(v map[string]*string) *DescribeLogConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeLogConfigResponse) SetStatusCode(v int32) *DescribeLogConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLogConfigResponse) SetBody(v *DescribeLogConfigResponseBody) *DescribeLogConfigResponse {
	s.Body = v
	return s
}

type DescribeMarketRemainsQuotaRequest struct {
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeMarketRemainsQuotaRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMarketRemainsQuotaRequest) GoString() string {
	return s.String()
}

func (s *DescribeMarketRemainsQuotaRequest) SetDomainName(v string) *DescribeMarketRemainsQuotaRequest {
	s.DomainName = &v
	return s
}

func (s *DescribeMarketRemainsQuotaRequest) SetSecurityToken(v string) *DescribeMarketRemainsQuotaRequest {
	s.SecurityToken = &v
	return s
}

type DescribeMarketRemainsQuotaResponseBody struct {
	RemainsQuota *int64  `json:"RemainsQuota,omitempty" xml:"RemainsQuota,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMarketRemainsQuotaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMarketRemainsQuotaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMarketRemainsQuotaResponseBody) SetRemainsQuota(v int64) *DescribeMarketRemainsQuotaResponseBody {
	s.RemainsQuota = &v
	return s
}

func (s *DescribeMarketRemainsQuotaResponseBody) SetRequestId(v string) *DescribeMarketRemainsQuotaResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMarketRemainsQuotaResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMarketRemainsQuotaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMarketRemainsQuotaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMarketRemainsQuotaResponse) GoString() string {
	return s.String()
}

func (s *DescribeMarketRemainsQuotaResponse) SetHeaders(v map[string]*string) *DescribeMarketRemainsQuotaResponse {
	s.Headers = v
	return s
}

func (s *DescribeMarketRemainsQuotaResponse) SetStatusCode(v int32) *DescribeMarketRemainsQuotaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMarketRemainsQuotaResponse) SetBody(v *DescribeMarketRemainsQuotaResponseBody) *DescribeMarketRemainsQuotaResponse {
	s.Body = v
	return s
}

type DescribeModelsRequest struct {
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the request.
	ModelId *string `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The ID of the model.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeModelsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelsRequest) GoString() string {
	return s.String()
}

func (s *DescribeModelsRequest) SetGroupId(v string) *DescribeModelsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeModelsRequest) SetModelId(v string) *DescribeModelsRequest {
	s.ModelId = &v
	return s
}

func (s *DescribeModelsRequest) SetModelName(v string) *DescribeModelsRequest {
	s.ModelName = &v
	return s
}

func (s *DescribeModelsRequest) SetPageNumber(v int32) *DescribeModelsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeModelsRequest) SetPageSize(v int32) *DescribeModelsRequest {
	s.PageSize = &v
	return s
}

type DescribeModelsResponseBody struct {
	// The ID of the API group to which the model belongs.
	ModelDetails *DescribeModelsResponseBodyModelDetails `json:"ModelDetails,omitempty" xml:"ModelDetails,omitempty" type:"Struct"`
	// The number of entries returned per page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The returned information about models. It is an array consisting of ModelDetail data.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The last modification time of the model.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeModelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeModelsResponseBody) SetModelDetails(v *DescribeModelsResponseBodyModelDetails) *DescribeModelsResponseBody {
	s.ModelDetails = v
	return s
}

func (s *DescribeModelsResponseBody) SetPageNumber(v int32) *DescribeModelsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeModelsResponseBody) SetPageSize(v int32) *DescribeModelsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeModelsResponseBody) SetRequestId(v string) *DescribeModelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeModelsResponseBody) SetTotalCount(v int32) *DescribeModelsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeModelsResponseBodyModelDetails struct {
	ModelDetail []*DescribeModelsResponseBodyModelDetailsModelDetail `json:"ModelDetail,omitempty" xml:"ModelDetail,omitempty" type:"Repeated"`
}

func (s DescribeModelsResponseBodyModelDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelsResponseBodyModelDetails) GoString() string {
	return s.String()
}

func (s *DescribeModelsResponseBodyModelDetails) SetModelDetail(v []*DescribeModelsResponseBodyModelDetailsModelDetail) *DescribeModelsResponseBodyModelDetails {
	s.ModelDetail = v
	return s
}

type DescribeModelsResponseBodyModelDetailsModelDetail struct {
	// The URI of the model.
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The name of the model.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The definition of the model.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// *   Fuzzy queries are supported.
	ModelId *string `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	// The ID of the model.
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	// Obtains the created models of an API group.
	ModelRef *string `json:"ModelRef,omitempty" xml:"ModelRef,omitempty"`
	// The definition of the model description.
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The time when the model was created.
	Schema *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
}

func (s DescribeModelsResponseBodyModelDetailsModelDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelsResponseBodyModelDetailsModelDetail) GoString() string {
	return s.String()
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetCreatedTime(v string) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.CreatedTime = &v
	return s
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetDescription(v string) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.Description = &v
	return s
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetGroupId(v string) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.GroupId = &v
	return s
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetModelId(v string) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.ModelId = &v
	return s
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetModelName(v string) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.ModelName = &v
	return s
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetModelRef(v string) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.ModelRef = &v
	return s
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetModifiedTime(v string) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeModelsResponseBodyModelDetailsModelDetail) SetSchema(v string) *DescribeModelsResponseBodyModelDetailsModelDetail {
	s.Schema = &v
	return s
}

type DescribeModelsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeModelsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeModelsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelsResponse) GoString() string {
	return s.String()
}

func (s *DescribeModelsResponse) SetHeaders(v map[string]*string) *DescribeModelsResponse {
	s.Headers = v
	return s
}

func (s *DescribeModelsResponse) SetStatusCode(v int32) *DescribeModelsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeModelsResponse) SetBody(v *DescribeModelsResponseBody) *DescribeModelsResponse {
	s.Body = v
	return s
}

type DescribePluginApisRequest struct {
	ApiId         *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiName       *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Method        *string `json:"Method,omitempty" xml:"Method,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Path          *string `json:"Path,omitempty" xml:"Path,omitempty"`
	PluginId      *string `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribePluginApisRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginApisRequest) GoString() string {
	return s.String()
}

func (s *DescribePluginApisRequest) SetApiId(v string) *DescribePluginApisRequest {
	s.ApiId = &v
	return s
}

func (s *DescribePluginApisRequest) SetApiName(v string) *DescribePluginApisRequest {
	s.ApiName = &v
	return s
}

func (s *DescribePluginApisRequest) SetDescription(v string) *DescribePluginApisRequest {
	s.Description = &v
	return s
}

func (s *DescribePluginApisRequest) SetGroupId(v string) *DescribePluginApisRequest {
	s.GroupId = &v
	return s
}

func (s *DescribePluginApisRequest) SetMethod(v string) *DescribePluginApisRequest {
	s.Method = &v
	return s
}

func (s *DescribePluginApisRequest) SetPageNumber(v int32) *DescribePluginApisRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribePluginApisRequest) SetPageSize(v int32) *DescribePluginApisRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePluginApisRequest) SetPath(v string) *DescribePluginApisRequest {
	s.Path = &v
	return s
}

func (s *DescribePluginApisRequest) SetPluginId(v string) *DescribePluginApisRequest {
	s.PluginId = &v
	return s
}

func (s *DescribePluginApisRequest) SetSecurityToken(v string) *DescribePluginApisRequest {
	s.SecurityToken = &v
	return s
}

type DescribePluginApisResponseBody struct {
	ApiSummarys *DescribePluginApisResponseBodyApiSummarys `json:"ApiSummarys,omitempty" xml:"ApiSummarys,omitempty" type:"Struct"`
	PageNumber  *int32                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePluginApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginApisResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePluginApisResponseBody) SetApiSummarys(v *DescribePluginApisResponseBodyApiSummarys) *DescribePluginApisResponseBody {
	s.ApiSummarys = v
	return s
}

func (s *DescribePluginApisResponseBody) SetPageNumber(v int32) *DescribePluginApisResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribePluginApisResponseBody) SetPageSize(v int32) *DescribePluginApisResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePluginApisResponseBody) SetRequestId(v string) *DescribePluginApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePluginApisResponseBody) SetTotalCount(v int32) *DescribePluginApisResponseBody {
	s.TotalCount = &v
	return s
}

type DescribePluginApisResponseBodyApiSummarys struct {
	ApiPluginSummary []*DescribePluginApisResponseBodyApiSummarysApiPluginSummary `json:"ApiPluginSummary,omitempty" xml:"ApiPluginSummary,omitempty" type:"Repeated"`
}

func (s DescribePluginApisResponseBodyApiSummarys) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginApisResponseBodyApiSummarys) GoString() string {
	return s.String()
}

func (s *DescribePluginApisResponseBodyApiSummarys) SetApiPluginSummary(v []*DescribePluginApisResponseBodyApiSummarysApiPluginSummary) *DescribePluginApisResponseBodyApiSummarys {
	s.ApiPluginSummary = v
	return s
}

type DescribePluginApisResponseBodyApiSummarysApiPluginSummary struct {
	ApiId       *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiName     *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId     *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName   *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	Method      *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Path        *string `json:"Path,omitempty" xml:"Path,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StageName   *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribePluginApisResponseBodyApiSummarysApiPluginSummary) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginApisResponseBodyApiSummarysApiPluginSummary) GoString() string {
	return s.String()
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetApiId(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.ApiId = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetApiName(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.ApiName = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetDescription(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.Description = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetGroupId(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.GroupId = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetGroupName(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.GroupName = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetMethod(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.Method = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetPath(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.Path = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetRegionId(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.RegionId = &v
	return s
}

func (s *DescribePluginApisResponseBodyApiSummarysApiPluginSummary) SetStageName(v string) *DescribePluginApisResponseBodyApiSummarysApiPluginSummary {
	s.StageName = &v
	return s
}

type DescribePluginApisResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePluginApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePluginApisResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginApisResponse) GoString() string {
	return s.String()
}

func (s *DescribePluginApisResponse) SetHeaders(v map[string]*string) *DescribePluginApisResponse {
	s.Headers = v
	return s
}

func (s *DescribePluginApisResponse) SetStatusCode(v int32) *DescribePluginApisResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePluginApisResponse) SetBody(v *DescribePluginApisResponseBody) *DescribePluginApisResponse {
	s.Body = v
	return s
}

type DescribePluginSchemasRequest struct {
	Language      *string `json:"Language,omitempty" xml:"Language,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribePluginSchemasRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginSchemasRequest) GoString() string {
	return s.String()
}

func (s *DescribePluginSchemasRequest) SetLanguage(v string) *DescribePluginSchemasRequest {
	s.Language = &v
	return s
}

func (s *DescribePluginSchemasRequest) SetSecurityToken(v string) *DescribePluginSchemasRequest {
	s.SecurityToken = &v
	return s
}

type DescribePluginSchemasResponseBody struct {
	PluginSchemas *DescribePluginSchemasResponseBodyPluginSchemas `json:"PluginSchemas,omitempty" xml:"PluginSchemas,omitempty" type:"Struct"`
	RequestId     *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePluginSchemasResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginSchemasResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePluginSchemasResponseBody) SetPluginSchemas(v *DescribePluginSchemasResponseBodyPluginSchemas) *DescribePluginSchemasResponseBody {
	s.PluginSchemas = v
	return s
}

func (s *DescribePluginSchemasResponseBody) SetRequestId(v string) *DescribePluginSchemasResponseBody {
	s.RequestId = &v
	return s
}

type DescribePluginSchemasResponseBodyPluginSchemas struct {
	PluginSchema []*DescribePluginSchemasResponseBodyPluginSchemasPluginSchema `json:"PluginSchema,omitempty" xml:"PluginSchema,omitempty" type:"Repeated"`
}

func (s DescribePluginSchemasResponseBodyPluginSchemas) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginSchemasResponseBodyPluginSchemas) GoString() string {
	return s.String()
}

func (s *DescribePluginSchemasResponseBodyPluginSchemas) SetPluginSchema(v []*DescribePluginSchemasResponseBodyPluginSchemasPluginSchema) *DescribePluginSchemasResponseBodyPluginSchemas {
	s.PluginSchema = v
	return s
}

type DescribePluginSchemasResponseBodyPluginSchemasPluginSchema struct {
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DocumentId     *string `json:"DocumentId,omitempty" xml:"DocumentId,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	SupportClassic *bool   `json:"SupportClassic,omitempty" xml:"SupportClassic,omitempty"`
	Title          *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s DescribePluginSchemasResponseBodyPluginSchemasPluginSchema) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginSchemasResponseBodyPluginSchemasPluginSchema) GoString() string {
	return s.String()
}

func (s *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema) SetDescription(v string) *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema {
	s.Description = &v
	return s
}

func (s *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema) SetDocumentId(v string) *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema {
	s.DocumentId = &v
	return s
}

func (s *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema) SetName(v string) *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema {
	s.Name = &v
	return s
}

func (s *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema) SetSupportClassic(v bool) *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema {
	s.SupportClassic = &v
	return s
}

func (s *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema) SetTitle(v string) *DescribePluginSchemasResponseBodyPluginSchemasPluginSchema {
	s.Title = &v
	return s
}

type DescribePluginSchemasResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePluginSchemasResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePluginSchemasResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginSchemasResponse) GoString() string {
	return s.String()
}

func (s *DescribePluginSchemasResponse) SetHeaders(v map[string]*string) *DescribePluginSchemasResponse {
	s.Headers = v
	return s
}

func (s *DescribePluginSchemasResponse) SetStatusCode(v int32) *DescribePluginSchemasResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePluginSchemasResponse) SetBody(v *DescribePluginSchemasResponseBody) *DescribePluginSchemasResponse {
	s.Body = v
	return s
}

type DescribePluginTemplatesRequest struct {
	Language      *string `json:"Language,omitempty" xml:"Language,omitempty"`
	PluginName    *string `json:"PluginName,omitempty" xml:"PluginName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribePluginTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginTemplatesRequest) GoString() string {
	return s.String()
}

func (s *DescribePluginTemplatesRequest) SetLanguage(v string) *DescribePluginTemplatesRequest {
	s.Language = &v
	return s
}

func (s *DescribePluginTemplatesRequest) SetPluginName(v string) *DescribePluginTemplatesRequest {
	s.PluginName = &v
	return s
}

func (s *DescribePluginTemplatesRequest) SetSecurityToken(v string) *DescribePluginTemplatesRequest {
	s.SecurityToken = &v
	return s
}

type DescribePluginTemplatesResponseBody struct {
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Templates *DescribePluginTemplatesResponseBodyTemplates `json:"Templates,omitempty" xml:"Templates,omitempty" type:"Struct"`
}

func (s DescribePluginTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePluginTemplatesResponseBody) SetRequestId(v string) *DescribePluginTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePluginTemplatesResponseBody) SetTemplates(v *DescribePluginTemplatesResponseBodyTemplates) *DescribePluginTemplatesResponseBody {
	s.Templates = v
	return s
}

type DescribePluginTemplatesResponseBodyTemplates struct {
	Template []*DescribePluginTemplatesResponseBodyTemplatesTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Repeated"`
}

func (s DescribePluginTemplatesResponseBodyTemplates) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginTemplatesResponseBodyTemplates) GoString() string {
	return s.String()
}

func (s *DescribePluginTemplatesResponseBodyTemplates) SetTemplate(v []*DescribePluginTemplatesResponseBodyTemplatesTemplate) *DescribePluginTemplatesResponseBodyTemplates {
	s.Template = v
	return s
}

type DescribePluginTemplatesResponseBodyTemplatesTemplate struct {
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DocumentAnchor *string `json:"DocumentAnchor,omitempty" xml:"DocumentAnchor,omitempty"`
	DocumentId     *string `json:"DocumentId,omitempty" xml:"DocumentId,omitempty"`
	Sample         *string `json:"Sample,omitempty" xml:"Sample,omitempty"`
	Title          *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s DescribePluginTemplatesResponseBodyTemplatesTemplate) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginTemplatesResponseBodyTemplatesTemplate) GoString() string {
	return s.String()
}

func (s *DescribePluginTemplatesResponseBodyTemplatesTemplate) SetDescription(v string) *DescribePluginTemplatesResponseBodyTemplatesTemplate {
	s.Description = &v
	return s
}

func (s *DescribePluginTemplatesResponseBodyTemplatesTemplate) SetDocumentAnchor(v string) *DescribePluginTemplatesResponseBodyTemplatesTemplate {
	s.DocumentAnchor = &v
	return s
}

func (s *DescribePluginTemplatesResponseBodyTemplatesTemplate) SetDocumentId(v string) *DescribePluginTemplatesResponseBodyTemplatesTemplate {
	s.DocumentId = &v
	return s
}

func (s *DescribePluginTemplatesResponseBodyTemplatesTemplate) SetSample(v string) *DescribePluginTemplatesResponseBodyTemplatesTemplate {
	s.Sample = &v
	return s
}

func (s *DescribePluginTemplatesResponseBodyTemplatesTemplate) SetTitle(v string) *DescribePluginTemplatesResponseBodyTemplatesTemplate {
	s.Title = &v
	return s
}

type DescribePluginTemplatesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePluginTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePluginTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginTemplatesResponse) GoString() string {
	return s.String()
}

func (s *DescribePluginTemplatesResponse) SetHeaders(v map[string]*string) *DescribePluginTemplatesResponse {
	s.Headers = v
	return s
}

func (s *DescribePluginTemplatesResponse) SetStatusCode(v int32) *DescribePluginTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePluginTemplatesResponse) SetBody(v *DescribePluginTemplatesResponseBody) *DescribePluginTemplatesResponse {
	s.Body = v
	return s
}

type DescribePluginsRequest struct {
	PageNumber    *int32                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PluginId      *string                      `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	PluginName    *string                      `json:"PluginName,omitempty" xml:"PluginName,omitempty"`
	PluginType    *string                      `json:"PluginType,omitempty" xml:"PluginType,omitempty"`
	SecurityToken *string                      `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag           []*DescribePluginsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribePluginsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsRequest) GoString() string {
	return s.String()
}

func (s *DescribePluginsRequest) SetPageNumber(v int32) *DescribePluginsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribePluginsRequest) SetPageSize(v int32) *DescribePluginsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePluginsRequest) SetPluginId(v string) *DescribePluginsRequest {
	s.PluginId = &v
	return s
}

func (s *DescribePluginsRequest) SetPluginName(v string) *DescribePluginsRequest {
	s.PluginName = &v
	return s
}

func (s *DescribePluginsRequest) SetPluginType(v string) *DescribePluginsRequest {
	s.PluginType = &v
	return s
}

func (s *DescribePluginsRequest) SetSecurityToken(v string) *DescribePluginsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribePluginsRequest) SetTag(v []*DescribePluginsRequestTag) *DescribePluginsRequest {
	s.Tag = v
	return s
}

type DescribePluginsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribePluginsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribePluginsRequestTag) SetKey(v string) *DescribePluginsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribePluginsRequestTag) SetValue(v string) *DescribePluginsRequestTag {
	s.Value = &v
	return s
}

type DescribePluginsResponseBody struct {
	PageNumber *int32                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Plugins    *DescribePluginsResponseBodyPlugins `json:"Plugins,omitempty" xml:"Plugins,omitempty" type:"Struct"`
	RequestId  *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePluginsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePluginsResponseBody) SetPageNumber(v int32) *DescribePluginsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribePluginsResponseBody) SetPageSize(v int32) *DescribePluginsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePluginsResponseBody) SetPlugins(v *DescribePluginsResponseBodyPlugins) *DescribePluginsResponseBody {
	s.Plugins = v
	return s
}

func (s *DescribePluginsResponseBody) SetRequestId(v string) *DescribePluginsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePluginsResponseBody) SetTotalCount(v int32) *DescribePluginsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribePluginsResponseBodyPlugins struct {
	PluginAttribute []*DescribePluginsResponseBodyPluginsPluginAttribute `json:"PluginAttribute,omitempty" xml:"PluginAttribute,omitempty" type:"Repeated"`
}

func (s DescribePluginsResponseBodyPlugins) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsResponseBodyPlugins) GoString() string {
	return s.String()
}

func (s *DescribePluginsResponseBodyPlugins) SetPluginAttribute(v []*DescribePluginsResponseBodyPluginsPluginAttribute) *DescribePluginsResponseBodyPlugins {
	s.PluginAttribute = v
	return s
}

type DescribePluginsResponseBodyPluginsPluginAttribute struct {
	CreatedTime  *string                                                `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description  *string                                                `json:"Description,omitempty" xml:"Description,omitempty"`
	ModifiedTime *string                                                `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	PluginData   *string                                                `json:"PluginData,omitempty" xml:"PluginData,omitempty"`
	PluginId     *string                                                `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	PluginName   *string                                                `json:"PluginName,omitempty" xml:"PluginName,omitempty"`
	PluginType   *string                                                `json:"PluginType,omitempty" xml:"PluginType,omitempty"`
	RegionId     *string                                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Tags         *DescribePluginsResponseBodyPluginsPluginAttributeTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s DescribePluginsResponseBodyPluginsPluginAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsResponseBodyPluginsPluginAttribute) GoString() string {
	return s.String()
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetCreatedTime(v string) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.CreatedTime = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetDescription(v string) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.Description = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetModifiedTime(v string) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.ModifiedTime = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetPluginData(v string) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.PluginData = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetPluginId(v string) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.PluginId = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetPluginName(v string) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.PluginName = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetPluginType(v string) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.PluginType = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetRegionId(v string) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttribute) SetTags(v *DescribePluginsResponseBodyPluginsPluginAttributeTags) *DescribePluginsResponseBodyPluginsPluginAttribute {
	s.Tags = v
	return s
}

type DescribePluginsResponseBodyPluginsPluginAttributeTags struct {
	TagInfo []*DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo `json:"TagInfo,omitempty" xml:"TagInfo,omitempty" type:"Repeated"`
}

func (s DescribePluginsResponseBodyPluginsPluginAttributeTags) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsResponseBodyPluginsPluginAttributeTags) GoString() string {
	return s.String()
}

func (s *DescribePluginsResponseBodyPluginsPluginAttributeTags) SetTagInfo(v []*DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo) *DescribePluginsResponseBodyPluginsPluginAttributeTags {
	s.TagInfo = v
	return s
}

type DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo) GoString() string {
	return s.String()
}

func (s *DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo) SetKey(v string) *DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo {
	s.Key = &v
	return s
}

func (s *DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo) SetValue(v string) *DescribePluginsResponseBodyPluginsPluginAttributeTagsTagInfo {
	s.Value = &v
	return s
}

type DescribePluginsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePluginsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePluginsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsResponse) GoString() string {
	return s.String()
}

func (s *DescribePluginsResponse) SetHeaders(v map[string]*string) *DescribePluginsResponse {
	s.Headers = v
	return s
}

func (s *DescribePluginsResponse) SetStatusCode(v int32) *DescribePluginsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePluginsResponse) SetBody(v *DescribePluginsResponseBody) *DescribePluginsResponse {
	s.Body = v
	return s
}

type DescribePluginsByApiRequest struct {
	// The ID of the API.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the group to which the API belongs.
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The environment in which the API is running. Valid values:
	//
	// *   **RELEASE**: production
	// *   **PRE**: staging
	// *   **TEST**: test
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribePluginsByApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsByApiRequest) GoString() string {
	return s.String()
}

func (s *DescribePluginsByApiRequest) SetApiId(v string) *DescribePluginsByApiRequest {
	s.ApiId = &v
	return s
}

func (s *DescribePluginsByApiRequest) SetGroupId(v string) *DescribePluginsByApiRequest {
	s.GroupId = &v
	return s
}

func (s *DescribePluginsByApiRequest) SetPageNumber(v int32) *DescribePluginsByApiRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribePluginsByApiRequest) SetPageSize(v int32) *DescribePluginsByApiRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePluginsByApiRequest) SetSecurityToken(v string) *DescribePluginsByApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribePluginsByApiRequest) SetStageName(v string) *DescribePluginsByApiRequest {
	s.StageName = &v
	return s
}

type DescribePluginsByApiResponseBody struct {
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The plug-in information. The information is an array that consists of PluginAttribute data.
	Plugins *DescribePluginsByApiResponseBodyPlugins `json:"Plugins,omitempty" xml:"Plugins,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePluginsByApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsByApiResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePluginsByApiResponseBody) SetPageNumber(v int32) *DescribePluginsByApiResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribePluginsByApiResponseBody) SetPageSize(v int32) *DescribePluginsByApiResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePluginsByApiResponseBody) SetPlugins(v *DescribePluginsByApiResponseBodyPlugins) *DescribePluginsByApiResponseBody {
	s.Plugins = v
	return s
}

func (s *DescribePluginsByApiResponseBody) SetRequestId(v string) *DescribePluginsByApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePluginsByApiResponseBody) SetTotalCount(v int32) *DescribePluginsByApiResponseBody {
	s.TotalCount = &v
	return s
}

type DescribePluginsByApiResponseBodyPlugins struct {
	PluginAttribute []*DescribePluginsByApiResponseBodyPluginsPluginAttribute `json:"PluginAttribute,omitempty" xml:"PluginAttribute,omitempty" type:"Repeated"`
}

func (s DescribePluginsByApiResponseBodyPlugins) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsByApiResponseBodyPlugins) GoString() string {
	return s.String()
}

func (s *DescribePluginsByApiResponseBodyPlugins) SetPluginAttribute(v []*DescribePluginsByApiResponseBodyPluginsPluginAttribute) *DescribePluginsByApiResponseBodyPlugins {
	s.PluginAttribute = v
	return s
}

type DescribePluginsByApiResponseBodyPluginsPluginAttribute struct {
	// The time when the plug-in was created. The time is displayed in UTC.
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The description of the plug-in.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The time when the plug-in was last modified. The time is displayed in UTC.
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The definition statement of the plug-in.
	PluginData *string `json:"PluginData,omitempty" xml:"PluginData,omitempty"`
	// The ID of the plug-in.
	PluginId *string `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	// The name of the plug-in.
	PluginName *string `json:"PluginName,omitempty" xml:"PluginName,omitempty"`
	// The type of the plug-in.
	PluginType *string `json:"PluginType,omitempty" xml:"PluginType,omitempty"`
	// The region where the plug-in resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribePluginsByApiResponseBodyPluginsPluginAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsByApiResponseBodyPluginsPluginAttribute) GoString() string {
	return s.String()
}

func (s *DescribePluginsByApiResponseBodyPluginsPluginAttribute) SetCreatedTime(v string) *DescribePluginsByApiResponseBodyPluginsPluginAttribute {
	s.CreatedTime = &v
	return s
}

func (s *DescribePluginsByApiResponseBodyPluginsPluginAttribute) SetDescription(v string) *DescribePluginsByApiResponseBodyPluginsPluginAttribute {
	s.Description = &v
	return s
}

func (s *DescribePluginsByApiResponseBodyPluginsPluginAttribute) SetModifiedTime(v string) *DescribePluginsByApiResponseBodyPluginsPluginAttribute {
	s.ModifiedTime = &v
	return s
}

func (s *DescribePluginsByApiResponseBodyPluginsPluginAttribute) SetPluginData(v string) *DescribePluginsByApiResponseBodyPluginsPluginAttribute {
	s.PluginData = &v
	return s
}

func (s *DescribePluginsByApiResponseBodyPluginsPluginAttribute) SetPluginId(v string) *DescribePluginsByApiResponseBodyPluginsPluginAttribute {
	s.PluginId = &v
	return s
}

func (s *DescribePluginsByApiResponseBodyPluginsPluginAttribute) SetPluginName(v string) *DescribePluginsByApiResponseBodyPluginsPluginAttribute {
	s.PluginName = &v
	return s
}

func (s *DescribePluginsByApiResponseBodyPluginsPluginAttribute) SetPluginType(v string) *DescribePluginsByApiResponseBodyPluginsPluginAttribute {
	s.PluginType = &v
	return s
}

func (s *DescribePluginsByApiResponseBodyPluginsPluginAttribute) SetRegionId(v string) *DescribePluginsByApiResponseBodyPluginsPluginAttribute {
	s.RegionId = &v
	return s
}

type DescribePluginsByApiResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePluginsByApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePluginsByApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePluginsByApiResponse) GoString() string {
	return s.String()
}

func (s *DescribePluginsByApiResponse) SetHeaders(v map[string]*string) *DescribePluginsByApiResponse {
	s.Headers = v
	return s
}

func (s *DescribePluginsByApiResponse) SetStatusCode(v int32) *DescribePluginsByApiResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePluginsByApiResponse) SetBody(v *DescribePluginsByApiResponseBody) *DescribePluginsByApiResponse {
	s.Body = v
	return s
}

type DescribePurchasedApiGroupRequest struct {
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribePurchasedApiGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupRequest) SetGroupId(v string) *DescribePurchasedApiGroupRequest {
	s.GroupId = &v
	return s
}

func (s *DescribePurchasedApiGroupRequest) SetSecurityToken(v string) *DescribePurchasedApiGroupRequest {
	s.SecurityToken = &v
	return s
}

type DescribePurchasedApiGroupResponseBody struct {
	Description   *string                                       `json:"Description,omitempty" xml:"Description,omitempty"`
	Domains       *DescribePurchasedApiGroupResponseBodyDomains `json:"Domains,omitempty" xml:"Domains,omitempty" type:"Struct"`
	GroupId       *string                                       `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName     *string                                       `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	PurchasedTime *string                                       `json:"PurchasedTime,omitempty" xml:"PurchasedTime,omitempty"`
	RegionId      *string                                       `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RequestId     *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status        *string                                       `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribePurchasedApiGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupResponseBody) SetDescription(v string) *DescribePurchasedApiGroupResponseBody {
	s.Description = &v
	return s
}

func (s *DescribePurchasedApiGroupResponseBody) SetDomains(v *DescribePurchasedApiGroupResponseBodyDomains) *DescribePurchasedApiGroupResponseBody {
	s.Domains = v
	return s
}

func (s *DescribePurchasedApiGroupResponseBody) SetGroupId(v string) *DescribePurchasedApiGroupResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribePurchasedApiGroupResponseBody) SetGroupName(v string) *DescribePurchasedApiGroupResponseBody {
	s.GroupName = &v
	return s
}

func (s *DescribePurchasedApiGroupResponseBody) SetPurchasedTime(v string) *DescribePurchasedApiGroupResponseBody {
	s.PurchasedTime = &v
	return s
}

func (s *DescribePurchasedApiGroupResponseBody) SetRegionId(v string) *DescribePurchasedApiGroupResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribePurchasedApiGroupResponseBody) SetRequestId(v string) *DescribePurchasedApiGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePurchasedApiGroupResponseBody) SetStatus(v string) *DescribePurchasedApiGroupResponseBody {
	s.Status = &v
	return s
}

type DescribePurchasedApiGroupResponseBodyDomains struct {
	DomainItem []*DescribePurchasedApiGroupResponseBodyDomainsDomainItem `json:"DomainItem,omitempty" xml:"DomainItem,omitempty" type:"Repeated"`
}

func (s DescribePurchasedApiGroupResponseBodyDomains) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupResponseBodyDomains) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupResponseBodyDomains) SetDomainItem(v []*DescribePurchasedApiGroupResponseBodyDomainsDomainItem) *DescribePurchasedApiGroupResponseBodyDomains {
	s.DomainItem = v
	return s
}

type DescribePurchasedApiGroupResponseBodyDomainsDomainItem struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
}

func (s DescribePurchasedApiGroupResponseBodyDomainsDomainItem) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupResponseBodyDomainsDomainItem) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupResponseBodyDomainsDomainItem) SetDomainName(v string) *DescribePurchasedApiGroupResponseBodyDomainsDomainItem {
	s.DomainName = &v
	return s
}

type DescribePurchasedApiGroupResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePurchasedApiGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePurchasedApiGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupResponse) SetHeaders(v map[string]*string) *DescribePurchasedApiGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribePurchasedApiGroupResponse) SetStatusCode(v int32) *DescribePurchasedApiGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePurchasedApiGroupResponse) SetBody(v *DescribePurchasedApiGroupResponseBody) *DescribePurchasedApiGroupResponse {
	s.Body = v
	return s
}

type DescribePurchasedApiGroupsRequest struct {
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribePurchasedApiGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupsRequest) SetPageNumber(v int32) *DescribePurchasedApiGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribePurchasedApiGroupsRequest) SetPageSize(v int32) *DescribePurchasedApiGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePurchasedApiGroupsRequest) SetSecurityToken(v string) *DescribePurchasedApiGroupsRequest {
	s.SecurityToken = &v
	return s
}

type DescribePurchasedApiGroupsResponseBody struct {
	PageNumber                  *int32                                                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                    *int32                                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PurchasedApiGroupAttributes *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributes `json:"PurchasedApiGroupAttributes,omitempty" xml:"PurchasedApiGroupAttributes,omitempty" type:"Struct"`
	RequestId                   *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount                  *int32                                                             `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePurchasedApiGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupsResponseBody) SetPageNumber(v int32) *DescribePurchasedApiGroupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBody) SetPageSize(v int32) *DescribePurchasedApiGroupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBody) SetPurchasedApiGroupAttributes(v *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributes) *DescribePurchasedApiGroupsResponseBody {
	s.PurchasedApiGroupAttributes = v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBody) SetRequestId(v string) *DescribePurchasedApiGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBody) SetTotalCount(v int32) *DescribePurchasedApiGroupsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributes struct {
	PurchasedApiGroupAttribute []*DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute `json:"PurchasedApiGroupAttribute,omitempty" xml:"PurchasedApiGroupAttribute,omitempty" type:"Repeated"`
}

func (s DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributes) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributes) SetPurchasedApiGroupAttribute(v []*DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributes {
	s.PurchasedApiGroupAttribute = v
	return s
}

type DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute struct {
	BillingType    *string `json:"BillingType,omitempty" xml:"BillingType,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ExpireTime     *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	GroupId        *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName      *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	InvokeTimesMax *int64  `json:"InvokeTimesMax,omitempty" xml:"InvokeTimesMax,omitempty"`
	InvokeTimesNow *int64  `json:"InvokeTimesNow,omitempty" xml:"InvokeTimesNow,omitempty"`
	PurchasedTime  *string `json:"PurchasedTime,omitempty" xml:"PurchasedTime,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetBillingType(v string) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.BillingType = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetDescription(v string) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.Description = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetExpireTime(v string) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.ExpireTime = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetGroupId(v string) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.GroupId = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetGroupName(v string) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.GroupName = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetInvokeTimesMax(v int64) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.InvokeTimesMax = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetInvokeTimesNow(v int64) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.InvokeTimesNow = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetPurchasedTime(v string) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.PurchasedTime = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetRegionId(v string) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute) SetStatus(v string) *DescribePurchasedApiGroupsResponseBodyPurchasedApiGroupAttributesPurchasedApiGroupAttribute {
	s.Status = &v
	return s
}

type DescribePurchasedApiGroupsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePurchasedApiGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePurchasedApiGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApiGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApiGroupsResponse) SetHeaders(v map[string]*string) *DescribePurchasedApiGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribePurchasedApiGroupsResponse) SetStatusCode(v int32) *DescribePurchasedApiGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePurchasedApiGroupsResponse) SetBody(v *DescribePurchasedApiGroupsResponseBody) *DescribePurchasedApiGroupsResponse {
	s.Body = v
	return s
}

type DescribePurchasedApisRequest struct {
	ApiId         *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiName       *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageName     *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	Visibility    *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribePurchasedApisRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApisRequest) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApisRequest) SetApiId(v string) *DescribePurchasedApisRequest {
	s.ApiId = &v
	return s
}

func (s *DescribePurchasedApisRequest) SetApiName(v string) *DescribePurchasedApisRequest {
	s.ApiName = &v
	return s
}

func (s *DescribePurchasedApisRequest) SetGroupId(v string) *DescribePurchasedApisRequest {
	s.GroupId = &v
	return s
}

func (s *DescribePurchasedApisRequest) SetPageNumber(v int32) *DescribePurchasedApisRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribePurchasedApisRequest) SetPageSize(v int32) *DescribePurchasedApisRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePurchasedApisRequest) SetSecurityToken(v string) *DescribePurchasedApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribePurchasedApisRequest) SetStageName(v string) *DescribePurchasedApisRequest {
	s.StageName = &v
	return s
}

func (s *DescribePurchasedApisRequest) SetVisibility(v string) *DescribePurchasedApisRequest {
	s.Visibility = &v
	return s
}

type DescribePurchasedApisResponseBody struct {
	PageNumber    *int32                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PurchasedApis *DescribePurchasedApisResponseBodyPurchasedApis `json:"PurchasedApis,omitempty" xml:"PurchasedApis,omitempty" type:"Struct"`
	RequestId     *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount    *int32                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePurchasedApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApisResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApisResponseBody) SetPageNumber(v int32) *DescribePurchasedApisResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribePurchasedApisResponseBody) SetPageSize(v int32) *DescribePurchasedApisResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePurchasedApisResponseBody) SetPurchasedApis(v *DescribePurchasedApisResponseBodyPurchasedApis) *DescribePurchasedApisResponseBody {
	s.PurchasedApis = v
	return s
}

func (s *DescribePurchasedApisResponseBody) SetRequestId(v string) *DescribePurchasedApisResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePurchasedApisResponseBody) SetTotalCount(v int32) *DescribePurchasedApisResponseBody {
	s.TotalCount = &v
	return s
}

type DescribePurchasedApisResponseBodyPurchasedApis struct {
	PurchasedApi []*DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi `json:"PurchasedApi,omitempty" xml:"PurchasedApi,omitempty" type:"Repeated"`
}

func (s DescribePurchasedApisResponseBodyPurchasedApis) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApisResponseBodyPurchasedApis) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApisResponseBodyPurchasedApis) SetPurchasedApi(v []*DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) *DescribePurchasedApisResponseBodyPurchasedApis {
	s.PurchasedApi = v
	return s
}

type DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi struct {
	ApiId         *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiName       *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	DeployedTime  *string `json:"DeployedTime,omitempty" xml:"DeployedTime,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName     *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	ModifiedTime  *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	PurchasedTime *string `json:"PurchasedTime,omitempty" xml:"PurchasedTime,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StageName     *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	Visibility    *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetApiId(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.ApiId = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetApiName(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.ApiName = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetDeployedTime(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.DeployedTime = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetDescription(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.Description = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetGroupId(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.GroupId = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetGroupName(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.GroupName = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetModifiedTime(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.ModifiedTime = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetPurchasedTime(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.PurchasedTime = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetRegionId(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.RegionId = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetStageName(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.StageName = &v
	return s
}

func (s *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi) SetVisibility(v string) *DescribePurchasedApisResponseBodyPurchasedApisPurchasedApi {
	s.Visibility = &v
	return s
}

type DescribePurchasedApisResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePurchasedApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePurchasedApisResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePurchasedApisResponse) GoString() string {
	return s.String()
}

func (s *DescribePurchasedApisResponse) SetHeaders(v map[string]*string) *DescribePurchasedApisResponse {
	s.Headers = v
	return s
}

func (s *DescribePurchasedApisResponse) SetStatusCode(v int32) *DescribePurchasedApisResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePurchasedApisResponse) SetBody(v *DescribePurchasedApisResponseBody) *DescribePurchasedApisResponse {
	s.Body = v
	return s
}

type DescribeRegionsRequest struct {
	Language      *string `json:"Language,omitempty" xml:"Language,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeRegionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRegionsRequest) SetLanguage(v string) *DescribeRegionsRequest {
	s.Language = &v
	return s
}

func (s *DescribeRegionsRequest) SetSecurityToken(v string) *DescribeRegionsRequest {
	s.SecurityToken = &v
	return s
}

type DescribeRegionsResponseBody struct {
	Regions   *DescribeRegionsResponseBodyRegions `json:"Regions,omitempty" xml:"Regions,omitempty" type:"Struct"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRegionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBody) SetRegions(v *DescribeRegionsResponseBodyRegions) *DescribeRegionsResponseBody {
	s.Regions = v
	return s
}

func (s *DescribeRegionsResponseBody) SetRequestId(v string) *DescribeRegionsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRegionsResponseBodyRegions struct {
	Region []*DescribeRegionsResponseBodyRegionsRegion `json:"Region,omitempty" xml:"Region,omitempty" type:"Repeated"`
}

func (s DescribeRegionsResponseBodyRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegions) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegions) SetRegion(v []*DescribeRegionsResponseBodyRegionsRegion) *DescribeRegionsResponseBodyRegions {
	s.Region = v
	return s
}

type DescribeRegionsResponseBodyRegionsRegion struct {
	LocalName      *string `json:"LocalName,omitempty" xml:"LocalName,omitempty"`
	RegionEndpoint *string `json:"RegionEndpoint,omitempty" xml:"RegionEndpoint,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeRegionsResponseBodyRegionsRegion) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegionsRegion) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetLocalName(v string) *DescribeRegionsResponseBodyRegionsRegion {
	s.LocalName = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetRegionEndpoint(v string) *DescribeRegionsResponseBodyRegionsRegion {
	s.RegionEndpoint = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRegion) SetRegionId(v string) *DescribeRegionsResponseBodyRegionsRegion {
	s.RegionId = &v
	return s
}

type DescribeRegionsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRegionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponse) SetHeaders(v map[string]*string) *DescribeRegionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRegionsResponse) SetStatusCode(v int32) *DescribeRegionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRegionsResponse) SetBody(v *DescribeRegionsResponseBody) *DescribeRegionsResponse {
	s.Body = v
	return s
}

type DescribeSignaturesRequest struct {
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The ID of the request.
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	SignatureName *string `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
}

func (s DescribeSignaturesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesRequest) SetPageNumber(v int32) *DescribeSignaturesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSignaturesRequest) SetPageSize(v int32) *DescribeSignaturesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSignaturesRequest) SetSecurityToken(v string) *DescribeSignaturesRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeSignaturesRequest) SetSignatureId(v string) *DescribeSignaturesRequest {
	s.SignatureId = &v
	return s
}

func (s *DescribeSignaturesRequest) SetSignatureName(v string) *DescribeSignaturesRequest {
	s.SignatureName = &v
	return s
}

type DescribeSignaturesResponseBody struct {
	// The number of entries returned per page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The returned signature information. It is an array consisting of SignatureInfo data.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the backend signature key.
	SignatureInfos *DescribeSignaturesResponseBodySignatureInfos `json:"SignatureInfos,omitempty" xml:"SignatureInfos,omitempty" type:"Struct"`
	// The last modification time of the key.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSignaturesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesResponseBody) SetPageNumber(v int32) *DescribeSignaturesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSignaturesResponseBody) SetPageSize(v int32) *DescribeSignaturesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSignaturesResponseBody) SetRequestId(v string) *DescribeSignaturesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSignaturesResponseBody) SetSignatureInfos(v *DescribeSignaturesResponseBodySignatureInfos) *DescribeSignaturesResponseBody {
	s.SignatureInfos = v
	return s
}

func (s *DescribeSignaturesResponseBody) SetTotalCount(v int32) *DescribeSignaturesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSignaturesResponseBodySignatureInfos struct {
	SignatureInfo []*DescribeSignaturesResponseBodySignatureInfosSignatureInfo `json:"SignatureInfo,omitempty" xml:"SignatureInfo,omitempty" type:"Repeated"`
}

func (s DescribeSignaturesResponseBodySignatureInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesResponseBodySignatureInfos) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesResponseBodySignatureInfos) SetSignatureInfo(v []*DescribeSignaturesResponseBodySignatureInfosSignatureInfo) *DescribeSignaturesResponseBodySignatureInfos {
	s.SignatureInfo = v
	return s
}

type DescribeSignaturesResponseBodySignatureInfosSignatureInfo struct {
	// *   This API is intended for API providers.
	// *   This operation is used to query the backend signature keys in a Region. Region is a system parameter.
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The Secret value of the backend signature key.
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// Queries backend signature keys.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the backend signature key.
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// The region where the key is located.
	SignatureKey *string `json:"SignatureKey,omitempty" xml:"SignatureKey,omitempty"`
	// The creation time of the key.
	SignatureName *string `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
	// The Key value of the backend signature key.
	SignatureSecret *string `json:"SignatureSecret,omitempty" xml:"SignatureSecret,omitempty"`
}

func (s DescribeSignaturesResponseBodySignatureInfosSignatureInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesResponseBodySignatureInfosSignatureInfo) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesResponseBodySignatureInfosSignatureInfo) SetCreatedTime(v string) *DescribeSignaturesResponseBodySignatureInfosSignatureInfo {
	s.CreatedTime = &v
	return s
}

func (s *DescribeSignaturesResponseBodySignatureInfosSignatureInfo) SetModifiedTime(v string) *DescribeSignaturesResponseBodySignatureInfosSignatureInfo {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeSignaturesResponseBodySignatureInfosSignatureInfo) SetRegionId(v string) *DescribeSignaturesResponseBodySignatureInfosSignatureInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeSignaturesResponseBodySignatureInfosSignatureInfo) SetSignatureId(v string) *DescribeSignaturesResponseBodySignatureInfosSignatureInfo {
	s.SignatureId = &v
	return s
}

func (s *DescribeSignaturesResponseBodySignatureInfosSignatureInfo) SetSignatureKey(v string) *DescribeSignaturesResponseBodySignatureInfosSignatureInfo {
	s.SignatureKey = &v
	return s
}

func (s *DescribeSignaturesResponseBodySignatureInfosSignatureInfo) SetSignatureName(v string) *DescribeSignaturesResponseBodySignatureInfosSignatureInfo {
	s.SignatureName = &v
	return s
}

func (s *DescribeSignaturesResponseBodySignatureInfosSignatureInfo) SetSignatureSecret(v string) *DescribeSignaturesResponseBodySignatureInfosSignatureInfo {
	s.SignatureSecret = &v
	return s
}

type DescribeSignaturesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSignaturesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSignaturesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesResponse) SetHeaders(v map[string]*string) *DescribeSignaturesResponse {
	s.Headers = v
	return s
}

func (s *DescribeSignaturesResponse) SetStatusCode(v int32) *DescribeSignaturesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSignaturesResponse) SetBody(v *DescribeSignaturesResponseBody) *DescribeSignaturesResponse {
	s.Body = v
	return s
}

type DescribeSignaturesByApiRequest struct {
	// The ID of the request.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **TEST**
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The returned signature key information. It is an array consisting of SignatureItem data.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeSignaturesByApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesByApiRequest) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesByApiRequest) SetApiId(v string) *DescribeSignaturesByApiRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeSignaturesByApiRequest) SetGroupId(v string) *DescribeSignaturesByApiRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeSignaturesByApiRequest) SetSecurityToken(v string) *DescribeSignaturesByApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeSignaturesByApiRequest) SetStageName(v string) *DescribeSignaturesByApiRequest {
	s.StageName = &v
	return s
}

type DescribeSignaturesByApiResponseBody struct {
	// The time when the key was bound.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the backend signature key.
	Signatures *DescribeSignaturesByApiResponseBodySignatures `json:"Signatures,omitempty" xml:"Signatures,omitempty" type:"Struct"`
}

func (s DescribeSignaturesByApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesByApiResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesByApiResponseBody) SetRequestId(v string) *DescribeSignaturesByApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSignaturesByApiResponseBody) SetSignatures(v *DescribeSignaturesByApiResponseBodySignatures) *DescribeSignaturesByApiResponseBody {
	s.Signatures = v
	return s
}

type DescribeSignaturesByApiResponseBodySignatures struct {
	SignatureItem []*DescribeSignaturesByApiResponseBodySignaturesSignatureItem `json:"SignatureItem,omitempty" xml:"SignatureItem,omitempty" type:"Repeated"`
}

func (s DescribeSignaturesByApiResponseBodySignatures) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesByApiResponseBodySignatures) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesByApiResponseBodySignatures) SetSignatureItem(v []*DescribeSignaturesByApiResponseBodySignaturesSignatureItem) *DescribeSignaturesByApiResponseBodySignatures {
	s.SignatureItem = v
	return s
}

type DescribeSignaturesByApiResponseBodySignaturesSignatureItem struct {
	// The name of the backend signature key.
	BoundTime *string `json:"BoundTime,omitempty" xml:"BoundTime,omitempty"`
	// *   This API is intended for API providers.
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// Queries the backend signature keys that are bound to a specified API.
	SignatureName *string `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
}

func (s DescribeSignaturesByApiResponseBodySignaturesSignatureItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesByApiResponseBodySignaturesSignatureItem) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesByApiResponseBodySignaturesSignatureItem) SetBoundTime(v string) *DescribeSignaturesByApiResponseBodySignaturesSignatureItem {
	s.BoundTime = &v
	return s
}

func (s *DescribeSignaturesByApiResponseBodySignaturesSignatureItem) SetSignatureId(v string) *DescribeSignaturesByApiResponseBodySignaturesSignatureItem {
	s.SignatureId = &v
	return s
}

func (s *DescribeSignaturesByApiResponseBodySignaturesSignatureItem) SetSignatureName(v string) *DescribeSignaturesByApiResponseBodySignaturesSignatureItem {
	s.SignatureName = &v
	return s
}

type DescribeSignaturesByApiResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSignaturesByApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSignaturesByApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignaturesByApiResponse) GoString() string {
	return s.String()
}

func (s *DescribeSignaturesByApiResponse) SetHeaders(v map[string]*string) *DescribeSignaturesByApiResponse {
	s.Headers = v
	return s
}

func (s *DescribeSignaturesByApiResponse) SetStatusCode(v int32) *DescribeSignaturesByApiResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSignaturesByApiResponse) SetBody(v *DescribeSignaturesByApiResponseBody) *DescribeSignaturesByApiResponse {
	s.Body = v
	return s
}

type DescribeSystemParametersRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeSystemParametersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemParametersRequest) GoString() string {
	return s.String()
}

func (s *DescribeSystemParametersRequest) SetSecurityToken(v string) *DescribeSystemParametersRequest {
	s.SecurityToken = &v
	return s
}

type DescribeSystemParametersResponseBody struct {
	// Examples
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The description of a parameter.
	SystemParams *DescribeSystemParametersResponseBodySystemParams `json:"SystemParams,omitempty" xml:"SystemParams,omitempty" type:"Struct"`
}

func (s DescribeSystemParametersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemParametersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSystemParametersResponseBody) SetRequestId(v string) *DescribeSystemParametersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSystemParametersResponseBody) SetSystemParams(v *DescribeSystemParametersResponseBodySystemParams) *DescribeSystemParametersResponseBody {
	s.SystemParams = v
	return s
}

type DescribeSystemParametersResponseBodySystemParams struct {
	SystemParamItem []*DescribeSystemParametersResponseBodySystemParamsSystemParamItem `json:"SystemParamItem,omitempty" xml:"SystemParamItem,omitempty" type:"Repeated"`
}

func (s DescribeSystemParametersResponseBodySystemParams) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemParametersResponseBodySystemParams) GoString() string {
	return s.String()
}

func (s *DescribeSystemParametersResponseBodySystemParams) SetSystemParamItem(v []*DescribeSystemParametersResponseBodySystemParamsSystemParamItem) *DescribeSystemParametersResponseBodySystemParams {
	s.SystemParamItem = v
	return s
}

type DescribeSystemParametersResponseBodySystemParamsSystemParamItem struct {
	// Client IP Address
	DemoValue *string `json:"DemoValue,omitempty" xml:"DemoValue,omitempty"`
	// The name of the parameter.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// *   This API is intended for API callers.
	// *   The response of this API contains the system parameters that are optional in API definitions.
	ParamName *string `json:"ParamName,omitempty" xml:"ParamName,omitempty"`
	// Queries the common parameters supported by the system.
	ParamType *string `json:"ParamType,omitempty" xml:"ParamType,omitempty"`
}

func (s DescribeSystemParametersResponseBodySystemParamsSystemParamItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemParametersResponseBodySystemParamsSystemParamItem) GoString() string {
	return s.String()
}

func (s *DescribeSystemParametersResponseBodySystemParamsSystemParamItem) SetDemoValue(v string) *DescribeSystemParametersResponseBodySystemParamsSystemParamItem {
	s.DemoValue = &v
	return s
}

func (s *DescribeSystemParametersResponseBodySystemParamsSystemParamItem) SetDescription(v string) *DescribeSystemParametersResponseBodySystemParamsSystemParamItem {
	s.Description = &v
	return s
}

func (s *DescribeSystemParametersResponseBodySystemParamsSystemParamItem) SetParamName(v string) *DescribeSystemParametersResponseBodySystemParamsSystemParamItem {
	s.ParamName = &v
	return s
}

func (s *DescribeSystemParametersResponseBodySystemParamsSystemParamItem) SetParamType(v string) *DescribeSystemParametersResponseBodySystemParamsSystemParamItem {
	s.ParamType = &v
	return s
}

type DescribeSystemParametersResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSystemParametersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSystemParametersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemParametersResponse) GoString() string {
	return s.String()
}

func (s *DescribeSystemParametersResponse) SetHeaders(v map[string]*string) *DescribeSystemParametersResponse {
	s.Headers = v
	return s
}

func (s *DescribeSystemParametersResponse) SetStatusCode(v int32) *DescribeSystemParametersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSystemParametersResponse) SetBody(v *DescribeSystemParametersResponseBody) *DescribeSystemParametersResponse {
	s.Body = v
	return s
}

type DescribeTrafficControlsRequest struct {
	// The name of the throttling policy.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The environment name. This parameter must be specified together with GroupId and ApiId. Valid values:********
	//
	// *   **RELEASE**
	// *   **TEST**
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The ID of the request.
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// ThrottlingTest
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The specified API ID. This parameter must be specified together with GroupId and StageName.
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	TrafficControlName *string `json:"TrafficControlName,omitempty" xml:"TrafficControlName,omitempty"`
}

func (s DescribeTrafficControlsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsRequest) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsRequest) SetApiId(v string) *DescribeTrafficControlsRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeTrafficControlsRequest) SetGroupId(v string) *DescribeTrafficControlsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeTrafficControlsRequest) SetPageNumber(v int32) *DescribeTrafficControlsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTrafficControlsRequest) SetPageSize(v int32) *DescribeTrafficControlsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTrafficControlsRequest) SetSecurityToken(v string) *DescribeTrafficControlsRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeTrafficControlsRequest) SetStageName(v string) *DescribeTrafficControlsRequest {
	s.StageName = &v
	return s
}

func (s *DescribeTrafficControlsRequest) SetTrafficControlId(v string) *DescribeTrafficControlsRequest {
	s.TrafficControlId = &v
	return s
}

func (s *DescribeTrafficControlsRequest) SetTrafficControlName(v string) *DescribeTrafficControlsRequest {
	s.TrafficControlName = &v
	return s
}

type DescribeTrafficControlsResponseBody struct {
	// The number of entries returned per page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The returned throttling policy information. It is an array consisting of TrafficControl data.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The default throttling value for each user.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The default throttling value for each API.
	TrafficControls *DescribeTrafficControlsResponseBodyTrafficControls `json:"TrafficControls,omitempty" xml:"TrafficControls,omitempty" type:"Struct"`
}

func (s DescribeTrafficControlsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsResponseBody) SetPageNumber(v int32) *DescribeTrafficControlsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeTrafficControlsResponseBody) SetPageSize(v int32) *DescribeTrafficControlsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeTrafficControlsResponseBody) SetRequestId(v string) *DescribeTrafficControlsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTrafficControlsResponseBody) SetTotalCount(v int32) *DescribeTrafficControlsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeTrafficControlsResponseBody) SetTrafficControls(v *DescribeTrafficControlsResponseBodyTrafficControls) *DescribeTrafficControlsResponseBody {
	s.TrafficControls = v
	return s
}

type DescribeTrafficControlsResponseBodyTrafficControls struct {
	TrafficControl []*DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl `json:"TrafficControl,omitempty" xml:"TrafficControl,omitempty" type:"Repeated"`
}

func (s DescribeTrafficControlsResponseBodyTrafficControls) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsResponseBodyTrafficControls) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsResponseBodyTrafficControls) SetTrafficControl(v []*DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) *DescribeTrafficControlsResponseBodyTrafficControls {
	s.TrafficControl = v
	return s
}

type DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl struct {
	// The description of the throttling policy.
	ApiDefault *int32 `json:"ApiDefault,omitempty" xml:"ApiDefault,omitempty"`
	// The creation time (UTC) of the throttling policy.
	AppDefault *int32 `json:"AppDefault,omitempty" xml:"AppDefault,omitempty"`
	// The type of the special throttling policy. Valid values:
	//
	// *   **APP**
	// *   **USER**
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The name of the throttling policy.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The unit to be used in the throttling policy. Valid values:
	//
	// *   MINUTE
	// *   HOUR
	// *   DAY
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The returned information about a special throttling policy. It is an array consisting of Special data.
	SpecialPolicies *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPolicies `json:"SpecialPolicies,omitempty" xml:"SpecialPolicies,omitempty" type:"Struct"`
	// The returned information about a special throttling policy. It is an array consisting of SpecialPolicy data.
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
	// The ID of the throttling policy.
	TrafficControlName *string `json:"TrafficControlName,omitempty" xml:"TrafficControlName,omitempty"`
	// The default throttling value for each app.
	TrafficControlUnit *string `json:"TrafficControlUnit,omitempty" xml:"TrafficControlUnit,omitempty"`
	// The last modification time (UTC) of the throttling policy.
	UserDefault *int32 `json:"UserDefault,omitempty" xml:"UserDefault,omitempty"`
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetApiDefault(v int32) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.ApiDefault = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetAppDefault(v int32) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.AppDefault = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetCreatedTime(v string) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.CreatedTime = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetDescription(v string) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.Description = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetModifiedTime(v string) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.ModifiedTime = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetSpecialPolicies(v *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPolicies) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.SpecialPolicies = v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetTrafficControlId(v string) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.TrafficControlId = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetTrafficControlName(v string) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.TrafficControlName = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetTrafficControlUnit(v string) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.TrafficControlUnit = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl) SetUserDefault(v int32) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControl {
	s.UserDefault = &v
	return s
}

type DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPolicies struct {
	SpecialPolicy []*DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy `json:"SpecialPolicy,omitempty" xml:"SpecialPolicy,omitempty" type:"Repeated"`
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPolicies) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPolicies) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPolicies) SetSpecialPolicy(v []*DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPolicies {
	s.SpecialPolicy = v
	return s
}

type DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy struct {
	// The throttling value.
	SpecialType *string `json:"SpecialType,omitempty" xml:"SpecialType,omitempty"`
	// The AppId or user account corresponding to SpecialType.
	Specials *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecials `json:"Specials,omitempty" xml:"Specials,omitempty" type:"Struct"`
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy) SetSpecialType(v string) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy {
	s.SpecialType = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy) SetSpecials(v *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecials) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicy {
	s.Specials = v
	return s
}

type DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecials struct {
	Special []*DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial `json:"Special,omitempty" xml:"Special,omitempty" type:"Repeated"`
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecials) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecials) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecials) SetSpecial(v []*DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecials {
	s.Special = v
	return s
}

type DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial struct {
	// Queries custom throttling policies and their details. Conditional queries are supported.
	SpecialKey *string `json:"SpecialKey,omitempty" xml:"SpecialKey,omitempty"`
	// *   This API is intended for API providers.
	// *   This API can be used to query all existing throttling policies (including special throttling policies) and their details.
	// *   You can specify query conditions. For example, you can query the throttling policies bound to a specified API or in a specified environment.
	TrafficValue *int32 `json:"TrafficValue,omitempty" xml:"TrafficValue,omitempty"`
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial) SetSpecialKey(v string) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial {
	s.SpecialKey = &v
	return s
}

func (s *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial) SetTrafficValue(v int32) *DescribeTrafficControlsResponseBodyTrafficControlsTrafficControlSpecialPoliciesSpecialPolicySpecialsSpecial {
	s.TrafficValue = &v
	return s
}

type DescribeTrafficControlsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTrafficControlsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTrafficControlsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsResponse) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsResponse) SetHeaders(v map[string]*string) *DescribeTrafficControlsResponse {
	s.Headers = v
	return s
}

func (s *DescribeTrafficControlsResponse) SetStatusCode(v int32) *DescribeTrafficControlsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTrafficControlsResponse) SetBody(v *DescribeTrafficControlsResponseBody) *DescribeTrafficControlsResponse {
	s.Body = v
	return s
}

type DescribeTrafficControlsByApiRequest struct {
	// The ID of the request.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The runtime environment of the API. Valid values:
	//
	// *   **RELEASE**
	// *   **TEST**
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The returned throttling policy information. It is an array consisting of TrafficControlItem data.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DescribeTrafficControlsByApiRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsByApiRequest) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsByApiRequest) SetApiId(v string) *DescribeTrafficControlsByApiRequest {
	s.ApiId = &v
	return s
}

func (s *DescribeTrafficControlsByApiRequest) SetGroupId(v string) *DescribeTrafficControlsByApiRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeTrafficControlsByApiRequest) SetSecurityToken(v string) *DescribeTrafficControlsByApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeTrafficControlsByApiRequest) SetStageName(v string) *DescribeTrafficControlsByApiRequest {
	s.StageName = &v
	return s
}

type DescribeTrafficControlsByApiResponseBody struct {
	// The ID of the throttling policy.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The binding time of the policy.
	TrafficControlItems *DescribeTrafficControlsByApiResponseBodyTrafficControlItems `json:"TrafficControlItems,omitempty" xml:"TrafficControlItems,omitempty" type:"Struct"`
}

func (s DescribeTrafficControlsByApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsByApiResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsByApiResponseBody) SetRequestId(v string) *DescribeTrafficControlsByApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTrafficControlsByApiResponseBody) SetTrafficControlItems(v *DescribeTrafficControlsByApiResponseBodyTrafficControlItems) *DescribeTrafficControlsByApiResponseBody {
	s.TrafficControlItems = v
	return s
}

type DescribeTrafficControlsByApiResponseBodyTrafficControlItems struct {
	TrafficControlItem []*DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem `json:"TrafficControlItem,omitempty" xml:"TrafficControlItem,omitempty" type:"Repeated"`
}

func (s DescribeTrafficControlsByApiResponseBodyTrafficControlItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsByApiResponseBodyTrafficControlItems) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsByApiResponseBodyTrafficControlItems) SetTrafficControlItem(v []*DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem) *DescribeTrafficControlsByApiResponseBodyTrafficControlItems {
	s.TrafficControlItem = v
	return s
}

type DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem struct {
	// *   This API is intended for API providers.
	BoundTime *string `json:"BoundTime,omitempty" xml:"BoundTime,omitempty"`
	// The name of the throttling policy.
	TrafficControlItemId *string `json:"TrafficControlItemId,omitempty" xml:"TrafficControlItemId,omitempty"`
	// Queries the throttling policy that is bound to a specific API.
	TrafficControlItemName *string `json:"TrafficControlItemName,omitempty" xml:"TrafficControlItemName,omitempty"`
}

func (s DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem) SetBoundTime(v string) *DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem {
	s.BoundTime = &v
	return s
}

func (s *DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem) SetTrafficControlItemId(v string) *DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem {
	s.TrafficControlItemId = &v
	return s
}

func (s *DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem) SetTrafficControlItemName(v string) *DescribeTrafficControlsByApiResponseBodyTrafficControlItemsTrafficControlItem {
	s.TrafficControlItemName = &v
	return s
}

type DescribeTrafficControlsByApiResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTrafficControlsByApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTrafficControlsByApiResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTrafficControlsByApiResponse) GoString() string {
	return s.String()
}

func (s *DescribeTrafficControlsByApiResponse) SetHeaders(v map[string]*string) *DescribeTrafficControlsByApiResponse {
	s.Headers = v
	return s
}

func (s *DescribeTrafficControlsByApiResponse) SetStatusCode(v int32) *DescribeTrafficControlsByApiResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTrafficControlsByApiResponse) SetBody(v *DescribeTrafficControlsByApiResponseBody) *DescribeTrafficControlsByApiResponse {
	s.Body = v
	return s
}

type DescribeUpdateBackendTaskRequest struct {
	OperationUid  *string `json:"OperationUid,omitempty" xml:"OperationUid,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeUpdateBackendTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateBackendTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeUpdateBackendTaskRequest) SetOperationUid(v string) *DescribeUpdateBackendTaskRequest {
	s.OperationUid = &v
	return s
}

func (s *DescribeUpdateBackendTaskRequest) SetSecurityToken(v string) *DescribeUpdateBackendTaskRequest {
	s.SecurityToken = &v
	return s
}

type DescribeUpdateBackendTaskResponseBody struct {
	ApiUpdateBackendResults *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResults `json:"ApiUpdateBackendResults,omitempty" xml:"ApiUpdateBackendResults,omitempty" type:"Struct"`
	RequestId               *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUpdateBackendTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateBackendTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUpdateBackendTaskResponseBody) SetApiUpdateBackendResults(v *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResults) *DescribeUpdateBackendTaskResponseBody {
	s.ApiUpdateBackendResults = v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBody) SetRequestId(v string) *DescribeUpdateBackendTaskResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResults struct {
	ApiUpdateBackendResult []*DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult `json:"ApiUpdateBackendResult,omitempty" xml:"ApiUpdateBackendResult,omitempty" type:"Repeated"`
}

func (s DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResults) GoString() string {
	return s.String()
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResults) SetApiUpdateBackendResult(v []*DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResults {
	s.ApiUpdateBackendResult = v
	return s
}

type DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult struct {
	ApiName      *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiUid       *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	BackendId    *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	ErrorMsg     *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	GroupId      *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName    *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	StageId      *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	StageName    *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	UpdateStatus *string `json:"UpdateStatus,omitempty" xml:"UpdateStatus,omitempty"`
}

func (s DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) GoString() string {
	return s.String()
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetApiName(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.ApiName = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetApiUid(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.ApiUid = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetBackendId(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.BackendId = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetErrorMsg(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetGroupId(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.GroupId = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetGroupName(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.GroupName = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetStageId(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.StageId = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetStageName(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.StageName = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult) SetUpdateStatus(v string) *DescribeUpdateBackendTaskResponseBodyApiUpdateBackendResultsApiUpdateBackendResult {
	s.UpdateStatus = &v
	return s
}

type DescribeUpdateBackendTaskResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUpdateBackendTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUpdateBackendTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateBackendTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeUpdateBackendTaskResponse) SetHeaders(v map[string]*string) *DescribeUpdateBackendTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeUpdateBackendTaskResponse) SetStatusCode(v int32) *DescribeUpdateBackendTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUpdateBackendTaskResponse) SetBody(v *DescribeUpdateBackendTaskResponseBody) *DescribeUpdateBackendTaskResponse {
	s.Body = v
	return s
}

type DescribeUpdateVpcInfoTaskRequest struct {
	OperationUid  *string `json:"OperationUid,omitempty" xml:"OperationUid,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeUpdateVpcInfoTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateVpcInfoTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeUpdateVpcInfoTaskRequest) SetOperationUid(v string) *DescribeUpdateVpcInfoTaskRequest {
	s.OperationUid = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskRequest) SetSecurityToken(v string) *DescribeUpdateVpcInfoTaskRequest {
	s.SecurityToken = &v
	return s
}

type DescribeUpdateVpcInfoTaskResponseBody struct {
	ApiUpdateVpcInfoResults *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResults `json:"ApiUpdateVpcInfoResults,omitempty" xml:"ApiUpdateVpcInfoResults,omitempty" type:"Struct"`
	RequestId               *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUpdateVpcInfoTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateVpcInfoTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUpdateVpcInfoTaskResponseBody) SetApiUpdateVpcInfoResults(v *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResults) *DescribeUpdateVpcInfoTaskResponseBody {
	s.ApiUpdateVpcInfoResults = v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponseBody) SetRequestId(v string) *DescribeUpdateVpcInfoTaskResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResults struct {
	ApiUpdateVpcInfoResult []*DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult `json:"ApiUpdateVpcInfoResult,omitempty" xml:"ApiUpdateVpcInfoResult,omitempty" type:"Repeated"`
}

func (s DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResults) GoString() string {
	return s.String()
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResults) SetApiUpdateVpcInfoResult(v []*DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResults {
	s.ApiUpdateVpcInfoResult = v
	return s
}

type DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult struct {
	ApiName      *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiUid       *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	ErrorMsg     *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	GroupId      *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName    *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	StageId      *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	StageName    *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	UpdateStatus *string `json:"UpdateStatus,omitempty" xml:"UpdateStatus,omitempty"`
}

func (s DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) GoString() string {
	return s.String()
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) SetApiName(v string) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult {
	s.ApiName = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) SetApiUid(v string) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult {
	s.ApiUid = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) SetErrorMsg(v string) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) SetGroupId(v string) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult {
	s.GroupId = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) SetGroupName(v string) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult {
	s.GroupName = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) SetStageId(v string) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult {
	s.StageId = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) SetStageName(v string) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult {
	s.StageName = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult) SetUpdateStatus(v string) *DescribeUpdateVpcInfoTaskResponseBodyApiUpdateVpcInfoResultsApiUpdateVpcInfoResult {
	s.UpdateStatus = &v
	return s
}

type DescribeUpdateVpcInfoTaskResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUpdateVpcInfoTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUpdateVpcInfoTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUpdateVpcInfoTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeUpdateVpcInfoTaskResponse) SetHeaders(v map[string]*string) *DescribeUpdateVpcInfoTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponse) SetStatusCode(v int32) *DescribeUpdateVpcInfoTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUpdateVpcInfoTaskResponse) SetBody(v *DescribeUpdateVpcInfoTaskResponseBody) *DescribeUpdateVpcInfoTaskResponse {
	s.Body = v
	return s
}

type DescribeVpcAccessesRequest struct {
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Port          *string `json:"Port,omitempty" xml:"Port,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	VpcAccessId   *string `json:"VpcAccessId,omitempty" xml:"VpcAccessId,omitempty"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeVpcAccessesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAccessesRequest) GoString() string {
	return s.String()
}

func (s *DescribeVpcAccessesRequest) SetInstanceId(v string) *DescribeVpcAccessesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeVpcAccessesRequest) SetName(v string) *DescribeVpcAccessesRequest {
	s.Name = &v
	return s
}

func (s *DescribeVpcAccessesRequest) SetPageNumber(v int32) *DescribeVpcAccessesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpcAccessesRequest) SetPageSize(v int32) *DescribeVpcAccessesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVpcAccessesRequest) SetPort(v string) *DescribeVpcAccessesRequest {
	s.Port = &v
	return s
}

func (s *DescribeVpcAccessesRequest) SetSecurityToken(v string) *DescribeVpcAccessesRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeVpcAccessesRequest) SetVpcAccessId(v string) *DescribeVpcAccessesRequest {
	s.VpcAccessId = &v
	return s
}

func (s *DescribeVpcAccessesRequest) SetVpcId(v string) *DescribeVpcAccessesRequest {
	s.VpcId = &v
	return s
}

type DescribeVpcAccessesResponseBody struct {
	PageNumber          *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize            *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId           *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount          *int32                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	VpcAccessAttributes *DescribeVpcAccessesResponseBodyVpcAccessAttributes `json:"VpcAccessAttributes,omitempty" xml:"VpcAccessAttributes,omitempty" type:"Struct"`
}

func (s DescribeVpcAccessesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAccessesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVpcAccessesResponseBody) SetPageNumber(v int32) *DescribeVpcAccessesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeVpcAccessesResponseBody) SetPageSize(v int32) *DescribeVpcAccessesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVpcAccessesResponseBody) SetRequestId(v string) *DescribeVpcAccessesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVpcAccessesResponseBody) SetTotalCount(v int32) *DescribeVpcAccessesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeVpcAccessesResponseBody) SetVpcAccessAttributes(v *DescribeVpcAccessesResponseBodyVpcAccessAttributes) *DescribeVpcAccessesResponseBody {
	s.VpcAccessAttributes = v
	return s
}

type DescribeVpcAccessesResponseBodyVpcAccessAttributes struct {
	VpcAccessAttribute []*DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute `json:"VpcAccessAttribute,omitempty" xml:"VpcAccessAttribute,omitempty" type:"Repeated"`
}

func (s DescribeVpcAccessesResponseBodyVpcAccessAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAccessesResponseBodyVpcAccessAttributes) GoString() string {
	return s.String()
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributes) SetVpcAccessAttribute(v []*DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) *DescribeVpcAccessesResponseBodyVpcAccessAttributes {
	s.VpcAccessAttribute = v
	return s
}

type DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute struct {
	CreatedTime       *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Port              *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VpcAccessId       *string `json:"VpcAccessId,omitempty" xml:"VpcAccessId,omitempty"`
	VpcId             *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VpcTargetHostName *string `json:"VpcTargetHostName,omitempty" xml:"VpcTargetHostName,omitempty"`
}

func (s DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) GoString() string {
	return s.String()
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetCreatedTime(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.CreatedTime = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetDescription(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.Description = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetInstanceId(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.InstanceId = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetName(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.Name = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetPort(v int32) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.Port = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetRegionId(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetVpcAccessId(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.VpcAccessId = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetVpcId(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.VpcId = &v
	return s
}

func (s *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute) SetVpcTargetHostName(v string) *DescribeVpcAccessesResponseBodyVpcAccessAttributesVpcAccessAttribute {
	s.VpcTargetHostName = &v
	return s
}

type DescribeVpcAccessesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVpcAccessesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVpcAccessesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVpcAccessesResponse) GoString() string {
	return s.String()
}

func (s *DescribeVpcAccessesResponse) SetHeaders(v map[string]*string) *DescribeVpcAccessesResponse {
	s.Headers = v
	return s
}

func (s *DescribeVpcAccessesResponse) SetStatusCode(v int32) *DescribeVpcAccessesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVpcAccessesResponse) SetBody(v *DescribeVpcAccessesResponseBody) *DescribeVpcAccessesResponse {
	s.Body = v
	return s
}

type DescribeZonesRequest struct {
	Language      *string `json:"Language,omitempty" xml:"Language,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeZonesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesRequest) GoString() string {
	return s.String()
}

func (s *DescribeZonesRequest) SetLanguage(v string) *DescribeZonesRequest {
	s.Language = &v
	return s
}

func (s *DescribeZonesRequest) SetSecurityToken(v string) *DescribeZonesRequest {
	s.SecurityToken = &v
	return s
}

type DescribeZonesResponseBody struct {
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Zones     *DescribeZonesResponseBodyZones `json:"Zones,omitempty" xml:"Zones,omitempty" type:"Struct"`
}

func (s DescribeZonesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseBody) SetRequestId(v string) *DescribeZonesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeZonesResponseBody) SetZones(v *DescribeZonesResponseBodyZones) *DescribeZonesResponseBody {
	s.Zones = v
	return s
}

type DescribeZonesResponseBodyZones struct {
	Zone []*DescribeZonesResponseBodyZonesZone `json:"Zone,omitempty" xml:"Zone,omitempty" type:"Repeated"`
}

func (s DescribeZonesResponseBodyZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseBodyZones) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseBodyZones) SetZone(v []*DescribeZonesResponseBodyZonesZone) *DescribeZonesResponseBodyZones {
	s.Zone = v
	return s
}

type DescribeZonesResponseBodyZonesZone struct {
	LocalName *string `json:"LocalName,omitempty" xml:"LocalName,omitempty"`
	ZoneId    *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeZonesResponseBodyZonesZone) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseBodyZonesZone) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseBodyZonesZone) SetLocalName(v string) *DescribeZonesResponseBodyZonesZone {
	s.LocalName = &v
	return s
}

func (s *DescribeZonesResponseBodyZonesZone) SetZoneId(v string) *DescribeZonesResponseBodyZonesZone {
	s.ZoneId = &v
	return s
}

type DescribeZonesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeZonesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeZonesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponse) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponse) SetHeaders(v map[string]*string) *DescribeZonesResponse {
	s.Headers = v
	return s
}

func (s *DescribeZonesResponse) SetStatusCode(v int32) *DescribeZonesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeZonesResponse) SetBody(v *DescribeZonesResponseBody) *DescribeZonesResponse {
	s.Body = v
	return s
}

type DetachPluginRequest struct {
	ApiId         *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	PluginId      *string `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageName     *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s DetachPluginRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachPluginRequest) GoString() string {
	return s.String()
}

func (s *DetachPluginRequest) SetApiId(v string) *DetachPluginRequest {
	s.ApiId = &v
	return s
}

func (s *DetachPluginRequest) SetGroupId(v string) *DetachPluginRequest {
	s.GroupId = &v
	return s
}

func (s *DetachPluginRequest) SetPluginId(v string) *DetachPluginRequest {
	s.PluginId = &v
	return s
}

func (s *DetachPluginRequest) SetSecurityToken(v string) *DetachPluginRequest {
	s.SecurityToken = &v
	return s
}

func (s *DetachPluginRequest) SetStageName(v string) *DetachPluginRequest {
	s.StageName = &v
	return s
}

type DetachPluginResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DetachPluginResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachPluginResponseBody) GoString() string {
	return s.String()
}

func (s *DetachPluginResponseBody) SetRequestId(v string) *DetachPluginResponseBody {
	s.RequestId = &v
	return s
}

type DetachPluginResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DetachPluginResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DetachPluginResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachPluginResponse) GoString() string {
	return s.String()
}

func (s *DetachPluginResponse) SetHeaders(v map[string]*string) *DetachPluginResponse {
	s.Headers = v
	return s
}

func (s *DetachPluginResponse) SetStatusCode(v int32) *DetachPluginResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachPluginResponse) SetBody(v *DetachPluginResponseBody) *DetachPluginResponse {
	s.Body = v
	return s
}

type DisableInstanceAccessControlRequest struct {
	AclId            *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	AddressIPVersion *string `json:"AddressIPVersion,omitempty" xml:"AddressIPVersion,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityToken    *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DisableInstanceAccessControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableInstanceAccessControlRequest) GoString() string {
	return s.String()
}

func (s *DisableInstanceAccessControlRequest) SetAclId(v string) *DisableInstanceAccessControlRequest {
	s.AclId = &v
	return s
}

func (s *DisableInstanceAccessControlRequest) SetAddressIPVersion(v string) *DisableInstanceAccessControlRequest {
	s.AddressIPVersion = &v
	return s
}

func (s *DisableInstanceAccessControlRequest) SetInstanceId(v string) *DisableInstanceAccessControlRequest {
	s.InstanceId = &v
	return s
}

func (s *DisableInstanceAccessControlRequest) SetSecurityToken(v string) *DisableInstanceAccessControlRequest {
	s.SecurityToken = &v
	return s
}

type DisableInstanceAccessControlResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableInstanceAccessControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableInstanceAccessControlResponseBody) GoString() string {
	return s.String()
}

func (s *DisableInstanceAccessControlResponseBody) SetRequestId(v string) *DisableInstanceAccessControlResponseBody {
	s.RequestId = &v
	return s
}

type DisableInstanceAccessControlResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DisableInstanceAccessControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableInstanceAccessControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableInstanceAccessControlResponse) GoString() string {
	return s.String()
}

func (s *DisableInstanceAccessControlResponse) SetHeaders(v map[string]*string) *DisableInstanceAccessControlResponse {
	s.Headers = v
	return s
}

func (s *DisableInstanceAccessControlResponse) SetStatusCode(v int32) *DisableInstanceAccessControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableInstanceAccessControlResponse) SetBody(v *DisableInstanceAccessControlResponseBody) *DisableInstanceAccessControlResponse {
	s.Body = v
	return s
}

type DryRunSwaggerRequest struct {
	Data            *string                `json:"Data,omitempty" xml:"Data,omitempty"`
	DataFormat      *string                `json:"DataFormat,omitempty" xml:"DataFormat,omitempty"`
	GlobalCondition map[string]interface{} `json:"GlobalCondition,omitempty" xml:"GlobalCondition,omitempty"`
	GroupId         *string                `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Overwrite       *bool                  `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	SecurityToken   *string                `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DryRunSwaggerRequest) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerRequest) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerRequest) SetData(v string) *DryRunSwaggerRequest {
	s.Data = &v
	return s
}

func (s *DryRunSwaggerRequest) SetDataFormat(v string) *DryRunSwaggerRequest {
	s.DataFormat = &v
	return s
}

func (s *DryRunSwaggerRequest) SetGlobalCondition(v map[string]interface{}) *DryRunSwaggerRequest {
	s.GlobalCondition = v
	return s
}

func (s *DryRunSwaggerRequest) SetGroupId(v string) *DryRunSwaggerRequest {
	s.GroupId = &v
	return s
}

func (s *DryRunSwaggerRequest) SetOverwrite(v bool) *DryRunSwaggerRequest {
	s.Overwrite = &v
	return s
}

func (s *DryRunSwaggerRequest) SetSecurityToken(v string) *DryRunSwaggerRequest {
	s.SecurityToken = &v
	return s
}

type DryRunSwaggerShrinkRequest struct {
	Data                  *string `json:"Data,omitempty" xml:"Data,omitempty"`
	DataFormat            *string `json:"DataFormat,omitempty" xml:"DataFormat,omitempty"`
	GlobalConditionShrink *string `json:"GlobalCondition,omitempty" xml:"GlobalCondition,omitempty"`
	GroupId               *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Overwrite             *bool   `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	SecurityToken         *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DryRunSwaggerShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerShrinkRequest) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerShrinkRequest) SetData(v string) *DryRunSwaggerShrinkRequest {
	s.Data = &v
	return s
}

func (s *DryRunSwaggerShrinkRequest) SetDataFormat(v string) *DryRunSwaggerShrinkRequest {
	s.DataFormat = &v
	return s
}

func (s *DryRunSwaggerShrinkRequest) SetGlobalConditionShrink(v string) *DryRunSwaggerShrinkRequest {
	s.GlobalConditionShrink = &v
	return s
}

func (s *DryRunSwaggerShrinkRequest) SetGroupId(v string) *DryRunSwaggerShrinkRequest {
	s.GroupId = &v
	return s
}

func (s *DryRunSwaggerShrinkRequest) SetOverwrite(v bool) *DryRunSwaggerShrinkRequest {
	s.Overwrite = &v
	return s
}

func (s *DryRunSwaggerShrinkRequest) SetSecurityToken(v string) *DryRunSwaggerShrinkRequest {
	s.SecurityToken = &v
	return s
}

type DryRunSwaggerResponseBody struct {
	Failed          *DryRunSwaggerResponseBodyFailed       `json:"Failed,omitempty" xml:"Failed,omitempty" type:"Struct"`
	GlobalCondition *string                                `json:"GlobalCondition,omitempty" xml:"GlobalCondition,omitempty"`
	ModelFailed     *DryRunSwaggerResponseBodyModelFailed  `json:"ModelFailed,omitempty" xml:"ModelFailed,omitempty" type:"Struct"`
	ModelSuccess    *DryRunSwaggerResponseBodyModelSuccess `json:"ModelSuccess,omitempty" xml:"ModelSuccess,omitempty" type:"Struct"`
	RequestId       *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success         *DryRunSwaggerResponseBodySuccess      `json:"Success,omitempty" xml:"Success,omitempty" type:"Struct"`
}

func (s DryRunSwaggerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBody) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBody) SetFailed(v *DryRunSwaggerResponseBodyFailed) *DryRunSwaggerResponseBody {
	s.Failed = v
	return s
}

func (s *DryRunSwaggerResponseBody) SetGlobalCondition(v string) *DryRunSwaggerResponseBody {
	s.GlobalCondition = &v
	return s
}

func (s *DryRunSwaggerResponseBody) SetModelFailed(v *DryRunSwaggerResponseBodyModelFailed) *DryRunSwaggerResponseBody {
	s.ModelFailed = v
	return s
}

func (s *DryRunSwaggerResponseBody) SetModelSuccess(v *DryRunSwaggerResponseBodyModelSuccess) *DryRunSwaggerResponseBody {
	s.ModelSuccess = v
	return s
}

func (s *DryRunSwaggerResponseBody) SetRequestId(v string) *DryRunSwaggerResponseBody {
	s.RequestId = &v
	return s
}

func (s *DryRunSwaggerResponseBody) SetSuccess(v *DryRunSwaggerResponseBodySuccess) *DryRunSwaggerResponseBody {
	s.Success = v
	return s
}

type DryRunSwaggerResponseBodyFailed struct {
	ApiImportSwaggerFailed []*DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed `json:"ApiImportSwaggerFailed,omitempty" xml:"ApiImportSwaggerFailed,omitempty" type:"Repeated"`
}

func (s DryRunSwaggerResponseBodyFailed) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBodyFailed) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBodyFailed) SetApiImportSwaggerFailed(v []*DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed) *DryRunSwaggerResponseBodyFailed {
	s.ApiImportSwaggerFailed = v
	return s
}

type DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed struct {
	ErrorMsg   *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	HttpMethod *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	Path       *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed) SetErrorMsg(v string) *DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed {
	s.ErrorMsg = &v
	return s
}

func (s *DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed) SetHttpMethod(v string) *DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed {
	s.HttpMethod = &v
	return s
}

func (s *DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed) SetPath(v string) *DryRunSwaggerResponseBodyFailedApiImportSwaggerFailed {
	s.Path = &v
	return s
}

type DryRunSwaggerResponseBodyModelFailed struct {
	ApiImportModelFailed []*DryRunSwaggerResponseBodyModelFailedApiImportModelFailed `json:"ApiImportModelFailed,omitempty" xml:"ApiImportModelFailed,omitempty" type:"Repeated"`
}

func (s DryRunSwaggerResponseBodyModelFailed) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBodyModelFailed) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBodyModelFailed) SetApiImportModelFailed(v []*DryRunSwaggerResponseBodyModelFailedApiImportModelFailed) *DryRunSwaggerResponseBodyModelFailed {
	s.ApiImportModelFailed = v
	return s
}

type DryRunSwaggerResponseBodyModelFailedApiImportModelFailed struct {
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
}

func (s DryRunSwaggerResponseBodyModelFailedApiImportModelFailed) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBodyModelFailedApiImportModelFailed) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBodyModelFailedApiImportModelFailed) SetErrorMsg(v string) *DryRunSwaggerResponseBodyModelFailedApiImportModelFailed {
	s.ErrorMsg = &v
	return s
}

func (s *DryRunSwaggerResponseBodyModelFailedApiImportModelFailed) SetGroupId(v string) *DryRunSwaggerResponseBodyModelFailedApiImportModelFailed {
	s.GroupId = &v
	return s
}

func (s *DryRunSwaggerResponseBodyModelFailedApiImportModelFailed) SetModelName(v string) *DryRunSwaggerResponseBodyModelFailedApiImportModelFailed {
	s.ModelName = &v
	return s
}

type DryRunSwaggerResponseBodyModelSuccess struct {
	ApiImportModelSuccess []*DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess `json:"ApiImportModelSuccess,omitempty" xml:"ApiImportModelSuccess,omitempty" type:"Repeated"`
}

func (s DryRunSwaggerResponseBodyModelSuccess) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBodyModelSuccess) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBodyModelSuccess) SetApiImportModelSuccess(v []*DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess) *DryRunSwaggerResponseBodyModelSuccess {
	s.ApiImportModelSuccess = v
	return s
}

type DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess struct {
	GroupId        *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ModelName      *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	ModelOperation *string `json:"ModelOperation,omitempty" xml:"ModelOperation,omitempty"`
	ModelUid       *string `json:"ModelUid,omitempty" xml:"ModelUid,omitempty"`
}

func (s DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess) SetGroupId(v string) *DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess {
	s.GroupId = &v
	return s
}

func (s *DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess) SetModelName(v string) *DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess {
	s.ModelName = &v
	return s
}

func (s *DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess) SetModelOperation(v string) *DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess {
	s.ModelOperation = &v
	return s
}

func (s *DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess) SetModelUid(v string) *DryRunSwaggerResponseBodyModelSuccessApiImportModelSuccess {
	s.ModelUid = &v
	return s
}

type DryRunSwaggerResponseBodySuccess struct {
	ApiDryRunSwaggerSuccess []*DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess `json:"ApiDryRunSwaggerSuccess,omitempty" xml:"ApiDryRunSwaggerSuccess,omitempty" type:"Repeated"`
}

func (s DryRunSwaggerResponseBodySuccess) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBodySuccess) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBodySuccess) SetApiDryRunSwaggerSuccess(v []*DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess) *DryRunSwaggerResponseBodySuccess {
	s.ApiDryRunSwaggerSuccess = v
	return s
}

type DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess struct {
	ApiOperation *string `json:"ApiOperation,omitempty" xml:"ApiOperation,omitempty"`
	ApiSwagger   *string `json:"ApiSwagger,omitempty" xml:"ApiSwagger,omitempty"`
	ApiUid       *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	HttpMethod   *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	Path         *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess) SetApiOperation(v string) *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess {
	s.ApiOperation = &v
	return s
}

func (s *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess) SetApiSwagger(v string) *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess {
	s.ApiSwagger = &v
	return s
}

func (s *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess) SetApiUid(v string) *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess {
	s.ApiUid = &v
	return s
}

func (s *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess) SetHttpMethod(v string) *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess {
	s.HttpMethod = &v
	return s
}

func (s *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess) SetPath(v string) *DryRunSwaggerResponseBodySuccessApiDryRunSwaggerSuccess {
	s.Path = &v
	return s
}

type DryRunSwaggerResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DryRunSwaggerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DryRunSwaggerResponse) String() string {
	return tea.Prettify(s)
}

func (s DryRunSwaggerResponse) GoString() string {
	return s.String()
}

func (s *DryRunSwaggerResponse) SetHeaders(v map[string]*string) *DryRunSwaggerResponse {
	s.Headers = v
	return s
}

func (s *DryRunSwaggerResponse) SetStatusCode(v int32) *DryRunSwaggerResponse {
	s.StatusCode = &v
	return s
}

func (s *DryRunSwaggerResponse) SetBody(v *DryRunSwaggerResponseBody) *DryRunSwaggerResponse {
	s.Body = v
	return s
}

type EnableInstanceAccessControlRequest struct {
	AclId            *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	AclType          *string `json:"AclType,omitempty" xml:"AclType,omitempty"`
	AddressIPVersion *string `json:"AddressIPVersion,omitempty" xml:"AddressIPVersion,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityToken    *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s EnableInstanceAccessControlRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableInstanceAccessControlRequest) GoString() string {
	return s.String()
}

func (s *EnableInstanceAccessControlRequest) SetAclId(v string) *EnableInstanceAccessControlRequest {
	s.AclId = &v
	return s
}

func (s *EnableInstanceAccessControlRequest) SetAclType(v string) *EnableInstanceAccessControlRequest {
	s.AclType = &v
	return s
}

func (s *EnableInstanceAccessControlRequest) SetAddressIPVersion(v string) *EnableInstanceAccessControlRequest {
	s.AddressIPVersion = &v
	return s
}

func (s *EnableInstanceAccessControlRequest) SetInstanceId(v string) *EnableInstanceAccessControlRequest {
	s.InstanceId = &v
	return s
}

func (s *EnableInstanceAccessControlRequest) SetSecurityToken(v string) *EnableInstanceAccessControlRequest {
	s.SecurityToken = &v
	return s
}

type EnableInstanceAccessControlResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnableInstanceAccessControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableInstanceAccessControlResponseBody) GoString() string {
	return s.String()
}

func (s *EnableInstanceAccessControlResponseBody) SetRequestId(v string) *EnableInstanceAccessControlResponseBody {
	s.RequestId = &v
	return s
}

type EnableInstanceAccessControlResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *EnableInstanceAccessControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableInstanceAccessControlResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableInstanceAccessControlResponse) GoString() string {
	return s.String()
}

func (s *EnableInstanceAccessControlResponse) SetHeaders(v map[string]*string) *EnableInstanceAccessControlResponse {
	s.Headers = v
	return s
}

func (s *EnableInstanceAccessControlResponse) SetStatusCode(v int32) *EnableInstanceAccessControlResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableInstanceAccessControlResponse) SetBody(v *EnableInstanceAccessControlResponseBody) *EnableInstanceAccessControlResponse {
	s.Body = v
	return s
}

type ImportOASRequest struct {
	// API安全认证类型，目前可以取值：
	//
	// - **APP**：只允许已授权的APP调用
	// - **ANONYMOUS**：允许匿名调用，设置为允许匿名调用需要注意：
	//      - 任何能够获取该API服务信息的人，都将能够调用该API。网关不会对调用者做身份认证，也无法设置按用户的流量控制，若开放该API请设置好按API的流量控制。
	AuthType      *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	BackendName   *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	Data          *string `json:"Data,omitempty" xml:"Data,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	IgnoreWarning *bool   `json:"IgnoreWarning,omitempty" xml:"IgnoreWarning,omitempty"`
	OASVersion    *string `json:"OASVersion,omitempty" xml:"OASVersion,omitempty"`
	Overwrite     *bool   `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	RequestMode   *string `json:"RequestMode,omitempty" xml:"RequestMode,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	SkipDryRun    *bool   `json:"SkipDryRun,omitempty" xml:"SkipDryRun,omitempty"`
}

func (s ImportOASRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportOASRequest) GoString() string {
	return s.String()
}

func (s *ImportOASRequest) SetAuthType(v string) *ImportOASRequest {
	s.AuthType = &v
	return s
}

func (s *ImportOASRequest) SetBackendName(v string) *ImportOASRequest {
	s.BackendName = &v
	return s
}

func (s *ImportOASRequest) SetData(v string) *ImportOASRequest {
	s.Data = &v
	return s
}

func (s *ImportOASRequest) SetGroupId(v string) *ImportOASRequest {
	s.GroupId = &v
	return s
}

func (s *ImportOASRequest) SetIgnoreWarning(v bool) *ImportOASRequest {
	s.IgnoreWarning = &v
	return s
}

func (s *ImportOASRequest) SetOASVersion(v string) *ImportOASRequest {
	s.OASVersion = &v
	return s
}

func (s *ImportOASRequest) SetOverwrite(v bool) *ImportOASRequest {
	s.Overwrite = &v
	return s
}

func (s *ImportOASRequest) SetRequestMode(v string) *ImportOASRequest {
	s.RequestMode = &v
	return s
}

func (s *ImportOASRequest) SetSecurityToken(v string) *ImportOASRequest {
	s.SecurityToken = &v
	return s
}

func (s *ImportOASRequest) SetSkipDryRun(v bool) *ImportOASRequest {
	s.SkipDryRun = &v
	return s
}

type ImportOASResponseBody struct {
	ErrorMessages   *ImportOASResponseBodyErrorMessages   `json:"ErrorMessages,omitempty" xml:"ErrorMessages,omitempty" type:"Struct"`
	FailedApis      *ImportOASResponseBodyFailedApis      `json:"FailedApis,omitempty" xml:"FailedApis,omitempty" type:"Struct"`
	FailedModels    *ImportOASResponseBodyFailedModels    `json:"FailedModels,omitempty" xml:"FailedModels,omitempty" type:"Struct"`
	OperationId     *string                               `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	RequestId       *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SuccessApis     *ImportOASResponseBodySuccessApis     `json:"SuccessApis,omitempty" xml:"SuccessApis,omitempty" type:"Struct"`
	SuccessModels   *ImportOASResponseBodySuccessModels   `json:"SuccessModels,omitempty" xml:"SuccessModels,omitempty" type:"Struct"`
	WarningMessages *ImportOASResponseBodyWarningMessages `json:"WarningMessages,omitempty" xml:"WarningMessages,omitempty" type:"Struct"`
}

func (s ImportOASResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBody) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBody) SetErrorMessages(v *ImportOASResponseBodyErrorMessages) *ImportOASResponseBody {
	s.ErrorMessages = v
	return s
}

func (s *ImportOASResponseBody) SetFailedApis(v *ImportOASResponseBodyFailedApis) *ImportOASResponseBody {
	s.FailedApis = v
	return s
}

func (s *ImportOASResponseBody) SetFailedModels(v *ImportOASResponseBodyFailedModels) *ImportOASResponseBody {
	s.FailedModels = v
	return s
}

func (s *ImportOASResponseBody) SetOperationId(v string) *ImportOASResponseBody {
	s.OperationId = &v
	return s
}

func (s *ImportOASResponseBody) SetRequestId(v string) *ImportOASResponseBody {
	s.RequestId = &v
	return s
}

func (s *ImportOASResponseBody) SetSuccessApis(v *ImportOASResponseBodySuccessApis) *ImportOASResponseBody {
	s.SuccessApis = v
	return s
}

func (s *ImportOASResponseBody) SetSuccessModels(v *ImportOASResponseBodySuccessModels) *ImportOASResponseBody {
	s.SuccessModels = v
	return s
}

func (s *ImportOASResponseBody) SetWarningMessages(v *ImportOASResponseBodyWarningMessages) *ImportOASResponseBody {
	s.WarningMessages = v
	return s
}

type ImportOASResponseBodyErrorMessages struct {
	ErrorMessage []*string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" type:"Repeated"`
}

func (s ImportOASResponseBodyErrorMessages) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodyErrorMessages) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodyErrorMessages) SetErrorMessage(v []*string) *ImportOASResponseBodyErrorMessages {
	s.ErrorMessage = v
	return s
}

type ImportOASResponseBodyFailedApis struct {
	FailedApi []*ImportOASResponseBodyFailedApisFailedApi `json:"FailedApi,omitempty" xml:"FailedApi,omitempty" type:"Repeated"`
}

func (s ImportOASResponseBodyFailedApis) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodyFailedApis) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodyFailedApis) SetFailedApi(v []*ImportOASResponseBodyFailedApisFailedApi) *ImportOASResponseBodyFailedApis {
	s.FailedApi = v
	return s
}

type ImportOASResponseBodyFailedApisFailedApi struct {
	ErrorMsg   *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	HttpMethod *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	Path       *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s ImportOASResponseBodyFailedApisFailedApi) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodyFailedApisFailedApi) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodyFailedApisFailedApi) SetErrorMsg(v string) *ImportOASResponseBodyFailedApisFailedApi {
	s.ErrorMsg = &v
	return s
}

func (s *ImportOASResponseBodyFailedApisFailedApi) SetHttpMethod(v string) *ImportOASResponseBodyFailedApisFailedApi {
	s.HttpMethod = &v
	return s
}

func (s *ImportOASResponseBodyFailedApisFailedApi) SetPath(v string) *ImportOASResponseBodyFailedApisFailedApi {
	s.Path = &v
	return s
}

type ImportOASResponseBodyFailedModels struct {
	FailedModel []*ImportOASResponseBodyFailedModelsFailedModel `json:"FailedModel,omitempty" xml:"FailedModel,omitempty" type:"Repeated"`
}

func (s ImportOASResponseBodyFailedModels) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodyFailedModels) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodyFailedModels) SetFailedModel(v []*ImportOASResponseBodyFailedModelsFailedModel) *ImportOASResponseBodyFailedModels {
	s.FailedModel = v
	return s
}

type ImportOASResponseBodyFailedModelsFailedModel struct {
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
}

func (s ImportOASResponseBodyFailedModelsFailedModel) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodyFailedModelsFailedModel) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodyFailedModelsFailedModel) SetErrorMsg(v string) *ImportOASResponseBodyFailedModelsFailedModel {
	s.ErrorMsg = &v
	return s
}

func (s *ImportOASResponseBodyFailedModelsFailedModel) SetGroupId(v string) *ImportOASResponseBodyFailedModelsFailedModel {
	s.GroupId = &v
	return s
}

func (s *ImportOASResponseBodyFailedModelsFailedModel) SetModelName(v string) *ImportOASResponseBodyFailedModelsFailedModel {
	s.ModelName = &v
	return s
}

type ImportOASResponseBodySuccessApis struct {
	SuccessApi []*ImportOASResponseBodySuccessApisSuccessApi `json:"SuccessApi,omitempty" xml:"SuccessApi,omitempty" type:"Repeated"`
}

func (s ImportOASResponseBodySuccessApis) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodySuccessApis) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodySuccessApis) SetSuccessApi(v []*ImportOASResponseBodySuccessApisSuccessApi) *ImportOASResponseBodySuccessApis {
	s.SuccessApi = v
	return s
}

type ImportOASResponseBodySuccessApisSuccessApi struct {
	ApiId        *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiOperation *string `json:"ApiOperation,omitempty" xml:"ApiOperation,omitempty"`
	HttpMethod   *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	Path         *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s ImportOASResponseBodySuccessApisSuccessApi) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodySuccessApisSuccessApi) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodySuccessApisSuccessApi) SetApiId(v string) *ImportOASResponseBodySuccessApisSuccessApi {
	s.ApiId = &v
	return s
}

func (s *ImportOASResponseBodySuccessApisSuccessApi) SetApiOperation(v string) *ImportOASResponseBodySuccessApisSuccessApi {
	s.ApiOperation = &v
	return s
}

func (s *ImportOASResponseBodySuccessApisSuccessApi) SetHttpMethod(v string) *ImportOASResponseBodySuccessApisSuccessApi {
	s.HttpMethod = &v
	return s
}

func (s *ImportOASResponseBodySuccessApisSuccessApi) SetPath(v string) *ImportOASResponseBodySuccessApisSuccessApi {
	s.Path = &v
	return s
}

type ImportOASResponseBodySuccessModels struct {
	SuccessModel []*ImportOASResponseBodySuccessModelsSuccessModel `json:"SuccessModel,omitempty" xml:"SuccessModel,omitempty" type:"Repeated"`
}

func (s ImportOASResponseBodySuccessModels) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodySuccessModels) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodySuccessModels) SetSuccessModel(v []*ImportOASResponseBodySuccessModelsSuccessModel) *ImportOASResponseBodySuccessModels {
	s.SuccessModel = v
	return s
}

type ImportOASResponseBodySuccessModelsSuccessModel struct {
	GroupId        *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ModelName      *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	ModelOperation *string `json:"ModelOperation,omitempty" xml:"ModelOperation,omitempty"`
	ModelUid       *string `json:"ModelUid,omitempty" xml:"ModelUid,omitempty"`
}

func (s ImportOASResponseBodySuccessModelsSuccessModel) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodySuccessModelsSuccessModel) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodySuccessModelsSuccessModel) SetGroupId(v string) *ImportOASResponseBodySuccessModelsSuccessModel {
	s.GroupId = &v
	return s
}

func (s *ImportOASResponseBodySuccessModelsSuccessModel) SetModelName(v string) *ImportOASResponseBodySuccessModelsSuccessModel {
	s.ModelName = &v
	return s
}

func (s *ImportOASResponseBodySuccessModelsSuccessModel) SetModelOperation(v string) *ImportOASResponseBodySuccessModelsSuccessModel {
	s.ModelOperation = &v
	return s
}

func (s *ImportOASResponseBodySuccessModelsSuccessModel) SetModelUid(v string) *ImportOASResponseBodySuccessModelsSuccessModel {
	s.ModelUid = &v
	return s
}

type ImportOASResponseBodyWarningMessages struct {
	WarningMessage []*string `json:"WarningMessage,omitempty" xml:"WarningMessage,omitempty" type:"Repeated"`
}

func (s ImportOASResponseBodyWarningMessages) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponseBodyWarningMessages) GoString() string {
	return s.String()
}

func (s *ImportOASResponseBodyWarningMessages) SetWarningMessage(v []*string) *ImportOASResponseBodyWarningMessages {
	s.WarningMessage = v
	return s
}

type ImportOASResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ImportOASResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ImportOASResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportOASResponse) GoString() string {
	return s.String()
}

func (s *ImportOASResponse) SetHeaders(v map[string]*string) *ImportOASResponse {
	s.Headers = v
	return s
}

func (s *ImportOASResponse) SetStatusCode(v int32) *ImportOASResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportOASResponse) SetBody(v *ImportOASResponseBody) *ImportOASResponse {
	s.Body = v
	return s
}

type ImportSwaggerRequest struct {
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// 382271
	DataFormat *string `json:"DataFormat,omitempty" xml:"DataFormat,omitempty"`
	DryRun     *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// Creates an API by importing Swagger-compliant data.
	GlobalCondition map[string]interface{} `json:"GlobalCondition,omitempty" xml:"GlobalCondition,omitempty"`
	GroupId         *string                `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// 8e274ec61cf6468e83b68371956831cb
	Overwrite     *bool   `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ImportSwaggerRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerRequest) GoString() string {
	return s.String()
}

func (s *ImportSwaggerRequest) SetData(v string) *ImportSwaggerRequest {
	s.Data = &v
	return s
}

func (s *ImportSwaggerRequest) SetDataFormat(v string) *ImportSwaggerRequest {
	s.DataFormat = &v
	return s
}

func (s *ImportSwaggerRequest) SetDryRun(v bool) *ImportSwaggerRequest {
	s.DryRun = &v
	return s
}

func (s *ImportSwaggerRequest) SetGlobalCondition(v map[string]interface{}) *ImportSwaggerRequest {
	s.GlobalCondition = v
	return s
}

func (s *ImportSwaggerRequest) SetGroupId(v string) *ImportSwaggerRequest {
	s.GroupId = &v
	return s
}

func (s *ImportSwaggerRequest) SetOverwrite(v bool) *ImportSwaggerRequest {
	s.Overwrite = &v
	return s
}

func (s *ImportSwaggerRequest) SetSecurityToken(v string) *ImportSwaggerRequest {
	s.SecurityToken = &v
	return s
}

type ImportSwaggerShrinkRequest struct {
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// 382271
	DataFormat *string `json:"DataFormat,omitempty" xml:"DataFormat,omitempty"`
	DryRun     *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	// Creates an API by importing Swagger-compliant data.
	GlobalConditionShrink *string `json:"GlobalCondition,omitempty" xml:"GlobalCondition,omitempty"`
	GroupId               *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// 8e274ec61cf6468e83b68371956831cb
	Overwrite     *bool   `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ImportSwaggerShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerShrinkRequest) GoString() string {
	return s.String()
}

func (s *ImportSwaggerShrinkRequest) SetData(v string) *ImportSwaggerShrinkRequest {
	s.Data = &v
	return s
}

func (s *ImportSwaggerShrinkRequest) SetDataFormat(v string) *ImportSwaggerShrinkRequest {
	s.DataFormat = &v
	return s
}

func (s *ImportSwaggerShrinkRequest) SetDryRun(v bool) *ImportSwaggerShrinkRequest {
	s.DryRun = &v
	return s
}

func (s *ImportSwaggerShrinkRequest) SetGlobalConditionShrink(v string) *ImportSwaggerShrinkRequest {
	s.GlobalConditionShrink = &v
	return s
}

func (s *ImportSwaggerShrinkRequest) SetGroupId(v string) *ImportSwaggerShrinkRequest {
	s.GroupId = &v
	return s
}

func (s *ImportSwaggerShrinkRequest) SetOverwrite(v bool) *ImportSwaggerShrinkRequest {
	s.Overwrite = &v
	return s
}

func (s *ImportSwaggerShrinkRequest) SetSecurityToken(v string) *ImportSwaggerShrinkRequest {
	s.SecurityToken = &v
	return s
}

type ImportSwaggerResponseBody struct {
	Failed       *ImportSwaggerResponseBodyFailed       `json:"Failed,omitempty" xml:"Failed,omitempty" type:"Struct"`
	ModelFailed  *ImportSwaggerResponseBodyModelFailed  `json:"ModelFailed,omitempty" xml:"ModelFailed,omitempty" type:"Struct"`
	ModelSuccess *ImportSwaggerResponseBodyModelSuccess `json:"ModelSuccess,omitempty" xml:"ModelSuccess,omitempty" type:"Struct"`
	RequestId    *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *ImportSwaggerResponseBodySuccess      `json:"Success,omitempty" xml:"Success,omitempty" type:"Struct"`
}

func (s ImportSwaggerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBody) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBody) SetFailed(v *ImportSwaggerResponseBodyFailed) *ImportSwaggerResponseBody {
	s.Failed = v
	return s
}

func (s *ImportSwaggerResponseBody) SetModelFailed(v *ImportSwaggerResponseBodyModelFailed) *ImportSwaggerResponseBody {
	s.ModelFailed = v
	return s
}

func (s *ImportSwaggerResponseBody) SetModelSuccess(v *ImportSwaggerResponseBodyModelSuccess) *ImportSwaggerResponseBody {
	s.ModelSuccess = v
	return s
}

func (s *ImportSwaggerResponseBody) SetRequestId(v string) *ImportSwaggerResponseBody {
	s.RequestId = &v
	return s
}

func (s *ImportSwaggerResponseBody) SetSuccess(v *ImportSwaggerResponseBodySuccess) *ImportSwaggerResponseBody {
	s.Success = v
	return s
}

type ImportSwaggerResponseBodyFailed struct {
	ApiImportSwaggerFailed []*ImportSwaggerResponseBodyFailedApiImportSwaggerFailed `json:"ApiImportSwaggerFailed,omitempty" xml:"ApiImportSwaggerFailed,omitempty" type:"Repeated"`
}

func (s ImportSwaggerResponseBodyFailed) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBodyFailed) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBodyFailed) SetApiImportSwaggerFailed(v []*ImportSwaggerResponseBodyFailedApiImportSwaggerFailed) *ImportSwaggerResponseBodyFailed {
	s.ApiImportSwaggerFailed = v
	return s
}

type ImportSwaggerResponseBodyFailedApiImportSwaggerFailed struct {
	ErrorMsg   *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	HttpMethod *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	Path       *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s ImportSwaggerResponseBodyFailedApiImportSwaggerFailed) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBodyFailedApiImportSwaggerFailed) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBodyFailedApiImportSwaggerFailed) SetErrorMsg(v string) *ImportSwaggerResponseBodyFailedApiImportSwaggerFailed {
	s.ErrorMsg = &v
	return s
}

func (s *ImportSwaggerResponseBodyFailedApiImportSwaggerFailed) SetHttpMethod(v string) *ImportSwaggerResponseBodyFailedApiImportSwaggerFailed {
	s.HttpMethod = &v
	return s
}

func (s *ImportSwaggerResponseBodyFailedApiImportSwaggerFailed) SetPath(v string) *ImportSwaggerResponseBodyFailedApiImportSwaggerFailed {
	s.Path = &v
	return s
}

type ImportSwaggerResponseBodyModelFailed struct {
	ApiImportModelFailed []*ImportSwaggerResponseBodyModelFailedApiImportModelFailed `json:"ApiImportModelFailed,omitempty" xml:"ApiImportModelFailed,omitempty" type:"Repeated"`
}

func (s ImportSwaggerResponseBodyModelFailed) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBodyModelFailed) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBodyModelFailed) SetApiImportModelFailed(v []*ImportSwaggerResponseBodyModelFailedApiImportModelFailed) *ImportSwaggerResponseBodyModelFailed {
	s.ApiImportModelFailed = v
	return s
}

type ImportSwaggerResponseBodyModelFailedApiImportModelFailed struct {
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
}

func (s ImportSwaggerResponseBodyModelFailedApiImportModelFailed) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBodyModelFailedApiImportModelFailed) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBodyModelFailedApiImportModelFailed) SetErrorMsg(v string) *ImportSwaggerResponseBodyModelFailedApiImportModelFailed {
	s.ErrorMsg = &v
	return s
}

func (s *ImportSwaggerResponseBodyModelFailedApiImportModelFailed) SetGroupId(v string) *ImportSwaggerResponseBodyModelFailedApiImportModelFailed {
	s.GroupId = &v
	return s
}

func (s *ImportSwaggerResponseBodyModelFailedApiImportModelFailed) SetModelName(v string) *ImportSwaggerResponseBodyModelFailedApiImportModelFailed {
	s.ModelName = &v
	return s
}

type ImportSwaggerResponseBodyModelSuccess struct {
	ApiImportModelSuccess []*ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess `json:"ApiImportModelSuccess,omitempty" xml:"ApiImportModelSuccess,omitempty" type:"Repeated"`
}

func (s ImportSwaggerResponseBodyModelSuccess) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBodyModelSuccess) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBodyModelSuccess) SetApiImportModelSuccess(v []*ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess) *ImportSwaggerResponseBodyModelSuccess {
	s.ApiImportModelSuccess = v
	return s
}

type ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess struct {
	GroupId        *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	ModelName      *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	ModelOperation *string `json:"ModelOperation,omitempty" xml:"ModelOperation,omitempty"`
	ModelUid       *string `json:"ModelUid,omitempty" xml:"ModelUid,omitempty"`
}

func (s ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess) SetGroupId(v string) *ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess {
	s.GroupId = &v
	return s
}

func (s *ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess) SetModelName(v string) *ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess {
	s.ModelName = &v
	return s
}

func (s *ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess) SetModelOperation(v string) *ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess {
	s.ModelOperation = &v
	return s
}

func (s *ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess) SetModelUid(v string) *ImportSwaggerResponseBodyModelSuccessApiImportModelSuccess {
	s.ModelUid = &v
	return s
}

type ImportSwaggerResponseBodySuccess struct {
	ApiImportSwaggerSuccess []*ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess `json:"ApiImportSwaggerSuccess,omitempty" xml:"ApiImportSwaggerSuccess,omitempty" type:"Repeated"`
}

func (s ImportSwaggerResponseBodySuccess) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBodySuccess) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBodySuccess) SetApiImportSwaggerSuccess(v []*ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess) *ImportSwaggerResponseBodySuccess {
	s.ApiImportSwaggerSuccess = v
	return s
}

type ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess struct {
	ApiOperation *string `json:"ApiOperation,omitempty" xml:"ApiOperation,omitempty"`
	ApiUid       *string `json:"ApiUid,omitempty" xml:"ApiUid,omitempty"`
	HttpMethod   *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	Path         *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess) SetApiOperation(v string) *ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess {
	s.ApiOperation = &v
	return s
}

func (s *ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess) SetApiUid(v string) *ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess {
	s.ApiUid = &v
	return s
}

func (s *ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess) SetHttpMethod(v string) *ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess {
	s.HttpMethod = &v
	return s
}

func (s *ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess) SetPath(v string) *ImportSwaggerResponseBodySuccessApiImportSwaggerSuccess {
	s.Path = &v
	return s
}

type ImportSwaggerResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ImportSwaggerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ImportSwaggerResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportSwaggerResponse) GoString() string {
	return s.String()
}

func (s *ImportSwaggerResponse) SetHeaders(v map[string]*string) *ImportSwaggerResponse {
	s.Headers = v
	return s
}

func (s *ImportSwaggerResponse) SetStatusCode(v int32) *ImportSwaggerResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportSwaggerResponse) SetBody(v *ImportSwaggerResponseBody) *ImportSwaggerResponse {
	s.Body = v
	return s
}

type ListTagResourcesRequest struct {
	NextToken    *string                       `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	ResourceId   []*string                     `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceType *string                       `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tag          []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

type ListTagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesResponseBody struct {
	NextToken    *string                                   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagResources *ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Struct"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetNextToken(v string) *ListTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v *ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyTagResources struct {
	TagResource []*ListTagResourcesResponseBodyTagResourcesTagResource `json:"TagResource,omitempty" xml:"TagResource,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagResource(v []*ListTagResourcesResponseBodyTagResourcesTagResource) *ListTagResourcesResponseBodyTagResources {
	s.TagResource = v
	return s
}

type ListTagResourcesResponseBodyTagResourcesTagResource struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceId(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceType(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagKey(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagValue(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagValue = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetStatusCode(v int32) *ListTagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type ModifyApiRequest struct {
	AllowSignatureMethod *string `json:"AllowSignatureMethod,omitempty" xml:"AllowSignatureMethod,omitempty"`
	ApiId                *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	ApiName              *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	AppCodeAuthType      *string `json:"AppCodeAuthType,omitempty" xml:"AppCodeAuthType,omitempty"`
	AuthType             *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	BackendEnable        *bool   `json:"BackendEnable,omitempty" xml:"BackendEnable,omitempty"`
	BackendId            *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	ConstantParameters   *string `json:"ConstantParameters,omitempty" xml:"ConstantParameters,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DisableInternet      *bool   `json:"DisableInternet,omitempty" xml:"DisableInternet,omitempty"`
	ErrorCodeSamples     *string `json:"ErrorCodeSamples,omitempty" xml:"ErrorCodeSamples,omitempty"`
	FailResultSample     *string `json:"FailResultSample,omitempty" xml:"FailResultSample,omitempty"`
	ForceNonceCheck      *bool   `json:"ForceNonceCheck,omitempty" xml:"ForceNonceCheck,omitempty"`
	GroupId              *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	OpenIdConnectConfig  *string `json:"OpenIdConnectConfig,omitempty" xml:"OpenIdConnectConfig,omitempty"`
	RequestConfig        *string `json:"RequestConfig,omitempty" xml:"RequestConfig,omitempty"`
	RequestParameters    *string `json:"RequestParameters,omitempty" xml:"RequestParameters,omitempty"`
	ResultBodyModel      *string `json:"ResultBodyModel,omitempty" xml:"ResultBodyModel,omitempty"`
	ResultDescriptions   *string `json:"ResultDescriptions,omitempty" xml:"ResultDescriptions,omitempty"`
	ResultSample         *string `json:"ResultSample,omitempty" xml:"ResultSample,omitempty"`
	ResultType           *string `json:"ResultType,omitempty" xml:"ResultType,omitempty"`
	SecurityToken        *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	ServiceConfig        *string `json:"ServiceConfig,omitempty" xml:"ServiceConfig,omitempty"`
	ServiceParameters    *string `json:"ServiceParameters,omitempty" xml:"ServiceParameters,omitempty"`
	ServiceParametersMap *string `json:"ServiceParametersMap,omitempty" xml:"ServiceParametersMap,omitempty"`
	SystemParameters     *string `json:"SystemParameters,omitempty" xml:"SystemParameters,omitempty"`
	Visibility           *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
	WebSocketApiType     *string `json:"WebSocketApiType,omitempty" xml:"WebSocketApiType,omitempty"`
}

func (s ModifyApiRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiRequest) GoString() string {
	return s.String()
}

func (s *ModifyApiRequest) SetAllowSignatureMethod(v string) *ModifyApiRequest {
	s.AllowSignatureMethod = &v
	return s
}

func (s *ModifyApiRequest) SetApiId(v string) *ModifyApiRequest {
	s.ApiId = &v
	return s
}

func (s *ModifyApiRequest) SetApiName(v string) *ModifyApiRequest {
	s.ApiName = &v
	return s
}

func (s *ModifyApiRequest) SetAppCodeAuthType(v string) *ModifyApiRequest {
	s.AppCodeAuthType = &v
	return s
}

func (s *ModifyApiRequest) SetAuthType(v string) *ModifyApiRequest {
	s.AuthType = &v
	return s
}

func (s *ModifyApiRequest) SetBackendEnable(v bool) *ModifyApiRequest {
	s.BackendEnable = &v
	return s
}

func (s *ModifyApiRequest) SetBackendId(v string) *ModifyApiRequest {
	s.BackendId = &v
	return s
}

func (s *ModifyApiRequest) SetConstantParameters(v string) *ModifyApiRequest {
	s.ConstantParameters = &v
	return s
}

func (s *ModifyApiRequest) SetDescription(v string) *ModifyApiRequest {
	s.Description = &v
	return s
}

func (s *ModifyApiRequest) SetDisableInternet(v bool) *ModifyApiRequest {
	s.DisableInternet = &v
	return s
}

func (s *ModifyApiRequest) SetErrorCodeSamples(v string) *ModifyApiRequest {
	s.ErrorCodeSamples = &v
	return s
}

func (s *ModifyApiRequest) SetFailResultSample(v string) *ModifyApiRequest {
	s.FailResultSample = &v
	return s
}

func (s *ModifyApiRequest) SetForceNonceCheck(v bool) *ModifyApiRequest {
	s.ForceNonceCheck = &v
	return s
}

func (s *ModifyApiRequest) SetGroupId(v string) *ModifyApiRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyApiRequest) SetOpenIdConnectConfig(v string) *ModifyApiRequest {
	s.OpenIdConnectConfig = &v
	return s
}

func (s *ModifyApiRequest) SetRequestConfig(v string) *ModifyApiRequest {
	s.RequestConfig = &v
	return s
}

func (s *ModifyApiRequest) SetRequestParameters(v string) *ModifyApiRequest {
	s.RequestParameters = &v
	return s
}

func (s *ModifyApiRequest) SetResultBodyModel(v string) *ModifyApiRequest {
	s.ResultBodyModel = &v
	return s
}

func (s *ModifyApiRequest) SetResultDescriptions(v string) *ModifyApiRequest {
	s.ResultDescriptions = &v
	return s
}

func (s *ModifyApiRequest) SetResultSample(v string) *ModifyApiRequest {
	s.ResultSample = &v
	return s
}

func (s *ModifyApiRequest) SetResultType(v string) *ModifyApiRequest {
	s.ResultType = &v
	return s
}

func (s *ModifyApiRequest) SetSecurityToken(v string) *ModifyApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyApiRequest) SetServiceConfig(v string) *ModifyApiRequest {
	s.ServiceConfig = &v
	return s
}

func (s *ModifyApiRequest) SetServiceParameters(v string) *ModifyApiRequest {
	s.ServiceParameters = &v
	return s
}

func (s *ModifyApiRequest) SetServiceParametersMap(v string) *ModifyApiRequest {
	s.ServiceParametersMap = &v
	return s
}

func (s *ModifyApiRequest) SetSystemParameters(v string) *ModifyApiRequest {
	s.SystemParameters = &v
	return s
}

func (s *ModifyApiRequest) SetVisibility(v string) *ModifyApiRequest {
	s.Visibility = &v
	return s
}

func (s *ModifyApiRequest) SetWebSocketApiType(v string) *ModifyApiRequest {
	s.WebSocketApiType = &v
	return s
}

type ModifyApiResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyApiResponseBody) SetRequestId(v string) *ModifyApiResponseBody {
	s.RequestId = &v
	return s
}

type ModifyApiResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyApiResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiResponse) GoString() string {
	return s.String()
}

func (s *ModifyApiResponse) SetHeaders(v map[string]*string) *ModifyApiResponse {
	s.Headers = v
	return s
}

func (s *ModifyApiResponse) SetStatusCode(v int32) *ModifyApiResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyApiResponse) SetBody(v *ModifyApiResponseBody) *ModifyApiResponse {
	s.Body = v
	return s
}

type ModifyApiConfigurationRequest struct {
	// If the **AuthType** parameter is set to **APP**, you must include this parameter to specify the signature algorithm. If you do not specify a value, HmacSHA256 is used by default. Valid values:
	//
	// *   HmacSHA256
	// *   HmacSHA1,HmacSHA256
	AllowSignatureMethod *string `json:"AllowSignatureMethod,omitempty" xml:"AllowSignatureMethod,omitempty"`
	// The ID of the API.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API.
	ApiName *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	// If the **AuthType** parameter is set to **APP**, the valid values are:
	//
	// *   **DEFAULT**: The default value that is used if no other values are passed. This value indicates that the settings of the group are used.
	// *   **DISABLE**: The authentication is disabled.
	// *   **HEADER**: AppCode can be placed in the Header parameter for authentication.
	// *   **HEADER_QUERY**: AppCode can be placed in the Header or Query parameter for authentication.
	AppCodeAuthType *string `json:"AppCodeAuthType,omitempty" xml:"AppCodeAuthType,omitempty"`
	// API安全认证类型，目前可以取值：
	//
	// - **APP**：只允许已授权的APP调用
	// - **ANONYMOUS**：允许匿名调用，设置为允许匿名调用需要注意：
	//      - 任何能够获取该API服务信息的人，都将能够调用该API。网关不会对调用者做身份认证，也无法设置按用户的流量控制，若开放该API请设置好按API的流量控制；
	//      - AppCodeAuthType的值不会生效。
	AuthType *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	// The name of the backend service. This parameter takes effect only when the UseBackendService parameter is set to TRUE.
	BackendName *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	// This parameter takes effect only when the **RequestMode** parameter is set to **MAPPING**.
	//
	// The format in which data is transmitted to the server for POST and PUT requests. Valid values: **FORM** and **STREAM**. FORM indicates that data is transmitted in the key-value pair format. STREAM indicates that data is transmitted as byte streams.
	BodyFormat *string `json:"BodyFormat,omitempty" xml:"BodyFormat,omitempty"`
	// The body model.
	BodyModel *string `json:"BodyModel,omitempty" xml:"BodyModel,omitempty"`
	// The ContentType configuration of the backend request.
	//
	// *   DEFAULT: the default configuration in API Gateway
	// *   CUSTOM: a custom configuration
	ContentTypeCategory *string `json:"ContentTypeCategory,omitempty" xml:"ContentTypeCategory,omitempty"`
	// The value of the ContentType header when the ServiceProtocol parameter is set to HTTP and the ContentTypeCatagory parameter is set to DEFAULT or CUSTOM.
	ContentTypeValue *string `json:"ContentTypeValue,omitempty" xml:"ContentTypeValue,omitempty"`
	// The description of the API.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// *   Specifies whether to call the API only in an internal network. If the **DisableInternet** parameter is set to **true**, the API can be called only in an internal network.
	// *   If the **DisableInternet** parameter is set to **false**, the API can be called over the Internet and in an internal network.
	DisableInternet *bool `json:"DisableInternet,omitempty" xml:"DisableInternet,omitempty"`
	// The sample error codes returned by the backend service.
	//
	// For more information, see [ErrorCodeSample](~~44392~~).
	ErrorCodeSamples *string `json:"ErrorCodeSamples,omitempty" xml:"ErrorCodeSamples,omitempty"`
	// The sample error response from the backend service. This value is used only to generate documents. It does not affect the returned result.
	FailResultSample *string `json:"FailResultSample,omitempty" xml:"FailResultSample,omitempty"`
	// *   Specifies whether to forcibly check X-Ca-Nonce. If the **ForceNonceCheck** parameter is set to **true**, X-Ca-Nonce is forcibly checked. X-Ca-Nonce is the unique identifier of the request and is generally identified by UUID. After receiving this parameter, API Gateway verifies the validity of this parameter. The same value can be used only once within 15 minutes. This helps prevent replay attacks.
	// *   If the **ForceNonceCheck** parameter is set to **false**, X-Ca-Nonce is not checked. If you do not modify this parameter when you modify an API, the original value is used.
	ForceNonceCheck *bool `json:"ForceNonceCheck,omitempty" xml:"ForceNonceCheck,omitempty"`
	// The Function Compute configuration.
	FunctionComputeConfig *string `json:"FunctionComputeConfig,omitempty" xml:"FunctionComputeConfig,omitempty"`
	// The HTTP configuration.
	HttpConfig *string `json:"HttpConfig,omitempty" xml:"HttpConfig,omitempty"`
	// The Mock configuration.
	MockConfig *string `json:"MockConfig,omitempty" xml:"MockConfig,omitempty"`
	// The name of the model.
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	// The OSS configuration.
	OssConfig *string `json:"OssConfig,omitempty" xml:"OssConfig,omitempty"`
	// The description of the request body.
	PostBodyDescription *string `json:"PostBodyDescription,omitempty" xml:"PostBodyDescription,omitempty"`
	// The HTTP method used to make the request. Valid values: GET, POST, DELETE, PUT, HEADER, TRACE, PATCH, CONNECT, and OPTIONS.
	RequestHttpMethod *string `json:"RequestHttpMethod,omitempty" xml:"RequestHttpMethod,omitempty"`
	// The request mode. Valid values:
	//
	// *   MAPPING: Parameters are mapped. Unknown parameters are filtered out.
	// *   PASSTHROUGH: Parameters are passed through.
	// *   MAPPING_PASSTHROUGH: Parameters are mapped. Unknown parameters are passed through.
	RequestMode *string `json:"RequestMode,omitempty" xml:"RequestMode,omitempty"`
	// The parameters of API requests sent by the consumer to API Gateway.
	//
	// For more information, see [RequestParameter](~~43986~~).
	RequestParameters *string `json:"RequestParameters,omitempty" xml:"RequestParameters,omitempty"`
	// The path of the API request. If the complete API URL is `http://api.a.com:8080/object/add?key1=value1&key2=value2`, the path of the API request is `/object/add`.
	RequestPath *string `json:"RequestPath,omitempty" xml:"RequestPath,omitempty"`
	// The protocol type supported by the API. Valid values: HTTP and HTTPS. Separate multiple values with commas (,), such as "HTTP,HTTPS".
	RequestProtocol *string `json:"RequestProtocol,omitempty" xml:"RequestProtocol,omitempty"`
	// The sample response from the backend service. This value is used only to generate documents. It does not affect the returned result.
	ResultSample *string `json:"ResultSample,omitempty" xml:"ResultSample,omitempty"`
	// The format of the response from the backend service. Valid values: JSON, TEXT, BINARY, XML, and HTML. This value is used only to generate documents. It does not affect the returned result.
	ResultType    *string `json:"ResultType,omitempty" xml:"ResultType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The parameters of API requests sent by API Gateway to the backend service.
	//
	// For more information, see [ServiceParameter](~~43988~~).
	ServiceParameters *string `json:"ServiceParameters,omitempty" xml:"ServiceParameters,omitempty"`
	// The mappings between parameters of requests sent by the consumer to API Gateway and parameters of requests sent by API Gateway to the backend service.
	//
	// For more information, see [ServiceParameterMap](~~43989~~).
	ServiceParametersMap *string `json:"ServiceParametersMap,omitempty" xml:"ServiceParametersMap,omitempty"`
	// The protocol that is used to access backend services. Valid values:
	//
	// *   Http: for backend services that use HTTP or HTTPS
	// *   Vpc: for backend services that use VPC
	// *   FC: for Function Compute
	// *   OSS: for Object Storage Service
	// *   Mock: for backend services that use the Mock mode
	// *   EventBridge: for EventBridge
	//
	// You must specify the config value for the corresponding backend service.
	ServiceProtocol *string `json:"ServiceProtocol,omitempty" xml:"ServiceProtocol,omitempty"`
	// The timeout period of the backend service. Unit: milliseconds.
	ServiceTimeout *int32 `json:"ServiceTimeout,omitempty" xml:"ServiceTimeout,omitempty"`
	// Specifies whether to use the information about the created backend service. Valid values:
	//
	// *   TRUE: uses the information about the created backend service.
	// *   FALSE: uses the information about the custom backend service.
	UseBackendService *bool `json:"UseBackendService,omitempty" xml:"UseBackendService,omitempty"`
	// Specifies whether to make the API public. Valid values:
	//
	// *   **PUBLIC:** The API is public. If this parameter is set to PUBLIC, the API is displayed on the APIs page for all users after the API is published to the production environment.
	// *   **PRIVATE:** The API is private. Private APIs are not displayed in the Alibaba Cloud Marketplace after the API group to which they belong is made available.
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
	// The VPC configuration.
	VpcConfig *string `json:"VpcConfig,omitempty" xml:"VpcConfig,omitempty"`
}

func (s ModifyApiConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiConfigurationRequest) GoString() string {
	return s.String()
}

func (s *ModifyApiConfigurationRequest) SetAllowSignatureMethod(v string) *ModifyApiConfigurationRequest {
	s.AllowSignatureMethod = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetApiId(v string) *ModifyApiConfigurationRequest {
	s.ApiId = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetApiName(v string) *ModifyApiConfigurationRequest {
	s.ApiName = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetAppCodeAuthType(v string) *ModifyApiConfigurationRequest {
	s.AppCodeAuthType = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetAuthType(v string) *ModifyApiConfigurationRequest {
	s.AuthType = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetBackendName(v string) *ModifyApiConfigurationRequest {
	s.BackendName = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetBodyFormat(v string) *ModifyApiConfigurationRequest {
	s.BodyFormat = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetBodyModel(v string) *ModifyApiConfigurationRequest {
	s.BodyModel = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetContentTypeCategory(v string) *ModifyApiConfigurationRequest {
	s.ContentTypeCategory = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetContentTypeValue(v string) *ModifyApiConfigurationRequest {
	s.ContentTypeValue = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetDescription(v string) *ModifyApiConfigurationRequest {
	s.Description = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetDisableInternet(v bool) *ModifyApiConfigurationRequest {
	s.DisableInternet = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetErrorCodeSamples(v string) *ModifyApiConfigurationRequest {
	s.ErrorCodeSamples = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetFailResultSample(v string) *ModifyApiConfigurationRequest {
	s.FailResultSample = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetForceNonceCheck(v bool) *ModifyApiConfigurationRequest {
	s.ForceNonceCheck = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetFunctionComputeConfig(v string) *ModifyApiConfigurationRequest {
	s.FunctionComputeConfig = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetHttpConfig(v string) *ModifyApiConfigurationRequest {
	s.HttpConfig = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetMockConfig(v string) *ModifyApiConfigurationRequest {
	s.MockConfig = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetModelName(v string) *ModifyApiConfigurationRequest {
	s.ModelName = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetOssConfig(v string) *ModifyApiConfigurationRequest {
	s.OssConfig = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetPostBodyDescription(v string) *ModifyApiConfigurationRequest {
	s.PostBodyDescription = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetRequestHttpMethod(v string) *ModifyApiConfigurationRequest {
	s.RequestHttpMethod = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetRequestMode(v string) *ModifyApiConfigurationRequest {
	s.RequestMode = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetRequestParameters(v string) *ModifyApiConfigurationRequest {
	s.RequestParameters = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetRequestPath(v string) *ModifyApiConfigurationRequest {
	s.RequestPath = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetRequestProtocol(v string) *ModifyApiConfigurationRequest {
	s.RequestProtocol = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetResultSample(v string) *ModifyApiConfigurationRequest {
	s.ResultSample = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetResultType(v string) *ModifyApiConfigurationRequest {
	s.ResultType = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetSecurityToken(v string) *ModifyApiConfigurationRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetServiceParameters(v string) *ModifyApiConfigurationRequest {
	s.ServiceParameters = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetServiceParametersMap(v string) *ModifyApiConfigurationRequest {
	s.ServiceParametersMap = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetServiceProtocol(v string) *ModifyApiConfigurationRequest {
	s.ServiceProtocol = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetServiceTimeout(v int32) *ModifyApiConfigurationRequest {
	s.ServiceTimeout = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetUseBackendService(v bool) *ModifyApiConfigurationRequest {
	s.UseBackendService = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetVisibility(v string) *ModifyApiConfigurationRequest {
	s.Visibility = &v
	return s
}

func (s *ModifyApiConfigurationRequest) SetVpcConfig(v string) *ModifyApiConfigurationRequest {
	s.VpcConfig = &v
	return s
}

type ModifyApiConfigurationResponseBody struct {
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyApiConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyApiConfigurationResponseBody) SetRequestId(v string) *ModifyApiConfigurationResponseBody {
	s.RequestId = &v
	return s
}

type ModifyApiConfigurationResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyApiConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyApiConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiConfigurationResponse) GoString() string {
	return s.String()
}

func (s *ModifyApiConfigurationResponse) SetHeaders(v map[string]*string) *ModifyApiConfigurationResponse {
	s.Headers = v
	return s
}

func (s *ModifyApiConfigurationResponse) SetStatusCode(v int32) *ModifyApiConfigurationResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyApiConfigurationResponse) SetBody(v *ModifyApiConfigurationResponseBody) *ModifyApiConfigurationResponse {
	s.Body = v
	return s
}

type ModifyApiGroupRequest struct {
	BasePath           *string                     `json:"BasePath,omitempty" xml:"BasePath,omitempty"`
	CompatibleFlags    *string                     `json:"CompatibleFlags,omitempty" xml:"CompatibleFlags,omitempty"`
	CustomTraceConfig  *string                     `json:"CustomTraceConfig,omitempty" xml:"CustomTraceConfig,omitempty"`
	CustomerConfigs    *string                     `json:"CustomerConfigs,omitempty" xml:"CustomerConfigs,omitempty"`
	DefaultDomain      *string                     `json:"DefaultDomain,omitempty" xml:"DefaultDomain,omitempty"`
	Description        *string                     `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId            *string                     `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName          *string                     `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	PassthroughHeaders *string                     `json:"PassthroughHeaders,omitempty" xml:"PassthroughHeaders,omitempty"`
	RpcPattern         *string                     `json:"RpcPattern,omitempty" xml:"RpcPattern,omitempty"`
	SecurityToken      *string                     `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag                []*ModifyApiGroupRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	UserLogConfig      *string                     `json:"UserLogConfig,omitempty" xml:"UserLogConfig,omitempty"`
}

func (s ModifyApiGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupRequest) SetBasePath(v string) *ModifyApiGroupRequest {
	s.BasePath = &v
	return s
}

func (s *ModifyApiGroupRequest) SetCompatibleFlags(v string) *ModifyApiGroupRequest {
	s.CompatibleFlags = &v
	return s
}

func (s *ModifyApiGroupRequest) SetCustomTraceConfig(v string) *ModifyApiGroupRequest {
	s.CustomTraceConfig = &v
	return s
}

func (s *ModifyApiGroupRequest) SetCustomerConfigs(v string) *ModifyApiGroupRequest {
	s.CustomerConfigs = &v
	return s
}

func (s *ModifyApiGroupRequest) SetDefaultDomain(v string) *ModifyApiGroupRequest {
	s.DefaultDomain = &v
	return s
}

func (s *ModifyApiGroupRequest) SetDescription(v string) *ModifyApiGroupRequest {
	s.Description = &v
	return s
}

func (s *ModifyApiGroupRequest) SetGroupId(v string) *ModifyApiGroupRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyApiGroupRequest) SetGroupName(v string) *ModifyApiGroupRequest {
	s.GroupName = &v
	return s
}

func (s *ModifyApiGroupRequest) SetPassthroughHeaders(v string) *ModifyApiGroupRequest {
	s.PassthroughHeaders = &v
	return s
}

func (s *ModifyApiGroupRequest) SetRpcPattern(v string) *ModifyApiGroupRequest {
	s.RpcPattern = &v
	return s
}

func (s *ModifyApiGroupRequest) SetSecurityToken(v string) *ModifyApiGroupRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyApiGroupRequest) SetTag(v []*ModifyApiGroupRequestTag) *ModifyApiGroupRequest {
	s.Tag = v
	return s
}

func (s *ModifyApiGroupRequest) SetUserLogConfig(v string) *ModifyApiGroupRequest {
	s.UserLogConfig = &v
	return s
}

type ModifyApiGroupRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyApiGroupRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupRequestTag) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupRequestTag) SetKey(v string) *ModifyApiGroupRequestTag {
	s.Key = &v
	return s
}

func (s *ModifyApiGroupRequestTag) SetValue(v string) *ModifyApiGroupRequestTag {
	s.Value = &v
	return s
}

type ModifyApiGroupResponseBody struct {
	BasePath    *string `json:"BasePath,omitempty" xml:"BasePath,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GroupId     *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName   *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SubDomain   *string `json:"SubDomain,omitempty" xml:"SubDomain,omitempty"`
}

func (s ModifyApiGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupResponseBody) SetBasePath(v string) *ModifyApiGroupResponseBody {
	s.BasePath = &v
	return s
}

func (s *ModifyApiGroupResponseBody) SetDescription(v string) *ModifyApiGroupResponseBody {
	s.Description = &v
	return s
}

func (s *ModifyApiGroupResponseBody) SetGroupId(v string) *ModifyApiGroupResponseBody {
	s.GroupId = &v
	return s
}

func (s *ModifyApiGroupResponseBody) SetGroupName(v string) *ModifyApiGroupResponseBody {
	s.GroupName = &v
	return s
}

func (s *ModifyApiGroupResponseBody) SetRequestId(v string) *ModifyApiGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyApiGroupResponseBody) SetSubDomain(v string) *ModifyApiGroupResponseBody {
	s.SubDomain = &v
	return s
}

type ModifyApiGroupResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyApiGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyApiGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupResponse) SetHeaders(v map[string]*string) *ModifyApiGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyApiGroupResponse) SetStatusCode(v int32) *ModifyApiGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyApiGroupResponse) SetBody(v *ModifyApiGroupResponseBody) *ModifyApiGroupResponse {
	s.Body = v
	return s
}

type ModifyApiGroupVpcWhitelistRequest struct {
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	VpcIds        *string `json:"VpcIds,omitempty" xml:"VpcIds,omitempty"`
}

func (s ModifyApiGroupVpcWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupVpcWhitelistRequest) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupVpcWhitelistRequest) SetGroupId(v string) *ModifyApiGroupVpcWhitelistRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyApiGroupVpcWhitelistRequest) SetSecurityToken(v string) *ModifyApiGroupVpcWhitelistRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyApiGroupVpcWhitelistRequest) SetVpcIds(v string) *ModifyApiGroupVpcWhitelistRequest {
	s.VpcIds = &v
	return s
}

type ModifyApiGroupVpcWhitelistResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyApiGroupVpcWhitelistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupVpcWhitelistResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupVpcWhitelistResponseBody) SetRequestId(v string) *ModifyApiGroupVpcWhitelistResponseBody {
	s.RequestId = &v
	return s
}

type ModifyApiGroupVpcWhitelistResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyApiGroupVpcWhitelistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyApiGroupVpcWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyApiGroupVpcWhitelistResponse) GoString() string {
	return s.String()
}

func (s *ModifyApiGroupVpcWhitelistResponse) SetHeaders(v map[string]*string) *ModifyApiGroupVpcWhitelistResponse {
	s.Headers = v
	return s
}

func (s *ModifyApiGroupVpcWhitelistResponse) SetStatusCode(v int32) *ModifyApiGroupVpcWhitelistResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyApiGroupVpcWhitelistResponse) SetBody(v *ModifyApiGroupVpcWhitelistResponseBody) *ModifyApiGroupVpcWhitelistResponse {
	s.Body = v
	return s
}

type ModifyAppRequest struct {
	AppId         *int64                 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName       *string                `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Description   *string                `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken *string                `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag           []*ModifyAppRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ModifyAppRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAppRequest) GoString() string {
	return s.String()
}

func (s *ModifyAppRequest) SetAppId(v int64) *ModifyAppRequest {
	s.AppId = &v
	return s
}

func (s *ModifyAppRequest) SetAppName(v string) *ModifyAppRequest {
	s.AppName = &v
	return s
}

func (s *ModifyAppRequest) SetDescription(v string) *ModifyAppRequest {
	s.Description = &v
	return s
}

func (s *ModifyAppRequest) SetSecurityToken(v string) *ModifyAppRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyAppRequest) SetTag(v []*ModifyAppRequestTag) *ModifyAppRequest {
	s.Tag = v
	return s
}

type ModifyAppRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyAppRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ModifyAppRequestTag) GoString() string {
	return s.String()
}

func (s *ModifyAppRequestTag) SetKey(v string) *ModifyAppRequestTag {
	s.Key = &v
	return s
}

func (s *ModifyAppRequestTag) SetValue(v string) *ModifyAppRequestTag {
	s.Value = &v
	return s
}

type ModifyAppResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAppResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAppResponseBody) SetRequestId(v string) *ModifyAppResponseBody {
	s.RequestId = &v
	return s
}

type ModifyAppResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyAppResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAppResponse) GoString() string {
	return s.String()
}

func (s *ModifyAppResponse) SetHeaders(v map[string]*string) *ModifyAppResponse {
	s.Headers = v
	return s
}

func (s *ModifyAppResponse) SetStatusCode(v int32) *ModifyAppResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAppResponse) SetBody(v *ModifyAppResponseBody) *ModifyAppResponse {
	s.Body = v
	return s
}

type ModifyBackendRequest struct {
	BackendId     *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	BackendName   *string `json:"BackendName,omitempty" xml:"BackendName,omitempty"`
	BackendType   *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ModifyBackendRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackendRequest) GoString() string {
	return s.String()
}

func (s *ModifyBackendRequest) SetBackendId(v string) *ModifyBackendRequest {
	s.BackendId = &v
	return s
}

func (s *ModifyBackendRequest) SetBackendName(v string) *ModifyBackendRequest {
	s.BackendName = &v
	return s
}

func (s *ModifyBackendRequest) SetBackendType(v string) *ModifyBackendRequest {
	s.BackendType = &v
	return s
}

func (s *ModifyBackendRequest) SetDescription(v string) *ModifyBackendRequest {
	s.Description = &v
	return s
}

func (s *ModifyBackendRequest) SetSecurityToken(v string) *ModifyBackendRequest {
	s.SecurityToken = &v
	return s
}

type ModifyBackendResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyBackendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackendResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyBackendResponseBody) SetRequestId(v string) *ModifyBackendResponseBody {
	s.RequestId = &v
	return s
}

type ModifyBackendResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyBackendResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyBackendResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackendResponse) GoString() string {
	return s.String()
}

func (s *ModifyBackendResponse) SetHeaders(v map[string]*string) *ModifyBackendResponse {
	s.Headers = v
	return s
}

func (s *ModifyBackendResponse) SetStatusCode(v int32) *ModifyBackendResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyBackendResponse) SetBody(v *ModifyBackendResponseBody) *ModifyBackendResponse {
	s.Body = v
	return s
}

type ModifyBackendModelRequest struct {
	BackendId        *string `json:"BackendId,omitempty" xml:"BackendId,omitempty"`
	BackendModelData *string `json:"BackendModelData,omitempty" xml:"BackendModelData,omitempty"`
	BackendModelId   *string `json:"BackendModelId,omitempty" xml:"BackendModelId,omitempty"`
	BackendType      *string `json:"BackendType,omitempty" xml:"BackendType,omitempty"`
	Description      *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken    *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	StageName        *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s ModifyBackendModelRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackendModelRequest) GoString() string {
	return s.String()
}

func (s *ModifyBackendModelRequest) SetBackendId(v string) *ModifyBackendModelRequest {
	s.BackendId = &v
	return s
}

func (s *ModifyBackendModelRequest) SetBackendModelData(v string) *ModifyBackendModelRequest {
	s.BackendModelData = &v
	return s
}

func (s *ModifyBackendModelRequest) SetBackendModelId(v string) *ModifyBackendModelRequest {
	s.BackendModelId = &v
	return s
}

func (s *ModifyBackendModelRequest) SetBackendType(v string) *ModifyBackendModelRequest {
	s.BackendType = &v
	return s
}

func (s *ModifyBackendModelRequest) SetDescription(v string) *ModifyBackendModelRequest {
	s.Description = &v
	return s
}

func (s *ModifyBackendModelRequest) SetSecurityToken(v string) *ModifyBackendModelRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyBackendModelRequest) SetStageName(v string) *ModifyBackendModelRequest {
	s.StageName = &v
	return s
}

type ModifyBackendModelResponseBody struct {
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyBackendModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackendModelResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyBackendModelResponseBody) SetOperationId(v string) *ModifyBackendModelResponseBody {
	s.OperationId = &v
	return s
}

func (s *ModifyBackendModelResponseBody) SetRequestId(v string) *ModifyBackendModelResponseBody {
	s.RequestId = &v
	return s
}

type ModifyBackendModelResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyBackendModelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyBackendModelResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackendModelResponse) GoString() string {
	return s.String()
}

func (s *ModifyBackendModelResponse) SetHeaders(v map[string]*string) *ModifyBackendModelResponse {
	s.Headers = v
	return s
}

func (s *ModifyBackendModelResponse) SetStatusCode(v int32) *ModifyBackendModelResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyBackendModelResponse) SetBody(v *ModifyBackendModelResponseBody) *ModifyBackendModelResponse {
	s.Body = v
	return s
}

type ModifyDatasetRequest struct {
	DatasetId     *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	DatasetName   *string `json:"DatasetName,omitempty" xml:"DatasetName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ModifyDatasetRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatasetRequest) GoString() string {
	return s.String()
}

func (s *ModifyDatasetRequest) SetDatasetId(v string) *ModifyDatasetRequest {
	s.DatasetId = &v
	return s
}

func (s *ModifyDatasetRequest) SetDatasetName(v string) *ModifyDatasetRequest {
	s.DatasetName = &v
	return s
}

func (s *ModifyDatasetRequest) SetSecurityToken(v string) *ModifyDatasetRequest {
	s.SecurityToken = &v
	return s
}

type ModifyDatasetResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDatasetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatasetResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDatasetResponseBody) SetRequestId(v string) *ModifyDatasetResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDatasetResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDatasetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDatasetResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatasetResponse) GoString() string {
	return s.String()
}

func (s *ModifyDatasetResponse) SetHeaders(v map[string]*string) *ModifyDatasetResponse {
	s.Headers = v
	return s
}

func (s *ModifyDatasetResponse) SetStatusCode(v int32) *ModifyDatasetResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDatasetResponse) SetBody(v *ModifyDatasetResponseBody) *ModifyDatasetResponse {
	s.Body = v
	return s
}

type ModifyDatasetItemRequest struct {
	DatasetId     *string `json:"DatasetId,omitempty" xml:"DatasetId,omitempty"`
	DatasetItemId *string `json:"DatasetItemId,omitempty" xml:"DatasetItemId,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ExpiredTime   *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ModifyDatasetItemRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatasetItemRequest) GoString() string {
	return s.String()
}

func (s *ModifyDatasetItemRequest) SetDatasetId(v string) *ModifyDatasetItemRequest {
	s.DatasetId = &v
	return s
}

func (s *ModifyDatasetItemRequest) SetDatasetItemId(v string) *ModifyDatasetItemRequest {
	s.DatasetItemId = &v
	return s
}

func (s *ModifyDatasetItemRequest) SetDescription(v string) *ModifyDatasetItemRequest {
	s.Description = &v
	return s
}

func (s *ModifyDatasetItemRequest) SetExpiredTime(v string) *ModifyDatasetItemRequest {
	s.ExpiredTime = &v
	return s
}

func (s *ModifyDatasetItemRequest) SetSecurityToken(v string) *ModifyDatasetItemRequest {
	s.SecurityToken = &v
	return s
}

type ModifyDatasetItemResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDatasetItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatasetItemResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDatasetItemResponseBody) SetRequestId(v string) *ModifyDatasetItemResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDatasetItemResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDatasetItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDatasetItemResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDatasetItemResponse) GoString() string {
	return s.String()
}

func (s *ModifyDatasetItemResponse) SetHeaders(v map[string]*string) *ModifyDatasetItemResponse {
	s.Headers = v
	return s
}

func (s *ModifyDatasetItemResponse) SetStatusCode(v int32) *ModifyDatasetItemResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDatasetItemResponse) SetBody(v *ModifyDatasetItemResponseBody) *ModifyDatasetItemResponse {
	s.Body = v
	return s
}

type ModifyInstanceSpecRequest struct {
	AutoPay        *bool   `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceSpec   *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	ModifyAction   *string `json:"ModifyAction,omitempty" xml:"ModifyAction,omitempty"`
	SkipWaitSwitch *bool   `json:"SkipWaitSwitch,omitempty" xml:"SkipWaitSwitch,omitempty"`
	Token          *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s ModifyInstanceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecRequest) SetAutoPay(v bool) *ModifyInstanceSpecRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetInstanceId(v string) *ModifyInstanceSpecRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetInstanceSpec(v string) *ModifyInstanceSpecRequest {
	s.InstanceSpec = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetModifyAction(v string) *ModifyInstanceSpecRequest {
	s.ModifyAction = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetSkipWaitSwitch(v bool) *ModifyInstanceSpecRequest {
	s.SkipWaitSwitch = &v
	return s
}

func (s *ModifyInstanceSpecRequest) SetToken(v string) *ModifyInstanceSpecRequest {
	s.Token = &v
	return s
}

type ModifyInstanceSpecResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecResponseBody) SetRequestId(v string) *ModifyInstanceSpecResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceSpecResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyInstanceSpecResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceSpecResponse) SetHeaders(v map[string]*string) *ModifyInstanceSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceSpecResponse) SetStatusCode(v int32) *ModifyInstanceSpecResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceSpecResponse) SetBody(v *ModifyInstanceSpecResponseBody) *ModifyInstanceSpecResponse {
	s.Body = v
	return s
}

type ModifyIpControlRequest struct {
	// *   This operation is intended for API providers.
	// *   This operation allows you to modify only the name and description of an ACL. You cannot modify the type of the ACL.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The description. The description can be up to 200 characters in length.
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// The ID of the request.
	IpControlName *string `json:"IpControlName,omitempty" xml:"IpControlName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ModifyIpControlRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpControlRequest) GoString() string {
	return s.String()
}

func (s *ModifyIpControlRequest) SetDescription(v string) *ModifyIpControlRequest {
	s.Description = &v
	return s
}

func (s *ModifyIpControlRequest) SetIpControlId(v string) *ModifyIpControlRequest {
	s.IpControlId = &v
	return s
}

func (s *ModifyIpControlRequest) SetIpControlName(v string) *ModifyIpControlRequest {
	s.IpControlName = &v
	return s
}

func (s *ModifyIpControlRequest) SetSecurityToken(v string) *ModifyIpControlRequest {
	s.SecurityToken = &v
	return s
}

type ModifyIpControlResponseBody struct {
	// Modifies an access control list (ACL).
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyIpControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpControlResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyIpControlResponseBody) SetRequestId(v string) *ModifyIpControlResponseBody {
	s.RequestId = &v
	return s
}

type ModifyIpControlResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyIpControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyIpControlResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpControlResponse) GoString() string {
	return s.String()
}

func (s *ModifyIpControlResponse) SetHeaders(v map[string]*string) *ModifyIpControlResponse {
	s.Headers = v
	return s
}

func (s *ModifyIpControlResponse) SetStatusCode(v int32) *ModifyIpControlResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyIpControlResponse) SetBody(v *ModifyIpControlResponseBody) *ModifyIpControlResponse {
	s.Body = v
	return s
}

type ModifyIpControlPolicyItemRequest struct {
	// The ID of the request.
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// *   This operation is intended for API providers.
	// *   The modification immediately takes effect on all the APIs that are bound to the policy.
	// *   This operation causes a full modification of the content of a policy.
	CidrIp *string `json:"CidrIp,omitempty" xml:"CidrIp,omitempty"`
	// The ID of the application that is restricted by the policy. You can configure the AppId parameter only when the value of the IpControlType parameter is ALLOW.
	//
	// *   You can add only one application ID at a time.
	// *   If this parameter is empty, no applications are restricted.
	// *   If this parameter is not empty, not only IP addresses but also applications are restricted.
	// *   If this parameter is not empty and no security authentication method is specified for the API, all API calls are restricted.
	// *   If the value of the IpControlType parameter is REFUSE and the AppId parameter is not empty, API Gateway automatically ignores the AppId parameter and restricts only the IP addresses.
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// The IP address or CIDR block that is defined in a policy. Separate multiple IP addresses or CIDR blocks with semicolons (;). You can add a maximum of 10 IP addresses or CIDR blocks.
	PolicyItemId  *string `json:"PolicyItemId,omitempty" xml:"PolicyItemId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ModifyIpControlPolicyItemRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpControlPolicyItemRequest) GoString() string {
	return s.String()
}

func (s *ModifyIpControlPolicyItemRequest) SetAppId(v string) *ModifyIpControlPolicyItemRequest {
	s.AppId = &v
	return s
}

func (s *ModifyIpControlPolicyItemRequest) SetCidrIp(v string) *ModifyIpControlPolicyItemRequest {
	s.CidrIp = &v
	return s
}

func (s *ModifyIpControlPolicyItemRequest) SetIpControlId(v string) *ModifyIpControlPolicyItemRequest {
	s.IpControlId = &v
	return s
}

func (s *ModifyIpControlPolicyItemRequest) SetPolicyItemId(v string) *ModifyIpControlPolicyItemRequest {
	s.PolicyItemId = &v
	return s
}

func (s *ModifyIpControlPolicyItemRequest) SetSecurityToken(v string) *ModifyIpControlPolicyItemRequest {
	s.SecurityToken = &v
	return s
}

type ModifyIpControlPolicyItemResponseBody struct {
	// Modifies a policy in an access control list (ACL).
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyIpControlPolicyItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpControlPolicyItemResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyIpControlPolicyItemResponseBody) SetRequestId(v string) *ModifyIpControlPolicyItemResponseBody {
	s.RequestId = &v
	return s
}

type ModifyIpControlPolicyItemResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyIpControlPolicyItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyIpControlPolicyItemResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyIpControlPolicyItemResponse) GoString() string {
	return s.String()
}

func (s *ModifyIpControlPolicyItemResponse) SetHeaders(v map[string]*string) *ModifyIpControlPolicyItemResponse {
	s.Headers = v
	return s
}

func (s *ModifyIpControlPolicyItemResponse) SetStatusCode(v int32) *ModifyIpControlPolicyItemResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyIpControlPolicyItemResponse) SetBody(v *ModifyIpControlPolicyItemResponseBody) *ModifyIpControlPolicyItemResponse {
	s.Body = v
	return s
}

type ModifyLogConfigRequest struct {
	LogType       *string `json:"LogType,omitempty" xml:"LogType,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	SlsLogStore   *string `json:"SlsLogStore,omitempty" xml:"SlsLogStore,omitempty"`
	SlsProject    *string `json:"SlsProject,omitempty" xml:"SlsProject,omitempty"`
}

func (s ModifyLogConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyLogConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyLogConfigRequest) SetLogType(v string) *ModifyLogConfigRequest {
	s.LogType = &v
	return s
}

func (s *ModifyLogConfigRequest) SetSecurityToken(v string) *ModifyLogConfigRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyLogConfigRequest) SetSlsLogStore(v string) *ModifyLogConfigRequest {
	s.SlsLogStore = &v
	return s
}

func (s *ModifyLogConfigRequest) SetSlsProject(v string) *ModifyLogConfigRequest {
	s.SlsProject = &v
	return s
}

type ModifyLogConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyLogConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyLogConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyLogConfigResponseBody) SetRequestId(v string) *ModifyLogConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyLogConfigResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyLogConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyLogConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyLogConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyLogConfigResponse) SetHeaders(v map[string]*string) *ModifyLogConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyLogConfigResponse) SetStatusCode(v int32) *ModifyLogConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyLogConfigResponse) SetBody(v *ModifyLogConfigResponseBody) *ModifyLogConfigResponse {
	s.Body = v
	return s
}

type ModifyModelRequest struct {
	// The new definition of the model.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The new name of the model.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The description of the new model definition.
	ModelName *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	// The ID of the request.
	NewModelName *string `json:"NewModelName,omitempty" xml:"NewModelName,omitempty"`
	// The ID of the API group to which the model belongs.
	Schema *string `json:"Schema,omitempty" xml:"Schema,omitempty"`
}

func (s ModifyModelRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyModelRequest) GoString() string {
	return s.String()
}

func (s *ModifyModelRequest) SetDescription(v string) *ModifyModelRequest {
	s.Description = &v
	return s
}

func (s *ModifyModelRequest) SetGroupId(v string) *ModifyModelRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyModelRequest) SetModelName(v string) *ModifyModelRequest {
	s.ModelName = &v
	return s
}

func (s *ModifyModelRequest) SetNewModelName(v string) *ModifyModelRequest {
	s.NewModelName = &v
	return s
}

func (s *ModifyModelRequest) SetSchema(v string) *ModifyModelRequest {
	s.Schema = &v
	return s
}

type ModifyModelResponseBody struct {
	// Updates the model of an API group.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyModelResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyModelResponseBody) SetRequestId(v string) *ModifyModelResponseBody {
	s.RequestId = &v
	return s
}

type ModifyModelResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyModelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyModelResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyModelResponse) GoString() string {
	return s.String()
}

func (s *ModifyModelResponse) SetHeaders(v map[string]*string) *ModifyModelResponse {
	s.Headers = v
	return s
}

func (s *ModifyModelResponse) SetStatusCode(v int32) *ModifyModelResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyModelResponse) SetBody(v *ModifyModelResponseBody) *ModifyModelResponse {
	s.Body = v
	return s
}

type ModifyPluginRequest struct {
	Description   *string                   `json:"Description,omitempty" xml:"Description,omitempty"`
	PluginData    *string                   `json:"PluginData,omitempty" xml:"PluginData,omitempty"`
	PluginId      *string                   `json:"PluginId,omitempty" xml:"PluginId,omitempty"`
	PluginName    *string                   `json:"PluginName,omitempty" xml:"PluginName,omitempty"`
	SecurityToken *string                   `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag           []*ModifyPluginRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ModifyPluginRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPluginRequest) GoString() string {
	return s.String()
}

func (s *ModifyPluginRequest) SetDescription(v string) *ModifyPluginRequest {
	s.Description = &v
	return s
}

func (s *ModifyPluginRequest) SetPluginData(v string) *ModifyPluginRequest {
	s.PluginData = &v
	return s
}

func (s *ModifyPluginRequest) SetPluginId(v string) *ModifyPluginRequest {
	s.PluginId = &v
	return s
}

func (s *ModifyPluginRequest) SetPluginName(v string) *ModifyPluginRequest {
	s.PluginName = &v
	return s
}

func (s *ModifyPluginRequest) SetSecurityToken(v string) *ModifyPluginRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyPluginRequest) SetTag(v []*ModifyPluginRequestTag) *ModifyPluginRequest {
	s.Tag = v
	return s
}

type ModifyPluginRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyPluginRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ModifyPluginRequestTag) GoString() string {
	return s.String()
}

func (s *ModifyPluginRequestTag) SetKey(v string) *ModifyPluginRequestTag {
	s.Key = &v
	return s
}

func (s *ModifyPluginRequestTag) SetValue(v string) *ModifyPluginRequestTag {
	s.Value = &v
	return s
}

type ModifyPluginResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyPluginResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyPluginResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyPluginResponseBody) SetRequestId(v string) *ModifyPluginResponseBody {
	s.RequestId = &v
	return s
}

type ModifyPluginResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyPluginResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyPluginResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPluginResponse) GoString() string {
	return s.String()
}

func (s *ModifyPluginResponse) SetHeaders(v map[string]*string) *ModifyPluginResponse {
	s.Headers = v
	return s
}

func (s *ModifyPluginResponse) SetStatusCode(v int32) *ModifyPluginResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyPluginResponse) SetBody(v *ModifyPluginResponseBody) *ModifyPluginResponse {
	s.Body = v
	return s
}

type ModifySignatureRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The new Key value of the key. The value must be 6 to 20 characters in length and can contain letters, digits, and underscores (\_). It must start with a letter.
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// The ID of the request.
	SignatureKey *string `json:"SignatureKey,omitempty" xml:"SignatureKey,omitempty"`
	// The new Secret value of the key. The value must be 6 to 30 characters in length and can contain letters, digits, and special characters. Special characters include underscores (\_), at signs (@), number signs (#), exclamation points (!), and asterisks (\*). The value must start with a letter.
	SignatureName *string `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
	// The ID of the key.
	SignatureSecret *string `json:"SignatureSecret,omitempty" xml:"SignatureSecret,omitempty"`
}

func (s ModifySignatureRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySignatureRequest) GoString() string {
	return s.String()
}

func (s *ModifySignatureRequest) SetSecurityToken(v string) *ModifySignatureRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifySignatureRequest) SetSignatureId(v string) *ModifySignatureRequest {
	s.SignatureId = &v
	return s
}

func (s *ModifySignatureRequest) SetSignatureKey(v string) *ModifySignatureRequest {
	s.SignatureKey = &v
	return s
}

func (s *ModifySignatureRequest) SetSignatureName(v string) *ModifySignatureRequest {
	s.SignatureName = &v
	return s
}

func (s *ModifySignatureRequest) SetSignatureSecret(v string) *ModifySignatureRequest {
	s.SignatureSecret = &v
	return s
}

type ModifySignatureResponseBody struct {
	// The name of the key.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// *   This API is intended for API providers.
	// *   This API operation modifies the name, Key value, and Secret value of an existing signature key.
	// *   Note that the modification takes effect immediately. If the key has been bound to an API, you must adjust the backend signature verification based on the new key accordingly.
	// *   The QPS limit on this operation is 50 per user.
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// Modifies a backend signature key.
	SignatureName *string `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
}

func (s ModifySignatureResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySignatureResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySignatureResponseBody) SetRequestId(v string) *ModifySignatureResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySignatureResponseBody) SetSignatureId(v string) *ModifySignatureResponseBody {
	s.SignatureId = &v
	return s
}

func (s *ModifySignatureResponseBody) SetSignatureName(v string) *ModifySignatureResponseBody {
	s.SignatureName = &v
	return s
}

type ModifySignatureResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySignatureResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySignatureResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySignatureResponse) GoString() string {
	return s.String()
}

func (s *ModifySignatureResponse) SetHeaders(v map[string]*string) *ModifySignatureResponse {
	s.Headers = v
	return s
}

func (s *ModifySignatureResponse) SetStatusCode(v int32) *ModifySignatureResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySignatureResponse) SetBody(v *ModifySignatureResponseBody) *ModifySignatureResponse {
	s.Body = v
	return s
}

type ModifyTrafficControlRequest struct {
	// The default throttling value for each app.
	ApiDefault *int32 `json:"ApiDefault,omitempty" xml:"ApiDefault,omitempty"`
	// ThrottlingTestDescription
	AppDefault *int32 `json:"AppDefault,omitempty" xml:"AppDefault,omitempty"`
	// The ID of the request.
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// ThrottlingTest
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
	// The unit to be used in the throttling policy. Valid values:
	//
	// *   **SECOND**
	// *   **MINUTE**
	// *   **HOUR**
	// *   **DAY**
	TrafficControlName *string `json:"TrafficControlName,omitempty" xml:"TrafficControlName,omitempty"`
	// The default throttling value for each user.
	TrafficControlUnit *string `json:"TrafficControlUnit,omitempty" xml:"TrafficControlUnit,omitempty"`
	// The description of the throttling policy.
	UserDefault *int32 `json:"UserDefault,omitempty" xml:"UserDefault,omitempty"`
}

func (s ModifyTrafficControlRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTrafficControlRequest) GoString() string {
	return s.String()
}

func (s *ModifyTrafficControlRequest) SetApiDefault(v int32) *ModifyTrafficControlRequest {
	s.ApiDefault = &v
	return s
}

func (s *ModifyTrafficControlRequest) SetAppDefault(v int32) *ModifyTrafficControlRequest {
	s.AppDefault = &v
	return s
}

func (s *ModifyTrafficControlRequest) SetDescription(v string) *ModifyTrafficControlRequest {
	s.Description = &v
	return s
}

func (s *ModifyTrafficControlRequest) SetSecurityToken(v string) *ModifyTrafficControlRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyTrafficControlRequest) SetTrafficControlId(v string) *ModifyTrafficControlRequest {
	s.TrafficControlId = &v
	return s
}

func (s *ModifyTrafficControlRequest) SetTrafficControlName(v string) *ModifyTrafficControlRequest {
	s.TrafficControlName = &v
	return s
}

func (s *ModifyTrafficControlRequest) SetTrafficControlUnit(v string) *ModifyTrafficControlRequest {
	s.TrafficControlUnit = &v
	return s
}

func (s *ModifyTrafficControlRequest) SetUserDefault(v int32) *ModifyTrafficControlRequest {
	s.UserDefault = &v
	return s
}

type ModifyTrafficControlResponseBody struct {
	// Modifies the settings of a custom throttling policy.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyTrafficControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTrafficControlResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTrafficControlResponseBody) SetRequestId(v string) *ModifyTrafficControlResponseBody {
	s.RequestId = &v
	return s
}

type ModifyTrafficControlResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyTrafficControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyTrafficControlResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTrafficControlResponse) GoString() string {
	return s.String()
}

func (s *ModifyTrafficControlResponse) SetHeaders(v map[string]*string) *ModifyTrafficControlResponse {
	s.Headers = v
	return s
}

func (s *ModifyTrafficControlResponse) SetStatusCode(v int32) *ModifyTrafficControlResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTrafficControlResponse) SetBody(v *ModifyTrafficControlResponseBody) *ModifyTrafficControlResponse {
	s.Body = v
	return s
}

type ModifyVpcAccessAndUpdateApisRequest struct {
	// The ID of the new instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the VPC authorization.
	//
	// >
	//
	// *   The name of a VPC authorization cannot be changed. You cannot use this parameter to change the name of a VPC authorization.
	//
	// *   You must set this parameter to the name of the current VPC authorization.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Specifies whether to update the associated API.
	//
	// **
	//
	// **Warning:** If you want to update the VPC authorization of a published API, you must set this parameter to true. Otherwise, the update will not be synchronized to the backend service of the API.
	NeedBatchWork *bool `json:"NeedBatchWork,omitempty" xml:"NeedBatchWork,omitempty"`
	// The new port number.
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// Specifies whether to update the VPC authorization.
	//
	// >
	//
	// *   If the ID of the instance in your VPC is changed but the IP address of the instance remains unchanged, you can set this parameter to true to update the VPC authorization.
	Refresh       *bool   `json:"Refresh,omitempty" xml:"Refresh,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The token of the request.
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
	// The ID of the new VPC.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The hostname of the backend service.
	VpcTargetHostName *string `json:"VpcTargetHostName,omitempty" xml:"VpcTargetHostName,omitempty"`
}

func (s ModifyVpcAccessAndUpdateApisRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpcAccessAndUpdateApisRequest) GoString() string {
	return s.String()
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetInstanceId(v string) *ModifyVpcAccessAndUpdateApisRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetName(v string) *ModifyVpcAccessAndUpdateApisRequest {
	s.Name = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetNeedBatchWork(v bool) *ModifyVpcAccessAndUpdateApisRequest {
	s.NeedBatchWork = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetPort(v int32) *ModifyVpcAccessAndUpdateApisRequest {
	s.Port = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetRefresh(v bool) *ModifyVpcAccessAndUpdateApisRequest {
	s.Refresh = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetSecurityToken(v string) *ModifyVpcAccessAndUpdateApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetToken(v string) *ModifyVpcAccessAndUpdateApisRequest {
	s.Token = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetVpcId(v string) *ModifyVpcAccessAndUpdateApisRequest {
	s.VpcId = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisRequest) SetVpcTargetHostName(v string) *ModifyVpcAccessAndUpdateApisRequest {
	s.VpcTargetHostName = &v
	return s
}

type ModifyVpcAccessAndUpdateApisResponseBody struct {
	// The ID of the asynchronous task.
	//
	// >
	//
	// *   If the associated API is updated, you can use the task ID in the **DescribeUpdateVpcInfoTask** operation to query the update result.
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyVpcAccessAndUpdateApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpcAccessAndUpdateApisResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyVpcAccessAndUpdateApisResponseBody) SetOperationId(v string) *ModifyVpcAccessAndUpdateApisResponseBody {
	s.OperationId = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisResponseBody) SetRequestId(v string) *ModifyVpcAccessAndUpdateApisResponseBody {
	s.RequestId = &v
	return s
}

type ModifyVpcAccessAndUpdateApisResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyVpcAccessAndUpdateApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyVpcAccessAndUpdateApisResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVpcAccessAndUpdateApisResponse) GoString() string {
	return s.String()
}

func (s *ModifyVpcAccessAndUpdateApisResponse) SetHeaders(v map[string]*string) *ModifyVpcAccessAndUpdateApisResponse {
	s.Headers = v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisResponse) SetStatusCode(v int32) *ModifyVpcAccessAndUpdateApisResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyVpcAccessAndUpdateApisResponse) SetBody(v *ModifyVpcAccessAndUpdateApisResponseBody) *ModifyVpcAccessAndUpdateApisResponse {
	s.Body = v
	return s
}

type OpenApiGatewayServiceResponseBody struct {
	OrderId   *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OpenApiGatewayServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenApiGatewayServiceResponseBody) GoString() string {
	return s.String()
}

func (s *OpenApiGatewayServiceResponseBody) SetOrderId(v string) *OpenApiGatewayServiceResponseBody {
	s.OrderId = &v
	return s
}

func (s *OpenApiGatewayServiceResponseBody) SetRequestId(v string) *OpenApiGatewayServiceResponseBody {
	s.RequestId = &v
	return s
}

type OpenApiGatewayServiceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OpenApiGatewayServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OpenApiGatewayServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenApiGatewayServiceResponse) GoString() string {
	return s.String()
}

func (s *OpenApiGatewayServiceResponse) SetHeaders(v map[string]*string) *OpenApiGatewayServiceResponse {
	s.Headers = v
	return s
}

func (s *OpenApiGatewayServiceResponse) SetStatusCode(v int32) *OpenApiGatewayServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenApiGatewayServiceResponse) SetBody(v *OpenApiGatewayServiceResponseBody) *OpenApiGatewayServiceResponse {
	s.Body = v
	return s
}

type QueryRequestLogsRequest struct {
	// The ID of the request log.
	RequestLogId  *string `json:"RequestLogId,omitempty" xml:"RequestLogId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s QueryRequestLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRequestLogsRequest) GoString() string {
	return s.String()
}

func (s *QueryRequestLogsRequest) SetRequestLogId(v string) *QueryRequestLogsRequest {
	s.RequestLogId = &v
	return s
}

func (s *QueryRequestLogsRequest) SetSecurityToken(v string) *QueryRequestLogsRequest {
	s.SecurityToken = &v
	return s
}

type QueryRequestLogsResponseBody struct {
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The list of request logs.
	RequestLogs *QueryRequestLogsResponseBodyRequestLogs `json:"RequestLogs,omitempty" xml:"RequestLogs,omitempty" type:"Struct"`
}

func (s QueryRequestLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryRequestLogsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryRequestLogsResponseBody) SetRequestId(v string) *QueryRequestLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryRequestLogsResponseBody) SetRequestLogs(v *QueryRequestLogsResponseBodyRequestLogs) *QueryRequestLogsResponseBody {
	s.RequestLogs = v
	return s
}

type QueryRequestLogsResponseBodyRequestLogs struct {
	RequestLog []*QueryRequestLogsResponseBodyRequestLogsRequestLog `json:"RequestLog,omitempty" xml:"RequestLog,omitempty" type:"Repeated"`
}

func (s QueryRequestLogsResponseBodyRequestLogs) String() string {
	return tea.Prettify(s)
}

func (s QueryRequestLogsResponseBodyRequestLogs) GoString() string {
	return s.String()
}

func (s *QueryRequestLogsResponseBodyRequestLogs) SetRequestLog(v []*QueryRequestLogsResponseBodyRequestLogsRequestLog) *QueryRequestLogsResponseBodyRequestLogs {
	s.RequestLog = v
	return s
}

type QueryRequestLogsResponseBodyRequestLogsRequestLog struct {
	// The ID of the API.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The name of the API
	ApiName              *string `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	AppName              *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BackendRequestEnd    *int64  `json:"BackendRequestEnd,omitempty" xml:"BackendRequestEnd,omitempty"`
	BackendRequestStart  *int64  `json:"BackendRequestStart,omitempty" xml:"BackendRequestStart,omitempty"`
	BackendResponseEnd   *int64  `json:"BackendResponseEnd,omitempty" xml:"BackendResponseEnd,omitempty"`
	BackendResponseStart *int64  `json:"BackendResponseStart,omitempty" xml:"BackendResponseStart,omitempty"`
	// The IP address of the client that sends the request.
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// The X-Ca-Nonce header included in the request from the client.
	ClientNonce *string `json:"ClientNonce,omitempty" xml:"ClientNonce,omitempty"`
	// The ID of the application from which an API request is sent.
	ConsumerAppId *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty"`
	// The application key used by the caller.
	ConsumerAppKey *string `json:"ConsumerAppKey,omitempty" xml:"ConsumerAppKey,omitempty"`
	// The ID of the custom trace.
	CustomTraceId *string `json:"CustomTraceId,omitempty" xml:"CustomTraceId,omitempty"`
	// The domain name of the request.
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// The error code returned if the request failed.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message returned if the request fails.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The specific error message returned by the backend service.
	Exception          *string `json:"Exception,omitempty" xml:"Exception,omitempty"`
	FrontRequestEnd    *int64  `json:"FrontRequestEnd,omitempty" xml:"FrontRequestEnd,omitempty"`
	FrontRequestStart  *int64  `json:"FrontRequestStart,omitempty" xml:"FrontRequestStart,omitempty"`
	FrontResponseEnd   *int64  `json:"FrontResponseEnd,omitempty" xml:"FrontResponseEnd,omitempty"`
	FrontResponseStart *int64  `json:"FrontResponseStart,omitempty" xml:"FrontResponseStart,omitempty"`
	// The ID of the API group to which the API belongs.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the API group to which the API belongs.
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The HTTP method used to send the request.
	HttpMethod *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	// The path of the request.
	HttpPath *string `json:"HttpPath,omitempty" xml:"HttpPath,omitempty"`
	// The initial request ID when API Gateway calls an API. For example, if API-1 calls API-2, the initialRequestId parameter in the log of API-2 indicates the ID of the request from API-1.
	InitialRequestId *string `json:"InitialRequestId,omitempty" xml:"InitialRequestId,omitempty"`
	// The ID of the API Gateway instance to which the API belongs.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The JSON web token (JWT) claims. The claims can be configured at the group level.
	JwtClaims *string `json:"JwtClaims,omitempty" xml:"JwtClaims,omitempty"`
	// The ID of the region.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The request body. A request body cannot exceed 1,024 bytes in size.
	RequestBody *string `json:"RequestBody,omitempty" xml:"RequestBody,omitempty"`
	// The request headers.
	RequestHeaders *string `json:"RequestHeaders,omitempty" xml:"RequestHeaders,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The protocol used by the client to send the request. Valid values: HTTP, HTTPS, and WS.
	RequestProtocol *string `json:"RequestProtocol,omitempty" xml:"RequestProtocol,omitempty"`
	// The query string for the request.
	RequestQueryString *string `json:"RequestQueryString,omitempty" xml:"RequestQueryString,omitempty"`
	// The size of the request. Unit: bytes.
	RequestSize *string `json:"RequestSize,omitempty" xml:"RequestSize,omitempty"`
	// The request time, in UTC.
	RequestTime *string `json:"RequestTime,omitempty" xml:"RequestTime,omitempty"`
	// The response body. A response body cannot exceed 1,024 bytes in size.
	ResponseBody *string `json:"ResponseBody,omitempty" xml:"ResponseBody,omitempty"`
	// The headers in the API response.
	ResponseHeaders *string `json:"ResponseHeaders,omitempty" xml:"ResponseHeaders,omitempty"`
	// The size of returned data. Unit: bytes.
	ResponseSize *string `json:"ResponseSize,omitempty" xml:"ResponseSize,omitempty"`
	// The total time consumed to access backend resources. The total time includes the time consumed to request a connection to the resources, the time consumed to establish the connection, and the time consumed to call the backend service. Unit: milliseconds.
	ServiceLatency *string `json:"ServiceLatency,omitempty" xml:"ServiceLatency,omitempty"`
	// The ID of the API environment.
	StageId *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
	// The name of the API environment.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The HTTP status code.
	StatusCode *string `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
	// The total time consumed by the request. Unit: milliseconds.
	TotalLatency *string `json:"TotalLatency,omitempty" xml:"TotalLatency,omitempty"`
	// The list of plug-ins hit by the request and the relevant context.
	Plugin *string `json:"plugin,omitempty" xml:"plugin,omitempty"`
}

func (s QueryRequestLogsResponseBodyRequestLogsRequestLog) String() string {
	return tea.Prettify(s)
}

func (s QueryRequestLogsResponseBodyRequestLogsRequestLog) GoString() string {
	return s.String()
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetApiId(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ApiId = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetApiName(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ApiName = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetAppName(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.AppName = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetBackendRequestEnd(v int64) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.BackendRequestEnd = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetBackendRequestStart(v int64) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.BackendRequestStart = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetBackendResponseEnd(v int64) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.BackendResponseEnd = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetBackendResponseStart(v int64) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.BackendResponseStart = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetClientIp(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ClientIp = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetClientNonce(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ClientNonce = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetConsumerAppId(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ConsumerAppId = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetConsumerAppKey(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ConsumerAppKey = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetCustomTraceId(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.CustomTraceId = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetDomain(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.Domain = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetErrorCode(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ErrorCode = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetErrorMessage(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ErrorMessage = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetException(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.Exception = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetFrontRequestEnd(v int64) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.FrontRequestEnd = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetFrontRequestStart(v int64) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.FrontRequestStart = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetFrontResponseEnd(v int64) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.FrontResponseEnd = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetFrontResponseStart(v int64) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.FrontResponseStart = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetGroupId(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.GroupId = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetGroupName(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.GroupName = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetHttpMethod(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.HttpMethod = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetHttpPath(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.HttpPath = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetInitialRequestId(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.InitialRequestId = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetInstanceId(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.InstanceId = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetJwtClaims(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.JwtClaims = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetRegion(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.Region = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetRequestBody(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.RequestBody = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetRequestHeaders(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.RequestHeaders = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetRequestId(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.RequestId = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetRequestProtocol(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.RequestProtocol = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetRequestQueryString(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.RequestQueryString = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetRequestSize(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.RequestSize = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetRequestTime(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.RequestTime = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetResponseBody(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ResponseBody = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetResponseHeaders(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ResponseHeaders = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetResponseSize(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ResponseSize = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetServiceLatency(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.ServiceLatency = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetStageId(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.StageId = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetStageName(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.StageName = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetStatusCode(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.StatusCode = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetTotalLatency(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.TotalLatency = &v
	return s
}

func (s *QueryRequestLogsResponseBodyRequestLogsRequestLog) SetPlugin(v string) *QueryRequestLogsResponseBodyRequestLogsRequestLog {
	s.Plugin = &v
	return s
}

type QueryRequestLogsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryRequestLogsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryRequestLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRequestLogsResponse) GoString() string {
	return s.String()
}

func (s *QueryRequestLogsResponse) SetHeaders(v map[string]*string) *QueryRequestLogsResponse {
	s.Headers = v
	return s
}

func (s *QueryRequestLogsResponse) SetStatusCode(v int32) *QueryRequestLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryRequestLogsResponse) SetBody(v *QueryRequestLogsResponseBody) *QueryRequestLogsResponse {
	s.Body = v
	return s
}

type ReactivateDomainRequest struct {
	// *   This operation is intended for API providers.
	// *   You must solve the problem that is mentioned in the domain name exception prompt before you can reactivate the domain name.
	// *   A typical reason why a custom domain name becomes abnormal is that the domain name does not have an ICP filing or the domain name is included in a blacklist by the administration. When a custom domain name is abnormal, users cannot use it to access APIs.
	// *   You can call this operation to reactivate the domain name to resume normal access.
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The ID of the request.
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ReactivateDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s ReactivateDomainRequest) GoString() string {
	return s.String()
}

func (s *ReactivateDomainRequest) SetDomainName(v string) *ReactivateDomainRequest {
	s.DomainName = &v
	return s
}

func (s *ReactivateDomainRequest) SetGroupId(v string) *ReactivateDomainRequest {
	s.GroupId = &v
	return s
}

func (s *ReactivateDomainRequest) SetSecurityToken(v string) *ReactivateDomainRequest {
	s.SecurityToken = &v
	return s
}

type ReactivateDomainResponseBody struct {
	// Reactivates a custom domain name whose validity status is Abnormal.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReactivateDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReactivateDomainResponseBody) GoString() string {
	return s.String()
}

func (s *ReactivateDomainResponseBody) SetRequestId(v string) *ReactivateDomainResponseBody {
	s.RequestId = &v
	return s
}

type ReactivateDomainResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ReactivateDomainResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReactivateDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s ReactivateDomainResponse) GoString() string {
	return s.String()
}

func (s *ReactivateDomainResponse) SetHeaders(v map[string]*string) *ReactivateDomainResponse {
	s.Headers = v
	return s
}

func (s *ReactivateDomainResponse) SetStatusCode(v int32) *ReactivateDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *ReactivateDomainResponse) SetBody(v *ReactivateDomainResponseBody) *ReactivateDomainResponse {
	s.Body = v
	return s
}

type RemoveAccessControlListEntryRequest struct {
	AclEntrys     *string `json:"AclEntrys,omitempty" xml:"AclEntrys,omitempty"`
	AclId         *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s RemoveAccessControlListEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveAccessControlListEntryRequest) GoString() string {
	return s.String()
}

func (s *RemoveAccessControlListEntryRequest) SetAclEntrys(v string) *RemoveAccessControlListEntryRequest {
	s.AclEntrys = &v
	return s
}

func (s *RemoveAccessControlListEntryRequest) SetAclId(v string) *RemoveAccessControlListEntryRequest {
	s.AclId = &v
	return s
}

func (s *RemoveAccessControlListEntryRequest) SetSecurityToken(v string) *RemoveAccessControlListEntryRequest {
	s.SecurityToken = &v
	return s
}

type RemoveAccessControlListEntryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveAccessControlListEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveAccessControlListEntryResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveAccessControlListEntryResponseBody) SetRequestId(v string) *RemoveAccessControlListEntryResponseBody {
	s.RequestId = &v
	return s
}

type RemoveAccessControlListEntryResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemoveAccessControlListEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveAccessControlListEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveAccessControlListEntryResponse) GoString() string {
	return s.String()
}

func (s *RemoveAccessControlListEntryResponse) SetHeaders(v map[string]*string) *RemoveAccessControlListEntryResponse {
	s.Headers = v
	return s
}

func (s *RemoveAccessControlListEntryResponse) SetStatusCode(v int32) *RemoveAccessControlListEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveAccessControlListEntryResponse) SetBody(v *RemoveAccessControlListEntryResponseBody) *RemoveAccessControlListEntryResponse {
	s.Body = v
	return s
}

type RemoveApisAuthoritiesRequest struct {
	// Queries weather based on the region name
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the request.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **TEST**
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The description of the authorization.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s RemoveApisAuthoritiesRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveApisAuthoritiesRequest) GoString() string {
	return s.String()
}

func (s *RemoveApisAuthoritiesRequest) SetApiIds(v string) *RemoveApisAuthoritiesRequest {
	s.ApiIds = &v
	return s
}

func (s *RemoveApisAuthoritiesRequest) SetAppId(v int64) *RemoveApisAuthoritiesRequest {
	s.AppId = &v
	return s
}

func (s *RemoveApisAuthoritiesRequest) SetDescription(v string) *RemoveApisAuthoritiesRequest {
	s.Description = &v
	return s
}

func (s *RemoveApisAuthoritiesRequest) SetGroupId(v string) *RemoveApisAuthoritiesRequest {
	s.GroupId = &v
	return s
}

func (s *RemoveApisAuthoritiesRequest) SetSecurityToken(v string) *RemoveApisAuthoritiesRequest {
	s.SecurityToken = &v
	return s
}

func (s *RemoveApisAuthoritiesRequest) SetStageName(v string) *RemoveApisAuthoritiesRequest {
	s.StageName = &v
	return s
}

type RemoveApisAuthoritiesResponseBody struct {
	// Revokes the access permissions on multiple APIs from a specified app.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveApisAuthoritiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveApisAuthoritiesResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveApisAuthoritiesResponseBody) SetRequestId(v string) *RemoveApisAuthoritiesResponseBody {
	s.RequestId = &v
	return s
}

type RemoveApisAuthoritiesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemoveApisAuthoritiesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveApisAuthoritiesResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveApisAuthoritiesResponse) GoString() string {
	return s.String()
}

func (s *RemoveApisAuthoritiesResponse) SetHeaders(v map[string]*string) *RemoveApisAuthoritiesResponse {
	s.Headers = v
	return s
}

func (s *RemoveApisAuthoritiesResponse) SetStatusCode(v int32) *RemoveApisAuthoritiesResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveApisAuthoritiesResponse) SetBody(v *RemoveApisAuthoritiesResponseBody) *RemoveApisAuthoritiesResponse {
	s.Body = v
	return s
}

type RemoveAppsAuthoritiesRequest struct {
	// The IDs of applications. Separate multiple application IDs with commas (,). A maximum of 100 applications IDs can be entered.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// *   This operation is intended for API providers and callers.
	// *   Before you revoke access permissions, check by whom the permissions were granted. API providers can only revoke permissions granted by a Provider, and API callers can only revoke permissions granted by a Consumer.
	AppIds *string `json:"AppIds,omitempty" xml:"AppIds,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **TEST**
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The ID of the request.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s RemoveAppsAuthoritiesRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveAppsAuthoritiesRequest) GoString() string {
	return s.String()
}

func (s *RemoveAppsAuthoritiesRequest) SetApiId(v string) *RemoveAppsAuthoritiesRequest {
	s.ApiId = &v
	return s
}

func (s *RemoveAppsAuthoritiesRequest) SetAppIds(v string) *RemoveAppsAuthoritiesRequest {
	s.AppIds = &v
	return s
}

func (s *RemoveAppsAuthoritiesRequest) SetGroupId(v string) *RemoveAppsAuthoritiesRequest {
	s.GroupId = &v
	return s
}

func (s *RemoveAppsAuthoritiesRequest) SetSecurityToken(v string) *RemoveAppsAuthoritiesRequest {
	s.SecurityToken = &v
	return s
}

func (s *RemoveAppsAuthoritiesRequest) SetStageName(v string) *RemoveAppsAuthoritiesRequest {
	s.StageName = &v
	return s
}

type RemoveAppsAuthoritiesResponseBody struct {
	// Revokes the access permissions on a specified API from multiple applications. In this case, multiple applications map to a single API.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveAppsAuthoritiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveAppsAuthoritiesResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveAppsAuthoritiesResponseBody) SetRequestId(v string) *RemoveAppsAuthoritiesResponseBody {
	s.RequestId = &v
	return s
}

type RemoveAppsAuthoritiesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemoveAppsAuthoritiesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveAppsAuthoritiesResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveAppsAuthoritiesResponse) GoString() string {
	return s.String()
}

func (s *RemoveAppsAuthoritiesResponse) SetHeaders(v map[string]*string) *RemoveAppsAuthoritiesResponse {
	s.Headers = v
	return s
}

func (s *RemoveAppsAuthoritiesResponse) SetStatusCode(v int32) *RemoveAppsAuthoritiesResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveAppsAuthoritiesResponse) SetBody(v *RemoveAppsAuthoritiesResponseBody) *RemoveAppsAuthoritiesResponse {
	s.Body = v
	return s
}

type RemoveIpControlApisRequest struct {
	// The ID of the request.
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **TEST**
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the API to be managed.
	//
	// *   If this parameter is not specified, all APIs of the API group are unbound in the specified environment by default.
	// *   The IDs of the APIs that you want to query. Separate multiple IDs with commas (,). A maximum of 100 IDs can be entered.
	IpControlId   *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// *   This API is intended for API providers.
	// *   The unbinding takes effect immediately. After the API is unbound from the ACL, the corresponding environment does not have any IP address access control in place for the API.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s RemoveIpControlApisRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveIpControlApisRequest) GoString() string {
	return s.String()
}

func (s *RemoveIpControlApisRequest) SetApiIds(v string) *RemoveIpControlApisRequest {
	s.ApiIds = &v
	return s
}

func (s *RemoveIpControlApisRequest) SetGroupId(v string) *RemoveIpControlApisRequest {
	s.GroupId = &v
	return s
}

func (s *RemoveIpControlApisRequest) SetIpControlId(v string) *RemoveIpControlApisRequest {
	s.IpControlId = &v
	return s
}

func (s *RemoveIpControlApisRequest) SetSecurityToken(v string) *RemoveIpControlApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *RemoveIpControlApisRequest) SetStageName(v string) *RemoveIpControlApisRequest {
	s.StageName = &v
	return s
}

type RemoveIpControlApisResponseBody struct {
	// Unbinds an API from an access control list (ACL).
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveIpControlApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveIpControlApisResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveIpControlApisResponseBody) SetRequestId(v string) *RemoveIpControlApisResponseBody {
	s.RequestId = &v
	return s
}

type RemoveIpControlApisResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemoveIpControlApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveIpControlApisResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveIpControlApisResponse) GoString() string {
	return s.String()
}

func (s *RemoveIpControlApisResponse) SetHeaders(v map[string]*string) *RemoveIpControlApisResponse {
	s.Headers = v
	return s
}

func (s *RemoveIpControlApisResponse) SetStatusCode(v int32) *RemoveIpControlApisResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveIpControlApisResponse) SetBody(v *RemoveIpControlApisResponseBody) *RemoveIpControlApisResponse {
	s.Body = v
	return s
}

type RemoveIpControlPolicyItemRequest struct {
	// The ID of the request.
	IpControlId *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	// *   This operation is intended for API providers.
	PolicyItemIds *string `json:"PolicyItemIds,omitempty" xml:"PolicyItemIds,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s RemoveIpControlPolicyItemRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveIpControlPolicyItemRequest) GoString() string {
	return s.String()
}

func (s *RemoveIpControlPolicyItemRequest) SetIpControlId(v string) *RemoveIpControlPolicyItemRequest {
	s.IpControlId = &v
	return s
}

func (s *RemoveIpControlPolicyItemRequest) SetPolicyItemIds(v string) *RemoveIpControlPolicyItemRequest {
	s.PolicyItemIds = &v
	return s
}

func (s *RemoveIpControlPolicyItemRequest) SetSecurityToken(v string) *RemoveIpControlPolicyItemRequest {
	s.SecurityToken = &v
	return s
}

type RemoveIpControlPolicyItemResponseBody struct {
	// Removes one or more policies from an access control list (ACL).
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveIpControlPolicyItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveIpControlPolicyItemResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveIpControlPolicyItemResponseBody) SetRequestId(v string) *RemoveIpControlPolicyItemResponseBody {
	s.RequestId = &v
	return s
}

type RemoveIpControlPolicyItemResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemoveIpControlPolicyItemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveIpControlPolicyItemResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveIpControlPolicyItemResponse) GoString() string {
	return s.String()
}

func (s *RemoveIpControlPolicyItemResponse) SetHeaders(v map[string]*string) *RemoveIpControlPolicyItemResponse {
	s.Headers = v
	return s
}

func (s *RemoveIpControlPolicyItemResponse) SetStatusCode(v int32) *RemoveIpControlPolicyItemResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveIpControlPolicyItemResponse) SetBody(v *RemoveIpControlPolicyItemResponseBody) *RemoveIpControlPolicyItemResponse {
	s.Body = v
	return s
}

type RemoveSignatureApisRequest struct {
	// The ID of the request.
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **TEST**
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The IDs of the APIs from which you want to unbind the signature key.
	//
	// *   If this parameter is not specified, the signature key is unbound from all the APIs in the specified environment of the API group.
	// *   The IDs of the APIs that you want to manage. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// *   This API is intended for API providers.
	// *   The operation takes effect immediately. The request sent from API Gateway to the backend service does not contain the signature string. The corresponding verification step can be removed from the backend.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s RemoveSignatureApisRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveSignatureApisRequest) GoString() string {
	return s.String()
}

func (s *RemoveSignatureApisRequest) SetApiIds(v string) *RemoveSignatureApisRequest {
	s.ApiIds = &v
	return s
}

func (s *RemoveSignatureApisRequest) SetGroupId(v string) *RemoveSignatureApisRequest {
	s.GroupId = &v
	return s
}

func (s *RemoveSignatureApisRequest) SetSecurityToken(v string) *RemoveSignatureApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *RemoveSignatureApisRequest) SetSignatureId(v string) *RemoveSignatureApisRequest {
	s.SignatureId = &v
	return s
}

func (s *RemoveSignatureApisRequest) SetStageName(v string) *RemoveSignatureApisRequest {
	s.StageName = &v
	return s
}

type RemoveSignatureApisResponseBody struct {
	// Unbinds a backend signature key from APIs.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveSignatureApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveSignatureApisResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveSignatureApisResponseBody) SetRequestId(v string) *RemoveSignatureApisResponseBody {
	s.RequestId = &v
	return s
}

type RemoveSignatureApisResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemoveSignatureApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveSignatureApisResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveSignatureApisResponse) GoString() string {
	return s.String()
}

func (s *RemoveSignatureApisResponse) SetHeaders(v map[string]*string) *RemoveSignatureApisResponse {
	s.Headers = v
	return s
}

func (s *RemoveSignatureApisResponse) SetStatusCode(v int32) *RemoveSignatureApisResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveSignatureApisResponse) SetBody(v *RemoveSignatureApisResponseBody) *RemoveSignatureApisResponse {
	s.Body = v
	return s
}

type RemoveTrafficControlApisRequest struct {
	// The ID of the request.
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **TEST**
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// *   This API is intended for API providers.
	// *   This API allows you to unbind a specified throttling policy from up to 100 APIs at a time.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The IDs of the APIs from which you want to unbind a specified throttling policy.
	//
	// *   If this parameter is not specified, the throttling policy is unbound from all the APIs in the specified environment of the API group.
	// *   Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
}

func (s RemoveTrafficControlApisRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveTrafficControlApisRequest) GoString() string {
	return s.String()
}

func (s *RemoveTrafficControlApisRequest) SetApiIds(v string) *RemoveTrafficControlApisRequest {
	s.ApiIds = &v
	return s
}

func (s *RemoveTrafficControlApisRequest) SetGroupId(v string) *RemoveTrafficControlApisRequest {
	s.GroupId = &v
	return s
}

func (s *RemoveTrafficControlApisRequest) SetSecurityToken(v string) *RemoveTrafficControlApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *RemoveTrafficControlApisRequest) SetStageName(v string) *RemoveTrafficControlApisRequest {
	s.StageName = &v
	return s
}

func (s *RemoveTrafficControlApisRequest) SetTrafficControlId(v string) *RemoveTrafficControlApisRequest {
	s.TrafficControlId = &v
	return s
}

type RemoveTrafficControlApisResponseBody struct {
	// Unbinds a specified throttling policy from APIs.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveTrafficControlApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveTrafficControlApisResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveTrafficControlApisResponseBody) SetRequestId(v string) *RemoveTrafficControlApisResponseBody {
	s.RequestId = &v
	return s
}

type RemoveTrafficControlApisResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemoveTrafficControlApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveTrafficControlApisResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveTrafficControlApisResponse) GoString() string {
	return s.String()
}

func (s *RemoveTrafficControlApisResponse) SetHeaders(v map[string]*string) *RemoveTrafficControlApisResponse {
	s.Headers = v
	return s
}

func (s *RemoveTrafficControlApisResponse) SetStatusCode(v int32) *RemoveTrafficControlApisResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveTrafficControlApisResponse) SetBody(v *RemoveTrafficControlApisResponseBody) *RemoveTrafficControlApisResponse {
	s.Body = v
	return s
}

type RemoveVpcAccessRequest struct {
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NeedBatchWork *bool   `json:"NeedBatchWork,omitempty" xml:"NeedBatchWork,omitempty"`
	Port          *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s RemoveVpcAccessRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveVpcAccessRequest) GoString() string {
	return s.String()
}

func (s *RemoveVpcAccessRequest) SetInstanceId(v string) *RemoveVpcAccessRequest {
	s.InstanceId = &v
	return s
}

func (s *RemoveVpcAccessRequest) SetNeedBatchWork(v bool) *RemoveVpcAccessRequest {
	s.NeedBatchWork = &v
	return s
}

func (s *RemoveVpcAccessRequest) SetPort(v int32) *RemoveVpcAccessRequest {
	s.Port = &v
	return s
}

func (s *RemoveVpcAccessRequest) SetSecurityToken(v string) *RemoveVpcAccessRequest {
	s.SecurityToken = &v
	return s
}

func (s *RemoveVpcAccessRequest) SetVpcId(v string) *RemoveVpcAccessRequest {
	s.VpcId = &v
	return s
}

type RemoveVpcAccessResponseBody struct {
	Apis      *RemoveVpcAccessResponseBodyApis `json:"Apis,omitempty" xml:"Apis,omitempty" type:"Struct"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveVpcAccessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveVpcAccessResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveVpcAccessResponseBody) SetApis(v *RemoveVpcAccessResponseBodyApis) *RemoveVpcAccessResponseBody {
	s.Apis = v
	return s
}

func (s *RemoveVpcAccessResponseBody) SetRequestId(v string) *RemoveVpcAccessResponseBody {
	s.RequestId = &v
	return s
}

type RemoveVpcAccessResponseBodyApis struct {
	Api []*RemoveVpcAccessResponseBodyApisApi `json:"Api,omitempty" xml:"Api,omitempty" type:"Repeated"`
}

func (s RemoveVpcAccessResponseBodyApis) String() string {
	return tea.Prettify(s)
}

func (s RemoveVpcAccessResponseBodyApis) GoString() string {
	return s.String()
}

func (s *RemoveVpcAccessResponseBodyApis) SetApi(v []*RemoveVpcAccessResponseBodyApisApi) *RemoveVpcAccessResponseBodyApis {
	s.Api = v
	return s
}

type RemoveVpcAccessResponseBodyApisApi struct {
	// API Id
	ApiId   *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	StageId *string `json:"StageId,omitempty" xml:"StageId,omitempty"`
}

func (s RemoveVpcAccessResponseBodyApisApi) String() string {
	return tea.Prettify(s)
}

func (s RemoveVpcAccessResponseBodyApisApi) GoString() string {
	return s.String()
}

func (s *RemoveVpcAccessResponseBodyApisApi) SetApiId(v string) *RemoveVpcAccessResponseBodyApisApi {
	s.ApiId = &v
	return s
}

func (s *RemoveVpcAccessResponseBodyApisApi) SetGroupId(v string) *RemoveVpcAccessResponseBodyApisApi {
	s.GroupId = &v
	return s
}

func (s *RemoveVpcAccessResponseBodyApisApi) SetStageId(v string) *RemoveVpcAccessResponseBodyApisApi {
	s.StageId = &v
	return s
}

type RemoveVpcAccessResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemoveVpcAccessResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveVpcAccessResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveVpcAccessResponse) GoString() string {
	return s.String()
}

func (s *RemoveVpcAccessResponse) SetHeaders(v map[string]*string) *RemoveVpcAccessResponse {
	s.Headers = v
	return s
}

func (s *RemoveVpcAccessResponse) SetStatusCode(v int32) *RemoveVpcAccessResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveVpcAccessResponse) SetBody(v *RemoveVpcAccessResponseBody) *RemoveVpcAccessResponse {
	s.Body = v
	return s
}

type RemoveVpcAccessAndAbolishApisRequest struct {
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NeedBatchWork *bool   `json:"NeedBatchWork,omitempty" xml:"NeedBatchWork,omitempty"`
	Port          *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s RemoveVpcAccessAndAbolishApisRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveVpcAccessAndAbolishApisRequest) GoString() string {
	return s.String()
}

func (s *RemoveVpcAccessAndAbolishApisRequest) SetInstanceId(v string) *RemoveVpcAccessAndAbolishApisRequest {
	s.InstanceId = &v
	return s
}

func (s *RemoveVpcAccessAndAbolishApisRequest) SetNeedBatchWork(v bool) *RemoveVpcAccessAndAbolishApisRequest {
	s.NeedBatchWork = &v
	return s
}

func (s *RemoveVpcAccessAndAbolishApisRequest) SetPort(v int32) *RemoveVpcAccessAndAbolishApisRequest {
	s.Port = &v
	return s
}

func (s *RemoveVpcAccessAndAbolishApisRequest) SetSecurityToken(v string) *RemoveVpcAccessAndAbolishApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *RemoveVpcAccessAndAbolishApisRequest) SetVpcId(v string) *RemoveVpcAccessAndAbolishApisRequest {
	s.VpcId = &v
	return s
}

type RemoveVpcAccessAndAbolishApisResponseBody struct {
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveVpcAccessAndAbolishApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveVpcAccessAndAbolishApisResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveVpcAccessAndAbolishApisResponseBody) SetOperationId(v string) *RemoveVpcAccessAndAbolishApisResponseBody {
	s.OperationId = &v
	return s
}

func (s *RemoveVpcAccessAndAbolishApisResponseBody) SetRequestId(v string) *RemoveVpcAccessAndAbolishApisResponseBody {
	s.RequestId = &v
	return s
}

type RemoveVpcAccessAndAbolishApisResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemoveVpcAccessAndAbolishApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveVpcAccessAndAbolishApisResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveVpcAccessAndAbolishApisResponse) GoString() string {
	return s.String()
}

func (s *RemoveVpcAccessAndAbolishApisResponse) SetHeaders(v map[string]*string) *RemoveVpcAccessAndAbolishApisResponse {
	s.Headers = v
	return s
}

func (s *RemoveVpcAccessAndAbolishApisResponse) SetStatusCode(v int32) *RemoveVpcAccessAndAbolishApisResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveVpcAccessAndAbolishApisResponse) SetBody(v *RemoveVpcAccessAndAbolishApisResponseBody) *RemoveVpcAccessAndAbolishApisResponse {
	s.Body = v
	return s
}

type ResetAppCodeRequest struct {
	// The current AppCode of the application.
	AppCode *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	// The new AppCode of the application.
	NewAppCode    *string `json:"NewAppCode,omitempty" xml:"NewAppCode,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ResetAppCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetAppCodeRequest) GoString() string {
	return s.String()
}

func (s *ResetAppCodeRequest) SetAppCode(v string) *ResetAppCodeRequest {
	s.AppCode = &v
	return s
}

func (s *ResetAppCodeRequest) SetNewAppCode(v string) *ResetAppCodeRequest {
	s.NewAppCode = &v
	return s
}

func (s *ResetAppCodeRequest) SetSecurityToken(v string) *ResetAppCodeRequest {
	s.SecurityToken = &v
	return s
}

type ResetAppCodeResponseBody struct {
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetAppCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetAppCodeResponseBody) GoString() string {
	return s.String()
}

func (s *ResetAppCodeResponseBody) SetRequestId(v string) *ResetAppCodeResponseBody {
	s.RequestId = &v
	return s
}

type ResetAppCodeResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ResetAppCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResetAppCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetAppCodeResponse) GoString() string {
	return s.String()
}

func (s *ResetAppCodeResponse) SetHeaders(v map[string]*string) *ResetAppCodeResponse {
	s.Headers = v
	return s
}

func (s *ResetAppCodeResponse) SetStatusCode(v int32) *ResetAppCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetAppCodeResponse) SetBody(v *ResetAppCodeResponseBody) *ResetAppCodeResponse {
	s.Body = v
	return s
}

type ResetAppSecretRequest struct {
	// The key of the application that is used to make an API call.
	AppKey    *string `json:"AppKey,omitempty" xml:"AppKey,omitempty"`
	NewAppKey *string `json:"NewAppKey,omitempty" xml:"NewAppKey,omitempty"`
	// The new key of the application. To improve compatibility, we recommend that you use other parameters.
	NewAppSecret  *string `json:"NewAppSecret,omitempty" xml:"NewAppSecret,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s ResetAppSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetAppSecretRequest) GoString() string {
	return s.String()
}

func (s *ResetAppSecretRequest) SetAppKey(v string) *ResetAppSecretRequest {
	s.AppKey = &v
	return s
}

func (s *ResetAppSecretRequest) SetNewAppKey(v string) *ResetAppSecretRequest {
	s.NewAppKey = &v
	return s
}

func (s *ResetAppSecretRequest) SetNewAppSecret(v string) *ResetAppSecretRequest {
	s.NewAppSecret = &v
	return s
}

func (s *ResetAppSecretRequest) SetSecurityToken(v string) *ResetAppSecretRequest {
	s.SecurityToken = &v
	return s
}

type ResetAppSecretResponseBody struct {
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetAppSecretResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetAppSecretResponseBody) GoString() string {
	return s.String()
}

func (s *ResetAppSecretResponseBody) SetRequestId(v string) *ResetAppSecretResponseBody {
	s.RequestId = &v
	return s
}

type ResetAppSecretResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ResetAppSecretResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResetAppSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetAppSecretResponse) GoString() string {
	return s.String()
}

func (s *ResetAppSecretResponse) SetHeaders(v map[string]*string) *ResetAppSecretResponse {
	s.Headers = v
	return s
}

func (s *ResetAppSecretResponse) SetStatusCode(v int32) *ResetAppSecretResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetAppSecretResponse) SetBody(v *ResetAppSecretResponseBody) *ResetAppSecretResponse {
	s.Body = v
	return s
}

type SdkGenerateByAppRequest struct {
	AppId         *int64  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Language      *string `json:"Language,omitempty" xml:"Language,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s SdkGenerateByAppRequest) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByAppRequest) GoString() string {
	return s.String()
}

func (s *SdkGenerateByAppRequest) SetAppId(v int64) *SdkGenerateByAppRequest {
	s.AppId = &v
	return s
}

func (s *SdkGenerateByAppRequest) SetLanguage(v string) *SdkGenerateByAppRequest {
	s.Language = &v
	return s
}

func (s *SdkGenerateByAppRequest) SetSecurityToken(v string) *SdkGenerateByAppRequest {
	s.SecurityToken = &v
	return s
}

type SdkGenerateByAppResponseBody struct {
	DownloadLink *string `json:"DownloadLink,omitempty" xml:"DownloadLink,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SdkGenerateByAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByAppResponseBody) GoString() string {
	return s.String()
}

func (s *SdkGenerateByAppResponseBody) SetDownloadLink(v string) *SdkGenerateByAppResponseBody {
	s.DownloadLink = &v
	return s
}

func (s *SdkGenerateByAppResponseBody) SetRequestId(v string) *SdkGenerateByAppResponseBody {
	s.RequestId = &v
	return s
}

type SdkGenerateByAppResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SdkGenerateByAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SdkGenerateByAppResponse) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByAppResponse) GoString() string {
	return s.String()
}

func (s *SdkGenerateByAppResponse) SetHeaders(v map[string]*string) *SdkGenerateByAppResponse {
	s.Headers = v
	return s
}

func (s *SdkGenerateByAppResponse) SetStatusCode(v int32) *SdkGenerateByAppResponse {
	s.StatusCode = &v
	return s
}

func (s *SdkGenerateByAppResponse) SetBody(v *SdkGenerateByAppResponseBody) *SdkGenerateByAppResponse {
	s.Body = v
	return s
}

type SdkGenerateByAppForRegionRequest struct {
	AppId         *int64  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Language      *string `json:"Language,omitempty" xml:"Language,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s SdkGenerateByAppForRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByAppForRegionRequest) GoString() string {
	return s.String()
}

func (s *SdkGenerateByAppForRegionRequest) SetAppId(v int64) *SdkGenerateByAppForRegionRequest {
	s.AppId = &v
	return s
}

func (s *SdkGenerateByAppForRegionRequest) SetLanguage(v string) *SdkGenerateByAppForRegionRequest {
	s.Language = &v
	return s
}

func (s *SdkGenerateByAppForRegionRequest) SetSecurityToken(v string) *SdkGenerateByAppForRegionRequest {
	s.SecurityToken = &v
	return s
}

type SdkGenerateByAppForRegionResponseBody struct {
	DownloadLink *string `json:"DownloadLink,omitempty" xml:"DownloadLink,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SdkGenerateByAppForRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByAppForRegionResponseBody) GoString() string {
	return s.String()
}

func (s *SdkGenerateByAppForRegionResponseBody) SetDownloadLink(v string) *SdkGenerateByAppForRegionResponseBody {
	s.DownloadLink = &v
	return s
}

func (s *SdkGenerateByAppForRegionResponseBody) SetRequestId(v string) *SdkGenerateByAppForRegionResponseBody {
	s.RequestId = &v
	return s
}

type SdkGenerateByAppForRegionResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SdkGenerateByAppForRegionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SdkGenerateByAppForRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByAppForRegionResponse) GoString() string {
	return s.String()
}

func (s *SdkGenerateByAppForRegionResponse) SetHeaders(v map[string]*string) *SdkGenerateByAppForRegionResponse {
	s.Headers = v
	return s
}

func (s *SdkGenerateByAppForRegionResponse) SetStatusCode(v int32) *SdkGenerateByAppForRegionResponse {
	s.StatusCode = &v
	return s
}

func (s *SdkGenerateByAppForRegionResponse) SetBody(v *SdkGenerateByAppForRegionResponseBody) *SdkGenerateByAppForRegionResponse {
	s.Body = v
	return s
}

type SdkGenerateByGroupRequest struct {
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Language      *string `json:"Language,omitempty" xml:"Language,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s SdkGenerateByGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByGroupRequest) GoString() string {
	return s.String()
}

func (s *SdkGenerateByGroupRequest) SetGroupId(v string) *SdkGenerateByGroupRequest {
	s.GroupId = &v
	return s
}

func (s *SdkGenerateByGroupRequest) SetLanguage(v string) *SdkGenerateByGroupRequest {
	s.Language = &v
	return s
}

func (s *SdkGenerateByGroupRequest) SetSecurityToken(v string) *SdkGenerateByGroupRequest {
	s.SecurityToken = &v
	return s
}

type SdkGenerateByGroupResponseBody struct {
	DownloadLink *string `json:"DownloadLink,omitempty" xml:"DownloadLink,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SdkGenerateByGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByGroupResponseBody) GoString() string {
	return s.String()
}

func (s *SdkGenerateByGroupResponseBody) SetDownloadLink(v string) *SdkGenerateByGroupResponseBody {
	s.DownloadLink = &v
	return s
}

func (s *SdkGenerateByGroupResponseBody) SetRequestId(v string) *SdkGenerateByGroupResponseBody {
	s.RequestId = &v
	return s
}

type SdkGenerateByGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SdkGenerateByGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SdkGenerateByGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s SdkGenerateByGroupResponse) GoString() string {
	return s.String()
}

func (s *SdkGenerateByGroupResponse) SetHeaders(v map[string]*string) *SdkGenerateByGroupResponse {
	s.Headers = v
	return s
}

func (s *SdkGenerateByGroupResponse) SetStatusCode(v int32) *SdkGenerateByGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *SdkGenerateByGroupResponse) SetBody(v *SdkGenerateByGroupResponseBody) *SdkGenerateByGroupResponse {
	s.Body = v
	return s
}

type SetAccessControlListAttributeRequest struct {
	AclId         *string `json:"AclId,omitempty" xml:"AclId,omitempty"`
	AclName       *string `json:"AclName,omitempty" xml:"AclName,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s SetAccessControlListAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetAccessControlListAttributeRequest) GoString() string {
	return s.String()
}

func (s *SetAccessControlListAttributeRequest) SetAclId(v string) *SetAccessControlListAttributeRequest {
	s.AclId = &v
	return s
}

func (s *SetAccessControlListAttributeRequest) SetAclName(v string) *SetAccessControlListAttributeRequest {
	s.AclName = &v
	return s
}

func (s *SetAccessControlListAttributeRequest) SetSecurityToken(v string) *SetAccessControlListAttributeRequest {
	s.SecurityToken = &v
	return s
}

type SetAccessControlListAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetAccessControlListAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetAccessControlListAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *SetAccessControlListAttributeResponseBody) SetRequestId(v string) *SetAccessControlListAttributeResponseBody {
	s.RequestId = &v
	return s
}

type SetAccessControlListAttributeResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetAccessControlListAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetAccessControlListAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetAccessControlListAttributeResponse) GoString() string {
	return s.String()
}

func (s *SetAccessControlListAttributeResponse) SetHeaders(v map[string]*string) *SetAccessControlListAttributeResponse {
	s.Headers = v
	return s
}

func (s *SetAccessControlListAttributeResponse) SetStatusCode(v int32) *SetAccessControlListAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *SetAccessControlListAttributeResponse) SetBody(v *SetAccessControlListAttributeResponseBody) *SetAccessControlListAttributeResponse {
	s.Body = v
	return s
}

type SetApisAuthoritiesRequest struct {
	// Queries weather based on the region name
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	AppId *int64 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// *   This operation is intended for API providers and callers.
	// *   API providers can authorize any apps to call their APIs.
	// *   API callers can authorize their own apps to call the APIs that they have purchased.
	AuthValidTime *string `json:"AuthValidTime,omitempty" xml:"AuthValidTime,omitempty"`
	// The time (UTC) when the authorization expires. If this parameter is empty, the authorization does not expire.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **TEST**
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The description of the authorization.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s SetApisAuthoritiesRequest) String() string {
	return tea.Prettify(s)
}

func (s SetApisAuthoritiesRequest) GoString() string {
	return s.String()
}

func (s *SetApisAuthoritiesRequest) SetApiIds(v string) *SetApisAuthoritiesRequest {
	s.ApiIds = &v
	return s
}

func (s *SetApisAuthoritiesRequest) SetAppId(v int64) *SetApisAuthoritiesRequest {
	s.AppId = &v
	return s
}

func (s *SetApisAuthoritiesRequest) SetAuthValidTime(v string) *SetApisAuthoritiesRequest {
	s.AuthValidTime = &v
	return s
}

func (s *SetApisAuthoritiesRequest) SetDescription(v string) *SetApisAuthoritiesRequest {
	s.Description = &v
	return s
}

func (s *SetApisAuthoritiesRequest) SetGroupId(v string) *SetApisAuthoritiesRequest {
	s.GroupId = &v
	return s
}

func (s *SetApisAuthoritiesRequest) SetSecurityToken(v string) *SetApisAuthoritiesRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetApisAuthoritiesRequest) SetStageName(v string) *SetApisAuthoritiesRequest {
	s.StageName = &v
	return s
}

type SetApisAuthoritiesResponseBody struct {
	// Authorizes a specified app to call multiple APIs.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetApisAuthoritiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetApisAuthoritiesResponseBody) GoString() string {
	return s.String()
}

func (s *SetApisAuthoritiesResponseBody) SetRequestId(v string) *SetApisAuthoritiesResponseBody {
	s.RequestId = &v
	return s
}

type SetApisAuthoritiesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetApisAuthoritiesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetApisAuthoritiesResponse) String() string {
	return tea.Prettify(s)
}

func (s SetApisAuthoritiesResponse) GoString() string {
	return s.String()
}

func (s *SetApisAuthoritiesResponse) SetHeaders(v map[string]*string) *SetApisAuthoritiesResponse {
	s.Headers = v
	return s
}

func (s *SetApisAuthoritiesResponse) SetStatusCode(v int32) *SetApisAuthoritiesResponse {
	s.StatusCode = &v
	return s
}

func (s *SetApisAuthoritiesResponse) SetBody(v *SetApisAuthoritiesResponseBody) *SetApisAuthoritiesResponse {
	s.Body = v
	return s
}

type SetAppsAuthoritiesRequest struct {
	// The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// Queries weather based on the region name
	AppIds *string `json:"AppIds,omitempty" xml:"AppIds,omitempty"`
	// *   This operation is intended for API providers and callers.
	// *   API providers can authorize any apps to call their APIs.
	// *   API callers can authorize their own apps to call the APIs that they have purchased.
	AuthValidTime *string `json:"AuthValidTime,omitempty" xml:"AuthValidTime,omitempty"`
	// The time (UTC) when the authorization expires. If this parameter is empty, the authorization does not expire.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **TEST**
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The description of the authorization.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s SetAppsAuthoritiesRequest) String() string {
	return tea.Prettify(s)
}

func (s SetAppsAuthoritiesRequest) GoString() string {
	return s.String()
}

func (s *SetAppsAuthoritiesRequest) SetApiId(v string) *SetAppsAuthoritiesRequest {
	s.ApiId = &v
	return s
}

func (s *SetAppsAuthoritiesRequest) SetAppIds(v string) *SetAppsAuthoritiesRequest {
	s.AppIds = &v
	return s
}

func (s *SetAppsAuthoritiesRequest) SetAuthValidTime(v string) *SetAppsAuthoritiesRequest {
	s.AuthValidTime = &v
	return s
}

func (s *SetAppsAuthoritiesRequest) SetDescription(v string) *SetAppsAuthoritiesRequest {
	s.Description = &v
	return s
}

func (s *SetAppsAuthoritiesRequest) SetGroupId(v string) *SetAppsAuthoritiesRequest {
	s.GroupId = &v
	return s
}

func (s *SetAppsAuthoritiesRequest) SetSecurityToken(v string) *SetAppsAuthoritiesRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetAppsAuthoritiesRequest) SetStageName(v string) *SetAppsAuthoritiesRequest {
	s.StageName = &v
	return s
}

type SetAppsAuthoritiesResponseBody struct {
	// Grants access permissions on a specified API to multiple apps.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetAppsAuthoritiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetAppsAuthoritiesResponseBody) GoString() string {
	return s.String()
}

func (s *SetAppsAuthoritiesResponseBody) SetRequestId(v string) *SetAppsAuthoritiesResponseBody {
	s.RequestId = &v
	return s
}

type SetAppsAuthoritiesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetAppsAuthoritiesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetAppsAuthoritiesResponse) String() string {
	return tea.Prettify(s)
}

func (s SetAppsAuthoritiesResponse) GoString() string {
	return s.String()
}

func (s *SetAppsAuthoritiesResponse) SetHeaders(v map[string]*string) *SetAppsAuthoritiesResponse {
	s.Headers = v
	return s
}

func (s *SetAppsAuthoritiesResponse) SetStatusCode(v int32) *SetAppsAuthoritiesResponse {
	s.StatusCode = &v
	return s
}

func (s *SetAppsAuthoritiesResponse) SetBody(v *SetAppsAuthoritiesResponseBody) *SetAppsAuthoritiesResponse {
	s.Body = v
	return s
}

type SetDomainRequest struct {
	BindStageName         *string `json:"BindStageName,omitempty" xml:"BindStageName,omitempty"`
	CustomDomainType      *string `json:"CustomDomainType,omitempty" xml:"CustomDomainType,omitempty"`
	DomainName            *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	GroupId               *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	IsForce               *bool   `json:"IsForce,omitempty" xml:"IsForce,omitempty"`
	IsHttpRedirectToHttps *bool   `json:"IsHttpRedirectToHttps,omitempty" xml:"IsHttpRedirectToHttps,omitempty"`
}

func (s SetDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDomainRequest) GoString() string {
	return s.String()
}

func (s *SetDomainRequest) SetBindStageName(v string) *SetDomainRequest {
	s.BindStageName = &v
	return s
}

func (s *SetDomainRequest) SetCustomDomainType(v string) *SetDomainRequest {
	s.CustomDomainType = &v
	return s
}

func (s *SetDomainRequest) SetDomainName(v string) *SetDomainRequest {
	s.DomainName = &v
	return s
}

func (s *SetDomainRequest) SetGroupId(v string) *SetDomainRequest {
	s.GroupId = &v
	return s
}

func (s *SetDomainRequest) SetIsForce(v bool) *SetDomainRequest {
	s.IsForce = &v
	return s
}

func (s *SetDomainRequest) SetIsHttpRedirectToHttps(v bool) *SetDomainRequest {
	s.IsHttpRedirectToHttps = &v
	return s
}

type SetDomainResponseBody struct {
	DomainBindingStatus   *string `json:"DomainBindingStatus,omitempty" xml:"DomainBindingStatus,omitempty"`
	DomainLegalStatus     *string `json:"DomainLegalStatus,omitempty" xml:"DomainLegalStatus,omitempty"`
	DomainName            *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	DomainRemark          *string `json:"DomainRemark,omitempty" xml:"DomainRemark,omitempty"`
	DomainWebSocketStatus *string `json:"DomainWebSocketStatus,omitempty" xml:"DomainWebSocketStatus,omitempty"`
	GroupId               *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	RequestId             *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SubDomain             *string `json:"SubDomain,omitempty" xml:"SubDomain,omitempty"`
}

func (s SetDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDomainResponseBody) GoString() string {
	return s.String()
}

func (s *SetDomainResponseBody) SetDomainBindingStatus(v string) *SetDomainResponseBody {
	s.DomainBindingStatus = &v
	return s
}

func (s *SetDomainResponseBody) SetDomainLegalStatus(v string) *SetDomainResponseBody {
	s.DomainLegalStatus = &v
	return s
}

func (s *SetDomainResponseBody) SetDomainName(v string) *SetDomainResponseBody {
	s.DomainName = &v
	return s
}

func (s *SetDomainResponseBody) SetDomainRemark(v string) *SetDomainResponseBody {
	s.DomainRemark = &v
	return s
}

func (s *SetDomainResponseBody) SetDomainWebSocketStatus(v string) *SetDomainResponseBody {
	s.DomainWebSocketStatus = &v
	return s
}

func (s *SetDomainResponseBody) SetGroupId(v string) *SetDomainResponseBody {
	s.GroupId = &v
	return s
}

func (s *SetDomainResponseBody) SetRequestId(v string) *SetDomainResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDomainResponseBody) SetSubDomain(v string) *SetDomainResponseBody {
	s.SubDomain = &v
	return s
}

type SetDomainResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetDomainResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDomainResponse) GoString() string {
	return s.String()
}

func (s *SetDomainResponse) SetHeaders(v map[string]*string) *SetDomainResponse {
	s.Headers = v
	return s
}

func (s *SetDomainResponse) SetStatusCode(v int32) *SetDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDomainResponse) SetBody(v *SetDomainResponseBody) *SetDomainResponse {
	s.Body = v
	return s
}

type SetDomainCertificateRequest struct {
	CaCertificateBody     *string `json:"CaCertificateBody,omitempty" xml:"CaCertificateBody,omitempty"`
	CertificateBody       *string `json:"CertificateBody,omitempty" xml:"CertificateBody,omitempty"`
	CertificateName       *string `json:"CertificateName,omitempty" xml:"CertificateName,omitempty"`
	CertificatePrivateKey *string `json:"CertificatePrivateKey,omitempty" xml:"CertificatePrivateKey,omitempty"`
	DomainName            *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	GroupId               *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken         *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	SslVerifyDepth        *string `json:"SslVerifyDepth,omitempty" xml:"SslVerifyDepth,omitempty"`
}

func (s SetDomainCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDomainCertificateRequest) GoString() string {
	return s.String()
}

func (s *SetDomainCertificateRequest) SetCaCertificateBody(v string) *SetDomainCertificateRequest {
	s.CaCertificateBody = &v
	return s
}

func (s *SetDomainCertificateRequest) SetCertificateBody(v string) *SetDomainCertificateRequest {
	s.CertificateBody = &v
	return s
}

func (s *SetDomainCertificateRequest) SetCertificateName(v string) *SetDomainCertificateRequest {
	s.CertificateName = &v
	return s
}

func (s *SetDomainCertificateRequest) SetCertificatePrivateKey(v string) *SetDomainCertificateRequest {
	s.CertificatePrivateKey = &v
	return s
}

func (s *SetDomainCertificateRequest) SetDomainName(v string) *SetDomainCertificateRequest {
	s.DomainName = &v
	return s
}

func (s *SetDomainCertificateRequest) SetGroupId(v string) *SetDomainCertificateRequest {
	s.GroupId = &v
	return s
}

func (s *SetDomainCertificateRequest) SetSecurityToken(v string) *SetDomainCertificateRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetDomainCertificateRequest) SetSslVerifyDepth(v string) *SetDomainCertificateRequest {
	s.SslVerifyDepth = &v
	return s
}

type SetDomainCertificateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetDomainCertificateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDomainCertificateResponseBody) GoString() string {
	return s.String()
}

func (s *SetDomainCertificateResponseBody) SetRequestId(v string) *SetDomainCertificateResponseBody {
	s.RequestId = &v
	return s
}

type SetDomainCertificateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetDomainCertificateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetDomainCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDomainCertificateResponse) GoString() string {
	return s.String()
}

func (s *SetDomainCertificateResponse) SetHeaders(v map[string]*string) *SetDomainCertificateResponse {
	s.Headers = v
	return s
}

func (s *SetDomainCertificateResponse) SetStatusCode(v int32) *SetDomainCertificateResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDomainCertificateResponse) SetBody(v *SetDomainCertificateResponseBody) *SetDomainCertificateResponse {
	s.Body = v
	return s
}

type SetDomainWebSocketStatusRequest struct {
	ActionValue   *string `json:"ActionValue,omitempty" xml:"ActionValue,omitempty"`
	DomainName    *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	WSSEnable     *string `json:"WSSEnable,omitempty" xml:"WSSEnable,omitempty"`
}

func (s SetDomainWebSocketStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDomainWebSocketStatusRequest) GoString() string {
	return s.String()
}

func (s *SetDomainWebSocketStatusRequest) SetActionValue(v string) *SetDomainWebSocketStatusRequest {
	s.ActionValue = &v
	return s
}

func (s *SetDomainWebSocketStatusRequest) SetDomainName(v string) *SetDomainWebSocketStatusRequest {
	s.DomainName = &v
	return s
}

func (s *SetDomainWebSocketStatusRequest) SetGroupId(v string) *SetDomainWebSocketStatusRequest {
	s.GroupId = &v
	return s
}

func (s *SetDomainWebSocketStatusRequest) SetSecurityToken(v string) *SetDomainWebSocketStatusRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetDomainWebSocketStatusRequest) SetWSSEnable(v string) *SetDomainWebSocketStatusRequest {
	s.WSSEnable = &v
	return s
}

type SetDomainWebSocketStatusResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetDomainWebSocketStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDomainWebSocketStatusResponseBody) GoString() string {
	return s.String()
}

func (s *SetDomainWebSocketStatusResponseBody) SetRequestId(v string) *SetDomainWebSocketStatusResponseBody {
	s.RequestId = &v
	return s
}

type SetDomainWebSocketStatusResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetDomainWebSocketStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetDomainWebSocketStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDomainWebSocketStatusResponse) GoString() string {
	return s.String()
}

func (s *SetDomainWebSocketStatusResponse) SetHeaders(v map[string]*string) *SetDomainWebSocketStatusResponse {
	s.Headers = v
	return s
}

func (s *SetDomainWebSocketStatusResponse) SetStatusCode(v int32) *SetDomainWebSocketStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDomainWebSocketStatusResponse) SetBody(v *SetDomainWebSocketStatusResponseBody) *SetDomainWebSocketStatusResponse {
	s.Body = v
	return s
}

type SetGroupAuthAppCodeRequest struct {
	AuthAppCode   *string `json:"AuthAppCode,omitempty" xml:"AuthAppCode,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s SetGroupAuthAppCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetGroupAuthAppCodeRequest) GoString() string {
	return s.String()
}

func (s *SetGroupAuthAppCodeRequest) SetAuthAppCode(v string) *SetGroupAuthAppCodeRequest {
	s.AuthAppCode = &v
	return s
}

func (s *SetGroupAuthAppCodeRequest) SetGroupId(v string) *SetGroupAuthAppCodeRequest {
	s.GroupId = &v
	return s
}

func (s *SetGroupAuthAppCodeRequest) SetSecurityToken(v string) *SetGroupAuthAppCodeRequest {
	s.SecurityToken = &v
	return s
}

type SetGroupAuthAppCodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetGroupAuthAppCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetGroupAuthAppCodeResponseBody) GoString() string {
	return s.String()
}

func (s *SetGroupAuthAppCodeResponseBody) SetRequestId(v string) *SetGroupAuthAppCodeResponseBody {
	s.RequestId = &v
	return s
}

type SetGroupAuthAppCodeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetGroupAuthAppCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetGroupAuthAppCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetGroupAuthAppCodeResponse) GoString() string {
	return s.String()
}

func (s *SetGroupAuthAppCodeResponse) SetHeaders(v map[string]*string) *SetGroupAuthAppCodeResponse {
	s.Headers = v
	return s
}

func (s *SetGroupAuthAppCodeResponse) SetStatusCode(v int32) *SetGroupAuthAppCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *SetGroupAuthAppCodeResponse) SetBody(v *SetGroupAuthAppCodeResponseBody) *SetGroupAuthAppCodeResponse {
	s.Body = v
	return s
}

type SetIpControlApisRequest struct {
	// The ID of the request.
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **PRE**
	// *   **TEST**
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The API IDs. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	IpControlId   *string `json:"IpControlId,omitempty" xml:"IpControlId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// *   This operation is intended for API callers.
	// *   A maximum of 100 APIs can be bound at a time.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s SetIpControlApisRequest) String() string {
	return tea.Prettify(s)
}

func (s SetIpControlApisRequest) GoString() string {
	return s.String()
}

func (s *SetIpControlApisRequest) SetApiIds(v string) *SetIpControlApisRequest {
	s.ApiIds = &v
	return s
}

func (s *SetIpControlApisRequest) SetGroupId(v string) *SetIpControlApisRequest {
	s.GroupId = &v
	return s
}

func (s *SetIpControlApisRequest) SetIpControlId(v string) *SetIpControlApisRequest {
	s.IpControlId = &v
	return s
}

func (s *SetIpControlApisRequest) SetSecurityToken(v string) *SetIpControlApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetIpControlApisRequest) SetStageName(v string) *SetIpControlApisRequest {
	s.StageName = &v
	return s
}

type SetIpControlApisResponseBody struct {
	// Creates a binding relationship between specified access control lists (ACLs) and APIs.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetIpControlApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetIpControlApisResponseBody) GoString() string {
	return s.String()
}

func (s *SetIpControlApisResponseBody) SetRequestId(v string) *SetIpControlApisResponseBody {
	s.RequestId = &v
	return s
}

type SetIpControlApisResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetIpControlApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetIpControlApisResponse) String() string {
	return tea.Prettify(s)
}

func (s SetIpControlApisResponse) GoString() string {
	return s.String()
}

func (s *SetIpControlApisResponse) SetHeaders(v map[string]*string) *SetIpControlApisResponse {
	s.Headers = v
	return s
}

func (s *SetIpControlApisResponse) SetStatusCode(v int32) *SetIpControlApisResponse {
	s.StatusCode = &v
	return s
}

func (s *SetIpControlApisResponse) SetBody(v *SetIpControlApisResponseBody) *SetIpControlApisResponse {
	s.Body = v
	return s
}

type SetSignatureApisRequest struct {
	// The ID of the request.
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **PRE**
	// *   **TEST**
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	SignatureId *string `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
	// *   This API is intended for API providers.
	// *   This operation allows you to bind a signature key to an API. You can bind signature keys for up to 100 APIs at a time.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s SetSignatureApisRequest) String() string {
	return tea.Prettify(s)
}

func (s SetSignatureApisRequest) GoString() string {
	return s.String()
}

func (s *SetSignatureApisRequest) SetApiIds(v string) *SetSignatureApisRequest {
	s.ApiIds = &v
	return s
}

func (s *SetSignatureApisRequest) SetGroupId(v string) *SetSignatureApisRequest {
	s.GroupId = &v
	return s
}

func (s *SetSignatureApisRequest) SetSecurityToken(v string) *SetSignatureApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetSignatureApisRequest) SetSignatureId(v string) *SetSignatureApisRequest {
	s.SignatureId = &v
	return s
}

func (s *SetSignatureApisRequest) SetStageName(v string) *SetSignatureApisRequest {
	s.StageName = &v
	return s
}

type SetSignatureApisResponseBody struct {
	// Binds a signature key to APIs.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetSignatureApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetSignatureApisResponseBody) GoString() string {
	return s.String()
}

func (s *SetSignatureApisResponseBody) SetRequestId(v string) *SetSignatureApisResponseBody {
	s.RequestId = &v
	return s
}

type SetSignatureApisResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetSignatureApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetSignatureApisResponse) String() string {
	return tea.Prettify(s)
}

func (s SetSignatureApisResponse) GoString() string {
	return s.String()
}

func (s *SetSignatureApisResponse) SetHeaders(v map[string]*string) *SetSignatureApisResponse {
	s.Headers = v
	return s
}

func (s *SetSignatureApisResponse) SetStatusCode(v int32) *SetSignatureApisResponse {
	s.StatusCode = &v
	return s
}

func (s *SetSignatureApisResponse) SetBody(v *SetSignatureApisResponseBody) *SetSignatureApisResponse {
	s.Body = v
	return s
}

type SetTrafficControlApisRequest struct {
	// The ID of the request.
	ApiIds *string `json:"ApiIds,omitempty" xml:"ApiIds,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **TEST**
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// *   This API is intended for API providers.
	// *   This API allows you to bind a specific throttling policy to up to 100 APIs at a time.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
	// The API ID for the specified operation. Separate multiple API IDs with commas (,). A maximum of 100 API IDs can be entered.
	TrafficControlId *string `json:"TrafficControlId,omitempty" xml:"TrafficControlId,omitempty"`
}

func (s SetTrafficControlApisRequest) String() string {
	return tea.Prettify(s)
}

func (s SetTrafficControlApisRequest) GoString() string {
	return s.String()
}

func (s *SetTrafficControlApisRequest) SetApiIds(v string) *SetTrafficControlApisRequest {
	s.ApiIds = &v
	return s
}

func (s *SetTrafficControlApisRequest) SetGroupId(v string) *SetTrafficControlApisRequest {
	s.GroupId = &v
	return s
}

func (s *SetTrafficControlApisRequest) SetSecurityToken(v string) *SetTrafficControlApisRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetTrafficControlApisRequest) SetStageName(v string) *SetTrafficControlApisRequest {
	s.StageName = &v
	return s
}

func (s *SetTrafficControlApisRequest) SetTrafficControlId(v string) *SetTrafficControlApisRequest {
	s.TrafficControlId = &v
	return s
}

type SetTrafficControlApisResponseBody struct {
	// Binds a throttling policy to APIs.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetTrafficControlApisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetTrafficControlApisResponseBody) GoString() string {
	return s.String()
}

func (s *SetTrafficControlApisResponseBody) SetRequestId(v string) *SetTrafficControlApisResponseBody {
	s.RequestId = &v
	return s
}

type SetTrafficControlApisResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetTrafficControlApisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetTrafficControlApisResponse) String() string {
	return tea.Prettify(s)
}

func (s SetTrafficControlApisResponse) GoString() string {
	return s.String()
}

func (s *SetTrafficControlApisResponse) SetHeaders(v map[string]*string) *SetTrafficControlApisResponse {
	s.Headers = v
	return s
}

func (s *SetTrafficControlApisResponse) SetStatusCode(v int32) *SetTrafficControlApisResponse {
	s.StatusCode = &v
	return s
}

func (s *SetTrafficControlApisResponse) SetBody(v *SetTrafficControlApisResponseBody) *SetTrafficControlApisResponse {
	s.Body = v
	return s
}

type SetVpcAccessRequest struct {
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Port              *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	SecurityToken     *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	VpcId             *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VpcTargetHostName *string `json:"VpcTargetHostName,omitempty" xml:"VpcTargetHostName,omitempty"`
}

func (s SetVpcAccessRequest) String() string {
	return tea.Prettify(s)
}

func (s SetVpcAccessRequest) GoString() string {
	return s.String()
}

func (s *SetVpcAccessRequest) SetDescription(v string) *SetVpcAccessRequest {
	s.Description = &v
	return s
}

func (s *SetVpcAccessRequest) SetInstanceId(v string) *SetVpcAccessRequest {
	s.InstanceId = &v
	return s
}

func (s *SetVpcAccessRequest) SetName(v string) *SetVpcAccessRequest {
	s.Name = &v
	return s
}

func (s *SetVpcAccessRequest) SetPort(v int32) *SetVpcAccessRequest {
	s.Port = &v
	return s
}

func (s *SetVpcAccessRequest) SetSecurityToken(v string) *SetVpcAccessRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetVpcAccessRequest) SetVpcId(v string) *SetVpcAccessRequest {
	s.VpcId = &v
	return s
}

func (s *SetVpcAccessRequest) SetVpcTargetHostName(v string) *SetVpcAccessRequest {
	s.VpcTargetHostName = &v
	return s
}

type SetVpcAccessResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetVpcAccessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetVpcAccessResponseBody) GoString() string {
	return s.String()
}

func (s *SetVpcAccessResponseBody) SetRequestId(v string) *SetVpcAccessResponseBody {
	s.RequestId = &v
	return s
}

type SetVpcAccessResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetVpcAccessResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetVpcAccessResponse) String() string {
	return tea.Prettify(s)
}

func (s SetVpcAccessResponse) GoString() string {
	return s.String()
}

func (s *SetVpcAccessResponse) SetHeaders(v map[string]*string) *SetVpcAccessResponse {
	s.Headers = v
	return s
}

func (s *SetVpcAccessResponse) SetStatusCode(v int32) *SetVpcAccessResponse {
	s.StatusCode = &v
	return s
}

func (s *SetVpcAccessResponse) SetBody(v *SetVpcAccessResponseBody) *SetVpcAccessResponse {
	s.Body = v
	return s
}

type SetWildcardDomainPatternsRequest struct {
	DomainName             *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	GroupId                *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	SecurityToken          *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	WildcardDomainPatterns *string `json:"WildcardDomainPatterns,omitempty" xml:"WildcardDomainPatterns,omitempty"`
}

func (s SetWildcardDomainPatternsRequest) String() string {
	return tea.Prettify(s)
}

func (s SetWildcardDomainPatternsRequest) GoString() string {
	return s.String()
}

func (s *SetWildcardDomainPatternsRequest) SetDomainName(v string) *SetWildcardDomainPatternsRequest {
	s.DomainName = &v
	return s
}

func (s *SetWildcardDomainPatternsRequest) SetGroupId(v string) *SetWildcardDomainPatternsRequest {
	s.GroupId = &v
	return s
}

func (s *SetWildcardDomainPatternsRequest) SetSecurityToken(v string) *SetWildcardDomainPatternsRequest {
	s.SecurityToken = &v
	return s
}

func (s *SetWildcardDomainPatternsRequest) SetWildcardDomainPatterns(v string) *SetWildcardDomainPatternsRequest {
	s.WildcardDomainPatterns = &v
	return s
}

type SetWildcardDomainPatternsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetWildcardDomainPatternsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetWildcardDomainPatternsResponseBody) GoString() string {
	return s.String()
}

func (s *SetWildcardDomainPatternsResponseBody) SetRequestId(v string) *SetWildcardDomainPatternsResponseBody {
	s.RequestId = &v
	return s
}

type SetWildcardDomainPatternsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetWildcardDomainPatternsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetWildcardDomainPatternsResponse) String() string {
	return tea.Prettify(s)
}

func (s SetWildcardDomainPatternsResponse) GoString() string {
	return s.String()
}

func (s *SetWildcardDomainPatternsResponse) SetHeaders(v map[string]*string) *SetWildcardDomainPatternsResponse {
	s.Headers = v
	return s
}

func (s *SetWildcardDomainPatternsResponse) SetStatusCode(v int32) *SetWildcardDomainPatternsResponse {
	s.StatusCode = &v
	return s
}

func (s *SetWildcardDomainPatternsResponse) SetBody(v *SetWildcardDomainPatternsResponseBody) *SetWildcardDomainPatternsResponse {
	s.Body = v
	return s
}

type SwitchApiRequest struct {
	// The description of the switch operation.
	ApiId *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	// The ID of the request.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the runtime environment. Valid values:
	//
	// *   **RELEASE**
	// *   **TEST**
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// *   This API is intended for API providers.
	// *   The historical version can be obtained through the DescribeHistoryApis API.****
	// *   Only APIs that have been published more than once have historical versions to switch to.
	// *   This operation can only be performed on running APIs. Use caution when performing this operation because the operation cannot be undone after it has been completed and takes effect within 5 seconds.
	// *   The switch operation is in essence a publish operation, and the reason for this operation must be provided.
	HistoryVersion *string `json:"HistoryVersion,omitempty" xml:"HistoryVersion,omitempty"`
	SecurityToken  *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// The historical version you want to switch to.
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty"`
}

func (s SwitchApiRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchApiRequest) GoString() string {
	return s.String()
}

func (s *SwitchApiRequest) SetApiId(v string) *SwitchApiRequest {
	s.ApiId = &v
	return s
}

func (s *SwitchApiRequest) SetDescription(v string) *SwitchApiRequest {
	s.Description = &v
	return s
}

func (s *SwitchApiRequest) SetGroupId(v string) *SwitchApiRequest {
	s.GroupId = &v
	return s
}

func (s *SwitchApiRequest) SetHistoryVersion(v string) *SwitchApiRequest {
	s.HistoryVersion = &v
	return s
}

func (s *SwitchApiRequest) SetSecurityToken(v string) *SwitchApiRequest {
	s.SecurityToken = &v
	return s
}

func (s *SwitchApiRequest) SetStageName(v string) *SwitchApiRequest {
	s.StageName = &v
	return s
}

type SwitchApiResponseBody struct {
	// Switches the definition of an API in a specified runtime environment to a historical version.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SwitchApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchApiResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchApiResponseBody) SetRequestId(v string) *SwitchApiResponseBody {
	s.RequestId = &v
	return s
}

type SwitchApiResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SwitchApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SwitchApiResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchApiResponse) GoString() string {
	return s.String()
}

func (s *SwitchApiResponse) SetHeaders(v map[string]*string) *SwitchApiResponse {
	s.Headers = v
	return s
}

func (s *SwitchApiResponse) SetStatusCode(v int32) *SwitchApiResponse {
	s.StatusCode = &v
	return s
}

func (s *SwitchApiResponse) SetBody(v *SwitchApiResponseBody) *SwitchApiResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The operation that you want to perform. Set the value to **TagResources**.
	ResourceType  *string                   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	SecurityToken *string                   `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	Tag           []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetSecurityToken(v string) *TagResourcesRequest {
	s.SecurityToken = &v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	// Adds tags to resources.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// TagResources
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type TagResourcesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetStatusCode(v int32) *TagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	// The ID of the request.
	All        *bool     `json:"All,omitempty" xml:"All,omitempty"`
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The key of tag N.
	//
	// Valid values of N: `1 to 20.`
	ResourceType  *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	SecurityToken *string   `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	TagKey        []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetSecurityToken(v string) *UntagResourcesRequest {
	s.SecurityToken = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

type UntagResourcesResponseBody struct {
	// UntagResources
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type UntagResourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetStatusCode(v int32) *UntagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type ValidateVpcConnectivityRequest struct {
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	VpcAccessId   *string `json:"VpcAccessId,omitempty" xml:"VpcAccessId,omitempty"`
}

func (s ValidateVpcConnectivityRequest) String() string {
	return tea.Prettify(s)
}

func (s ValidateVpcConnectivityRequest) GoString() string {
	return s.String()
}

func (s *ValidateVpcConnectivityRequest) SetInstanceId(v string) *ValidateVpcConnectivityRequest {
	s.InstanceId = &v
	return s
}

func (s *ValidateVpcConnectivityRequest) SetSecurityToken(v string) *ValidateVpcConnectivityRequest {
	s.SecurityToken = &v
	return s
}

func (s *ValidateVpcConnectivityRequest) SetVpcAccessId(v string) *ValidateVpcConnectivityRequest {
	s.VpcAccessId = &v
	return s
}

type ValidateVpcConnectivityResponseBody struct {
	Connected *bool   `json:"Connected,omitempty" xml:"Connected,omitempty"`
	IpType    *string `json:"IpType,omitempty" xml:"IpType,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ValidateVpcConnectivityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ValidateVpcConnectivityResponseBody) GoString() string {
	return s.String()
}

func (s *ValidateVpcConnectivityResponseBody) SetConnected(v bool) *ValidateVpcConnectivityResponseBody {
	s.Connected = &v
	return s
}

func (s *ValidateVpcConnectivityResponseBody) SetIpType(v string) *ValidateVpcConnectivityResponseBody {
	s.IpType = &v
	return s
}

func (s *ValidateVpcConnectivityResponseBody) SetRequestId(v string) *ValidateVpcConnectivityResponseBody {
	s.RequestId = &v
	return s
}

type ValidateVpcConnectivityResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ValidateVpcConnectivityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ValidateVpcConnectivityResponse) String() string {
	return tea.Prettify(s)
}

func (s ValidateVpcConnectivityResponse) GoString() string {
	return s.String()
}

func (s *ValidateVpcConnectivityResponse) SetHeaders(v map[string]*string) *ValidateVpcConnectivityResponse {
	s.Headers = v
	return s
}

func (s *ValidateVpcConnectivityResponse) SetStatusCode(v int32) *ValidateVpcConnectivityResponse {
	s.StatusCode = &v
	return s
}

func (s *ValidateVpcConnectivityResponse) SetBody(v *ValidateVpcConnectivityResponseBody) *ValidateVpcConnectivityResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-qingdao":            tea.String("apigateway.cn-qingdao.aliyuncs.com"),
		"cn-beijing":            tea.String("apigateway.cn-beijing.aliyuncs.com"),
		"cn-chengdu":            tea.String("apigateway.cn-chengdu.aliyuncs.com"),
		"cn-zhangjiakou":        tea.String("apigateway.cn-zhangjiakou.aliyuncs.com"),
		"cn-huhehaote":          tea.String("apigateway.cn-huhehaote.aliyuncs.com"),
		"cn-hangzhou":           tea.String("apigateway.cn-hangzhou.aliyuncs.com"),
		"cn-shanghai":           tea.String("apigateway.cn-shanghai.aliyuncs.com"),
		"cn-shenzhen":           tea.String("apigateway.cn-shenzhen.aliyuncs.com"),
		"cn-hongkong":           tea.String("apigateway.cn-hongkong.aliyuncs.com"),
		"ap-southeast-1":        tea.String("apigateway.ap-southeast-1.aliyuncs.com"),
		"ap-southeast-2":        tea.String("apigateway.ap-southeast-2.aliyuncs.com"),
		"ap-southeast-3":        tea.String("apigateway.ap-southeast-3.aliyuncs.com"),
		"ap-southeast-5":        tea.String("apigateway.ap-southeast-5.aliyuncs.com"),
		"ap-northeast-1":        tea.String("apigateway.ap-northeast-1.aliyuncs.com"),
		"eu-west-1":             tea.String("apigateway.eu-west-1.aliyuncs.com"),
		"us-west-1":             tea.String("apigateway.us-west-1.aliyuncs.com"),
		"us-east-1":             tea.String("apigateway.us-east-1.aliyuncs.com"),
		"eu-central-1":          tea.String("apigateway.eu-central-1.aliyuncs.com"),
		"me-east-1":             tea.String("apigateway.me-east-1.aliyuncs.com"),
		"ap-south-1":            tea.String("apigateway.ap-south-1.aliyuncs.com"),
		"cn-north-2-gov-1":      tea.String("apigateway.cn-north-2-gov-1.aliyuncs.com"),
		"cn-hangzhou-finance":   tea.String("apigateway.aliyuncs.com"),
		"cn-shenzhen-finance-1": tea.String("apigateway.aliyuncs.com"),
		"cn-shanghai-finance-1": tea.String("apigateway.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("cloudapi"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AbolishApiWithOptions(request *AbolishApiRequest, runtime *util.RuntimeOptions) (_result *AbolishApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AbolishApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AbolishApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AbolishApi(request *AbolishApiRequest) (_result *AbolishApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AbolishApiResponse{}
	_body, _err := client.AbolishApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddAccessControlListEntryWithOptions(request *AddAccessControlListEntryRequest, runtime *util.RuntimeOptions) (_result *AddAccessControlListEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclEntrys)) {
		query["AclEntrys"] = request.AclEntrys
	}

	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddAccessControlListEntry"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddAccessControlListEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddAccessControlListEntry(request *AddAccessControlListEntryRequest) (_result *AddAccessControlListEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddAccessControlListEntryResponse{}
	_body, _err := client.AddAccessControlListEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The restriction policy on app IDs for a specific policy. You can restrict app IDs only for whitelists. The IpControlType values of whitelists are ALLOW.
 * *   You can add only one app ID restriction policy at a time.
 * *   If this parameter is empty, no restriction is imposed on the app IDs.
 * *   If this parameter is not empty, there is restriction not only on IP addresses, but also on apps.
 * *   Please note that if this parameter is not empty and the security authentication method of the API is No Authentication, all API calls are restricted.
 * *   If this parameter is not empty for a blacklist, API Gateway automatically skips this parameter and sets only restriction on IP addresses. The IpControlType value of a blacklist is REFUSE.
 *
 * @param request AddIpControlPolicyItemRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddIpControlPolicyItemResponse
 */
func (client *Client) AddIpControlPolicyItemWithOptions(request *AddIpControlPolicyItemRequest, runtime *util.RuntimeOptions) (_result *AddIpControlPolicyItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.CidrIp)) {
		query["CidrIp"] = request.CidrIp
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddIpControlPolicyItem"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddIpControlPolicyItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The restriction policy on app IDs for a specific policy. You can restrict app IDs only for whitelists. The IpControlType values of whitelists are ALLOW.
 * *   You can add only one app ID restriction policy at a time.
 * *   If this parameter is empty, no restriction is imposed on the app IDs.
 * *   If this parameter is not empty, there is restriction not only on IP addresses, but also on apps.
 * *   Please note that if this parameter is not empty and the security authentication method of the API is No Authentication, all API calls are restricted.
 * *   If this parameter is not empty for a blacklist, API Gateway automatically skips this parameter and sets only restriction on IP addresses. The IpControlType value of a blacklist is REFUSE.
 *
 * @param request AddIpControlPolicyItemRequest
 * @return AddIpControlPolicyItemResponse
 */
func (client *Client) AddIpControlPolicyItem(request *AddIpControlPolicyItemRequest) (_result *AddIpControlPolicyItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddIpControlPolicyItemResponse{}
	_body, _err := client.AddIpControlPolicyItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The type of the special throttling policy. Valid values:
 * *   **APP**
 * *   **USER**
 *
 * @param request AddTrafficSpecialControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddTrafficSpecialControlResponse
 */
func (client *Client) AddTrafficSpecialControlWithOptions(request *AddTrafficSpecialControlRequest, runtime *util.RuntimeOptions) (_result *AddTrafficSpecialControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SpecialKey)) {
		query["SpecialKey"] = request.SpecialKey
	}

	if !tea.BoolValue(util.IsUnset(request.SpecialType)) {
		query["SpecialType"] = request.SpecialType
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficValue)) {
		query["TrafficValue"] = request.TrafficValue
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddTrafficSpecialControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddTrafficSpecialControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The type of the special throttling policy. Valid values:
 * *   **APP**
 * *   **USER**
 *
 * @param request AddTrafficSpecialControlRequest
 * @return AddTrafficSpecialControlResponse
 */
func (client *Client) AddTrafficSpecialControl(request *AddTrafficSpecialControlRequest) (_result *AddTrafficSpecialControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTrafficSpecialControlResponse{}
	_body, _err := client.AddTrafficSpecialControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AttachPluginWithOptions(request *AttachPluginRequest, runtime *util.RuntimeOptions) (_result *AttachPluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PluginId)) {
		query["PluginId"] = request.PluginId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachPlugin"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AttachPluginResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AttachPlugin(request *AttachPluginRequest) (_result *AttachPluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachPluginResponse{}
	_body, _err := client.AttachPluginWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchAbolishApisWithOptions(request *BatchAbolishApisRequest, runtime *util.RuntimeOptions) (_result *BatchAbolishApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Api)) {
		query["Api"] = request.Api
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchAbolishApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchAbolishApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchAbolishApis(request *BatchAbolishApisRequest) (_result *BatchAbolishApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchAbolishApisResponse{}
	_body, _err := client.BatchAbolishApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchDeployApisWithOptions(request *BatchDeployApisRequest, runtime *util.RuntimeOptions) (_result *BatchDeployApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Api)) {
		query["Api"] = request.Api
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchDeployApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchDeployApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchDeployApis(request *BatchDeployApisRequest) (_result *BatchDeployApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchDeployApisResponse{}
	_body, _err := client.BatchDeployApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateAccessControlListWithOptions(request *CreateAccessControlListRequest, runtime *util.RuntimeOptions) (_result *CreateAccessControlListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclName)) {
		query["AclName"] = request.AclName
	}

	if !tea.BoolValue(util.IsUnset(request.AddressIPVersion)) {
		query["AddressIPVersion"] = request.AddressIPVersion
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAccessControlList"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAccessControlListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateAccessControlList(request *CreateAccessControlListRequest) (_result *CreateAccessControlListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAccessControlListResponse{}
	_body, _err := client.CreateAccessControlListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   This operation is intended for API providers.
 * *   The name of each API within the same group must be unique.
 * *   Each request path within the same group must be unique.
 * *   The QPS limit on this operation is 50 per user.
 *
 * @param request CreateApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateApiResponse
 */
func (client *Client) CreateApiWithOptions(request *CreateApiRequest, runtime *util.RuntimeOptions) (_result *CreateApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllowSignatureMethod)) {
		query["AllowSignatureMethod"] = request.AllowSignatureMethod
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.AppCodeAuthType)) {
		query["AppCodeAuthType"] = request.AppCodeAuthType
	}

	if !tea.BoolValue(util.IsUnset(request.AuthType)) {
		query["AuthType"] = request.AuthType
	}

	if !tea.BoolValue(util.IsUnset(request.BackendEnable)) {
		query["BackendEnable"] = request.BackendEnable
	}

	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.ConstantParameters)) {
		query["ConstantParameters"] = request.ConstantParameters
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DisableInternet)) {
		query["DisableInternet"] = request.DisableInternet
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorCodeSamples)) {
		query["ErrorCodeSamples"] = request.ErrorCodeSamples
	}

	if !tea.BoolValue(util.IsUnset(request.FailResultSample)) {
		query["FailResultSample"] = request.FailResultSample
	}

	if !tea.BoolValue(util.IsUnset(request.ForceNonceCheck)) {
		query["ForceNonceCheck"] = request.ForceNonceCheck
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OpenIdConnectConfig)) {
		query["OpenIdConnectConfig"] = request.OpenIdConnectConfig
	}

	if !tea.BoolValue(util.IsUnset(request.RequestConfig)) {
		query["RequestConfig"] = request.RequestConfig
	}

	if !tea.BoolValue(util.IsUnset(request.RequestParameters)) {
		query["RequestParameters"] = request.RequestParameters
	}

	if !tea.BoolValue(util.IsUnset(request.ResultBodyModel)) {
		query["ResultBodyModel"] = request.ResultBodyModel
	}

	if !tea.BoolValue(util.IsUnset(request.ResultDescriptions)) {
		query["ResultDescriptions"] = request.ResultDescriptions
	}

	if !tea.BoolValue(util.IsUnset(request.ResultSample)) {
		query["ResultSample"] = request.ResultSample
	}

	if !tea.BoolValue(util.IsUnset(request.ResultType)) {
		query["ResultType"] = request.ResultType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceConfig)) {
		query["ServiceConfig"] = request.ServiceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceParameters)) {
		query["ServiceParameters"] = request.ServiceParameters
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceParametersMap)) {
		query["ServiceParametersMap"] = request.ServiceParametersMap
	}

	if !tea.BoolValue(util.IsUnset(request.SystemParameters)) {
		query["SystemParameters"] = request.SystemParameters
	}

	if !tea.BoolValue(util.IsUnset(request.Visibility)) {
		query["Visibility"] = request.Visibility
	}

	if !tea.BoolValue(util.IsUnset(request.WebSocketApiType)) {
		query["WebSocketApiType"] = request.WebSocketApiType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   This operation is intended for API providers.
 * *   The name of each API within the same group must be unique.
 * *   Each request path within the same group must be unique.
 * *   The QPS limit on this operation is 50 per user.
 *
 * @param request CreateApiRequest
 * @return CreateApiResponse
 */
func (client *Client) CreateApi(request *CreateApiRequest) (_result *CreateApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateApiResponse{}
	_body, _err := client.CreateApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateApiGroupWithOptions(request *CreateApiGroupRequest, runtime *util.RuntimeOptions) (_result *CreateApiGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BasePath)) {
		query["BasePath"] = request.BasePath
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateApiGroup"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateApiGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateApiGroup(request *CreateApiGroupRequest) (_result *CreateApiGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateApiGroupResponse{}
	_body, _err := client.CreateApiGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateApiStageVariableWithOptions(request *CreateApiStageVariableRequest, runtime *util.RuntimeOptions) (_result *CreateApiStageVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageId)) {
		query["StageId"] = request.StageId
	}

	if !tea.BoolValue(util.IsUnset(request.StageRouteModel)) {
		query["StageRouteModel"] = request.StageRouteModel
	}

	if !tea.BoolValue(util.IsUnset(request.SupportRoute)) {
		query["SupportRoute"] = request.SupportRoute
	}

	if !tea.BoolValue(util.IsUnset(request.VariableName)) {
		query["VariableName"] = request.VariableName
	}

	if !tea.BoolValue(util.IsUnset(request.VariableValue)) {
		query["VariableValue"] = request.VariableValue
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateApiStageVariable"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateApiStageVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateApiStageVariable(request *CreateApiStageVariableRequest) (_result *CreateApiStageVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateApiStageVariableResponse{}
	_body, _err := client.CreateApiStageVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateAppWithOptions(request *CreateAppRequest, runtime *util.RuntimeOptions) (_result *CreateAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppCode)) {
		query["AppCode"] = request.AppCode
	}

	if !tea.BoolValue(util.IsUnset(request.AppKey)) {
		query["AppKey"] = request.AppKey
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.AppSecret)) {
		query["AppSecret"] = request.AppSecret
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateApp"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateApp(request *CreateAppRequest) (_result *CreateAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAppResponse{}
	_body, _err := client.CreateAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateBackendWithOptions(request *CreateBackendRequest, runtime *util.RuntimeOptions) (_result *CreateBackendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendName)) {
		query["BackendName"] = request.BackendName
	}

	if !tea.BoolValue(util.IsUnset(request.BackendType)) {
		query["BackendType"] = request.BackendType
	}

	if !tea.BoolValue(util.IsUnset(request.CreateEventBridgeServiceLinkedRole)) {
		query["CreateEventBridgeServiceLinkedRole"] = request.CreateEventBridgeServiceLinkedRole
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateBackend"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateBackendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateBackend(request *CreateBackendRequest) (_result *CreateBackendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBackendResponse{}
	_body, _err := client.CreateBackendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateBackendModelWithOptions(request *CreateBackendModelRequest, runtime *util.RuntimeOptions) (_result *CreateBackendModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.BackendModelData)) {
		query["BackendModelData"] = request.BackendModelData
	}

	if !tea.BoolValue(util.IsUnset(request.BackendType)) {
		query["BackendType"] = request.BackendType
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateBackendModel"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateBackendModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateBackendModel(request *CreateBackendModelRequest) (_result *CreateBackendModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBackendModelResponse{}
	_body, _err := client.CreateBackendModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDatasetWithOptions(request *CreateDatasetRequest, runtime *util.RuntimeOptions) (_result *CreateDatasetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetName)) {
		query["DatasetName"] = request.DatasetName
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetType)) {
		query["DatasetType"] = request.DatasetType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDataset"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDatasetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDataset(request *CreateDatasetRequest) (_result *CreateDatasetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDatasetResponse{}
	_body, _err := client.CreateDatasetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDatasetItemWithOptions(request *CreateDatasetItemRequest, runtime *util.RuntimeOptions) (_result *CreateDatasetItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		query["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiredTime)) {
		query["ExpiredTime"] = request.ExpiredTime
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Value)) {
		query["Value"] = request.Value
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDatasetItem"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDatasetItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDatasetItem(request *CreateDatasetItemRequest) (_result *CreateDatasetItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDatasetItemResponse{}
	_body, _err := client.CreateDatasetItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateInstanceWithOptions(request *CreateInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.HttpsPolicy)) {
		query["HttpsPolicy"] = request.HttpsPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceCidr)) {
		query["InstanceCidr"] = request.InstanceCidr
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceSpec)) {
		query["InstanceSpec"] = request.InstanceSpec
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.PricingCycle)) {
		query["PricingCycle"] = request.PricingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	if !tea.BoolValue(util.IsUnset(request.UserVpcId)) {
		query["UserVpcId"] = request.UserVpcId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneVSwitchSecurityGroup)) {
		query["ZoneVSwitchSecurityGroup"] = request.ZoneVSwitchSecurityGroup
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateInstance"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateInstance(request *CreateInstanceRequest) (_result *CreateInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CreateInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateIntranetDomainWithOptions(request *CreateIntranetDomainRequest, runtime *util.RuntimeOptions) (_result *CreateIntranetDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateIntranetDomain"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateIntranetDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateIntranetDomain(request *CreateIntranetDomainRequest) (_result *CreateIntranetDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateIntranetDomainResponse{}
	_body, _err := client.CreateIntranetDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateIpControlWithOptions(request *CreateIpControlRequest, runtime *util.RuntimeOptions) (_result *CreateIpControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlName)) {
		query["IpControlName"] = request.IpControlName
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlPolicys)) {
		query["IpControlPolicys"] = request.IpControlPolicys
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlType)) {
		query["IpControlType"] = request.IpControlType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateIpControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateIpControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateIpControl(request *CreateIpControlRequest) (_result *CreateIpControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateIpControlResponse{}
	_body, _err := client.CreateIpControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLogConfigWithOptions(request *CreateLogConfigRequest, runtime *util.RuntimeOptions) (_result *CreateLogConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LogType)) {
		query["LogType"] = request.LogType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SlsLogStore)) {
		query["SlsLogStore"] = request.SlsLogStore
	}

	if !tea.BoolValue(util.IsUnset(request.SlsProject)) {
		query["SlsProject"] = request.SlsProject
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLogConfig"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLogConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLogConfig(request *CreateLogConfigRequest) (_result *CreateLogConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLogConfigResponse{}
	_body, _err := client.CreateLogConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   For more information about the model definition, see [JSON Schema Draft 4](https://tools.ietf.org/html/draft-zyp-json-schema-04?spm=a2c4g.11186623.2.10.2e977ff7p4BpQd).
 * *   JSON Schema supports only element attributes of the Object type.
 *
 * @param request CreateModelRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateModelResponse
 */
func (client *Client) CreateModelWithOptions(request *CreateModelRequest, runtime *util.RuntimeOptions) (_result *CreateModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ModelName)) {
		query["ModelName"] = request.ModelName
	}

	if !tea.BoolValue(util.IsUnset(request.Schema)) {
		query["Schema"] = request.Schema
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateModel"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   For more information about the model definition, see [JSON Schema Draft 4](https://tools.ietf.org/html/draft-zyp-json-schema-04?spm=a2c4g.11186623.2.10.2e977ff7p4BpQd).
 * *   JSON Schema supports only element attributes of the Object type.
 *
 * @param request CreateModelRequest
 * @return CreateModelResponse
 */
func (client *Client) CreateModel(request *CreateModelRequest) (_result *CreateModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateModelResponse{}
	_body, _err := client.CreateModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMonitorGroupWithOptions(request *CreateMonitorGroupRequest, runtime *util.RuntimeOptions) (_result *CreateMonitorGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Auth)) {
		query["Auth"] = request.Auth
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RawMonitorGroupId)) {
		query["RawMonitorGroupId"] = request.RawMonitorGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMonitorGroup"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMonitorGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMonitorGroup(request *CreateMonitorGroupRequest) (_result *CreateMonitorGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMonitorGroupResponse{}
	_body, _err := client.CreateMonitorGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreatePluginWithOptions(request *CreatePluginRequest, runtime *util.RuntimeOptions) (_result *CreatePluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.PluginData)) {
		query["PluginData"] = request.PluginData
	}

	if !tea.BoolValue(util.IsUnset(request.PluginName)) {
		query["PluginName"] = request.PluginName
	}

	if !tea.BoolValue(util.IsUnset(request.PluginType)) {
		query["PluginType"] = request.PluginType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePlugin"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePluginResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreatePlugin(request *CreatePluginRequest) (_result *CreatePluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePluginResponse{}
	_body, _err := client.CreatePluginWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The Key value of the key. The value must be 6 to 20 characters in length and can contain letters, digits, and underscores (\\_). It must start with a letter.
 *
 * @param request CreateSignatureRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSignatureResponse
 */
func (client *Client) CreateSignatureWithOptions(request *CreateSignatureRequest, runtime *util.RuntimeOptions) (_result *CreateSignatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureKey)) {
		query["SignatureKey"] = request.SignatureKey
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureName)) {
		query["SignatureName"] = request.SignatureName
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureSecret)) {
		query["SignatureSecret"] = request.SignatureSecret
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSignature"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSignatureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The Key value of the key. The value must be 6 to 20 characters in length and can contain letters, digits, and underscores (\\_). It must start with a letter.
 *
 * @param request CreateSignatureRequest
 * @return CreateSignatureResponse
 */
func (client *Client) CreateSignature(request *CreateSignatureRequest) (_result *CreateSignatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSignatureResponse{}
	_body, _err := client.CreateSignatureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * ThrottlingTest
 *
 * @param request CreateTrafficControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTrafficControlResponse
 */
func (client *Client) CreateTrafficControlWithOptions(request *CreateTrafficControlRequest, runtime *util.RuntimeOptions) (_result *CreateTrafficControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiDefault)) {
		query["ApiDefault"] = request.ApiDefault
	}

	if !tea.BoolValue(util.IsUnset(request.AppDefault)) {
		query["AppDefault"] = request.AppDefault
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlName)) {
		query["TrafficControlName"] = request.TrafficControlName
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlUnit)) {
		query["TrafficControlUnit"] = request.TrafficControlUnit
	}

	if !tea.BoolValue(util.IsUnset(request.UserDefault)) {
		query["UserDefault"] = request.UserDefault
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTrafficControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTrafficControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * ThrottlingTest
 *
 * @param request CreateTrafficControlRequest
 * @return CreateTrafficControlResponse
 */
func (client *Client) CreateTrafficControl(request *CreateTrafficControlRequest) (_result *CreateTrafficControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTrafficControlResponse{}
	_body, _err := client.CreateTrafficControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAccessControlListWithOptions(request *DeleteAccessControlListRequest, runtime *util.RuntimeOptions) (_result *DeleteAccessControlListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAccessControlList"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAccessControlListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAccessControlList(request *DeleteAccessControlListRequest) (_result *DeleteAccessControlListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAccessControlListResponse{}
	_body, _err := client.DeleteAccessControlListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the request.
 *
 * @param request DeleteAllTrafficSpecialControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAllTrafficSpecialControlResponse
 */
func (client *Client) DeleteAllTrafficSpecialControlWithOptions(request *DeleteAllTrafficSpecialControlRequest, runtime *util.RuntimeOptions) (_result *DeleteAllTrafficSpecialControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAllTrafficSpecialControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAllTrafficSpecialControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the request.
 *
 * @param request DeleteAllTrafficSpecialControlRequest
 * @return DeleteAllTrafficSpecialControlResponse
 */
func (client *Client) DeleteAllTrafficSpecialControl(request *DeleteAllTrafficSpecialControlRequest) (_result *DeleteAllTrafficSpecialControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAllTrafficSpecialControlResponse{}
	_body, _err := client.DeleteAllTrafficSpecialControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteApiWithOptions(request *DeleteApiRequest, runtime *util.RuntimeOptions) (_result *DeleteApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteApi(request *DeleteApiRequest) (_result *DeleteApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteApiResponse{}
	_body, _err := client.DeleteApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteApiGroupWithOptions(request *DeleteApiGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteApiGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteApiGroup"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteApiGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteApiGroup(request *DeleteApiGroupRequest) (_result *DeleteApiGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteApiGroupResponse{}
	_body, _err := client.DeleteApiGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteApiStageVariableWithOptions(request *DeleteApiStageVariableRequest, runtime *util.RuntimeOptions) (_result *DeleteApiStageVariableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageId)) {
		query["StageId"] = request.StageId
	}

	if !tea.BoolValue(util.IsUnset(request.VariableName)) {
		query["VariableName"] = request.VariableName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteApiStageVariable"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteApiStageVariableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteApiStageVariable(request *DeleteApiStageVariableRequest) (_result *DeleteApiStageVariableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteApiStageVariableResponse{}
	_body, _err := client.DeleteApiStageVariableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAppWithOptions(request *DeleteAppRequest, runtime *util.RuntimeOptions) (_result *DeleteAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteApp"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteApp(request *DeleteAppRequest) (_result *DeleteAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAppResponse{}
	_body, _err := client.DeleteAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBackendWithOptions(request *DeleteBackendRequest, runtime *util.RuntimeOptions) (_result *DeleteBackendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteBackend"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteBackendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBackend(request *DeleteBackendRequest) (_result *DeleteBackendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBackendResponse{}
	_body, _err := client.DeleteBackendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBackendModelWithOptions(request *DeleteBackendModelRequest, runtime *util.RuntimeOptions) (_result *DeleteBackendModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.BackendModelId)) {
		query["BackendModelId"] = request.BackendModelId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteBackendModel"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteBackendModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBackendModel(request *DeleteBackendModelRequest) (_result *DeleteBackendModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBackendModelResponse{}
	_body, _err := client.DeleteBackendModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDatasetWithOptions(request *DeleteDatasetRequest, runtime *util.RuntimeOptions) (_result *DeleteDatasetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		query["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataset"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDatasetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDataset(request *DeleteDatasetRequest) (_result *DeleteDatasetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDatasetResponse{}
	_body, _err := client.DeleteDatasetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDatasetItemWithOptions(request *DeleteDatasetItemRequest, runtime *util.RuntimeOptions) (_result *DeleteDatasetItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		query["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetItemId)) {
		query["DatasetItemId"] = request.DatasetItemId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDatasetItem"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDatasetItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDatasetItem(request *DeleteDatasetItemRequest) (_result *DeleteDatasetItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDatasetItemResponse{}
	_body, _err := client.DeleteDatasetItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The custom domain name.
 *
 * @param request DeleteDomainRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDomainResponse
 */
func (client *Client) DeleteDomainWithOptions(request *DeleteDomainRequest, runtime *util.RuntimeOptions) (_result *DeleteDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDomain"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The custom domain name.
 *
 * @param request DeleteDomainRequest
 * @return DeleteDomainResponse
 */
func (client *Client) DeleteDomain(request *DeleteDomainRequest) (_result *DeleteDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDomainResponse{}
	_body, _err := client.DeleteDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDomainCertificateWithOptions(request *DeleteDomainCertificateRequest, runtime *util.RuntimeOptions) (_result *DeleteDomainCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CertificateId)) {
		query["CertificateId"] = request.CertificateId
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDomainCertificate"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDomainCertificateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDomainCertificate(request *DeleteDomainCertificateRequest) (_result *DeleteDomainCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDomainCertificateResponse{}
	_body, _err := client.DeleteDomainCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteInstanceWithOptions(request *DeleteInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteInstance"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteInstance(request *DeleteInstanceRequest) (_result *DeleteInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteInstanceResponse{}
	_body, _err := client.DeleteInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the request.
 *
 * @param request DeleteIpControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteIpControlResponse
 */
func (client *Client) DeleteIpControlWithOptions(request *DeleteIpControlRequest, runtime *util.RuntimeOptions) (_result *DeleteIpControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteIpControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteIpControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the request.
 *
 * @param request DeleteIpControlRequest
 * @return DeleteIpControlResponse
 */
func (client *Client) DeleteIpControl(request *DeleteIpControlRequest) (_result *DeleteIpControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteIpControlResponse{}
	_body, _err := client.DeleteIpControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLogConfigWithOptions(request *DeleteLogConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteLogConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LogType)) {
		query["LogType"] = request.LogType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLogConfig"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLogConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLogConfig(request *DeleteLogConfigRequest) (_result *DeleteLogConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLogConfigResponse{}
	_body, _err := client.DeleteLogConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteModelWithOptions(request *DeleteModelRequest, runtime *util.RuntimeOptions) (_result *DeleteModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ModelName)) {
		query["ModelName"] = request.ModelName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteModel"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteModel(request *DeleteModelRequest) (_result *DeleteModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteModelResponse{}
	_body, _err := client.DeleteModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMonitorGroupWithOptions(request *DeleteMonitorGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteMonitorGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RawMonitorGroupId)) {
		query["RawMonitorGroupId"] = request.RawMonitorGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMonitorGroup"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMonitorGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMonitorGroup(request *DeleteMonitorGroupRequest) (_result *DeleteMonitorGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMonitorGroupResponse{}
	_body, _err := client.DeleteMonitorGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeletePluginWithOptions(request *DeletePluginRequest, runtime *util.RuntimeOptions) (_result *DeletePluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PluginId)) {
		query["PluginId"] = request.PluginId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePlugin"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePluginResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeletePlugin(request *DeletePluginRequest) (_result *DeletePluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePluginResponse{}
	_body, _err := client.DeletePluginWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the request.
 *
 * @param request DeleteSignatureRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSignatureResponse
 */
func (client *Client) DeleteSignatureWithOptions(request *DeleteSignatureRequest, runtime *util.RuntimeOptions) (_result *DeleteSignatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureId)) {
		query["SignatureId"] = request.SignatureId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSignature"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSignatureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the request.
 *
 * @param request DeleteSignatureRequest
 * @return DeleteSignatureResponse
 */
func (client *Client) DeleteSignature(request *DeleteSignatureRequest) (_result *DeleteSignatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSignatureResponse{}
	_body, _err := client.DeleteSignatureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteTrafficControlWithOptions(request *DeleteTrafficControlRequest, runtime *util.RuntimeOptions) (_result *DeleteTrafficControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTrafficControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTrafficControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteTrafficControl(request *DeleteTrafficControlRequest) (_result *DeleteTrafficControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTrafficControlResponse{}
	_body, _err := client.DeleteTrafficControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The type of the special throttling policy. Valid values:
 * *   **APP**
 * *   **USER**
 *
 * @param request DeleteTrafficSpecialControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteTrafficSpecialControlResponse
 */
func (client *Client) DeleteTrafficSpecialControlWithOptions(request *DeleteTrafficSpecialControlRequest, runtime *util.RuntimeOptions) (_result *DeleteTrafficSpecialControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SpecialKey)) {
		query["SpecialKey"] = request.SpecialKey
	}

	if !tea.BoolValue(util.IsUnset(request.SpecialType)) {
		query["SpecialType"] = request.SpecialType
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTrafficSpecialControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTrafficSpecialControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The type of the special throttling policy. Valid values:
 * *   **APP**
 * *   **USER**
 *
 * @param request DeleteTrafficSpecialControlRequest
 * @return DeleteTrafficSpecialControlResponse
 */
func (client *Client) DeleteTrafficSpecialControl(request *DeleteTrafficSpecialControlRequest) (_result *DeleteTrafficSpecialControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTrafficSpecialControlResponse{}
	_body, _err := client.DeleteTrafficSpecialControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the API.
 *
 * @param request DeployApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeployApiResponse
 */
func (client *Client) DeployApiWithOptions(request *DeployApiRequest, runtime *util.RuntimeOptions) (_result *DeployApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeployApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeployApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the API.
 *
 * @param request DeployApiRequest
 * @return DeployApiResponse
 */
func (client *Client) DeployApi(request *DeployApiRequest) (_result *DeployApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeployApiResponse{}
	_body, _err := client.DeployApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAbolishApiTaskWithOptions(request *DescribeAbolishApiTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeAbolishApiTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperationUid)) {
		query["OperationUid"] = request.OperationUid
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAbolishApiTask"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAbolishApiTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAbolishApiTask(request *DescribeAbolishApiTaskRequest) (_result *DescribeAbolishApiTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAbolishApiTaskResponse{}
	_body, _err := client.DescribeAbolishApiTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAccessControlListAttributeWithOptions(request *DescribeAccessControlListAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeAccessControlListAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAccessControlListAttribute"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAccessControlListAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAccessControlListAttribute(request *DescribeAccessControlListAttributeRequest) (_result *DescribeAccessControlListAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccessControlListAttributeResponse{}
	_body, _err := client.DescribeAccessControlListAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAccessControlListsWithOptions(request *DescribeAccessControlListsRequest, runtime *util.RuntimeOptions) (_result *DescribeAccessControlListsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclName)) {
		query["AclName"] = request.AclName
	}

	if !tea.BoolValue(util.IsUnset(request.AddressIPVersion)) {
		query["AddressIPVersion"] = request.AddressIPVersion
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAccessControlLists"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAccessControlListsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAccessControlLists(request *DescribeAccessControlListsRequest) (_result *DescribeAccessControlListsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccessControlListsResponse{}
	_body, _err := client.DescribeAccessControlListsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the public key.
 *
 * @param request DescribeApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApiResponse
 */
func (client *Client) DescribeApiWithOptions(request *DescribeApiRequest, runtime *util.RuntimeOptions) (_result *DescribeApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the public key.
 *
 * @param request DescribeApiRequest
 * @return DescribeApiResponse
 */
func (client *Client) DescribeApi(request *DescribeApiRequest) (_result *DescribeApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiResponse{}
	_body, _err := client.DescribeApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeApiDocWithOptions(request *DescribeApiDocRequest, runtime *util.RuntimeOptions) (_result *DescribeApiDocResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiDoc"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiDocResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeApiDoc(request *DescribeApiDocRequest) (_result *DescribeApiDocResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiDocResponse{}
	_body, _err := client.DescribeApiDocWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   This operation is intended for API providers.
 *
 * @param request DescribeApiGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApiGroupResponse
 */
func (client *Client) DescribeApiGroupWithOptions(request *DescribeApiGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeApiGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiGroup"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   This operation is intended for API providers.
 *
 * @param request DescribeApiGroupRequest
 * @return DescribeApiGroupResponse
 */
func (client *Client) DescribeApiGroup(request *DescribeApiGroupRequest) (_result *DescribeApiGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiGroupResponse{}
	_body, _err := client.DescribeApiGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeApiGroupVpcWhitelistWithOptions(request *DescribeApiGroupVpcWhitelistRequest, runtime *util.RuntimeOptions) (_result *DescribeApiGroupVpcWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiGroupVpcWhitelist"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiGroupVpcWhitelistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeApiGroupVpcWhitelist(request *DescribeApiGroupVpcWhitelistRequest) (_result *DescribeApiGroupVpcWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiGroupVpcWhitelistResponse{}
	_body, _err := client.DescribeApiGroupVpcWhitelistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeApiGroupsWithOptions(request *DescribeApiGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeApiGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnableTagAuth)) {
		query["EnableTagAuth"] = request.EnableTagAuth
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		query["Sort"] = request.Sort
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiGroups"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeApiGroups(request *DescribeApiGroupsRequest) (_result *DescribeApiGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiGroupsResponse{}
	_body, _err := client.DescribeApiGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The name of the runtime environment. Valid values:
 * *   **RELEASE**
 * *   **TEST: the test environment**
 *
 * @param request DescribeApiHistoriesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApiHistoriesResponse
 */
func (client *Client) DescribeApiHistoriesWithOptions(request *DescribeApiHistoriesRequest, runtime *util.RuntimeOptions) (_result *DescribeApiHistoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiHistories"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiHistoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The name of the runtime environment. Valid values:
 * *   **RELEASE**
 * *   **TEST: the test environment**
 *
 * @param request DescribeApiHistoriesRequest
 * @return DescribeApiHistoriesResponse
 */
func (client *Client) DescribeApiHistories(request *DescribeApiHistoriesRequest) (_result *DescribeApiHistoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiHistoriesResponse{}
	_body, _err := client.DescribeApiHistoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can call this operation to query the definition of a specified published version of an API.
 * *   This operation is intended for API providers.
 * *   Each time an API is published, API Gateway records the publishing details, such as the time and the API definition. You can use the version number obtained from other API operations to query the details of an API definition that is published on a specific occasion.
 *
 * @param request DescribeApiHistoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApiHistoryResponse
 */
func (client *Client) DescribeApiHistoryWithOptions(request *DescribeApiHistoryRequest, runtime *util.RuntimeOptions) (_result *DescribeApiHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HistoryVersion)) {
		query["HistoryVersion"] = request.HistoryVersion
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiHistory"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiHistoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can call this operation to query the definition of a specified published version of an API.
 * *   This operation is intended for API providers.
 * *   Each time an API is published, API Gateway records the publishing details, such as the time and the API definition. You can use the version number obtained from other API operations to query the details of an API definition that is published on a specific occasion.
 *
 * @param request DescribeApiHistoryRequest
 * @return DescribeApiHistoryResponse
 */
func (client *Client) DescribeApiHistory(request *DescribeApiHistoryRequest) (_result *DescribeApiHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiHistoryResponse{}
	_body, _err := client.DescribeApiHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the API group.
 *
 * @param request DescribeApiIpControlsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApiIpControlsResponse
 */
func (client *Client) DescribeApiIpControlsWithOptions(request *DescribeApiIpControlsRequest, runtime *util.RuntimeOptions) (_result *DescribeApiIpControlsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiIpControls"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiIpControlsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the API group.
 *
 * @param request DescribeApiIpControlsRequest
 * @return DescribeApiIpControlsResponse
 */
func (client *Client) DescribeApiIpControls(request *DescribeApiIpControlsRequest) (_result *DescribeApiIpControlsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiIpControlsResponse{}
	_body, _err := client.DescribeApiIpControlsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeApiLatencyDataWithOptions(request *DescribeApiLatencyDataRequest, runtime *util.RuntimeOptions) (_result *DescribeApiLatencyDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiLatencyData"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiLatencyDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeApiLatencyData(request *DescribeApiLatencyDataRequest) (_result *DescribeApiLatencyDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiLatencyDataResponse{}
	_body, _err := client.DescribeApiLatencyDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeApiMarketAttributesWithOptions(request *DescribeApiMarketAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeApiMarketAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiMarketAttributes"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiMarketAttributesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeApiMarketAttributes(request *DescribeApiMarketAttributesRequest) (_result *DescribeApiMarketAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiMarketAttributesResponse{}
	_body, _err := client.DescribeApiMarketAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeApiQpsDataWithOptions(request *DescribeApiQpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeApiQpsDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiQpsData"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiQpsDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeApiQpsData(request *DescribeApiQpsDataRequest) (_result *DescribeApiQpsDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiQpsDataResponse{}
	_body, _err := client.DescribeApiQpsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The runtime environment. Valid values:
 * *   **RELEASE**
 * *   **TEST**
 *
 * @param request DescribeApiSignaturesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApiSignaturesResponse
 */
func (client *Client) DescribeApiSignaturesWithOptions(request *DescribeApiSignaturesRequest, runtime *util.RuntimeOptions) (_result *DescribeApiSignaturesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiSignatures"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiSignaturesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The runtime environment. Valid values:
 * *   **RELEASE**
 * *   **TEST**
 *
 * @param request DescribeApiSignaturesRequest
 * @return DescribeApiSignaturesResponse
 */
func (client *Client) DescribeApiSignatures(request *DescribeApiSignaturesRequest) (_result *DescribeApiSignaturesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiSignaturesResponse{}
	_body, _err := client.DescribeApiSignaturesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The runtime environment of the API. Valid values:
 * *   **RELEASE**
 * *   **TEST**: the test environment
 *
 * @param request DescribeApiTrafficControlsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApiTrafficControlsResponse
 */
func (client *Client) DescribeApiTrafficControlsWithOptions(request *DescribeApiTrafficControlsRequest, runtime *util.RuntimeOptions) (_result *DescribeApiTrafficControlsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiTrafficControls"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiTrafficControlsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The runtime environment of the API. Valid values:
 * *   **RELEASE**
 * *   **TEST**: the test environment
 *
 * @param request DescribeApiTrafficControlsRequest
 * @return DescribeApiTrafficControlsResponse
 */
func (client *Client) DescribeApiTrafficControls(request *DescribeApiTrafficControlsRequest) (_result *DescribeApiTrafficControlsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiTrafficControlsResponse{}
	_body, _err := client.DescribeApiTrafficControlsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeApiTrafficDataWithOptions(request *DescribeApiTrafficDataRequest, runtime *util.RuntimeOptions) (_result *DescribeApiTrafficDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApiTrafficData"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApiTrafficDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeApiTrafficData(request *DescribeApiTrafficDataRequest) (_result *DescribeApiTrafficDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApiTrafficDataResponse{}
	_body, _err := client.DescribeApiTrafficDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   This operation is intended for API callers.
 * *   This operation returns a list of all APIs that are being defined. The basic information about these APIs is also returned in the list.
 * *   This operation returns all APIs that are being edited, regardless of their environments. The returned definitions may be different from the definitions in the environments.
 *
 * @param request DescribeApisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApisResponse
 */
func (client *Client) DescribeApisWithOptions(request *DescribeApisRequest, runtime *util.RuntimeOptions) (_result *DescribeApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiMethod)) {
		query["ApiMethod"] = request.ApiMethod
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.ApiPath)) {
		query["ApiPath"] = request.ApiPath
	}

	if !tea.BoolValue(util.IsUnset(request.CatalogId)) {
		query["CatalogId"] = request.CatalogId
	}

	if !tea.BoolValue(util.IsUnset(request.EnableTagAuth)) {
		query["EnableTagAuth"] = request.EnableTagAuth
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.UnDeployed)) {
		query["UnDeployed"] = request.UnDeployed
	}

	if !tea.BoolValue(util.IsUnset(request.Visibility)) {
		query["Visibility"] = request.Visibility
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   This operation is intended for API callers.
 * *   This operation returns a list of all APIs that are being defined. The basic information about these APIs is also returned in the list.
 * *   This operation returns all APIs that are being edited, regardless of their environments. The returned definitions may be different from the definitions in the environments.
 *
 * @param request DescribeApisRequest
 * @return DescribeApisResponse
 */
func (client *Client) DescribeApis(request *DescribeApisRequest) (_result *DescribeApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApisResponse{}
	_body, _err := client.DescribeApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeApisByAppWithOptions(request *DescribeApisByAppRequest, runtime *util.RuntimeOptions) (_result *DescribeApisByAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.ApiUid)) {
		query["ApiUid"] = request.ApiUid
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Method)) {
		query["Method"] = request.Method
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		query["Path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApisByApp"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApisByAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeApisByApp(request *DescribeApisByAppRequest) (_result *DescribeApisByAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApisByAppResponse{}
	_body, _err := client.DescribeApisByAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeApisByBackendWithOptions(request *DescribeApisByBackendRequest, runtime *util.RuntimeOptions) (_result *DescribeApisByBackendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApisByBackend"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApisByBackendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeApisByBackend(request *DescribeApisByBackendRequest) (_result *DescribeApisByBackendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApisByBackendResponse{}
	_body, _err := client.DescribeApisByBackendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The number of entries to return on each page. Maximum value: 100. Default value: 10.
 *
 * @param request DescribeApisByIpControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApisByIpControlResponse
 */
func (client *Client) DescribeApisByIpControlWithOptions(request *DescribeApisByIpControlRequest, runtime *util.RuntimeOptions) (_result *DescribeApisByIpControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApisByIpControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApisByIpControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The number of entries to return on each page. Maximum value: 100. Default value: 10.
 *
 * @param request DescribeApisByIpControlRequest
 * @return DescribeApisByIpControlResponse
 */
func (client *Client) DescribeApisByIpControl(request *DescribeApisByIpControlRequest) (_result *DescribeApisByIpControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApisByIpControlResponse{}
	_body, _err := client.DescribeApisByIpControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the signature key.
 *
 * @param request DescribeApisBySignatureRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApisBySignatureResponse
 */
func (client *Client) DescribeApisBySignatureWithOptions(request *DescribeApisBySignatureRequest, runtime *util.RuntimeOptions) (_result *DescribeApisBySignatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureId)) {
		query["SignatureId"] = request.SignatureId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApisBySignature"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApisBySignatureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the signature key.
 *
 * @param request DescribeApisBySignatureRequest
 * @return DescribeApisBySignatureResponse
 */
func (client *Client) DescribeApisBySignature(request *DescribeApisBySignatureRequest) (_result *DescribeApisBySignatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApisBySignatureResponse{}
	_body, _err := client.DescribeApisBySignatureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The number of entries to return on each page. Maximum value: 100. Default value: 10.
 *
 * @param request DescribeApisByTrafficControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApisByTrafficControlResponse
 */
func (client *Client) DescribeApisByTrafficControlWithOptions(request *DescribeApisByTrafficControlRequest, runtime *util.RuntimeOptions) (_result *DescribeApisByTrafficControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApisByTrafficControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApisByTrafficControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The number of entries to return on each page. Maximum value: 100. Default value: 10.
 *
 * @param request DescribeApisByTrafficControlRequest
 * @return DescribeApisByTrafficControlResponse
 */
func (client *Client) DescribeApisByTrafficControl(request *DescribeApisByTrafficControlRequest) (_result *DescribeApisByTrafficControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApisByTrafficControlResponse{}
	_body, _err := client.DescribeApisByTrafficControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAppWithOptions(request *DescribeAppRequest, runtime *util.RuntimeOptions) (_result *DescribeAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApp"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeApp(request *DescribeAppRequest) (_result *DescribeAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAppResponse{}
	_body, _err := client.DescribeAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAppAttributesWithOptions(request *DescribeAppAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeAppAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppCode)) {
		query["AppCode"] = request.AppCode
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppKey)) {
		query["AppKey"] = request.AppKey
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.EnableTagAuth)) {
		query["EnableTagAuth"] = request.EnableTagAuth
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		query["Sort"] = request.Sort
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAppAttributes"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAppAttributesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAppAttributes(request *DescribeAppAttributesRequest) (_result *DescribeAppAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAppAttributesResponse{}
	_body, _err := client.DescribeAppAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAppSecurityWithOptions(request *DescribeAppSecurityRequest, runtime *util.RuntimeOptions) (_result *DescribeAppSecurityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAppSecurity"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAppSecurityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAppSecurity(request *DescribeAppSecurityRequest) (_result *DescribeAppSecurityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAppSecurityResponse{}
	_body, _err := client.DescribeAppSecurityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the app.
 *
 * @param request DescribeAppsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAppsResponse
 */
func (client *Client) DescribeAppsWithOptions(request *DescribeAppsRequest, runtime *util.RuntimeOptions) (_result *DescribeAppsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppOwner)) {
		query["AppOwner"] = request.AppOwner
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApps"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAppsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the app.
 *
 * @param request DescribeAppsRequest
 * @return DescribeAppsResponse
 */
func (client *Client) DescribeApps(request *DescribeAppsRequest) (_result *DescribeAppsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAppsResponse{}
	_body, _err := client.DescribeAppsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The number of the page to return. Pages start from page 1. Default value: 1.
 *
 * @param request DescribeAuthorizedApisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAuthorizedApisResponse
 */
func (client *Client) DescribeAuthorizedApisWithOptions(request *DescribeAuthorizedApisRequest, runtime *util.RuntimeOptions) (_result *DescribeAuthorizedApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAuthorizedApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAuthorizedApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The number of the page to return. Pages start from page 1. Default value: 1.
 *
 * @param request DescribeAuthorizedApisRequest
 * @return DescribeAuthorizedApisResponse
 */
func (client *Client) DescribeAuthorizedApis(request *DescribeAuthorizedApisRequest) (_result *DescribeAuthorizedApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAuthorizedApisResponse{}
	_body, _err := client.DescribeAuthorizedApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAuthorizedAppsWithOptions(request *DescribeAuthorizedAppsRequest, runtime *util.RuntimeOptions) (_result *DescribeAuthorizedAppsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.AppOwnerId)) {
		query["AppOwnerId"] = request.AppOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAuthorizedApps"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAuthorizedAppsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAuthorizedApps(request *DescribeAuthorizedAppsRequest) (_result *DescribeAuthorizedAppsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAuthorizedAppsResponse{}
	_body, _err := client.DescribeAuthorizedAppsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBackendInfoWithOptions(request *DescribeBackendInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeBackendInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBackendInfo"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBackendInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBackendInfo(request *DescribeBackendInfoRequest) (_result *DescribeBackendInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackendInfoResponse{}
	_body, _err := client.DescribeBackendInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBackendListWithOptions(request *DescribeBackendListRequest, runtime *util.RuntimeOptions) (_result *DescribeBackendListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendName)) {
		query["BackendName"] = request.BackendName
	}

	if !tea.BoolValue(util.IsUnset(request.BackendType)) {
		query["BackendType"] = request.BackendType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBackendList"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBackendListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBackendList(request *DescribeBackendListRequest) (_result *DescribeBackendListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackendListResponse{}
	_body, _err := client.DescribeBackendListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDatasetInfoWithOptions(request *DescribeDatasetInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeDatasetInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		query["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDatasetInfo"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDatasetInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDatasetInfo(request *DescribeDatasetInfoRequest) (_result *DescribeDatasetInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDatasetInfoResponse{}
	_body, _err := client.DescribeDatasetInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDatasetItemInfoWithOptions(request *DescribeDatasetItemInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeDatasetItemInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		query["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetItemId)) {
		query["DatasetItemId"] = request.DatasetItemId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Value)) {
		query["Value"] = request.Value
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDatasetItemInfo"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDatasetItemInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDatasetItemInfo(request *DescribeDatasetItemInfoRequest) (_result *DescribeDatasetItemInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDatasetItemInfoResponse{}
	_body, _err := client.DescribeDatasetItemInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDatasetItemListWithOptions(request *DescribeDatasetItemListRequest, runtime *util.RuntimeOptions) (_result *DescribeDatasetItemListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		query["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetItemIds)) {
		query["DatasetItemIds"] = request.DatasetItemIds
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDatasetItemList"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDatasetItemListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDatasetItemList(request *DescribeDatasetItemListRequest) (_result *DescribeDatasetItemListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDatasetItemListResponse{}
	_body, _err := client.DescribeDatasetItemListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDatasetListWithOptions(request *DescribeDatasetListRequest, runtime *util.RuntimeOptions) (_result *DescribeDatasetListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetIds)) {
		query["DatasetIds"] = request.DatasetIds
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDatasetList"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDatasetListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDatasetList(request *DescribeDatasetListRequest) (_result *DescribeDatasetListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDatasetListResponse{}
	_body, _err := client.DescribeDatasetListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDeployApiTaskWithOptions(request *DescribeDeployApiTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeDeployApiTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperationUid)) {
		query["OperationUid"] = request.OperationUid
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDeployApiTask"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDeployApiTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDeployApiTask(request *DescribeDeployApiTaskRequest) (_result *DescribeDeployApiTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDeployApiTaskResponse{}
	_body, _err := client.DescribeDeployApiTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDeployedApiWithOptions(request *DescribeDeployedApiRequest, runtime *util.RuntimeOptions) (_result *DescribeDeployedApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDeployedApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDeployedApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDeployedApi(request *DescribeDeployedApiRequest) (_result *DescribeDeployedApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDeployedApiResponse{}
	_body, _err := client.DescribeDeployedApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDeployedApisWithOptions(request *DescribeDeployedApisRequest, runtime *util.RuntimeOptions) (_result *DescribeDeployedApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiMethod)) {
		query["ApiMethod"] = request.ApiMethod
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.ApiPath)) {
		query["ApiPath"] = request.ApiPath
	}

	if !tea.BoolValue(util.IsUnset(request.EnableTagAuth)) {
		query["EnableTagAuth"] = request.EnableTagAuth
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDeployedApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDeployedApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDeployedApis(request *DescribeDeployedApisRequest) (_result *DescribeDeployedApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDeployedApisResponse{}
	_body, _err := client.DescribeDeployedApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the API group to which the domain name is bound. This ID is generated by the system and globally unique.
 *
 * @param request DescribeDomainRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDomainResponse
 */
func (client *Client) DescribeDomainWithOptions(request *DescribeDomainRequest, runtime *util.RuntimeOptions) (_result *DescribeDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDomain"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the API group to which the domain name is bound. This ID is generated by the system and globally unique.
 *
 * @param request DescribeDomainRequest
 * @return DescribeDomainResponse
 */
func (client *Client) DescribeDomain(request *DescribeDomainRequest) (_result *DescribeDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDomainResponse{}
	_body, _err := client.DescribeDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHistoryApisWithOptions(request *DescribeHistoryApisRequest, runtime *util.RuntimeOptions) (_result *DescribeHistoryApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHistoryApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHistoryApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHistoryApis(request *DescribeHistoryApisRequest) (_result *DescribeHistoryApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHistoryApisResponse{}
	_body, _err := client.DescribeHistoryApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImportOASTaskWithOptions(request *DescribeImportOASTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeImportOASTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperationId)) {
		query["OperationId"] = request.OperationId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImportOASTask"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImportOASTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImportOASTask(request *DescribeImportOASTaskRequest) (_result *DescribeImportOASTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImportOASTaskResponse{}
	_body, _err := client.DescribeImportOASTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceDropConnectionsWithOptions(request *DescribeInstanceDropConnectionsRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceDropConnectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SbcName)) {
		query["SbcName"] = request.SbcName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceDropConnections"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceDropConnectionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceDropConnections(request *DescribeInstanceDropConnectionsRequest) (_result *DescribeInstanceDropConnectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceDropConnectionsResponse{}
	_body, _err := client.DescribeInstanceDropConnectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceDropPacketWithOptions(request *DescribeInstanceDropPacketRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceDropPacketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SbcName)) {
		query["SbcName"] = request.SbcName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceDropPacket"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceDropPacketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceDropPacket(request *DescribeInstanceDropPacketRequest) (_result *DescribeInstanceDropPacketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceDropPacketResponse{}
	_body, _err := client.DescribeInstanceDropPacketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceHttpCodeWithOptions(request *DescribeInstanceHttpCodeRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceHttpCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceHttpCode"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceHttpCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceHttpCode(request *DescribeInstanceHttpCodeRequest) (_result *DescribeInstanceHttpCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceHttpCodeResponse{}
	_body, _err := client.DescribeInstanceHttpCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceLatencyWithOptions(request *DescribeInstanceLatencyRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceLatencyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceLatency"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceLatencyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceLatency(request *DescribeInstanceLatencyRequest) (_result *DescribeInstanceLatencyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceLatencyResponse{}
	_body, _err := client.DescribeInstanceLatencyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceNewConnectionsWithOptions(request *DescribeInstanceNewConnectionsRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceNewConnectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SbcName)) {
		query["SbcName"] = request.SbcName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceNewConnections"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceNewConnectionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceNewConnections(request *DescribeInstanceNewConnectionsRequest) (_result *DescribeInstanceNewConnectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceNewConnectionsResponse{}
	_body, _err := client.DescribeInstanceNewConnectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstancePacketsWithOptions(request *DescribeInstancePacketsRequest, runtime *util.RuntimeOptions) (_result *DescribeInstancePacketsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SbcName)) {
		query["SbcName"] = request.SbcName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstancePackets"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstancePacketsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstancePackets(request *DescribeInstancePacketsRequest) (_result *DescribeInstancePacketsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstancePacketsResponse{}
	_body, _err := client.DescribeInstancePacketsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceQpsWithOptions(request *DescribeInstanceQpsRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceQpsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceQps"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceQpsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceQps(request *DescribeInstanceQpsRequest) (_result *DescribeInstanceQpsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceQpsResponse{}
	_body, _err := client.DescribeInstanceQpsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceSlbConnectWithOptions(request *DescribeInstanceSlbConnectRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceSlbConnectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SbcName)) {
		query["SbcName"] = request.SbcName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceSlbConnect"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceSlbConnectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceSlbConnect(request *DescribeInstanceSlbConnectRequest) (_result *DescribeInstanceSlbConnectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceSlbConnectResponse{}
	_body, _err := client.DescribeInstanceSlbConnectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceTrafficWithOptions(request *DescribeInstanceTrafficRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceTrafficResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceTraffic"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceTrafficResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceTraffic(request *DescribeInstanceTrafficRequest) (_result *DescribeInstanceTrafficResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceTrafficResponse{}
	_body, _err := client.DescribeInstanceTrafficWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstancesWithOptions(request *DescribeInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnableTagAuthorization)) {
		query["EnableTagAuthorization"] = request.EnableTagAuthorization
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstances"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstances(request *DescribeInstancesRequest) (_result *DescribeInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstancesResponse{}
	_body, _err := client.DescribeInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeIpControlPolicyItemsWithOptions(request *DescribeIpControlPolicyItemsRequest, runtime *util.RuntimeOptions) (_result *DescribeIpControlPolicyItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyItemId)) {
		query["PolicyItemId"] = request.PolicyItemId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeIpControlPolicyItems"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeIpControlPolicyItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeIpControlPolicyItems(request *DescribeIpControlPolicyItemsRequest) (_result *DescribeIpControlPolicyItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIpControlPolicyItemsResponse{}
	_body, _err := client.DescribeIpControlPolicyItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   This operation is intended for API providers.
 * *   This operation is used to query the ACLs in a region. Region is a system parameter.
 * *   You can filter the query results by ACL ID, name, or type.
 * *   This operation cannot be used to query specific policies. If you want to query specific policies, call the [DescribeIpControlPolicyItems](~~65532~~) operation.
 *
 * @param request DescribeIpControlsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeIpControlsResponse
 */
func (client *Client) DescribeIpControlsWithOptions(request *DescribeIpControlsRequest, runtime *util.RuntimeOptions) (_result *DescribeIpControlsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlName)) {
		query["IpControlName"] = request.IpControlName
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlType)) {
		query["IpControlType"] = request.IpControlType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeIpControls"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeIpControlsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   This operation is intended for API providers.
 * *   This operation is used to query the ACLs in a region. Region is a system parameter.
 * *   You can filter the query results by ACL ID, name, or type.
 * *   This operation cannot be used to query specific policies. If you want to query specific policies, call the [DescribeIpControlPolicyItems](~~65532~~) operation.
 *
 * @param request DescribeIpControlsRequest
 * @return DescribeIpControlsResponse
 */
func (client *Client) DescribeIpControls(request *DescribeIpControlsRequest) (_result *DescribeIpControlsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeIpControlsResponse{}
	_body, _err := client.DescribeIpControlsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLogConfigWithOptions(request *DescribeLogConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeLogConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LogType)) {
		query["LogType"] = request.LogType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLogConfig"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLogConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLogConfig(request *DescribeLogConfigRequest) (_result *DescribeLogConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLogConfigResponse{}
	_body, _err := client.DescribeLogConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMarketRemainsQuotaWithOptions(request *DescribeMarketRemainsQuotaRequest, runtime *util.RuntimeOptions) (_result *DescribeMarketRemainsQuotaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMarketRemainsQuota"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMarketRemainsQuotaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMarketRemainsQuota(request *DescribeMarketRemainsQuotaRequest) (_result *DescribeMarketRemainsQuotaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMarketRemainsQuotaResponse{}
	_body, _err := client.DescribeMarketRemainsQuotaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The name of the model.
 *
 * @param request DescribeModelsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeModelsResponse
 */
func (client *Client) DescribeModelsWithOptions(request *DescribeModelsRequest, runtime *util.RuntimeOptions) (_result *DescribeModelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ModelId)) {
		query["ModelId"] = request.ModelId
	}

	if !tea.BoolValue(util.IsUnset(request.ModelName)) {
		query["ModelName"] = request.ModelName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeModels"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeModelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The name of the model.
 *
 * @param request DescribeModelsRequest
 * @return DescribeModelsResponse
 */
func (client *Client) DescribeModels(request *DescribeModelsRequest) (_result *DescribeModelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeModelsResponse{}
	_body, _err := client.DescribeModelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePluginApisWithOptions(request *DescribePluginApisRequest, runtime *util.RuntimeOptions) (_result *DescribePluginApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Method)) {
		query["Method"] = request.Method
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		query["Path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.PluginId)) {
		query["PluginId"] = request.PluginId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePluginApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePluginApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePluginApis(request *DescribePluginApisRequest) (_result *DescribePluginApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePluginApisResponse{}
	_body, _err := client.DescribePluginApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePluginSchemasWithOptions(request *DescribePluginSchemasRequest, runtime *util.RuntimeOptions) (_result *DescribePluginSchemasResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePluginSchemas"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePluginSchemasResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePluginSchemas(request *DescribePluginSchemasRequest) (_result *DescribePluginSchemasResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePluginSchemasResponse{}
	_body, _err := client.DescribePluginSchemasWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePluginTemplatesWithOptions(request *DescribePluginTemplatesRequest, runtime *util.RuntimeOptions) (_result *DescribePluginTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.PluginName)) {
		query["PluginName"] = request.PluginName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePluginTemplates"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePluginTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePluginTemplates(request *DescribePluginTemplatesRequest) (_result *DescribePluginTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePluginTemplatesResponse{}
	_body, _err := client.DescribePluginTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePluginsWithOptions(request *DescribePluginsRequest, runtime *util.RuntimeOptions) (_result *DescribePluginsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PluginId)) {
		query["PluginId"] = request.PluginId
	}

	if !tea.BoolValue(util.IsUnset(request.PluginName)) {
		query["PluginName"] = request.PluginName
	}

	if !tea.BoolValue(util.IsUnset(request.PluginType)) {
		query["PluginType"] = request.PluginType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePlugins"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePluginsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePlugins(request *DescribePluginsRequest) (_result *DescribePluginsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePluginsResponse{}
	_body, _err := client.DescribePluginsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   This operation is intended for API callers.
 * *   This operation supports pagination.
 *
 * @param request DescribePluginsByApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePluginsByApiResponse
 */
func (client *Client) DescribePluginsByApiWithOptions(request *DescribePluginsByApiRequest, runtime *util.RuntimeOptions) (_result *DescribePluginsByApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePluginsByApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePluginsByApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   This operation is intended for API callers.
 * *   This operation supports pagination.
 *
 * @param request DescribePluginsByApiRequest
 * @return DescribePluginsByApiResponse
 */
func (client *Client) DescribePluginsByApi(request *DescribePluginsByApiRequest) (_result *DescribePluginsByApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePluginsByApiResponse{}
	_body, _err := client.DescribePluginsByApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePurchasedApiGroupWithOptions(request *DescribePurchasedApiGroupRequest, runtime *util.RuntimeOptions) (_result *DescribePurchasedApiGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePurchasedApiGroup"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePurchasedApiGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePurchasedApiGroup(request *DescribePurchasedApiGroupRequest) (_result *DescribePurchasedApiGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePurchasedApiGroupResponse{}
	_body, _err := client.DescribePurchasedApiGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePurchasedApiGroupsWithOptions(request *DescribePurchasedApiGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribePurchasedApiGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePurchasedApiGroups"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePurchasedApiGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePurchasedApiGroups(request *DescribePurchasedApiGroupsRequest) (_result *DescribePurchasedApiGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePurchasedApiGroupsResponse{}
	_body, _err := client.DescribePurchasedApiGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePurchasedApisWithOptions(request *DescribePurchasedApisRequest, runtime *util.RuntimeOptions) (_result *DescribePurchasedApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.Visibility)) {
		query["Visibility"] = request.Visibility
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePurchasedApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePurchasedApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePurchasedApis(request *DescribePurchasedApisRequest) (_result *DescribePurchasedApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePurchasedApisResponse{}
	_body, _err := client.DescribePurchasedApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRegionsWithOptions(request *DescribeRegionsRequest, runtime *util.RuntimeOptions) (_result *DescribeRegionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRegions"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRegions(request *DescribeRegionsRequest) (_result *DescribeRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DescribeRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The IDs of the keys to query.
 *
 * @param request DescribeSignaturesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSignaturesResponse
 */
func (client *Client) DescribeSignaturesWithOptions(request *DescribeSignaturesRequest, runtime *util.RuntimeOptions) (_result *DescribeSignaturesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureId)) {
		query["SignatureId"] = request.SignatureId
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureName)) {
		query["SignatureName"] = request.SignatureName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSignatures"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSignaturesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The IDs of the keys to query.
 *
 * @param request DescribeSignaturesRequest
 * @return DescribeSignaturesResponse
 */
func (client *Client) DescribeSignatures(request *DescribeSignaturesRequest) (_result *DescribeSignaturesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSignaturesResponse{}
	_body, _err := client.DescribeSignaturesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the group to which the API belongs.
 *
 * @param request DescribeSignaturesByApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSignaturesByApiResponse
 */
func (client *Client) DescribeSignaturesByApiWithOptions(request *DescribeSignaturesByApiRequest, runtime *util.RuntimeOptions) (_result *DescribeSignaturesByApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSignaturesByApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSignaturesByApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the group to which the API belongs.
 *
 * @param request DescribeSignaturesByApiRequest
 * @return DescribeSignaturesByApiResponse
 */
func (client *Client) DescribeSignaturesByApi(request *DescribeSignaturesByApiRequest) (_result *DescribeSignaturesByApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSignaturesByApiResponse{}
	_body, _err := client.DescribeSignaturesByApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The returned information about system parameters. It is an array that consists of SystemParam data.
 *
 * @param request DescribeSystemParametersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSystemParametersResponse
 */
func (client *Client) DescribeSystemParametersWithOptions(request *DescribeSystemParametersRequest, runtime *util.RuntimeOptions) (_result *DescribeSystemParametersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSystemParameters"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSystemParametersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The returned information about system parameters. It is an array that consists of SystemParam data.
 *
 * @param request DescribeSystemParametersRequest
 * @return DescribeSystemParametersResponse
 */
func (client *Client) DescribeSystemParameters(request *DescribeSystemParametersRequest) (_result *DescribeSystemParametersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSystemParametersResponse{}
	_body, _err := client.DescribeSystemParametersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The specified group ID. This parameter must be specified together with ApiId and StageName.
 *
 * @param request DescribeTrafficControlsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTrafficControlsResponse
 */
func (client *Client) DescribeTrafficControlsWithOptions(request *DescribeTrafficControlsRequest, runtime *util.RuntimeOptions) (_result *DescribeTrafficControlsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlName)) {
		query["TrafficControlName"] = request.TrafficControlName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTrafficControls"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTrafficControlsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The specified group ID. This parameter must be specified together with ApiId and StageName.
 *
 * @param request DescribeTrafficControlsRequest
 * @return DescribeTrafficControlsResponse
 */
func (client *Client) DescribeTrafficControls(request *DescribeTrafficControlsRequest) (_result *DescribeTrafficControlsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTrafficControlsResponse{}
	_body, _err := client.DescribeTrafficControlsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the API.
 *
 * @param request DescribeTrafficControlsByApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTrafficControlsByApiResponse
 */
func (client *Client) DescribeTrafficControlsByApiWithOptions(request *DescribeTrafficControlsByApiRequest, runtime *util.RuntimeOptions) (_result *DescribeTrafficControlsByApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTrafficControlsByApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTrafficControlsByApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the API.
 *
 * @param request DescribeTrafficControlsByApiRequest
 * @return DescribeTrafficControlsByApiResponse
 */
func (client *Client) DescribeTrafficControlsByApi(request *DescribeTrafficControlsByApiRequest) (_result *DescribeTrafficControlsByApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTrafficControlsByApiResponse{}
	_body, _err := client.DescribeTrafficControlsByApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUpdateBackendTaskWithOptions(request *DescribeUpdateBackendTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeUpdateBackendTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperationUid)) {
		query["OperationUid"] = request.OperationUid
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUpdateBackendTask"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUpdateBackendTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUpdateBackendTask(request *DescribeUpdateBackendTaskRequest) (_result *DescribeUpdateBackendTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUpdateBackendTaskResponse{}
	_body, _err := client.DescribeUpdateBackendTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUpdateVpcInfoTaskWithOptions(request *DescribeUpdateVpcInfoTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeUpdateVpcInfoTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperationUid)) {
		query["OperationUid"] = request.OperationUid
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUpdateVpcInfoTask"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUpdateVpcInfoTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUpdateVpcInfoTask(request *DescribeUpdateVpcInfoTaskRequest) (_result *DescribeUpdateVpcInfoTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUpdateVpcInfoTaskResponse{}
	_body, _err := client.DescribeUpdateVpcInfoTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVpcAccessesWithOptions(request *DescribeVpcAccessesRequest, runtime *util.RuntimeOptions) (_result *DescribeVpcAccessesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.VpcAccessId)) {
		query["VpcAccessId"] = request.VpcAccessId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVpcAccesses"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVpcAccessesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVpcAccesses(request *DescribeVpcAccessesRequest) (_result *DescribeVpcAccessesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVpcAccessesResponse{}
	_body, _err := client.DescribeVpcAccessesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeZonesWithOptions(request *DescribeZonesRequest, runtime *util.RuntimeOptions) (_result *DescribeZonesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeZones"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeZonesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeZones(request *DescribeZonesRequest) (_result *DescribeZonesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeZonesResponse{}
	_body, _err := client.DescribeZonesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DetachPluginWithOptions(request *DetachPluginRequest, runtime *util.RuntimeOptions) (_result *DetachPluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PluginId)) {
		query["PluginId"] = request.PluginId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachPlugin"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DetachPluginResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DetachPlugin(request *DetachPluginRequest) (_result *DetachPluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachPluginResponse{}
	_body, _err := client.DetachPluginWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableInstanceAccessControlWithOptions(request *DisableInstanceAccessControlRequest, runtime *util.RuntimeOptions) (_result *DisableInstanceAccessControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.AddressIPVersion)) {
		query["AddressIPVersion"] = request.AddressIPVersion
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableInstanceAccessControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableInstanceAccessControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableInstanceAccessControl(request *DisableInstanceAccessControlRequest) (_result *DisableInstanceAccessControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableInstanceAccessControlResponse{}
	_body, _err := client.DisableInstanceAccessControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DryRunSwaggerWithOptions(tmpReq *DryRunSwaggerRequest, runtime *util.RuntimeOptions) (_result *DryRunSwaggerResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DryRunSwaggerShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.GlobalCondition)) {
		request.GlobalConditionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.GlobalCondition, tea.String("GlobalCondition"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataFormat)) {
		query["DataFormat"] = request.DataFormat
	}

	if !tea.BoolValue(util.IsUnset(request.GlobalConditionShrink)) {
		query["GlobalCondition"] = request.GlobalConditionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Overwrite)) {
		query["Overwrite"] = request.Overwrite
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Data)) {
		body["Data"] = request.Data
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DryRunSwagger"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DryRunSwaggerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DryRunSwagger(request *DryRunSwaggerRequest) (_result *DryRunSwaggerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DryRunSwaggerResponse{}
	_body, _err := client.DryRunSwaggerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableInstanceAccessControlWithOptions(request *EnableInstanceAccessControlRequest, runtime *util.RuntimeOptions) (_result *EnableInstanceAccessControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.AclType)) {
		query["AclType"] = request.AclType
	}

	if !tea.BoolValue(util.IsUnset(request.AddressIPVersion)) {
		query["AddressIPVersion"] = request.AddressIPVersion
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableInstanceAccessControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableInstanceAccessControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableInstanceAccessControl(request *EnableInstanceAccessControlRequest) (_result *EnableInstanceAccessControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableInstanceAccessControlResponse{}
	_body, _err := client.EnableInstanceAccessControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportOASWithOptions(request *ImportOASRequest, runtime *util.RuntimeOptions) (_result *ImportOASResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthType)) {
		query["AuthType"] = request.AuthType
	}

	if !tea.BoolValue(util.IsUnset(request.BackendName)) {
		query["BackendName"] = request.BackendName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.IgnoreWarning)) {
		query["IgnoreWarning"] = request.IgnoreWarning
	}

	if !tea.BoolValue(util.IsUnset(request.OASVersion)) {
		query["OASVersion"] = request.OASVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Overwrite)) {
		query["Overwrite"] = request.Overwrite
	}

	if !tea.BoolValue(util.IsUnset(request.RequestMode)) {
		query["RequestMode"] = request.RequestMode
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SkipDryRun)) {
		query["SkipDryRun"] = request.SkipDryRun
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Data)) {
		body["Data"] = request.Data
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportOAS"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportOASResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportOAS(request *ImportOASRequest) (_result *ImportOASResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportOASResponse{}
	_body, _err := client.ImportOASWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * 0009db9c828549768a200320714b8930
 *
 * @param tmpReq ImportSwaggerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ImportSwaggerResponse
 */
func (client *Client) ImportSwaggerWithOptions(tmpReq *ImportSwaggerRequest, runtime *util.RuntimeOptions) (_result *ImportSwaggerResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ImportSwaggerShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.GlobalCondition)) {
		request.GlobalConditionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.GlobalCondition, tea.String("GlobalCondition"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataFormat)) {
		query["DataFormat"] = request.DataFormat
	}

	if !tea.BoolValue(util.IsUnset(request.DryRun)) {
		query["DryRun"] = request.DryRun
	}

	if !tea.BoolValue(util.IsUnset(request.GlobalConditionShrink)) {
		query["GlobalCondition"] = request.GlobalConditionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Overwrite)) {
		query["Overwrite"] = request.Overwrite
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Data)) {
		body["Data"] = request.Data
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportSwagger"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportSwaggerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * 0009db9c828549768a200320714b8930
 *
 * @param request ImportSwaggerRequest
 * @return ImportSwaggerResponse
 */
func (client *Client) ImportSwagger(request *ImportSwaggerRequest) (_result *ImportSwaggerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportSwaggerResponse{}
	_body, _err := client.ImportSwaggerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTagResources"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * 58928
 *
 * @param request ModifyApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyApiResponse
 */
func (client *Client) ModifyApiWithOptions(request *ModifyApiRequest, runtime *util.RuntimeOptions) (_result *ModifyApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllowSignatureMethod)) {
		query["AllowSignatureMethod"] = request.AllowSignatureMethod
	}

	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.AppCodeAuthType)) {
		query["AppCodeAuthType"] = request.AppCodeAuthType
	}

	if !tea.BoolValue(util.IsUnset(request.AuthType)) {
		query["AuthType"] = request.AuthType
	}

	if !tea.BoolValue(util.IsUnset(request.BackendEnable)) {
		query["BackendEnable"] = request.BackendEnable
	}

	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.ConstantParameters)) {
		query["ConstantParameters"] = request.ConstantParameters
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DisableInternet)) {
		query["DisableInternet"] = request.DisableInternet
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorCodeSamples)) {
		query["ErrorCodeSamples"] = request.ErrorCodeSamples
	}

	if !tea.BoolValue(util.IsUnset(request.FailResultSample)) {
		query["FailResultSample"] = request.FailResultSample
	}

	if !tea.BoolValue(util.IsUnset(request.ForceNonceCheck)) {
		query["ForceNonceCheck"] = request.ForceNonceCheck
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OpenIdConnectConfig)) {
		query["OpenIdConnectConfig"] = request.OpenIdConnectConfig
	}

	if !tea.BoolValue(util.IsUnset(request.RequestConfig)) {
		query["RequestConfig"] = request.RequestConfig
	}

	if !tea.BoolValue(util.IsUnset(request.RequestParameters)) {
		query["RequestParameters"] = request.RequestParameters
	}

	if !tea.BoolValue(util.IsUnset(request.ResultBodyModel)) {
		query["ResultBodyModel"] = request.ResultBodyModel
	}

	if !tea.BoolValue(util.IsUnset(request.ResultDescriptions)) {
		query["ResultDescriptions"] = request.ResultDescriptions
	}

	if !tea.BoolValue(util.IsUnset(request.ResultSample)) {
		query["ResultSample"] = request.ResultSample
	}

	if !tea.BoolValue(util.IsUnset(request.ResultType)) {
		query["ResultType"] = request.ResultType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceConfig)) {
		query["ServiceConfig"] = request.ServiceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceParameters)) {
		query["ServiceParameters"] = request.ServiceParameters
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceParametersMap)) {
		query["ServiceParametersMap"] = request.ServiceParametersMap
	}

	if !tea.BoolValue(util.IsUnset(request.SystemParameters)) {
		query["SystemParameters"] = request.SystemParameters
	}

	if !tea.BoolValue(util.IsUnset(request.Visibility)) {
		query["Visibility"] = request.Visibility
	}

	if !tea.BoolValue(util.IsUnset(request.WebSocketApiType)) {
		query["WebSocketApiType"] = request.WebSocketApiType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * 58928
 *
 * @param request ModifyApiRequest
 * @return ModifyApiResponse
 */
func (client *Client) ModifyApi(request *ModifyApiRequest) (_result *ModifyApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyApiResponse{}
	_body, _err := client.ModifyApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyApiConfigurationWithOptions(request *ModifyApiConfigurationRequest, runtime *util.RuntimeOptions) (_result *ModifyApiConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllowSignatureMethod)) {
		query["AllowSignatureMethod"] = request.AllowSignatureMethod
	}

	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.ApiName)) {
		query["ApiName"] = request.ApiName
	}

	if !tea.BoolValue(util.IsUnset(request.AppCodeAuthType)) {
		query["AppCodeAuthType"] = request.AppCodeAuthType
	}

	if !tea.BoolValue(util.IsUnset(request.AuthType)) {
		query["AuthType"] = request.AuthType
	}

	if !tea.BoolValue(util.IsUnset(request.BackendName)) {
		query["BackendName"] = request.BackendName
	}

	if !tea.BoolValue(util.IsUnset(request.BodyFormat)) {
		query["BodyFormat"] = request.BodyFormat
	}

	if !tea.BoolValue(util.IsUnset(request.BodyModel)) {
		query["BodyModel"] = request.BodyModel
	}

	if !tea.BoolValue(util.IsUnset(request.ContentTypeCategory)) {
		query["ContentTypeCategory"] = request.ContentTypeCategory
	}

	if !tea.BoolValue(util.IsUnset(request.ContentTypeValue)) {
		query["ContentTypeValue"] = request.ContentTypeValue
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DisableInternet)) {
		query["DisableInternet"] = request.DisableInternet
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorCodeSamples)) {
		query["ErrorCodeSamples"] = request.ErrorCodeSamples
	}

	if !tea.BoolValue(util.IsUnset(request.FailResultSample)) {
		query["FailResultSample"] = request.FailResultSample
	}

	if !tea.BoolValue(util.IsUnset(request.ForceNonceCheck)) {
		query["ForceNonceCheck"] = request.ForceNonceCheck
	}

	if !tea.BoolValue(util.IsUnset(request.FunctionComputeConfig)) {
		query["FunctionComputeConfig"] = request.FunctionComputeConfig
	}

	if !tea.BoolValue(util.IsUnset(request.HttpConfig)) {
		query["HttpConfig"] = request.HttpConfig
	}

	if !tea.BoolValue(util.IsUnset(request.MockConfig)) {
		query["MockConfig"] = request.MockConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ModelName)) {
		query["ModelName"] = request.ModelName
	}

	if !tea.BoolValue(util.IsUnset(request.OssConfig)) {
		query["OssConfig"] = request.OssConfig
	}

	if !tea.BoolValue(util.IsUnset(request.PostBodyDescription)) {
		query["PostBodyDescription"] = request.PostBodyDescription
	}

	if !tea.BoolValue(util.IsUnset(request.RequestHttpMethod)) {
		query["RequestHttpMethod"] = request.RequestHttpMethod
	}

	if !tea.BoolValue(util.IsUnset(request.RequestMode)) {
		query["RequestMode"] = request.RequestMode
	}

	if !tea.BoolValue(util.IsUnset(request.RequestParameters)) {
		query["RequestParameters"] = request.RequestParameters
	}

	if !tea.BoolValue(util.IsUnset(request.RequestPath)) {
		query["RequestPath"] = request.RequestPath
	}

	if !tea.BoolValue(util.IsUnset(request.RequestProtocol)) {
		query["RequestProtocol"] = request.RequestProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.ResultSample)) {
		query["ResultSample"] = request.ResultSample
	}

	if !tea.BoolValue(util.IsUnset(request.ResultType)) {
		query["ResultType"] = request.ResultType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceParameters)) {
		query["ServiceParameters"] = request.ServiceParameters
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceParametersMap)) {
		query["ServiceParametersMap"] = request.ServiceParametersMap
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceProtocol)) {
		query["ServiceProtocol"] = request.ServiceProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceTimeout)) {
		query["ServiceTimeout"] = request.ServiceTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.UseBackendService)) {
		query["UseBackendService"] = request.UseBackendService
	}

	if !tea.BoolValue(util.IsUnset(request.Visibility)) {
		query["Visibility"] = request.Visibility
	}

	if !tea.BoolValue(util.IsUnset(request.VpcConfig)) {
		query["VpcConfig"] = request.VpcConfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyApiConfiguration"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyApiConfigurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyApiConfiguration(request *ModifyApiConfigurationRequest) (_result *ModifyApiConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyApiConfigurationResponse{}
	_body, _err := client.ModifyApiConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyApiGroupWithOptions(request *ModifyApiGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyApiGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BasePath)) {
		query["BasePath"] = request.BasePath
	}

	if !tea.BoolValue(util.IsUnset(request.CompatibleFlags)) {
		query["CompatibleFlags"] = request.CompatibleFlags
	}

	if !tea.BoolValue(util.IsUnset(request.CustomTraceConfig)) {
		query["CustomTraceConfig"] = request.CustomTraceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.CustomerConfigs)) {
		query["CustomerConfigs"] = request.CustomerConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.DefaultDomain)) {
		query["DefaultDomain"] = request.DefaultDomain
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.PassthroughHeaders)) {
		query["PassthroughHeaders"] = request.PassthroughHeaders
	}

	if !tea.BoolValue(util.IsUnset(request.RpcPattern)) {
		query["RpcPattern"] = request.RpcPattern
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.UserLogConfig)) {
		query["UserLogConfig"] = request.UserLogConfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyApiGroup"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyApiGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyApiGroup(request *ModifyApiGroupRequest) (_result *ModifyApiGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyApiGroupResponse{}
	_body, _err := client.ModifyApiGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyApiGroupVpcWhitelistWithOptions(request *ModifyApiGroupVpcWhitelistRequest, runtime *util.RuntimeOptions) (_result *ModifyApiGroupVpcWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.VpcIds)) {
		query["VpcIds"] = request.VpcIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyApiGroupVpcWhitelist"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyApiGroupVpcWhitelistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyApiGroupVpcWhitelist(request *ModifyApiGroupVpcWhitelistRequest) (_result *ModifyApiGroupVpcWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyApiGroupVpcWhitelistResponse{}
	_body, _err := client.ModifyApiGroupVpcWhitelistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyAppWithOptions(request *ModifyAppRequest, runtime *util.RuntimeOptions) (_result *ModifyAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyApp"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyApp(request *ModifyAppRequest) (_result *ModifyAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAppResponse{}
	_body, _err := client.ModifyAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyBackendWithOptions(request *ModifyBackendRequest, runtime *util.RuntimeOptions) (_result *ModifyBackendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.BackendName)) {
		query["BackendName"] = request.BackendName
	}

	if !tea.BoolValue(util.IsUnset(request.BackendType)) {
		query["BackendType"] = request.BackendType
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyBackend"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyBackendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyBackend(request *ModifyBackendRequest) (_result *ModifyBackendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBackendResponse{}
	_body, _err := client.ModifyBackendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyBackendModelWithOptions(request *ModifyBackendModelRequest, runtime *util.RuntimeOptions) (_result *ModifyBackendModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendId)) {
		query["BackendId"] = request.BackendId
	}

	if !tea.BoolValue(util.IsUnset(request.BackendModelData)) {
		query["BackendModelData"] = request.BackendModelData
	}

	if !tea.BoolValue(util.IsUnset(request.BackendModelId)) {
		query["BackendModelId"] = request.BackendModelId
	}

	if !tea.BoolValue(util.IsUnset(request.BackendType)) {
		query["BackendType"] = request.BackendType
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyBackendModel"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyBackendModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyBackendModel(request *ModifyBackendModelRequest) (_result *ModifyBackendModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBackendModelResponse{}
	_body, _err := client.ModifyBackendModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDatasetWithOptions(request *ModifyDatasetRequest, runtime *util.RuntimeOptions) (_result *ModifyDatasetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		query["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetName)) {
		query["DatasetName"] = request.DatasetName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDataset"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDatasetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDataset(request *ModifyDatasetRequest) (_result *ModifyDatasetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDatasetResponse{}
	_body, _err := client.ModifyDatasetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDatasetItemWithOptions(request *ModifyDatasetItemRequest, runtime *util.RuntimeOptions) (_result *ModifyDatasetItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DatasetId)) {
		query["DatasetId"] = request.DatasetId
	}

	if !tea.BoolValue(util.IsUnset(request.DatasetItemId)) {
		query["DatasetItemId"] = request.DatasetItemId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiredTime)) {
		query["ExpiredTime"] = request.ExpiredTime
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDatasetItem"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDatasetItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDatasetItem(request *ModifyDatasetItemRequest) (_result *ModifyDatasetItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDatasetItemResponse{}
	_body, _err := client.ModifyDatasetItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceSpecWithOptions(request *ModifyInstanceSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceSpec)) {
		query["InstanceSpec"] = request.InstanceSpec
	}

	if !tea.BoolValue(util.IsUnset(request.ModifyAction)) {
		query["ModifyAction"] = request.ModifyAction
	}

	if !tea.BoolValue(util.IsUnset(request.SkipWaitSwitch)) {
		query["SkipWaitSwitch"] = request.SkipWaitSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceSpec"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceSpecResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceSpec(request *ModifyInstanceSpecRequest) (_result *ModifyInstanceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceSpecResponse{}
	_body, _err := client.ModifyInstanceSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The name of the ACL. The name must be 4 to 50 characters in length, and can contain letters, digits, and underscores (\\_). The name cannot start with an underscore (\\_).
 *
 * @param request ModifyIpControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyIpControlResponse
 */
func (client *Client) ModifyIpControlWithOptions(request *ModifyIpControlRequest, runtime *util.RuntimeOptions) (_result *ModifyIpControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlName)) {
		query["IpControlName"] = request.IpControlName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyIpControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyIpControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The name of the ACL. The name must be 4 to 50 characters in length, and can contain letters, digits, and underscores (\\_). The name cannot start with an underscore (\\_).
 *
 * @param request ModifyIpControlRequest
 * @return ModifyIpControlResponse
 */
func (client *Client) ModifyIpControl(request *ModifyIpControlRequest) (_result *ModifyIpControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyIpControlResponse{}
	_body, _err := client.ModifyIpControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the policy.
 *
 * @param request ModifyIpControlPolicyItemRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyIpControlPolicyItemResponse
 */
func (client *Client) ModifyIpControlPolicyItemWithOptions(request *ModifyIpControlPolicyItemRequest, runtime *util.RuntimeOptions) (_result *ModifyIpControlPolicyItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.CidrIp)) {
		query["CidrIp"] = request.CidrIp
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyItemId)) {
		query["PolicyItemId"] = request.PolicyItemId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyIpControlPolicyItem"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyIpControlPolicyItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the policy.
 *
 * @param request ModifyIpControlPolicyItemRequest
 * @return ModifyIpControlPolicyItemResponse
 */
func (client *Client) ModifyIpControlPolicyItem(request *ModifyIpControlPolicyItemRequest) (_result *ModifyIpControlPolicyItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyIpControlPolicyItemResponse{}
	_body, _err := client.ModifyIpControlPolicyItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyLogConfigWithOptions(request *ModifyLogConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyLogConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LogType)) {
		query["LogType"] = request.LogType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SlsLogStore)) {
		query["SlsLogStore"] = request.SlsLogStore
	}

	if !tea.BoolValue(util.IsUnset(request.SlsProject)) {
		query["SlsProject"] = request.SlsProject
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyLogConfig"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyLogConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyLogConfig(request *ModifyLogConfigRequest) (_result *ModifyLogConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyLogConfigResponse{}
	_body, _err := client.ModifyLogConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyModelWithOptions(request *ModifyModelRequest, runtime *util.RuntimeOptions) (_result *ModifyModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ModelName)) {
		query["ModelName"] = request.ModelName
	}

	if !tea.BoolValue(util.IsUnset(request.NewModelName)) {
		query["NewModelName"] = request.NewModelName
	}

	if !tea.BoolValue(util.IsUnset(request.Schema)) {
		query["Schema"] = request.Schema
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyModel"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyModel(request *ModifyModelRequest) (_result *ModifyModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyModelResponse{}
	_body, _err := client.ModifyModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyPluginWithOptions(request *ModifyPluginRequest, runtime *util.RuntimeOptions) (_result *ModifyPluginResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.PluginData)) {
		query["PluginData"] = request.PluginData
	}

	if !tea.BoolValue(util.IsUnset(request.PluginId)) {
		query["PluginId"] = request.PluginId
	}

	if !tea.BoolValue(util.IsUnset(request.PluginName)) {
		query["PluginName"] = request.PluginName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyPlugin"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyPluginResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyPlugin(request *ModifyPluginRequest) (_result *ModifyPluginResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPluginResponse{}
	_body, _err := client.ModifyPluginWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The new name of the key. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (\\_). It must start with a letter.
 *
 * @param request ModifySignatureRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifySignatureResponse
 */
func (client *Client) ModifySignatureWithOptions(request *ModifySignatureRequest, runtime *util.RuntimeOptions) (_result *ModifySignatureResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureId)) {
		query["SignatureId"] = request.SignatureId
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureKey)) {
		query["SignatureKey"] = request.SignatureKey
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureName)) {
		query["SignatureName"] = request.SignatureName
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureSecret)) {
		query["SignatureSecret"] = request.SignatureSecret
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySignature"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySignatureResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The new name of the key. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (\\_). It must start with a letter.
 *
 * @param request ModifySignatureRequest
 * @return ModifySignatureResponse
 */
func (client *Client) ModifySignature(request *ModifySignatureRequest) (_result *ModifySignatureResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySignatureResponse{}
	_body, _err := client.ModifySignatureWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The throttling policy name. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (\\_). It cannot start with an underscore.
 *
 * @param request ModifyTrafficControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyTrafficControlResponse
 */
func (client *Client) ModifyTrafficControlWithOptions(request *ModifyTrafficControlRequest, runtime *util.RuntimeOptions) (_result *ModifyTrafficControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiDefault)) {
		query["ApiDefault"] = request.ApiDefault
	}

	if !tea.BoolValue(util.IsUnset(request.AppDefault)) {
		query["AppDefault"] = request.AppDefault
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlName)) {
		query["TrafficControlName"] = request.TrafficControlName
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlUnit)) {
		query["TrafficControlUnit"] = request.TrafficControlUnit
	}

	if !tea.BoolValue(util.IsUnset(request.UserDefault)) {
		query["UserDefault"] = request.UserDefault
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTrafficControl"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTrafficControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The throttling policy name. The name must be 4 to 50 characters in length and can contain letters, digits, and underscores (\\_). It cannot start with an underscore.
 *
 * @param request ModifyTrafficControlRequest
 * @return ModifyTrafficControlResponse
 */
func (client *Client) ModifyTrafficControl(request *ModifyTrafficControlRequest) (_result *ModifyTrafficControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTrafficControlResponse{}
	_body, _err := client.ModifyTrafficControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVpcAccessAndUpdateApisWithOptions(request *ModifyVpcAccessAndUpdateApisRequest, runtime *util.RuntimeOptions) (_result *ModifyVpcAccessAndUpdateApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NeedBatchWork)) {
		query["NeedBatchWork"] = request.NeedBatchWork
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.Refresh)) {
		query["Refresh"] = request.Refresh
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcTargetHostName)) {
		query["VpcTargetHostName"] = request.VpcTargetHostName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyVpcAccessAndUpdateApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyVpcAccessAndUpdateApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVpcAccessAndUpdateApis(request *ModifyVpcAccessAndUpdateApisRequest) (_result *ModifyVpcAccessAndUpdateApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVpcAccessAndUpdateApisResponse{}
	_body, _err := client.ModifyVpcAccessAndUpdateApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenApiGatewayServiceWithOptions(runtime *util.RuntimeOptions) (_result *OpenApiGatewayServiceResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("OpenApiGatewayService"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenApiGatewayServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenApiGatewayService() (_result *OpenApiGatewayServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenApiGatewayServiceResponse{}
	_body, _err := client.OpenApiGatewayServiceWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryRequestLogsWithOptions(request *QueryRequestLogsRequest, runtime *util.RuntimeOptions) (_result *QueryRequestLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RequestLogId)) {
		query["RequestLogId"] = request.RequestLogId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryRequestLogs"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryRequestLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryRequestLogs(request *QueryRequestLogsRequest) (_result *QueryRequestLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryRequestLogsResponse{}
	_body, _err := client.QueryRequestLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the API group to which the domain name is bound. This ID is generated by the system and globally unique.
 *
 * @param request ReactivateDomainRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReactivateDomainResponse
 */
func (client *Client) ReactivateDomainWithOptions(request *ReactivateDomainRequest, runtime *util.RuntimeOptions) (_result *ReactivateDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReactivateDomain"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReactivateDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the API group to which the domain name is bound. This ID is generated by the system and globally unique.
 *
 * @param request ReactivateDomainRequest
 * @return ReactivateDomainResponse
 */
func (client *Client) ReactivateDomain(request *ReactivateDomainRequest) (_result *ReactivateDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReactivateDomainResponse{}
	_body, _err := client.ReactivateDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveAccessControlListEntryWithOptions(request *RemoveAccessControlListEntryRequest, runtime *util.RuntimeOptions) (_result *RemoveAccessControlListEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclEntrys)) {
		query["AclEntrys"] = request.AclEntrys
	}

	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveAccessControlListEntry"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveAccessControlListEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveAccessControlListEntry(request *RemoveAccessControlListEntryRequest) (_result *RemoveAccessControlListEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveAccessControlListEntryResponse{}
	_body, _err := client.RemoveAccessControlListEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the app. The ID is generated by the system and globally unique.
 *
 * @param request RemoveApisAuthoritiesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveApisAuthoritiesResponse
 */
func (client *Client) RemoveApisAuthoritiesWithOptions(request *RemoveApisAuthoritiesRequest, runtime *util.RuntimeOptions) (_result *RemoveApisAuthoritiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveApisAuthorities"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveApisAuthoritiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the app. The ID is generated by the system and globally unique.
 *
 * @param request RemoveApisAuthoritiesRequest
 * @return RemoveApisAuthoritiesResponse
 */
func (client *Client) RemoveApisAuthorities(request *RemoveApisAuthoritiesRequest) (_result *RemoveApisAuthoritiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveApisAuthoritiesResponse{}
	_body, _err := client.RemoveApisAuthoritiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the API. This ID is generated by the system and globally unique.
 *
 * @param request RemoveAppsAuthoritiesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveAppsAuthoritiesResponse
 */
func (client *Client) RemoveAppsAuthoritiesWithOptions(request *RemoveAppsAuthoritiesRequest, runtime *util.RuntimeOptions) (_result *RemoveAppsAuthoritiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.AppIds)) {
		query["AppIds"] = request.AppIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveAppsAuthorities"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveAppsAuthoritiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the API. This ID is generated by the system and globally unique.
 *
 * @param request RemoveAppsAuthoritiesRequest
 * @return RemoveAppsAuthoritiesResponse
 */
func (client *Client) RemoveAppsAuthorities(request *RemoveAppsAuthoritiesRequest) (_result *RemoveAppsAuthoritiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveAppsAuthoritiesResponse{}
	_body, _err := client.RemoveAppsAuthoritiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the API group containing the API to be managed.
 *
 * @param request RemoveIpControlApisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveIpControlApisResponse
 */
func (client *Client) RemoveIpControlApisWithOptions(request *RemoveIpControlApisRequest, runtime *util.RuntimeOptions) (_result *RemoveIpControlApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveIpControlApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveIpControlApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the API group containing the API to be managed.
 *
 * @param request RemoveIpControlApisRequest
 * @return RemoveIpControlApisResponse
 */
func (client *Client) RemoveIpControlApis(request *RemoveIpControlApisRequest) (_result *RemoveIpControlApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveIpControlApisResponse{}
	_body, _err := client.RemoveIpControlApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of a policy. Separate multiple IDs with semicolons (;). A maximum of 100 IDs can be entered.
 *
 * @param request RemoveIpControlPolicyItemRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveIpControlPolicyItemResponse
 */
func (client *Client) RemoveIpControlPolicyItemWithOptions(request *RemoveIpControlPolicyItemRequest, runtime *util.RuntimeOptions) (_result *RemoveIpControlPolicyItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyItemIds)) {
		query["PolicyItemIds"] = request.PolicyItemIds
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveIpControlPolicyItem"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveIpControlPolicyItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of a policy. Separate multiple IDs with semicolons (;). A maximum of 100 IDs can be entered.
 *
 * @param request RemoveIpControlPolicyItemRequest
 * @return RemoveIpControlPolicyItemResponse
 */
func (client *Client) RemoveIpControlPolicyItem(request *RemoveIpControlPolicyItemRequest) (_result *RemoveIpControlPolicyItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveIpControlPolicyItemResponse{}
	_body, _err := client.RemoveIpControlPolicyItemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the signature key.
 *
 * @param request RemoveSignatureApisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveSignatureApisResponse
 */
func (client *Client) RemoveSignatureApisWithOptions(request *RemoveSignatureApisRequest, runtime *util.RuntimeOptions) (_result *RemoveSignatureApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureId)) {
		query["SignatureId"] = request.SignatureId
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveSignatureApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveSignatureApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the signature key.
 *
 * @param request RemoveSignatureApisRequest
 * @return RemoveSignatureApisResponse
 */
func (client *Client) RemoveSignatureApis(request *RemoveSignatureApisRequest) (_result *RemoveSignatureApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveSignatureApisResponse{}
	_body, _err := client.RemoveSignatureApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the API group containing the APIs from which you want to unbind a specified throttling policy.
 *
 * @param request RemoveTrafficControlApisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveTrafficControlApisResponse
 */
func (client *Client) RemoveTrafficControlApisWithOptions(request *RemoveTrafficControlApisRequest, runtime *util.RuntimeOptions) (_result *RemoveTrafficControlApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveTrafficControlApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveTrafficControlApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the API group containing the APIs from which you want to unbind a specified throttling policy.
 *
 * @param request RemoveTrafficControlApisRequest
 * @return RemoveTrafficControlApisResponse
 */
func (client *Client) RemoveTrafficControlApis(request *RemoveTrafficControlApisRequest) (_result *RemoveTrafficControlApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveTrafficControlApisResponse{}
	_body, _err := client.RemoveTrafficControlApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveVpcAccessWithOptions(request *RemoveVpcAccessRequest, runtime *util.RuntimeOptions) (_result *RemoveVpcAccessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NeedBatchWork)) {
		query["NeedBatchWork"] = request.NeedBatchWork
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveVpcAccess"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveVpcAccessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveVpcAccess(request *RemoveVpcAccessRequest) (_result *RemoveVpcAccessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveVpcAccessResponse{}
	_body, _err := client.RemoveVpcAccessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveVpcAccessAndAbolishApisWithOptions(request *RemoveVpcAccessAndAbolishApisRequest, runtime *util.RuntimeOptions) (_result *RemoveVpcAccessAndAbolishApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NeedBatchWork)) {
		query["NeedBatchWork"] = request.NeedBatchWork
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveVpcAccessAndAbolishApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveVpcAccessAndAbolishApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveVpcAccessAndAbolishApis(request *RemoveVpcAccessAndAbolishApisRequest) (_result *RemoveVpcAccessAndAbolishApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveVpcAccessAndAbolishApisResponse{}
	_body, _err := client.RemoveVpcAccessAndAbolishApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The new AppCode takes effect about 2 seconds after you call this operation.
 *
 * @param request ResetAppCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetAppCodeResponse
 */
func (client *Client) ResetAppCodeWithOptions(request *ResetAppCodeRequest, runtime *util.RuntimeOptions) (_result *ResetAppCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppCode)) {
		query["AppCode"] = request.AppCode
	}

	if !tea.BoolValue(util.IsUnset(request.NewAppCode)) {
		query["NewAppCode"] = request.NewAppCode
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetAppCode"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetAppCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The new AppCode takes effect about 2 seconds after you call this operation.
 *
 * @param request ResetAppCodeRequest
 * @return ResetAppCodeResponse
 */
func (client *Client) ResetAppCode(request *ResetAppCodeRequest) (_result *ResetAppCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetAppCodeResponse{}
	_body, _err := client.ResetAppCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   This operation is intended for API callers.
 * *   A new secret is automatically generated after you have called this operation. This secret cannot be customized.
 * *   The results returned by this operation do not contain the application secret. You can obtain the secret by calling DescribeAppSecurity.
 *
 * @param request ResetAppSecretRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetAppSecretResponse
 */
func (client *Client) ResetAppSecretWithOptions(request *ResetAppSecretRequest, runtime *util.RuntimeOptions) (_result *ResetAppSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppKey)) {
		query["AppKey"] = request.AppKey
	}

	if !tea.BoolValue(util.IsUnset(request.NewAppKey)) {
		query["NewAppKey"] = request.NewAppKey
	}

	if !tea.BoolValue(util.IsUnset(request.NewAppSecret)) {
		query["NewAppSecret"] = request.NewAppSecret
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetAppSecret"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetAppSecretResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   This operation is intended for API callers.
 * *   A new secret is automatically generated after you have called this operation. This secret cannot be customized.
 * *   The results returned by this operation do not contain the application secret. You can obtain the secret by calling DescribeAppSecurity.
 *
 * @param request ResetAppSecretRequest
 * @return ResetAppSecretResponse
 */
func (client *Client) ResetAppSecret(request *ResetAppSecretRequest) (_result *ResetAppSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetAppSecretResponse{}
	_body, _err := client.ResetAppSecretWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SdkGenerateByAppWithOptions(request *SdkGenerateByAppRequest, runtime *util.RuntimeOptions) (_result *SdkGenerateByAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SdkGenerateByApp"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SdkGenerateByAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SdkGenerateByApp(request *SdkGenerateByAppRequest) (_result *SdkGenerateByAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SdkGenerateByAppResponse{}
	_body, _err := client.SdkGenerateByAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SdkGenerateByAppForRegionWithOptions(request *SdkGenerateByAppForRegionRequest, runtime *util.RuntimeOptions) (_result *SdkGenerateByAppForRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SdkGenerateByAppForRegion"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SdkGenerateByAppForRegionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SdkGenerateByAppForRegion(request *SdkGenerateByAppForRegionRequest) (_result *SdkGenerateByAppForRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SdkGenerateByAppForRegionResponse{}
	_body, _err := client.SdkGenerateByAppForRegionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SdkGenerateByGroupWithOptions(request *SdkGenerateByGroupRequest, runtime *util.RuntimeOptions) (_result *SdkGenerateByGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SdkGenerateByGroup"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SdkGenerateByGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SdkGenerateByGroup(request *SdkGenerateByGroupRequest) (_result *SdkGenerateByGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SdkGenerateByGroupResponse{}
	_body, _err := client.SdkGenerateByGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetAccessControlListAttributeWithOptions(request *SetAccessControlListAttributeRequest, runtime *util.RuntimeOptions) (_result *SetAccessControlListAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AclId)) {
		query["AclId"] = request.AclId
	}

	if !tea.BoolValue(util.IsUnset(request.AclName)) {
		query["AclName"] = request.AclName
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetAccessControlListAttribute"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetAccessControlListAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetAccessControlListAttribute(request *SetAccessControlListAttributeRequest) (_result *SetAccessControlListAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetAccessControlListAttributeResponse{}
	_body, _err := client.SetAccessControlListAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the app. This ID is generated by the system and globally unique.
 *
 * @param request SetApisAuthoritiesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetApisAuthoritiesResponse
 */
func (client *Client) SetApisAuthoritiesWithOptions(request *SetApisAuthoritiesRequest, runtime *util.RuntimeOptions) (_result *SetApisAuthoritiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AuthValidTime)) {
		query["AuthValidTime"] = request.AuthValidTime
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetApisAuthorities"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetApisAuthoritiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the app. This ID is generated by the system and globally unique.
 *
 * @param request SetApisAuthoritiesRequest
 * @return SetApisAuthoritiesResponse
 */
func (client *Client) SetApisAuthorities(request *SetApisAuthoritiesRequest) (_result *SetApisAuthoritiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetApisAuthoritiesResponse{}
	_body, _err := client.SetApisAuthoritiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the API. This ID is generated by the system and globally unique.
 *
 * @param request SetAppsAuthoritiesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetAppsAuthoritiesResponse
 */
func (client *Client) SetAppsAuthoritiesWithOptions(request *SetAppsAuthoritiesRequest, runtime *util.RuntimeOptions) (_result *SetAppsAuthoritiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.AppIds)) {
		query["AppIds"] = request.AppIds
	}

	if !tea.BoolValue(util.IsUnset(request.AuthValidTime)) {
		query["AuthValidTime"] = request.AuthValidTime
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetAppsAuthorities"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetAppsAuthoritiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the API. This ID is generated by the system and globally unique.
 *
 * @param request SetAppsAuthoritiesRequest
 * @return SetAppsAuthoritiesResponse
 */
func (client *Client) SetAppsAuthorities(request *SetAppsAuthoritiesRequest) (_result *SetAppsAuthoritiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetAppsAuthoritiesResponse{}
	_body, _err := client.SetAppsAuthoritiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetDomainWithOptions(request *SetDomainRequest, runtime *util.RuntimeOptions) (_result *SetDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BindStageName)) {
		query["BindStageName"] = request.BindStageName
	}

	if !tea.BoolValue(util.IsUnset(request.CustomDomainType)) {
		query["CustomDomainType"] = request.CustomDomainType
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.IsForce)) {
		query["IsForce"] = request.IsForce
	}

	if !tea.BoolValue(util.IsUnset(request.IsHttpRedirectToHttps)) {
		query["IsHttpRedirectToHttps"] = request.IsHttpRedirectToHttps
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDomain"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetDomain(request *SetDomainRequest) (_result *SetDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDomainResponse{}
	_body, _err := client.SetDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * 382271
 *
 * @param request SetDomainCertificateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetDomainCertificateResponse
 */
func (client *Client) SetDomainCertificateWithOptions(request *SetDomainCertificateRequest, runtime *util.RuntimeOptions) (_result *SetDomainCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CaCertificateBody)) {
		query["CaCertificateBody"] = request.CaCertificateBody
	}

	if !tea.BoolValue(util.IsUnset(request.CertificateBody)) {
		query["CertificateBody"] = request.CertificateBody
	}

	if !tea.BoolValue(util.IsUnset(request.CertificateName)) {
		query["CertificateName"] = request.CertificateName
	}

	if !tea.BoolValue(util.IsUnset(request.CertificatePrivateKey)) {
		query["CertificatePrivateKey"] = request.CertificatePrivateKey
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SslVerifyDepth)) {
		query["SslVerifyDepth"] = request.SslVerifyDepth
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDomainCertificate"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDomainCertificateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * 382271
 *
 * @param request SetDomainCertificateRequest
 * @return SetDomainCertificateResponse
 */
func (client *Client) SetDomainCertificate(request *SetDomainCertificateRequest) (_result *SetDomainCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDomainCertificateResponse{}
	_body, _err := client.SetDomainCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetDomainWebSocketStatusWithOptions(request *SetDomainWebSocketStatusRequest, runtime *util.RuntimeOptions) (_result *SetDomainWebSocketStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActionValue)) {
		query["ActionValue"] = request.ActionValue
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.WSSEnable)) {
		query["WSSEnable"] = request.WSSEnable
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDomainWebSocketStatus"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDomainWebSocketStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetDomainWebSocketStatus(request *SetDomainWebSocketStatusRequest) (_result *SetDomainWebSocketStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDomainWebSocketStatusResponse{}
	_body, _err := client.SetDomainWebSocketStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetGroupAuthAppCodeWithOptions(request *SetGroupAuthAppCodeRequest, runtime *util.RuntimeOptions) (_result *SetGroupAuthAppCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthAppCode)) {
		query["AuthAppCode"] = request.AuthAppCode
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetGroupAuthAppCode"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetGroupAuthAppCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetGroupAuthAppCode(request *SetGroupAuthAppCodeRequest) (_result *SetGroupAuthAppCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetGroupAuthAppCodeResponse{}
	_body, _err := client.SetGroupAuthAppCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the API group.
 *
 * @param request SetIpControlApisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetIpControlApisResponse
 */
func (client *Client) SetIpControlApisWithOptions(request *SetIpControlApisRequest, runtime *util.RuntimeOptions) (_result *SetIpControlApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.IpControlId)) {
		query["IpControlId"] = request.IpControlId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetIpControlApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetIpControlApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the API group.
 *
 * @param request SetIpControlApisRequest
 * @return SetIpControlApisResponse
 */
func (client *Client) SetIpControlApis(request *SetIpControlApisRequest) (_result *SetIpControlApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetIpControlApisResponse{}
	_body, _err := client.SetIpControlApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the signature key.
 *
 * @param request SetSignatureApisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetSignatureApisResponse
 */
func (client *Client) SetSignatureApisWithOptions(request *SetSignatureApisRequest, runtime *util.RuntimeOptions) (_result *SetSignatureApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureId)) {
		query["SignatureId"] = request.SignatureId
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetSignatureApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetSignatureApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the signature key.
 *
 * @param request SetSignatureApisRequest
 * @return SetSignatureApisResponse
 */
func (client *Client) SetSignatureApis(request *SetSignatureApisRequest) (_result *SetSignatureApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetSignatureApisResponse{}
	_body, _err := client.SetSignatureApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the API group containing the APIs to which you want to bind a specified throttling policy.
 *
 * @param request SetTrafficControlApisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetTrafficControlApisResponse
 */
func (client *Client) SetTrafficControlApisWithOptions(request *SetTrafficControlApisRequest, runtime *util.RuntimeOptions) (_result *SetTrafficControlApisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiIds)) {
		query["ApiIds"] = request.ApiIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	if !tea.BoolValue(util.IsUnset(request.TrafficControlId)) {
		query["TrafficControlId"] = request.TrafficControlId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetTrafficControlApis"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetTrafficControlApisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the API group containing the APIs to which you want to bind a specified throttling policy.
 *
 * @param request SetTrafficControlApisRequest
 * @return SetTrafficControlApisResponse
 */
func (client *Client) SetTrafficControlApis(request *SetTrafficControlApisRequest) (_result *SetTrafficControlApisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetTrafficControlApisResponse{}
	_body, _err := client.SetTrafficControlApisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetVpcAccessWithOptions(request *SetVpcAccessRequest, runtime *util.RuntimeOptions) (_result *SetVpcAccessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcTargetHostName)) {
		query["VpcTargetHostName"] = request.VpcTargetHostName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetVpcAccess"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetVpcAccessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetVpcAccess(request *SetVpcAccessRequest) (_result *SetVpcAccessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetVpcAccessResponse{}
	_body, _err := client.SetVpcAccessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetWildcardDomainPatternsWithOptions(request *SetWildcardDomainPatternsRequest, runtime *util.RuntimeOptions) (_result *SetWildcardDomainPatternsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.WildcardDomainPatterns)) {
		query["WildcardDomainPatterns"] = request.WildcardDomainPatterns
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetWildcardDomainPatterns"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetWildcardDomainPatternsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetWildcardDomainPatterns(request *SetWildcardDomainPatternsRequest) (_result *SetWildcardDomainPatternsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetWildcardDomainPatternsResponse{}
	_body, _err := client.SetWildcardDomainPatternsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The ID of the API.
 *
 * @param request SwitchApiRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SwitchApiResponse
 */
func (client *Client) SwitchApiWithOptions(request *SwitchApiRequest, runtime *util.RuntimeOptions) (_result *SwitchApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiId)) {
		query["ApiId"] = request.ApiId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HistoryVersion)) {
		query["HistoryVersion"] = request.HistoryVersion
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.StageName)) {
		query["StageName"] = request.StageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SwitchApi"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SwitchApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The ID of the API.
 *
 * @param request SwitchApiRequest
 * @return SwitchApiResponse
 */
func (client *Client) SwitchApi(request *SwitchApiRequest) (_result *SwitchApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchApiResponse{}
	_body, _err := client.SwitchApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The key of tag N.
 * Valid values of N: `1 to 20.`
 *
 * @param request TagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TagResourcesResponse
 */
func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResources"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The key of tag N.
 * Valid values of N: `1 to 20.`
 *
 * @param request TagResourcesRequest
 * @return TagResourcesResponse
 */
func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Specifies whether to delete all tags. This parameter is valid only when the **TagKey.N**parameter is not specified. Default value: false. Valid values:
 * *   **true**
 * *   **false**
 *
 * @param request UntagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UntagResourcesResponse
 */
func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResources"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Specifies whether to delete all tags. This parameter is valid only when the **TagKey.N**parameter is not specified. Default value: false. Valid values:
 * *   **true**
 * *   **false**
 *
 * @param request UntagResourcesRequest
 * @return UntagResourcesResponse
 */
func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ValidateVpcConnectivityWithOptions(request *ValidateVpcConnectivityRequest, runtime *util.RuntimeOptions) (_result *ValidateVpcConnectivityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	if !tea.BoolValue(util.IsUnset(request.VpcAccessId)) {
		query["VpcAccessId"] = request.VpcAccessId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ValidateVpcConnectivity"),
		Version:     tea.String("2016-07-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ValidateVpcConnectivityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ValidateVpcConnectivity(request *ValidateVpcConnectivityRequest) (_result *ValidateVpcConnectivityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ValidateVpcConnectivityResponse{}
	_body, _err := client.ValidateVpcConnectivityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
