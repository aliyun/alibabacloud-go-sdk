// This file is auto-generated, don't edit it. Thanks.
package client

import (
	"github.com/alibabacloud-go/tea/dara"
)

type iDescribeDomainResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetCertificateBody(v string) *DescribeDomainResponseBody
	GetCertificateBody() *string
	SetCertificateId(v string) *DescribeDomainResponseBody
	GetCertificateId() *string
	SetCertificateName(v string) *DescribeDomainResponseBody
	GetCertificateName() *string
	SetCertificatePrivateKey(v string) *DescribeDomainResponseBody
	GetCertificatePrivateKey() *string
	SetCertificateValidEnd(v int64) *DescribeDomainResponseBody
	GetCertificateValidEnd() *int64
	SetCertificateValidStart(v int64) *DescribeDomainResponseBody
	GetCertificateValidStart() *int64
	SetDomainBindingStatus(v string) *DescribeDomainResponseBody
	GetDomainBindingStatus() *string
	SetDomainCNAMEStatus(v string) *DescribeDomainResponseBody
	GetDomainCNAMEStatus() *string
	SetDomainLegalStatus(v string) *DescribeDomainResponseBody
	GetDomainLegalStatus() *string
	SetDomainName(v string) *DescribeDomainResponseBody
	GetDomainName() *string
	SetDomainRemark(v string) *DescribeDomainResponseBody
	GetDomainRemark() *string
	SetDomainWebSocketStatus(v string) *DescribeDomainResponseBody
	GetDomainWebSocketStatus() *string
	SetGroupId(v string) *DescribeDomainResponseBody
	GetGroupId() *string
	SetRequestId(v string) *DescribeDomainResponseBody
	GetRequestId() *string
	SetSubDomain(v string) *DescribeDomainResponseBody
	GetSubDomain() *string
}

type DescribeDomainResponseBody struct {
	// The content of the certificate.
	//
	// example:
	//
	// xxx
	CertificateBody *string `json:"CertificateBody,omitempty" xml:"CertificateBody,omitempty"`
	// The unique ID of the SSL certificate, which is automatically generated by the system.
	//
	// example:
	//
	// 6EF60BEC-0242-43AF-BB20-270359FB54A7
	CertificateId *string `json:"CertificateId,omitempty" xml:"CertificateId,omitempty"`
	// The name of the SSL certificate.
	//
	// example:
	//
	// myCertificate
	CertificateName *string `json:"CertificateName,omitempty" xml:"CertificateName,omitempty"`
	// The private key of the SSL certificate.
	//
	// example:
	//
	// xxx
	CertificatePrivateKey *string `json:"CertificatePrivateKey,omitempty" xml:"CertificatePrivateKey,omitempty"`
	// 证书失效时间戳（毫秒）
	//
	// example:
	//
	// 1704038400000
	CertificateValidEnd *int64 `json:"CertificateValidEnd,omitempty" xml:"CertificateValidEnd,omitempty"`
	// 证书生效时间戳（毫秒）
	//
	// example:
	//
	// 1672502400000
	CertificateValidStart *int64 `json:"CertificateValidStart,omitempty" xml:"CertificateValidStart,omitempty"`
	// The binding status of the custom domain name. Valid values:
	//
	// 	- BINDING: The domain name has been bound.
	//
	// 	- BOUND: The domain name has not been bound.
	//
	// example:
	//
	// BINDING
	DomainBindingStatus *string `json:"DomainBindingStatus,omitempty" xml:"DomainBindingStatus,omitempty"`
	// The domain name resolution status. Valid values:
	//
	// 	- RESOLVED: The domain name has been resolved.
	//
	// 	- UNRESOLVED: The domain name has not been resolved.
	//
	// example:
	//
	// RESOLVED
	DomainCNAMEStatus *string `json:"DomainCNAMEStatus,omitempty" xml:"DomainCNAMEStatus,omitempty"`
	// The validity status of the domain name. Valid values:
	//
	// 	- NORMAL
	//
	// 	- ABNORMAL: This status affects API calls and must be resolved as soon as possible.
	//
	// example:
	//
	// NORMAL
	DomainLegalStatus *string `json:"DomainLegalStatus,omitempty" xml:"DomainLegalStatus,omitempty"`
	// The custom domain name.
	//
	// example:
	//
	// api.demo.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// Remarks about the domain name, such as the cause of an exception.
	//
	// example:
	//
	// The domain name does not have an ICP filing.
	DomainRemark *string `json:"DomainRemark,omitempty" xml:"DomainRemark,omitempty"`
	// The status of the domain name that uses WebSocket.
	//
	// example:
	//
	// NORMAL
	DomainWebSocketStatus *string `json:"DomainWebSocketStatus,omitempty" xml:"DomainWebSocketStatus,omitempty"`
	// The ID of the API group. This ID is generated by the system and globally unique.
	//
	// example:
	//
	// 927d50c0f2e54b359919923d908bb015
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 6EF60BEC-0242-43AF-BB20-270359FB54A7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The second-level domain name that is automatically assigned to the API group.
	//
	// example:
	//
	// xxx-cn-hangzhou.alicloudapi.com
	SubDomain *string `json:"SubDomain,omitempty" xml:"SubDomain,omitempty"`
}

func (s DescribeDomainResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeDomainResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDomainResponseBody) GetCertificateBody() *string {
	return s.CertificateBody
}

func (s *DescribeDomainResponseBody) GetCertificateId() *string {
	return s.CertificateId
}

func (s *DescribeDomainResponseBody) GetCertificateName() *string {
	return s.CertificateName
}

func (s *DescribeDomainResponseBody) GetCertificatePrivateKey() *string {
	return s.CertificatePrivateKey
}

func (s *DescribeDomainResponseBody) GetCertificateValidEnd() *int64 {
	return s.CertificateValidEnd
}

func (s *DescribeDomainResponseBody) GetCertificateValidStart() *int64 {
	return s.CertificateValidStart
}

func (s *DescribeDomainResponseBody) GetDomainBindingStatus() *string {
	return s.DomainBindingStatus
}

func (s *DescribeDomainResponseBody) GetDomainCNAMEStatus() *string {
	return s.DomainCNAMEStatus
}

func (s *DescribeDomainResponseBody) GetDomainLegalStatus() *string {
	return s.DomainLegalStatus
}

func (s *DescribeDomainResponseBody) GetDomainName() *string {
	return s.DomainName
}

func (s *DescribeDomainResponseBody) GetDomainRemark() *string {
	return s.DomainRemark
}

func (s *DescribeDomainResponseBody) GetDomainWebSocketStatus() *string {
	return s.DomainWebSocketStatus
}

func (s *DescribeDomainResponseBody) GetGroupId() *string {
	return s.GroupId
}

func (s *DescribeDomainResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeDomainResponseBody) GetSubDomain() *string {
	return s.SubDomain
}

func (s *DescribeDomainResponseBody) SetCertificateBody(v string) *DescribeDomainResponseBody {
	s.CertificateBody = &v
	return s
}

func (s *DescribeDomainResponseBody) SetCertificateId(v string) *DescribeDomainResponseBody {
	s.CertificateId = &v
	return s
}

func (s *DescribeDomainResponseBody) SetCertificateName(v string) *DescribeDomainResponseBody {
	s.CertificateName = &v
	return s
}

func (s *DescribeDomainResponseBody) SetCertificatePrivateKey(v string) *DescribeDomainResponseBody {
	s.CertificatePrivateKey = &v
	return s
}

func (s *DescribeDomainResponseBody) SetCertificateValidEnd(v int64) *DescribeDomainResponseBody {
	s.CertificateValidEnd = &v
	return s
}

func (s *DescribeDomainResponseBody) SetCertificateValidStart(v int64) *DescribeDomainResponseBody {
	s.CertificateValidStart = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainBindingStatus(v string) *DescribeDomainResponseBody {
	s.DomainBindingStatus = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainCNAMEStatus(v string) *DescribeDomainResponseBody {
	s.DomainCNAMEStatus = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainLegalStatus(v string) *DescribeDomainResponseBody {
	s.DomainLegalStatus = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainName(v string) *DescribeDomainResponseBody {
	s.DomainName = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainRemark(v string) *DescribeDomainResponseBody {
	s.DomainRemark = &v
	return s
}

func (s *DescribeDomainResponseBody) SetDomainWebSocketStatus(v string) *DescribeDomainResponseBody {
	s.DomainWebSocketStatus = &v
	return s
}

func (s *DescribeDomainResponseBody) SetGroupId(v string) *DescribeDomainResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeDomainResponseBody) SetRequestId(v string) *DescribeDomainResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDomainResponseBody) SetSubDomain(v string) *DescribeDomainResponseBody {
	s.SubDomain = &v
	return s
}

func (s *DescribeDomainResponseBody) Validate() error {
	return dara.Validate(s)
}
