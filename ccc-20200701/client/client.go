// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type DataPropertiesValue struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// name
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// string
	DataType *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	// example:
	//
	// ^
	Pattern             *string `json:"Pattern,omitempty" xml:"Pattern,omitempty"`
	PatternErrorMessage *string `json:"PatternErrorMessage,omitempty" xml:"PatternErrorMessage,omitempty"`
	// example:
	//
	// 1
	MinLength *int32 `json:"MinLength,omitempty" xml:"MinLength,omitempty"`
	// example:
	//
	// 10
	MaxLength *int32 `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	// example:
	//
	// 1
	Minimum *float64 `json:"Minimum,omitempty" xml:"Minimum,omitempty"`
	// example:
	//
	// 10
	Maximum *float64 `json:"Maximum,omitempty" xml:"Maximum,omitempty"`
	// example:
	//
	// false
	Required *bool `json:"Required,omitempty" xml:"Required,omitempty"`
	// example:
	//
	// false
	System *bool `json:"System,omitempty" xml:"System,omitempty"`
	// example:
	//
	// false
	Disabled *bool `json:"Disabled,omitempty" xml:"Disabled,omitempty"`
	// example:
	//
	// false
	Array *bool `json:"Array,omitempty" xml:"Array,omitempty"`
	// example:
	//
	// false
	ReadOnly *bool `json:"ReadOnly,omitempty" xml:"ReadOnly,omitempty"`
	// example:
	//
	// textbox
	EditorType *string `json:"EditorType,omitempty" xml:"EditorType,omitempty"`
	// example:
	//
	// {}
	Attributes *string `json:"Attributes,omitempty" xml:"Attributes,omitempty"`
	// example:
	//
	// 1
	DisplayOrder *int32 `json:"DisplayOrder,omitempty" xml:"DisplayOrder,omitempty"`
	// example:
	//
	// 2021-07-14 10:48:43.0
	CreatedTime *int64 `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// example:
	//
	// 2021-07-14 10:48:43.0
	UpdatedTime *int64 `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
	// example:
	//
	// tom
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
}

func (s DataPropertiesValue) String() string {
	return tea.Prettify(s)
}

func (s DataPropertiesValue) GoString() string {
	return s.String()
}

func (s *DataPropertiesValue) SetDisplayName(v string) *DataPropertiesValue {
	s.DisplayName = &v
	return s
}

func (s *DataPropertiesValue) SetDescription(v string) *DataPropertiesValue {
	s.Description = &v
	return s
}

func (s *DataPropertiesValue) SetName(v string) *DataPropertiesValue {
	s.Name = &v
	return s
}

func (s *DataPropertiesValue) SetDataType(v string) *DataPropertiesValue {
	s.DataType = &v
	return s
}

func (s *DataPropertiesValue) SetPattern(v string) *DataPropertiesValue {
	s.Pattern = &v
	return s
}

func (s *DataPropertiesValue) SetPatternErrorMessage(v string) *DataPropertiesValue {
	s.PatternErrorMessage = &v
	return s
}

func (s *DataPropertiesValue) SetMinLength(v int32) *DataPropertiesValue {
	s.MinLength = &v
	return s
}

func (s *DataPropertiesValue) SetMaxLength(v int32) *DataPropertiesValue {
	s.MaxLength = &v
	return s
}

func (s *DataPropertiesValue) SetMinimum(v float64) *DataPropertiesValue {
	s.Minimum = &v
	return s
}

func (s *DataPropertiesValue) SetMaximum(v float64) *DataPropertiesValue {
	s.Maximum = &v
	return s
}

func (s *DataPropertiesValue) SetRequired(v bool) *DataPropertiesValue {
	s.Required = &v
	return s
}

func (s *DataPropertiesValue) SetSystem(v bool) *DataPropertiesValue {
	s.System = &v
	return s
}

func (s *DataPropertiesValue) SetDisabled(v bool) *DataPropertiesValue {
	s.Disabled = &v
	return s
}

func (s *DataPropertiesValue) SetArray(v bool) *DataPropertiesValue {
	s.Array = &v
	return s
}

func (s *DataPropertiesValue) SetReadOnly(v bool) *DataPropertiesValue {
	s.ReadOnly = &v
	return s
}

func (s *DataPropertiesValue) SetEditorType(v string) *DataPropertiesValue {
	s.EditorType = &v
	return s
}

func (s *DataPropertiesValue) SetAttributes(v string) *DataPropertiesValue {
	s.Attributes = &v
	return s
}

func (s *DataPropertiesValue) SetDisplayOrder(v int32) *DataPropertiesValue {
	s.DisplayOrder = &v
	return s
}

func (s *DataPropertiesValue) SetCreatedTime(v int64) *DataPropertiesValue {
	s.CreatedTime = &v
	return s
}

func (s *DataPropertiesValue) SetUpdatedTime(v int64) *DataPropertiesValue {
	s.UpdatedTime = &v
	return s
}

func (s *DataPropertiesValue) SetCreator(v string) *DataPropertiesValue {
	s.Creator = &v
	return s
}

type DataSchemaPropertiesValue struct {
	// example:
	//
	// name
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// -
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// string
	DataType *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	// example:
	//
	// *
	Pattern             *string `json:"Pattern,omitempty" xml:"Pattern,omitempty"`
	PatternErrorMessage *string `json:"PatternErrorMessage,omitempty" xml:"PatternErrorMessage,omitempty"`
	// example:
	//
	// 1
	MinLength *int32 `json:"MinLength,omitempty" xml:"MinLength,omitempty"`
	// example:
	//
	// 1
	MaxLength *int32 `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	// example:
	//
	// 1
	Minimum *float64 `json:"Minimum,omitempty" xml:"Minimum,omitempty"`
	// example:
	//
	// 1
	Maximum *float64 `json:"Maximum,omitempty" xml:"Maximum,omitempty"`
	// example:
	//
	// false
	Required *bool `json:"Required,omitempty" xml:"Required,omitempty"`
	// example:
	//
	// false
	System *bool `json:"System,omitempty" xml:"System,omitempty"`
	// example:
	//
	// false
	Disabled *bool `json:"Disabled,omitempty" xml:"Disabled,omitempty"`
	// example:
	//
	// false
	Array *bool `json:"Array,omitempty" xml:"Array,omitempty"`
	// example:
	//
	// false
	ReadOnly *bool `json:"ReadOnly,omitempty" xml:"ReadOnly,omitempty"`
	// example:
	//
	// textbox
	EditorType *string `json:"EditorType,omitempty" xml:"EditorType,omitempty"`
	// example:
	//
	// {}
	Attributes *string `json:"Attributes,omitempty" xml:"Attributes,omitempty"`
	// example:
	//
	// 1
	DisplayOrder *int32 `json:"DisplayOrder,omitempty" xml:"DisplayOrder,omitempty"`
	// example:
	//
	// 2020-10-14T09:53:53Z
	CreatedTime *int64 `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// example:
	//
	// 2020-10-14T09:53:53Z
	UpdatedTime *int64 `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
	// example:
	//
	// tom
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
}

func (s DataSchemaPropertiesValue) String() string {
	return tea.Prettify(s)
}

func (s DataSchemaPropertiesValue) GoString() string {
	return s.String()
}

func (s *DataSchemaPropertiesValue) SetDisplayName(v string) *DataSchemaPropertiesValue {
	s.DisplayName = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetDescription(v string) *DataSchemaPropertiesValue {
	s.Description = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetName(v string) *DataSchemaPropertiesValue {
	s.Name = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetDataType(v string) *DataSchemaPropertiesValue {
	s.DataType = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetPattern(v string) *DataSchemaPropertiesValue {
	s.Pattern = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetPatternErrorMessage(v string) *DataSchemaPropertiesValue {
	s.PatternErrorMessage = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetMinLength(v int32) *DataSchemaPropertiesValue {
	s.MinLength = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetMaxLength(v int32) *DataSchemaPropertiesValue {
	s.MaxLength = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetMinimum(v float64) *DataSchemaPropertiesValue {
	s.Minimum = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetMaximum(v float64) *DataSchemaPropertiesValue {
	s.Maximum = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetRequired(v bool) *DataSchemaPropertiesValue {
	s.Required = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetSystem(v bool) *DataSchemaPropertiesValue {
	s.System = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetDisabled(v bool) *DataSchemaPropertiesValue {
	s.Disabled = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetArray(v bool) *DataSchemaPropertiesValue {
	s.Array = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetReadOnly(v bool) *DataSchemaPropertiesValue {
	s.ReadOnly = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetEditorType(v string) *DataSchemaPropertiesValue {
	s.EditorType = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetAttributes(v string) *DataSchemaPropertiesValue {
	s.Attributes = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetDisplayOrder(v int32) *DataSchemaPropertiesValue {
	s.DisplayOrder = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetCreatedTime(v int64) *DataSchemaPropertiesValue {
	s.CreatedTime = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetUpdatedTime(v int64) *DataSchemaPropertiesValue {
	s.UpdatedTime = &v
	return s
}

func (s *DataSchemaPropertiesValue) SetCreator(v string) *DataSchemaPropertiesValue {
	s.Creator = &v
	return s
}

type AbortCampaignRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 6badb397-a8b5-40b6-21019d382a09
	CampaignId *string `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s AbortCampaignRequest) String() string {
	return tea.Prettify(s)
}

func (s AbortCampaignRequest) GoString() string {
	return s.String()
}

func (s *AbortCampaignRequest) SetCampaignId(v string) *AbortCampaignRequest {
	s.CampaignId = &v
	return s
}

func (s *AbortCampaignRequest) SetInstanceId(v string) *AbortCampaignRequest {
	s.InstanceId = &v
	return s
}

type AbortCampaignResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 7CC6523B-0E51-1B62-8DA5-6A9831CAE315
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AbortCampaignResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AbortCampaignResponseBody) GoString() string {
	return s.String()
}

func (s *AbortCampaignResponseBody) SetCode(v string) *AbortCampaignResponseBody {
	s.Code = &v
	return s
}

func (s *AbortCampaignResponseBody) SetHttpStatusCode(v string) *AbortCampaignResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AbortCampaignResponseBody) SetMessage(v string) *AbortCampaignResponseBody {
	s.Message = &v
	return s
}

func (s *AbortCampaignResponseBody) SetRequestId(v string) *AbortCampaignResponseBody {
	s.RequestId = &v
	return s
}

type AbortCampaignResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AbortCampaignResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AbortCampaignResponse) String() string {
	return tea.Prettify(s)
}

func (s AbortCampaignResponse) GoString() string {
	return s.String()
}

func (s *AbortCampaignResponse) SetHeaders(v map[string]*string) *AbortCampaignResponse {
	s.Headers = v
	return s
}

func (s *AbortCampaignResponse) SetStatusCode(v int32) *AbortCampaignResponse {
	s.StatusCode = &v
	return s
}

func (s *AbortCampaignResponse) SetBody(v *AbortCampaignResponseBody) *AbortCampaignResponse {
	s.Body = v
	return s
}

type AcceptChatRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// chat-65382141036853491
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s AcceptChatRequest) String() string {
	return tea.Prettify(s)
}

func (s AcceptChatRequest) GoString() string {
	return s.String()
}

func (s *AcceptChatRequest) SetInstanceId(v string) *AcceptChatRequest {
	s.InstanceId = &v
	return s
}

func (s *AcceptChatRequest) SetJobId(v string) *AcceptChatRequest {
	s.JobId = &v
	return s
}

type AcceptChatResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2263B273-AC1B-44EB-BA98-87F2322C6780
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AcceptChatResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AcceptChatResponseBody) GoString() string {
	return s.String()
}

func (s *AcceptChatResponseBody) SetCode(v string) *AcceptChatResponseBody {
	s.Code = &v
	return s
}

func (s *AcceptChatResponseBody) SetHttpStatusCode(v int32) *AcceptChatResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AcceptChatResponseBody) SetMessage(v string) *AcceptChatResponseBody {
	s.Message = &v
	return s
}

func (s *AcceptChatResponseBody) SetRequestId(v string) *AcceptChatResponseBody {
	s.RequestId = &v
	return s
}

type AcceptChatResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AcceptChatResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AcceptChatResponse) String() string {
	return tea.Prettify(s)
}

func (s AcceptChatResponse) GoString() string {
	return s.String()
}

func (s *AcceptChatResponse) SetHeaders(v map[string]*string) *AcceptChatResponse {
	s.Headers = v
	return s
}

func (s *AcceptChatResponse) SetStatusCode(v int32) *AcceptChatResponse {
	s.StatusCode = &v
	return s
}

func (s *AcceptChatResponse) SetBody(v *AcceptChatResponseBody) *AcceptChatResponse {
	s.Body = v
	return s
}

type AddBlacklistCallTaggingRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6582589278232****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1764590****
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
}

func (s AddBlacklistCallTaggingRequest) String() string {
	return tea.Prettify(s)
}

func (s AddBlacklistCallTaggingRequest) GoString() string {
	return s.String()
}

func (s *AddBlacklistCallTaggingRequest) SetInstanceId(v string) *AddBlacklistCallTaggingRequest {
	s.InstanceId = &v
	return s
}

func (s *AddBlacklistCallTaggingRequest) SetJobId(v string) *AddBlacklistCallTaggingRequest {
	s.JobId = &v
	return s
}

func (s *AddBlacklistCallTaggingRequest) SetNumber(v string) *AddBlacklistCallTaggingRequest {
	s.Number = &v
	return s
}

type AddBlacklistCallTaggingResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 9FBA26B0-462B-4D77-B78F-AF35560DBC71
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddBlacklistCallTaggingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddBlacklistCallTaggingResponseBody) GoString() string {
	return s.String()
}

func (s *AddBlacklistCallTaggingResponseBody) SetCode(v string) *AddBlacklistCallTaggingResponseBody {
	s.Code = &v
	return s
}

func (s *AddBlacklistCallTaggingResponseBody) SetHttpStatusCode(v int32) *AddBlacklistCallTaggingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddBlacklistCallTaggingResponseBody) SetMessage(v string) *AddBlacklistCallTaggingResponseBody {
	s.Message = &v
	return s
}

func (s *AddBlacklistCallTaggingResponseBody) SetRequestId(v string) *AddBlacklistCallTaggingResponseBody {
	s.RequestId = &v
	return s
}

type AddBlacklistCallTaggingResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddBlacklistCallTaggingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddBlacklistCallTaggingResponse) String() string {
	return tea.Prettify(s)
}

func (s AddBlacklistCallTaggingResponse) GoString() string {
	return s.String()
}

func (s *AddBlacklistCallTaggingResponse) SetHeaders(v map[string]*string) *AddBlacklistCallTaggingResponse {
	s.Headers = v
	return s
}

func (s *AddBlacklistCallTaggingResponse) SetStatusCode(v int32) *AddBlacklistCallTaggingResponse {
	s.StatusCode = &v
	return s
}

func (s *AddBlacklistCallTaggingResponse) SetBody(v *AddBlacklistCallTaggingResponseBody) *AddBlacklistCallTaggingResponse {
	s.Body = v
	return s
}

type AddCasesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c58b9719-3bc3-441d-a4d3-fc0309ef7066
	CampaignId *string                    `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	CaseList   []*AddCasesRequestCaseList `json:"CaseList,omitempty" xml:"CaseList,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s AddCasesRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCasesRequest) GoString() string {
	return s.String()
}

func (s *AddCasesRequest) SetCampaignId(v string) *AddCasesRequest {
	s.CampaignId = &v
	return s
}

func (s *AddCasesRequest) SetCaseList(v []*AddCasesRequestCaseList) *AddCasesRequest {
	s.CaseList = v
	return s
}

func (s *AddCasesRequest) SetInstanceId(v string) *AddCasesRequest {
	s.InstanceId = &v
	return s
}

type AddCasesRequestCaseList struct {
	Caller          *string `json:"Caller,omitempty" xml:"Caller,omitempty"`
	CustomVariables *string `json:"CustomVariables,omitempty" xml:"CustomVariables,omitempty"`
	MaskedCallee    *string `json:"MaskedCallee,omitempty" xml:"MaskedCallee,omitempty"`
	// example:
	//
	// 188888****
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	// example:
	//
	// 01
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
}

func (s AddCasesRequestCaseList) String() string {
	return tea.Prettify(s)
}

func (s AddCasesRequestCaseList) GoString() string {
	return s.String()
}

func (s *AddCasesRequestCaseList) SetCaller(v string) *AddCasesRequestCaseList {
	s.Caller = &v
	return s
}

func (s *AddCasesRequestCaseList) SetCustomVariables(v string) *AddCasesRequestCaseList {
	s.CustomVariables = &v
	return s
}

func (s *AddCasesRequestCaseList) SetMaskedCallee(v string) *AddCasesRequestCaseList {
	s.MaskedCallee = &v
	return s
}

func (s *AddCasesRequestCaseList) SetPhoneNumber(v string) *AddCasesRequestCaseList {
	s.PhoneNumber = &v
	return s
}

func (s *AddCasesRequestCaseList) SetReferenceId(v string) *AddCasesRequestCaseList {
	s.ReferenceId = &v
	return s
}

type AddCasesShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c58b9719-3bc3-441d-a4d3-fc0309ef7066
	CampaignId     *string `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	CaseListShrink *string `json:"CaseList,omitempty" xml:"CaseList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s AddCasesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCasesShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddCasesShrinkRequest) SetCampaignId(v string) *AddCasesShrinkRequest {
	s.CampaignId = &v
	return s
}

func (s *AddCasesShrinkRequest) SetCaseListShrink(v string) *AddCasesShrinkRequest {
	s.CaseListShrink = &v
	return s
}

func (s *AddCasesShrinkRequest) SetInstanceId(v string) *AddCasesShrinkRequest {
	s.InstanceId = &v
	return s
}

type AddCasesResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 41298961-CAD7-5270-9378-FFD69F153144
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCasesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCasesResponseBody) GoString() string {
	return s.String()
}

func (s *AddCasesResponseBody) SetCode(v string) *AddCasesResponseBody {
	s.Code = &v
	return s
}

func (s *AddCasesResponseBody) SetHttpStatusCode(v string) *AddCasesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddCasesResponseBody) SetMessage(v string) *AddCasesResponseBody {
	s.Message = &v
	return s
}

func (s *AddCasesResponseBody) SetRequestId(v string) *AddCasesResponseBody {
	s.RequestId = &v
	return s
}

type AddCasesResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddCasesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddCasesResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCasesResponse) GoString() string {
	return s.String()
}

func (s *AddCasesResponse) SetHeaders(v map[string]*string) *AddCasesResponse {
	s.Headers = v
	return s
}

func (s *AddCasesResponse) SetStatusCode(v int32) *AddCasesResponse {
	s.StatusCode = &v
	return s
}

func (s *AddCasesResponse) SetBody(v *AddCasesResponseBody) *AddCasesResponse {
	s.Body = v
	return s
}

type AddNumbersToSkillGroupRequest struct {
	InstNumberGroupIdList *string `json:"InstNumberGroupIdList,omitempty" xml:"InstNumberGroupIdList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// ["0103182****","0102387****"]
	NumberList *string `json:"NumberList,omitempty" xml:"NumberList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s AddNumbersToSkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AddNumbersToSkillGroupRequest) GoString() string {
	return s.String()
}

func (s *AddNumbersToSkillGroupRequest) SetInstNumberGroupIdList(v string) *AddNumbersToSkillGroupRequest {
	s.InstNumberGroupIdList = &v
	return s
}

func (s *AddNumbersToSkillGroupRequest) SetInstanceId(v string) *AddNumbersToSkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *AddNumbersToSkillGroupRequest) SetNumberList(v string) *AddNumbersToSkillGroupRequest {
	s.NumberList = &v
	return s
}

func (s *AddNumbersToSkillGroupRequest) SetSkillGroupId(v string) *AddNumbersToSkillGroupRequest {
	s.SkillGroupId = &v
	return s
}

type AddNumbersToSkillGroupResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddNumbersToSkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddNumbersToSkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AddNumbersToSkillGroupResponseBody) SetCode(v string) *AddNumbersToSkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *AddNumbersToSkillGroupResponseBody) SetHttpStatusCode(v int32) *AddNumbersToSkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddNumbersToSkillGroupResponseBody) SetMessage(v string) *AddNumbersToSkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *AddNumbersToSkillGroupResponseBody) SetRequestId(v string) *AddNumbersToSkillGroupResponseBody {
	s.RequestId = &v
	return s
}

type AddNumbersToSkillGroupResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddNumbersToSkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddNumbersToSkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AddNumbersToSkillGroupResponse) GoString() string {
	return s.String()
}

func (s *AddNumbersToSkillGroupResponse) SetHeaders(v map[string]*string) *AddNumbersToSkillGroupResponse {
	s.Headers = v
	return s
}

func (s *AddNumbersToSkillGroupResponse) SetStatusCode(v int32) *AddNumbersToSkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *AddNumbersToSkillGroupResponse) SetBody(v *AddNumbersToSkillGroupResponseBody) *AddNumbersToSkillGroupResponse {
	s.Body = v
	return s
}

type AddPersonalNumbersToUserRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["0101234****","0105678****"]
	NumberList *string `json:"NumberList,omitempty" xml:"NumberList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AddPersonalNumbersToUserRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPersonalNumbersToUserRequest) GoString() string {
	return s.String()
}

func (s *AddPersonalNumbersToUserRequest) SetInstanceId(v string) *AddPersonalNumbersToUserRequest {
	s.InstanceId = &v
	return s
}

func (s *AddPersonalNumbersToUserRequest) SetNumberList(v string) *AddPersonalNumbersToUserRequest {
	s.NumberList = &v
	return s
}

func (s *AddPersonalNumbersToUserRequest) SetUserId(v string) *AddPersonalNumbersToUserRequest {
	s.UserId = &v
	return s
}

type AddPersonalNumbersToUserResponseBody struct {
	// example:
	//
	// OK
	Code *string   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*string `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddPersonalNumbersToUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPersonalNumbersToUserResponseBody) GoString() string {
	return s.String()
}

func (s *AddPersonalNumbersToUserResponseBody) SetCode(v string) *AddPersonalNumbersToUserResponseBody {
	s.Code = &v
	return s
}

func (s *AddPersonalNumbersToUserResponseBody) SetData(v []*string) *AddPersonalNumbersToUserResponseBody {
	s.Data = v
	return s
}

func (s *AddPersonalNumbersToUserResponseBody) SetHttpStatusCode(v int32) *AddPersonalNumbersToUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddPersonalNumbersToUserResponseBody) SetMessage(v string) *AddPersonalNumbersToUserResponseBody {
	s.Message = &v
	return s
}

func (s *AddPersonalNumbersToUserResponseBody) SetRequestId(v string) *AddPersonalNumbersToUserResponseBody {
	s.RequestId = &v
	return s
}

type AddPersonalNumbersToUserResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddPersonalNumbersToUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddPersonalNumbersToUserResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPersonalNumbersToUserResponse) GoString() string {
	return s.String()
}

func (s *AddPersonalNumbersToUserResponse) SetHeaders(v map[string]*string) *AddPersonalNumbersToUserResponse {
	s.Headers = v
	return s
}

func (s *AddPersonalNumbersToUserResponse) SetStatusCode(v int32) *AddPersonalNumbersToUserResponse {
	s.StatusCode = &v
	return s
}

func (s *AddPersonalNumbersToUserResponse) SetBody(v *AddPersonalNumbersToUserResponseBody) *AddPersonalNumbersToUserResponse {
	s.Body = v
	return s
}

type AddPhoneNumberToSkillGroupsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0101234****
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["skillgroup1@ccc-test","skillgroup2@ccc-test"]
	SkillGroupIdList *string `json:"SkillGroupIdList,omitempty" xml:"SkillGroupIdList,omitempty"`
}

func (s AddPhoneNumberToSkillGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPhoneNumberToSkillGroupsRequest) GoString() string {
	return s.String()
}

func (s *AddPhoneNumberToSkillGroupsRequest) SetInstanceId(v string) *AddPhoneNumberToSkillGroupsRequest {
	s.InstanceId = &v
	return s
}

func (s *AddPhoneNumberToSkillGroupsRequest) SetNumber(v string) *AddPhoneNumberToSkillGroupsRequest {
	s.Number = &v
	return s
}

func (s *AddPhoneNumberToSkillGroupsRequest) SetSkillGroupIdList(v string) *AddPhoneNumberToSkillGroupsRequest {
	s.SkillGroupIdList = &v
	return s
}

type AddPhoneNumberToSkillGroupsResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddPhoneNumberToSkillGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPhoneNumberToSkillGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *AddPhoneNumberToSkillGroupsResponseBody) SetCode(v string) *AddPhoneNumberToSkillGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *AddPhoneNumberToSkillGroupsResponseBody) SetHttpStatusCode(v int32) *AddPhoneNumberToSkillGroupsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddPhoneNumberToSkillGroupsResponseBody) SetMessage(v string) *AddPhoneNumberToSkillGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *AddPhoneNumberToSkillGroupsResponseBody) SetRequestId(v string) *AddPhoneNumberToSkillGroupsResponseBody {
	s.RequestId = &v
	return s
}

type AddPhoneNumberToSkillGroupsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddPhoneNumberToSkillGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddPhoneNumberToSkillGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPhoneNumberToSkillGroupsResponse) GoString() string {
	return s.String()
}

func (s *AddPhoneNumberToSkillGroupsResponse) SetHeaders(v map[string]*string) *AddPhoneNumberToSkillGroupsResponse {
	s.Headers = v
	return s
}

func (s *AddPhoneNumberToSkillGroupsResponse) SetStatusCode(v int32) *AddPhoneNumberToSkillGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *AddPhoneNumberToSkillGroupsResponse) SetBody(v *AddPhoneNumberToSkillGroupsResponseBody) *AddPhoneNumberToSkillGroupsResponse {
	s.Body = v
	return s
}

type AddPhoneNumbersRequest struct {
	// example:
	//
	// dDMD_0mif4hv
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 2cb77c29-5f60-4b90-b21e-9d2ba9833f14
	NumberGroupId *string `json:"NumberGroupId,omitempty" xml:"NumberGroupId,omitempty"`
	// example:
	//
	// ["0101234****", "0105678****"]
	NumberList *string `json:"NumberList,omitempty" xml:"NumberList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Bidirection
	Usage *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s AddPhoneNumbersRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPhoneNumbersRequest) GoString() string {
	return s.String()
}

func (s *AddPhoneNumbersRequest) SetContactFlowId(v string) *AddPhoneNumbersRequest {
	s.ContactFlowId = &v
	return s
}

func (s *AddPhoneNumbersRequest) SetInstanceId(v string) *AddPhoneNumbersRequest {
	s.InstanceId = &v
	return s
}

func (s *AddPhoneNumbersRequest) SetNumberGroupId(v string) *AddPhoneNumbersRequest {
	s.NumberGroupId = &v
	return s
}

func (s *AddPhoneNumbersRequest) SetNumberList(v string) *AddPhoneNumbersRequest {
	s.NumberList = &v
	return s
}

func (s *AddPhoneNumbersRequest) SetUsage(v string) *AddPhoneNumbersRequest {
	s.Usage = &v
	return s
}

type AddPhoneNumbersResponseBody struct {
	// example:
	//
	// OK
	Code *string   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*string `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddPhoneNumbersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPhoneNumbersResponseBody) GoString() string {
	return s.String()
}

func (s *AddPhoneNumbersResponseBody) SetCode(v string) *AddPhoneNumbersResponseBody {
	s.Code = &v
	return s
}

func (s *AddPhoneNumbersResponseBody) SetData(v []*string) *AddPhoneNumbersResponseBody {
	s.Data = v
	return s
}

func (s *AddPhoneNumbersResponseBody) SetHttpStatusCode(v int32) *AddPhoneNumbersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddPhoneNumbersResponseBody) SetMessage(v string) *AddPhoneNumbersResponseBody {
	s.Message = &v
	return s
}

func (s *AddPhoneNumbersResponseBody) SetRequestId(v string) *AddPhoneNumbersResponseBody {
	s.RequestId = &v
	return s
}

type AddPhoneNumbersResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddPhoneNumbersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddPhoneNumbersResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPhoneNumbersResponse) GoString() string {
	return s.String()
}

func (s *AddPhoneNumbersResponse) SetHeaders(v map[string]*string) *AddPhoneNumbersResponse {
	s.Headers = v
	return s
}

func (s *AddPhoneNumbersResponse) SetStatusCode(v int32) *AddPhoneNumbersResponse {
	s.StatusCode = &v
	return s
}

func (s *AddPhoneNumbersResponse) SetBody(v *AddPhoneNumbersResponseBody) *AddPhoneNumbersResponse {
	s.Body = v
	return s
}

type AddSchemaPropertyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// b0eb2742-f37e-4c67-82d4-25c651c1xxxx
	InstanceId *string                           `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Property   *AddSchemaPropertyRequestProperty `json:"Property,omitempty" xml:"Property,omitempty" type:"Struct"`
	// example:
	//
	// 03C67DAD-EB26-41D8-949D-9B0C470FB716
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// schema id
	//
	// This parameter is required.
	//
	// example:
	//
	// profile
	SchemaId *string `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s AddSchemaPropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s AddSchemaPropertyRequest) GoString() string {
	return s.String()
}

func (s *AddSchemaPropertyRequest) SetInstanceId(v string) *AddSchemaPropertyRequest {
	s.InstanceId = &v
	return s
}

func (s *AddSchemaPropertyRequest) SetProperty(v *AddSchemaPropertyRequestProperty) *AddSchemaPropertyRequest {
	s.Property = v
	return s
}

func (s *AddSchemaPropertyRequest) SetRequestId(v string) *AddSchemaPropertyRequest {
	s.RequestId = &v
	return s
}

func (s *AddSchemaPropertyRequest) SetSchemaId(v string) *AddSchemaPropertyRequest {
	s.SchemaId = &v
	return s
}

type AddSchemaPropertyRequestProperty struct {
	// example:
	//
	// false
	Array      *bool   `json:"Array,omitempty" xml:"Array,omitempty"`
	Attributes *string `json:"Attributes,omitempty" xml:"Attributes,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// string
	DataType *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	// example:
	//
	// -
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// False
	Disabled *bool `json:"Disabled,omitempty" xml:"Disabled,omitempty"`
	// example:
	//
	// name
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// 10
	DisplayOrder *int32 `json:"DisplayOrder,omitempty" xml:"DisplayOrder,omitempty"`
	// example:
	//
	// textbox
	EditorType *string `json:"EditorType,omitempty" xml:"EditorType,omitempty"`
	// example:
	//
	// 100
	MaxLength *int32 `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	// example:
	//
	// 1
	Maximum *float64 `json:"Maximum,omitempty" xml:"Maximum,omitempty"`
	// example:
	//
	// 1
	MinLength *int32 `json:"MinLength,omitempty" xml:"MinLength,omitempty"`
	// example:
	//
	// 1
	Minimum *float64 `json:"Minimum,omitempty" xml:"Minimum,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// *
	Pattern             *string `json:"Pattern,omitempty" xml:"Pattern,omitempty"`
	PatternErrorMessage *string `json:"PatternErrorMessage,omitempty" xml:"PatternErrorMessage,omitempty"`
	// example:
	//
	// true
	ReadOnly *bool `json:"ReadOnly,omitempty" xml:"ReadOnly,omitempty"`
	// example:
	//
	// false
	Required *bool `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s AddSchemaPropertyRequestProperty) String() string {
	return tea.Prettify(s)
}

func (s AddSchemaPropertyRequestProperty) GoString() string {
	return s.String()
}

func (s *AddSchemaPropertyRequestProperty) SetArray(v bool) *AddSchemaPropertyRequestProperty {
	s.Array = &v
	return s
}

func (s *AddSchemaPropertyRequestProperty) SetAttributes(v string) *AddSchemaPropertyRequestProperty {
	s.Attributes = &v
	return s
}

func (s *AddSchemaPropertyRequestProperty) SetDataType(v string) *AddSchemaPropertyRequestProperty {
	s.DataType = &v
	return s
}

func (s *AddSchemaPropertyRequestProperty) SetDescription(v string) *AddSchemaPropertyRequestProperty {
	s.Description = &v
	return s
}

func (s *AddSchemaPropertyRequestProperty) SetDisabled(v bool) *AddSchemaPropertyRequestProperty {
	s.Disabled = &v
	return s
}

func (s *AddSchemaPropertyRequestProperty) SetDisplayName(v string) *AddSchemaPropertyRequestProperty {
	s.DisplayName = &v
	return s
}

func (s *AddSchemaPropertyRequestProperty) SetDisplayOrder(v int32) *AddSchemaPropertyRequestProperty {
	s.DisplayOrder = &v
	return s
}

func (s *AddSchemaPropertyRequestProperty) SetEditorType(v string) *AddSchemaPropertyRequestProperty {
	s.EditorType = &v
	return s
}

func (s *AddSchemaPropertyRequestProperty) SetMaxLength(v int32) *AddSchemaPropertyRequestProperty {
	s.MaxLength = &v
	return s
}

func (s *AddSchemaPropertyRequestProperty) SetMaximum(v float64) *AddSchemaPropertyRequestProperty {
	s.Maximum = &v
	return s
}

func (s *AddSchemaPropertyRequestProperty) SetMinLength(v int32) *AddSchemaPropertyRequestProperty {
	s.MinLength = &v
	return s
}

func (s *AddSchemaPropertyRequestProperty) SetMinimum(v float64) *AddSchemaPropertyRequestProperty {
	s.Minimum = &v
	return s
}

func (s *AddSchemaPropertyRequestProperty) SetName(v string) *AddSchemaPropertyRequestProperty {
	s.Name = &v
	return s
}

func (s *AddSchemaPropertyRequestProperty) SetPattern(v string) *AddSchemaPropertyRequestProperty {
	s.Pattern = &v
	return s
}

func (s *AddSchemaPropertyRequestProperty) SetPatternErrorMessage(v string) *AddSchemaPropertyRequestProperty {
	s.PatternErrorMessage = &v
	return s
}

func (s *AddSchemaPropertyRequestProperty) SetReadOnly(v bool) *AddSchemaPropertyRequestProperty {
	s.ReadOnly = &v
	return s
}

func (s *AddSchemaPropertyRequestProperty) SetRequired(v bool) *AddSchemaPropertyRequestProperty {
	s.Required = &v
	return s
}

type AddSchemaPropertyShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// b0eb2742-f37e-4c67-82d4-25c651c1xxxx
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PropertyShrink *string `json:"Property,omitempty" xml:"Property,omitempty"`
	// example:
	//
	// 03C67DAD-EB26-41D8-949D-9B0C470FB716
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// schema id
	//
	// This parameter is required.
	//
	// example:
	//
	// profile
	SchemaId *string `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s AddSchemaPropertyShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddSchemaPropertyShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddSchemaPropertyShrinkRequest) SetInstanceId(v string) *AddSchemaPropertyShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *AddSchemaPropertyShrinkRequest) SetPropertyShrink(v string) *AddSchemaPropertyShrinkRequest {
	s.PropertyShrink = &v
	return s
}

func (s *AddSchemaPropertyShrinkRequest) SetRequestId(v string) *AddSchemaPropertyShrinkRequest {
	s.RequestId = &v
	return s
}

func (s *AddSchemaPropertyShrinkRequest) SetSchemaId(v string) *AddSchemaPropertyShrinkRequest {
	s.SchemaId = &v
	return s
}

type AddSchemaPropertyResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// BF268B34-09C2-43FD-BAC4-5D31EA633111
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddSchemaPropertyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddSchemaPropertyResponseBody) GoString() string {
	return s.String()
}

func (s *AddSchemaPropertyResponseBody) SetCode(v string) *AddSchemaPropertyResponseBody {
	s.Code = &v
	return s
}

func (s *AddSchemaPropertyResponseBody) SetHttpStatusCode(v int32) *AddSchemaPropertyResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddSchemaPropertyResponseBody) SetMessage(v string) *AddSchemaPropertyResponseBody {
	s.Message = &v
	return s
}

func (s *AddSchemaPropertyResponseBody) SetParams(v []*string) *AddSchemaPropertyResponseBody {
	s.Params = v
	return s
}

func (s *AddSchemaPropertyResponseBody) SetRequestId(v string) *AddSchemaPropertyResponseBody {
	s.RequestId = &v
	return s
}

type AddSchemaPropertyResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddSchemaPropertyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddSchemaPropertyResponse) String() string {
	return tea.Prettify(s)
}

func (s AddSchemaPropertyResponse) GoString() string {
	return s.String()
}

func (s *AddSchemaPropertyResponse) SetHeaders(v map[string]*string) *AddSchemaPropertyResponse {
	s.Headers = v
	return s
}

func (s *AddSchemaPropertyResponse) SetStatusCode(v int32) *AddSchemaPropertyResponse {
	s.StatusCode = &v
	return s
}

func (s *AddSchemaPropertyResponse) SetBody(v *AddSchemaPropertyResponseBody) *AddSchemaPropertyResponse {
	s.Body = v
	return s
}

type AddSkillGroupsToUserRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [{"skillGroupId":"test1@ccc-test","skillLevel":5},{"skillGroupId":"test2@ccc-test","skillLevel":5}]
	SkillLevelList *string `json:"SkillLevelList,omitempty" xml:"SkillLevelList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AddSkillGroupsToUserRequest) String() string {
	return tea.Prettify(s)
}

func (s AddSkillGroupsToUserRequest) GoString() string {
	return s.String()
}

func (s *AddSkillGroupsToUserRequest) SetInstanceId(v string) *AddSkillGroupsToUserRequest {
	s.InstanceId = &v
	return s
}

func (s *AddSkillGroupsToUserRequest) SetSkillLevelList(v string) *AddSkillGroupsToUserRequest {
	s.SkillLevelList = &v
	return s
}

func (s *AddSkillGroupsToUserRequest) SetUserId(v string) *AddSkillGroupsToUserRequest {
	s.UserId = &v
	return s
}

type AddSkillGroupsToUserResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA7F9545-8312-4190-9BD0-63144B3F1ACC
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddSkillGroupsToUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddSkillGroupsToUserResponseBody) GoString() string {
	return s.String()
}

func (s *AddSkillGroupsToUserResponseBody) SetCode(v string) *AddSkillGroupsToUserResponseBody {
	s.Code = &v
	return s
}

func (s *AddSkillGroupsToUserResponseBody) SetHttpStatusCode(v int32) *AddSkillGroupsToUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddSkillGroupsToUserResponseBody) SetMessage(v string) *AddSkillGroupsToUserResponseBody {
	s.Message = &v
	return s
}

func (s *AddSkillGroupsToUserResponseBody) SetRequestId(v string) *AddSkillGroupsToUserResponseBody {
	s.RequestId = &v
	return s
}

type AddSkillGroupsToUserResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddSkillGroupsToUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddSkillGroupsToUserResponse) String() string {
	return tea.Prettify(s)
}

func (s AddSkillGroupsToUserResponse) GoString() string {
	return s.String()
}

func (s *AddSkillGroupsToUserResponse) SetHeaders(v map[string]*string) *AddSkillGroupsToUserResponse {
	s.Headers = v
	return s
}

func (s *AddSkillGroupsToUserResponse) SetStatusCode(v int32) *AddSkillGroupsToUserResponse {
	s.StatusCode = &v
	return s
}

func (s *AddSkillGroupsToUserResponse) SetBody(v *AddSkillGroupsToUserResponseBody) *AddSkillGroupsToUserResponse {
	s.Body = v
	return s
}

type AddTicketTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// assignee@ccc-test
	Assignee *string `json:"Assignee,omitempty" xml:"Assignee,omitempty"`
	// This parameter is required.
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// After
	Position *string `json:"Position,omitempty" xml:"Position,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 3b8c672f-48f6-45f5-bf41-9d4cb2b4a716
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 3d26b90a-c5d2-4b09-8219-********
	TicketId *string `json:"TicketId,omitempty" xml:"TicketId,omitempty"`
}

func (s AddTicketTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTicketTaskRequest) GoString() string {
	return s.String()
}

func (s *AddTicketTaskRequest) SetAssignee(v string) *AddTicketTaskRequest {
	s.Assignee = &v
	return s
}

func (s *AddTicketTaskRequest) SetComment(v string) *AddTicketTaskRequest {
	s.Comment = &v
	return s
}

func (s *AddTicketTaskRequest) SetInstanceId(v string) *AddTicketTaskRequest {
	s.InstanceId = &v
	return s
}

func (s *AddTicketTaskRequest) SetPosition(v string) *AddTicketTaskRequest {
	s.Position = &v
	return s
}

func (s *AddTicketTaskRequest) SetTaskId(v string) *AddTicketTaskRequest {
	s.TaskId = &v
	return s
}

func (s *AddTicketTaskRequest) SetTicketId(v string) *AddTicketTaskRequest {
	s.TicketId = &v
	return s
}

type AddTicketTaskResponseBody struct {
	// example:
	//
	// OK
	Code *string     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// B06B3244-1B44-481B-90C4-F2F92E59D6B5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddTicketTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTicketTaskResponseBody) GoString() string {
	return s.String()
}

func (s *AddTicketTaskResponseBody) SetCode(v string) *AddTicketTaskResponseBody {
	s.Code = &v
	return s
}

func (s *AddTicketTaskResponseBody) SetData(v interface{}) *AddTicketTaskResponseBody {
	s.Data = v
	return s
}

func (s *AddTicketTaskResponseBody) SetHttpStatusCode(v int32) *AddTicketTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddTicketTaskResponseBody) SetMessage(v string) *AddTicketTaskResponseBody {
	s.Message = &v
	return s
}

func (s *AddTicketTaskResponseBody) SetParams(v []*string) *AddTicketTaskResponseBody {
	s.Params = v
	return s
}

func (s *AddTicketTaskResponseBody) SetRequestId(v string) *AddTicketTaskResponseBody {
	s.RequestId = &v
	return s
}

type AddTicketTaskResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddTicketTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddTicketTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTicketTaskResponse) GoString() string {
	return s.String()
}

func (s *AddTicketTaskResponse) SetHeaders(v map[string]*string) *AddTicketTaskResponse {
	s.Headers = v
	return s
}

func (s *AddTicketTaskResponse) SetStatusCode(v int32) *AddTicketTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *AddTicketTaskResponse) SetBody(v *AddTicketTaskResponseBody) *AddTicketTaskResponse {
	s.Body = v
	return s
}

type AddUsersToSkillGroupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// test1@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [{"userId":"agent1@ccc-test","skillLevel":10},{"userId":"agent2@ccc-test","skillLevel":10}]
	UserSkillLevelList *string `json:"UserSkillLevelList,omitempty" xml:"UserSkillLevelList,omitempty"`
}

func (s AddUsersToSkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AddUsersToSkillGroupRequest) GoString() string {
	return s.String()
}

func (s *AddUsersToSkillGroupRequest) SetInstanceId(v string) *AddUsersToSkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *AddUsersToSkillGroupRequest) SetSkillGroupId(v string) *AddUsersToSkillGroupRequest {
	s.SkillGroupId = &v
	return s
}

func (s *AddUsersToSkillGroupRequest) SetUserSkillLevelList(v string) *AddUsersToSkillGroupRequest {
	s.UserSkillLevelList = &v
	return s
}

type AddUsersToSkillGroupResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddUsersToSkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddUsersToSkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AddUsersToSkillGroupResponseBody) SetCode(v string) *AddUsersToSkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *AddUsersToSkillGroupResponseBody) SetHttpStatusCode(v int32) *AddUsersToSkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddUsersToSkillGroupResponseBody) SetMessage(v string) *AddUsersToSkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *AddUsersToSkillGroupResponseBody) SetRequestId(v string) *AddUsersToSkillGroupResponseBody {
	s.RequestId = &v
	return s
}

type AddUsersToSkillGroupResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddUsersToSkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddUsersToSkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AddUsersToSkillGroupResponse) GoString() string {
	return s.String()
}

func (s *AddUsersToSkillGroupResponse) SetHeaders(v map[string]*string) *AddUsersToSkillGroupResponse {
	s.Headers = v
	return s
}

func (s *AddUsersToSkillGroupResponse) SetStatusCode(v int32) *AddUsersToSkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *AddUsersToSkillGroupResponse) SetBody(v *AddUsersToSkillGroupResponseBody) *AddUsersToSkillGroupResponse {
	s.Body = v
	return s
}

type AnalyzeConversationRequest struct {
	// example:
	//
	// job-10963442671187****
	ContactId     *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	FieldListJson *string `json:"FieldListJson,omitempty" xml:"FieldListJson,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 9cfad875-6260-4a53-ab6e-b13e3fb31f7d
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// ["keywords"]
	TaskListJson *string `json:"TaskListJson,omitempty" xml:"TaskListJson,omitempty"`
}

func (s AnalyzeConversationRequest) String() string {
	return tea.Prettify(s)
}

func (s AnalyzeConversationRequest) GoString() string {
	return s.String()
}

func (s *AnalyzeConversationRequest) SetContactId(v string) *AnalyzeConversationRequest {
	s.ContactId = &v
	return s
}

func (s *AnalyzeConversationRequest) SetFieldListJson(v string) *AnalyzeConversationRequest {
	s.FieldListJson = &v
	return s
}

func (s *AnalyzeConversationRequest) SetInstanceId(v string) *AnalyzeConversationRequest {
	s.InstanceId = &v
	return s
}

func (s *AnalyzeConversationRequest) SetTaskListJson(v string) *AnalyzeConversationRequest {
	s.TaskListJson = &v
	return s
}

type AnalyzeConversationResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 9F766284-F103-4298-8EC5-19F9F9BE5522
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AnalyzeConversationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AnalyzeConversationResponseBody) GoString() string {
	return s.String()
}

func (s *AnalyzeConversationResponseBody) SetCode(v string) *AnalyzeConversationResponseBody {
	s.Code = &v
	return s
}

func (s *AnalyzeConversationResponseBody) SetData(v string) *AnalyzeConversationResponseBody {
	s.Data = &v
	return s
}

func (s *AnalyzeConversationResponseBody) SetHttpStatusCode(v int32) *AnalyzeConversationResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AnalyzeConversationResponseBody) SetMessage(v string) *AnalyzeConversationResponseBody {
	s.Message = &v
	return s
}

func (s *AnalyzeConversationResponseBody) SetRequestId(v string) *AnalyzeConversationResponseBody {
	s.RequestId = &v
	return s
}

type AnalyzeConversationResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AnalyzeConversationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AnalyzeConversationResponse) String() string {
	return tea.Prettify(s)
}

func (s AnalyzeConversationResponse) GoString() string {
	return s.String()
}

func (s *AnalyzeConversationResponse) SetHeaders(v map[string]*string) *AnalyzeConversationResponse {
	s.Headers = v
	return s
}

func (s *AnalyzeConversationResponse) SetStatusCode(v int32) *AnalyzeConversationResponse {
	s.StatusCode = &v
	return s
}

func (s *AnalyzeConversationResponse) SetBody(v *AnalyzeConversationResponseBody) *AnalyzeConversationResponse {
	s.Body = v
	return s
}

type AnswerCallRequest struct {
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-65382141036853491
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AnswerCallRequest) String() string {
	return tea.Prettify(s)
}

func (s AnswerCallRequest) GoString() string {
	return s.String()
}

func (s *AnswerCallRequest) SetDeviceId(v string) *AnswerCallRequest {
	s.DeviceId = &v
	return s
}

func (s *AnswerCallRequest) SetInstanceId(v string) *AnswerCallRequest {
	s.InstanceId = &v
	return s
}

func (s *AnswerCallRequest) SetJobId(v string) *AnswerCallRequest {
	s.JobId = &v
	return s
}

func (s *AnswerCallRequest) SetUserId(v string) *AnswerCallRequest {
	s.UserId = &v
	return s
}

type AnswerCallResponseBody struct {
	// example:
	//
	// OK
	Code *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *AnswerCallResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AnswerCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AnswerCallResponseBody) GoString() string {
	return s.String()
}

func (s *AnswerCallResponseBody) SetCode(v string) *AnswerCallResponseBody {
	s.Code = &v
	return s
}

func (s *AnswerCallResponseBody) SetData(v *AnswerCallResponseBodyData) *AnswerCallResponseBody {
	s.Data = v
	return s
}

func (s *AnswerCallResponseBody) SetHttpStatusCode(v int32) *AnswerCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AnswerCallResponseBody) SetMessage(v string) *AnswerCallResponseBody {
	s.Message = &v
	return s
}

func (s *AnswerCallResponseBody) SetParams(v []*string) *AnswerCallResponseBody {
	s.Params = v
	return s
}

func (s *AnswerCallResponseBody) SetRequestId(v string) *AnswerCallResponseBody {
	s.RequestId = &v
	return s
}

type AnswerCallResponseBodyData struct {
	CallContext *AnswerCallResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	// example:
	//
	// 103655
	ContextId   *int64                                 `json:"ContextId,omitempty" xml:"ContextId,omitempty"`
	UserContext *AnswerCallResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s AnswerCallResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AnswerCallResponseBodyData) GoString() string {
	return s.String()
}

func (s *AnswerCallResponseBodyData) SetCallContext(v *AnswerCallResponseBodyDataCallContext) *AnswerCallResponseBodyData {
	s.CallContext = v
	return s
}

func (s *AnswerCallResponseBodyData) SetContextId(v int64) *AnswerCallResponseBodyData {
	s.ContextId = &v
	return s
}

func (s *AnswerCallResponseBodyData) SetUserContext(v *AnswerCallResponseBodyDataUserContext) *AnswerCallResponseBodyData {
	s.UserContext = v
	return s
}

type AnswerCallResponseBodyDataCallContext struct {
	// example:
	//
	// INBOUND
	CallType        *string                                                 `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*AnswerCallResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s AnswerCallResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s AnswerCallResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *AnswerCallResponseBodyDataCallContext) SetCallType(v string) *AnswerCallResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *AnswerCallResponseBodyDataCallContext) SetChannelContexts(v []*AnswerCallResponseBodyDataCallContextChannelContexts) *AnswerCallResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *AnswerCallResponseBodyDataCallContext) SetInstanceId(v string) *AnswerCallResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *AnswerCallResponseBodyDataCallContext) SetJobId(v string) *AnswerCallResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type AnswerCallResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// INBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// ANSWERED
	ChannelState     *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	ChannelVariables *string `json:"ChannelVariables,omitempty" xml:"ChannelVariables,omitempty"`
	// example:
	//
	// 1390501****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	Index       *int64  `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0830019****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AnswerCallResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s AnswerCallResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *AnswerCallResponseBodyDataCallContextChannelContexts) SetCallType(v string) *AnswerCallResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *AnswerCallResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *AnswerCallResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *AnswerCallResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *AnswerCallResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *AnswerCallResponseBodyDataCallContextChannelContexts) SetChannelVariables(v string) *AnswerCallResponseBodyDataCallContextChannelContexts {
	s.ChannelVariables = &v
	return s
}

func (s *AnswerCallResponseBodyDataCallContextChannelContexts) SetDestination(v string) *AnswerCallResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *AnswerCallResponseBodyDataCallContextChannelContexts) SetIndex(v int64) *AnswerCallResponseBodyDataCallContextChannelContexts {
	s.Index = &v
	return s
}

func (s *AnswerCallResponseBodyDataCallContextChannelContexts) SetJobId(v string) *AnswerCallResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *AnswerCallResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *AnswerCallResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *AnswerCallResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *AnswerCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *AnswerCallResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *AnswerCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *AnswerCallResponseBodyDataCallContextChannelContexts) SetSkillGroupId(v string) *AnswerCallResponseBodyDataCallContextChannelContexts {
	s.SkillGroupId = &v
	return s
}

func (s *AnswerCallResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *AnswerCallResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *AnswerCallResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *AnswerCallResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *AnswerCallResponseBodyDataCallContextChannelContexts) SetUserId(v string) *AnswerCallResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type AnswerCallResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609136956378
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s AnswerCallResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s AnswerCallResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *AnswerCallResponseBodyDataUserContext) SetBreakCode(v string) *AnswerCallResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *AnswerCallResponseBodyDataUserContext) SetDeviceId(v string) *AnswerCallResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *AnswerCallResponseBodyDataUserContext) SetExtension(v string) *AnswerCallResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *AnswerCallResponseBodyDataUserContext) SetHeartbeat(v int64) *AnswerCallResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *AnswerCallResponseBodyDataUserContext) SetInstanceId(v string) *AnswerCallResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *AnswerCallResponseBodyDataUserContext) SetJobId(v string) *AnswerCallResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *AnswerCallResponseBodyDataUserContext) SetMobile(v string) *AnswerCallResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *AnswerCallResponseBodyDataUserContext) SetOutboundScenario(v bool) *AnswerCallResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *AnswerCallResponseBodyDataUserContext) SetReserved(v int64) *AnswerCallResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *AnswerCallResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *AnswerCallResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *AnswerCallResponseBodyDataUserContext) SetUserId(v string) *AnswerCallResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *AnswerCallResponseBodyDataUserContext) SetUserState(v string) *AnswerCallResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *AnswerCallResponseBodyDataUserContext) SetWorkMode(v string) *AnswerCallResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type AnswerCallResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AnswerCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AnswerCallResponse) String() string {
	return tea.Prettify(s)
}

func (s AnswerCallResponse) GoString() string {
	return s.String()
}

func (s *AnswerCallResponse) SetHeaders(v map[string]*string) *AnswerCallResponse {
	s.Headers = v
	return s
}

func (s *AnswerCallResponse) SetStatusCode(v int32) *AnswerCallResponse {
	s.StatusCode = &v
	return s
}

func (s *AnswerCallResponse) SetBody(v *AnswerCallResponseBody) *AnswerCallResponse {
	s.Body = v
	return s
}

type AppendCasesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 78cf6864-9a22-4ea8-a59d-5adc2d747b0e
	CampaignId *string `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string                   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Body       []*AppendCasesRequestBody `json:"body,omitempty" xml:"body,omitempty" type:"Repeated"`
}

func (s AppendCasesRequest) String() string {
	return tea.Prettify(s)
}

func (s AppendCasesRequest) GoString() string {
	return s.String()
}

func (s *AppendCasesRequest) SetCampaignId(v string) *AppendCasesRequest {
	s.CampaignId = &v
	return s
}

func (s *AppendCasesRequest) SetInstanceId(v string) *AppendCasesRequest {
	s.InstanceId = &v
	return s
}

func (s *AppendCasesRequest) SetBody(v []*AppendCasesRequestBody) *AppendCasesRequest {
	s.Body = v
	return s
}

type AppendCasesRequestBody struct {
	// example:
	//
	// agent@ccc-test
	AgentId *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	// example:
	//
	// 01012345678
	Caller          *string `json:"Caller,omitempty" xml:"Caller,omitempty"`
	CustomVariables *string `json:"CustomVariables,omitempty" xml:"CustomVariables,omitempty"`
	// example:
	//
	// 071*****801
	MaskedCallee *string `json:"MaskedCallee,omitempty" xml:"MaskedCallee,omitempty"`
	// example:
	//
	// 188888****
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	// example:
	//
	// 01
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
}

func (s AppendCasesRequestBody) String() string {
	return tea.Prettify(s)
}

func (s AppendCasesRequestBody) GoString() string {
	return s.String()
}

func (s *AppendCasesRequestBody) SetAgentId(v string) *AppendCasesRequestBody {
	s.AgentId = &v
	return s
}

func (s *AppendCasesRequestBody) SetCaller(v string) *AppendCasesRequestBody {
	s.Caller = &v
	return s
}

func (s *AppendCasesRequestBody) SetCustomVariables(v string) *AppendCasesRequestBody {
	s.CustomVariables = &v
	return s
}

func (s *AppendCasesRequestBody) SetMaskedCallee(v string) *AppendCasesRequestBody {
	s.MaskedCallee = &v
	return s
}

func (s *AppendCasesRequestBody) SetPhoneNumber(v string) *AppendCasesRequestBody {
	s.PhoneNumber = &v
	return s
}

func (s *AppendCasesRequestBody) SetReferenceId(v string) *AppendCasesRequestBody {
	s.ReferenceId = &v
	return s
}

type AppendCasesShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 78cf6864-9a22-4ea8-a59d-5adc2d747b0e
	CampaignId *string `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	BodyShrink *string `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AppendCasesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AppendCasesShrinkRequest) GoString() string {
	return s.String()
}

func (s *AppendCasesShrinkRequest) SetCampaignId(v string) *AppendCasesShrinkRequest {
	s.CampaignId = &v
	return s
}

func (s *AppendCasesShrinkRequest) SetInstanceId(v string) *AppendCasesShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *AppendCasesShrinkRequest) SetBodyShrink(v string) *AppendCasesShrinkRequest {
	s.BodyShrink = &v
	return s
}

type AppendCasesResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BC976D32-AC4C-4E0F-8AA9-F4BC6C4E2B3E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AppendCasesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AppendCasesResponseBody) GoString() string {
	return s.String()
}

func (s *AppendCasesResponseBody) SetCode(v string) *AppendCasesResponseBody {
	s.Code = &v
	return s
}

func (s *AppendCasesResponseBody) SetHttpStatusCode(v string) *AppendCasesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AppendCasesResponseBody) SetMessage(v string) *AppendCasesResponseBody {
	s.Message = &v
	return s
}

func (s *AppendCasesResponseBody) SetRequestId(v string) *AppendCasesResponseBody {
	s.RequestId = &v
	return s
}

type AppendCasesResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AppendCasesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AppendCasesResponse) String() string {
	return tea.Prettify(s)
}

func (s AppendCasesResponse) GoString() string {
	return s.String()
}

func (s *AppendCasesResponse) SetHeaders(v map[string]*string) *AppendCasesResponse {
	s.Headers = v
	return s
}

func (s *AppendCasesResponse) SetStatusCode(v int32) *AppendCasesResponse {
	s.StatusCode = &v
	return s
}

func (s *AppendCasesResponse) SetBody(v *AppendCasesResponseBody) *AppendCasesResponse {
	s.Body = v
	return s
}

type AssignUsersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["28036411123456****","29234301123456****"]
	RamIdList *string `json:"RamIdList,omitempty" xml:"RamIdList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Agent@ccc-test
	RoleId *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	// example:
	//
	// [{"skillGroupId":"skillgroup@ccc-test","skillLevel":5}]
	SkillLevelList *string `json:"SkillLevelList,omitempty" xml:"SkillLevelList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s AssignUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s AssignUsersRequest) GoString() string {
	return s.String()
}

func (s *AssignUsersRequest) SetInstanceId(v string) *AssignUsersRequest {
	s.InstanceId = &v
	return s
}

func (s *AssignUsersRequest) SetRamIdList(v string) *AssignUsersRequest {
	s.RamIdList = &v
	return s
}

func (s *AssignUsersRequest) SetRoleId(v string) *AssignUsersRequest {
	s.RoleId = &v
	return s
}

func (s *AssignUsersRequest) SetSkillLevelList(v string) *AssignUsersRequest {
	s.SkillLevelList = &v
	return s
}

func (s *AssignUsersRequest) SetWorkMode(v string) *AssignUsersRequest {
	s.WorkMode = &v
	return s
}

type AssignUsersResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 1ca2b084-6f0a-454b-9851-29768a9a5832
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 1ca2b084-6f0a-454b-9851-29768a9a5832
	WorkflowId *string `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s AssignUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssignUsersResponseBody) GoString() string {
	return s.String()
}

func (s *AssignUsersResponseBody) SetCode(v string) *AssignUsersResponseBody {
	s.Code = &v
	return s
}

func (s *AssignUsersResponseBody) SetData(v string) *AssignUsersResponseBody {
	s.Data = &v
	return s
}

func (s *AssignUsersResponseBody) SetHttpStatusCode(v int32) *AssignUsersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AssignUsersResponseBody) SetMessage(v string) *AssignUsersResponseBody {
	s.Message = &v
	return s
}

func (s *AssignUsersResponseBody) SetRequestId(v string) *AssignUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *AssignUsersResponseBody) SetWorkflowId(v string) *AssignUsersResponseBody {
	s.WorkflowId = &v
	return s
}

type AssignUsersResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AssignUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AssignUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s AssignUsersResponse) GoString() string {
	return s.String()
}

func (s *AssignUsersResponse) SetHeaders(v map[string]*string) *AssignUsersResponse {
	s.Headers = v
	return s
}

func (s *AssignUsersResponse) SetStatusCode(v int32) *AssignUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *AssignUsersResponse) SetBody(v *AssignUsersResponseBody) *AssignUsersResponse {
	s.Body = v
	return s
}

type BargeInCallRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// agent2@ccc-test
	BargedUserId *string `json:"BargedUserId,omitempty" xml:"BargedUserId,omitempty"`
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 60
	TimeoutSeconds *int32 `json:"TimeoutSeconds,omitempty" xml:"TimeoutSeconds,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s BargeInCallRequest) String() string {
	return tea.Prettify(s)
}

func (s BargeInCallRequest) GoString() string {
	return s.String()
}

func (s *BargeInCallRequest) SetBargedUserId(v string) *BargeInCallRequest {
	s.BargedUserId = &v
	return s
}

func (s *BargeInCallRequest) SetDeviceId(v string) *BargeInCallRequest {
	s.DeviceId = &v
	return s
}

func (s *BargeInCallRequest) SetInstanceId(v string) *BargeInCallRequest {
	s.InstanceId = &v
	return s
}

func (s *BargeInCallRequest) SetJobId(v string) *BargeInCallRequest {
	s.JobId = &v
	return s
}

func (s *BargeInCallRequest) SetTimeoutSeconds(v int32) *BargeInCallRequest {
	s.TimeoutSeconds = &v
	return s
}

func (s *BargeInCallRequest) SetUserId(v string) *BargeInCallRequest {
	s.UserId = &v
	return s
}

type BargeInCallResponseBody struct {
	// example:
	//
	// OK
	Code *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *BargeInCallResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BargeInCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BargeInCallResponseBody) GoString() string {
	return s.String()
}

func (s *BargeInCallResponseBody) SetCode(v string) *BargeInCallResponseBody {
	s.Code = &v
	return s
}

func (s *BargeInCallResponseBody) SetData(v *BargeInCallResponseBodyData) *BargeInCallResponseBody {
	s.Data = v
	return s
}

func (s *BargeInCallResponseBody) SetHttpStatusCode(v int32) *BargeInCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *BargeInCallResponseBody) SetMessage(v string) *BargeInCallResponseBody {
	s.Message = &v
	return s
}

func (s *BargeInCallResponseBody) SetParams(v []*string) *BargeInCallResponseBody {
	s.Params = v
	return s
}

func (s *BargeInCallResponseBody) SetRequestId(v string) *BargeInCallResponseBody {
	s.RequestId = &v
	return s
}

type BargeInCallResponseBodyData struct {
	CallContext *BargeInCallResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	UserContext *BargeInCallResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s BargeInCallResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BargeInCallResponseBodyData) GoString() string {
	return s.String()
}

func (s *BargeInCallResponseBodyData) SetCallContext(v *BargeInCallResponseBodyDataCallContext) *BargeInCallResponseBodyData {
	s.CallContext = v
	return s
}

func (s *BargeInCallResponseBodyData) SetUserContext(v *BargeInCallResponseBodyDataUserContext) *BargeInCallResponseBodyData {
	s.UserContext = v
	return s
}

type BargeInCallResponseBodyDataCallContext struct {
	// example:
	//
	// BARGE
	CallType        *string                                                  `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*BargeInCallResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s BargeInCallResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s BargeInCallResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *BargeInCallResponseBodyDataCallContext) SetCallType(v string) *BargeInCallResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *BargeInCallResponseBodyDataCallContext) SetChannelContexts(v []*BargeInCallResponseBodyDataCallContextChannelContexts) *BargeInCallResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *BargeInCallResponseBodyDataCallContext) SetInstanceId(v string) *BargeInCallResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *BargeInCallResponseBodyDataCallContext) SetJobId(v string) *BargeInCallResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type BargeInCallResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// BARGE
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// MONITORING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// ANSWERED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 1390501****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// 10
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0830019****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s BargeInCallResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s BargeInCallResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *BargeInCallResponseBodyDataCallContextChannelContexts) SetCallType(v string) *BargeInCallResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *BargeInCallResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *BargeInCallResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *BargeInCallResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *BargeInCallResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *BargeInCallResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *BargeInCallResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *BargeInCallResponseBodyDataCallContextChannelContexts) SetDestination(v string) *BargeInCallResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *BargeInCallResponseBodyDataCallContextChannelContexts) SetIndex(v int32) *BargeInCallResponseBodyDataCallContextChannelContexts {
	s.Index = &v
	return s
}

func (s *BargeInCallResponseBodyDataCallContextChannelContexts) SetJobId(v string) *BargeInCallResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *BargeInCallResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *BargeInCallResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *BargeInCallResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *BargeInCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *BargeInCallResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *BargeInCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *BargeInCallResponseBodyDataCallContextChannelContexts) SetSkillGroupId(v string) *BargeInCallResponseBodyDataCallContextChannelContexts {
	s.SkillGroupId = &v
	return s
}

func (s *BargeInCallResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *BargeInCallResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *BargeInCallResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *BargeInCallResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *BargeInCallResponseBodyDataCallContextChannelContexts) SetUserId(v string) *BargeInCallResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type BargeInCallResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609136956378
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s BargeInCallResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s BargeInCallResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *BargeInCallResponseBodyDataUserContext) SetBreakCode(v string) *BargeInCallResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *BargeInCallResponseBodyDataUserContext) SetDeviceId(v string) *BargeInCallResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *BargeInCallResponseBodyDataUserContext) SetExtension(v string) *BargeInCallResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *BargeInCallResponseBodyDataUserContext) SetHeartbeat(v int64) *BargeInCallResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *BargeInCallResponseBodyDataUserContext) SetInstanceId(v string) *BargeInCallResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *BargeInCallResponseBodyDataUserContext) SetJobId(v string) *BargeInCallResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *BargeInCallResponseBodyDataUserContext) SetMobile(v string) *BargeInCallResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *BargeInCallResponseBodyDataUserContext) SetOutboundScenario(v bool) *BargeInCallResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *BargeInCallResponseBodyDataUserContext) SetReserved(v int64) *BargeInCallResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *BargeInCallResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *BargeInCallResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *BargeInCallResponseBodyDataUserContext) SetUserId(v string) *BargeInCallResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *BargeInCallResponseBodyDataUserContext) SetUserState(v string) *BargeInCallResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *BargeInCallResponseBodyDataUserContext) SetWorkMode(v string) *BargeInCallResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type BargeInCallResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BargeInCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BargeInCallResponse) String() string {
	return tea.Prettify(s)
}

func (s BargeInCallResponse) GoString() string {
	return s.String()
}

func (s *BargeInCallResponse) SetHeaders(v map[string]*string) *BargeInCallResponse {
	s.Headers = v
	return s
}

func (s *BargeInCallResponse) SetStatusCode(v int32) *BargeInCallResponse {
	s.StatusCode = &v
	return s
}

func (s *BargeInCallResponse) SetBody(v *BargeInCallResponseBody) *BargeInCallResponse {
	s.Body = v
	return s
}

type BlindTransferRequest struct {
	CallPriority         *int32  `json:"CallPriority,omitempty" xml:"CallPriority,omitempty"`
	ContactFlowVariables *string `json:"ContactFlowVariables,omitempty" xml:"ContactFlowVariables,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-6538214103685****
	JobId                    *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	QueuingOverflowThreshold *int64  `json:"QueuingOverflowThreshold,omitempty" xml:"QueuingOverflowThreshold,omitempty"`
	QueuingTimeoutSeconds    *int64  `json:"QueuingTimeoutSeconds,omitempty" xml:"QueuingTimeoutSeconds,omitempty"`
	RoutingType              *string `json:"RoutingType,omitempty" xml:"RoutingType,omitempty"`
	StrategyName             *string `json:"StrategyName,omitempty" xml:"StrategyName,omitempty"`
	StrategyParams           *string `json:"StrategyParams,omitempty" xml:"StrategyParams,omitempty"`
	Tags                     *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// example:
	//
	// 60
	TimeoutSeconds *int32 `json:"TimeoutSeconds,omitempty" xml:"TimeoutSeconds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// agent@ccc-test
	Transferee     *string `json:"Transferee,omitempty" xml:"Transferee,omitempty"`
	TransfereeType *string `json:"TransfereeType,omitempty" xml:"TransfereeType,omitempty"`
	// example:
	//
	// 08314325****
	Transferor *string `json:"Transferor,omitempty" xml:"Transferor,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s BlindTransferRequest) String() string {
	return tea.Prettify(s)
}

func (s BlindTransferRequest) GoString() string {
	return s.String()
}

func (s *BlindTransferRequest) SetCallPriority(v int32) *BlindTransferRequest {
	s.CallPriority = &v
	return s
}

func (s *BlindTransferRequest) SetContactFlowVariables(v string) *BlindTransferRequest {
	s.ContactFlowVariables = &v
	return s
}

func (s *BlindTransferRequest) SetDeviceId(v string) *BlindTransferRequest {
	s.DeviceId = &v
	return s
}

func (s *BlindTransferRequest) SetInstanceId(v string) *BlindTransferRequest {
	s.InstanceId = &v
	return s
}

func (s *BlindTransferRequest) SetJobId(v string) *BlindTransferRequest {
	s.JobId = &v
	return s
}

func (s *BlindTransferRequest) SetQueuingOverflowThreshold(v int64) *BlindTransferRequest {
	s.QueuingOverflowThreshold = &v
	return s
}

func (s *BlindTransferRequest) SetQueuingTimeoutSeconds(v int64) *BlindTransferRequest {
	s.QueuingTimeoutSeconds = &v
	return s
}

func (s *BlindTransferRequest) SetRoutingType(v string) *BlindTransferRequest {
	s.RoutingType = &v
	return s
}

func (s *BlindTransferRequest) SetStrategyName(v string) *BlindTransferRequest {
	s.StrategyName = &v
	return s
}

func (s *BlindTransferRequest) SetStrategyParams(v string) *BlindTransferRequest {
	s.StrategyParams = &v
	return s
}

func (s *BlindTransferRequest) SetTags(v string) *BlindTransferRequest {
	s.Tags = &v
	return s
}

func (s *BlindTransferRequest) SetTimeoutSeconds(v int32) *BlindTransferRequest {
	s.TimeoutSeconds = &v
	return s
}

func (s *BlindTransferRequest) SetTransferee(v string) *BlindTransferRequest {
	s.Transferee = &v
	return s
}

func (s *BlindTransferRequest) SetTransfereeType(v string) *BlindTransferRequest {
	s.TransfereeType = &v
	return s
}

func (s *BlindTransferRequest) SetTransferor(v string) *BlindTransferRequest {
	s.Transferor = &v
	return s
}

func (s *BlindTransferRequest) SetUserId(v string) *BlindTransferRequest {
	s.UserId = &v
	return s
}

type BlindTransferResponseBody struct {
	// example:
	//
	// OK
	Code *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *BlindTransferResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BlindTransferResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BlindTransferResponseBody) GoString() string {
	return s.String()
}

func (s *BlindTransferResponseBody) SetCode(v string) *BlindTransferResponseBody {
	s.Code = &v
	return s
}

func (s *BlindTransferResponseBody) SetData(v *BlindTransferResponseBodyData) *BlindTransferResponseBody {
	s.Data = v
	return s
}

func (s *BlindTransferResponseBody) SetHttpStatusCode(v int32) *BlindTransferResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *BlindTransferResponseBody) SetMessage(v string) *BlindTransferResponseBody {
	s.Message = &v
	return s
}

func (s *BlindTransferResponseBody) SetParams(v []*string) *BlindTransferResponseBody {
	s.Params = v
	return s
}

func (s *BlindTransferResponseBody) SetRequestId(v string) *BlindTransferResponseBody {
	s.RequestId = &v
	return s
}

type BlindTransferResponseBodyData struct {
	CallContext *BlindTransferResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	// example:
	//
	// 103654
	ContextId   *int64                                    `json:"ContextId,omitempty" xml:"ContextId,omitempty"`
	UserContext *BlindTransferResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s BlindTransferResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BlindTransferResponseBodyData) GoString() string {
	return s.String()
}

func (s *BlindTransferResponseBodyData) SetCallContext(v *BlindTransferResponseBodyDataCallContext) *BlindTransferResponseBodyData {
	s.CallContext = v
	return s
}

func (s *BlindTransferResponseBodyData) SetContextId(v int64) *BlindTransferResponseBodyData {
	s.ContextId = &v
	return s
}

func (s *BlindTransferResponseBodyData) SetUserContext(v *BlindTransferResponseBodyDataUserContext) *BlindTransferResponseBodyData {
	s.UserContext = v
	return s
}

type BlindTransferResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                                    `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*BlindTransferResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s BlindTransferResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s BlindTransferResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *BlindTransferResponseBodyDataCallContext) SetCallType(v string) *BlindTransferResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *BlindTransferResponseBodyDataCallContext) SetChannelContexts(v []*BlindTransferResponseBodyDataCallContextChannelContexts) *BlindTransferResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *BlindTransferResponseBodyDataCallContext) SetInstanceId(v string) *BlindTransferResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *BlindTransferResponseBodyDataCallContext) SetJobId(v string) *BlindTransferResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type BlindTransferResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// MONITORING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// ANSWERED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 1390501****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0830019****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s BlindTransferResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s BlindTransferResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *BlindTransferResponseBodyDataCallContextChannelContexts) SetCallType(v string) *BlindTransferResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *BlindTransferResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *BlindTransferResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *BlindTransferResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *BlindTransferResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *BlindTransferResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *BlindTransferResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *BlindTransferResponseBodyDataCallContextChannelContexts) SetDestination(v string) *BlindTransferResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *BlindTransferResponseBodyDataCallContextChannelContexts) SetJobId(v string) *BlindTransferResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *BlindTransferResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *BlindTransferResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *BlindTransferResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *BlindTransferResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *BlindTransferResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *BlindTransferResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *BlindTransferResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *BlindTransferResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *BlindTransferResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *BlindTransferResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *BlindTransferResponseBodyDataCallContextChannelContexts) SetUserId(v string) *BlindTransferResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type BlindTransferResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609136956378
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s BlindTransferResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s BlindTransferResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *BlindTransferResponseBodyDataUserContext) SetBreakCode(v string) *BlindTransferResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *BlindTransferResponseBodyDataUserContext) SetDeviceId(v string) *BlindTransferResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *BlindTransferResponseBodyDataUserContext) SetExtension(v string) *BlindTransferResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *BlindTransferResponseBodyDataUserContext) SetHeartbeat(v int64) *BlindTransferResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *BlindTransferResponseBodyDataUserContext) SetInstanceId(v string) *BlindTransferResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *BlindTransferResponseBodyDataUserContext) SetJobId(v string) *BlindTransferResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *BlindTransferResponseBodyDataUserContext) SetMobile(v string) *BlindTransferResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *BlindTransferResponseBodyDataUserContext) SetOutboundScenario(v bool) *BlindTransferResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *BlindTransferResponseBodyDataUserContext) SetReserved(v int64) *BlindTransferResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *BlindTransferResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *BlindTransferResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *BlindTransferResponseBodyDataUserContext) SetUserId(v string) *BlindTransferResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *BlindTransferResponseBodyDataUserContext) SetUserState(v string) *BlindTransferResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *BlindTransferResponseBodyDataUserContext) SetWorkMode(v string) *BlindTransferResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type BlindTransferResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BlindTransferResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BlindTransferResponse) String() string {
	return tea.Prettify(s)
}

func (s BlindTransferResponse) GoString() string {
	return s.String()
}

func (s *BlindTransferResponse) SetHeaders(v map[string]*string) *BlindTransferResponse {
	s.Headers = v
	return s
}

func (s *BlindTransferResponse) SetStatusCode(v int32) *BlindTransferResponse {
	s.StatusCode = &v
	return s
}

func (s *BlindTransferResponse) SetBody(v *BlindTransferResponseBody) *BlindTransferResponse {
	s.Body = v
	return s
}

type BridgeRtcCallRequest struct {
	// This parameter is required.
	Callee *string `json:"Callee,omitempty" xml:"Callee,omitempty"`
	Caller *string `json:"Caller,omitempty" xml:"Caller,omitempty"`
	// This parameter is required.
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ServiceProvider *string `json:"ServiceProvider,omitempty" xml:"ServiceProvider,omitempty"`
	Tags            *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	TimeoutSeconds  *int32  `json:"TimeoutSeconds,omitempty" xml:"TimeoutSeconds,omitempty"`
	UserId          *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VideoEnabled    *bool   `json:"VideoEnabled,omitempty" xml:"VideoEnabled,omitempty"`
}

func (s BridgeRtcCallRequest) String() string {
	return tea.Prettify(s)
}

func (s BridgeRtcCallRequest) GoString() string {
	return s.String()
}

func (s *BridgeRtcCallRequest) SetCallee(v string) *BridgeRtcCallRequest {
	s.Callee = &v
	return s
}

func (s *BridgeRtcCallRequest) SetCaller(v string) *BridgeRtcCallRequest {
	s.Caller = &v
	return s
}

func (s *BridgeRtcCallRequest) SetDeviceId(v string) *BridgeRtcCallRequest {
	s.DeviceId = &v
	return s
}

func (s *BridgeRtcCallRequest) SetInstanceId(v string) *BridgeRtcCallRequest {
	s.InstanceId = &v
	return s
}

func (s *BridgeRtcCallRequest) SetServiceProvider(v string) *BridgeRtcCallRequest {
	s.ServiceProvider = &v
	return s
}

func (s *BridgeRtcCallRequest) SetTags(v string) *BridgeRtcCallRequest {
	s.Tags = &v
	return s
}

func (s *BridgeRtcCallRequest) SetTimeoutSeconds(v int32) *BridgeRtcCallRequest {
	s.TimeoutSeconds = &v
	return s
}

func (s *BridgeRtcCallRequest) SetUserId(v string) *BridgeRtcCallRequest {
	s.UserId = &v
	return s
}

func (s *BridgeRtcCallRequest) SetVideoEnabled(v bool) *BridgeRtcCallRequest {
	s.VideoEnabled = &v
	return s
}

type BridgeRtcCallResponseBody struct {
	Code           *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *BridgeRtcCallResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                         `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                        `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string                      `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	RequestId      *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BridgeRtcCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BridgeRtcCallResponseBody) GoString() string {
	return s.String()
}

func (s *BridgeRtcCallResponseBody) SetCode(v string) *BridgeRtcCallResponseBody {
	s.Code = &v
	return s
}

func (s *BridgeRtcCallResponseBody) SetData(v *BridgeRtcCallResponseBodyData) *BridgeRtcCallResponseBody {
	s.Data = v
	return s
}

func (s *BridgeRtcCallResponseBody) SetHttpStatusCode(v int32) *BridgeRtcCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *BridgeRtcCallResponseBody) SetMessage(v string) *BridgeRtcCallResponseBody {
	s.Message = &v
	return s
}

func (s *BridgeRtcCallResponseBody) SetParams(v []*string) *BridgeRtcCallResponseBody {
	s.Params = v
	return s
}

func (s *BridgeRtcCallResponseBody) SetRequestId(v string) *BridgeRtcCallResponseBody {
	s.RequestId = &v
	return s
}

type BridgeRtcCallResponseBodyData struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobId      *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	TokenInfo  *string `json:"TokenInfo,omitempty" xml:"TokenInfo,omitempty"`
}

func (s BridgeRtcCallResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BridgeRtcCallResponseBodyData) GoString() string {
	return s.String()
}

func (s *BridgeRtcCallResponseBodyData) SetInstanceId(v string) *BridgeRtcCallResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *BridgeRtcCallResponseBodyData) SetJobId(v string) *BridgeRtcCallResponseBodyData {
	s.JobId = &v
	return s
}

func (s *BridgeRtcCallResponseBodyData) SetTokenInfo(v string) *BridgeRtcCallResponseBodyData {
	s.TokenInfo = &v
	return s
}

type BridgeRtcCallResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BridgeRtcCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BridgeRtcCallResponse) String() string {
	return tea.Prettify(s)
}

func (s BridgeRtcCallResponse) GoString() string {
	return s.String()
}

func (s *BridgeRtcCallResponse) SetHeaders(v map[string]*string) *BridgeRtcCallResponse {
	s.Headers = v
	return s
}

func (s *BridgeRtcCallResponse) SetStatusCode(v int32) *BridgeRtcCallResponse {
	s.StatusCode = &v
	return s
}

func (s *BridgeRtcCallResponse) SetBody(v *BridgeRtcCallResponseBody) *BridgeRtcCallResponse {
	s.Body = v
	return s
}

type CancelAttendedTransferRequest struct {
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CancelAttendedTransferRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelAttendedTransferRequest) GoString() string {
	return s.String()
}

func (s *CancelAttendedTransferRequest) SetDeviceId(v string) *CancelAttendedTransferRequest {
	s.DeviceId = &v
	return s
}

func (s *CancelAttendedTransferRequest) SetInstanceId(v string) *CancelAttendedTransferRequest {
	s.InstanceId = &v
	return s
}

func (s *CancelAttendedTransferRequest) SetJobId(v string) *CancelAttendedTransferRequest {
	s.JobId = &v
	return s
}

func (s *CancelAttendedTransferRequest) SetUserId(v string) *CancelAttendedTransferRequest {
	s.UserId = &v
	return s
}

type CancelAttendedTransferResponseBody struct {
	// example:
	//
	// OK
	Code *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *CancelAttendedTransferResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelAttendedTransferResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelAttendedTransferResponseBody) GoString() string {
	return s.String()
}

func (s *CancelAttendedTransferResponseBody) SetCode(v string) *CancelAttendedTransferResponseBody {
	s.Code = &v
	return s
}

func (s *CancelAttendedTransferResponseBody) SetData(v *CancelAttendedTransferResponseBodyData) *CancelAttendedTransferResponseBody {
	s.Data = v
	return s
}

func (s *CancelAttendedTransferResponseBody) SetHttpStatusCode(v int32) *CancelAttendedTransferResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CancelAttendedTransferResponseBody) SetMessage(v string) *CancelAttendedTransferResponseBody {
	s.Message = &v
	return s
}

func (s *CancelAttendedTransferResponseBody) SetParams(v []*string) *CancelAttendedTransferResponseBody {
	s.Params = v
	return s
}

func (s *CancelAttendedTransferResponseBody) SetRequestId(v string) *CancelAttendedTransferResponseBody {
	s.RequestId = &v
	return s
}

type CancelAttendedTransferResponseBodyData struct {
	CallContext *CancelAttendedTransferResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	// example:
	//
	// 103656
	ContextId   *int64                                             `json:"ContextId,omitempty" xml:"ContextId,omitempty"`
	UserContext *CancelAttendedTransferResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s CancelAttendedTransferResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CancelAttendedTransferResponseBodyData) GoString() string {
	return s.String()
}

func (s *CancelAttendedTransferResponseBodyData) SetCallContext(v *CancelAttendedTransferResponseBodyDataCallContext) *CancelAttendedTransferResponseBodyData {
	s.CallContext = v
	return s
}

func (s *CancelAttendedTransferResponseBodyData) SetContextId(v int64) *CancelAttendedTransferResponseBodyData {
	s.ContextId = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyData) SetUserContext(v *CancelAttendedTransferResponseBodyDataUserContext) *CancelAttendedTransferResponseBodyData {
	s.UserContext = v
	return s
}

type CancelAttendedTransferResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                                             `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*CancelAttendedTransferResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s CancelAttendedTransferResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s CancelAttendedTransferResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *CancelAttendedTransferResponseBodyDataCallContext) SetCallType(v string) *CancelAttendedTransferResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataCallContext) SetChannelContexts(v []*CancelAttendedTransferResponseBodyDataCallContextChannelContexts) *CancelAttendedTransferResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataCallContext) SetInstanceId(v string) *CancelAttendedTransferResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataCallContext) SetJobId(v string) *CancelAttendedTransferResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type CancelAttendedTransferResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// CONSULTANT
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// MONITORING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// ANSWERED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 1390501****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// 10
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0830019****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CancelAttendedTransferResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s CancelAttendedTransferResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *CancelAttendedTransferResponseBodyDataCallContextChannelContexts) SetCallType(v string) *CancelAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *CancelAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *CancelAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *CancelAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataCallContextChannelContexts) SetDestination(v string) *CancelAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataCallContextChannelContexts) SetIndex(v int32) *CancelAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.Index = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataCallContextChannelContexts) SetJobId(v string) *CancelAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *CancelAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *CancelAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *CancelAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *CancelAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *CancelAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataCallContextChannelContexts) SetUserId(v string) *CancelAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type CancelAttendedTransferResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609136956378
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s CancelAttendedTransferResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s CancelAttendedTransferResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *CancelAttendedTransferResponseBodyDataUserContext) SetBreakCode(v string) *CancelAttendedTransferResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataUserContext) SetDeviceId(v string) *CancelAttendedTransferResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataUserContext) SetExtension(v string) *CancelAttendedTransferResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataUserContext) SetHeartbeat(v int64) *CancelAttendedTransferResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataUserContext) SetInstanceId(v string) *CancelAttendedTransferResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataUserContext) SetJobId(v string) *CancelAttendedTransferResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataUserContext) SetMobile(v string) *CancelAttendedTransferResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataUserContext) SetOutboundScenario(v bool) *CancelAttendedTransferResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataUserContext) SetReserved(v int64) *CancelAttendedTransferResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *CancelAttendedTransferResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataUserContext) SetUserId(v string) *CancelAttendedTransferResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataUserContext) SetUserState(v string) *CancelAttendedTransferResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *CancelAttendedTransferResponseBodyDataUserContext) SetWorkMode(v string) *CancelAttendedTransferResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type CancelAttendedTransferResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelAttendedTransferResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelAttendedTransferResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelAttendedTransferResponse) GoString() string {
	return s.String()
}

func (s *CancelAttendedTransferResponse) SetHeaders(v map[string]*string) *CancelAttendedTransferResponse {
	s.Headers = v
	return s
}

func (s *CancelAttendedTransferResponse) SetStatusCode(v int32) *CancelAttendedTransferResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelAttendedTransferResponse) SetBody(v *CancelAttendedTransferResponseBody) *CancelAttendedTransferResponse {
	s.Body = v
	return s
}

type ChangeVisibilityRequest struct {
	// This parameter is required.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Invisible  *bool   `json:"Invisible,omitempty" xml:"Invisible,omitempty"`
	UserId     *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ChangeVisibilityRequest) String() string {
	return tea.Prettify(s)
}

func (s ChangeVisibilityRequest) GoString() string {
	return s.String()
}

func (s *ChangeVisibilityRequest) SetInstanceId(v string) *ChangeVisibilityRequest {
	s.InstanceId = &v
	return s
}

func (s *ChangeVisibilityRequest) SetInvisible(v bool) *ChangeVisibilityRequest {
	s.Invisible = &v
	return s
}

func (s *ChangeVisibilityRequest) SetUserId(v string) *ChangeVisibilityRequest {
	s.UserId = &v
	return s
}

type ChangeVisibilityResponseBody struct {
	Code           *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *ChangeVisibilityResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                            `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string                         `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	RequestId      *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ChangeVisibilityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ChangeVisibilityResponseBody) GoString() string {
	return s.String()
}

func (s *ChangeVisibilityResponseBody) SetCode(v string) *ChangeVisibilityResponseBody {
	s.Code = &v
	return s
}

func (s *ChangeVisibilityResponseBody) SetData(v *ChangeVisibilityResponseBodyData) *ChangeVisibilityResponseBody {
	s.Data = v
	return s
}

func (s *ChangeVisibilityResponseBody) SetHttpStatusCode(v int32) *ChangeVisibilityResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ChangeVisibilityResponseBody) SetMessage(v string) *ChangeVisibilityResponseBody {
	s.Message = &v
	return s
}

func (s *ChangeVisibilityResponseBody) SetParams(v []*string) *ChangeVisibilityResponseBody {
	s.Params = v
	return s
}

func (s *ChangeVisibilityResponseBody) SetRequestId(v string) *ChangeVisibilityResponseBody {
	s.RequestId = &v
	return s
}

type ChangeVisibilityResponseBodyData struct {
	BreakCode              *string   `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	DeviceId               *string   `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	Extension              *string   `json:"Extension,omitempty" xml:"Extension,omitempty"`
	InstanceId             *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobId                  *string   `json:"JobId,omitempty" xml:"JobId,omitempty"`
	OutboundScenario       *bool     `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	UserId                 *string   `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserState              *string   `json:"UserState,omitempty" xml:"UserState,omitempty"`
	WorkMode               *string   `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s ChangeVisibilityResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ChangeVisibilityResponseBodyData) GoString() string {
	return s.String()
}

func (s *ChangeVisibilityResponseBodyData) SetBreakCode(v string) *ChangeVisibilityResponseBodyData {
	s.BreakCode = &v
	return s
}

func (s *ChangeVisibilityResponseBodyData) SetDeviceId(v string) *ChangeVisibilityResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *ChangeVisibilityResponseBodyData) SetExtension(v string) *ChangeVisibilityResponseBodyData {
	s.Extension = &v
	return s
}

func (s *ChangeVisibilityResponseBodyData) SetInstanceId(v string) *ChangeVisibilityResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *ChangeVisibilityResponseBodyData) SetJobId(v string) *ChangeVisibilityResponseBodyData {
	s.JobId = &v
	return s
}

func (s *ChangeVisibilityResponseBodyData) SetOutboundScenario(v bool) *ChangeVisibilityResponseBodyData {
	s.OutboundScenario = &v
	return s
}

func (s *ChangeVisibilityResponseBodyData) SetSignedSkillGroupIdList(v []*string) *ChangeVisibilityResponseBodyData {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *ChangeVisibilityResponseBodyData) SetUserId(v string) *ChangeVisibilityResponseBodyData {
	s.UserId = &v
	return s
}

func (s *ChangeVisibilityResponseBodyData) SetUserState(v string) *ChangeVisibilityResponseBodyData {
	s.UserState = &v
	return s
}

func (s *ChangeVisibilityResponseBodyData) SetWorkMode(v string) *ChangeVisibilityResponseBodyData {
	s.WorkMode = &v
	return s
}

type ChangeVisibilityResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ChangeVisibilityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ChangeVisibilityResponse) String() string {
	return tea.Prettify(s)
}

func (s ChangeVisibilityResponse) GoString() string {
	return s.String()
}

func (s *ChangeVisibilityResponse) SetHeaders(v map[string]*string) *ChangeVisibilityResponse {
	s.Headers = v
	return s
}

func (s *ChangeVisibilityResponse) SetStatusCode(v int32) *ChangeVisibilityResponse {
	s.StatusCode = &v
	return s
}

func (s *ChangeVisibilityResponse) SetBody(v *ChangeVisibilityResponseBody) *ChangeVisibilityResponse {
	s.Body = v
	return s
}

type ChangeWorkModeRequest struct {
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 1382114****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// ["online-1@ccc-test","online-2@ccc-test","online-3@ccc-test","skg-default@ccc-test"]
	SignedSkillGroupIdList *string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s ChangeWorkModeRequest) String() string {
	return tea.Prettify(s)
}

func (s ChangeWorkModeRequest) GoString() string {
	return s.String()
}

func (s *ChangeWorkModeRequest) SetDeviceId(v string) *ChangeWorkModeRequest {
	s.DeviceId = &v
	return s
}

func (s *ChangeWorkModeRequest) SetInstanceId(v string) *ChangeWorkModeRequest {
	s.InstanceId = &v
	return s
}

func (s *ChangeWorkModeRequest) SetMobile(v string) *ChangeWorkModeRequest {
	s.Mobile = &v
	return s
}

func (s *ChangeWorkModeRequest) SetSignedSkillGroupIdList(v string) *ChangeWorkModeRequest {
	s.SignedSkillGroupIdList = &v
	return s
}

func (s *ChangeWorkModeRequest) SetUserId(v string) *ChangeWorkModeRequest {
	s.UserId = &v
	return s
}

func (s *ChangeWorkModeRequest) SetWorkMode(v string) *ChangeWorkModeRequest {
	s.WorkMode = &v
	return s
}

type ChangeWorkModeResponseBody struct {
	// example:
	//
	// OK
	Code *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ChangeWorkModeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 87731ED1-6224-48A5-99E3-6237FF9B1C00
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ChangeWorkModeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ChangeWorkModeResponseBody) GoString() string {
	return s.String()
}

func (s *ChangeWorkModeResponseBody) SetCode(v string) *ChangeWorkModeResponseBody {
	s.Code = &v
	return s
}

func (s *ChangeWorkModeResponseBody) SetData(v *ChangeWorkModeResponseBodyData) *ChangeWorkModeResponseBody {
	s.Data = v
	return s
}

func (s *ChangeWorkModeResponseBody) SetHttpStatusCode(v int32) *ChangeWorkModeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ChangeWorkModeResponseBody) SetMessage(v string) *ChangeWorkModeResponseBody {
	s.Message = &v
	return s
}

func (s *ChangeWorkModeResponseBody) SetParams(v []*string) *ChangeWorkModeResponseBody {
	s.Params = v
	return s
}

func (s *ChangeWorkModeResponseBody) SetRequestId(v string) *ChangeWorkModeResponseBody {
	s.RequestId = &v
	return s
}

type ChangeWorkModeResponseBodyData struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8001****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobId      *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// false
	OutboundScenario       *bool     `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// OFFLINE
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s ChangeWorkModeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ChangeWorkModeResponseBodyData) GoString() string {
	return s.String()
}

func (s *ChangeWorkModeResponseBodyData) SetBreakCode(v string) *ChangeWorkModeResponseBodyData {
	s.BreakCode = &v
	return s
}

func (s *ChangeWorkModeResponseBodyData) SetDeviceId(v string) *ChangeWorkModeResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *ChangeWorkModeResponseBodyData) SetExtension(v string) *ChangeWorkModeResponseBodyData {
	s.Extension = &v
	return s
}

func (s *ChangeWorkModeResponseBodyData) SetInstanceId(v string) *ChangeWorkModeResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *ChangeWorkModeResponseBodyData) SetJobId(v string) *ChangeWorkModeResponseBodyData {
	s.JobId = &v
	return s
}

func (s *ChangeWorkModeResponseBodyData) SetOutboundScenario(v bool) *ChangeWorkModeResponseBodyData {
	s.OutboundScenario = &v
	return s
}

func (s *ChangeWorkModeResponseBodyData) SetSignedSkillGroupIdList(v []*string) *ChangeWorkModeResponseBodyData {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *ChangeWorkModeResponseBodyData) SetUserId(v string) *ChangeWorkModeResponseBodyData {
	s.UserId = &v
	return s
}

func (s *ChangeWorkModeResponseBodyData) SetUserState(v string) *ChangeWorkModeResponseBodyData {
	s.UserState = &v
	return s
}

func (s *ChangeWorkModeResponseBodyData) SetWorkMode(v string) *ChangeWorkModeResponseBodyData {
	s.WorkMode = &v
	return s
}

type ChangeWorkModeResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ChangeWorkModeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ChangeWorkModeResponse) String() string {
	return tea.Prettify(s)
}

func (s ChangeWorkModeResponse) GoString() string {
	return s.String()
}

func (s *ChangeWorkModeResponse) SetHeaders(v map[string]*string) *ChangeWorkModeResponse {
	s.Headers = v
	return s
}

func (s *ChangeWorkModeResponse) SetStatusCode(v int32) *ChangeWorkModeResponse {
	s.StatusCode = &v
	return s
}

func (s *ChangeWorkModeResponse) SetBody(v *ChangeWorkModeResponseBody) *ChangeWorkModeResponse {
	s.Body = v
	return s
}

type ClaimChatRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// chat-65382141036853491
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s ClaimChatRequest) String() string {
	return tea.Prettify(s)
}

func (s ClaimChatRequest) GoString() string {
	return s.String()
}

func (s *ClaimChatRequest) SetInstanceId(v string) *ClaimChatRequest {
	s.InstanceId = &v
	return s
}

func (s *ClaimChatRequest) SetJobId(v string) *ClaimChatRequest {
	s.JobId = &v
	return s
}

func (s *ClaimChatRequest) SetSkillGroupId(v string) *ClaimChatRequest {
	s.SkillGroupId = &v
	return s
}

type ClaimChatResponseBody struct {
	// example:
	//
	// OK
	Code *string                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ClaimChatResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// BC976D32-AC4C-4E0F-8AA9-F4BC6C4E2B3E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ClaimChatResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ClaimChatResponseBody) GoString() string {
	return s.String()
}

func (s *ClaimChatResponseBody) SetCode(v string) *ClaimChatResponseBody {
	s.Code = &v
	return s
}

func (s *ClaimChatResponseBody) SetData(v *ClaimChatResponseBodyData) *ClaimChatResponseBody {
	s.Data = v
	return s
}

func (s *ClaimChatResponseBody) SetHttpStatusCode(v int32) *ClaimChatResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ClaimChatResponseBody) SetMessage(v string) *ClaimChatResponseBody {
	s.Message = &v
	return s
}

func (s *ClaimChatResponseBody) SetParams(v []*string) *ClaimChatResponseBody {
	s.Params = v
	return s
}

func (s *ClaimChatResponseBody) SetRequestId(v string) *ClaimChatResponseBody {
	s.RequestId = &v
	return s
}

type ClaimChatResponseBodyData struct {
	ChatContexts []*ClaimChatResponseBodyDataChatContexts `json:"ChatContexts,omitempty" xml:"ChatContexts,omitempty" type:"Repeated"`
	// example:
	//
	// 123456789
	ContextId   *int64                                `json:"ContextId,omitempty" xml:"ContextId,omitempty"`
	UserContext *ClaimChatResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s ClaimChatResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ClaimChatResponseBodyData) GoString() string {
	return s.String()
}

func (s *ClaimChatResponseBodyData) SetChatContexts(v []*ClaimChatResponseBodyDataChatContexts) *ClaimChatResponseBodyData {
	s.ChatContexts = v
	return s
}

func (s *ClaimChatResponseBodyData) SetContextId(v int64) *ClaimChatResponseBodyData {
	s.ContextId = &v
	return s
}

func (s *ClaimChatResponseBodyData) SetUserContext(v *ClaimChatResponseBodyDataUserContext) *ClaimChatResponseBodyData {
	s.UserContext = v
	return s
}

type ClaimChatResponseBodyDataChatContexts struct {
	// example:
	//
	// 226****-cbb6-****-8fea-1e71baf7bfa7
	AccessChannelId   *string `json:"AccessChannelId,omitempty" xml:"AccessChannelId,omitempty"`
	AccessChannelName *string `json:"AccessChannelName,omitempty" xml:"AccessChannelName,omitempty"`
	// example:
	//
	// Web
	AccessChannelType *string `json:"AccessChannelType,omitempty" xml:"AccessChannelType,omitempty"`
	// example:
	//
	// true
	BeingAssigned *bool   `json:"BeingAssigned,omitempty" xml:"BeingAssigned,omitempty"`
	CallVariables *string `json:"CallVariables,omitempty" xml:"CallVariables,omitempty"`
	// example:
	//
	// INBOUND
	ChatType *string `json:"ChatType,omitempty" xml:"ChatType,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// chat-65382141036853491
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s ClaimChatResponseBodyDataChatContexts) String() string {
	return tea.Prettify(s)
}

func (s ClaimChatResponseBodyDataChatContexts) GoString() string {
	return s.String()
}

func (s *ClaimChatResponseBodyDataChatContexts) SetAccessChannelId(v string) *ClaimChatResponseBodyDataChatContexts {
	s.AccessChannelId = &v
	return s
}

func (s *ClaimChatResponseBodyDataChatContexts) SetAccessChannelName(v string) *ClaimChatResponseBodyDataChatContexts {
	s.AccessChannelName = &v
	return s
}

func (s *ClaimChatResponseBodyDataChatContexts) SetAccessChannelType(v string) *ClaimChatResponseBodyDataChatContexts {
	s.AccessChannelType = &v
	return s
}

func (s *ClaimChatResponseBodyDataChatContexts) SetBeingAssigned(v bool) *ClaimChatResponseBodyDataChatContexts {
	s.BeingAssigned = &v
	return s
}

func (s *ClaimChatResponseBodyDataChatContexts) SetCallVariables(v string) *ClaimChatResponseBodyDataChatContexts {
	s.CallVariables = &v
	return s
}

func (s *ClaimChatResponseBodyDataChatContexts) SetChatType(v string) *ClaimChatResponseBodyDataChatContexts {
	s.ChatType = &v
	return s
}

func (s *ClaimChatResponseBodyDataChatContexts) SetInstanceId(v string) *ClaimChatResponseBodyDataChatContexts {
	s.InstanceId = &v
	return s
}

func (s *ClaimChatResponseBodyDataChatContexts) SetJobId(v string) *ClaimChatResponseBodyDataChatContexts {
	s.JobId = &v
	return s
}

type ClaimChatResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// CCC-169.254.165.2-browser125.0.0-bs48b41903450e6c8
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// ONLINE
	DeviceState *string `json:"DeviceState,omitempty" xml:"DeviceState,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// chat-65382141036853491
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 18******102
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// false
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// userId@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s ClaimChatResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s ClaimChatResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *ClaimChatResponseBodyDataUserContext) SetBreakCode(v string) *ClaimChatResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *ClaimChatResponseBodyDataUserContext) SetDeviceId(v string) *ClaimChatResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *ClaimChatResponseBodyDataUserContext) SetDeviceState(v string) *ClaimChatResponseBodyDataUserContext {
	s.DeviceState = &v
	return s
}

func (s *ClaimChatResponseBodyDataUserContext) SetExtension(v string) *ClaimChatResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *ClaimChatResponseBodyDataUserContext) SetHeartbeat(v int64) *ClaimChatResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *ClaimChatResponseBodyDataUserContext) SetInstanceId(v string) *ClaimChatResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *ClaimChatResponseBodyDataUserContext) SetJobId(v string) *ClaimChatResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *ClaimChatResponseBodyDataUserContext) SetMobile(v string) *ClaimChatResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *ClaimChatResponseBodyDataUserContext) SetOutboundScenario(v bool) *ClaimChatResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *ClaimChatResponseBodyDataUserContext) SetReserved(v int64) *ClaimChatResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *ClaimChatResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *ClaimChatResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *ClaimChatResponseBodyDataUserContext) SetUserId(v string) *ClaimChatResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *ClaimChatResponseBodyDataUserContext) SetUserState(v string) *ClaimChatResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *ClaimChatResponseBodyDataUserContext) SetWorkMode(v string) *ClaimChatResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type ClaimChatResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ClaimChatResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ClaimChatResponse) String() string {
	return tea.Prettify(s)
}

func (s ClaimChatResponse) GoString() string {
	return s.String()
}

func (s *ClaimChatResponse) SetHeaders(v map[string]*string) *ClaimChatResponse {
	s.Headers = v
	return s
}

func (s *ClaimChatResponse) SetStatusCode(v int32) *ClaimChatResponse {
	s.StatusCode = &v
	return s
}

func (s *ClaimChatResponse) SetBody(v *ClaimChatResponseBody) *ClaimChatResponse {
	s.Body = v
	return s
}

type CoachCallRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// coached-agent@ccc-test
	CoachedUserId *string `json:"CoachedUserId,omitempty" xml:"CoachedUserId,omitempty"`
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-65382141036853491
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 30
	TimeoutSeconds *int32 `json:"TimeoutSeconds,omitempty" xml:"TimeoutSeconds,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CoachCallRequest) String() string {
	return tea.Prettify(s)
}

func (s CoachCallRequest) GoString() string {
	return s.String()
}

func (s *CoachCallRequest) SetCoachedUserId(v string) *CoachCallRequest {
	s.CoachedUserId = &v
	return s
}

func (s *CoachCallRequest) SetDeviceId(v string) *CoachCallRequest {
	s.DeviceId = &v
	return s
}

func (s *CoachCallRequest) SetInstanceId(v string) *CoachCallRequest {
	s.InstanceId = &v
	return s
}

func (s *CoachCallRequest) SetJobId(v string) *CoachCallRequest {
	s.JobId = &v
	return s
}

func (s *CoachCallRequest) SetTimeoutSeconds(v int32) *CoachCallRequest {
	s.TimeoutSeconds = &v
	return s
}

func (s *CoachCallRequest) SetUserId(v string) *CoachCallRequest {
	s.UserId = &v
	return s
}

type CoachCallResponseBody struct {
	// example:
	//
	// OK
	Code *string                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *CoachCallResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CoachCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CoachCallResponseBody) GoString() string {
	return s.String()
}

func (s *CoachCallResponseBody) SetCode(v string) *CoachCallResponseBody {
	s.Code = &v
	return s
}

func (s *CoachCallResponseBody) SetData(v *CoachCallResponseBodyData) *CoachCallResponseBody {
	s.Data = v
	return s
}

func (s *CoachCallResponseBody) SetHttpStatusCode(v int32) *CoachCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CoachCallResponseBody) SetMessage(v string) *CoachCallResponseBody {
	s.Message = &v
	return s
}

func (s *CoachCallResponseBody) SetParams(v []*string) *CoachCallResponseBody {
	s.Params = v
	return s
}

func (s *CoachCallResponseBody) SetRequestId(v string) *CoachCallResponseBody {
	s.RequestId = &v
	return s
}

type CoachCallResponseBodyData struct {
	CallContext *CoachCallResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	UserContext *CoachCallResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s CoachCallResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CoachCallResponseBodyData) GoString() string {
	return s.String()
}

func (s *CoachCallResponseBodyData) SetCallContext(v *CoachCallResponseBodyDataCallContext) *CoachCallResponseBodyData {
	s.CallContext = v
	return s
}

func (s *CoachCallResponseBodyData) SetUserContext(v *CoachCallResponseBodyDataUserContext) *CoachCallResponseBodyData {
	s.UserContext = v
	return s
}

type CoachCallResponseBodyDataCallContext struct {
	// example:
	//
	// COACH
	CallType        *string                                                `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*CoachCallResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s CoachCallResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s CoachCallResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *CoachCallResponseBodyDataCallContext) SetCallType(v string) *CoachCallResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *CoachCallResponseBodyDataCallContext) SetChannelContexts(v []*CoachCallResponseBodyDataCallContextChannelContexts) *CoachCallResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *CoachCallResponseBodyDataCallContext) SetInstanceId(v string) *CoachCallResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *CoachCallResponseBodyDataCallContext) SetJobId(v string) *CoachCallResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type CoachCallResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// COACH
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// COACHING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// ANSWERED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 1390501****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// 1
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0830019****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CoachCallResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s CoachCallResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *CoachCallResponseBodyDataCallContextChannelContexts) SetCallType(v string) *CoachCallResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *CoachCallResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *CoachCallResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *CoachCallResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *CoachCallResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *CoachCallResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *CoachCallResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *CoachCallResponseBodyDataCallContextChannelContexts) SetDestination(v string) *CoachCallResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *CoachCallResponseBodyDataCallContextChannelContexts) SetIndex(v int32) *CoachCallResponseBodyDataCallContextChannelContexts {
	s.Index = &v
	return s
}

func (s *CoachCallResponseBodyDataCallContextChannelContexts) SetJobId(v string) *CoachCallResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *CoachCallResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *CoachCallResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *CoachCallResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *CoachCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *CoachCallResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *CoachCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *CoachCallResponseBodyDataCallContextChannelContexts) SetSkillGroupId(v string) *CoachCallResponseBodyDataCallContextChannelContexts {
	s.SkillGroupId = &v
	return s
}

func (s *CoachCallResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *CoachCallResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *CoachCallResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *CoachCallResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *CoachCallResponseBodyDataCallContextChannelContexts) SetUserId(v string) *CoachCallResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type CoachCallResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// UNREGISTERED
	DeviceState *string `json:"DeviceState,omitempty" xml:"DeviceState,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609136956370
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s CoachCallResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s CoachCallResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *CoachCallResponseBodyDataUserContext) SetBreakCode(v string) *CoachCallResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *CoachCallResponseBodyDataUserContext) SetDeviceId(v string) *CoachCallResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *CoachCallResponseBodyDataUserContext) SetDeviceState(v string) *CoachCallResponseBodyDataUserContext {
	s.DeviceState = &v
	return s
}

func (s *CoachCallResponseBodyDataUserContext) SetExtension(v string) *CoachCallResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *CoachCallResponseBodyDataUserContext) SetHeartbeat(v int64) *CoachCallResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *CoachCallResponseBodyDataUserContext) SetInstanceId(v string) *CoachCallResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *CoachCallResponseBodyDataUserContext) SetJobId(v string) *CoachCallResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *CoachCallResponseBodyDataUserContext) SetMobile(v string) *CoachCallResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *CoachCallResponseBodyDataUserContext) SetOutboundScenario(v bool) *CoachCallResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *CoachCallResponseBodyDataUserContext) SetReserved(v int64) *CoachCallResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *CoachCallResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *CoachCallResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *CoachCallResponseBodyDataUserContext) SetUserId(v string) *CoachCallResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *CoachCallResponseBodyDataUserContext) SetUserState(v string) *CoachCallResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *CoachCallResponseBodyDataUserContext) SetWorkMode(v string) *CoachCallResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type CoachCallResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CoachCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CoachCallResponse) String() string {
	return tea.Prettify(s)
}

func (s CoachCallResponse) GoString() string {
	return s.String()
}

func (s *CoachCallResponse) SetHeaders(v map[string]*string) *CoachCallResponse {
	s.Headers = v
	return s
}

func (s *CoachCallResponse) SetStatusCode(v int32) *CoachCallResponse {
	s.StatusCode = &v
	return s
}

func (s *CoachCallResponse) SetBody(v *CoachCallResponseBody) *CoachCallResponse {
	s.Body = v
	return s
}

type CommitContactFlowRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 7d706489-d06d-4a92-8666-8c9dba2c5cb1
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// This parameter is required.
	Definition *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// b28f74ca-5846-4496-8bbd-34fb1750798c
	DraftId *string `json:"DraftId,omitempty" xml:"DraftId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s CommitContactFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s CommitContactFlowRequest) GoString() string {
	return s.String()
}

func (s *CommitContactFlowRequest) SetContactFlowId(v string) *CommitContactFlowRequest {
	s.ContactFlowId = &v
	return s
}

func (s *CommitContactFlowRequest) SetDefinition(v string) *CommitContactFlowRequest {
	s.Definition = &v
	return s
}

func (s *CommitContactFlowRequest) SetDescription(v string) *CommitContactFlowRequest {
	s.Description = &v
	return s
}

func (s *CommitContactFlowRequest) SetDraftId(v string) *CommitContactFlowRequest {
	s.DraftId = &v
	return s
}

func (s *CommitContactFlowRequest) SetInstanceId(v string) *CommitContactFlowRequest {
	s.InstanceId = &v
	return s
}

type CommitContactFlowResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 937617D5-01E9-5A39-B52D-15D5C143260C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CommitContactFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CommitContactFlowResponseBody) GoString() string {
	return s.String()
}

func (s *CommitContactFlowResponseBody) SetCode(v string) *CommitContactFlowResponseBody {
	s.Code = &v
	return s
}

func (s *CommitContactFlowResponseBody) SetHttpStatusCode(v int32) *CommitContactFlowResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CommitContactFlowResponseBody) SetMessage(v string) *CommitContactFlowResponseBody {
	s.Message = &v
	return s
}

func (s *CommitContactFlowResponseBody) SetRequestId(v string) *CommitContactFlowResponseBody {
	s.RequestId = &v
	return s
}

type CommitContactFlowResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CommitContactFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CommitContactFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s CommitContactFlowResponse) GoString() string {
	return s.String()
}

func (s *CommitContactFlowResponse) SetHeaders(v map[string]*string) *CommitContactFlowResponse {
	s.Headers = v
	return s
}

func (s *CommitContactFlowResponse) SetStatusCode(v int32) *CommitContactFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *CommitContactFlowResponse) SetBody(v *CommitContactFlowResponseBody) *CommitContactFlowResponse {
	s.Body = v
	return s
}

type CompleteAttendedTransferRequest struct {
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CompleteAttendedTransferRequest) String() string {
	return tea.Prettify(s)
}

func (s CompleteAttendedTransferRequest) GoString() string {
	return s.String()
}

func (s *CompleteAttendedTransferRequest) SetDeviceId(v string) *CompleteAttendedTransferRequest {
	s.DeviceId = &v
	return s
}

func (s *CompleteAttendedTransferRequest) SetInstanceId(v string) *CompleteAttendedTransferRequest {
	s.InstanceId = &v
	return s
}

func (s *CompleteAttendedTransferRequest) SetJobId(v string) *CompleteAttendedTransferRequest {
	s.JobId = &v
	return s
}

func (s *CompleteAttendedTransferRequest) SetUserId(v string) *CompleteAttendedTransferRequest {
	s.UserId = &v
	return s
}

type CompleteAttendedTransferResponseBody struct {
	// example:
	//
	// OK
	Code *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *CompleteAttendedTransferResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CompleteAttendedTransferResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CompleteAttendedTransferResponseBody) GoString() string {
	return s.String()
}

func (s *CompleteAttendedTransferResponseBody) SetCode(v string) *CompleteAttendedTransferResponseBody {
	s.Code = &v
	return s
}

func (s *CompleteAttendedTransferResponseBody) SetData(v *CompleteAttendedTransferResponseBodyData) *CompleteAttendedTransferResponseBody {
	s.Data = v
	return s
}

func (s *CompleteAttendedTransferResponseBody) SetHttpStatusCode(v int32) *CompleteAttendedTransferResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CompleteAttendedTransferResponseBody) SetMessage(v string) *CompleteAttendedTransferResponseBody {
	s.Message = &v
	return s
}

func (s *CompleteAttendedTransferResponseBody) SetParams(v []*string) *CompleteAttendedTransferResponseBody {
	s.Params = v
	return s
}

func (s *CompleteAttendedTransferResponseBody) SetRequestId(v string) *CompleteAttendedTransferResponseBody {
	s.RequestId = &v
	return s
}

type CompleteAttendedTransferResponseBodyData struct {
	CallContext *CompleteAttendedTransferResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	// example:
	//
	// 103652
	ContextId   *int64                                               `json:"ContextId,omitempty" xml:"ContextId,omitempty"`
	UserContext *CompleteAttendedTransferResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s CompleteAttendedTransferResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CompleteAttendedTransferResponseBodyData) GoString() string {
	return s.String()
}

func (s *CompleteAttendedTransferResponseBodyData) SetCallContext(v *CompleteAttendedTransferResponseBodyDataCallContext) *CompleteAttendedTransferResponseBodyData {
	s.CallContext = v
	return s
}

func (s *CompleteAttendedTransferResponseBodyData) SetContextId(v int64) *CompleteAttendedTransferResponseBodyData {
	s.ContextId = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyData) SetUserContext(v *CompleteAttendedTransferResponseBodyDataUserContext) *CompleteAttendedTransferResponseBodyData {
	s.UserContext = v
	return s
}

type CompleteAttendedTransferResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                                               `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*CompleteAttendedTransferResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s CompleteAttendedTransferResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s CompleteAttendedTransferResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *CompleteAttendedTransferResponseBodyDataCallContext) SetCallType(v string) *CompleteAttendedTransferResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataCallContext) SetChannelContexts(v []*CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) *CompleteAttendedTransferResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataCallContext) SetInstanceId(v string) *CompleteAttendedTransferResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataCallContext) SetJobId(v string) *CompleteAttendedTransferResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type CompleteAttendedTransferResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// MONITORING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// ANSWERED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 1390501****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// 10
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0830019****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) SetCallType(v string) *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) SetDestination(v string) *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) SetIndex(v int32) *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.Index = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) SetJobId(v string) *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) SetSkillGroupId(v string) *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.SkillGroupId = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts) SetUserId(v string) *CompleteAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type CompleteAttendedTransferResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-65382141036853491
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609136956378
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s CompleteAttendedTransferResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s CompleteAttendedTransferResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *CompleteAttendedTransferResponseBodyDataUserContext) SetBreakCode(v string) *CompleteAttendedTransferResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataUserContext) SetDeviceId(v string) *CompleteAttendedTransferResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataUserContext) SetExtension(v string) *CompleteAttendedTransferResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataUserContext) SetHeartbeat(v int64) *CompleteAttendedTransferResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataUserContext) SetInstanceId(v string) *CompleteAttendedTransferResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataUserContext) SetJobId(v string) *CompleteAttendedTransferResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataUserContext) SetMobile(v string) *CompleteAttendedTransferResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataUserContext) SetOutboundScenario(v bool) *CompleteAttendedTransferResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataUserContext) SetReserved(v int64) *CompleteAttendedTransferResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *CompleteAttendedTransferResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataUserContext) SetUserId(v string) *CompleteAttendedTransferResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataUserContext) SetUserState(v string) *CompleteAttendedTransferResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *CompleteAttendedTransferResponseBodyDataUserContext) SetWorkMode(v string) *CompleteAttendedTransferResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type CompleteAttendedTransferResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CompleteAttendedTransferResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CompleteAttendedTransferResponse) String() string {
	return tea.Prettify(s)
}

func (s CompleteAttendedTransferResponse) GoString() string {
	return s.String()
}

func (s *CompleteAttendedTransferResponse) SetHeaders(v map[string]*string) *CompleteAttendedTransferResponse {
	s.Headers = v
	return s
}

func (s *CompleteAttendedTransferResponse) SetStatusCode(v int32) *CompleteAttendedTransferResponse {
	s.StatusCode = &v
	return s
}

func (s *CompleteAttendedTransferResponse) SetBody(v *CompleteAttendedTransferResponseBody) *CompleteAttendedTransferResponse {
	s.Body = v
	return s
}

type CreateAudioFileRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// test-file.wav
	AudioFileName *string `json:"AudioFileName,omitempty" xml:"AudioFileName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test/test-file.wav
	OssFileKey *string `json:"OssFileKey,omitempty" xml:"OssFileKey,omitempty"`
	Usage      *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s CreateAudioFileRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAudioFileRequest) GoString() string {
	return s.String()
}

func (s *CreateAudioFileRequest) SetAudioFileName(v string) *CreateAudioFileRequest {
	s.AudioFileName = &v
	return s
}

func (s *CreateAudioFileRequest) SetInstanceId(v string) *CreateAudioFileRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateAudioFileRequest) SetName(v string) *CreateAudioFileRequest {
	s.Name = &v
	return s
}

func (s *CreateAudioFileRequest) SetOssFileKey(v string) *CreateAudioFileRequest {
	s.OssFileKey = &v
	return s
}

func (s *CreateAudioFileRequest) SetUsage(v string) *CreateAudioFileRequest {
	s.Usage = &v
	return s
}

type CreateAudioFileResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 2301b83f-1f9f-491e-9f97-2f832ed92f0b
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 94E29B9B-DBC6-5951-B3DD-C85C1BDF20ED
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAudioFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAudioFileResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAudioFileResponseBody) SetCode(v string) *CreateAudioFileResponseBody {
	s.Code = &v
	return s
}

func (s *CreateAudioFileResponseBody) SetData(v string) *CreateAudioFileResponseBody {
	s.Data = &v
	return s
}

func (s *CreateAudioFileResponseBody) SetHttpStatusCode(v int32) *CreateAudioFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateAudioFileResponseBody) SetMessage(v string) *CreateAudioFileResponseBody {
	s.Message = &v
	return s
}

func (s *CreateAudioFileResponseBody) SetRequestId(v string) *CreateAudioFileResponseBody {
	s.RequestId = &v
	return s
}

type CreateAudioFileResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAudioFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAudioFileResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAudioFileResponse) GoString() string {
	return s.String()
}

func (s *CreateAudioFileResponse) SetHeaders(v map[string]*string) *CreateAudioFileResponse {
	s.Headers = v
	return s
}

func (s *CreateAudioFileResponse) SetStatusCode(v int32) *CreateAudioFileResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAudioFileResponse) SetBody(v *CreateAudioFileResponseBody) *CreateAudioFileResponse {
	s.Body = v
	return s
}

type CreateCallTagsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ["TagA","TagB"]
	CallTagNameList *string `json:"CallTagNameList,omitempty" xml:"CallTagNameList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s CreateCallTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCallTagsRequest) GoString() string {
	return s.String()
}

func (s *CreateCallTagsRequest) SetCallTagNameList(v string) *CreateCallTagsRequest {
	s.CallTagNameList = &v
	return s
}

func (s *CreateCallTagsRequest) SetInstanceId(v string) *CreateCallTagsRequest {
	s.InstanceId = &v
	return s
}

type CreateCallTagsResponseBody struct {
	// example:
	//
	// OK
	Code *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*CreateCallTagsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCallTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCallTagsResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCallTagsResponseBody) SetCode(v string) *CreateCallTagsResponseBody {
	s.Code = &v
	return s
}

func (s *CreateCallTagsResponseBody) SetData(v []*CreateCallTagsResponseBodyData) *CreateCallTagsResponseBody {
	s.Data = v
	return s
}

func (s *CreateCallTagsResponseBody) SetHttpStatusCode(v int32) *CreateCallTagsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateCallTagsResponseBody) SetMessage(v string) *CreateCallTagsResponseBody {
	s.Message = &v
	return s
}

func (s *CreateCallTagsResponseBody) SetRequestId(v string) *CreateCallTagsResponseBody {
	s.RequestId = &v
	return s
}

type CreateCallTagsResponseBodyData struct {
	// example:
	//
	// TagC
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// example:
	//
	// CALL_TAG_NAME_DUPLICATED
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
}

func (s CreateCallTagsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateCallTagsResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateCallTagsResponseBodyData) SetItem(v string) *CreateCallTagsResponseBodyData {
	s.Item = &v
	return s
}

func (s *CreateCallTagsResponseBodyData) SetReason(v string) *CreateCallTagsResponseBodyData {
	s.Reason = &v
	return s
}

type CreateCallTagsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCallTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCallTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCallTagsResponse) GoString() string {
	return s.String()
}

func (s *CreateCallTagsResponse) SetHeaders(v map[string]*string) *CreateCallTagsResponse {
	s.Headers = v
	return s
}

func (s *CreateCallTagsResponse) SetStatusCode(v int32) *CreateCallTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCallTagsResponse) SetBody(v *CreateCallTagsResponseBody) *CreateCallTagsResponse {
	s.Body = v
	return s
}

type CreateCampaignRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// [{"beginTime":"00:00:00","endTime":"23:00:00" }]
	CallableTime *string `json:"CallableTime,omitempty" xml:"CallableTime,omitempty"`
	// example:
	//
	// ccc-test/namelist.csv
	CaseFileKey *string                          `json:"CaseFileKey,omitempty" xml:"CaseFileKey,omitempty"`
	CaseList    []*CreateCampaignRequestCaseList `json:"CaseList,omitempty" xml:"CaseList,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// c1f2bc75-422e-43c7-9c9d9d95633a
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1634313600000
	EndTime               *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ExecutingUntilTimeout *bool   `json:"ExecutingUntilTimeout,omitempty" xml:"ExecutingUntilTimeout,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	MaxAttemptCount *int64 `json:"MaxAttemptCount,omitempty" xml:"MaxAttemptCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	MinAttemptInterval *int64 `json:"MinAttemptInterval,omitempty" xml:"MinAttemptInterval,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// test-campaign
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// skillgroup@ccc-test
	QueueId              *string `json:"QueueId,omitempty" xml:"QueueId,omitempty"`
	Simulation           *bool   `json:"Simulation,omitempty" xml:"Simulation,omitempty"`
	SimulationParameters *string `json:"SimulationParameters,omitempty" xml:"SimulationParameters,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1634140800000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"ratio":1}
	StrategyParameters *string `json:"StrategyParameters,omitempty" xml:"StrategyParameters,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// PACING
	StrategyType *string `json:"StrategyType,omitempty" xml:"StrategyType,omitempty"`
}

func (s CreateCampaignRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCampaignRequest) GoString() string {
	return s.String()
}

func (s *CreateCampaignRequest) SetCallableTime(v string) *CreateCampaignRequest {
	s.CallableTime = &v
	return s
}

func (s *CreateCampaignRequest) SetCaseFileKey(v string) *CreateCampaignRequest {
	s.CaseFileKey = &v
	return s
}

func (s *CreateCampaignRequest) SetCaseList(v []*CreateCampaignRequestCaseList) *CreateCampaignRequest {
	s.CaseList = v
	return s
}

func (s *CreateCampaignRequest) SetContactFlowId(v string) *CreateCampaignRequest {
	s.ContactFlowId = &v
	return s
}

func (s *CreateCampaignRequest) SetEndTime(v string) *CreateCampaignRequest {
	s.EndTime = &v
	return s
}

func (s *CreateCampaignRequest) SetExecutingUntilTimeout(v bool) *CreateCampaignRequest {
	s.ExecutingUntilTimeout = &v
	return s
}

func (s *CreateCampaignRequest) SetInstanceId(v string) *CreateCampaignRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateCampaignRequest) SetMaxAttemptCount(v int64) *CreateCampaignRequest {
	s.MaxAttemptCount = &v
	return s
}

func (s *CreateCampaignRequest) SetMinAttemptInterval(v int64) *CreateCampaignRequest {
	s.MinAttemptInterval = &v
	return s
}

func (s *CreateCampaignRequest) SetName(v string) *CreateCampaignRequest {
	s.Name = &v
	return s
}

func (s *CreateCampaignRequest) SetQueueId(v string) *CreateCampaignRequest {
	s.QueueId = &v
	return s
}

func (s *CreateCampaignRequest) SetSimulation(v bool) *CreateCampaignRequest {
	s.Simulation = &v
	return s
}

func (s *CreateCampaignRequest) SetSimulationParameters(v string) *CreateCampaignRequest {
	s.SimulationParameters = &v
	return s
}

func (s *CreateCampaignRequest) SetStartTime(v string) *CreateCampaignRequest {
	s.StartTime = &v
	return s
}

func (s *CreateCampaignRequest) SetStrategyParameters(v string) *CreateCampaignRequest {
	s.StrategyParameters = &v
	return s
}

func (s *CreateCampaignRequest) SetStrategyType(v string) *CreateCampaignRequest {
	s.StrategyType = &v
	return s
}

type CreateCampaignRequestCaseList struct {
	CustomVariables *string `json:"CustomVariables,omitempty" xml:"CustomVariables,omitempty"`
	// example:
	//
	// 1888888888
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	// example:
	//
	// 01
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
}

func (s CreateCampaignRequestCaseList) String() string {
	return tea.Prettify(s)
}

func (s CreateCampaignRequestCaseList) GoString() string {
	return s.String()
}

func (s *CreateCampaignRequestCaseList) SetCustomVariables(v string) *CreateCampaignRequestCaseList {
	s.CustomVariables = &v
	return s
}

func (s *CreateCampaignRequestCaseList) SetPhoneNumber(v string) *CreateCampaignRequestCaseList {
	s.PhoneNumber = &v
	return s
}

func (s *CreateCampaignRequestCaseList) SetReferenceId(v string) *CreateCampaignRequestCaseList {
	s.ReferenceId = &v
	return s
}

type CreateCampaignShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// [{"beginTime":"00:00:00","endTime":"23:00:00" }]
	CallableTime *string `json:"CallableTime,omitempty" xml:"CallableTime,omitempty"`
	// example:
	//
	// ccc-test/namelist.csv
	CaseFileKey    *string `json:"CaseFileKey,omitempty" xml:"CaseFileKey,omitempty"`
	CaseListShrink *string `json:"CaseList,omitempty" xml:"CaseList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// c1f2bc75-422e-43c7-9c9d9d95633a
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1634313600000
	EndTime               *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ExecutingUntilTimeout *bool   `json:"ExecutingUntilTimeout,omitempty" xml:"ExecutingUntilTimeout,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	MaxAttemptCount *int64 `json:"MaxAttemptCount,omitempty" xml:"MaxAttemptCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	MinAttemptInterval *int64 `json:"MinAttemptInterval,omitempty" xml:"MinAttemptInterval,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// test-campaign
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// skillgroup@ccc-test
	QueueId              *string `json:"QueueId,omitempty" xml:"QueueId,omitempty"`
	Simulation           *bool   `json:"Simulation,omitempty" xml:"Simulation,omitempty"`
	SimulationParameters *string `json:"SimulationParameters,omitempty" xml:"SimulationParameters,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1634140800000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"ratio":1}
	StrategyParameters *string `json:"StrategyParameters,omitempty" xml:"StrategyParameters,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// PACING
	StrategyType *string `json:"StrategyType,omitempty" xml:"StrategyType,omitempty"`
}

func (s CreateCampaignShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCampaignShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateCampaignShrinkRequest) SetCallableTime(v string) *CreateCampaignShrinkRequest {
	s.CallableTime = &v
	return s
}

func (s *CreateCampaignShrinkRequest) SetCaseFileKey(v string) *CreateCampaignShrinkRequest {
	s.CaseFileKey = &v
	return s
}

func (s *CreateCampaignShrinkRequest) SetCaseListShrink(v string) *CreateCampaignShrinkRequest {
	s.CaseListShrink = &v
	return s
}

func (s *CreateCampaignShrinkRequest) SetContactFlowId(v string) *CreateCampaignShrinkRequest {
	s.ContactFlowId = &v
	return s
}

func (s *CreateCampaignShrinkRequest) SetEndTime(v string) *CreateCampaignShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *CreateCampaignShrinkRequest) SetExecutingUntilTimeout(v bool) *CreateCampaignShrinkRequest {
	s.ExecutingUntilTimeout = &v
	return s
}

func (s *CreateCampaignShrinkRequest) SetInstanceId(v string) *CreateCampaignShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateCampaignShrinkRequest) SetMaxAttemptCount(v int64) *CreateCampaignShrinkRequest {
	s.MaxAttemptCount = &v
	return s
}

func (s *CreateCampaignShrinkRequest) SetMinAttemptInterval(v int64) *CreateCampaignShrinkRequest {
	s.MinAttemptInterval = &v
	return s
}

func (s *CreateCampaignShrinkRequest) SetName(v string) *CreateCampaignShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateCampaignShrinkRequest) SetQueueId(v string) *CreateCampaignShrinkRequest {
	s.QueueId = &v
	return s
}

func (s *CreateCampaignShrinkRequest) SetSimulation(v bool) *CreateCampaignShrinkRequest {
	s.Simulation = &v
	return s
}

func (s *CreateCampaignShrinkRequest) SetSimulationParameters(v string) *CreateCampaignShrinkRequest {
	s.SimulationParameters = &v
	return s
}

func (s *CreateCampaignShrinkRequest) SetStartTime(v string) *CreateCampaignShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *CreateCampaignShrinkRequest) SetStrategyParameters(v string) *CreateCampaignShrinkRequest {
	s.StrategyParameters = &v
	return s
}

func (s *CreateCampaignShrinkRequest) SetStrategyType(v string) *CreateCampaignShrinkRequest {
	s.StrategyType = &v
	return s
}

type CreateCampaignResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// c58b9719-3bc3-441d-a4d3-fc0309ef7066
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int64  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 7CC6523B-0E51-1B62-8DA5-6A9831CAE315
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCampaignResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCampaignResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCampaignResponseBody) SetCode(v string) *CreateCampaignResponseBody {
	s.Code = &v
	return s
}

func (s *CreateCampaignResponseBody) SetData(v string) *CreateCampaignResponseBody {
	s.Data = &v
	return s
}

func (s *CreateCampaignResponseBody) SetHttpStatusCode(v int64) *CreateCampaignResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateCampaignResponseBody) SetMessage(v string) *CreateCampaignResponseBody {
	s.Message = &v
	return s
}

func (s *CreateCampaignResponseBody) SetRequestId(v string) *CreateCampaignResponseBody {
	s.RequestId = &v
	return s
}

type CreateCampaignResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCampaignResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCampaignResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCampaignResponse) GoString() string {
	return s.String()
}

func (s *CreateCampaignResponse) SetHeaders(v map[string]*string) *CreateCampaignResponse {
	s.Headers = v
	return s
}

func (s *CreateCampaignResponse) SetStatusCode(v int32) *CreateCampaignResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCampaignResponse) SetBody(v *CreateCampaignResponseBody) *CreateCampaignResponse {
	s.Body = v
	return s
}

type CreateContactFlowRequest struct {
	// This parameter is required.
	Definition *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1.0
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// MAIN_FLOW
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateContactFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContactFlowRequest) GoString() string {
	return s.String()
}

func (s *CreateContactFlowRequest) SetDefinition(v string) *CreateContactFlowRequest {
	s.Definition = &v
	return s
}

func (s *CreateContactFlowRequest) SetDescription(v string) *CreateContactFlowRequest {
	s.Description = &v
	return s
}

func (s *CreateContactFlowRequest) SetInstanceId(v string) *CreateContactFlowRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateContactFlowRequest) SetName(v string) *CreateContactFlowRequest {
	s.Name = &v
	return s
}

func (s *CreateContactFlowRequest) SetType(v string) *CreateContactFlowRequest {
	s.Type = &v
	return s
}

type CreateContactFlowResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 78128960-bb00-4ddc-8e82-923a8c5bd22d
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2778FA12-EDD6-42AA-9B15-AF855072E5E5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateContactFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateContactFlowResponseBody) GoString() string {
	return s.String()
}

func (s *CreateContactFlowResponseBody) SetCode(v string) *CreateContactFlowResponseBody {
	s.Code = &v
	return s
}

func (s *CreateContactFlowResponseBody) SetData(v string) *CreateContactFlowResponseBody {
	s.Data = &v
	return s
}

func (s *CreateContactFlowResponseBody) SetHttpStatusCode(v int32) *CreateContactFlowResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateContactFlowResponseBody) SetMessage(v string) *CreateContactFlowResponseBody {
	s.Message = &v
	return s
}

func (s *CreateContactFlowResponseBody) SetRequestId(v string) *CreateContactFlowResponseBody {
	s.RequestId = &v
	return s
}

type CreateContactFlowResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateContactFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateContactFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContactFlowResponse) GoString() string {
	return s.String()
}

func (s *CreateContactFlowResponse) SetHeaders(v map[string]*string) *CreateContactFlowResponse {
	s.Headers = v
	return s
}

func (s *CreateContactFlowResponse) SetStatusCode(v int32) *CreateContactFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateContactFlowResponse) SetBody(v *CreateContactFlowResponseBody) *CreateContactFlowResponse {
	s.Body = v
	return s
}

type CreateCustomCallTaggingRequest struct {
	// This parameter is required.
	CustomNumberList *string `json:"CustomNumberList,omitempty" xml:"CustomNumberList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s CreateCustomCallTaggingRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomCallTaggingRequest) GoString() string {
	return s.String()
}

func (s *CreateCustomCallTaggingRequest) SetCustomNumberList(v string) *CreateCustomCallTaggingRequest {
	s.CustomNumberList = &v
	return s
}

func (s *CreateCustomCallTaggingRequest) SetInstanceId(v string) *CreateCustomCallTaggingRequest {
	s.InstanceId = &v
	return s
}

type CreateCustomCallTaggingResponseBody struct {
	// example:
	//
	// OK
	Code *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*CreateCustomCallTaggingResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCustomCallTaggingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomCallTaggingResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCustomCallTaggingResponseBody) SetCode(v string) *CreateCustomCallTaggingResponseBody {
	s.Code = &v
	return s
}

func (s *CreateCustomCallTaggingResponseBody) SetData(v []*CreateCustomCallTaggingResponseBodyData) *CreateCustomCallTaggingResponseBody {
	s.Data = v
	return s
}

func (s *CreateCustomCallTaggingResponseBody) SetHttpStatusCode(v int32) *CreateCustomCallTaggingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateCustomCallTaggingResponseBody) SetMessage(v string) *CreateCustomCallTaggingResponseBody {
	s.Message = &v
	return s
}

func (s *CreateCustomCallTaggingResponseBody) SetRequestId(v string) *CreateCustomCallTaggingResponseBody {
	s.RequestId = &v
	return s
}

type CreateCustomCallTaggingResponseBodyData struct {
	// example:
	//
	// 1312121****
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// example:
	//
	// CUSTOM_NUMBER_DUPLICATED
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
}

func (s CreateCustomCallTaggingResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomCallTaggingResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateCustomCallTaggingResponseBodyData) SetItem(v string) *CreateCustomCallTaggingResponseBodyData {
	s.Item = &v
	return s
}

func (s *CreateCustomCallTaggingResponseBodyData) SetReason(v string) *CreateCustomCallTaggingResponseBodyData {
	s.Reason = &v
	return s
}

type CreateCustomCallTaggingResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCustomCallTaggingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCustomCallTaggingResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomCallTaggingResponse) GoString() string {
	return s.String()
}

func (s *CreateCustomCallTaggingResponse) SetHeaders(v map[string]*string) *CreateCustomCallTaggingResponse {
	s.Headers = v
	return s
}

func (s *CreateCustomCallTaggingResponse) SetStatusCode(v int32) *CreateCustomCallTaggingResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCustomCallTaggingResponse) SetBody(v *CreateCustomCallTaggingResponseBody) *CreateCustomCallTaggingResponse {
	s.Body = v
	return s
}

type CreateInstanceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ["24861380681070****","105980354482****"]
	AdminRamIdList *string `json:"AdminRamIdList,omitempty" xml:"AdminRamIdList,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// This parameter is required.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["0830011xxxx", "0830312xxxx"]
	NumberList *string `json:"NumberList,omitempty" xml:"NumberList,omitempty"`
}

func (s CreateInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequest) SetAdminRamIdList(v string) *CreateInstanceRequest {
	s.AdminRamIdList = &v
	return s
}

func (s *CreateInstanceRequest) SetDescription(v string) *CreateInstanceRequest {
	s.Description = &v
	return s
}

func (s *CreateInstanceRequest) SetDomainName(v string) *CreateInstanceRequest {
	s.DomainName = &v
	return s
}

func (s *CreateInstanceRequest) SetName(v string) *CreateInstanceRequest {
	s.Name = &v
	return s
}

func (s *CreateInstanceRequest) SetNumberList(v string) *CreateInstanceRequest {
	s.NumberList = &v
	return s
}

type CreateInstanceResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 75c1346c-1dc2-4ed8-973f-edf8b1e5fe77
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2778FA12-EDD6-42AA-9B15-AF855072E5E5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBody) SetCode(v string) *CreateInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateInstanceResponseBody) SetData(v string) *CreateInstanceResponseBody {
	s.Data = &v
	return s
}

func (s *CreateInstanceResponseBody) SetHttpStatusCode(v int32) *CreateInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateInstanceResponseBody) SetMessage(v string) *CreateInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateInstanceResponseBody) SetRequestId(v string) *CreateInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CreateInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponse) SetHeaders(v map[string]*string) *CreateInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateInstanceResponse) SetStatusCode(v int32) *CreateInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInstanceResponse) SetBody(v *CreateInstanceResponseBody) *CreateInstanceResponse {
	s.Body = v
	return s
}

type CreateSchemaRequest struct {
	// example:
	//
	// -
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// schema id
	//
	// example:
	//
	// profile
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// b0eb2742-f37e-4c67-82d4-25c651c1c450
	InstanceId *string                          `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Properties []*CreateSchemaRequestProperties `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Repeated"`
	// example:
	//
	// 7BEEA660-A45A-45E3-98CC-AFC65E715C23
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSchemaRequest) GoString() string {
	return s.String()
}

func (s *CreateSchemaRequest) SetDescription(v string) *CreateSchemaRequest {
	s.Description = &v
	return s
}

func (s *CreateSchemaRequest) SetId(v string) *CreateSchemaRequest {
	s.Id = &v
	return s
}

func (s *CreateSchemaRequest) SetInstanceId(v string) *CreateSchemaRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSchemaRequest) SetProperties(v []*CreateSchemaRequestProperties) *CreateSchemaRequest {
	s.Properties = v
	return s
}

func (s *CreateSchemaRequest) SetRequestId(v string) *CreateSchemaRequest {
	s.RequestId = &v
	return s
}

type CreateSchemaRequestProperties struct {
	// example:
	//
	// false
	Array *bool `json:"Array,omitempty" xml:"Array,omitempty"`
	// example:
	//
	// {\\"Clusters\\": {\\"Description\\": \\"The list of clusters.\\"}, \\"ClusterIds\\": {\\"Description\\": \\"The list of cluster IDs.\\"}}
	Attributes *string `json:"Attributes,omitempty" xml:"Attributes,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// string
	DataType *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	// example:
	//
	// -
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// false
	Disabled    *bool   `json:"Disabled,omitempty" xml:"Disabled,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// 2
	DisplayOrder *int32 `json:"DisplayOrder,omitempty" xml:"DisplayOrder,omitempty"`
	// example:
	//
	// textbox
	EditorType *string `json:"EditorType,omitempty" xml:"EditorType,omitempty"`
	// example:
	//
	// 100
	MaxLength *int32 `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	// example:
	//
	// 1
	Maximum *float64 `json:"Maximum,omitempty" xml:"Maximum,omitempty"`
	// example:
	//
	// 1
	MinLength *int32 `json:"MinLength,omitempty" xml:"MinLength,omitempty"`
	// example:
	//
	// 1
	Minimum *float64 `json:"Minimum,omitempty" xml:"Minimum,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// *
	Pattern             *string `json:"Pattern,omitempty" xml:"Pattern,omitempty"`
	PatternErrorMessage *string `json:"PatternErrorMessage,omitempty" xml:"PatternErrorMessage,omitempty"`
	// example:
	//
	// true
	ReadOnly *bool `json:"ReadOnly,omitempty" xml:"ReadOnly,omitempty"`
	// example:
	//
	// false
	Required *bool `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s CreateSchemaRequestProperties) String() string {
	return tea.Prettify(s)
}

func (s CreateSchemaRequestProperties) GoString() string {
	return s.String()
}

func (s *CreateSchemaRequestProperties) SetArray(v bool) *CreateSchemaRequestProperties {
	s.Array = &v
	return s
}

func (s *CreateSchemaRequestProperties) SetAttributes(v string) *CreateSchemaRequestProperties {
	s.Attributes = &v
	return s
}

func (s *CreateSchemaRequestProperties) SetDataType(v string) *CreateSchemaRequestProperties {
	s.DataType = &v
	return s
}

func (s *CreateSchemaRequestProperties) SetDescription(v string) *CreateSchemaRequestProperties {
	s.Description = &v
	return s
}

func (s *CreateSchemaRequestProperties) SetDisabled(v bool) *CreateSchemaRequestProperties {
	s.Disabled = &v
	return s
}

func (s *CreateSchemaRequestProperties) SetDisplayName(v string) *CreateSchemaRequestProperties {
	s.DisplayName = &v
	return s
}

func (s *CreateSchemaRequestProperties) SetDisplayOrder(v int32) *CreateSchemaRequestProperties {
	s.DisplayOrder = &v
	return s
}

func (s *CreateSchemaRequestProperties) SetEditorType(v string) *CreateSchemaRequestProperties {
	s.EditorType = &v
	return s
}

func (s *CreateSchemaRequestProperties) SetMaxLength(v int32) *CreateSchemaRequestProperties {
	s.MaxLength = &v
	return s
}

func (s *CreateSchemaRequestProperties) SetMaximum(v float64) *CreateSchemaRequestProperties {
	s.Maximum = &v
	return s
}

func (s *CreateSchemaRequestProperties) SetMinLength(v int32) *CreateSchemaRequestProperties {
	s.MinLength = &v
	return s
}

func (s *CreateSchemaRequestProperties) SetMinimum(v float64) *CreateSchemaRequestProperties {
	s.Minimum = &v
	return s
}

func (s *CreateSchemaRequestProperties) SetName(v string) *CreateSchemaRequestProperties {
	s.Name = &v
	return s
}

func (s *CreateSchemaRequestProperties) SetPattern(v string) *CreateSchemaRequestProperties {
	s.Pattern = &v
	return s
}

func (s *CreateSchemaRequestProperties) SetPatternErrorMessage(v string) *CreateSchemaRequestProperties {
	s.PatternErrorMessage = &v
	return s
}

func (s *CreateSchemaRequestProperties) SetReadOnly(v bool) *CreateSchemaRequestProperties {
	s.ReadOnly = &v
	return s
}

func (s *CreateSchemaRequestProperties) SetRequired(v bool) *CreateSchemaRequestProperties {
	s.Required = &v
	return s
}

type CreateSchemaShrinkRequest struct {
	// example:
	//
	// -
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// schema id
	//
	// example:
	//
	// profile
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// b0eb2742-f37e-4c67-82d4-25c651c1c450
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PropertiesShrink *string `json:"Properties,omitempty" xml:"Properties,omitempty"`
	// example:
	//
	// 7BEEA660-A45A-45E3-98CC-AFC65E715C23
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateSchemaShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSchemaShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateSchemaShrinkRequest) SetDescription(v string) *CreateSchemaShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateSchemaShrinkRequest) SetId(v string) *CreateSchemaShrinkRequest {
	s.Id = &v
	return s
}

func (s *CreateSchemaShrinkRequest) SetInstanceId(v string) *CreateSchemaShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSchemaShrinkRequest) SetPropertiesShrink(v string) *CreateSchemaShrinkRequest {
	s.PropertiesShrink = &v
	return s
}

func (s *CreateSchemaShrinkRequest) SetRequestId(v string) *CreateSchemaShrinkRequest {
	s.RequestId = &v
	return s
}

type CreateSchemaResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 1ca2b084-6f0a-454b-9851-29768a9a5832
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 9F766284-F103-4298-8EC5-19F9F9BE5522
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateSchemaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSchemaResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSchemaResponseBody) SetCode(v string) *CreateSchemaResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSchemaResponseBody) SetData(v string) *CreateSchemaResponseBody {
	s.Data = &v
	return s
}

func (s *CreateSchemaResponseBody) SetHttpStatusCode(v int32) *CreateSchemaResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateSchemaResponseBody) SetMessage(v string) *CreateSchemaResponseBody {
	s.Message = &v
	return s
}

func (s *CreateSchemaResponseBody) SetParams(v []*string) *CreateSchemaResponseBody {
	s.Params = v
	return s
}

func (s *CreateSchemaResponseBody) SetRequestId(v string) *CreateSchemaResponseBody {
	s.RequestId = &v
	return s
}

type CreateSchemaResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSchemaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSchemaResponse) GoString() string {
	return s.String()
}

func (s *CreateSchemaResponse) SetHeaders(v map[string]*string) *CreateSchemaResponse {
	s.Headers = v
	return s
}

func (s *CreateSchemaResponse) SetStatusCode(v int32) *CreateSchemaResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSchemaResponse) SetBody(v *CreateSchemaResponseBody) *CreateSchemaResponse {
	s.Body = v
	return s
}

type CreateSkillGroupRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MediaType  *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// skillgroup
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateSkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSkillGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateSkillGroupRequest) SetDescription(v string) *CreateSkillGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateSkillGroupRequest) SetDisplayName(v string) *CreateSkillGroupRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateSkillGroupRequest) SetInstanceId(v string) *CreateSkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSkillGroupRequest) SetMediaType(v string) *CreateSkillGroupRequest {
	s.MediaType = &v
	return s
}

func (s *CreateSkillGroupRequest) SetName(v string) *CreateSkillGroupRequest {
	s.Name = &v
	return s
}

type CreateSkillGroupResponseBody struct {
	// example:
	//
	// OK
	Code *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *CreateSkillGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateSkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSkillGroupResponseBody) SetCode(v string) *CreateSkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSkillGroupResponseBody) SetData(v *CreateSkillGroupResponseBodyData) *CreateSkillGroupResponseBody {
	s.Data = v
	return s
}

func (s *CreateSkillGroupResponseBody) SetHttpStatusCode(v int32) *CreateSkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateSkillGroupResponseBody) SetMessage(v string) *CreateSkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *CreateSkillGroupResponseBody) SetRequestId(v string) *CreateSkillGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateSkillGroupResponseBodyData struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MediaType  *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// skillgroup
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s CreateSkillGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateSkillGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateSkillGroupResponseBodyData) SetDescription(v string) *CreateSkillGroupResponseBodyData {
	s.Description = &v
	return s
}

func (s *CreateSkillGroupResponseBodyData) SetInstanceId(v string) *CreateSkillGroupResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *CreateSkillGroupResponseBodyData) SetMediaType(v string) *CreateSkillGroupResponseBodyData {
	s.MediaType = &v
	return s
}

func (s *CreateSkillGroupResponseBodyData) SetName(v string) *CreateSkillGroupResponseBodyData {
	s.Name = &v
	return s
}

func (s *CreateSkillGroupResponseBodyData) SetSkillGroupId(v string) *CreateSkillGroupResponseBodyData {
	s.SkillGroupId = &v
	return s
}

type CreateSkillGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSkillGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateSkillGroupResponse) SetHeaders(v map[string]*string) *CreateSkillGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateSkillGroupResponse) SetStatusCode(v int32) *CreateSkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSkillGroupResponse) SetBody(v *CreateSkillGroupResponseBody) *CreateSkillGroupResponse {
	s.Body = v
	return s
}

type CreateTicketRequest struct {
	// example:
	//
	// job-38860977107324****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	Context   *string `json:"Context,omitempty" xml:"Context,omitempty"`
	// example:
	//
	// 51e155ce-3747-4f21-b402-13c69597b920
	CustomerId *string `json:"CustomerId,omitempty" xml:"CustomerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// CHAT
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// e9e4c76c-948d-4a6e-9ce2-9da0f5967a73
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Title      *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s CreateTicketRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTicketRequest) GoString() string {
	return s.String()
}

func (s *CreateTicketRequest) SetContactId(v string) *CreateTicketRequest {
	s.ContactId = &v
	return s
}

func (s *CreateTicketRequest) SetContext(v string) *CreateTicketRequest {
	s.Context = &v
	return s
}

func (s *CreateTicketRequest) SetCustomerId(v string) *CreateTicketRequest {
	s.CustomerId = &v
	return s
}

func (s *CreateTicketRequest) SetInstanceId(v string) *CreateTicketRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateTicketRequest) SetSource(v string) *CreateTicketRequest {
	s.Source = &v
	return s
}

func (s *CreateTicketRequest) SetTemplateId(v string) *CreateTicketRequest {
	s.TemplateId = &v
	return s
}

func (s *CreateTicketRequest) SetTitle(v string) *CreateTicketRequest {
	s.Title = &v
	return s
}

type CreateTicketResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 3d26b90a-c5d2-4b09-8219-60cda1******
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// A450574A-337F-43E2-BC59-9C6594C994C6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateTicketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTicketResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTicketResponseBody) SetCode(v string) *CreateTicketResponseBody {
	s.Code = &v
	return s
}

func (s *CreateTicketResponseBody) SetData(v string) *CreateTicketResponseBody {
	s.Data = &v
	return s
}

func (s *CreateTicketResponseBody) SetHttpStatusCode(v int32) *CreateTicketResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateTicketResponseBody) SetMessage(v string) *CreateTicketResponseBody {
	s.Message = &v
	return s
}

func (s *CreateTicketResponseBody) SetRequestId(v string) *CreateTicketResponseBody {
	s.RequestId = &v
	return s
}

type CreateTicketResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateTicketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateTicketResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTicketResponse) GoString() string {
	return s.String()
}

func (s *CreateTicketResponse) SetHeaders(v map[string]*string) *CreateTicketResponse {
	s.Headers = v
	return s
}

func (s *CreateTicketResponse) SetStatusCode(v int32) *CreateTicketResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTicketResponse) SetBody(v *CreateTicketResponseBody) *CreateTicketResponse {
	s.Body = v
	return s
}

type CreateUserRequest struct {
	AvatarUrl *string `json:"AvatarUrl,omitempty" xml:"AvatarUrl,omitempty"`
	// example:
	//
	// 1001
	DisplayId *string `json:"DisplayId,omitempty" xml:"DisplayId,omitempty"`
	// This parameter is required.
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// username@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// agent
	LoginName *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	// example:
	//
	// 1382114****
	Mobile   *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	Nickname *string `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
	// example:
	//
	// false
	ResetPassword *bool `json:"ResetPassword,omitempty" xml:"ResetPassword,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Agent@ccc-test
	RoleId *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	// example:
	//
	// [{"skillGroupId":"skillgroup1@ccc-test","skillLevel":1},{"skillGroupId":"skillgroup2@ccc-test","skillLevel":10}]
	SkillLevelList *string `json:"SkillLevelList,omitempty" xml:"SkillLevelList,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s CreateUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUserRequest) GoString() string {
	return s.String()
}

func (s *CreateUserRequest) SetAvatarUrl(v string) *CreateUserRequest {
	s.AvatarUrl = &v
	return s
}

func (s *CreateUserRequest) SetDisplayId(v string) *CreateUserRequest {
	s.DisplayId = &v
	return s
}

func (s *CreateUserRequest) SetDisplayName(v string) *CreateUserRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateUserRequest) SetEmail(v string) *CreateUserRequest {
	s.Email = &v
	return s
}

func (s *CreateUserRequest) SetInstanceId(v string) *CreateUserRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateUserRequest) SetLoginName(v string) *CreateUserRequest {
	s.LoginName = &v
	return s
}

func (s *CreateUserRequest) SetMobile(v string) *CreateUserRequest {
	s.Mobile = &v
	return s
}

func (s *CreateUserRequest) SetNickname(v string) *CreateUserRequest {
	s.Nickname = &v
	return s
}

func (s *CreateUserRequest) SetResetPassword(v bool) *CreateUserRequest {
	s.ResetPassword = &v
	return s
}

func (s *CreateUserRequest) SetRoleId(v string) *CreateUserRequest {
	s.RoleId = &v
	return s
}

func (s *CreateUserRequest) SetSkillLevelList(v string) *CreateUserRequest {
	s.SkillLevelList = &v
	return s
}

func (s *CreateUserRequest) SetWorkMode(v string) *CreateUserRequest {
	s.WorkMode = &v
	return s
}

type CreateUserResponseBody struct {
	// example:
	//
	// OK
	Code *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *CreateUserResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUserResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUserResponseBody) SetCode(v string) *CreateUserResponseBody {
	s.Code = &v
	return s
}

func (s *CreateUserResponseBody) SetData(v *CreateUserResponseBodyData) *CreateUserResponseBody {
	s.Data = v
	return s
}

func (s *CreateUserResponseBody) SetHttpStatusCode(v int32) *CreateUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateUserResponseBody) SetMessage(v string) *CreateUserResponseBody {
	s.Message = &v
	return s
}

func (s *CreateUserResponseBody) SetParams(v []*string) *CreateUserResponseBody {
	s.Params = v
	return s
}

func (s *CreateUserResponseBody) SetRequestId(v string) *CreateUserResponseBody {
	s.RequestId = &v
	return s
}

type CreateUserResponseBodyData struct {
	AvatarUrl   *string `json:"AvatarUrl,omitempty" xml:"AvatarUrl,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// agent
	LoginName *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	// example:
	//
	// 1382114****
	Mobile   *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	Nickname *string `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s CreateUserResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateUserResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateUserResponseBodyData) SetAvatarUrl(v string) *CreateUserResponseBodyData {
	s.AvatarUrl = &v
	return s
}

func (s *CreateUserResponseBodyData) SetDisplayName(v string) *CreateUserResponseBodyData {
	s.DisplayName = &v
	return s
}

func (s *CreateUserResponseBodyData) SetEmail(v string) *CreateUserResponseBodyData {
	s.Email = &v
	return s
}

func (s *CreateUserResponseBodyData) SetExtension(v string) *CreateUserResponseBodyData {
	s.Extension = &v
	return s
}

func (s *CreateUserResponseBodyData) SetLoginName(v string) *CreateUserResponseBodyData {
	s.LoginName = &v
	return s
}

func (s *CreateUserResponseBodyData) SetMobile(v string) *CreateUserResponseBodyData {
	s.Mobile = &v
	return s
}

func (s *CreateUserResponseBodyData) SetNickname(v string) *CreateUserResponseBodyData {
	s.Nickname = &v
	return s
}

func (s *CreateUserResponseBodyData) SetUserId(v string) *CreateUserResponseBodyData {
	s.UserId = &v
	return s
}

func (s *CreateUserResponseBodyData) SetWorkMode(v string) *CreateUserResponseBodyData {
	s.WorkMode = &v
	return s
}

type CreateUserResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUserResponse) GoString() string {
	return s.String()
}

func (s *CreateUserResponse) SetHeaders(v map[string]*string) *CreateUserResponse {
	s.Headers = v
	return s
}

func (s *CreateUserResponse) SetStatusCode(v int32) *CreateUserResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateUserResponse) SetBody(v *CreateUserResponseBody) *CreateUserResponse {
	s.Body = v
	return s
}

type DeleteAudioFileRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// d5cd7a94-3b6a-47d2-b7fd-0b1cd839bf77
	AudioResourceId *string `json:"AudioResourceId,omitempty" xml:"AudioResourceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DeleteAudioFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAudioFileRequest) GoString() string {
	return s.String()
}

func (s *DeleteAudioFileRequest) SetAudioResourceId(v string) *DeleteAudioFileRequest {
	s.AudioResourceId = &v
	return s
}

func (s *DeleteAudioFileRequest) SetInstanceId(v string) *DeleteAudioFileRequest {
	s.InstanceId = &v
	return s
}

type DeleteAudioFileResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// FB77821C-912F-57FF-8834-6336A6479093
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAudioFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAudioFileResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAudioFileResponseBody) SetCode(v string) *DeleteAudioFileResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteAudioFileResponseBody) SetData(v string) *DeleteAudioFileResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteAudioFileResponseBody) SetHttpStatusCode(v int32) *DeleteAudioFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteAudioFileResponseBody) SetMessage(v string) *DeleteAudioFileResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteAudioFileResponseBody) SetRequestId(v string) *DeleteAudioFileResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAudioFileResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAudioFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAudioFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAudioFileResponse) GoString() string {
	return s.String()
}

func (s *DeleteAudioFileResponse) SetHeaders(v map[string]*string) *DeleteAudioFileResponse {
	s.Headers = v
	return s
}

func (s *DeleteAudioFileResponse) SetStatusCode(v int32) *DeleteAudioFileResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAudioFileResponse) SetBody(v *DeleteAudioFileResponseBody) *DeleteAudioFileResponse {
	s.Body = v
	return s
}

type DeleteCallTagRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// TagA
	TagName *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
}

func (s DeleteCallTagRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCallTagRequest) GoString() string {
	return s.String()
}

func (s *DeleteCallTagRequest) SetInstanceId(v string) *DeleteCallTagRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteCallTagRequest) SetTagName(v string) *DeleteCallTagRequest {
	s.TagName = &v
	return s
}

type DeleteCallTagResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCallTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCallTagResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCallTagResponseBody) SetCode(v string) *DeleteCallTagResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteCallTagResponseBody) SetHttpStatusCode(v int32) *DeleteCallTagResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteCallTagResponseBody) SetMessage(v string) *DeleteCallTagResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteCallTagResponseBody) SetRequestId(v string) *DeleteCallTagResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCallTagResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCallTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCallTagResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCallTagResponse) GoString() string {
	return s.String()
}

func (s *DeleteCallTagResponse) SetHeaders(v map[string]*string) *DeleteCallTagResponse {
	s.Headers = v
	return s
}

func (s *DeleteCallTagResponse) SetStatusCode(v int32) *DeleteCallTagResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCallTagResponse) SetBody(v *DeleteCallTagResponseBody) *DeleteCallTagResponse {
	s.Body = v
	return s
}

type DeleteContactFlowRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 0f87c997-b0c1-41d4-9e9e-1b791de6ad1f
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DeleteContactFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactFlowRequest) GoString() string {
	return s.String()
}

func (s *DeleteContactFlowRequest) SetContactFlowId(v string) *DeleteContactFlowRequest {
	s.ContactFlowId = &v
	return s
}

func (s *DeleteContactFlowRequest) SetInstanceId(v string) *DeleteContactFlowRequest {
	s.InstanceId = &v
	return s
}

type DeleteContactFlowResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 07511949-6DC4-5D0B-8FA8-FF8FA29B4217
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteContactFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactFlowResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteContactFlowResponseBody) SetCode(v string) *DeleteContactFlowResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteContactFlowResponseBody) SetHttpStatusCode(v int32) *DeleteContactFlowResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteContactFlowResponseBody) SetMessage(v string) *DeleteContactFlowResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteContactFlowResponseBody) SetRequestId(v string) *DeleteContactFlowResponseBody {
	s.RequestId = &v
	return s
}

type DeleteContactFlowResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteContactFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteContactFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactFlowResponse) GoString() string {
	return s.String()
}

func (s *DeleteContactFlowResponse) SetHeaders(v map[string]*string) *DeleteContactFlowResponse {
	s.Headers = v
	return s
}

func (s *DeleteContactFlowResponse) SetStatusCode(v int32) *DeleteContactFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteContactFlowResponse) SetBody(v *DeleteContactFlowResponseBody) *DeleteContactFlowResponse {
	s.Body = v
	return s
}

type DeleteCustomCallTaggingRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1312121****
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
}

func (s DeleteCustomCallTaggingRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomCallTaggingRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomCallTaggingRequest) SetInstanceId(v string) *DeleteCustomCallTaggingRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteCustomCallTaggingRequest) SetNumber(v string) *DeleteCustomCallTaggingRequest {
	s.Number = &v
	return s
}

type DeleteCustomCallTaggingResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCustomCallTaggingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomCallTaggingResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCustomCallTaggingResponseBody) SetCode(v string) *DeleteCustomCallTaggingResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteCustomCallTaggingResponseBody) SetHttpStatusCode(v int32) *DeleteCustomCallTaggingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteCustomCallTaggingResponseBody) SetMessage(v string) *DeleteCustomCallTaggingResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteCustomCallTaggingResponseBody) SetRequestId(v string) *DeleteCustomCallTaggingResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCustomCallTaggingResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCustomCallTaggingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCustomCallTaggingResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomCallTaggingResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomCallTaggingResponse) SetHeaders(v map[string]*string) *DeleteCustomCallTaggingResponse {
	s.Headers = v
	return s
}

func (s *DeleteCustomCallTaggingResponse) SetStatusCode(v int32) *DeleteCustomCallTaggingResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCustomCallTaggingResponse) SetBody(v *DeleteCustomCallTaggingResponseBody) *DeleteCustomCallTaggingResponse {
	s.Body = v
	return s
}

type DeleteDocumentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxx
	DocumentId *string `json:"DocumentId,omitempty" xml:"DocumentId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// d278629c-c687-4aa3-b044-4fe9b012****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// DE803553-8AA9-4B9D-9E4E-A82BC69EDCEE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// schema id
	//
	// This parameter is required.
	//
	// example:
	//
	// profile
	SchemaId *string `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s DeleteDocumentRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocumentRequest) GoString() string {
	return s.String()
}

func (s *DeleteDocumentRequest) SetDocumentId(v string) *DeleteDocumentRequest {
	s.DocumentId = &v
	return s
}

func (s *DeleteDocumentRequest) SetInstanceId(v string) *DeleteDocumentRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteDocumentRequest) SetRequestId(v string) *DeleteDocumentRequest {
	s.RequestId = &v
	return s
}

func (s *DeleteDocumentRequest) SetSchemaId(v string) *DeleteDocumentRequest {
	s.SchemaId = &v
	return s
}

type DeleteDocumentResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 8707EB29-BAED-4302-B999-40BA61877437
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDocumentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocumentResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDocumentResponseBody) SetCode(v string) *DeleteDocumentResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDocumentResponseBody) SetHttpStatusCode(v int32) *DeleteDocumentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteDocumentResponseBody) SetMessage(v string) *DeleteDocumentResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDocumentResponseBody) SetParams(v []*string) *DeleteDocumentResponseBody {
	s.Params = v
	return s
}

func (s *DeleteDocumentResponseBody) SetRequestId(v string) *DeleteDocumentResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDocumentResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDocumentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDocumentResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocumentResponse) GoString() string {
	return s.String()
}

func (s *DeleteDocumentResponse) SetHeaders(v map[string]*string) *DeleteDocumentResponse {
	s.Headers = v
	return s
}

func (s *DeleteDocumentResponse) SetStatusCode(v int32) *DeleteDocumentResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDocumentResponse) SetBody(v *DeleteDocumentResponseBody) *DeleteDocumentResponse {
	s.Body = v
	return s
}

type DeleteDocumentsRequest struct {
	DocumentIds []*string `json:"DocumentIds,omitempty" xml:"DocumentIds,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 9cfad875-6260-4a53-ab6e-b13e3fb31f7d
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 0630E5DF-CEB0-445B-8626-D5C7481181C3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// schema id
	//
	// This parameter is required.
	//
	// example:
	//
	// profile
	SchemaId *string `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s DeleteDocumentsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocumentsRequest) GoString() string {
	return s.String()
}

func (s *DeleteDocumentsRequest) SetDocumentIds(v []*string) *DeleteDocumentsRequest {
	s.DocumentIds = v
	return s
}

func (s *DeleteDocumentsRequest) SetInstanceId(v string) *DeleteDocumentsRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteDocumentsRequest) SetRequestId(v string) *DeleteDocumentsRequest {
	s.RequestId = &v
	return s
}

func (s *DeleteDocumentsRequest) SetSchemaId(v string) *DeleteDocumentsRequest {
	s.SchemaId = &v
	return s
}

type DeleteDocumentsShrinkRequest struct {
	DocumentIdsShrink *string `json:"DocumentIds,omitempty" xml:"DocumentIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 9cfad875-6260-4a53-ab6e-b13e3fb31f7d
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 0630E5DF-CEB0-445B-8626-D5C7481181C3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// schema id
	//
	// This parameter is required.
	//
	// example:
	//
	// profile
	SchemaId *string `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s DeleteDocumentsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocumentsShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteDocumentsShrinkRequest) SetDocumentIdsShrink(v string) *DeleteDocumentsShrinkRequest {
	s.DocumentIdsShrink = &v
	return s
}

func (s *DeleteDocumentsShrinkRequest) SetInstanceId(v string) *DeleteDocumentsShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteDocumentsShrinkRequest) SetRequestId(v string) *DeleteDocumentsShrinkRequest {
	s.RequestId = &v
	return s
}

func (s *DeleteDocumentsShrinkRequest) SetSchemaId(v string) *DeleteDocumentsShrinkRequest {
	s.SchemaId = &v
	return s
}

type DeleteDocumentsResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// A450574A-337F-43E2-BC59-9C6594C994C6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDocumentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocumentsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDocumentsResponseBody) SetCode(v string) *DeleteDocumentsResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDocumentsResponseBody) SetHttpStatusCode(v int32) *DeleteDocumentsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteDocumentsResponseBody) SetMessage(v string) *DeleteDocumentsResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDocumentsResponseBody) SetParams(v []*string) *DeleteDocumentsResponseBody {
	s.Params = v
	return s
}

func (s *DeleteDocumentsResponseBody) SetRequestId(v string) *DeleteDocumentsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDocumentsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDocumentsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDocumentsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDocumentsResponse) GoString() string {
	return s.String()
}

func (s *DeleteDocumentsResponse) SetHeaders(v map[string]*string) *DeleteDocumentsResponse {
	s.Headers = v
	return s
}

func (s *DeleteDocumentsResponse) SetStatusCode(v int32) *DeleteDocumentsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDocumentsResponse) SetBody(v *DeleteDocumentsResponseBody) *DeleteDocumentsResponse {
	s.Body = v
	return s
}

type DeleteSchemaRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 9cfad875-6260-4a53-ab6e-b13e3fb31f7d
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 0630E5DF-CEB0-445B-8626-D5C7481181C3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// schema id
	//
	// This parameter is required.
	//
	// example:
	//
	// profile
	SchemaId *string `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s DeleteSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSchemaRequest) GoString() string {
	return s.String()
}

func (s *DeleteSchemaRequest) SetInstanceId(v string) *DeleteSchemaRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteSchemaRequest) SetRequestId(v string) *DeleteSchemaRequest {
	s.RequestId = &v
	return s
}

func (s *DeleteSchemaRequest) SetSchemaId(v string) *DeleteSchemaRequest {
	s.SchemaId = &v
	return s
}

type DeleteSchemaResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 678F7002-CA01-4ABF-A112-585AFBDF3A3B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSchemaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSchemaResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSchemaResponseBody) SetCode(v string) *DeleteSchemaResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteSchemaResponseBody) SetHttpStatusCode(v int32) *DeleteSchemaResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteSchemaResponseBody) SetMessage(v string) *DeleteSchemaResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteSchemaResponseBody) SetParams(v []*string) *DeleteSchemaResponseBody {
	s.Params = v
	return s
}

func (s *DeleteSchemaResponseBody) SetRequestId(v string) *DeleteSchemaResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSchemaResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSchemaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSchemaResponse) GoString() string {
	return s.String()
}

func (s *DeleteSchemaResponse) SetHeaders(v map[string]*string) *DeleteSchemaResponse {
	s.Headers = v
	return s
}

func (s *DeleteSchemaResponse) SetStatusCode(v int32) *DeleteSchemaResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSchemaResponse) SetBody(v *DeleteSchemaResponseBody) *DeleteSchemaResponse {
	s.Body = v
	return s
}

type DeleteSchemaPropertyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 9cfad875-6260-4a53-ab6e-b13e3fb31f7d
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// name
	PropertyName *string `json:"PropertyName,omitempty" xml:"PropertyName,omitempty"`
	// example:
	//
	// 7BEEA660-A45A-45E3-98CC-AFC65E715C23
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// schema id
	//
	// This parameter is required.
	//
	// example:
	//
	// profile
	SchemaId *string `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s DeleteSchemaPropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSchemaPropertyRequest) GoString() string {
	return s.String()
}

func (s *DeleteSchemaPropertyRequest) SetInstanceId(v string) *DeleteSchemaPropertyRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteSchemaPropertyRequest) SetPropertyName(v string) *DeleteSchemaPropertyRequest {
	s.PropertyName = &v
	return s
}

func (s *DeleteSchemaPropertyRequest) SetRequestId(v string) *DeleteSchemaPropertyRequest {
	s.RequestId = &v
	return s
}

func (s *DeleteSchemaPropertyRequest) SetSchemaId(v string) *DeleteSchemaPropertyRequest {
	s.SchemaId = &v
	return s
}

type DeleteSchemaPropertyResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// User 244715989906081477 does not exist in instance worldfirst01.
	Message *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params  []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 7BEEA660-A45A-45E3-98CC-AFC65E715C23
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSchemaPropertyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSchemaPropertyResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSchemaPropertyResponseBody) SetCode(v string) *DeleteSchemaPropertyResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteSchemaPropertyResponseBody) SetHttpStatusCode(v int32) *DeleteSchemaPropertyResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteSchemaPropertyResponseBody) SetMessage(v string) *DeleteSchemaPropertyResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteSchemaPropertyResponseBody) SetParams(v []*string) *DeleteSchemaPropertyResponseBody {
	s.Params = v
	return s
}

func (s *DeleteSchemaPropertyResponseBody) SetRequestId(v string) *DeleteSchemaPropertyResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSchemaPropertyResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSchemaPropertyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSchemaPropertyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSchemaPropertyResponse) GoString() string {
	return s.String()
}

func (s *DeleteSchemaPropertyResponse) SetHeaders(v map[string]*string) *DeleteSchemaPropertyResponse {
	s.Headers = v
	return s
}

func (s *DeleteSchemaPropertyResponse) SetStatusCode(v int32) *DeleteSchemaPropertyResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSchemaPropertyResponse) SetBody(v *DeleteSchemaPropertyResponseBody) *DeleteSchemaPropertyResponse {
	s.Body = v
	return s
}

type DeleteSkillGroupRequest struct {
	// example:
	//
	// true
	Force *bool `json:"Force,omitempty" xml:"Force,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s DeleteSkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSkillGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteSkillGroupRequest) SetForce(v bool) *DeleteSkillGroupRequest {
	s.Force = &v
	return s
}

func (s *DeleteSkillGroupRequest) SetInstanceId(v string) *DeleteSkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteSkillGroupRequest) SetSkillGroupId(v string) *DeleteSkillGroupRequest {
	s.SkillGroupId = &v
	return s
}

type DeleteSkillGroupResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSkillGroupResponseBody) SetCode(v string) *DeleteSkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteSkillGroupResponseBody) SetHttpStatusCode(v int32) *DeleteSkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteSkillGroupResponseBody) SetMessage(v string) *DeleteSkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteSkillGroupResponseBody) SetRequestId(v string) *DeleteSkillGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSkillGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSkillGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteSkillGroupResponse) SetHeaders(v map[string]*string) *DeleteSkillGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteSkillGroupResponse) SetStatusCode(v int32) *DeleteSkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSkillGroupResponse) SetBody(v *DeleteSkillGroupResponseBody) *DeleteSkillGroupResponse {
	s.Body = v
	return s
}

type DeleteTicketRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 3d26b90a-c5d2-4b09-8219-********
	TicketId *string `json:"TicketId,omitempty" xml:"TicketId,omitempty"`
}

func (s DeleteTicketRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTicketRequest) GoString() string {
	return s.String()
}

func (s *DeleteTicketRequest) SetInstanceId(v string) *DeleteTicketRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteTicketRequest) SetTicketId(v string) *DeleteTicketRequest {
	s.TicketId = &v
	return s
}

type DeleteTicketResponseBody struct {
	// example:
	//
	// OK
	Code *string     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 2263B273-AC1B-44EB-BA98-87F2322C6780
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteTicketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTicketResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTicketResponseBody) SetCode(v string) *DeleteTicketResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteTicketResponseBody) SetData(v interface{}) *DeleteTicketResponseBody {
	s.Data = v
	return s
}

func (s *DeleteTicketResponseBody) SetHttpStatusCode(v int32) *DeleteTicketResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteTicketResponseBody) SetMessage(v string) *DeleteTicketResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteTicketResponseBody) SetParams(v []*string) *DeleteTicketResponseBody {
	s.Params = v
	return s
}

func (s *DeleteTicketResponseBody) SetRequestId(v string) *DeleteTicketResponseBody {
	s.RequestId = &v
	return s
}

type DeleteTicketResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTicketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTicketResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTicketResponse) GoString() string {
	return s.String()
}

func (s *DeleteTicketResponse) SetHeaders(v map[string]*string) *DeleteTicketResponse {
	s.Headers = v
	return s
}

func (s *DeleteTicketResponse) SetStatusCode(v int32) *DeleteTicketResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTicketResponse) SetBody(v *DeleteTicketResponseBody) *DeleteTicketResponse {
	s.Body = v
	return s
}

type DeleteTicketTemplateRequest struct {
	// example:
	//
	// ef1e71e9-ae9d-487c-96ad-9181d85cf802
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// **43c2671b-8939-4223-***-6bd187905cc8_1717664210492
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteTicketTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTicketTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteTicketTemplateRequest) SetInstanceId(v string) *DeleteTicketTemplateRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteTicketTemplateRequest) SetTemplateId(v string) *DeleteTicketTemplateRequest {
	s.TemplateId = &v
	return s
}

type DeleteTicketTemplateResponseBody struct {
	// example:
	//
	// OK
	Code *string     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 01B12EE4-6AF2-4730-8B78-EC15F4E5C025
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteTicketTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTicketTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTicketTemplateResponseBody) SetCode(v string) *DeleteTicketTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteTicketTemplateResponseBody) SetData(v interface{}) *DeleteTicketTemplateResponseBody {
	s.Data = v
	return s
}

func (s *DeleteTicketTemplateResponseBody) SetHttpStatusCode(v int32) *DeleteTicketTemplateResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteTicketTemplateResponseBody) SetMessage(v string) *DeleteTicketTemplateResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteTicketTemplateResponseBody) SetParams(v []*string) *DeleteTicketTemplateResponseBody {
	s.Params = v
	return s
}

func (s *DeleteTicketTemplateResponseBody) SetRequestId(v string) *DeleteTicketTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteTicketTemplateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTicketTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTicketTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTicketTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteTicketTemplateResponse) SetHeaders(v map[string]*string) *DeleteTicketTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteTicketTemplateResponse) SetStatusCode(v int32) *DeleteTicketTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTicketTemplateResponse) SetBody(v *DeleteTicketTemplateResponseBody) *DeleteTicketTemplateResponse {
	s.Body = v
	return s
}

type DisableSchemaPropertyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ef1e71e9-ae9d-487c-96ad-9181d85cf802
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// name
	PropertyName *string `json:"PropertyName,omitempty" xml:"PropertyName,omitempty"`
	// example:
	//
	// 2263B273-AC1B-44EB-BA98-87F2322C6780
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// schema id
	//
	// This parameter is required.
	//
	// example:
	//
	// profile
	SchemaId *string `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s DisableSchemaPropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableSchemaPropertyRequest) GoString() string {
	return s.String()
}

func (s *DisableSchemaPropertyRequest) SetInstanceId(v string) *DisableSchemaPropertyRequest {
	s.InstanceId = &v
	return s
}

func (s *DisableSchemaPropertyRequest) SetPropertyName(v string) *DisableSchemaPropertyRequest {
	s.PropertyName = &v
	return s
}

func (s *DisableSchemaPropertyRequest) SetRequestId(v string) *DisableSchemaPropertyRequest {
	s.RequestId = &v
	return s
}

func (s *DisableSchemaPropertyRequest) SetSchemaId(v string) *DisableSchemaPropertyRequest {
	s.SchemaId = &v
	return s
}

type DisableSchemaPropertyResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// User 244715989906081477 does not exist in instance worldfirst01.
	Message *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params  []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 9FBA26B0-462B-4D77-B78F-AF35560DBC71
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableSchemaPropertyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableSchemaPropertyResponseBody) GoString() string {
	return s.String()
}

func (s *DisableSchemaPropertyResponseBody) SetCode(v string) *DisableSchemaPropertyResponseBody {
	s.Code = &v
	return s
}

func (s *DisableSchemaPropertyResponseBody) SetHttpStatusCode(v int32) *DisableSchemaPropertyResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DisableSchemaPropertyResponseBody) SetMessage(v string) *DisableSchemaPropertyResponseBody {
	s.Message = &v
	return s
}

func (s *DisableSchemaPropertyResponseBody) SetParams(v []*string) *DisableSchemaPropertyResponseBody {
	s.Params = v
	return s
}

func (s *DisableSchemaPropertyResponseBody) SetRequestId(v string) *DisableSchemaPropertyResponseBody {
	s.RequestId = &v
	return s
}

type DisableSchemaPropertyResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableSchemaPropertyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableSchemaPropertyResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableSchemaPropertyResponse) GoString() string {
	return s.String()
}

func (s *DisableSchemaPropertyResponse) SetHeaders(v map[string]*string) *DisableSchemaPropertyResponse {
	s.Headers = v
	return s
}

func (s *DisableSchemaPropertyResponse) SetStatusCode(v int32) *DisableSchemaPropertyResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableSchemaPropertyResponse) SetBody(v *DisableSchemaPropertyResponseBody) *DisableSchemaPropertyResponse {
	s.Body = v
	return s
}

type DisableTicketTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 43c2671b-8939-4223-86d0-6bd187905cc8_1717664210492
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DisableTicketTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableTicketTemplateRequest) GoString() string {
	return s.String()
}

func (s *DisableTicketTemplateRequest) SetInstanceId(v string) *DisableTicketTemplateRequest {
	s.InstanceId = &v
	return s
}

func (s *DisableTicketTemplateRequest) SetTemplateId(v string) *DisableTicketTemplateRequest {
	s.TemplateId = &v
	return s
}

type DisableTicketTemplateResponseBody struct {
	// example:
	//
	// OK
	Code *string     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 943D8EF3-3321-471F-A104-51C96FCA94D6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableTicketTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableTicketTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DisableTicketTemplateResponseBody) SetCode(v string) *DisableTicketTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *DisableTicketTemplateResponseBody) SetData(v interface{}) *DisableTicketTemplateResponseBody {
	s.Data = v
	return s
}

func (s *DisableTicketTemplateResponseBody) SetHttpStatusCode(v int32) *DisableTicketTemplateResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DisableTicketTemplateResponseBody) SetMessage(v string) *DisableTicketTemplateResponseBody {
	s.Message = &v
	return s
}

func (s *DisableTicketTemplateResponseBody) SetParams(v []*string) *DisableTicketTemplateResponseBody {
	s.Params = v
	return s
}

func (s *DisableTicketTemplateResponseBody) SetRequestId(v string) *DisableTicketTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DisableTicketTemplateResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableTicketTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableTicketTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableTicketTemplateResponse) GoString() string {
	return s.String()
}

func (s *DisableTicketTemplateResponse) SetHeaders(v map[string]*string) *DisableTicketTemplateResponse {
	s.Headers = v
	return s
}

func (s *DisableTicketTemplateResponse) SetStatusCode(v int32) *DisableTicketTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableTicketTemplateResponse) SetBody(v *DisableTicketTemplateResponseBody) *DisableTicketTemplateResponse {
	s.Body = v
	return s
}

type DiscardEditingContactFlowRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 3ff4e021-fd63-4572-ad8c-10ed69972965
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0aa493d6-58eb-4290-9ba2-e1c2c615b46b
	DraftId *string `json:"DraftId,omitempty" xml:"DraftId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DiscardEditingContactFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s DiscardEditingContactFlowRequest) GoString() string {
	return s.String()
}

func (s *DiscardEditingContactFlowRequest) SetContactFlowId(v string) *DiscardEditingContactFlowRequest {
	s.ContactFlowId = &v
	return s
}

func (s *DiscardEditingContactFlowRequest) SetDraftId(v string) *DiscardEditingContactFlowRequest {
	s.DraftId = &v
	return s
}

func (s *DiscardEditingContactFlowRequest) SetInstanceId(v string) *DiscardEditingContactFlowRequest {
	s.InstanceId = &v
	return s
}

type DiscardEditingContactFlowResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// CB72B537-B531-598F-9617-A636FB8040C0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DiscardEditingContactFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DiscardEditingContactFlowResponseBody) GoString() string {
	return s.String()
}

func (s *DiscardEditingContactFlowResponseBody) SetCode(v string) *DiscardEditingContactFlowResponseBody {
	s.Code = &v
	return s
}

func (s *DiscardEditingContactFlowResponseBody) SetHttpStatusCode(v int32) *DiscardEditingContactFlowResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DiscardEditingContactFlowResponseBody) SetMessage(v string) *DiscardEditingContactFlowResponseBody {
	s.Message = &v
	return s
}

func (s *DiscardEditingContactFlowResponseBody) SetRequestId(v string) *DiscardEditingContactFlowResponseBody {
	s.RequestId = &v
	return s
}

type DiscardEditingContactFlowResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DiscardEditingContactFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DiscardEditingContactFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s DiscardEditingContactFlowResponse) GoString() string {
	return s.String()
}

func (s *DiscardEditingContactFlowResponse) SetHeaders(v map[string]*string) *DiscardEditingContactFlowResponse {
	s.Headers = v
	return s
}

func (s *DiscardEditingContactFlowResponse) SetStatusCode(v int32) *DiscardEditingContactFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *DiscardEditingContactFlowResponse) SetBody(v *DiscardEditingContactFlowResponseBody) *DiscardEditingContactFlowResponse {
	s.Body = v
	return s
}

type EnableSchemaPropertyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 9cfad875-6260-4a53-ab6e-b13e3fb31f7d
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// name
	PropertyName *string `json:"PropertyName,omitempty" xml:"PropertyName,omitempty"`
	// example:
	//
	// 03C67DAD-EB26-41D8-949D-9B0C470FB716
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// schema id
	//
	// This parameter is required.
	//
	// example:
	//
	// profile
	SchemaId *string `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s EnableSchemaPropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableSchemaPropertyRequest) GoString() string {
	return s.String()
}

func (s *EnableSchemaPropertyRequest) SetInstanceId(v string) *EnableSchemaPropertyRequest {
	s.InstanceId = &v
	return s
}

func (s *EnableSchemaPropertyRequest) SetPropertyName(v string) *EnableSchemaPropertyRequest {
	s.PropertyName = &v
	return s
}

func (s *EnableSchemaPropertyRequest) SetRequestId(v string) *EnableSchemaPropertyRequest {
	s.RequestId = &v
	return s
}

func (s *EnableSchemaPropertyRequest) SetSchemaId(v string) *EnableSchemaPropertyRequest {
	s.SchemaId = &v
	return s
}

type EnableSchemaPropertyResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// The operation is not allowed. User state (READY) does not meet expectations (OFFLINE).
	Message *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params  []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 2778FA12-EDD6-42AA-9B15-AF855072E5E5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnableSchemaPropertyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableSchemaPropertyResponseBody) GoString() string {
	return s.String()
}

func (s *EnableSchemaPropertyResponseBody) SetCode(v string) *EnableSchemaPropertyResponseBody {
	s.Code = &v
	return s
}

func (s *EnableSchemaPropertyResponseBody) SetHttpStatusCode(v int32) *EnableSchemaPropertyResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *EnableSchemaPropertyResponseBody) SetMessage(v string) *EnableSchemaPropertyResponseBody {
	s.Message = &v
	return s
}

func (s *EnableSchemaPropertyResponseBody) SetParams(v []*string) *EnableSchemaPropertyResponseBody {
	s.Params = v
	return s
}

func (s *EnableSchemaPropertyResponseBody) SetRequestId(v string) *EnableSchemaPropertyResponseBody {
	s.RequestId = &v
	return s
}

type EnableSchemaPropertyResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableSchemaPropertyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableSchemaPropertyResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableSchemaPropertyResponse) GoString() string {
	return s.String()
}

func (s *EnableSchemaPropertyResponse) SetHeaders(v map[string]*string) *EnableSchemaPropertyResponse {
	s.Headers = v
	return s
}

func (s *EnableSchemaPropertyResponse) SetStatusCode(v int32) *EnableSchemaPropertyResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableSchemaPropertyResponse) SetBody(v *EnableSchemaPropertyResponseBody) *EnableSchemaPropertyResponse {
	s.Body = v
	return s
}

type EnableTicketTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 43c2671b-8939-4223-86d0-6bd187905cc8_1717664210492
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s EnableTicketTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableTicketTemplateRequest) GoString() string {
	return s.String()
}

func (s *EnableTicketTemplateRequest) SetInstanceId(v string) *EnableTicketTemplateRequest {
	s.InstanceId = &v
	return s
}

func (s *EnableTicketTemplateRequest) SetTemplateId(v string) *EnableTicketTemplateRequest {
	s.TemplateId = &v
	return s
}

type EnableTicketTemplateResponseBody struct {
	// example:
	//
	// OK
	Code *string     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EnableTicketTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableTicketTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *EnableTicketTemplateResponseBody) SetCode(v string) *EnableTicketTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *EnableTicketTemplateResponseBody) SetData(v interface{}) *EnableTicketTemplateResponseBody {
	s.Data = v
	return s
}

func (s *EnableTicketTemplateResponseBody) SetHttpStatusCode(v int32) *EnableTicketTemplateResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *EnableTicketTemplateResponseBody) SetMessage(v string) *EnableTicketTemplateResponseBody {
	s.Message = &v
	return s
}

func (s *EnableTicketTemplateResponseBody) SetParams(v []*string) *EnableTicketTemplateResponseBody {
	s.Params = v
	return s
}

func (s *EnableTicketTemplateResponseBody) SetRequestId(v string) *EnableTicketTemplateResponseBody {
	s.RequestId = &v
	return s
}

type EnableTicketTemplateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableTicketTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableTicketTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableTicketTemplateResponse) GoString() string {
	return s.String()
}

func (s *EnableTicketTemplateResponse) SetHeaders(v map[string]*string) *EnableTicketTemplateResponse {
	s.Headers = v
	return s
}

func (s *EnableTicketTemplateResponse) SetStatusCode(v int32) *EnableTicketTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableTicketTemplateResponse) SetBody(v *EnableTicketTemplateResponseBody) *EnableTicketTemplateResponse {
	s.Body = v
	return s
}

type EndConferenceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 9cfad875-6260-4a53-ab6e-b13e3fb31f7d
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s EndConferenceRequest) String() string {
	return tea.Prettify(s)
}

func (s EndConferenceRequest) GoString() string {
	return s.String()
}

func (s *EndConferenceRequest) SetInstanceId(v string) *EndConferenceRequest {
	s.InstanceId = &v
	return s
}

func (s *EndConferenceRequest) SetJobId(v string) *EndConferenceRequest {
	s.JobId = &v
	return s
}

func (s *EndConferenceRequest) SetUserId(v string) *EndConferenceRequest {
	s.UserId = &v
	return s
}

type EndConferenceResponseBody struct {
	// example:
	//
	// OK
	Code *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *EndConferenceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 0630E5DF-CEB0-445B-8626-D5C7481181C3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s EndConferenceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EndConferenceResponseBody) GoString() string {
	return s.String()
}

func (s *EndConferenceResponseBody) SetCode(v string) *EndConferenceResponseBody {
	s.Code = &v
	return s
}

func (s *EndConferenceResponseBody) SetData(v *EndConferenceResponseBodyData) *EndConferenceResponseBody {
	s.Data = v
	return s
}

func (s *EndConferenceResponseBody) SetHttpStatusCode(v int32) *EndConferenceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *EndConferenceResponseBody) SetMessage(v string) *EndConferenceResponseBody {
	s.Message = &v
	return s
}

func (s *EndConferenceResponseBody) SetParams(v []*string) *EndConferenceResponseBody {
	s.Params = v
	return s
}

func (s *EndConferenceResponseBody) SetRequestId(v string) *EndConferenceResponseBody {
	s.RequestId = &v
	return s
}

type EndConferenceResponseBodyData struct {
	CallContext *EndConferenceResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	// example:
	//
	// 103655
	ContextId   *int64                                    `json:"ContextId,omitempty" xml:"ContextId,omitempty"`
	UserContext *EndConferenceResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s EndConferenceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s EndConferenceResponseBodyData) GoString() string {
	return s.String()
}

func (s *EndConferenceResponseBodyData) SetCallContext(v *EndConferenceResponseBodyDataCallContext) *EndConferenceResponseBodyData {
	s.CallContext = v
	return s
}

func (s *EndConferenceResponseBodyData) SetContextId(v int64) *EndConferenceResponseBodyData {
	s.ContextId = &v
	return s
}

func (s *EndConferenceResponseBodyData) SetUserContext(v *EndConferenceResponseBodyDataUserContext) *EndConferenceResponseBodyData {
	s.UserContext = v
	return s
}

type EndConferenceResponseBodyDataCallContext struct {
	ChannelContexts []*EndConferenceResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s EndConferenceResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s EndConferenceResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *EndConferenceResponseBodyDataCallContext) SetChannelContexts(v []*EndConferenceResponseBodyDataCallContextChannelContexts) *EndConferenceResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *EndConferenceResponseBodyDataCallContext) SetInstanceId(v string) *EndConferenceResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *EndConferenceResponseBodyDataCallContext) SetJobId(v string) *EndConferenceResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type EndConferenceResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// ch:user:131888****->8001****:1609225718294:job-65700074013925376
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// CREATED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 8001****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0830019****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s EndConferenceResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s EndConferenceResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *EndConferenceResponseBodyDataCallContextChannelContexts) SetCallType(v string) *EndConferenceResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *EndConferenceResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *EndConferenceResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *EndConferenceResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *EndConferenceResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *EndConferenceResponseBodyDataCallContextChannelContexts) SetDestination(v string) *EndConferenceResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *EndConferenceResponseBodyDataCallContextChannelContexts) SetJobId(v string) *EndConferenceResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *EndConferenceResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *EndConferenceResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *EndConferenceResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *EndConferenceResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *EndConferenceResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *EndConferenceResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *EndConferenceResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *EndConferenceResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *EndConferenceResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *EndConferenceResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *EndConferenceResponseBodyDataCallContextChannelContexts) SetUserId(v string) *EndConferenceResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type EndConferenceResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// UNREGISTERED
	DeviceState *string `json:"DeviceState,omitempty" xml:"DeviceState,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// false
	OutboundScenario       *bool     `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s EndConferenceResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s EndConferenceResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *EndConferenceResponseBodyDataUserContext) SetBreakCode(v string) *EndConferenceResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *EndConferenceResponseBodyDataUserContext) SetDeviceId(v string) *EndConferenceResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *EndConferenceResponseBodyDataUserContext) SetDeviceState(v string) *EndConferenceResponseBodyDataUserContext {
	s.DeviceState = &v
	return s
}

func (s *EndConferenceResponseBodyDataUserContext) SetExtension(v string) *EndConferenceResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *EndConferenceResponseBodyDataUserContext) SetInstanceId(v string) *EndConferenceResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *EndConferenceResponseBodyDataUserContext) SetJobId(v string) *EndConferenceResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *EndConferenceResponseBodyDataUserContext) SetOutboundScenario(v bool) *EndConferenceResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *EndConferenceResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *EndConferenceResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *EndConferenceResponseBodyDataUserContext) SetUserId(v string) *EndConferenceResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *EndConferenceResponseBodyDataUserContext) SetUserState(v string) *EndConferenceResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *EndConferenceResponseBodyDataUserContext) SetWorkMode(v string) *EndConferenceResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type EndConferenceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EndConferenceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EndConferenceResponse) String() string {
	return tea.Prettify(s)
}

func (s EndConferenceResponse) GoString() string {
	return s.String()
}

func (s *EndConferenceResponse) SetHeaders(v map[string]*string) *EndConferenceResponse {
	s.Headers = v
	return s
}

func (s *EndConferenceResponse) SetStatusCode(v int32) *EndConferenceResponse {
	s.StatusCode = &v
	return s
}

func (s *EndConferenceResponse) SetBody(v *EndConferenceResponseBody) *EndConferenceResponse {
	s.Body = v
	return s
}

type ExportCustomCallTaggingRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ExportCustomCallTaggingRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportCustomCallTaggingRequest) GoString() string {
	return s.String()
}

func (s *ExportCustomCallTaggingRequest) SetInstanceId(v string) *ExportCustomCallTaggingRequest {
	s.InstanceId = &v
	return s
}

type ExportCustomCallTaggingResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// http://ccc-v2-online.oss-cn-shanghai.aliyuncs.com/ccc-test/tagging.xlsx ?Expires=1610910578&amp;OSSAccessKeyId=****&amp;Signature=****
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ExportCustomCallTaggingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportCustomCallTaggingResponseBody) GoString() string {
	return s.String()
}

func (s *ExportCustomCallTaggingResponseBody) SetCode(v string) *ExportCustomCallTaggingResponseBody {
	s.Code = &v
	return s
}

func (s *ExportCustomCallTaggingResponseBody) SetData(v string) *ExportCustomCallTaggingResponseBody {
	s.Data = &v
	return s
}

func (s *ExportCustomCallTaggingResponseBody) SetHttpStatusCode(v int32) *ExportCustomCallTaggingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ExportCustomCallTaggingResponseBody) SetMessage(v string) *ExportCustomCallTaggingResponseBody {
	s.Message = &v
	return s
}

func (s *ExportCustomCallTaggingResponseBody) SetRequestId(v string) *ExportCustomCallTaggingResponseBody {
	s.RequestId = &v
	return s
}

type ExportCustomCallTaggingResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportCustomCallTaggingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportCustomCallTaggingResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportCustomCallTaggingResponse) GoString() string {
	return s.String()
}

func (s *ExportCustomCallTaggingResponse) SetHeaders(v map[string]*string) *ExportCustomCallTaggingResponse {
	s.Headers = v
	return s
}

func (s *ExportCustomCallTaggingResponse) SetStatusCode(v int32) *ExportCustomCallTaggingResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportCustomCallTaggingResponse) SetBody(v *ExportCustomCallTaggingResponseBody) *ExportCustomCallTaggingResponse {
	s.Body = v
	return s
}

type ExportDoNotCallNumbersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// INSTANCE
	Scope *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	// example:
	//
	// RemarkA
	SearchPattern *string `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
}

func (s ExportDoNotCallNumbersRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportDoNotCallNumbersRequest) GoString() string {
	return s.String()
}

func (s *ExportDoNotCallNumbersRequest) SetInstanceId(v string) *ExportDoNotCallNumbersRequest {
	s.InstanceId = &v
	return s
}

func (s *ExportDoNotCallNumbersRequest) SetScope(v string) *ExportDoNotCallNumbersRequest {
	s.Scope = &v
	return s
}

func (s *ExportDoNotCallNumbersRequest) SetSearchPattern(v string) *ExportDoNotCallNumbersRequest {
	s.SearchPattern = &v
	return s
}

type ExportDoNotCallNumbersResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// https://****.oss-cn-shanghai.aliyuncs.com/ccc-test/blacklist.xlsx?Expires=3294624578&OSSAccessKeyId=****&Signature=****
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ExportDoNotCallNumbersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportDoNotCallNumbersResponseBody) GoString() string {
	return s.String()
}

func (s *ExportDoNotCallNumbersResponseBody) SetCode(v string) *ExportDoNotCallNumbersResponseBody {
	s.Code = &v
	return s
}

func (s *ExportDoNotCallNumbersResponseBody) SetData(v string) *ExportDoNotCallNumbersResponseBody {
	s.Data = &v
	return s
}

func (s *ExportDoNotCallNumbersResponseBody) SetHttpStatusCode(v int32) *ExportDoNotCallNumbersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ExportDoNotCallNumbersResponseBody) SetMessage(v string) *ExportDoNotCallNumbersResponseBody {
	s.Message = &v
	return s
}

func (s *ExportDoNotCallNumbersResponseBody) SetParams(v []*string) *ExportDoNotCallNumbersResponseBody {
	s.Params = v
	return s
}

func (s *ExportDoNotCallNumbersResponseBody) SetRequestId(v string) *ExportDoNotCallNumbersResponseBody {
	s.RequestId = &v
	return s
}

type ExportDoNotCallNumbersResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportDoNotCallNumbersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportDoNotCallNumbersResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportDoNotCallNumbersResponse) GoString() string {
	return s.String()
}

func (s *ExportDoNotCallNumbersResponse) SetHeaders(v map[string]*string) *ExportDoNotCallNumbersResponse {
	s.Headers = v
	return s
}

func (s *ExportDoNotCallNumbersResponse) SetStatusCode(v int32) *ExportDoNotCallNumbersResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportDoNotCallNumbersResponse) SetBody(v *ExportDoNotCallNumbersResponseBody) *ExportDoNotCallNumbersResponse {
	s.Body = v
	return s
}

type GetAccessChannelOfStagingRequest struct {
	SearchPattern *string `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
}

func (s GetAccessChannelOfStagingRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAccessChannelOfStagingRequest) GoString() string {
	return s.String()
}

func (s *GetAccessChannelOfStagingRequest) SetSearchPattern(v string) *GetAccessChannelOfStagingRequest {
	s.SearchPattern = &v
	return s
}

type GetAccessChannelOfStagingResponseBody struct {
	Code           *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *GetAccessChannelOfStagingResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                                     `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAccessChannelOfStagingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAccessChannelOfStagingResponseBody) GoString() string {
	return s.String()
}

func (s *GetAccessChannelOfStagingResponseBody) SetCode(v string) *GetAccessChannelOfStagingResponseBody {
	s.Code = &v
	return s
}

func (s *GetAccessChannelOfStagingResponseBody) SetData(v *GetAccessChannelOfStagingResponseBodyData) *GetAccessChannelOfStagingResponseBody {
	s.Data = v
	return s
}

func (s *GetAccessChannelOfStagingResponseBody) SetHttpStatusCode(v int32) *GetAccessChannelOfStagingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetAccessChannelOfStagingResponseBody) SetMessage(v string) *GetAccessChannelOfStagingResponseBody {
	s.Message = &v
	return s
}

func (s *GetAccessChannelOfStagingResponseBody) SetRequestId(v string) *GetAccessChannelOfStagingResponseBody {
	s.RequestId = &v
	return s
}

type GetAccessChannelOfStagingResponseBodyData struct {
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s GetAccessChannelOfStagingResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAccessChannelOfStagingResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAccessChannelOfStagingResponseBodyData) SetToken(v string) *GetAccessChannelOfStagingResponseBodyData {
	s.Token = &v
	return s
}

type GetAccessChannelOfStagingResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAccessChannelOfStagingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAccessChannelOfStagingResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAccessChannelOfStagingResponse) GoString() string {
	return s.String()
}

func (s *GetAccessChannelOfStagingResponse) SetHeaders(v map[string]*string) *GetAccessChannelOfStagingResponse {
	s.Headers = v
	return s
}

func (s *GetAccessChannelOfStagingResponse) SetStatusCode(v int32) *GetAccessChannelOfStagingResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAccessChannelOfStagingResponse) SetBody(v *GetAccessChannelOfStagingResponseBody) *GetAccessChannelOfStagingResponse {
	s.Body = v
	return s
}

type GetAudioFileRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c1a06b46-302a-4c6e-928b-a43c0df485cf
	AudioResourceId *string `json:"AudioResourceId,omitempty" xml:"AudioResourceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetAudioFileRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAudioFileRequest) GoString() string {
	return s.String()
}

func (s *GetAudioFileRequest) SetAudioResourceId(v string) *GetAudioFileRequest {
	s.AudioResourceId = &v
	return s
}

func (s *GetAudioFileRequest) SetInstanceId(v string) *GetAudioFileRequest {
	s.InstanceId = &v
	return s
}

type GetAudioFileResponseBody struct {
	// example:
	//
	// OK
	Code *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetAudioFileResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEE26562-D921-5CB2-AE49-E4C45A42D432
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAudioFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAudioFileResponseBody) GoString() string {
	return s.String()
}

func (s *GetAudioFileResponseBody) SetCode(v string) *GetAudioFileResponseBody {
	s.Code = &v
	return s
}

func (s *GetAudioFileResponseBody) SetData(v *GetAudioFileResponseBodyData) *GetAudioFileResponseBody {
	s.Data = v
	return s
}

func (s *GetAudioFileResponseBody) SetHttpStatusCode(v int32) *GetAudioFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetAudioFileResponseBody) SetMessage(v string) *GetAudioFileResponseBody {
	s.Message = &v
	return s
}

func (s *GetAudioFileResponseBody) SetRequestId(v string) *GetAudioFileResponseBody {
	s.RequestId = &v
	return s
}

type GetAudioFileResponseBodyData struct {
	// example:
	//
	// test-file.wav
	AudioFileName *string `json:"AudioFileName,omitempty" xml:"AudioFileName,omitempty"`
	// example:
	//
	// c1a06b46-302a-4c6e-928b-a43c0df485cf
	AudioResourceId *string `json:"AudioResourceId,omitempty" xml:"AudioResourceId,omitempty"`
	// example:
	//
	// 2021-07-14 10:48:43.0
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// ccc-test/test-file.wav
	OssFileKey *string `json:"OssFileKey,omitempty" xml:"OssFileKey,omitempty"`
	// example:
	//
	// 2021-07-14 10:48:43.0
	UpdatedTime *string `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
}

func (s GetAudioFileResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAudioFileResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAudioFileResponseBodyData) SetAudioFileName(v string) *GetAudioFileResponseBodyData {
	s.AudioFileName = &v
	return s
}

func (s *GetAudioFileResponseBodyData) SetAudioResourceId(v string) *GetAudioFileResponseBodyData {
	s.AudioResourceId = &v
	return s
}

func (s *GetAudioFileResponseBodyData) SetCreatedTime(v string) *GetAudioFileResponseBodyData {
	s.CreatedTime = &v
	return s
}

func (s *GetAudioFileResponseBodyData) SetInstanceId(v string) *GetAudioFileResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetAudioFileResponseBodyData) SetName(v string) *GetAudioFileResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetAudioFileResponseBodyData) SetOssFileKey(v string) *GetAudioFileResponseBodyData {
	s.OssFileKey = &v
	return s
}

func (s *GetAudioFileResponseBodyData) SetUpdatedTime(v string) *GetAudioFileResponseBodyData {
	s.UpdatedTime = &v
	return s
}

type GetAudioFileResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAudioFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAudioFileResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAudioFileResponse) GoString() string {
	return s.String()
}

func (s *GetAudioFileResponse) SetHeaders(v map[string]*string) *GetAudioFileResponse {
	s.Headers = v
	return s
}

func (s *GetAudioFileResponse) SetStatusCode(v int32) *GetAudioFileResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAudioFileResponse) SetBody(v *GetAudioFileResponseBody) *GetAudioFileResponse {
	s.Body = v
	return s
}

type GetAudioFileDownloadUrlRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// acc300c4-75c9-41ba-ba5e-2a365c96c248
	AudioResourceId *string `json:"AudioResourceId,omitempty" xml:"AudioResourceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetAudioFileDownloadUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAudioFileDownloadUrlRequest) GoString() string {
	return s.String()
}

func (s *GetAudioFileDownloadUrlRequest) SetAudioResourceId(v string) *GetAudioFileDownloadUrlRequest {
	s.AudioResourceId = &v
	return s
}

func (s *GetAudioFileDownloadUrlRequest) SetInstanceId(v string) *GetAudioFileDownloadUrlRequest {
	s.InstanceId = &v
	return s
}

type GetAudioFileDownloadUrlResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// https://****.oss-cn-shanghai.aliyuncs.com/ccc-test/****.wav?Expires=1656472158&OSSAccessKeyId=****&Signature=****
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 943D8EF3-3321-471F-A104-51C96FCA94D6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAudioFileDownloadUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAudioFileDownloadUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetAudioFileDownloadUrlResponseBody) SetCode(v string) *GetAudioFileDownloadUrlResponseBody {
	s.Code = &v
	return s
}

func (s *GetAudioFileDownloadUrlResponseBody) SetData(v string) *GetAudioFileDownloadUrlResponseBody {
	s.Data = &v
	return s
}

func (s *GetAudioFileDownloadUrlResponseBody) SetHttpStatusCode(v int32) *GetAudioFileDownloadUrlResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetAudioFileDownloadUrlResponseBody) SetMessage(v string) *GetAudioFileDownloadUrlResponseBody {
	s.Message = &v
	return s
}

func (s *GetAudioFileDownloadUrlResponseBody) SetRequestId(v string) *GetAudioFileDownloadUrlResponseBody {
	s.RequestId = &v
	return s
}

type GetAudioFileDownloadUrlResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAudioFileDownloadUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAudioFileDownloadUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAudioFileDownloadUrlResponse) GoString() string {
	return s.String()
}

func (s *GetAudioFileDownloadUrlResponse) SetHeaders(v map[string]*string) *GetAudioFileDownloadUrlResponse {
	s.Headers = v
	return s
}

func (s *GetAudioFileDownloadUrlResponse) SetStatusCode(v int32) *GetAudioFileDownloadUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAudioFileDownloadUrlResponse) SetBody(v *GetAudioFileDownloadUrlResponseBody) *GetAudioFileDownloadUrlResponse {
	s.Body = v
	return s
}

type GetAudioFileUploadParametersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// test-file.wav
	AudioFileName *string `json:"AudioFileName,omitempty" xml:"AudioFileName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetAudioFileUploadParametersRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAudioFileUploadParametersRequest) GoString() string {
	return s.String()
}

func (s *GetAudioFileUploadParametersRequest) SetAudioFileName(v string) *GetAudioFileUploadParametersRequest {
	s.AudioFileName = &v
	return s
}

func (s *GetAudioFileUploadParametersRequest) SetInstanceId(v string) *GetAudioFileUploadParametersRequest {
	s.InstanceId = &v
	return s
}

type GetAudioFileUploadParametersResponseBody struct {
	// example:
	//
	// OK
	Code *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetAudioFileUploadParametersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// C81FD1A5-4B99-470A-A527-D80150228784
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAudioFileUploadParametersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAudioFileUploadParametersResponseBody) GoString() string {
	return s.String()
}

func (s *GetAudioFileUploadParametersResponseBody) SetCode(v string) *GetAudioFileUploadParametersResponseBody {
	s.Code = &v
	return s
}

func (s *GetAudioFileUploadParametersResponseBody) SetData(v *GetAudioFileUploadParametersResponseBodyData) *GetAudioFileUploadParametersResponseBody {
	s.Data = v
	return s
}

func (s *GetAudioFileUploadParametersResponseBody) SetHttpStatusCode(v int32) *GetAudioFileUploadParametersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetAudioFileUploadParametersResponseBody) SetMessage(v string) *GetAudioFileUploadParametersResponseBody {
	s.Message = &v
	return s
}

func (s *GetAudioFileUploadParametersResponseBody) SetRequestId(v string) *GetAudioFileUploadParametersResponseBody {
	s.RequestId = &v
	return s
}

type GetAudioFileUploadParametersResponseBodyData struct {
	// example:
	//
	// ****
	AccessKeyId *string `json:"AccessKeyId,omitempty" xml:"AccessKeyId,omitempty"`
	// example:
	//
	// 1647313420
	ExpireTime *int32 `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// example:
	//
	// ccc-test/test-file.wav
	FilePath *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	// example:
	//
	// https://ccc-v2-online.oss-cn-shanghai.aliyuncs.com
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	// example:
	//
	// eyJleHBpcmF0aW9uIjoiMjAyMi0wNi0yOVQwMDoyOTowMC42NTRaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjBdLFsic3RhcnRzLXdpdGgiLCIka2V5IiwiYXVkaW8vMTU3NzI0NzExNTQ5MDQwMS9seS1vbmxpbmUvMjAyMjA2MjkwNzI5MDAvIl1d****
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// example:
	//
	// HIyClras8IcVlbTV7RIJWJbU****
	Signature *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
}

func (s GetAudioFileUploadParametersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAudioFileUploadParametersResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAudioFileUploadParametersResponseBodyData) SetAccessKeyId(v string) *GetAudioFileUploadParametersResponseBodyData {
	s.AccessKeyId = &v
	return s
}

func (s *GetAudioFileUploadParametersResponseBodyData) SetExpireTime(v int32) *GetAudioFileUploadParametersResponseBodyData {
	s.ExpireTime = &v
	return s
}

func (s *GetAudioFileUploadParametersResponseBodyData) SetFilePath(v string) *GetAudioFileUploadParametersResponseBodyData {
	s.FilePath = &v
	return s
}

func (s *GetAudioFileUploadParametersResponseBodyData) SetHost(v string) *GetAudioFileUploadParametersResponseBodyData {
	s.Host = &v
	return s
}

func (s *GetAudioFileUploadParametersResponseBodyData) SetPolicy(v string) *GetAudioFileUploadParametersResponseBodyData {
	s.Policy = &v
	return s
}

func (s *GetAudioFileUploadParametersResponseBodyData) SetSignature(v string) *GetAudioFileUploadParametersResponseBodyData {
	s.Signature = &v
	return s
}

type GetAudioFileUploadParametersResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAudioFileUploadParametersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAudioFileUploadParametersResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAudioFileUploadParametersResponse) GoString() string {
	return s.String()
}

func (s *GetAudioFileUploadParametersResponse) SetHeaders(v map[string]*string) *GetAudioFileUploadParametersResponse {
	s.Headers = v
	return s
}

func (s *GetAudioFileUploadParametersResponse) SetStatusCode(v int32) *GetAudioFileUploadParametersResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAudioFileUploadParametersResponse) SetBody(v *GetAudioFileUploadParametersResponseBody) *GetAudioFileUploadParametersResponse {
	s.Body = v
	return s
}

type GetCallDetailRecordRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// job-10963442671187****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetCallDetailRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCallDetailRecordRequest) GoString() string {
	return s.String()
}

func (s *GetCallDetailRecordRequest) SetContactId(v string) *GetCallDetailRecordRequest {
	s.ContactId = &v
	return s
}

func (s *GetCallDetailRecordRequest) SetInstanceId(v string) *GetCallDetailRecordRequest {
	s.InstanceId = &v
	return s
}

type GetCallDetailRecordResponseBody struct {
	// example:
	//
	// OK
	Code *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetCallDetailRecordResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 7BEEA660-A45A-45E3-98CC-AFC65E715C23
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetCallDetailRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCallDetailRecordResponseBody) GoString() string {
	return s.String()
}

func (s *GetCallDetailRecordResponseBody) SetCode(v string) *GetCallDetailRecordResponseBody {
	s.Code = &v
	return s
}

func (s *GetCallDetailRecordResponseBody) SetData(v *GetCallDetailRecordResponseBodyData) *GetCallDetailRecordResponseBody {
	s.Data = v
	return s
}

func (s *GetCallDetailRecordResponseBody) SetHttpStatusCode(v int32) *GetCallDetailRecordResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetCallDetailRecordResponseBody) SetMessage(v string) *GetCallDetailRecordResponseBody {
	s.Message = &v
	return s
}

func (s *GetCallDetailRecordResponseBody) SetRequestId(v string) *GetCallDetailRecordResponseBody {
	s.RequestId = &v
	return s
}

type GetCallDetailRecordResponseBodyData struct {
	AgentEvents []*GetCallDetailRecordResponseBodyDataAgentEvents `json:"AgentEvents,omitempty" xml:"AgentEvents,omitempty" type:"Repeated"`
	// example:
	//
	// agent1@ccc-test,agent2@ccc-test
	AgentIds *string `json:"AgentIds,omitempty" xml:"AgentIds,omitempty"`
	// example:
	//
	// agent1,agent2
	AgentNames *string `json:"AgentNames,omitempty" xml:"AgentNames,omitempty"`
	// example:
	//
	// 50
	CallDuration *int64 `json:"CallDuration,omitempty" xml:"CallDuration,omitempty"`
	// example:
	//
	// 1332315****
	CalledNumber   *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CalleeLocation *string `json:"CalleeLocation,omitempty" xml:"CalleeLocation,omitempty"`
	CallerLocation *string `json:"CallerLocation,omitempty" xml:"CallerLocation,omitempty"`
	// example:
	//
	// 0533128****
	CallingNumber *string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	// example:
	//
	// Success
	ContactDisposition *string `json:"ContactDisposition,omitempty" xml:"ContactDisposition,omitempty"`
	// example:
	//
	// job-10963442671187****
	ContactId      *string                                              `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	ContactType    *string                                              `json:"ContactType,omitempty" xml:"ContactType,omitempty"`
	CustomerEvents []*GetCallDetailRecordResponseBodyDataCustomerEvents `json:"CustomerEvents,omitempty" xml:"CustomerEvents,omitempty" type:"Repeated"`
	// example:
	//
	// NotConnected
	EarlyMediaState *string `json:"EarlyMediaState,omitempty" xml:"EarlyMediaState,omitempty"`
	// example:
	//
	// 1532458000000
	EstablishedTime *int64 `json:"EstablishedTime,omitempty" xml:"EstablishedTime,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId  *string                                           `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IvrEvents   []*GetCallDetailRecordResponseBodyDataIvrEvents   `json:"IvrEvents,omitempty" xml:"IvrEvents,omitempty" type:"Repeated"`
	QueueEvents []*GetCallDetailRecordResponseBodyDataQueueEvents `json:"QueueEvents,omitempty" xml:"QueueEvents,omitempty" type:"Repeated"`
	// example:
	//
	// true
	RecordingReady *bool `json:"RecordingReady,omitempty" xml:"RecordingReady,omitempty"`
	// example:
	//
	// customer
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 200 - OK
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// 1532458000000
	ReleaseTime *int64 `json:"ReleaseTime,omitempty" xml:"ReleaseTime,omitempty"`
	// example:
	//
	// 1
	Satisfaction *int32 `json:"Satisfaction,omitempty" xml:"Satisfaction,omitempty"`
	// example:
	//
	// IVR
	SatisfactionSurveyChannel *string `json:"SatisfactionSurveyChannel,omitempty" xml:"SatisfactionSurveyChannel,omitempty"`
	// example:
	//
	// true
	SatisfactionSurveyOffered *bool `json:"SatisfactionSurveyOffered,omitempty" xml:"SatisfactionSurveyOffered,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupIds   *string `json:"SkillGroupIds,omitempty" xml:"SkillGroupIds,omitempty"`
	SkillGroupNames *string `json:"SkillGroupNames,omitempty" xml:"SkillGroupNames,omitempty"`
	// example:
	//
	// 1532458000000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetCallDetailRecordResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCallDetailRecordResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCallDetailRecordResponseBodyData) SetAgentEvents(v []*GetCallDetailRecordResponseBodyDataAgentEvents) *GetCallDetailRecordResponseBodyData {
	s.AgentEvents = v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetAgentIds(v string) *GetCallDetailRecordResponseBodyData {
	s.AgentIds = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetAgentNames(v string) *GetCallDetailRecordResponseBodyData {
	s.AgentNames = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetCallDuration(v int64) *GetCallDetailRecordResponseBodyData {
	s.CallDuration = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetCalledNumber(v string) *GetCallDetailRecordResponseBodyData {
	s.CalledNumber = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetCalleeLocation(v string) *GetCallDetailRecordResponseBodyData {
	s.CalleeLocation = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetCallerLocation(v string) *GetCallDetailRecordResponseBodyData {
	s.CallerLocation = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetCallingNumber(v string) *GetCallDetailRecordResponseBodyData {
	s.CallingNumber = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetContactDisposition(v string) *GetCallDetailRecordResponseBodyData {
	s.ContactDisposition = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetContactId(v string) *GetCallDetailRecordResponseBodyData {
	s.ContactId = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetContactType(v string) *GetCallDetailRecordResponseBodyData {
	s.ContactType = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetCustomerEvents(v []*GetCallDetailRecordResponseBodyDataCustomerEvents) *GetCallDetailRecordResponseBodyData {
	s.CustomerEvents = v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetEarlyMediaState(v string) *GetCallDetailRecordResponseBodyData {
	s.EarlyMediaState = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetEstablishedTime(v int64) *GetCallDetailRecordResponseBodyData {
	s.EstablishedTime = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetInstanceId(v string) *GetCallDetailRecordResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetIvrEvents(v []*GetCallDetailRecordResponseBodyDataIvrEvents) *GetCallDetailRecordResponseBodyData {
	s.IvrEvents = v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetQueueEvents(v []*GetCallDetailRecordResponseBodyDataQueueEvents) *GetCallDetailRecordResponseBodyData {
	s.QueueEvents = v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetRecordingReady(v bool) *GetCallDetailRecordResponseBodyData {
	s.RecordingReady = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetReleaseInitiator(v string) *GetCallDetailRecordResponseBodyData {
	s.ReleaseInitiator = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetReleaseReason(v string) *GetCallDetailRecordResponseBodyData {
	s.ReleaseReason = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetReleaseTime(v int64) *GetCallDetailRecordResponseBodyData {
	s.ReleaseTime = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetSatisfaction(v int32) *GetCallDetailRecordResponseBodyData {
	s.Satisfaction = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetSatisfactionSurveyChannel(v string) *GetCallDetailRecordResponseBodyData {
	s.SatisfactionSurveyChannel = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetSatisfactionSurveyOffered(v bool) *GetCallDetailRecordResponseBodyData {
	s.SatisfactionSurveyOffered = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetSkillGroupIds(v string) *GetCallDetailRecordResponseBodyData {
	s.SkillGroupIds = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetSkillGroupNames(v string) *GetCallDetailRecordResponseBodyData {
	s.SkillGroupNames = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyData) SetStartTime(v int64) *GetCallDetailRecordResponseBodyData {
	s.StartTime = &v
	return s
}

type GetCallDetailRecordResponseBodyDataAgentEvents struct {
	// example:
	//
	// agent@ccc-test
	AgentId       *string                                                        `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName     *string                                                        `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	EventSequence []*GetCallDetailRecordResponseBodyDataAgentEventsEventSequence `json:"EventSequence,omitempty" xml:"EventSequence,omitempty" type:"Repeated"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s GetCallDetailRecordResponseBodyDataAgentEvents) String() string {
	return tea.Prettify(s)
}

func (s GetCallDetailRecordResponseBodyDataAgentEvents) GoString() string {
	return s.String()
}

func (s *GetCallDetailRecordResponseBodyDataAgentEvents) SetAgentId(v string) *GetCallDetailRecordResponseBodyDataAgentEvents {
	s.AgentId = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyDataAgentEvents) SetAgentName(v string) *GetCallDetailRecordResponseBodyDataAgentEvents {
	s.AgentName = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyDataAgentEvents) SetEventSequence(v []*GetCallDetailRecordResponseBodyDataAgentEventsEventSequence) *GetCallDetailRecordResponseBodyDataAgentEvents {
	s.EventSequence = v
	return s
}

func (s *GetCallDetailRecordResponseBodyDataAgentEvents) SetSkillGroupId(v string) *GetCallDetailRecordResponseBodyDataAgentEvents {
	s.SkillGroupId = &v
	return s
}

type GetCallDetailRecordResponseBodyDataAgentEventsEventSequence struct {
	// example:
	//
	// 3
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// Dialing
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 1604639129000
	EventTime *int64 `json:"EventTime,omitempty" xml:"EventTime,omitempty"`
}

func (s GetCallDetailRecordResponseBodyDataAgentEventsEventSequence) String() string {
	return tea.Prettify(s)
}

func (s GetCallDetailRecordResponseBodyDataAgentEventsEventSequence) GoString() string {
	return s.String()
}

func (s *GetCallDetailRecordResponseBodyDataAgentEventsEventSequence) SetDuration(v int64) *GetCallDetailRecordResponseBodyDataAgentEventsEventSequence {
	s.Duration = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyDataAgentEventsEventSequence) SetEvent(v string) *GetCallDetailRecordResponseBodyDataAgentEventsEventSequence {
	s.Event = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyDataAgentEventsEventSequence) SetEventTime(v int64) *GetCallDetailRecordResponseBodyDataAgentEventsEventSequence {
	s.EventTime = &v
	return s
}

type GetCallDetailRecordResponseBodyDataCustomerEvents struct {
	// example:
	//
	// 1332315****
	CustomerId    *string                                                           `json:"CustomerId,omitempty" xml:"CustomerId,omitempty"`
	EventSequence []*GetCallDetailRecordResponseBodyDataCustomerEventsEventSequence `json:"EventSequence,omitempty" xml:"EventSequence,omitempty" type:"Repeated"`
}

func (s GetCallDetailRecordResponseBodyDataCustomerEvents) String() string {
	return tea.Prettify(s)
}

func (s GetCallDetailRecordResponseBodyDataCustomerEvents) GoString() string {
	return s.String()
}

func (s *GetCallDetailRecordResponseBodyDataCustomerEvents) SetCustomerId(v string) *GetCallDetailRecordResponseBodyDataCustomerEvents {
	s.CustomerId = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyDataCustomerEvents) SetEventSequence(v []*GetCallDetailRecordResponseBodyDataCustomerEventsEventSequence) *GetCallDetailRecordResponseBodyDataCustomerEvents {
	s.EventSequence = v
	return s
}

type GetCallDetailRecordResponseBodyDataCustomerEventsEventSequence struct {
	// example:
	//
	// Released
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 1532458000000
	EventTime *int64 `json:"EventTime,omitempty" xml:"EventTime,omitempty"`
}

func (s GetCallDetailRecordResponseBodyDataCustomerEventsEventSequence) String() string {
	return tea.Prettify(s)
}

func (s GetCallDetailRecordResponseBodyDataCustomerEventsEventSequence) GoString() string {
	return s.String()
}

func (s *GetCallDetailRecordResponseBodyDataCustomerEventsEventSequence) SetEvent(v string) *GetCallDetailRecordResponseBodyDataCustomerEventsEventSequence {
	s.Event = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyDataCustomerEventsEventSequence) SetEventTime(v int64) *GetCallDetailRecordResponseBodyDataCustomerEventsEventSequence {
	s.EventTime = &v
	return s
}

type GetCallDetailRecordResponseBodyDataIvrEvents struct {
	EventSequence []*GetCallDetailRecordResponseBodyDataIvrEventsEventSequence `json:"EventSequence,omitempty" xml:"EventSequence,omitempty" type:"Repeated"`
	// example:
	//
	// edaf2eaa-8f88-44ca-812e-41b3cd2b7a90
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	// example:
	//
	// MAIN_FLOW
	FlowType *string `json:"FlowType,omitempty" xml:"FlowType,omitempty"`
}

func (s GetCallDetailRecordResponseBodyDataIvrEvents) String() string {
	return tea.Prettify(s)
}

func (s GetCallDetailRecordResponseBodyDataIvrEvents) GoString() string {
	return s.String()
}

func (s *GetCallDetailRecordResponseBodyDataIvrEvents) SetEventSequence(v []*GetCallDetailRecordResponseBodyDataIvrEventsEventSequence) *GetCallDetailRecordResponseBodyDataIvrEvents {
	s.EventSequence = v
	return s
}

func (s *GetCallDetailRecordResponseBodyDataIvrEvents) SetFlowId(v string) *GetCallDetailRecordResponseBodyDataIvrEvents {
	s.FlowId = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyDataIvrEvents) SetFlowType(v string) *GetCallDetailRecordResponseBodyDataIvrEvents {
	s.FlowType = &v
	return s
}

type GetCallDetailRecordResponseBodyDataIvrEventsEventSequence struct {
	// example:
	//
	// Route2IVR
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 1604639129000
	EventTime *int64 `json:"EventTime,omitempty" xml:"EventTime,omitempty"`
}

func (s GetCallDetailRecordResponseBodyDataIvrEventsEventSequence) String() string {
	return tea.Prettify(s)
}

func (s GetCallDetailRecordResponseBodyDataIvrEventsEventSequence) GoString() string {
	return s.String()
}

func (s *GetCallDetailRecordResponseBodyDataIvrEventsEventSequence) SetEvent(v string) *GetCallDetailRecordResponseBodyDataIvrEventsEventSequence {
	s.Event = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyDataIvrEventsEventSequence) SetEventTime(v int64) *GetCallDetailRecordResponseBodyDataIvrEventsEventSequence {
	s.EventTime = &v
	return s
}

type GetCallDetailRecordResponseBodyDataQueueEvents struct {
	EventSequence []*GetCallDetailRecordResponseBodyDataQueueEventsEventSequence `json:"EventSequence,omitempty" xml:"EventSequence,omitempty" type:"Repeated"`
	// example:
	//
	// edaf2eaa-8f88-44ca-812e-41b3cd2b7a90
	FlowId *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	QueueId   *string `json:"QueueId,omitempty" xml:"QueueId,omitempty"`
	QueueName *string `json:"QueueName,omitempty" xml:"QueueName,omitempty"`
	// example:
	//
	// 1
	QueueType *int32 `json:"QueueType,omitempty" xml:"QueueType,omitempty"`
}

func (s GetCallDetailRecordResponseBodyDataQueueEvents) String() string {
	return tea.Prettify(s)
}

func (s GetCallDetailRecordResponseBodyDataQueueEvents) GoString() string {
	return s.String()
}

func (s *GetCallDetailRecordResponseBodyDataQueueEvents) SetEventSequence(v []*GetCallDetailRecordResponseBodyDataQueueEventsEventSequence) *GetCallDetailRecordResponseBodyDataQueueEvents {
	s.EventSequence = v
	return s
}

func (s *GetCallDetailRecordResponseBodyDataQueueEvents) SetFlowId(v string) *GetCallDetailRecordResponseBodyDataQueueEvents {
	s.FlowId = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyDataQueueEvents) SetQueueId(v string) *GetCallDetailRecordResponseBodyDataQueueEvents {
	s.QueueId = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyDataQueueEvents) SetQueueName(v string) *GetCallDetailRecordResponseBodyDataQueueEvents {
	s.QueueName = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyDataQueueEvents) SetQueueType(v int32) *GetCallDetailRecordResponseBodyDataQueueEvents {
	s.QueueType = &v
	return s
}

type GetCallDetailRecordResponseBodyDataQueueEventsEventSequence struct {
	// example:
	//
	// Enqueue
	Event *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// 1604639129000
	EventTime *int64 `json:"EventTime,omitempty" xml:"EventTime,omitempty"`
}

func (s GetCallDetailRecordResponseBodyDataQueueEventsEventSequence) String() string {
	return tea.Prettify(s)
}

func (s GetCallDetailRecordResponseBodyDataQueueEventsEventSequence) GoString() string {
	return s.String()
}

func (s *GetCallDetailRecordResponseBodyDataQueueEventsEventSequence) SetEvent(v string) *GetCallDetailRecordResponseBodyDataQueueEventsEventSequence {
	s.Event = &v
	return s
}

func (s *GetCallDetailRecordResponseBodyDataQueueEventsEventSequence) SetEventTime(v int64) *GetCallDetailRecordResponseBodyDataQueueEventsEventSequence {
	s.EventTime = &v
	return s
}

type GetCallDetailRecordResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCallDetailRecordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCallDetailRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCallDetailRecordResponse) GoString() string {
	return s.String()
}

func (s *GetCallDetailRecordResponse) SetHeaders(v map[string]*string) *GetCallDetailRecordResponse {
	s.Headers = v
	return s
}

func (s *GetCallDetailRecordResponse) SetStatusCode(v int32) *GetCallDetailRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCallDetailRecordResponse) SetBody(v *GetCallDetailRecordResponseBody) *GetCallDetailRecordResponse {
	s.Body = v
	return s
}

type GetCampaignRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 6badb397-a8b5-40b6-21019d382a09
	CampaignId *string `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetCampaignRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCampaignRequest) GoString() string {
	return s.String()
}

func (s *GetCampaignRequest) SetCampaignId(v string) *GetCampaignRequest {
	s.CampaignId = &v
	return s
}

func (s *GetCampaignRequest) SetInstanceId(v string) *GetCampaignRequest {
	s.InstanceId = &v
	return s
}

type GetCampaignResponseBody struct {
	// example:
	//
	// OK
	Code *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetCampaignResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int64 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// 6CCEF32F-8614-535F-A1D9-D85B8C0DC4F0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetCampaignResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCampaignResponseBody) GoString() string {
	return s.String()
}

func (s *GetCampaignResponseBody) SetCode(v string) *GetCampaignResponseBody {
	s.Code = &v
	return s
}

func (s *GetCampaignResponseBody) SetData(v *GetCampaignResponseBodyData) *GetCampaignResponseBody {
	s.Data = v
	return s
}

func (s *GetCampaignResponseBody) SetHttpStatusCode(v int64) *GetCampaignResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetCampaignResponseBody) SetRequestId(v string) *GetCampaignResponseBody {
	s.RequestId = &v
	return s
}

type GetCampaignResponseBodyData struct {
	// example:
	//
	// 1634008800000
	ActualEndTime *int64 `json:"ActualEndTime,omitempty" xml:"ActualEndTime,omitempty"`
	// example:
	//
	// 1634000460000
	ActualStartTime *int64 `json:"ActualStartTime,omitempty" xml:"ActualStartTime,omitempty"`
	// example:
	//
	// 6badb397-a8b5-40b6-21019d382a09
	CampaignId *string `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	// example:
	//
	// 0
	CasesAborted *int64 `json:"CasesAborted,omitempty" xml:"CasesAborted,omitempty"`
	// example:
	//
	// 40
	CasesConnected *int64 `json:"CasesConnected,omitempty" xml:"CasesConnected,omitempty"`
	// example:
	//
	// 0
	CasesUncompleted             *int64  `json:"CasesUncompleted,omitempty" xml:"CasesUncompleted,omitempty"`
	CasesUncompletedAfterAttempt *string `json:"CasesUncompletedAfterAttempt,omitempty" xml:"CasesUncompletedAfterAttempt,omitempty"`
	// example:
	//
	// 1
	CasesUncompletedAfterAttempted *int64   `json:"CasesUncompletedAfterAttempted,omitempty" xml:"CasesUncompletedAfterAttempted,omitempty"`
	CompletionRate                 *float32 `json:"CompletionRate,omitempty" xml:"CompletionRate,omitempty"`
	ContactFlowId                  *string  `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// example:
	//
	// 1
	MaxAttemptCount *int64 `json:"MaxAttemptCount,omitempty" xml:"MaxAttemptCount,omitempty"`
	// example:
	//
	// 1
	MinAttemptInterval *int64 `json:"MinAttemptInterval,omitempty" xml:"MinAttemptInterval,omitempty"`
	// example:
	//
	// test-campaign
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1634054400000
	PlanedEndTime *int64 `json:"PlanedEndTime,omitempty" xml:"PlanedEndTime,omitempty"`
	// example:
	//
	// 1633968000000
	PlanedStartTime *int64 `json:"PlanedStartTime,omitempty" xml:"PlanedStartTime,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	QueueId   *string `json:"QueueId,omitempty" xml:"QueueId,omitempty"`
	QueueName *string `json:"QueueName,omitempty" xml:"QueueName,omitempty"`
	// example:
	//
	// false
	Simulation           *bool   `json:"Simulation,omitempty" xml:"Simulation,omitempty"`
	SimulationParameters *string `json:"SimulationParameters,omitempty" xml:"SimulationParameters,omitempty"`
	// example:
	//
	// Completed
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// {"ratio":1}
	StrategyParameters *string `json:"StrategyParameters,omitempty" xml:"StrategyParameters,omitempty"`
	// example:
	//
	// PACING
	StrategyType *string `json:"StrategyType,omitempty" xml:"StrategyType,omitempty"`
	// example:
	//
	// 100
	TotalCases *int64 `json:"TotalCases,omitempty" xml:"TotalCases,omitempty"`
}

func (s GetCampaignResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCampaignResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCampaignResponseBodyData) SetActualEndTime(v int64) *GetCampaignResponseBodyData {
	s.ActualEndTime = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetActualStartTime(v int64) *GetCampaignResponseBodyData {
	s.ActualStartTime = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetCampaignId(v string) *GetCampaignResponseBodyData {
	s.CampaignId = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetCasesAborted(v int64) *GetCampaignResponseBodyData {
	s.CasesAborted = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetCasesConnected(v int64) *GetCampaignResponseBodyData {
	s.CasesConnected = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetCasesUncompleted(v int64) *GetCampaignResponseBodyData {
	s.CasesUncompleted = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetCasesUncompletedAfterAttempt(v string) *GetCampaignResponseBodyData {
	s.CasesUncompletedAfterAttempt = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetCasesUncompletedAfterAttempted(v int64) *GetCampaignResponseBodyData {
	s.CasesUncompletedAfterAttempted = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetCompletionRate(v float32) *GetCampaignResponseBodyData {
	s.CompletionRate = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetContactFlowId(v string) *GetCampaignResponseBodyData {
	s.ContactFlowId = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetMaxAttemptCount(v int64) *GetCampaignResponseBodyData {
	s.MaxAttemptCount = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetMinAttemptInterval(v int64) *GetCampaignResponseBodyData {
	s.MinAttemptInterval = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetName(v string) *GetCampaignResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetPlanedEndTime(v int64) *GetCampaignResponseBodyData {
	s.PlanedEndTime = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetPlanedStartTime(v int64) *GetCampaignResponseBodyData {
	s.PlanedStartTime = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetQueueId(v string) *GetCampaignResponseBodyData {
	s.QueueId = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetQueueName(v string) *GetCampaignResponseBodyData {
	s.QueueName = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetSimulation(v bool) *GetCampaignResponseBodyData {
	s.Simulation = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetSimulationParameters(v string) *GetCampaignResponseBodyData {
	s.SimulationParameters = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetState(v string) *GetCampaignResponseBodyData {
	s.State = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetStrategyParameters(v string) *GetCampaignResponseBodyData {
	s.StrategyParameters = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetStrategyType(v string) *GetCampaignResponseBodyData {
	s.StrategyType = &v
	return s
}

func (s *GetCampaignResponseBodyData) SetTotalCases(v int64) *GetCampaignResponseBodyData {
	s.TotalCases = &v
	return s
}

type GetCampaignResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCampaignResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCampaignResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCampaignResponse) GoString() string {
	return s.String()
}

func (s *GetCampaignResponse) SetHeaders(v map[string]*string) *GetCampaignResponse {
	s.Headers = v
	return s
}

func (s *GetCampaignResponse) SetStatusCode(v int32) *GetCampaignResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCampaignResponse) SetBody(v *GetCampaignResponseBody) *GetCampaignResponse {
	s.Body = v
	return s
}

type GetCaseFileUploadUrlRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// case.csv
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetCaseFileUploadUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCaseFileUploadUrlRequest) GoString() string {
	return s.String()
}

func (s *GetCaseFileUploadUrlRequest) SetFileName(v string) *GetCaseFileUploadUrlRequest {
	s.FileName = &v
	return s
}

func (s *GetCaseFileUploadUrlRequest) SetInstanceId(v string) *GetCaseFileUploadUrlRequest {
	s.InstanceId = &v
	return s
}

type GetCaseFileUploadUrlResponseBody struct {
	// example:
	//
	// OK
	Code *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetCaseFileUploadUrlResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetCaseFileUploadUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCaseFileUploadUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetCaseFileUploadUrlResponseBody) SetCode(v string) *GetCaseFileUploadUrlResponseBody {
	s.Code = &v
	return s
}

func (s *GetCaseFileUploadUrlResponseBody) SetData(v *GetCaseFileUploadUrlResponseBodyData) *GetCaseFileUploadUrlResponseBody {
	s.Data = v
	return s
}

func (s *GetCaseFileUploadUrlResponseBody) SetHttpStatusCode(v int32) *GetCaseFileUploadUrlResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetCaseFileUploadUrlResponseBody) SetMessage(v string) *GetCaseFileUploadUrlResponseBody {
	s.Message = &v
	return s
}

func (s *GetCaseFileUploadUrlResponseBody) SetRequestId(v string) *GetCaseFileUploadUrlResponseBody {
	s.RequestId = &v
	return s
}

type GetCaseFileUploadUrlResponseBodyData struct {
	// example:
	//
	// ccc-test/namelist.csv
	CaseFileKey *string `json:"CaseFileKey,omitempty" xml:"CaseFileKey,omitempty"`
	// example:
	//
	// https://ccc-v2-online.oss-cn-shanghai.aliyuncs.com/ccc-test/namelist.csv?Expires=1642067227&OSSAccessKeyId=****&Signature=****
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetCaseFileUploadUrlResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCaseFileUploadUrlResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCaseFileUploadUrlResponseBodyData) SetCaseFileKey(v string) *GetCaseFileUploadUrlResponseBodyData {
	s.CaseFileKey = &v
	return s
}

func (s *GetCaseFileUploadUrlResponseBodyData) SetUrl(v string) *GetCaseFileUploadUrlResponseBodyData {
	s.Url = &v
	return s
}

type GetCaseFileUploadUrlResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCaseFileUploadUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCaseFileUploadUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCaseFileUploadUrlResponse) GoString() string {
	return s.String()
}

func (s *GetCaseFileUploadUrlResponse) SetHeaders(v map[string]*string) *GetCaseFileUploadUrlResponse {
	s.Headers = v
	return s
}

func (s *GetCaseFileUploadUrlResponse) SetStatusCode(v int32) *GetCaseFileUploadUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCaseFileUploadUrlResponse) SetBody(v *GetCaseFileUploadUrlResponseBody) *GetCaseFileUploadUrlResponse {
	s.Body = v
	return s
}

type GetContactFlowRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 274601be-a6d5-4429-bcef-32b51d031c6e
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 566399d7-5558-447c-a72f-9be2768b6a82
	DraftId *string `json:"DraftId,omitempty" xml:"DraftId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetContactFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContactFlowRequest) GoString() string {
	return s.String()
}

func (s *GetContactFlowRequest) SetContactFlowId(v string) *GetContactFlowRequest {
	s.ContactFlowId = &v
	return s
}

func (s *GetContactFlowRequest) SetDraftId(v string) *GetContactFlowRequest {
	s.DraftId = &v
	return s
}

func (s *GetContactFlowRequest) SetInstanceId(v string) *GetContactFlowRequest {
	s.InstanceId = &v
	return s
}

type GetContactFlowResponseBody struct {
	// example:
	//
	// OK
	Code *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetContactFlowResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2263B273-AC1B-44EB-BA98-87F2322C6780
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetContactFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetContactFlowResponseBody) GoString() string {
	return s.String()
}

func (s *GetContactFlowResponseBody) SetCode(v string) *GetContactFlowResponseBody {
	s.Code = &v
	return s
}

func (s *GetContactFlowResponseBody) SetData(v *GetContactFlowResponseBodyData) *GetContactFlowResponseBody {
	s.Data = v
	return s
}

func (s *GetContactFlowResponseBody) SetHttpStatusCode(v int32) *GetContactFlowResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetContactFlowResponseBody) SetMessage(v string) *GetContactFlowResponseBody {
	s.Message = &v
	return s
}

func (s *GetContactFlowResponseBody) SetRequestId(v string) *GetContactFlowResponseBody {
	s.RequestId = &v
	return s
}

type GetContactFlowResponseBodyData struct {
	// example:
	//
	// 274601be-a6d5-4429-bcef-32b51d031c6e
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// example:
	//
	// 2021-07-14 10:48:43.0
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Definition  *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	// example:
	//
	// 1.0
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 566399d7-5558-447c-a72f-9be2768b6a82
	DraftId *string `json:"DraftId,omitempty" xml:"DraftId,omitempty"`
	// example:
	//
	// editor-xxx
	Editor *string `json:"Editor,omitempty" xml:"Editor,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// False
	Published *bool `json:"Published,omitempty" xml:"Published,omitempty"`
	// example:
	//
	// MAIN_FLOW
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// 2021-07-14 10:48:43.0
	UpdatedTime *string `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
}

func (s GetContactFlowResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetContactFlowResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetContactFlowResponseBodyData) SetContactFlowId(v string) *GetContactFlowResponseBodyData {
	s.ContactFlowId = &v
	return s
}

func (s *GetContactFlowResponseBodyData) SetCreatedTime(v string) *GetContactFlowResponseBodyData {
	s.CreatedTime = &v
	return s
}

func (s *GetContactFlowResponseBodyData) SetDefinition(v string) *GetContactFlowResponseBodyData {
	s.Definition = &v
	return s
}

func (s *GetContactFlowResponseBodyData) SetDescription(v string) *GetContactFlowResponseBodyData {
	s.Description = &v
	return s
}

func (s *GetContactFlowResponseBodyData) SetDraftId(v string) *GetContactFlowResponseBodyData {
	s.DraftId = &v
	return s
}

func (s *GetContactFlowResponseBodyData) SetEditor(v string) *GetContactFlowResponseBodyData {
	s.Editor = &v
	return s
}

func (s *GetContactFlowResponseBodyData) SetInstanceId(v string) *GetContactFlowResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetContactFlowResponseBodyData) SetName(v string) *GetContactFlowResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetContactFlowResponseBodyData) SetPublished(v bool) *GetContactFlowResponseBodyData {
	s.Published = &v
	return s
}

func (s *GetContactFlowResponseBodyData) SetType(v string) *GetContactFlowResponseBodyData {
	s.Type = &v
	return s
}

func (s *GetContactFlowResponseBodyData) SetUpdatedTime(v string) *GetContactFlowResponseBodyData {
	s.UpdatedTime = &v
	return s
}

type GetContactFlowResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetContactFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetContactFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContactFlowResponse) GoString() string {
	return s.String()
}

func (s *GetContactFlowResponse) SetHeaders(v map[string]*string) *GetContactFlowResponse {
	s.Headers = v
	return s
}

func (s *GetContactFlowResponse) SetStatusCode(v int32) *GetContactFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *GetContactFlowResponse) SetBody(v *GetContactFlowResponseBody) *GetContactFlowResponse {
	s.Body = v
	return s
}

type GetConversationDetailRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// job-25884193037652****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetConversationDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConversationDetailRequest) GoString() string {
	return s.String()
}

func (s *GetConversationDetailRequest) SetContactId(v string) *GetConversationDetailRequest {
	s.ContactId = &v
	return s
}

func (s *GetConversationDetailRequest) SetInstanceId(v string) *GetConversationDetailRequest {
	s.InstanceId = &v
	return s
}

type GetConversationDetailResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32                                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	Phrases        []*GetConversationDetailResponseBodyPhrases `json:"Phrases,omitempty" xml:"Phrases,omitempty" type:"Repeated"`
	// example:
	//
	// 7E407F9B-A278-52A0-B193-3EE5471D7A87
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetConversationDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetConversationDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetConversationDetailResponseBody) SetCode(v string) *GetConversationDetailResponseBody {
	s.Code = &v
	return s
}

func (s *GetConversationDetailResponseBody) SetHttpStatusCode(v int32) *GetConversationDetailResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetConversationDetailResponseBody) SetMessage(v string) *GetConversationDetailResponseBody {
	s.Message = &v
	return s
}

func (s *GetConversationDetailResponseBody) SetPhrases(v []*GetConversationDetailResponseBodyPhrases) *GetConversationDetailResponseBody {
	s.Phrases = v
	return s
}

func (s *GetConversationDetailResponseBody) SetRequestId(v string) *GetConversationDetailResponseBody {
	s.RequestId = &v
	return s
}

type GetConversationDetailResponseBodyPhrases struct {
	// example:
	//
	// 240
	Begin *int32 `json:"Begin,omitempty" xml:"Begin,omitempty"`
	// example:
	//
	// 1280
	End *int32 `json:"End,omitempty" xml:"End,omitempty"`
	// example:
	//
	// agent@ccc-test
	Identity *string `json:"Identity,omitempty" xml:"Identity,omitempty"`
	Role     *string `json:"Role,omitempty" xml:"Role,omitempty"`
	Words    *string `json:"Words,omitempty" xml:"Words,omitempty"`
}

func (s GetConversationDetailResponseBodyPhrases) String() string {
	return tea.Prettify(s)
}

func (s GetConversationDetailResponseBodyPhrases) GoString() string {
	return s.String()
}

func (s *GetConversationDetailResponseBodyPhrases) SetBegin(v int32) *GetConversationDetailResponseBodyPhrases {
	s.Begin = &v
	return s
}

func (s *GetConversationDetailResponseBodyPhrases) SetEnd(v int32) *GetConversationDetailResponseBodyPhrases {
	s.End = &v
	return s
}

func (s *GetConversationDetailResponseBodyPhrases) SetIdentity(v string) *GetConversationDetailResponseBodyPhrases {
	s.Identity = &v
	return s
}

func (s *GetConversationDetailResponseBodyPhrases) SetRole(v string) *GetConversationDetailResponseBodyPhrases {
	s.Role = &v
	return s
}

func (s *GetConversationDetailResponseBodyPhrases) SetWords(v string) *GetConversationDetailResponseBodyPhrases {
	s.Words = &v
	return s
}

type GetConversationDetailResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetConversationDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetConversationDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConversationDetailResponse) GoString() string {
	return s.String()
}

func (s *GetConversationDetailResponse) SetHeaders(v map[string]*string) *GetConversationDetailResponse {
	s.Headers = v
	return s
}

func (s *GetConversationDetailResponse) SetStatusCode(v int32) *GetConversationDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetConversationDetailResponse) SetBody(v *GetConversationDetailResponseBody) *GetConversationDetailResponse {
	s.Body = v
	return s
}

type GetDataChannelCredentialsRequest struct {
	// This parameter is required.
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetDataChannelCredentialsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataChannelCredentialsRequest) GoString() string {
	return s.String()
}

func (s *GetDataChannelCredentialsRequest) SetDeviceId(v string) *GetDataChannelCredentialsRequest {
	s.DeviceId = &v
	return s
}

func (s *GetDataChannelCredentialsRequest) SetInstanceId(v string) *GetDataChannelCredentialsRequest {
	s.InstanceId = &v
	return s
}

type GetDataChannelCredentialsResponseBody struct {
	Code           *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *GetDataChannelCredentialsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                                     `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string                                  `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	RequestId      *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDataChannelCredentialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataChannelCredentialsResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataChannelCredentialsResponseBody) SetCode(v string) *GetDataChannelCredentialsResponseBody {
	s.Code = &v
	return s
}

func (s *GetDataChannelCredentialsResponseBody) SetData(v *GetDataChannelCredentialsResponseBodyData) *GetDataChannelCredentialsResponseBody {
	s.Data = v
	return s
}

func (s *GetDataChannelCredentialsResponseBody) SetHttpStatusCode(v int32) *GetDataChannelCredentialsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetDataChannelCredentialsResponseBody) SetMessage(v string) *GetDataChannelCredentialsResponseBody {
	s.Message = &v
	return s
}

func (s *GetDataChannelCredentialsResponseBody) SetParams(v []*string) *GetDataChannelCredentialsResponseBody {
	s.Params = v
	return s
}

func (s *GetDataChannelCredentialsResponseBody) SetRequestId(v string) *GetDataChannelCredentialsResponseBody {
	s.RequestId = &v
	return s
}

type GetDataChannelCredentialsResponseBodyData struct {
	ClientId    *string `json:"ClientId,omitempty" xml:"ClientId,omitempty"`
	DeviceId    *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	Endpoint    *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	ExpiredTime *int64  `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	Password    *string `json:"Password,omitempty" xml:"Password,omitempty"`
	Topic       *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	UserName    *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s GetDataChannelCredentialsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDataChannelCredentialsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDataChannelCredentialsResponseBodyData) SetClientId(v string) *GetDataChannelCredentialsResponseBodyData {
	s.ClientId = &v
	return s
}

func (s *GetDataChannelCredentialsResponseBodyData) SetDeviceId(v string) *GetDataChannelCredentialsResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *GetDataChannelCredentialsResponseBodyData) SetEndpoint(v string) *GetDataChannelCredentialsResponseBodyData {
	s.Endpoint = &v
	return s
}

func (s *GetDataChannelCredentialsResponseBodyData) SetExpiredTime(v int64) *GetDataChannelCredentialsResponseBodyData {
	s.ExpiredTime = &v
	return s
}

func (s *GetDataChannelCredentialsResponseBodyData) SetPassword(v string) *GetDataChannelCredentialsResponseBodyData {
	s.Password = &v
	return s
}

func (s *GetDataChannelCredentialsResponseBodyData) SetTopic(v string) *GetDataChannelCredentialsResponseBodyData {
	s.Topic = &v
	return s
}

func (s *GetDataChannelCredentialsResponseBodyData) SetUserName(v string) *GetDataChannelCredentialsResponseBodyData {
	s.UserName = &v
	return s
}

type GetDataChannelCredentialsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDataChannelCredentialsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDataChannelCredentialsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataChannelCredentialsResponse) GoString() string {
	return s.String()
}

func (s *GetDataChannelCredentialsResponse) SetHeaders(v map[string]*string) *GetDataChannelCredentialsResponse {
	s.Headers = v
	return s
}

func (s *GetDataChannelCredentialsResponse) SetStatusCode(v int32) *GetDataChannelCredentialsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDataChannelCredentialsResponse) SetBody(v *GetDataChannelCredentialsResponseBody) *GetDataChannelCredentialsResponse {
	s.Body = v
	return s
}

type GetDoNotCallFileUploadParametersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// blacklist.xlsx
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetDoNotCallFileUploadParametersRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDoNotCallFileUploadParametersRequest) GoString() string {
	return s.String()
}

func (s *GetDoNotCallFileUploadParametersRequest) SetFileName(v string) *GetDoNotCallFileUploadParametersRequest {
	s.FileName = &v
	return s
}

func (s *GetDoNotCallFileUploadParametersRequest) SetInstanceId(v string) *GetDoNotCallFileUploadParametersRequest {
	s.InstanceId = &v
	return s
}

type GetDoNotCallFileUploadParametersResponseBody struct {
	// example:
	//
	// OK
	Code *string                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetDoNotCallFileUploadParametersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDoNotCallFileUploadParametersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDoNotCallFileUploadParametersResponseBody) GoString() string {
	return s.String()
}

func (s *GetDoNotCallFileUploadParametersResponseBody) SetCode(v string) *GetDoNotCallFileUploadParametersResponseBody {
	s.Code = &v
	return s
}

func (s *GetDoNotCallFileUploadParametersResponseBody) SetData(v *GetDoNotCallFileUploadParametersResponseBodyData) *GetDoNotCallFileUploadParametersResponseBody {
	s.Data = v
	return s
}

func (s *GetDoNotCallFileUploadParametersResponseBody) SetHttpStatusCode(v int32) *GetDoNotCallFileUploadParametersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetDoNotCallFileUploadParametersResponseBody) SetMessage(v string) *GetDoNotCallFileUploadParametersResponseBody {
	s.Message = &v
	return s
}

func (s *GetDoNotCallFileUploadParametersResponseBody) SetRequestId(v string) *GetDoNotCallFileUploadParametersResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDoNotCallFileUploadParametersResponseBody) SetSuccess(v bool) *GetDoNotCallFileUploadParametersResponseBody {
	s.Success = &v
	return s
}

type GetDoNotCallFileUploadParametersResponseBodyData struct {
	// example:
	//
	// ****
	AccessKeyId *string `json:"AccessKeyId,omitempty" xml:"AccessKeyId,omitempty"`
	// example:
	//
	// 1647313420
	ExpireTime *int32 `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// example:
	//
	// ccc-test/blacklist.xlsx
	FilePath *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	// example:
	//
	// https://ccc-v2-online.oss-cn-shanghai.aliyuncs.com
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	// example:
	//
	// eyJleHBpcmF0aW9uIjoiMjAyMi0wMy0xNVQwMzowMzo0MC4zMTJaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjBdLFsic3RhcnRzLXdpdGgiLCIka2V5IiwidGVtcC9ibGFja2xpc3QvaW1wb3J0LzE1NzcyNDcxMTU0OTA0MDEvY2NjVjIta216LzIwMjIE1MTAwMzQwLyJd****
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// example:
	//
	// zi31STIMtIfa/UN2l+6lww****
	Signature *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
}

func (s GetDoNotCallFileUploadParametersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDoNotCallFileUploadParametersResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDoNotCallFileUploadParametersResponseBodyData) SetAccessKeyId(v string) *GetDoNotCallFileUploadParametersResponseBodyData {
	s.AccessKeyId = &v
	return s
}

func (s *GetDoNotCallFileUploadParametersResponseBodyData) SetExpireTime(v int32) *GetDoNotCallFileUploadParametersResponseBodyData {
	s.ExpireTime = &v
	return s
}

func (s *GetDoNotCallFileUploadParametersResponseBodyData) SetFilePath(v string) *GetDoNotCallFileUploadParametersResponseBodyData {
	s.FilePath = &v
	return s
}

func (s *GetDoNotCallFileUploadParametersResponseBodyData) SetHost(v string) *GetDoNotCallFileUploadParametersResponseBodyData {
	s.Host = &v
	return s
}

func (s *GetDoNotCallFileUploadParametersResponseBodyData) SetPolicy(v string) *GetDoNotCallFileUploadParametersResponseBodyData {
	s.Policy = &v
	return s
}

func (s *GetDoNotCallFileUploadParametersResponseBodyData) SetSignature(v string) *GetDoNotCallFileUploadParametersResponseBodyData {
	s.Signature = &v
	return s
}

type GetDoNotCallFileUploadParametersResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDoNotCallFileUploadParametersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDoNotCallFileUploadParametersResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDoNotCallFileUploadParametersResponse) GoString() string {
	return s.String()
}

func (s *GetDoNotCallFileUploadParametersResponse) SetHeaders(v map[string]*string) *GetDoNotCallFileUploadParametersResponse {
	s.Headers = v
	return s
}

func (s *GetDoNotCallFileUploadParametersResponse) SetStatusCode(v int32) *GetDoNotCallFileUploadParametersResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDoNotCallFileUploadParametersResponse) SetBody(v *GetDoNotCallFileUploadParametersResponseBody) *GetDoNotCallFileUploadParametersResponse {
	s.Body = v
	return s
}

type GetDocumentUploadParametersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// blacklist.xlsx
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 9cfad875-6260-4a53-ab6e-b13e3fb31f7d
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 24BE19E8-BF7D-4992-A35E-15EBA874F2E5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDocumentUploadParametersRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDocumentUploadParametersRequest) GoString() string {
	return s.String()
}

func (s *GetDocumentUploadParametersRequest) SetFileName(v string) *GetDocumentUploadParametersRequest {
	s.FileName = &v
	return s
}

func (s *GetDocumentUploadParametersRequest) SetInstanceId(v string) *GetDocumentUploadParametersRequest {
	s.InstanceId = &v
	return s
}

func (s *GetDocumentUploadParametersRequest) SetRequestId(v string) *GetDocumentUploadParametersRequest {
	s.RequestId = &v
	return s
}

type GetDocumentUploadParametersResponseBody struct {
	// example:
	//
	// OK
	Code *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetDocumentUploadParametersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 9FBA26B0-462B-4D77-B78F-AF35560DBC71
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDocumentUploadParametersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDocumentUploadParametersResponseBody) GoString() string {
	return s.String()
}

func (s *GetDocumentUploadParametersResponseBody) SetCode(v string) *GetDocumentUploadParametersResponseBody {
	s.Code = &v
	return s
}

func (s *GetDocumentUploadParametersResponseBody) SetData(v *GetDocumentUploadParametersResponseBodyData) *GetDocumentUploadParametersResponseBody {
	s.Data = v
	return s
}

func (s *GetDocumentUploadParametersResponseBody) SetHttpStatusCode(v int32) *GetDocumentUploadParametersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetDocumentUploadParametersResponseBody) SetMessage(v string) *GetDocumentUploadParametersResponseBody {
	s.Message = &v
	return s
}

func (s *GetDocumentUploadParametersResponseBody) SetParams(v []*string) *GetDocumentUploadParametersResponseBody {
	s.Params = v
	return s
}

func (s *GetDocumentUploadParametersResponseBody) SetRequestId(v string) *GetDocumentUploadParametersResponseBody {
	s.RequestId = &v
	return s
}

type GetDocumentUploadParametersResponseBodyData struct {
	// example:
	//
	// ****
	AccessKeyId *string `json:"AccessKeyId,omitempty" xml:"AccessKeyId,omitempty"`
	// example:
	//
	// 1647313420
	ExpireTime *int32 `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// example:
	//
	// ccc-test/blacklist.xlsx
	FilePath *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	// oss host
	//
	// example:
	//
	// https://ccc-v2-online.oss-cn-shanghai.aliyuncs.com
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	// example:
	//
	// Permit
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// example:
	//
	// zi31STIMtIfa/UN2l+6lww****
	Signature *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
}

func (s GetDocumentUploadParametersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDocumentUploadParametersResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDocumentUploadParametersResponseBodyData) SetAccessKeyId(v string) *GetDocumentUploadParametersResponseBodyData {
	s.AccessKeyId = &v
	return s
}

func (s *GetDocumentUploadParametersResponseBodyData) SetExpireTime(v int32) *GetDocumentUploadParametersResponseBodyData {
	s.ExpireTime = &v
	return s
}

func (s *GetDocumentUploadParametersResponseBodyData) SetFilePath(v string) *GetDocumentUploadParametersResponseBodyData {
	s.FilePath = &v
	return s
}

func (s *GetDocumentUploadParametersResponseBodyData) SetHost(v string) *GetDocumentUploadParametersResponseBodyData {
	s.Host = &v
	return s
}

func (s *GetDocumentUploadParametersResponseBodyData) SetPolicy(v string) *GetDocumentUploadParametersResponseBodyData {
	s.Policy = &v
	return s
}

func (s *GetDocumentUploadParametersResponseBodyData) SetSignature(v string) *GetDocumentUploadParametersResponseBodyData {
	s.Signature = &v
	return s
}

type GetDocumentUploadParametersResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDocumentUploadParametersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDocumentUploadParametersResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDocumentUploadParametersResponse) GoString() string {
	return s.String()
}

func (s *GetDocumentUploadParametersResponse) SetHeaders(v map[string]*string) *GetDocumentUploadParametersResponse {
	s.Headers = v
	return s
}

func (s *GetDocumentUploadParametersResponse) SetStatusCode(v int32) *GetDocumentUploadParametersResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDocumentUploadParametersResponse) SetBody(v *GetDocumentUploadParametersResponseBody) *GetDocumentUploadParametersResponse {
	s.Body = v
	return s
}

type GetEarlyMediaRecordingRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// job-6538214103689****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetEarlyMediaRecordingRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEarlyMediaRecordingRequest) GoString() string {
	return s.String()
}

func (s *GetEarlyMediaRecordingRequest) SetContactId(v string) *GetEarlyMediaRecordingRequest {
	s.ContactId = &v
	return s
}

func (s *GetEarlyMediaRecordingRequest) SetInstanceId(v string) *GetEarlyMediaRecordingRequest {
	s.InstanceId = &v
	return s
}

type GetEarlyMediaRecordingResponseBody struct {
	// example:
	//
	// OK
	Code *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetEarlyMediaRecordingResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 03C67DAD-EB26-41D8-949D-9B0C470FB716
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetEarlyMediaRecordingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEarlyMediaRecordingResponseBody) GoString() string {
	return s.String()
}

func (s *GetEarlyMediaRecordingResponseBody) SetCode(v string) *GetEarlyMediaRecordingResponseBody {
	s.Code = &v
	return s
}

func (s *GetEarlyMediaRecordingResponseBody) SetData(v *GetEarlyMediaRecordingResponseBodyData) *GetEarlyMediaRecordingResponseBody {
	s.Data = v
	return s
}

func (s *GetEarlyMediaRecordingResponseBody) SetHttpStatusCode(v int32) *GetEarlyMediaRecordingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetEarlyMediaRecordingResponseBody) SetMessage(v string) *GetEarlyMediaRecordingResponseBody {
	s.Message = &v
	return s
}

func (s *GetEarlyMediaRecordingResponseBody) SetRequestId(v string) *GetEarlyMediaRecordingResponseBody {
	s.RequestId = &v
	return s
}

type GetEarlyMediaRecordingResponseBodyData struct {
	// example:
	//
	// job-6538214103689****-earlyMedia..wav
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// https://ccc-v2-online.oss-cn-shanghai.aliyuncs.com/ccc-record-mixed/ccc-test/2022/06/voicemail.job-054ded02****.wav?Expires=1656074923&OSSAccessKeyId=****&Signature=****
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
}

func (s GetEarlyMediaRecordingResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetEarlyMediaRecordingResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetEarlyMediaRecordingResponseBodyData) SetFileName(v string) *GetEarlyMediaRecordingResponseBodyData {
	s.FileName = &v
	return s
}

func (s *GetEarlyMediaRecordingResponseBodyData) SetFileUrl(v string) *GetEarlyMediaRecordingResponseBodyData {
	s.FileUrl = &v
	return s
}

type GetEarlyMediaRecordingResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEarlyMediaRecordingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEarlyMediaRecordingResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEarlyMediaRecordingResponse) GoString() string {
	return s.String()
}

func (s *GetEarlyMediaRecordingResponse) SetHeaders(v map[string]*string) *GetEarlyMediaRecordingResponse {
	s.Headers = v
	return s
}

func (s *GetEarlyMediaRecordingResponse) SetStatusCode(v int32) *GetEarlyMediaRecordingResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEarlyMediaRecordingResponse) SetBody(v *GetEarlyMediaRecordingResponseBody) *GetEarlyMediaRecordingResponse {
	s.Body = v
	return s
}

type GetHistoricalCallerReportRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1900000****
	CallingNumber *string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1646841600000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1646928000000
	StopTime *int64 `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
}

func (s GetHistoricalCallerReportRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalCallerReportRequest) GoString() string {
	return s.String()
}

func (s *GetHistoricalCallerReportRequest) SetCallingNumber(v string) *GetHistoricalCallerReportRequest {
	s.CallingNumber = &v
	return s
}

func (s *GetHistoricalCallerReportRequest) SetInstanceId(v string) *GetHistoricalCallerReportRequest {
	s.InstanceId = &v
	return s
}

func (s *GetHistoricalCallerReportRequest) SetStartTime(v int64) *GetHistoricalCallerReportRequest {
	s.StartTime = &v
	return s
}

func (s *GetHistoricalCallerReportRequest) SetStopTime(v int64) *GetHistoricalCallerReportRequest {
	s.StopTime = &v
	return s
}

type GetHistoricalCallerReportResponseBody struct {
	// example:
	//
	// OK
	Code *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetHistoricalCallerReportResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetHistoricalCallerReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalCallerReportResponseBody) GoString() string {
	return s.String()
}

func (s *GetHistoricalCallerReportResponseBody) SetCode(v string) *GetHistoricalCallerReportResponseBody {
	s.Code = &v
	return s
}

func (s *GetHistoricalCallerReportResponseBody) SetData(v *GetHistoricalCallerReportResponseBodyData) *GetHistoricalCallerReportResponseBody {
	s.Data = v
	return s
}

func (s *GetHistoricalCallerReportResponseBody) SetHttpStatusCode(v int32) *GetHistoricalCallerReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetHistoricalCallerReportResponseBody) SetMessage(v string) *GetHistoricalCallerReportResponseBody {
	s.Message = &v
	return s
}

func (s *GetHistoricalCallerReportResponseBody) SetRequestId(v string) *GetHistoricalCallerReportResponseBody {
	s.RequestId = &v
	return s
}

type GetHistoricalCallerReportResponseBodyData struct {
	// example:
	//
	// 1646917200000
	LastCallingTime *int64 `json:"LastCallingTime,omitempty" xml:"LastCallingTime,omitempty"`
	// example:
	//
	// 10
	TotalCalls *int64 `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
}

func (s GetHistoricalCallerReportResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalCallerReportResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetHistoricalCallerReportResponseBodyData) SetLastCallingTime(v int64) *GetHistoricalCallerReportResponseBodyData {
	s.LastCallingTime = &v
	return s
}

func (s *GetHistoricalCallerReportResponseBodyData) SetTotalCalls(v int64) *GetHistoricalCallerReportResponseBodyData {
	s.TotalCalls = &v
	return s
}

type GetHistoricalCallerReportResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetHistoricalCallerReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetHistoricalCallerReportResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalCallerReportResponse) GoString() string {
	return s.String()
}

func (s *GetHistoricalCallerReportResponse) SetHeaders(v map[string]*string) *GetHistoricalCallerReportResponse {
	s.Headers = v
	return s
}

func (s *GetHistoricalCallerReportResponse) SetStatusCode(v int32) *GetHistoricalCallerReportResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHistoricalCallerReportResponse) SetBody(v *GetHistoricalCallerReportResponseBody) *GetHistoricalCallerReportResponse {
	s.Body = v
	return s
}

type GetHistoricalCampaignReportRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 4fc85829-f6fc-476e-9c0d-c350184e36f1
	CampaignId *string `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetHistoricalCampaignReportRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalCampaignReportRequest) GoString() string {
	return s.String()
}

func (s *GetHistoricalCampaignReportRequest) SetCampaignId(v string) *GetHistoricalCampaignReportRequest {
	s.CampaignId = &v
	return s
}

func (s *GetHistoricalCampaignReportRequest) SetInstanceId(v string) *GetHistoricalCampaignReportRequest {
	s.InstanceId = &v
	return s
}

type GetHistoricalCampaignReportResponseBody struct {
	// example:
	//
	// OK
	Code *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetHistoricalCampaignReportResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// E3A847C1-9800-57DF-9172-2CDDC026388D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetHistoricalCampaignReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalCampaignReportResponseBody) GoString() string {
	return s.String()
}

func (s *GetHistoricalCampaignReportResponseBody) SetCode(v string) *GetHistoricalCampaignReportResponseBody {
	s.Code = &v
	return s
}

func (s *GetHistoricalCampaignReportResponseBody) SetData(v *GetHistoricalCampaignReportResponseBodyData) *GetHistoricalCampaignReportResponseBody {
	s.Data = v
	return s
}

func (s *GetHistoricalCampaignReportResponseBody) SetHttpStatusCode(v int32) *GetHistoricalCampaignReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetHistoricalCampaignReportResponseBody) SetMessage(v string) *GetHistoricalCampaignReportResponseBody {
	s.Message = &v
	return s
}

func (s *GetHistoricalCampaignReportResponseBody) SetRequestId(v string) *GetHistoricalCampaignReportResponseBody {
	s.RequestId = &v
	return s
}

type GetHistoricalCampaignReportResponseBodyData struct {
	AbandonRate *float32 `json:"AbandonRate,omitempty" xml:"AbandonRate,omitempty"`
	// example:
	//
	// 0.10
	AbandonedRate *float32 `json:"AbandonedRate,omitempty" xml:"AbandonedRate,omitempty"`
	AnswerRate    *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	// example:
	//
	// 5
	CallsAbandoned *int64 `json:"CallsAbandoned,omitempty" xml:"CallsAbandoned,omitempty"`
	// example:
	//
	// 50
	CallsConnected *int64 `json:"CallsConnected,omitempty" xml:"CallsConnected,omitempty"`
	// example:
	//
	// 100
	CallsDialed *int64 `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	// example:
	//
	// 0.50
	ConnectedRate *float32 `json:"ConnectedRate,omitempty" xml:"ConnectedRate,omitempty"`
	// example:
	//
	// 0.50
	OccupancyRate *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
}

func (s GetHistoricalCampaignReportResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalCampaignReportResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetHistoricalCampaignReportResponseBodyData) SetAbandonRate(v float32) *GetHistoricalCampaignReportResponseBodyData {
	s.AbandonRate = &v
	return s
}

func (s *GetHistoricalCampaignReportResponseBodyData) SetAbandonedRate(v float32) *GetHistoricalCampaignReportResponseBodyData {
	s.AbandonedRate = &v
	return s
}

func (s *GetHistoricalCampaignReportResponseBodyData) SetAnswerRate(v float32) *GetHistoricalCampaignReportResponseBodyData {
	s.AnswerRate = &v
	return s
}

func (s *GetHistoricalCampaignReportResponseBodyData) SetCallsAbandoned(v int64) *GetHistoricalCampaignReportResponseBodyData {
	s.CallsAbandoned = &v
	return s
}

func (s *GetHistoricalCampaignReportResponseBodyData) SetCallsConnected(v int64) *GetHistoricalCampaignReportResponseBodyData {
	s.CallsConnected = &v
	return s
}

func (s *GetHistoricalCampaignReportResponseBodyData) SetCallsDialed(v int64) *GetHistoricalCampaignReportResponseBodyData {
	s.CallsDialed = &v
	return s
}

func (s *GetHistoricalCampaignReportResponseBodyData) SetConnectedRate(v float32) *GetHistoricalCampaignReportResponseBodyData {
	s.ConnectedRate = &v
	return s
}

func (s *GetHistoricalCampaignReportResponseBodyData) SetOccupancyRate(v float32) *GetHistoricalCampaignReportResponseBodyData {
	s.OccupancyRate = &v
	return s
}

type GetHistoricalCampaignReportResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetHistoricalCampaignReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetHistoricalCampaignReportResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalCampaignReportResponse) GoString() string {
	return s.String()
}

func (s *GetHistoricalCampaignReportResponse) SetHeaders(v map[string]*string) *GetHistoricalCampaignReportResponse {
	s.Headers = v
	return s
}

func (s *GetHistoricalCampaignReportResponse) SetStatusCode(v int32) *GetHistoricalCampaignReportResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHistoricalCampaignReportResponse) SetBody(v *GetHistoricalCampaignReportResponseBody) *GetHistoricalCampaignReportResponse {
	s.Body = v
	return s
}

type GetHistoricalInstanceReportRequest struct {
	// example:
	//
	// 1532707199000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MediaType  *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 1532448000000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetHistoricalInstanceReportRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalInstanceReportRequest) GoString() string {
	return s.String()
}

func (s *GetHistoricalInstanceReportRequest) SetEndTime(v int64) *GetHistoricalInstanceReportRequest {
	s.EndTime = &v
	return s
}

func (s *GetHistoricalInstanceReportRequest) SetInstanceId(v string) *GetHistoricalInstanceReportRequest {
	s.InstanceId = &v
	return s
}

func (s *GetHistoricalInstanceReportRequest) SetMediaType(v string) *GetHistoricalInstanceReportRequest {
	s.MediaType = &v
	return s
}

func (s *GetHistoricalInstanceReportRequest) SetStartTime(v int64) *GetHistoricalInstanceReportRequest {
	s.StartTime = &v
	return s
}

type GetHistoricalInstanceReportResponseBody struct {
	// example:
	//
	// OK
	Code *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetHistoricalInstanceReportResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 943D8EF3-3321-471F-A104-51C96FCA94D6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetHistoricalInstanceReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalInstanceReportResponseBody) GoString() string {
	return s.String()
}

func (s *GetHistoricalInstanceReportResponseBody) SetCode(v string) *GetHistoricalInstanceReportResponseBody {
	s.Code = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBody) SetData(v *GetHistoricalInstanceReportResponseBodyData) *GetHistoricalInstanceReportResponseBody {
	s.Data = v
	return s
}

func (s *GetHistoricalInstanceReportResponseBody) SetHttpStatusCode(v int32) *GetHistoricalInstanceReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBody) SetMessage(v string) *GetHistoricalInstanceReportResponseBody {
	s.Message = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBody) SetRequestId(v string) *GetHistoricalInstanceReportResponseBody {
	s.RequestId = &v
	return s
}

type GetHistoricalInstanceReportResponseBodyData struct {
	Inbound  *GetHistoricalInstanceReportResponseBodyDataInbound  `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	Internal *GetHistoricalInstanceReportResponseBodyDataInternal `json:"Internal,omitempty" xml:"Internal,omitempty" type:"Struct"`
	Outbound *GetHistoricalInstanceReportResponseBodyDataOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall  *GetHistoricalInstanceReportResponseBodyDataOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
}

func (s GetHistoricalInstanceReportResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalInstanceReportResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetHistoricalInstanceReportResponseBodyData) SetInbound(v *GetHistoricalInstanceReportResponseBodyDataInbound) *GetHistoricalInstanceReportResponseBodyData {
	s.Inbound = v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyData) SetInternal(v *GetHistoricalInstanceReportResponseBodyDataInternal) *GetHistoricalInstanceReportResponseBodyData {
	s.Internal = v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyData) SetOutbound(v *GetHistoricalInstanceReportResponseBodyDataOutbound) *GetHistoricalInstanceReportResponseBodyData {
	s.Outbound = v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyData) SetOverall(v *GetHistoricalInstanceReportResponseBodyDataOverall) *GetHistoricalInstanceReportResponseBodyData {
	s.Overall = v
	return s
}

type GetHistoricalInstanceReportResponseBodyDataInbound struct {
	// example:
	//
	// 0
	AbandonRate                 *float32                                                                         `json:"AbandonRate,omitempty" xml:"AbandonRate,omitempty"`
	AccessChannelTypeDetailList []*GetHistoricalInstanceReportResponseBodyDataInboundAccessChannelTypeDetailList `json:"AccessChannelTypeDetailList,omitempty" xml:"AccessChannelTypeDetailList,omitempty" type:"Repeated"`
	// example:
	//
	// 0
	AverageAbandonTime *float32 `json:"AverageAbandonTime,omitempty" xml:"AverageAbandonTime,omitempty"`
	// example:
	//
	// 0
	AverageAbandonedInIVRTime *float32 `json:"AverageAbandonedInIVRTime,omitempty" xml:"AverageAbandonedInIVRTime,omitempty"`
	// example:
	//
	// 0
	AverageAbandonedInQueueTime *float32 `json:"AverageAbandonedInQueueTime,omitempty" xml:"AverageAbandonedInQueueTime,omitempty"`
	// example:
	//
	// 0
	AverageAbandonedInRingTime *float32 `json:"AverageAbandonedInRingTime,omitempty" xml:"AverageAbandonedInRingTime,omitempty"`
	AverageFirstResponseTime   *float32 `json:"AverageFirstResponseTime,omitempty" xml:"AverageFirstResponseTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime     *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	AverageResponseTime *float32 `json:"AverageResponseTime,omitempty" xml:"AverageResponseTime,omitempty"`
	// example:
	//
	// 0
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 0
	AverageWaitTime *float32 `json:"AverageWaitTime,omitempty" xml:"AverageWaitTime,omitempty"`
	// example:
	//
	// 0
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 0
	CallsAbandoned *int64 `json:"CallsAbandoned,omitempty" xml:"CallsAbandoned,omitempty"`
	// example:
	//
	// 0
	CallsAbandonedInIVR *int64 `json:"CallsAbandonedInIVR,omitempty" xml:"CallsAbandonedInIVR,omitempty"`
	// example:
	//
	// 0
	CallsAbandonedInQueue *int64 `json:"CallsAbandonedInQueue,omitempty" xml:"CallsAbandonedInQueue,omitempty"`
	// example:
	//
	// 0
	CallsAbandonedInRing *int64 `json:"CallsAbandonedInRing,omitempty" xml:"CallsAbandonedInRing,omitempty"`
	// example:
	//
	// 0
	CallsAbandonedInVoiceNavigator *int64 `json:"CallsAbandonedInVoiceNavigator,omitempty" xml:"CallsAbandonedInVoiceNavigator,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferred *int64 `json:"CallsAttendedTransferred,omitempty" xml:"CallsAttendedTransferred,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferred   *int64 `json:"CallsBlindTransferred,omitempty" xml:"CallsBlindTransferred,omitempty"`
	CallsCausedIVRException *int64 `json:"CallsCausedIVRException,omitempty" xml:"CallsCausedIVRException,omitempty"`
	// example:
	//
	// 0
	CallsForwardToOutsideNumber *int64 `json:"CallsForwardToOutsideNumber,omitempty" xml:"CallsForwardToOutsideNumber,omitempty"`
	// example:
	//
	// 0
	CallsHandled *int64 `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	// example:
	//
	// 0
	CallsHold *int64 `json:"CallsHold,omitempty" xml:"CallsHold,omitempty"`
	// example:
	//
	// 0
	CallsIVRException *int64 `json:"CallsIVRException,omitempty" xml:"CallsIVRException,omitempty"`
	// example:
	//
	// 0
	CallsOffered *int64 `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	// example:
	//
	// 0
	CallsQueued *int64 `json:"CallsQueued,omitempty" xml:"CallsQueued,omitempty"`
	// example:
	//
	// 0
	CallsQueuingFailed *int64 `json:"CallsQueuingFailed,omitempty" xml:"CallsQueuingFailed,omitempty"`
	// example:
	//
	// 0
	CallsQueuingOverflow *int64 `json:"CallsQueuingOverflow,omitempty" xml:"CallsQueuingOverflow,omitempty"`
	// example:
	//
	// 0
	CallsQueuingTimeout *int64 `json:"CallsQueuingTimeout,omitempty" xml:"CallsQueuingTimeout,omitempty"`
	// example:
	//
	// 0
	CallsRinged      *int64 `json:"CallsRinged,omitempty" xml:"CallsRinged,omitempty"`
	CallsToVoicemail *int64 `json:"CallsToVoicemail,omitempty" xml:"CallsToVoicemail,omitempty"`
	// example:
	//
	// 0
	CallsVoicemail *int64 `json:"CallsVoicemail,omitempty" xml:"CallsVoicemail,omitempty"`
	// example:
	//
	// 0
	HandleRate *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	// example:
	//
	// 0
	MaxAbandonTime *int64 `json:"MaxAbandonTime,omitempty" xml:"MaxAbandonTime,omitempty"`
	// example:
	//
	// 100
	MaxAbandonedInIVRTime *int64 `json:"MaxAbandonedInIVRTime,omitempty" xml:"MaxAbandonedInIVRTime,omitempty"`
	// example:
	//
	// 0
	MaxAbandonedInQueueTime *int64 `json:"MaxAbandonedInQueueTime,omitempty" xml:"MaxAbandonedInQueueTime,omitempty"`
	// example:
	//
	// 0
	MaxAbandonedInRingTime *int64 `json:"MaxAbandonedInRingTime,omitempty" xml:"MaxAbandonedInRingTime,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 0
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 0
	MaxWaitTime *int64 `json:"MaxWaitTime,omitempty" xml:"MaxWaitTime,omitempty"`
	// example:
	//
	// 0
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	ServiceLevel15               *float32 `json:"ServiceLevel15,omitempty" xml:"ServiceLevel15,omitempty"`
	// example:
	//
	// 0
	ServiceLevel20 *float32 `json:"ServiceLevel20,omitempty" xml:"ServiceLevel20,omitempty"`
	ServiceLevel30 *float32 `json:"ServiceLevel30,omitempty" xml:"ServiceLevel30,omitempty"`
	// example:
	//
	// 0
	TotalAbandonTime *int64 `json:"TotalAbandonTime,omitempty" xml:"TotalAbandonTime,omitempty"`
	// example:
	//
	// 0
	TotalAbandonedInIVRTime *int64 `json:"TotalAbandonedInIVRTime,omitempty" xml:"TotalAbandonedInIVRTime,omitempty"`
	// example:
	//
	// 0
	TotalAbandonedInQueueTime *int64 `json:"TotalAbandonedInQueueTime,omitempty" xml:"TotalAbandonedInQueueTime,omitempty"`
	// example:
	//
	// 0
	TotalAbandonedInRingTime *int64 `json:"TotalAbandonedInRingTime,omitempty" xml:"TotalAbandonedInRingTime,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime               *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	TotalMessagesSent           *int64 `json:"TotalMessagesSent,omitempty" xml:"TotalMessagesSent,omitempty"`
	TotalMessagesSentByAgent    *int64 `json:"TotalMessagesSentByAgent,omitempty" xml:"TotalMessagesSentByAgent,omitempty"`
	TotalMessagesSentByCustomer *int64 `json:"TotalMessagesSentByCustomer,omitempty" xml:"TotalMessagesSentByCustomer,omitempty"`
	// example:
	//
	// 0
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 0
	TotalWaitTime *int64 `json:"TotalWaitTime,omitempty" xml:"TotalWaitTime,omitempty"`
	// example:
	//
	// 0
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GetHistoricalInstanceReportResponseBodyDataInbound) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalInstanceReportResponseBodyDataInbound) GoString() string {
	return s.String()
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetAbandonRate(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.AbandonRate = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetAccessChannelTypeDetailList(v []*GetHistoricalInstanceReportResponseBodyDataInboundAccessChannelTypeDetailList) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.AccessChannelTypeDetailList = v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetAverageAbandonTime(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.AverageAbandonTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetAverageAbandonedInIVRTime(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.AverageAbandonedInIVRTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetAverageAbandonedInQueueTime(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.AverageAbandonedInQueueTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetAverageAbandonedInRingTime(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.AverageAbandonedInRingTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetAverageFirstResponseTime(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.AverageFirstResponseTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetAverageHoldTime(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.AverageHoldTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetAverageResponseTime(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.AverageResponseTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetAverageRingTime(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.AverageRingTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetAverageTalkTime(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetAverageWaitTime(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.AverageWaitTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetAverageWorkTime(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsAbandoned(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsAbandoned = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsAbandonedInIVR(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsAbandonedInIVR = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsAbandonedInQueue(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsAbandonedInQueue = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsAbandonedInRing(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsAbandonedInRing = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsAbandonedInVoiceNavigator(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsAbandonedInVoiceNavigator = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsAttendedTransferred(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsAttendedTransferred = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsBlindTransferred(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsBlindTransferred = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsCausedIVRException(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsCausedIVRException = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsForwardToOutsideNumber(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsForwardToOutsideNumber = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsHandled(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsHandled = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsHold(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsHold = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsIVRException(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsIVRException = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsOffered(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsOffered = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsQueued(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsQueued = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsQueuingFailed(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsQueuingFailed = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsQueuingOverflow(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsQueuingOverflow = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsQueuingTimeout(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsQueuingTimeout = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsRinged(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsRinged = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsToVoicemail(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsToVoicemail = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetCallsVoicemail(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.CallsVoicemail = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetHandleRate(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.HandleRate = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetMaxAbandonTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.MaxAbandonTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetMaxAbandonedInIVRTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.MaxAbandonedInIVRTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetMaxAbandonedInQueueTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.MaxAbandonedInQueueTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetMaxAbandonedInRingTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.MaxAbandonedInRingTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetMaxHoldTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.MaxHoldTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetMaxRingTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.MaxRingTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetMaxTalkTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetMaxWaitTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.MaxWaitTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetMaxWorkTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetSatisfactionIndex(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetSatisfactionRate(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.SatisfactionRate = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetSatisfactionSurveysOffered(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetSatisfactionSurveysResponded(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetServiceLevel15(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.ServiceLevel15 = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetServiceLevel20(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.ServiceLevel20 = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetServiceLevel30(v float32) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.ServiceLevel30 = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetTotalAbandonTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.TotalAbandonTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetTotalAbandonedInIVRTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.TotalAbandonedInIVRTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetTotalAbandonedInQueueTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.TotalAbandonedInQueueTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetTotalAbandonedInRingTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.TotalAbandonedInRingTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetTotalHoldTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.TotalHoldTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetTotalMessagesSent(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.TotalMessagesSent = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetTotalMessagesSentByAgent(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.TotalMessagesSentByAgent = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetTotalMessagesSentByCustomer(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.TotalMessagesSentByCustomer = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetTotalRingTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.TotalRingTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetTotalTalkTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetTotalWaitTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.TotalWaitTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInbound) SetTotalWorkTime(v int64) *GetHistoricalInstanceReportResponseBodyDataInbound {
	s.TotalWorkTime = &v
	return s
}

type GetHistoricalInstanceReportResponseBodyDataInboundAccessChannelTypeDetailList struct {
	AccessChannelType *string `json:"AccessChannelType,omitempty" xml:"AccessChannelType,omitempty"`
	CallsOffered      *int64  `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
}

func (s GetHistoricalInstanceReportResponseBodyDataInboundAccessChannelTypeDetailList) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalInstanceReportResponseBodyDataInboundAccessChannelTypeDetailList) GoString() string {
	return s.String()
}

func (s *GetHistoricalInstanceReportResponseBodyDataInboundAccessChannelTypeDetailList) SetAccessChannelType(v string) *GetHistoricalInstanceReportResponseBodyDataInboundAccessChannelTypeDetailList {
	s.AccessChannelType = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInboundAccessChannelTypeDetailList) SetCallsOffered(v int64) *GetHistoricalInstanceReportResponseBodyDataInboundAccessChannelTypeDetailList {
	s.CallsOffered = &v
	return s
}

type GetHistoricalInstanceReportResponseBodyDataInternal struct {
	CallsAnswered *int64 `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsDialed   *int64 `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
}

func (s GetHistoricalInstanceReportResponseBodyDataInternal) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalInstanceReportResponseBodyDataInternal) GoString() string {
	return s.String()
}

func (s *GetHistoricalInstanceReportResponseBodyDataInternal) SetCallsAnswered(v int64) *GetHistoricalInstanceReportResponseBodyDataInternal {
	s.CallsAnswered = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataInternal) SetCallsDialed(v int64) *GetHistoricalInstanceReportResponseBodyDataInternal {
	s.CallsDialed = &v
	return s
}

type GetHistoricalInstanceReportResponseBodyDataOutbound struct {
	// example:
	//
	// 0
	AnswerRate *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	// example:
	//
	// 0
	AverageDialingTime *float32 `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	// example:
	//
	// 0
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 0
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 0
	CallsAnswered *int64 `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferred *int64 `json:"CallsAttendedTransferred,omitempty" xml:"CallsAttendedTransferred,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferred *int64 `json:"CallsBlindTransferred,omitempty" xml:"CallsBlindTransferred,omitempty"`
	// example:
	//
	// 0
	CallsDialed *int64 `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	// example:
	//
	// 0
	CallsHold *int32 `json:"CallsHold,omitempty" xml:"CallsHold,omitempty"`
	// example:
	//
	// 0
	CallsRinged *int64 `json:"CallsRinged,omitempty" xml:"CallsRinged,omitempty"`
	// example:
	//
	// 0
	MaxDialingTime *int64 `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 0
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 0
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 0
	TotalDialingTime *int64 `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	// example:
	//
	// 0
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 0
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GetHistoricalInstanceReportResponseBodyDataOutbound) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalInstanceReportResponseBodyDataOutbound) GoString() string {
	return s.String()
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetAnswerRate(v float32) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.AnswerRate = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetAverageDialingTime(v float32) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetAverageHoldTime(v float32) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.AverageHoldTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetAverageRingTime(v float32) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.AverageRingTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetAverageTalkTime(v float32) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetAverageWorkTime(v float32) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetCallsAnswered(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetCallsAttendedTransferred(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.CallsAttendedTransferred = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetCallsBlindTransferred(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.CallsBlindTransferred = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetCallsDialed(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.CallsDialed = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetCallsHold(v int32) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.CallsHold = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetCallsRinged(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.CallsRinged = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetMaxDialingTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetMaxHoldTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.MaxHoldTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetMaxRingTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.MaxRingTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetMaxTalkTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetMaxWorkTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetSatisfactionIndex(v float32) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetSatisfactionRate(v float32) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.SatisfactionRate = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetSatisfactionSurveysOffered(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetSatisfactionSurveysResponded(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetTotalDialingTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetTotalHoldTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.TotalHoldTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetTotalRingTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.TotalRingTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetTotalTalkTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOutbound) SetTotalWorkTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOutbound {
	s.TotalWorkTime = &v
	return s
}

type GetHistoricalInstanceReportResponseBodyDataOverall struct {
	// example:
	//
	// 0
	AverageBreakTime *float32 `json:"AverageBreakTime,omitempty" xml:"AverageBreakTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	// example:
	//
	// 0
	AverageReadyTime *float32 `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 0
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 0
	MaxBreakTime *int64 `json:"MaxBreakTime,omitempty" xml:"MaxBreakTime,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime       *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	MaxLoggedInAgents *int64 `json:"MaxLoggedInAgents,omitempty" xml:"MaxLoggedInAgents,omitempty"`
	// example:
	//
	// 0
	MaxReadyTime *int64 `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 0
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	OccupancyRate *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 0
	TotalBreakTime *int64 `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	// example:
	//
	// 0
	TotalCalls *int64 `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	// example:
	//
	// 0
	TotalLoggedInTime *int64 `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	// example:
	//
	// 0
	TotalReadyTime *int64 `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 0
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GetHistoricalInstanceReportResponseBodyDataOverall) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalInstanceReportResponseBodyDataOverall) GoString() string {
	return s.String()
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetAverageBreakTime(v float32) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.AverageBreakTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetAverageHoldTime(v float32) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.AverageHoldTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetAverageReadyTime(v float32) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetAverageTalkTime(v float32) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetAverageWorkTime(v float32) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetMaxBreakTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.MaxBreakTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetMaxHoldTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.MaxHoldTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetMaxLoggedInAgents(v int64) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.MaxLoggedInAgents = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetMaxReadyTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetMaxTalkTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetMaxWorkTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetOccupancyRate(v float32) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.OccupancyRate = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetSatisfactionIndex(v float32) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetSatisfactionRate(v float32) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.SatisfactionRate = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetSatisfactionSurveysOffered(v int64) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetSatisfactionSurveysResponded(v int64) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetTotalBreakTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetTotalCalls(v int64) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.TotalCalls = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetTotalHoldTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.TotalHoldTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetTotalLoggedInTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetTotalReadyTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetTotalTalkTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *GetHistoricalInstanceReportResponseBodyDataOverall) SetTotalWorkTime(v int64) *GetHistoricalInstanceReportResponseBodyDataOverall {
	s.TotalWorkTime = &v
	return s
}

type GetHistoricalInstanceReportResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetHistoricalInstanceReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetHistoricalInstanceReportResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHistoricalInstanceReportResponse) GoString() string {
	return s.String()
}

func (s *GetHistoricalInstanceReportResponse) SetHeaders(v map[string]*string) *GetHistoricalInstanceReportResponse {
	s.Headers = v
	return s
}

func (s *GetHistoricalInstanceReportResponse) SetStatusCode(v int32) *GetHistoricalInstanceReportResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHistoricalInstanceReportResponse) SetBody(v *GetHistoricalInstanceReportResponseBody) *GetHistoricalInstanceReportResponse {
	s.Body = v
	return s
}

type GetInstanceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceRequest) SetInstanceId(v string) *GetInstanceRequest {
	s.InstanceId = &v
	return s
}

type GetInstanceResponseBody struct {
	// example:
	//
	// OK
	Code *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2778FA12-EDD6-42AA-9B15-AF855072E5E5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceResponseBody) SetCode(v string) *GetInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *GetInstanceResponseBody) SetData(v *GetInstanceResponseBodyData) *GetInstanceResponseBody {
	s.Data = v
	return s
}

func (s *GetInstanceResponseBody) SetHttpStatusCode(v int32) *GetInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetInstanceResponseBody) SetMessage(v string) *GetInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *GetInstanceResponseBody) SetRequestId(v string) *GetInstanceResponseBody {
	s.RequestId = &v
	return s
}

type GetInstanceResponseBodyData struct {
	AdminList []*GetInstanceResponseBodyDataAdminList `json:"AdminList,omitempty" xml:"AdminList,omitempty" type:"Repeated"`
	// example:
	//
	// 157123456789****
	AliyunUid *string `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
	// example:
	//
	// https://ccc-v2.aliyun.com/#/workbench/ccc-test
	ConsoleUrl  *string `json:"ConsoleUrl,omitempty" xml:"ConsoleUrl,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// ccc-test
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// ccc-test
	Id         *string                                  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name       *string                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	NumberList []*GetInstanceResponseBodyDataNumberList `json:"NumberList,omitempty" xml:"NumberList,omitempty" type:"Repeated"`
	// example:
	//
	// RUNNING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetInstanceResponseBodyData) SetAdminList(v []*GetInstanceResponseBodyDataAdminList) *GetInstanceResponseBodyData {
	s.AdminList = v
	return s
}

func (s *GetInstanceResponseBodyData) SetAliyunUid(v string) *GetInstanceResponseBodyData {
	s.AliyunUid = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetConsoleUrl(v string) *GetInstanceResponseBodyData {
	s.ConsoleUrl = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetDescription(v string) *GetInstanceResponseBodyData {
	s.Description = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetDomainName(v string) *GetInstanceResponseBodyData {
	s.DomainName = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetId(v string) *GetInstanceResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetName(v string) *GetInstanceResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetInstanceResponseBodyData) SetNumberList(v []*GetInstanceResponseBodyDataNumberList) *GetInstanceResponseBodyData {
	s.NumberList = v
	return s
}

func (s *GetInstanceResponseBodyData) SetStatus(v string) *GetInstanceResponseBodyData {
	s.Status = &v
	return s
}

type GetInstanceResponseBodyDataAdminList struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// agent
	LoginName *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	// example:
	//
	// 1382114****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// Admin@ccc-test
	RoleId *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	// example:
	//
	// Admin
	RoleName *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s GetInstanceResponseBodyDataAdminList) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponseBodyDataAdminList) GoString() string {
	return s.String()
}

func (s *GetInstanceResponseBodyDataAdminList) SetDisplayName(v string) *GetInstanceResponseBodyDataAdminList {
	s.DisplayName = &v
	return s
}

func (s *GetInstanceResponseBodyDataAdminList) SetEmail(v string) *GetInstanceResponseBodyDataAdminList {
	s.Email = &v
	return s
}

func (s *GetInstanceResponseBodyDataAdminList) SetExtension(v string) *GetInstanceResponseBodyDataAdminList {
	s.Extension = &v
	return s
}

func (s *GetInstanceResponseBodyDataAdminList) SetInstanceId(v string) *GetInstanceResponseBodyDataAdminList {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceResponseBodyDataAdminList) SetLoginName(v string) *GetInstanceResponseBodyDataAdminList {
	s.LoginName = &v
	return s
}

func (s *GetInstanceResponseBodyDataAdminList) SetMobile(v string) *GetInstanceResponseBodyDataAdminList {
	s.Mobile = &v
	return s
}

func (s *GetInstanceResponseBodyDataAdminList) SetRoleId(v string) *GetInstanceResponseBodyDataAdminList {
	s.RoleId = &v
	return s
}

func (s *GetInstanceResponseBodyDataAdminList) SetRoleName(v string) *GetInstanceResponseBodyDataAdminList {
	s.RoleName = &v
	return s
}

func (s *GetInstanceResponseBodyDataAdminList) SetUserId(v string) *GetInstanceResponseBodyDataAdminList {
	s.UserId = &v
	return s
}

func (s *GetInstanceResponseBodyDataAdminList) SetWorkMode(v string) *GetInstanceResponseBodyDataAdminList {
	s.WorkMode = &v
	return s
}

type GetInstanceResponseBodyDataNumberList struct {
	// example:
	//
	// true
	Active *bool   `json:"Active,omitempty" xml:"Active,omitempty"`
	City   *string `json:"City,omitempty" xml:"City,omitempty"`
	// example:
	//
	// 2ec7a58f-3243-4815-bb21-97b480b95f5e
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 0830011****
	Number      *string                                             `json:"Number,omitempty" xml:"Number,omitempty"`
	Province    *string                                             `json:"Province,omitempty" xml:"Province,omitempty"`
	SkillGroups []*GetInstanceResponseBodyDataNumberListSkillGroups `json:"SkillGroups,omitempty" xml:"SkillGroups,omitempty" type:"Repeated"`
	// example:
	//
	// Bidirection
	Usage *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetInstanceResponseBodyDataNumberList) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponseBodyDataNumberList) GoString() string {
	return s.String()
}

func (s *GetInstanceResponseBodyDataNumberList) SetActive(v bool) *GetInstanceResponseBodyDataNumberList {
	s.Active = &v
	return s
}

func (s *GetInstanceResponseBodyDataNumberList) SetCity(v string) *GetInstanceResponseBodyDataNumberList {
	s.City = &v
	return s
}

func (s *GetInstanceResponseBodyDataNumberList) SetContactFlowId(v string) *GetInstanceResponseBodyDataNumberList {
	s.ContactFlowId = &v
	return s
}

func (s *GetInstanceResponseBodyDataNumberList) SetInstanceId(v string) *GetInstanceResponseBodyDataNumberList {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceResponseBodyDataNumberList) SetNumber(v string) *GetInstanceResponseBodyDataNumberList {
	s.Number = &v
	return s
}

func (s *GetInstanceResponseBodyDataNumberList) SetProvince(v string) *GetInstanceResponseBodyDataNumberList {
	s.Province = &v
	return s
}

func (s *GetInstanceResponseBodyDataNumberList) SetSkillGroups(v []*GetInstanceResponseBodyDataNumberListSkillGroups) *GetInstanceResponseBodyDataNumberList {
	s.SkillGroups = v
	return s
}

func (s *GetInstanceResponseBodyDataNumberList) SetUsage(v string) *GetInstanceResponseBodyDataNumberList {
	s.Usage = &v
	return s
}

func (s *GetInstanceResponseBodyDataNumberList) SetUserId(v string) *GetInstanceResponseBodyDataNumberList {
	s.UserId = &v
	return s
}

type GetInstanceResponseBodyDataNumberListSkillGroups struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// skillgroup
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1
	PhoneNumberCount *int32 `json:"PhoneNumberCount,omitempty" xml:"PhoneNumberCount,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 3
	UserCount *int32 `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
}

func (s GetInstanceResponseBodyDataNumberListSkillGroups) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponseBodyDataNumberListSkillGroups) GoString() string {
	return s.String()
}

func (s *GetInstanceResponseBodyDataNumberListSkillGroups) SetDescription(v string) *GetInstanceResponseBodyDataNumberListSkillGroups {
	s.Description = &v
	return s
}

func (s *GetInstanceResponseBodyDataNumberListSkillGroups) SetDisplayName(v string) *GetInstanceResponseBodyDataNumberListSkillGroups {
	s.DisplayName = &v
	return s
}

func (s *GetInstanceResponseBodyDataNumberListSkillGroups) SetInstanceId(v string) *GetInstanceResponseBodyDataNumberListSkillGroups {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceResponseBodyDataNumberListSkillGroups) SetName(v string) *GetInstanceResponseBodyDataNumberListSkillGroups {
	s.Name = &v
	return s
}

func (s *GetInstanceResponseBodyDataNumberListSkillGroups) SetPhoneNumberCount(v int32) *GetInstanceResponseBodyDataNumberListSkillGroups {
	s.PhoneNumberCount = &v
	return s
}

func (s *GetInstanceResponseBodyDataNumberListSkillGroups) SetSkillGroupId(v string) *GetInstanceResponseBodyDataNumberListSkillGroups {
	s.SkillGroupId = &v
	return s
}

func (s *GetInstanceResponseBodyDataNumberListSkillGroups) SetUserCount(v int32) *GetInstanceResponseBodyDataNumberListSkillGroups {
	s.UserCount = &v
	return s
}

type GetInstanceResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceResponse) SetHeaders(v map[string]*string) *GetInstanceResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceResponse) SetStatusCode(v int32) *GetInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceResponse) SetBody(v *GetInstanceResponseBody) *GetInstanceResponse {
	s.Body = v
	return s
}

type GetInstanceTrendingReportRequest struct {
	// example:
	//
	// 1604725528000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MediaType  *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 1604639129000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetInstanceTrendingReportRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceTrendingReportRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceTrendingReportRequest) SetEndTime(v int64) *GetInstanceTrendingReportRequest {
	s.EndTime = &v
	return s
}

func (s *GetInstanceTrendingReportRequest) SetInstanceId(v string) *GetInstanceTrendingReportRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceTrendingReportRequest) SetMediaType(v string) *GetInstanceTrendingReportRequest {
	s.MediaType = &v
	return s
}

func (s *GetInstanceTrendingReportRequest) SetStartTime(v int64) *GetInstanceTrendingReportRequest {
	s.StartTime = &v
	return s
}

type GetInstanceTrendingReportResponseBody struct {
	// example:
	//
	// OK
	Code *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetInstanceTrendingReportResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 943D8EF3-3321-471F-A104-51C96FCA94D6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetInstanceTrendingReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceTrendingReportResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceTrendingReportResponseBody) SetCode(v string) *GetInstanceTrendingReportResponseBody {
	s.Code = &v
	return s
}

func (s *GetInstanceTrendingReportResponseBody) SetData(v *GetInstanceTrendingReportResponseBodyData) *GetInstanceTrendingReportResponseBody {
	s.Data = v
	return s
}

func (s *GetInstanceTrendingReportResponseBody) SetHttpStatusCode(v int32) *GetInstanceTrendingReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetInstanceTrendingReportResponseBody) SetMessage(v string) *GetInstanceTrendingReportResponseBody {
	s.Message = &v
	return s
}

func (s *GetInstanceTrendingReportResponseBody) SetRequestId(v string) *GetInstanceTrendingReportResponseBody {
	s.RequestId = &v
	return s
}

type GetInstanceTrendingReportResponseBodyData struct {
	Inbound  []*GetInstanceTrendingReportResponseBodyDataInbound  `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Repeated"`
	Outbound []*GetInstanceTrendingReportResponseBodyDataOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Repeated"`
	Overall  []*GetInstanceTrendingReportResponseBodyDataOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Repeated"`
}

func (s GetInstanceTrendingReportResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceTrendingReportResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetInstanceTrendingReportResponseBodyData) SetInbound(v []*GetInstanceTrendingReportResponseBodyDataInbound) *GetInstanceTrendingReportResponseBodyData {
	s.Inbound = v
	return s
}

func (s *GetInstanceTrendingReportResponseBodyData) SetOutbound(v []*GetInstanceTrendingReportResponseBodyDataOutbound) *GetInstanceTrendingReportResponseBodyData {
	s.Outbound = v
	return s
}

func (s *GetInstanceTrendingReportResponseBodyData) SetOverall(v []*GetInstanceTrendingReportResponseBodyDataOverall) *GetInstanceTrendingReportResponseBodyData {
	s.Overall = v
	return s
}

type GetInstanceTrendingReportResponseBodyDataInbound struct {
	// example:
	//
	// 0
	CallsAbandonedInIVR *int64 `json:"CallsAbandonedInIVR,omitempty" xml:"CallsAbandonedInIVR,omitempty"`
	// example:
	//
	// 0
	CallsAbandonedInQueue *int64 `json:"CallsAbandonedInQueue,omitempty" xml:"CallsAbandonedInQueue,omitempty"`
	// example:
	//
	// 0
	CallsAbandonedInRing *int64 `json:"CallsAbandonedInRing,omitempty" xml:"CallsAbandonedInRing,omitempty"`
	// example:
	//
	// 0
	CallsHandled *int64 `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	// example:
	//
	// 0
	CallsQueued *int64 `json:"CallsQueued,omitempty" xml:"CallsQueued,omitempty"`
	// example:
	//
	// 1604639129000
	StatsTime *int64 `json:"StatsTime,omitempty" xml:"StatsTime,omitempty"`
	// example:
	//
	// 0
	TotalCalls *int64 `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
}

func (s GetInstanceTrendingReportResponseBodyDataInbound) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceTrendingReportResponseBodyDataInbound) GoString() string {
	return s.String()
}

func (s *GetInstanceTrendingReportResponseBodyDataInbound) SetCallsAbandonedInIVR(v int64) *GetInstanceTrendingReportResponseBodyDataInbound {
	s.CallsAbandonedInIVR = &v
	return s
}

func (s *GetInstanceTrendingReportResponseBodyDataInbound) SetCallsAbandonedInQueue(v int64) *GetInstanceTrendingReportResponseBodyDataInbound {
	s.CallsAbandonedInQueue = &v
	return s
}

func (s *GetInstanceTrendingReportResponseBodyDataInbound) SetCallsAbandonedInRing(v int64) *GetInstanceTrendingReportResponseBodyDataInbound {
	s.CallsAbandonedInRing = &v
	return s
}

func (s *GetInstanceTrendingReportResponseBodyDataInbound) SetCallsHandled(v int64) *GetInstanceTrendingReportResponseBodyDataInbound {
	s.CallsHandled = &v
	return s
}

func (s *GetInstanceTrendingReportResponseBodyDataInbound) SetCallsQueued(v int64) *GetInstanceTrendingReportResponseBodyDataInbound {
	s.CallsQueued = &v
	return s
}

func (s *GetInstanceTrendingReportResponseBodyDataInbound) SetStatsTime(v int64) *GetInstanceTrendingReportResponseBodyDataInbound {
	s.StatsTime = &v
	return s
}

func (s *GetInstanceTrendingReportResponseBodyDataInbound) SetTotalCalls(v int64) *GetInstanceTrendingReportResponseBodyDataInbound {
	s.TotalCalls = &v
	return s
}

type GetInstanceTrendingReportResponseBodyDataOutbound struct {
	// example:
	//
	// 0
	CallsAnswered *int64 `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	// example:
	//
	// 1604639129000
	StatsTime *int64 `json:"StatsTime,omitempty" xml:"StatsTime,omitempty"`
	// example:
	//
	// 0
	TotalCalls *int64 `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
}

func (s GetInstanceTrendingReportResponseBodyDataOutbound) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceTrendingReportResponseBodyDataOutbound) GoString() string {
	return s.String()
}

func (s *GetInstanceTrendingReportResponseBodyDataOutbound) SetCallsAnswered(v int64) *GetInstanceTrendingReportResponseBodyDataOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *GetInstanceTrendingReportResponseBodyDataOutbound) SetStatsTime(v int64) *GetInstanceTrendingReportResponseBodyDataOutbound {
	s.StatsTime = &v
	return s
}

func (s *GetInstanceTrendingReportResponseBodyDataOutbound) SetTotalCalls(v int64) *GetInstanceTrendingReportResponseBodyDataOutbound {
	s.TotalCalls = &v
	return s
}

type GetInstanceTrendingReportResponseBodyDataOverall struct {
	MaxLoggedInAgents *int64 `json:"MaxLoggedInAgents,omitempty" xml:"MaxLoggedInAgents,omitempty"`
	StatsTime         *int64 `json:"StatsTime,omitempty" xml:"StatsTime,omitempty"`
}

func (s GetInstanceTrendingReportResponseBodyDataOverall) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceTrendingReportResponseBodyDataOverall) GoString() string {
	return s.String()
}

func (s *GetInstanceTrendingReportResponseBodyDataOverall) SetMaxLoggedInAgents(v int64) *GetInstanceTrendingReportResponseBodyDataOverall {
	s.MaxLoggedInAgents = &v
	return s
}

func (s *GetInstanceTrendingReportResponseBodyDataOverall) SetStatsTime(v int64) *GetInstanceTrendingReportResponseBodyDataOverall {
	s.StatsTime = &v
	return s
}

type GetInstanceTrendingReportResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInstanceTrendingReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInstanceTrendingReportResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceTrendingReportResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceTrendingReportResponse) SetHeaders(v map[string]*string) *GetInstanceTrendingReportResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceTrendingReportResponse) SetStatusCode(v int32) *GetInstanceTrendingReportResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceTrendingReportResponse) SetBody(v *GetInstanceTrendingReportResponseBody) *GetInstanceTrendingReportResponse {
	s.Body = v
	return s
}

type GetLoginDetailsRequest struct {
	ChatDeviceId *string `json:"ChatDeviceId,omitempty" xml:"ChatDeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetLoginDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLoginDetailsRequest) GoString() string {
	return s.String()
}

func (s *GetLoginDetailsRequest) SetChatDeviceId(v string) *GetLoginDetailsRequest {
	s.ChatDeviceId = &v
	return s
}

func (s *GetLoginDetailsRequest) SetInstanceId(v string) *GetLoginDetailsRequest {
	s.InstanceId = &v
	return s
}

func (s *GetLoginDetailsRequest) SetUserId(v string) *GetLoginDetailsRequest {
	s.UserId = &v
	return s
}

type GetLoginDetailsResponseBody struct {
	// example:
	//
	// OK
	Code *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetLoginDetailsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// F1A4774A-F28B-5C40-AEF6-D88D2DD6C7E4
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLoginDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLoginDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *GetLoginDetailsResponseBody) SetCode(v string) *GetLoginDetailsResponseBody {
	s.Code = &v
	return s
}

func (s *GetLoginDetailsResponseBody) SetData(v *GetLoginDetailsResponseBodyData) *GetLoginDetailsResponseBody {
	s.Data = v
	return s
}

func (s *GetLoginDetailsResponseBody) SetHttpStatusCode(v int32) *GetLoginDetailsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetLoginDetailsResponseBody) SetMessage(v string) *GetLoginDetailsResponseBody {
	s.Message = &v
	return s
}

func (s *GetLoginDetailsResponseBody) SetParams(v []*string) *GetLoginDetailsResponseBody {
	s.Params = v
	return s
}

func (s *GetLoginDetailsResponseBody) SetRequestId(v string) *GetLoginDetailsResponseBody {
	s.RequestId = &v
	return s
}

type GetLoginDetailsResponseBodyData struct {
	// example:
	//
	// sh-wss-ccc.aliyuncs.com
	AgentServerUrl *string `json:"AgentServerUrl,omitempty" xml:"AgentServerUrl,omitempty"`
	AvatarUrl      *string `json:"AvatarUrl,omitempty" xml:"AvatarUrl,omitempty"`
	ChatAppId      *string `json:"ChatAppId,omitempty" xml:"ChatAppId,omitempty"`
	ChatAppKey     *string `json:"ChatAppKey,omitempty" xml:"ChatAppKey,omitempty"`
	ChatDeviceId   *string `json:"ChatDeviceId,omitempty" xml:"ChatDeviceId,omitempty"`
	ChatLoginToken *string `json:"ChatLoginToken,omitempty" xml:"ChatLoginToken,omitempty"`
	ChatServerUrl  *string `json:"ChatServerUrl,omitempty" xml:"ChatServerUrl,omitempty"`
	ChatUserId     *string `json:"ChatUserId,omitempty" xml:"ChatUserId,omitempty"`
	// example:
	//
	// 8033****
	DeviceExt *string `json:"DeviceExt,omitempty" xml:"DeviceExt,omitempty"`
	// example:
	//
	// Yealink SIP-T23G 44.84.XX.XX
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// OFFLINE
	DeviceState *string `json:"DeviceState,omitempty" xml:"DeviceState,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// 8001****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	Nickname  *string `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
	// example:
	//
	// zi31STIMtIfa/UN2l+6lww****
	Signature *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
	// example:
	//
	// zi31STIMtIfa/UN2l+6lww****
	Signature2 *string `json:"Signature2,omitempty" xml:"Signature2,omitempty"`
	// example:
	//
	// sh-sip-ccc.aliyuncs.com:443
	SipServerUrl *string `json:"SipServerUrl,omitempty" xml:"SipServerUrl,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId  *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserKey *string `json:"UserKey,omitempty" xml:"UserKey,omitempty"`
	// example:
	//
	// 802001:1656406628862"
	UserKey2 *string `json:"UserKey2,omitempty" xml:"UserKey2,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s GetLoginDetailsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetLoginDetailsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetLoginDetailsResponseBodyData) SetAgentServerUrl(v string) *GetLoginDetailsResponseBodyData {
	s.AgentServerUrl = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetAvatarUrl(v string) *GetLoginDetailsResponseBodyData {
	s.AvatarUrl = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetChatAppId(v string) *GetLoginDetailsResponseBodyData {
	s.ChatAppId = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetChatAppKey(v string) *GetLoginDetailsResponseBodyData {
	s.ChatAppKey = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetChatDeviceId(v string) *GetLoginDetailsResponseBodyData {
	s.ChatDeviceId = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetChatLoginToken(v string) *GetLoginDetailsResponseBodyData {
	s.ChatLoginToken = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetChatServerUrl(v string) *GetLoginDetailsResponseBodyData {
	s.ChatServerUrl = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetChatUserId(v string) *GetLoginDetailsResponseBodyData {
	s.ChatUserId = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetDeviceExt(v string) *GetLoginDetailsResponseBodyData {
	s.DeviceExt = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetDeviceId(v string) *GetLoginDetailsResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetDeviceState(v string) *GetLoginDetailsResponseBodyData {
	s.DeviceState = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetDisplayName(v string) *GetLoginDetailsResponseBodyData {
	s.DisplayName = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetExtension(v string) *GetLoginDetailsResponseBodyData {
	s.Extension = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetNickname(v string) *GetLoginDetailsResponseBodyData {
	s.Nickname = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetSignature(v string) *GetLoginDetailsResponseBodyData {
	s.Signature = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetSignature2(v string) *GetLoginDetailsResponseBodyData {
	s.Signature2 = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetSipServerUrl(v string) *GetLoginDetailsResponseBodyData {
	s.SipServerUrl = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetUserId(v string) *GetLoginDetailsResponseBodyData {
	s.UserId = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetUserKey(v string) *GetLoginDetailsResponseBodyData {
	s.UserKey = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetUserKey2(v string) *GetLoginDetailsResponseBodyData {
	s.UserKey2 = &v
	return s
}

func (s *GetLoginDetailsResponseBodyData) SetWorkMode(v string) *GetLoginDetailsResponseBodyData {
	s.WorkMode = &v
	return s
}

type GetLoginDetailsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLoginDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLoginDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLoginDetailsResponse) GoString() string {
	return s.String()
}

func (s *GetLoginDetailsResponse) SetHeaders(v map[string]*string) *GetLoginDetailsResponse {
	s.Headers = v
	return s
}

func (s *GetLoginDetailsResponse) SetStatusCode(v int32) *GetLoginDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLoginDetailsResponse) SetBody(v *GetLoginDetailsResponseBody) *GetLoginDetailsResponse {
	s.Body = v
	return s
}

type GetMonoRecordingRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// job-6538214103689****
	ContactId     *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	ExpireSeconds *int64  `json:"ExpireSeconds,omitempty" xml:"ExpireSeconds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetMonoRecordingRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMonoRecordingRequest) GoString() string {
	return s.String()
}

func (s *GetMonoRecordingRequest) SetContactId(v string) *GetMonoRecordingRequest {
	s.ContactId = &v
	return s
}

func (s *GetMonoRecordingRequest) SetExpireSeconds(v int64) *GetMonoRecordingRequest {
	s.ExpireSeconds = &v
	return s
}

func (s *GetMonoRecordingRequest) SetInstanceId(v string) *GetMonoRecordingRequest {
	s.InstanceId = &v
	return s
}

type GetMonoRecordingResponseBody struct {
	// example:
	//
	// OK
	Code *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetMonoRecordingResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMonoRecordingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMonoRecordingResponseBody) GoString() string {
	return s.String()
}

func (s *GetMonoRecordingResponseBody) SetCode(v string) *GetMonoRecordingResponseBody {
	s.Code = &v
	return s
}

func (s *GetMonoRecordingResponseBody) SetData(v *GetMonoRecordingResponseBodyData) *GetMonoRecordingResponseBody {
	s.Data = v
	return s
}

func (s *GetMonoRecordingResponseBody) SetHttpStatusCode(v int32) *GetMonoRecordingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMonoRecordingResponseBody) SetMessage(v string) *GetMonoRecordingResponseBody {
	s.Message = &v
	return s
}

func (s *GetMonoRecordingResponseBody) SetRequestId(v string) *GetMonoRecordingResponseBody {
	s.RequestId = &v
	return s
}

type GetMonoRecordingResponseBodyData struct {
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// job-6538214103689****.wav
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// http://ccc-v2-online.oss-cn-shanghai.aliyuncs.com/ccc-record/job-6538214103689****.wav?Expires=1610910578&OSSAccessKeyId=****&Signature=****
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
}

func (s GetMonoRecordingResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMonoRecordingResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMonoRecordingResponseBodyData) SetDuration(v int64) *GetMonoRecordingResponseBodyData {
	s.Duration = &v
	return s
}

func (s *GetMonoRecordingResponseBodyData) SetFileName(v string) *GetMonoRecordingResponseBodyData {
	s.FileName = &v
	return s
}

func (s *GetMonoRecordingResponseBodyData) SetFileUrl(v string) *GetMonoRecordingResponseBodyData {
	s.FileUrl = &v
	return s
}

type GetMonoRecordingResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMonoRecordingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMonoRecordingResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMonoRecordingResponse) GoString() string {
	return s.String()
}

func (s *GetMonoRecordingResponse) SetHeaders(v map[string]*string) *GetMonoRecordingResponse {
	s.Headers = v
	return s
}

func (s *GetMonoRecordingResponse) SetStatusCode(v int32) *GetMonoRecordingResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMonoRecordingResponse) SetBody(v *GetMonoRecordingResponseBody) *GetMonoRecordingResponse {
	s.Body = v
	return s
}

type GetMultiChannelRecordingRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// job-6538214103689****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetMultiChannelRecordingRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMultiChannelRecordingRequest) GoString() string {
	return s.String()
}

func (s *GetMultiChannelRecordingRequest) SetContactId(v string) *GetMultiChannelRecordingRequest {
	s.ContactId = &v
	return s
}

func (s *GetMultiChannelRecordingRequest) SetInstanceId(v string) *GetMultiChannelRecordingRequest {
	s.InstanceId = &v
	return s
}

type GetMultiChannelRecordingResponseBody struct {
	// example:
	//
	// OK
	Code *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetMultiChannelRecordingResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMultiChannelRecordingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMultiChannelRecordingResponseBody) GoString() string {
	return s.String()
}

func (s *GetMultiChannelRecordingResponseBody) SetCode(v string) *GetMultiChannelRecordingResponseBody {
	s.Code = &v
	return s
}

func (s *GetMultiChannelRecordingResponseBody) SetData(v *GetMultiChannelRecordingResponseBodyData) *GetMultiChannelRecordingResponseBody {
	s.Data = v
	return s
}

func (s *GetMultiChannelRecordingResponseBody) SetHttpStatusCode(v int32) *GetMultiChannelRecordingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetMultiChannelRecordingResponseBody) SetMessage(v string) *GetMultiChannelRecordingResponseBody {
	s.Message = &v
	return s
}

func (s *GetMultiChannelRecordingResponseBody) SetRequestId(v string) *GetMultiChannelRecordingResponseBody {
	s.RequestId = &v
	return s
}

type GetMultiChannelRecordingResponseBodyData struct {
	// example:
	//
	// job-6538214103689****.mkv
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// https://ccc-v2-online.oss-cn-shanghai.aliyuncs.com/ccc-record-mixed/ccc-test/2021/04/job-6538214103689****.mkv?Expires=1617435462&OSSAccessKeyId=****&Signature=****
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
}

func (s GetMultiChannelRecordingResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMultiChannelRecordingResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMultiChannelRecordingResponseBodyData) SetFileName(v string) *GetMultiChannelRecordingResponseBodyData {
	s.FileName = &v
	return s
}

func (s *GetMultiChannelRecordingResponseBodyData) SetFileUrl(v string) *GetMultiChannelRecordingResponseBodyData {
	s.FileUrl = &v
	return s
}

type GetMultiChannelRecordingResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMultiChannelRecordingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMultiChannelRecordingResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMultiChannelRecordingResponse) GoString() string {
	return s.String()
}

func (s *GetMultiChannelRecordingResponse) SetHeaders(v map[string]*string) *GetMultiChannelRecordingResponse {
	s.Headers = v
	return s
}

func (s *GetMultiChannelRecordingResponse) SetStatusCode(v int32) *GetMultiChannelRecordingResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMultiChannelRecordingResponse) SetBody(v *GetMultiChannelRecordingResponseBody) *GetMultiChannelRecordingResponse {
	s.Body = v
	return s
}

type GetNumberLocationRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1312121****
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
}

func (s GetNumberLocationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNumberLocationRequest) GoString() string {
	return s.String()
}

func (s *GetNumberLocationRequest) SetInstanceId(v string) *GetNumberLocationRequest {
	s.InstanceId = &v
	return s
}

func (s *GetNumberLocationRequest) SetNumber(v string) *GetNumberLocationRequest {
	s.Number = &v
	return s
}

type GetNumberLocationResponseBody struct {
	// example:
	//
	// OK
	Code *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetNumberLocationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 584AA2E3-9AC4-561B-BC8D-C74BA11B1387
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetNumberLocationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNumberLocationResponseBody) GoString() string {
	return s.String()
}

func (s *GetNumberLocationResponseBody) SetCode(v string) *GetNumberLocationResponseBody {
	s.Code = &v
	return s
}

func (s *GetNumberLocationResponseBody) SetData(v *GetNumberLocationResponseBodyData) *GetNumberLocationResponseBody {
	s.Data = v
	return s
}

func (s *GetNumberLocationResponseBody) SetHttpStatusCode(v int32) *GetNumberLocationResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetNumberLocationResponseBody) SetMessage(v string) *GetNumberLocationResponseBody {
	s.Message = &v
	return s
}

func (s *GetNumberLocationResponseBody) SetRequestId(v string) *GetNumberLocationResponseBody {
	s.RequestId = &v
	return s
}

type GetNumberLocationResponseBodyData struct {
	City *string `json:"City,omitempty" xml:"City,omitempty"`
	// example:
	//
	// 1312121****
	Number   *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s GetNumberLocationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetNumberLocationResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetNumberLocationResponseBodyData) SetCity(v string) *GetNumberLocationResponseBodyData {
	s.City = &v
	return s
}

func (s *GetNumberLocationResponseBodyData) SetNumber(v string) *GetNumberLocationResponseBodyData {
	s.Number = &v
	return s
}

func (s *GetNumberLocationResponseBodyData) SetProvince(v string) *GetNumberLocationResponseBodyData {
	s.Province = &v
	return s
}

type GetNumberLocationResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetNumberLocationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetNumberLocationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNumberLocationResponse) GoString() string {
	return s.String()
}

func (s *GetNumberLocationResponse) SetHeaders(v map[string]*string) *GetNumberLocationResponse {
	s.Headers = v
	return s
}

func (s *GetNumberLocationResponse) SetStatusCode(v int32) *GetNumberLocationResponse {
	s.StatusCode = &v
	return s
}

func (s *GetNumberLocationResponse) SetBody(v *GetNumberLocationResponseBody) *GetNumberLocationResponse {
	s.Body = v
	return s
}

type GetRealtimeCampaignStatsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// skillgroup@ccc-test
	QueueId *string `json:"QueueId,omitempty" xml:"QueueId,omitempty"`
}

func (s GetRealtimeCampaignStatsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRealtimeCampaignStatsRequest) GoString() string {
	return s.String()
}

func (s *GetRealtimeCampaignStatsRequest) SetInstanceId(v string) *GetRealtimeCampaignStatsRequest {
	s.InstanceId = &v
	return s
}

func (s *GetRealtimeCampaignStatsRequest) SetQueueId(v string) *GetRealtimeCampaignStatsRequest {
	s.QueueId = &v
	return s
}

type GetRealtimeCampaignStatsResponseBody struct {
	// example:
	//
	// OK
	Code *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetRealtimeCampaignStatsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 42970829-E2C8-515A-8F42-5A6B59F852A7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetRealtimeCampaignStatsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRealtimeCampaignStatsResponseBody) GoString() string {
	return s.String()
}

func (s *GetRealtimeCampaignStatsResponseBody) SetCode(v string) *GetRealtimeCampaignStatsResponseBody {
	s.Code = &v
	return s
}

func (s *GetRealtimeCampaignStatsResponseBody) SetData(v *GetRealtimeCampaignStatsResponseBodyData) *GetRealtimeCampaignStatsResponseBody {
	s.Data = v
	return s
}

func (s *GetRealtimeCampaignStatsResponseBody) SetHttpStatusCode(v int32) *GetRealtimeCampaignStatsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetRealtimeCampaignStatsResponseBody) SetMessage(v string) *GetRealtimeCampaignStatsResponseBody {
	s.Message = &v
	return s
}

func (s *GetRealtimeCampaignStatsResponseBody) SetRequestId(v string) *GetRealtimeCampaignStatsResponseBody {
	s.RequestId = &v
	return s
}

type GetRealtimeCampaignStatsResponseBodyData struct {
	// example:
	//
	// 1
	BreakingAgents *int64 `json:"BreakingAgents,omitempty" xml:"BreakingAgents,omitempty"`
	// example:
	//
	// 5
	Caps *int64 `json:"Caps,omitempty" xml:"Caps,omitempty"`
	// example:
	//
	// 10
	LoggedInAgents                 *int64 `json:"LoggedInAgents,omitempty" xml:"LoggedInAgents,omitempty"`
	OutboundScenarioBreakingAgents *int64 `json:"OutboundScenarioBreakingAgents,omitempty" xml:"OutboundScenarioBreakingAgents,omitempty"`
	OutboundScenarioReadyAgents    *int64 `json:"OutboundScenarioReadyAgents,omitempty" xml:"OutboundScenarioReadyAgents,omitempty"`
	OutboundScenarioTalkingAgents  *int64 `json:"OutboundScenarioTalkingAgents,omitempty" xml:"OutboundScenarioTalkingAgents,omitempty"`
	OutboundScenarioWorkingAgents  *int64 `json:"OutboundScenarioWorkingAgents,omitempty" xml:"OutboundScenarioWorkingAgents,omitempty"`
	// example:
	//
	// 3
	ReadyAgents *int64 `json:"ReadyAgents,omitempty" xml:"ReadyAgents,omitempty"`
	// example:
	//
	// 4
	TalkingAgents *int64 `json:"TalkingAgents,omitempty" xml:"TalkingAgents,omitempty"`
	// example:
	//
	// 10
	TotalAgents *int64 `json:"TotalAgents,omitempty" xml:"TotalAgents,omitempty"`
	// example:
	//
	// 2
	WorkingAgents *int64 `json:"WorkingAgents,omitempty" xml:"WorkingAgents,omitempty"`
}

func (s GetRealtimeCampaignStatsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetRealtimeCampaignStatsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetRealtimeCampaignStatsResponseBodyData) SetBreakingAgents(v int64) *GetRealtimeCampaignStatsResponseBodyData {
	s.BreakingAgents = &v
	return s
}

func (s *GetRealtimeCampaignStatsResponseBodyData) SetCaps(v int64) *GetRealtimeCampaignStatsResponseBodyData {
	s.Caps = &v
	return s
}

func (s *GetRealtimeCampaignStatsResponseBodyData) SetLoggedInAgents(v int64) *GetRealtimeCampaignStatsResponseBodyData {
	s.LoggedInAgents = &v
	return s
}

func (s *GetRealtimeCampaignStatsResponseBodyData) SetOutboundScenarioBreakingAgents(v int64) *GetRealtimeCampaignStatsResponseBodyData {
	s.OutboundScenarioBreakingAgents = &v
	return s
}

func (s *GetRealtimeCampaignStatsResponseBodyData) SetOutboundScenarioReadyAgents(v int64) *GetRealtimeCampaignStatsResponseBodyData {
	s.OutboundScenarioReadyAgents = &v
	return s
}

func (s *GetRealtimeCampaignStatsResponseBodyData) SetOutboundScenarioTalkingAgents(v int64) *GetRealtimeCampaignStatsResponseBodyData {
	s.OutboundScenarioTalkingAgents = &v
	return s
}

func (s *GetRealtimeCampaignStatsResponseBodyData) SetOutboundScenarioWorkingAgents(v int64) *GetRealtimeCampaignStatsResponseBodyData {
	s.OutboundScenarioWorkingAgents = &v
	return s
}

func (s *GetRealtimeCampaignStatsResponseBodyData) SetReadyAgents(v int64) *GetRealtimeCampaignStatsResponseBodyData {
	s.ReadyAgents = &v
	return s
}

func (s *GetRealtimeCampaignStatsResponseBodyData) SetTalkingAgents(v int64) *GetRealtimeCampaignStatsResponseBodyData {
	s.TalkingAgents = &v
	return s
}

func (s *GetRealtimeCampaignStatsResponseBodyData) SetTotalAgents(v int64) *GetRealtimeCampaignStatsResponseBodyData {
	s.TotalAgents = &v
	return s
}

func (s *GetRealtimeCampaignStatsResponseBodyData) SetWorkingAgents(v int64) *GetRealtimeCampaignStatsResponseBodyData {
	s.WorkingAgents = &v
	return s
}

type GetRealtimeCampaignStatsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRealtimeCampaignStatsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRealtimeCampaignStatsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRealtimeCampaignStatsResponse) GoString() string {
	return s.String()
}

func (s *GetRealtimeCampaignStatsResponse) SetHeaders(v map[string]*string) *GetRealtimeCampaignStatsResponse {
	s.Headers = v
	return s
}

func (s *GetRealtimeCampaignStatsResponse) SetStatusCode(v int32) *GetRealtimeCampaignStatsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRealtimeCampaignStatsResponse) SetBody(v *GetRealtimeCampaignStatsResponseBody) *GetRealtimeCampaignStatsResponse {
	s.Body = v
	return s
}

type GetRealtimeInstanceStatesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MediaType  *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
}

func (s GetRealtimeInstanceStatesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRealtimeInstanceStatesRequest) GoString() string {
	return s.String()
}

func (s *GetRealtimeInstanceStatesRequest) SetInstanceId(v string) *GetRealtimeInstanceStatesRequest {
	s.InstanceId = &v
	return s
}

func (s *GetRealtimeInstanceStatesRequest) SetMediaType(v string) *GetRealtimeInstanceStatesRequest {
	s.MediaType = &v
	return s
}

type GetRealtimeInstanceStatesResponseBody struct {
	// example:
	//
	// OK
	Code *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetRealtimeInstanceStatesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 943D8EF3-3321-471F-A104-51C96FCA94D6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetRealtimeInstanceStatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRealtimeInstanceStatesResponseBody) GoString() string {
	return s.String()
}

func (s *GetRealtimeInstanceStatesResponseBody) SetCode(v string) *GetRealtimeInstanceStatesResponseBody {
	s.Code = &v
	return s
}

func (s *GetRealtimeInstanceStatesResponseBody) SetData(v *GetRealtimeInstanceStatesResponseBodyData) *GetRealtimeInstanceStatesResponseBody {
	s.Data = v
	return s
}

func (s *GetRealtimeInstanceStatesResponseBody) SetHttpStatusCode(v int32) *GetRealtimeInstanceStatesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetRealtimeInstanceStatesResponseBody) SetMessage(v string) *GetRealtimeInstanceStatesResponseBody {
	s.Message = &v
	return s
}

func (s *GetRealtimeInstanceStatesResponseBody) SetRequestId(v string) *GetRealtimeInstanceStatesResponseBody {
	s.RequestId = &v
	return s
}

type GetRealtimeInstanceStatesResponseBodyData struct {
	BreakCodeDetailList []*GetRealtimeInstanceStatesResponseBodyDataBreakCodeDetailList `json:"BreakCodeDetailList,omitempty" xml:"BreakCodeDetailList,omitempty" type:"Repeated"`
	// example:
	//
	// 0
	BreakingAgents *int64 `json:"BreakingAgents,omitempty" xml:"BreakingAgents,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 0
	InteractiveCalls *int64 `json:"InteractiveCalls,omitempty" xml:"InteractiveCalls,omitempty"`
	// example:
	//
	// 0
	LoggedInAgents *int64 `json:"LoggedInAgents,omitempty" xml:"LoggedInAgents,omitempty"`
	// example:
	//
	// 0
	LongestWaitingTime *int64 `json:"LongestWaitingTime,omitempty" xml:"LongestWaitingTime,omitempty"`
	// example:
	//
	// 0
	ReadyAgents *int64 `json:"ReadyAgents,omitempty" xml:"ReadyAgents,omitempty"`
	// example:
	//
	// 0
	TalkingAgents *int64 `json:"TalkingAgents,omitempty" xml:"TalkingAgents,omitempty"`
	// example:
	//
	// 0
	TotalAgents *int64 `json:"TotalAgents,omitempty" xml:"TotalAgents,omitempty"`
	// example:
	//
	// 0
	WaitingCalls *int64 `json:"WaitingCalls,omitempty" xml:"WaitingCalls,omitempty"`
	// example:
	//
	// 0
	WorkingAgents *int64 `json:"WorkingAgents,omitempty" xml:"WorkingAgents,omitempty"`
}

func (s GetRealtimeInstanceStatesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetRealtimeInstanceStatesResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetRealtimeInstanceStatesResponseBodyData) SetBreakCodeDetailList(v []*GetRealtimeInstanceStatesResponseBodyDataBreakCodeDetailList) *GetRealtimeInstanceStatesResponseBodyData {
	s.BreakCodeDetailList = v
	return s
}

func (s *GetRealtimeInstanceStatesResponseBodyData) SetBreakingAgents(v int64) *GetRealtimeInstanceStatesResponseBodyData {
	s.BreakingAgents = &v
	return s
}

func (s *GetRealtimeInstanceStatesResponseBodyData) SetInstanceId(v string) *GetRealtimeInstanceStatesResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetRealtimeInstanceStatesResponseBodyData) SetInteractiveCalls(v int64) *GetRealtimeInstanceStatesResponseBodyData {
	s.InteractiveCalls = &v
	return s
}

func (s *GetRealtimeInstanceStatesResponseBodyData) SetLoggedInAgents(v int64) *GetRealtimeInstanceStatesResponseBodyData {
	s.LoggedInAgents = &v
	return s
}

func (s *GetRealtimeInstanceStatesResponseBodyData) SetLongestWaitingTime(v int64) *GetRealtimeInstanceStatesResponseBodyData {
	s.LongestWaitingTime = &v
	return s
}

func (s *GetRealtimeInstanceStatesResponseBodyData) SetReadyAgents(v int64) *GetRealtimeInstanceStatesResponseBodyData {
	s.ReadyAgents = &v
	return s
}

func (s *GetRealtimeInstanceStatesResponseBodyData) SetTalkingAgents(v int64) *GetRealtimeInstanceStatesResponseBodyData {
	s.TalkingAgents = &v
	return s
}

func (s *GetRealtimeInstanceStatesResponseBodyData) SetTotalAgents(v int64) *GetRealtimeInstanceStatesResponseBodyData {
	s.TotalAgents = &v
	return s
}

func (s *GetRealtimeInstanceStatesResponseBodyData) SetWaitingCalls(v int64) *GetRealtimeInstanceStatesResponseBodyData {
	s.WaitingCalls = &v
	return s
}

func (s *GetRealtimeInstanceStatesResponseBodyData) SetWorkingAgents(v int64) *GetRealtimeInstanceStatesResponseBodyData {
	s.WorkingAgents = &v
	return s
}

type GetRealtimeInstanceStatesResponseBodyDataBreakCodeDetailList struct {
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	Count     *int64  `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s GetRealtimeInstanceStatesResponseBodyDataBreakCodeDetailList) String() string {
	return tea.Prettify(s)
}

func (s GetRealtimeInstanceStatesResponseBodyDataBreakCodeDetailList) GoString() string {
	return s.String()
}

func (s *GetRealtimeInstanceStatesResponseBodyDataBreakCodeDetailList) SetBreakCode(v string) *GetRealtimeInstanceStatesResponseBodyDataBreakCodeDetailList {
	s.BreakCode = &v
	return s
}

func (s *GetRealtimeInstanceStatesResponseBodyDataBreakCodeDetailList) SetCount(v int64) *GetRealtimeInstanceStatesResponseBodyDataBreakCodeDetailList {
	s.Count = &v
	return s
}

type GetRealtimeInstanceStatesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRealtimeInstanceStatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRealtimeInstanceStatesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRealtimeInstanceStatesResponse) GoString() string {
	return s.String()
}

func (s *GetRealtimeInstanceStatesResponse) SetHeaders(v map[string]*string) *GetRealtimeInstanceStatesResponse {
	s.Headers = v
	return s
}

func (s *GetRealtimeInstanceStatesResponse) SetStatusCode(v int32) *GetRealtimeInstanceStatesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRealtimeInstanceStatesResponse) SetBody(v *GetRealtimeInstanceStatesResponseBody) *GetRealtimeInstanceStatesResponse {
	s.Body = v
	return s
}

type GetSchemaRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// b0eb2742-f37e-4c67-82d4-25c651c1xxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 03C67DAD-EB26-41D8-949D-9B0C470FB716
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// schema id
	//
	// This parameter is required.
	//
	// example:
	//
	// profile
	SchemaId *string `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s GetSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSchemaRequest) GoString() string {
	return s.String()
}

func (s *GetSchemaRequest) SetInstanceId(v string) *GetSchemaRequest {
	s.InstanceId = &v
	return s
}

func (s *GetSchemaRequest) SetRequestId(v string) *GetSchemaRequest {
	s.RequestId = &v
	return s
}

func (s *GetSchemaRequest) SetSchemaId(v string) *GetSchemaRequest {
	s.SchemaId = &v
	return s
}

type GetSchemaResponseBody struct {
	// example:
	//
	// OK
	Code *string                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetSchemaResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// Service abnormal, the instance 0418 is ceased.
	Message *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params  []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 19D09CCC-F298-4124-849A-AFA217819011
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetSchemaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSchemaResponseBody) GoString() string {
	return s.String()
}

func (s *GetSchemaResponseBody) SetCode(v string) *GetSchemaResponseBody {
	s.Code = &v
	return s
}

func (s *GetSchemaResponseBody) SetData(v *GetSchemaResponseBodyData) *GetSchemaResponseBody {
	s.Data = v
	return s
}

func (s *GetSchemaResponseBody) SetHttpStatusCode(v int32) *GetSchemaResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetSchemaResponseBody) SetMessage(v string) *GetSchemaResponseBody {
	s.Message = &v
	return s
}

func (s *GetSchemaResponseBody) SetParams(v []*string) *GetSchemaResponseBody {
	s.Params = v
	return s
}

func (s *GetSchemaResponseBody) SetRequestId(v string) *GetSchemaResponseBody {
	s.RequestId = &v
	return s
}

type GetSchemaResponseBodyData struct {
	// example:
	//
	// 2021-07-14 10:48:43.0
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// example:
	//
	// false
	Deleted     *bool   `json:"Deleted,omitempty" xml:"Deleted,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// schema id
	//
	// example:
	//
	// profile
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 5e0964fd-951c-4e45-b518-d09d4d2db8ca
	InstanceId *string                         `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Properties map[string]*DataPropertiesValue `json:"Properties,omitempty" xml:"Properties,omitempty"`
	// example:
	//
	// 2021-07-14 10:48:43.0
	UpdatedTime *string `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
}

func (s GetSchemaResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetSchemaResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetSchemaResponseBodyData) SetCreatedTime(v string) *GetSchemaResponseBodyData {
	s.CreatedTime = &v
	return s
}

func (s *GetSchemaResponseBodyData) SetDeleted(v bool) *GetSchemaResponseBodyData {
	s.Deleted = &v
	return s
}

func (s *GetSchemaResponseBodyData) SetDescription(v string) *GetSchemaResponseBodyData {
	s.Description = &v
	return s
}

func (s *GetSchemaResponseBodyData) SetId(v string) *GetSchemaResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetSchemaResponseBodyData) SetInstanceId(v string) *GetSchemaResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetSchemaResponseBodyData) SetProperties(v map[string]*DataPropertiesValue) *GetSchemaResponseBodyData {
	s.Properties = v
	return s
}

func (s *GetSchemaResponseBodyData) SetUpdatedTime(v string) *GetSchemaResponseBodyData {
	s.UpdatedTime = &v
	return s
}

type GetSchemaResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSchemaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSchemaResponse) GoString() string {
	return s.String()
}

func (s *GetSchemaResponse) SetHeaders(v map[string]*string) *GetSchemaResponse {
	s.Headers = v
	return s
}

func (s *GetSchemaResponse) SetStatusCode(v int32) *GetSchemaResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSchemaResponse) SetBody(v *GetSchemaResponseBody) *GetSchemaResponse {
	s.Body = v
	return s
}

type GetSkillGroupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s GetSkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSkillGroupRequest) GoString() string {
	return s.String()
}

func (s *GetSkillGroupRequest) SetInstanceId(v string) *GetSkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *GetSkillGroupRequest) SetSkillGroupId(v string) *GetSkillGroupRequest {
	s.SkillGroupId = &v
	return s
}

type GetSkillGroupResponseBody struct {
	// example:
	//
	// OK
	Code *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetSkillGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// CF1C21B9-2D49-4B54-880F-FBE248C16903
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetSkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *GetSkillGroupResponseBody) SetCode(v string) *GetSkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *GetSkillGroupResponseBody) SetData(v *GetSkillGroupResponseBodyData) *GetSkillGroupResponseBody {
	s.Data = v
	return s
}

func (s *GetSkillGroupResponseBody) SetHttpStatusCode(v int32) *GetSkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetSkillGroupResponseBody) SetMessage(v string) *GetSkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *GetSkillGroupResponseBody) SetRequestId(v string) *GetSkillGroupResponseBody {
	s.RequestId = &v
	return s
}

type GetSkillGroupResponseBodyData struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MediaType  *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// skillgroup
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s GetSkillGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetSkillGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetSkillGroupResponseBodyData) SetDescription(v string) *GetSkillGroupResponseBodyData {
	s.Description = &v
	return s
}

func (s *GetSkillGroupResponseBodyData) SetDisplayName(v string) *GetSkillGroupResponseBodyData {
	s.DisplayName = &v
	return s
}

func (s *GetSkillGroupResponseBodyData) SetInstanceId(v string) *GetSkillGroupResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetSkillGroupResponseBodyData) SetMediaType(v string) *GetSkillGroupResponseBodyData {
	s.MediaType = &v
	return s
}

func (s *GetSkillGroupResponseBodyData) SetName(v string) *GetSkillGroupResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetSkillGroupResponseBodyData) SetSkillGroupId(v string) *GetSkillGroupResponseBodyData {
	s.SkillGroupId = &v
	return s
}

type GetSkillGroupResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSkillGroupResponse) GoString() string {
	return s.String()
}

func (s *GetSkillGroupResponse) SetHeaders(v map[string]*string) *GetSkillGroupResponse {
	s.Headers = v
	return s
}

func (s *GetSkillGroupResponse) SetStatusCode(v int32) *GetSkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSkillGroupResponse) SetBody(v *GetSkillGroupResponseBody) *GetSkillGroupResponse {
	s.Body = v
	return s
}

type GetTicketRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 3d26b90a-c5d2-4b09-8219-********
	TicketId *string `json:"TicketId,omitempty" xml:"TicketId,omitempty"`
}

func (s GetTicketRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTicketRequest) GoString() string {
	return s.String()
}

func (s *GetTicketRequest) SetInstanceId(v string) *GetTicketRequest {
	s.InstanceId = &v
	return s
}

func (s *GetTicketRequest) SetTicketId(v string) *GetTicketRequest {
	s.TicketId = &v
	return s
}

type GetTicketResponseBody struct {
	// example:
	//
	// OK
	Code *string                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetTicketResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// BF268B34-09C2-43FD-BAC4-5D31EA633111
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetTicketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTicketResponseBody) GoString() string {
	return s.String()
}

func (s *GetTicketResponseBody) SetCode(v string) *GetTicketResponseBody {
	s.Code = &v
	return s
}

func (s *GetTicketResponseBody) SetData(v *GetTicketResponseBodyData) *GetTicketResponseBody {
	s.Data = v
	return s
}

func (s *GetTicketResponseBody) SetHttpStatusCode(v int32) *GetTicketResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetTicketResponseBody) SetMessage(v string) *GetTicketResponseBody {
	s.Message = &v
	return s
}

func (s *GetTicketResponseBody) SetParams(v []*string) *GetTicketResponseBody {
	s.Params = v
	return s
}

func (s *GetTicketResponseBody) SetRequestId(v string) *GetTicketResponseBody {
	s.RequestId = &v
	return s
}

type GetTicketResponseBodyData struct {
	// example:
	//
	// agent1@ccc-test
	Assignee     *string `json:"Assignee,omitempty" xml:"Assignee,omitempty"`
	AssigneeName *string `json:"AssigneeName,omitempty" xml:"AssigneeName,omitempty"`
	// example:
	//
	// 8939-4223-86d0-6bd187905cc8
	CategoryId   *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	CategoryName *string `json:"CategoryName,omitempty" xml:"CategoryName,omitempty"`
	// example:
	//
	// Completed
	CloseCode *string `json:"CloseCode,omitempty" xml:"CloseCode,omitempty"`
	Comment   *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	Context   *string `json:"Context,omitempty" xml:"Context,omitempty"`
	// example:
	//
	// 1620259200000
	CreatedTime *int64 `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// example:
	//
	// creator@ccc-test
	Creator     *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	CreatorName *string `json:"CreatorName,omitempty" xml:"CreatorName,omitempty"`
	// example:
	//
	// 912f0b78-6639-4a93-ae18-0d832885c27e
	CurrentTaskId   *string `json:"CurrentTaskId,omitempty" xml:"CurrentTaskId,omitempty"`
	CurrentTaskName *string `json:"CurrentTaskName,omitempty" xml:"CurrentTaskName,omitempty"`
	// example:
	//
	// 1693793208075
	CurrentTaskStartTime *int64 `json:"CurrentTaskStartTime,omitempty" xml:"CurrentTaskStartTime,omitempty"`
	// example:
	//
	// 4223-86d0-6bd187905-891798749
	CustomerId *string `json:"CustomerId,omitempty" xml:"CustomerId,omitempty"`
	// example:
	//
	// 1687846259999
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-399383842187575296
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// Audio
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 1620259200000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// Processing
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// ccc-test_43c2671b-8939-4223-86d0-6bd187905cc8_*****0666238
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// 0
	TemplateVersion *string `json:"TemplateVersion,omitempty" xml:"TemplateVersion,omitempty"`
	// example:
	//
	// b3a6a131-359e-46bd-9bc5-1f5cb0ea093f
	TicketId *string `json:"TicketId,omitempty" xml:"TicketId,omitempty"`
	Title    *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 1693793208075
	UpdatedTime *int64 `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
}

func (s GetTicketResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetTicketResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetTicketResponseBodyData) SetAssignee(v string) *GetTicketResponseBodyData {
	s.Assignee = &v
	return s
}

func (s *GetTicketResponseBodyData) SetAssigneeName(v string) *GetTicketResponseBodyData {
	s.AssigneeName = &v
	return s
}

func (s *GetTicketResponseBodyData) SetCategoryId(v string) *GetTicketResponseBodyData {
	s.CategoryId = &v
	return s
}

func (s *GetTicketResponseBodyData) SetCategoryName(v string) *GetTicketResponseBodyData {
	s.CategoryName = &v
	return s
}

func (s *GetTicketResponseBodyData) SetCloseCode(v string) *GetTicketResponseBodyData {
	s.CloseCode = &v
	return s
}

func (s *GetTicketResponseBodyData) SetComment(v string) *GetTicketResponseBodyData {
	s.Comment = &v
	return s
}

func (s *GetTicketResponseBodyData) SetContext(v string) *GetTicketResponseBodyData {
	s.Context = &v
	return s
}

func (s *GetTicketResponseBodyData) SetCreatedTime(v int64) *GetTicketResponseBodyData {
	s.CreatedTime = &v
	return s
}

func (s *GetTicketResponseBodyData) SetCreator(v string) *GetTicketResponseBodyData {
	s.Creator = &v
	return s
}

func (s *GetTicketResponseBodyData) SetCreatorName(v string) *GetTicketResponseBodyData {
	s.CreatorName = &v
	return s
}

func (s *GetTicketResponseBodyData) SetCurrentTaskId(v string) *GetTicketResponseBodyData {
	s.CurrentTaskId = &v
	return s
}

func (s *GetTicketResponseBodyData) SetCurrentTaskName(v string) *GetTicketResponseBodyData {
	s.CurrentTaskName = &v
	return s
}

func (s *GetTicketResponseBodyData) SetCurrentTaskStartTime(v int64) *GetTicketResponseBodyData {
	s.CurrentTaskStartTime = &v
	return s
}

func (s *GetTicketResponseBodyData) SetCustomerId(v string) *GetTicketResponseBodyData {
	s.CustomerId = &v
	return s
}

func (s *GetTicketResponseBodyData) SetEndTime(v int64) *GetTicketResponseBodyData {
	s.EndTime = &v
	return s
}

func (s *GetTicketResponseBodyData) SetInstanceId(v string) *GetTicketResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetTicketResponseBodyData) SetJobId(v string) *GetTicketResponseBodyData {
	s.JobId = &v
	return s
}

func (s *GetTicketResponseBodyData) SetSource(v string) *GetTicketResponseBodyData {
	s.Source = &v
	return s
}

func (s *GetTicketResponseBodyData) SetStartTime(v int64) *GetTicketResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *GetTicketResponseBodyData) SetState(v string) *GetTicketResponseBodyData {
	s.State = &v
	return s
}

func (s *GetTicketResponseBodyData) SetTemplateId(v string) *GetTicketResponseBodyData {
	s.TemplateId = &v
	return s
}

func (s *GetTicketResponseBodyData) SetTemplateVersion(v string) *GetTicketResponseBodyData {
	s.TemplateVersion = &v
	return s
}

func (s *GetTicketResponseBodyData) SetTicketId(v string) *GetTicketResponseBodyData {
	s.TicketId = &v
	return s
}

func (s *GetTicketResponseBodyData) SetTitle(v string) *GetTicketResponseBodyData {
	s.Title = &v
	return s
}

func (s *GetTicketResponseBodyData) SetUpdatedTime(v int64) *GetTicketResponseBodyData {
	s.UpdatedTime = &v
	return s
}

type GetTicketResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTicketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTicketResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTicketResponse) GoString() string {
	return s.String()
}

func (s *GetTicketResponse) SetHeaders(v map[string]*string) *GetTicketResponse {
	s.Headers = v
	return s
}

func (s *GetTicketResponse) SetStatusCode(v int32) *GetTicketResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTicketResponse) SetBody(v *GetTicketResponseBody) *GetTicketResponse {
	s.Body = v
	return s
}

type GetTicketSummaryReportRequest struct {
	// example:
	//
	// assignee@ccc-test
	Assignee *string `json:"Assignee,omitempty" xml:"Assignee,omitempty"`
	// example:
	//
	// Agent
	AssigneeType *string `json:"AssigneeType,omitempty" xml:"AssigneeType,omitempty"`
	// example:
	//
	// 43c2671b-***-***-86d0-6bd187905cc8
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	// example:
	//
	// creator@ccc-test
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// example:
	//
	// 1719590399999
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// participant@ccc-test
	Participant *string `json:"Participant,omitempty" xml:"Participant,omitempty"`
	// example:
	//
	// 1716998400000
	StartTime *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	State     *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s GetTicketSummaryReportRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTicketSummaryReportRequest) GoString() string {
	return s.String()
}

func (s *GetTicketSummaryReportRequest) SetAssignee(v string) *GetTicketSummaryReportRequest {
	s.Assignee = &v
	return s
}

func (s *GetTicketSummaryReportRequest) SetAssigneeType(v string) *GetTicketSummaryReportRequest {
	s.AssigneeType = &v
	return s
}

func (s *GetTicketSummaryReportRequest) SetCategoryId(v string) *GetTicketSummaryReportRequest {
	s.CategoryId = &v
	return s
}

func (s *GetTicketSummaryReportRequest) SetCreator(v string) *GetTicketSummaryReportRequest {
	s.Creator = &v
	return s
}

func (s *GetTicketSummaryReportRequest) SetEndTime(v int64) *GetTicketSummaryReportRequest {
	s.EndTime = &v
	return s
}

func (s *GetTicketSummaryReportRequest) SetInstanceId(v string) *GetTicketSummaryReportRequest {
	s.InstanceId = &v
	return s
}

func (s *GetTicketSummaryReportRequest) SetPageNumber(v int32) *GetTicketSummaryReportRequest {
	s.PageNumber = &v
	return s
}

func (s *GetTicketSummaryReportRequest) SetPageSize(v int32) *GetTicketSummaryReportRequest {
	s.PageSize = &v
	return s
}

func (s *GetTicketSummaryReportRequest) SetParticipant(v string) *GetTicketSummaryReportRequest {
	s.Participant = &v
	return s
}

func (s *GetTicketSummaryReportRequest) SetStartTime(v int64) *GetTicketSummaryReportRequest {
	s.StartTime = &v
	return s
}

func (s *GetTicketSummaryReportRequest) SetState(v string) *GetTicketSummaryReportRequest {
	s.State = &v
	return s
}

type GetTicketSummaryReportResponseBody struct {
	// example:
	//
	// OK
	Code *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetTicketSummaryReportResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int64  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EAF3C248-E123-441B-A545-B6CD02E98EED
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetTicketSummaryReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTicketSummaryReportResponseBody) GoString() string {
	return s.String()
}

func (s *GetTicketSummaryReportResponseBody) SetCode(v string) *GetTicketSummaryReportResponseBody {
	s.Code = &v
	return s
}

func (s *GetTicketSummaryReportResponseBody) SetData(v *GetTicketSummaryReportResponseBodyData) *GetTicketSummaryReportResponseBody {
	s.Data = v
	return s
}

func (s *GetTicketSummaryReportResponseBody) SetHttpStatusCode(v int64) *GetTicketSummaryReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetTicketSummaryReportResponseBody) SetMessage(v string) *GetTicketSummaryReportResponseBody {
	s.Message = &v
	return s
}

func (s *GetTicketSummaryReportResponseBody) SetRequestId(v string) *GetTicketSummaryReportResponseBody {
	s.RequestId = &v
	return s
}

type GetTicketSummaryReportResponseBodyData struct {
	// example:
	//
	// 3
	TicketsAssigned *string `json:"TicketsAssigned,omitempty" xml:"TicketsAssigned,omitempty"`
	// example:
	//
	// 10
	TicketsCreated *string `json:"TicketsCreated,omitempty" xml:"TicketsCreated,omitempty"`
	// example:
	//
	// 5
	TicketsParticipated *string `json:"TicketsParticipated,omitempty" xml:"TicketsParticipated,omitempty"`
}

func (s GetTicketSummaryReportResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetTicketSummaryReportResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetTicketSummaryReportResponseBodyData) SetTicketsAssigned(v string) *GetTicketSummaryReportResponseBodyData {
	s.TicketsAssigned = &v
	return s
}

func (s *GetTicketSummaryReportResponseBodyData) SetTicketsCreated(v string) *GetTicketSummaryReportResponseBodyData {
	s.TicketsCreated = &v
	return s
}

func (s *GetTicketSummaryReportResponseBodyData) SetTicketsParticipated(v string) *GetTicketSummaryReportResponseBodyData {
	s.TicketsParticipated = &v
	return s
}

type GetTicketSummaryReportResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTicketSummaryReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTicketSummaryReportResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTicketSummaryReportResponse) GoString() string {
	return s.String()
}

func (s *GetTicketSummaryReportResponse) SetHeaders(v map[string]*string) *GetTicketSummaryReportResponse {
	s.Headers = v
	return s
}

func (s *GetTicketSummaryReportResponse) SetStatusCode(v int32) *GetTicketSummaryReportResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTicketSummaryReportResponse) SetBody(v *GetTicketSummaryReportResponseBody) *GetTicketSummaryReportResponse {
	s.Body = v
	return s
}

type GetTicketTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 4ca2e2-c8d19b82c-d7ce393ac8197d3ab
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// 1703517780627
	TemplateVersion *string `json:"TemplateVersion,omitempty" xml:"TemplateVersion,omitempty"`
}

func (s GetTicketTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTicketTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetTicketTemplateRequest) SetInstanceId(v string) *GetTicketTemplateRequest {
	s.InstanceId = &v
	return s
}

func (s *GetTicketTemplateRequest) SetTemplateId(v string) *GetTicketTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *GetTicketTemplateRequest) SetTemplateVersion(v string) *GetTicketTemplateRequest {
	s.TemplateVersion = &v
	return s
}

type GetTicketTemplateResponseBody struct {
	// example:
	//
	// OK
	Code *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetTicketTemplateResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// BF268B34-09C2-43FD-BAC4-5D31EA633111
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetTicketTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTicketTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetTicketTemplateResponseBody) SetCode(v string) *GetTicketTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *GetTicketTemplateResponseBody) SetData(v *GetTicketTemplateResponseBodyData) *GetTicketTemplateResponseBody {
	s.Data = v
	return s
}

func (s *GetTicketTemplateResponseBody) SetHttpStatusCode(v int32) *GetTicketTemplateResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetTicketTemplateResponseBody) SetMessage(v string) *GetTicketTemplateResponseBody {
	s.Message = &v
	return s
}

func (s *GetTicketTemplateResponseBody) SetParams(v []*string) *GetTicketTemplateResponseBody {
	s.Params = v
	return s
}

func (s *GetTicketTemplateResponseBody) SetRequestId(v string) *GetTicketTemplateResponseBody {
	s.RequestId = &v
	return s
}

type GetTicketTemplateResponseBodyData struct {
	// example:
	//
	// 43c2671b-****-4223-86d0-6bd187905cc8
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	// example:
	//
	// editor-xxx@ccc-test
	Editor *string `json:"Editor,omitempty" xml:"Editor,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProcessDefinition *string `json:"ProcessDefinition,omitempty" xml:"ProcessDefinition,omitempty"`
	// example:
	//
	// Enabled
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// 4ca2e2-c8d19b82c-d7ce393ac8197d3ab
	TemplateId   *string                                          `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TicketFields []*GetTicketTemplateResponseBodyDataTicketFields `json:"TicketFields,omitempty" xml:"TicketFields,omitempty" type:"Repeated"`
	// example:
	//
	// 1717664210000
	UpdatedTime *int64 `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
}

func (s GetTicketTemplateResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetTicketTemplateResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetTicketTemplateResponseBodyData) SetCategoryId(v string) *GetTicketTemplateResponseBodyData {
	s.CategoryId = &v
	return s
}

func (s *GetTicketTemplateResponseBodyData) SetEditor(v string) *GetTicketTemplateResponseBodyData {
	s.Editor = &v
	return s
}

func (s *GetTicketTemplateResponseBodyData) SetInstanceId(v string) *GetTicketTemplateResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetTicketTemplateResponseBodyData) SetName(v string) *GetTicketTemplateResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetTicketTemplateResponseBodyData) SetProcessDefinition(v string) *GetTicketTemplateResponseBodyData {
	s.ProcessDefinition = &v
	return s
}

func (s *GetTicketTemplateResponseBodyData) SetState(v string) *GetTicketTemplateResponseBodyData {
	s.State = &v
	return s
}

func (s *GetTicketTemplateResponseBodyData) SetTemplateId(v string) *GetTicketTemplateResponseBodyData {
	s.TemplateId = &v
	return s
}

func (s *GetTicketTemplateResponseBodyData) SetTicketFields(v []*GetTicketTemplateResponseBodyDataTicketFields) *GetTicketTemplateResponseBodyData {
	s.TicketFields = v
	return s
}

func (s *GetTicketTemplateResponseBodyData) SetUpdatedTime(v int64) *GetTicketTemplateResponseBodyData {
	s.UpdatedTime = &v
	return s
}

type GetTicketTemplateResponseBodyDataTicketFields struct {
	// example:
	//
	// false
	Array *bool `json:"Array,omitempty" xml:"Array,omitempty"`
	// example:
	//
	// {}
	Attributes *string `json:"Attributes,omitempty" xml:"Attributes,omitempty"`
	// example:
	//
	// 1717664210000
	CreatedTime *int64 `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// example:
	//
	// creator@cccV2-kmz
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// example:
	//
	// string
	DataType    *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// false
	Disabled    *bool   `json:"Disabled,omitempty" xml:"Disabled,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// 1
	DisplayOrder *int32 `json:"DisplayOrder,omitempty" xml:"DisplayOrder,omitempty"`
	// example:
	//
	// textbox
	EditorType *string `json:"EditorType,omitempty" xml:"EditorType,omitempty"`
	// example:
	//
	// 30
	MaxLength *int32 `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	// example:
	//
	// 10
	Maximum *float64 `json:"Maximum,omitempty" xml:"Maximum,omitempty"`
	// example:
	//
	// 1
	MinLength *int32 `json:"MinLength,omitempty" xml:"MinLength,omitempty"`
	// example:
	//
	// 1
	Minimum *float64 `json:"Minimum,omitempty" xml:"Minimum,omitempty"`
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// ^
	Pattern             *string `json:"Pattern,omitempty" xml:"Pattern,omitempty"`
	PatternErrorMessage *string `json:"PatternErrorMessage,omitempty" xml:"PatternErrorMessage,omitempty"`
	// example:
	//
	// false
	ReadOnly *bool `json:"ReadOnly,omitempty" xml:"ReadOnly,omitempty"`
	// example:
	//
	// false
	Required *bool `json:"Required,omitempty" xml:"Required,omitempty"`
	// example:
	//
	// false
	System *bool `json:"System,omitempty" xml:"System,omitempty"`
	// example:
	//
	// 1717664210000
	UpdatedTime *int64 `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
}

func (s GetTicketTemplateResponseBodyDataTicketFields) String() string {
	return tea.Prettify(s)
}

func (s GetTicketTemplateResponseBodyDataTicketFields) GoString() string {
	return s.String()
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetArray(v bool) *GetTicketTemplateResponseBodyDataTicketFields {
	s.Array = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetAttributes(v string) *GetTicketTemplateResponseBodyDataTicketFields {
	s.Attributes = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetCreatedTime(v int64) *GetTicketTemplateResponseBodyDataTicketFields {
	s.CreatedTime = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetCreator(v string) *GetTicketTemplateResponseBodyDataTicketFields {
	s.Creator = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetDataType(v string) *GetTicketTemplateResponseBodyDataTicketFields {
	s.DataType = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetDescription(v string) *GetTicketTemplateResponseBodyDataTicketFields {
	s.Description = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetDisabled(v bool) *GetTicketTemplateResponseBodyDataTicketFields {
	s.Disabled = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetDisplayName(v string) *GetTicketTemplateResponseBodyDataTicketFields {
	s.DisplayName = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetDisplayOrder(v int32) *GetTicketTemplateResponseBodyDataTicketFields {
	s.DisplayOrder = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetEditorType(v string) *GetTicketTemplateResponseBodyDataTicketFields {
	s.EditorType = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetMaxLength(v int32) *GetTicketTemplateResponseBodyDataTicketFields {
	s.MaxLength = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetMaximum(v float64) *GetTicketTemplateResponseBodyDataTicketFields {
	s.Maximum = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetMinLength(v int32) *GetTicketTemplateResponseBodyDataTicketFields {
	s.MinLength = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetMinimum(v float64) *GetTicketTemplateResponseBodyDataTicketFields {
	s.Minimum = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetName(v string) *GetTicketTemplateResponseBodyDataTicketFields {
	s.Name = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetPattern(v string) *GetTicketTemplateResponseBodyDataTicketFields {
	s.Pattern = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetPatternErrorMessage(v string) *GetTicketTemplateResponseBodyDataTicketFields {
	s.PatternErrorMessage = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetReadOnly(v bool) *GetTicketTemplateResponseBodyDataTicketFields {
	s.ReadOnly = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetRequired(v bool) *GetTicketTemplateResponseBodyDataTicketFields {
	s.Required = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetSystem(v bool) *GetTicketTemplateResponseBodyDataTicketFields {
	s.System = &v
	return s
}

func (s *GetTicketTemplateResponseBodyDataTicketFields) SetUpdatedTime(v int64) *GetTicketTemplateResponseBodyDataTicketFields {
	s.UpdatedTime = &v
	return s
}

type GetTicketTemplateResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTicketTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTicketTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTicketTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetTicketTemplateResponse) SetHeaders(v map[string]*string) *GetTicketTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetTicketTemplateResponse) SetStatusCode(v int32) *GetTicketTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTicketTemplateResponse) SetBody(v *GetTicketTemplateResponseBody) *GetTicketTemplateResponse {
	s.Body = v
	return s
}

type GetTurnCredentialsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetTurnCredentialsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTurnCredentialsRequest) GoString() string {
	return s.String()
}

func (s *GetTurnCredentialsRequest) SetInstanceId(v string) *GetTurnCredentialsRequest {
	s.InstanceId = &v
	return s
}

func (s *GetTurnCredentialsRequest) SetUserId(v string) *GetTurnCredentialsRequest {
	s.UserId = &v
	return s
}

type GetTurnCredentialsResponseBody struct {
	// example:
	//
	// OK
	Code *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetTurnCredentialsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetTurnCredentialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTurnCredentialsResponseBody) GoString() string {
	return s.String()
}

func (s *GetTurnCredentialsResponseBody) SetCode(v string) *GetTurnCredentialsResponseBody {
	s.Code = &v
	return s
}

func (s *GetTurnCredentialsResponseBody) SetData(v *GetTurnCredentialsResponseBodyData) *GetTurnCredentialsResponseBody {
	s.Data = v
	return s
}

func (s *GetTurnCredentialsResponseBody) SetHttpStatusCode(v int32) *GetTurnCredentialsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetTurnCredentialsResponseBody) SetMessage(v string) *GetTurnCredentialsResponseBody {
	s.Message = &v
	return s
}

func (s *GetTurnCredentialsResponseBody) SetParams(v []*string) *GetTurnCredentialsResponseBody {
	s.Params = v
	return s
}

func (s *GetTurnCredentialsResponseBody) SetRequestId(v string) *GetTurnCredentialsResponseBody {
	s.RequestId = &v
	return s
}

type GetTurnCredentialsResponseBodyData struct {
	// example:
	//
	// M0NQNG/uRUrfIxW7er/S9gKX****
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// example:
	//
	// 1602585817:****
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s GetTurnCredentialsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetTurnCredentialsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetTurnCredentialsResponseBodyData) SetPassword(v string) *GetTurnCredentialsResponseBodyData {
	s.Password = &v
	return s
}

func (s *GetTurnCredentialsResponseBodyData) SetUserName(v string) *GetTurnCredentialsResponseBodyData {
	s.UserName = &v
	return s
}

type GetTurnCredentialsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTurnCredentialsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTurnCredentialsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTurnCredentialsResponse) GoString() string {
	return s.String()
}

func (s *GetTurnCredentialsResponse) SetHeaders(v map[string]*string) *GetTurnCredentialsResponse {
	s.Headers = v
	return s
}

func (s *GetTurnCredentialsResponse) SetStatusCode(v int32) *GetTurnCredentialsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTurnCredentialsResponse) SetBody(v *GetTurnCredentialsResponseBody) *GetTurnCredentialsResponse {
	s.Body = v
	return s
}

type GetTurnServerListRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetTurnServerListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTurnServerListRequest) GoString() string {
	return s.String()
}

func (s *GetTurnServerListRequest) SetInstanceId(v string) *GetTurnServerListRequest {
	s.InstanceId = &v
	return s
}

type GetTurnServerListResponseBody struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	RequestId      *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetTurnServerListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTurnServerListResponseBody) GoString() string {
	return s.String()
}

func (s *GetTurnServerListResponseBody) SetCode(v string) *GetTurnServerListResponseBody {
	s.Code = &v
	return s
}

func (s *GetTurnServerListResponseBody) SetData(v string) *GetTurnServerListResponseBody {
	s.Data = &v
	return s
}

func (s *GetTurnServerListResponseBody) SetHttpStatusCode(v int32) *GetTurnServerListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetTurnServerListResponseBody) SetMessage(v string) *GetTurnServerListResponseBody {
	s.Message = &v
	return s
}

func (s *GetTurnServerListResponseBody) SetParams(v []*string) *GetTurnServerListResponseBody {
	s.Params = v
	return s
}

func (s *GetTurnServerListResponseBody) SetRequestId(v string) *GetTurnServerListResponseBody {
	s.RequestId = &v
	return s
}

type GetTurnServerListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTurnServerListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTurnServerListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTurnServerListResponse) GoString() string {
	return s.String()
}

func (s *GetTurnServerListResponse) SetHeaders(v map[string]*string) *GetTurnServerListResponse {
	s.Headers = v
	return s
}

func (s *GetTurnServerListResponse) SetStatusCode(v int32) *GetTurnServerListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTurnServerListResponse) SetBody(v *GetTurnServerListResponseBody) *GetTurnServerListResponse {
	s.Body = v
	return s
}

type GetUploadAudioDataParamsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// job-38860977107324****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// example:
	//
	// test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetUploadAudioDataParamsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUploadAudioDataParamsRequest) GoString() string {
	return s.String()
}

func (s *GetUploadAudioDataParamsRequest) SetContactId(v string) *GetUploadAudioDataParamsRequest {
	s.ContactId = &v
	return s
}

func (s *GetUploadAudioDataParamsRequest) SetInstanceId(v string) *GetUploadAudioDataParamsRequest {
	s.InstanceId = &v
	return s
}

type GetUploadAudioDataParamsResponseBody struct {
	// example:
	//
	// OK
	Code *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetUploadAudioDataParamsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 03C67DAD-EB26-41D8-949D-9B0C470FB716
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetUploadAudioDataParamsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUploadAudioDataParamsResponseBody) GoString() string {
	return s.String()
}

func (s *GetUploadAudioDataParamsResponseBody) SetCode(v string) *GetUploadAudioDataParamsResponseBody {
	s.Code = &v
	return s
}

func (s *GetUploadAudioDataParamsResponseBody) SetData(v *GetUploadAudioDataParamsResponseBodyData) *GetUploadAudioDataParamsResponseBody {
	s.Data = v
	return s
}

func (s *GetUploadAudioDataParamsResponseBody) SetHttpStatusCode(v int32) *GetUploadAudioDataParamsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetUploadAudioDataParamsResponseBody) SetMessage(v string) *GetUploadAudioDataParamsResponseBody {
	s.Message = &v
	return s
}

func (s *GetUploadAudioDataParamsResponseBody) SetRequestId(v string) *GetUploadAudioDataParamsResponseBody {
	s.RequestId = &v
	return s
}

type GetUploadAudioDataParamsResponseBodyData struct {
	ParamsStr *string `json:"ParamsStr,omitempty" xml:"ParamsStr,omitempty"`
}

func (s GetUploadAudioDataParamsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetUploadAudioDataParamsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetUploadAudioDataParamsResponseBodyData) SetParamsStr(v string) *GetUploadAudioDataParamsResponseBodyData {
	s.ParamsStr = &v
	return s
}

type GetUploadAudioDataParamsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUploadAudioDataParamsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUploadAudioDataParamsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUploadAudioDataParamsResponse) GoString() string {
	return s.String()
}

func (s *GetUploadAudioDataParamsResponse) SetHeaders(v map[string]*string) *GetUploadAudioDataParamsResponse {
	s.Headers = v
	return s
}

func (s *GetUploadAudioDataParamsResponse) SetStatusCode(v int32) *GetUploadAudioDataParamsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUploadAudioDataParamsResponse) SetBody(v *GetUploadAudioDataParamsResponseBody) *GetUploadAudioDataParamsResponse {
	s.Body = v
	return s
}

type GetUserRequest struct {
	// example:
	//
	// 8003****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetUserRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserRequest) GoString() string {
	return s.String()
}

func (s *GetUserRequest) SetExtension(v string) *GetUserRequest {
	s.Extension = &v
	return s
}

func (s *GetUserRequest) SetInstanceId(v string) *GetUserRequest {
	s.InstanceId = &v
	return s
}

func (s *GetUserRequest) SetUserId(v string) *GetUserRequest {
	s.UserId = &v
	return s
}

type GetUserResponseBody struct {
	// example:
	//
	// OK
	Code *string                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetUserResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserResponseBody) SetCode(v string) *GetUserResponseBody {
	s.Code = &v
	return s
}

func (s *GetUserResponseBody) SetData(v *GetUserResponseBodyData) *GetUserResponseBody {
	s.Data = v
	return s
}

func (s *GetUserResponseBody) SetHttpStatusCode(v int32) *GetUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetUserResponseBody) SetMessage(v string) *GetUserResponseBody {
	s.Message = &v
	return s
}

func (s *GetUserResponseBody) SetParams(v []*string) *GetUserResponseBody {
	s.Params = v
	return s
}

func (s *GetUserResponseBody) SetRequestId(v string) *GetUserResponseBody {
	s.RequestId = &v
	return s
}

type GetUserResponseBodyData struct {
	AvatarUrl *string `json:"AvatarUrl,omitempty" xml:"AvatarUrl,omitempty"`
	// example:
	//
	// 8033****
	DeviceExt *string `json:"DeviceExt,omitempty" xml:"DeviceExt,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// OFFLINE
	DeviceState *string `json:"DeviceState,omitempty" xml:"DeviceState,omitempty"`
	// example:
	//
	// 1001
	DisplayId   *string `json:"DisplayId,omitempty" xml:"DisplayId,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// example:
	//
	// 8003****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// agent
	LoginName *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	// example:
	//
	// 1391234****
	Mobile   *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	Nickname *string `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
	// example:
	//
	// Admin@ccc-test
	RoleId *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	// example:
	//
	// Admin
	RoleName *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s GetUserResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetUserResponseBodyData) SetAvatarUrl(v string) *GetUserResponseBodyData {
	s.AvatarUrl = &v
	return s
}

func (s *GetUserResponseBodyData) SetDeviceExt(v string) *GetUserResponseBodyData {
	s.DeviceExt = &v
	return s
}

func (s *GetUserResponseBodyData) SetDeviceId(v string) *GetUserResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *GetUserResponseBodyData) SetDeviceState(v string) *GetUserResponseBodyData {
	s.DeviceState = &v
	return s
}

func (s *GetUserResponseBodyData) SetDisplayId(v string) *GetUserResponseBodyData {
	s.DisplayId = &v
	return s
}

func (s *GetUserResponseBodyData) SetDisplayName(v string) *GetUserResponseBodyData {
	s.DisplayName = &v
	return s
}

func (s *GetUserResponseBodyData) SetEmail(v string) *GetUserResponseBodyData {
	s.Email = &v
	return s
}

func (s *GetUserResponseBodyData) SetExtension(v string) *GetUserResponseBodyData {
	s.Extension = &v
	return s
}

func (s *GetUserResponseBodyData) SetInstanceId(v string) *GetUserResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetUserResponseBodyData) SetLoginName(v string) *GetUserResponseBodyData {
	s.LoginName = &v
	return s
}

func (s *GetUserResponseBodyData) SetMobile(v string) *GetUserResponseBodyData {
	s.Mobile = &v
	return s
}

func (s *GetUserResponseBodyData) SetNickname(v string) *GetUserResponseBodyData {
	s.Nickname = &v
	return s
}

func (s *GetUserResponseBodyData) SetRoleId(v string) *GetUserResponseBodyData {
	s.RoleId = &v
	return s
}

func (s *GetUserResponseBodyData) SetRoleName(v string) *GetUserResponseBodyData {
	s.RoleName = &v
	return s
}

func (s *GetUserResponseBodyData) SetUserId(v string) *GetUserResponseBodyData {
	s.UserId = &v
	return s
}

func (s *GetUserResponseBodyData) SetWorkMode(v string) *GetUserResponseBodyData {
	s.WorkMode = &v
	return s
}

type GetUserResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUserResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponse) GoString() string {
	return s.String()
}

func (s *GetUserResponse) SetHeaders(v map[string]*string) *GetUserResponse {
	s.Headers = v
	return s
}

func (s *GetUserResponse) SetStatusCode(v int32) *GetUserResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUserResponse) SetBody(v *GetUserResponseBody) *GetUserResponse {
	s.Body = v
	return s
}

type GetVideoRequest struct {
	// This parameter is required.
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// This parameter is required.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetVideoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetVideoRequest) GoString() string {
	return s.String()
}

func (s *GetVideoRequest) SetContactId(v string) *GetVideoRequest {
	s.ContactId = &v
	return s
}

func (s *GetVideoRequest) SetInstanceId(v string) *GetVideoRequest {
	s.InstanceId = &v
	return s
}

type GetVideoResponseBody struct {
	Code           *string                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *GetVideoResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetVideoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetVideoResponseBody) GoString() string {
	return s.String()
}

func (s *GetVideoResponseBody) SetCode(v string) *GetVideoResponseBody {
	s.Code = &v
	return s
}

func (s *GetVideoResponseBody) SetData(v *GetVideoResponseBodyData) *GetVideoResponseBody {
	s.Data = v
	return s
}

func (s *GetVideoResponseBody) SetHttpStatusCode(v int32) *GetVideoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetVideoResponseBody) SetMessage(v string) *GetVideoResponseBody {
	s.Message = &v
	return s
}

func (s *GetVideoResponseBody) SetRequestId(v string) *GetVideoResponseBody {
	s.RequestId = &v
	return s
}

type GetVideoResponseBodyData struct {
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FileUrl  *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
}

func (s GetVideoResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetVideoResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetVideoResponseBodyData) SetFileName(v string) *GetVideoResponseBodyData {
	s.FileName = &v
	return s
}

func (s *GetVideoResponseBodyData) SetFileUrl(v string) *GetVideoResponseBodyData {
	s.FileUrl = &v
	return s
}

type GetVideoResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetVideoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetVideoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetVideoResponse) GoString() string {
	return s.String()
}

func (s *GetVideoResponse) SetHeaders(v map[string]*string) *GetVideoResponse {
	s.Headers = v
	return s
}

func (s *GetVideoResponse) SetStatusCode(v int32) *GetVideoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetVideoResponse) SetBody(v *GetVideoResponseBody) *GetVideoResponse {
	s.Body = v
	return s
}

type GetVisitorLoginDetailsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 4c51c9116c36537cb850dc1081d745df
	ChatDeviceId *string `json:"ChatDeviceId,omitempty" xml:"ChatDeviceId,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 9XYGTGWtq2wFi_Bpg7aUnIoYi_vG_rO3b***YtsxbHRHrYHlz1LDBLJAyZcLxieRQR4h_6AnWvTjJeNU5jgxzO*****bHwej7WgWrmA
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// fcd020fe-d8e4-40e5-8c77-1a272a174a7d
	VisitorId *string `json:"VisitorId,omitempty" xml:"VisitorId,omitempty"`
}

func (s GetVisitorLoginDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetVisitorLoginDetailsRequest) GoString() string {
	return s.String()
}

func (s *GetVisitorLoginDetailsRequest) SetChatDeviceId(v string) *GetVisitorLoginDetailsRequest {
	s.ChatDeviceId = &v
	return s
}

func (s *GetVisitorLoginDetailsRequest) SetInstanceId(v string) *GetVisitorLoginDetailsRequest {
	s.InstanceId = &v
	return s
}

func (s *GetVisitorLoginDetailsRequest) SetToken(v string) *GetVisitorLoginDetailsRequest {
	s.Token = &v
	return s
}

func (s *GetVisitorLoginDetailsRequest) SetVisitorId(v string) *GetVisitorLoginDetailsRequest {
	s.VisitorId = &v
	return s
}

type GetVisitorLoginDetailsResponseBody struct {
	// example:
	//
	// OK
	Code *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetVisitorLoginDetailsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 19D09CCC-F298-4124-849A-AFA217819011
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetVisitorLoginDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetVisitorLoginDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *GetVisitorLoginDetailsResponseBody) SetCode(v string) *GetVisitorLoginDetailsResponseBody {
	s.Code = &v
	return s
}

func (s *GetVisitorLoginDetailsResponseBody) SetData(v *GetVisitorLoginDetailsResponseBodyData) *GetVisitorLoginDetailsResponseBody {
	s.Data = v
	return s
}

func (s *GetVisitorLoginDetailsResponseBody) SetHttpStatusCode(v int32) *GetVisitorLoginDetailsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetVisitorLoginDetailsResponseBody) SetMessage(v string) *GetVisitorLoginDetailsResponseBody {
	s.Message = &v
	return s
}

func (s *GetVisitorLoginDetailsResponseBody) SetParams(v []*string) *GetVisitorLoginDetailsResponseBody {
	s.Params = v
	return s
}

func (s *GetVisitorLoginDetailsResponseBody) SetRequestId(v string) *GetVisitorLoginDetailsResponseBody {
	s.RequestId = &v
	return s
}

type GetVisitorLoginDetailsResponseBodyData struct {
	// example:
	//
	// 7pjxxx
	ChatAppId *string `json:"ChatAppId,omitempty" xml:"ChatAppId,omitempty"`
	// example:
	//
	// 955e4bd7xxxxxxxxxxxxxd7898ba9fa0d0
	ChatAppKey *string `json:"ChatAppKey,omitempty" xml:"ChatAppKey,omitempty"`
	// example:
	//
	// 4c51c9116c36537cb850dc1081d745df
	ChatDeviceId *string `json:"ChatDeviceId,omitempty" xml:"ChatDeviceId,omitempty"`
	// example:
	//
	// {"accessToken":"oauth_cloud_key:+4oJXUAFSWxGD2YuRW4V/oUN0/8qJGNc0I*********n1E3DOr3Q3lX00ZnTpyqRi8Y6hYoLYA7n2ZkWuv485hVtXeSgnIQkKxXPbMgwoLxWaK//lI5Dn/mb4YuDifigv+ZyFzc+07vxm9ZFu/NjA==","accessTokenExpiredTime":86400000,"refreshToken":"oauth_cloud_key:/U+8UueDmpeUszhXC+SWow4pNLZp2C***********U/377BNXF+Mjo1lFgDk6GtEjNNoJpapX2mHH8GcRke2+yKQs/w4gAN9xSMn543Ciung+93pXV6IpQGbEVlu"}
	ChatLoginToken *string `json:"ChatLoginToken,omitempty" xml:"ChatLoginToken,omitempty"`
	// example:
	//
	// wss://wss.im.dingtalk.cn
	ChatServerUrl *string `json:"ChatServerUrl,omitempty" xml:"ChatServerUrl,omitempty"`
	// example:
	//
	// dac9c001****a15684ea91a81317
	ChatUserId *string `json:"ChatUserId,omitempty" xml:"ChatUserId,omitempty"`
}

func (s GetVisitorLoginDetailsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetVisitorLoginDetailsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetVisitorLoginDetailsResponseBodyData) SetChatAppId(v string) *GetVisitorLoginDetailsResponseBodyData {
	s.ChatAppId = &v
	return s
}

func (s *GetVisitorLoginDetailsResponseBodyData) SetChatAppKey(v string) *GetVisitorLoginDetailsResponseBodyData {
	s.ChatAppKey = &v
	return s
}

func (s *GetVisitorLoginDetailsResponseBodyData) SetChatDeviceId(v string) *GetVisitorLoginDetailsResponseBodyData {
	s.ChatDeviceId = &v
	return s
}

func (s *GetVisitorLoginDetailsResponseBodyData) SetChatLoginToken(v string) *GetVisitorLoginDetailsResponseBodyData {
	s.ChatLoginToken = &v
	return s
}

func (s *GetVisitorLoginDetailsResponseBodyData) SetChatServerUrl(v string) *GetVisitorLoginDetailsResponseBodyData {
	s.ChatServerUrl = &v
	return s
}

func (s *GetVisitorLoginDetailsResponseBodyData) SetChatUserId(v string) *GetVisitorLoginDetailsResponseBodyData {
	s.ChatUserId = &v
	return s
}

type GetVisitorLoginDetailsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetVisitorLoginDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetVisitorLoginDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetVisitorLoginDetailsResponse) GoString() string {
	return s.String()
}

func (s *GetVisitorLoginDetailsResponse) SetHeaders(v map[string]*string) *GetVisitorLoginDetailsResponse {
	s.Headers = v
	return s
}

func (s *GetVisitorLoginDetailsResponse) SetStatusCode(v int32) *GetVisitorLoginDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetVisitorLoginDetailsResponse) SetBody(v *GetVisitorLoginDetailsResponseBody) *GetVisitorLoginDetailsResponse {
	s.Body = v
	return s
}

type GetVoicemailRecordingRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// job-12515239414412****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetVoicemailRecordingRequest) String() string {
	return tea.Prettify(s)
}

func (s GetVoicemailRecordingRequest) GoString() string {
	return s.String()
}

func (s *GetVoicemailRecordingRequest) SetContactId(v string) *GetVoicemailRecordingRequest {
	s.ContactId = &v
	return s
}

func (s *GetVoicemailRecordingRequest) SetInstanceId(v string) *GetVoicemailRecordingRequest {
	s.InstanceId = &v
	return s
}

type GetVoicemailRecordingResponseBody struct {
	// example:
	//
	// OK
	Code *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *GetVoicemailRecordingResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetVoicemailRecordingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetVoicemailRecordingResponseBody) GoString() string {
	return s.String()
}

func (s *GetVoicemailRecordingResponseBody) SetCode(v string) *GetVoicemailRecordingResponseBody {
	s.Code = &v
	return s
}

func (s *GetVoicemailRecordingResponseBody) SetData(v *GetVoicemailRecordingResponseBodyData) *GetVoicemailRecordingResponseBody {
	s.Data = v
	return s
}

func (s *GetVoicemailRecordingResponseBody) SetHttpStatusCode(v int32) *GetVoicemailRecordingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetVoicemailRecordingResponseBody) SetMessage(v string) *GetVoicemailRecordingResponseBody {
	s.Message = &v
	return s
}

func (s *GetVoicemailRecordingResponseBody) SetRequestId(v string) *GetVoicemailRecordingResponseBody {
	s.RequestId = &v
	return s
}

type GetVoicemailRecordingResponseBodyData struct {
	// example:
	//
	// voicemail.job-054ded02****.wav
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// https://ccc-v2-online.oss-cn-shanghai.aliyuncs.com/ccc-record-mixed/ccc-test/2022/06/voicemail.job-054ded02****.wav?Expires=1656074923&OSSAccessKeyId=****&Signature=****
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
}

func (s GetVoicemailRecordingResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetVoicemailRecordingResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetVoicemailRecordingResponseBodyData) SetFileName(v string) *GetVoicemailRecordingResponseBodyData {
	s.FileName = &v
	return s
}

func (s *GetVoicemailRecordingResponseBodyData) SetFileUrl(v string) *GetVoicemailRecordingResponseBodyData {
	s.FileUrl = &v
	return s
}

type GetVoicemailRecordingResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetVoicemailRecordingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetVoicemailRecordingResponse) String() string {
	return tea.Prettify(s)
}

func (s GetVoicemailRecordingResponse) GoString() string {
	return s.String()
}

func (s *GetVoicemailRecordingResponse) SetHeaders(v map[string]*string) *GetVoicemailRecordingResponse {
	s.Headers = v
	return s
}

func (s *GetVoicemailRecordingResponse) SetStatusCode(v int32) *GetVoicemailRecordingResponse {
	s.StatusCode = &v
	return s
}

func (s *GetVoicemailRecordingResponse) SetBody(v *GetVoicemailRecordingResponseBody) *GetVoicemailRecordingResponse {
	s.Body = v
	return s
}

type HoldCallRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ch:customer:010123****->1318888****:1609255715825:job-6582589278232****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-6582589278232****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Music *string `json:"Music,omitempty" xml:"Music,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s HoldCallRequest) String() string {
	return tea.Prettify(s)
}

func (s HoldCallRequest) GoString() string {
	return s.String()
}

func (s *HoldCallRequest) SetChannelId(v string) *HoldCallRequest {
	s.ChannelId = &v
	return s
}

func (s *HoldCallRequest) SetDeviceId(v string) *HoldCallRequest {
	s.DeviceId = &v
	return s
}

func (s *HoldCallRequest) SetInstanceId(v string) *HoldCallRequest {
	s.InstanceId = &v
	return s
}

func (s *HoldCallRequest) SetJobId(v string) *HoldCallRequest {
	s.JobId = &v
	return s
}

func (s *HoldCallRequest) SetMusic(v string) *HoldCallRequest {
	s.Music = &v
	return s
}

func (s *HoldCallRequest) SetUserId(v string) *HoldCallRequest {
	s.UserId = &v
	return s
}

type HoldCallResponseBody struct {
	// example:
	//
	// OK
	Code *string                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *HoldCallResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 174F7777-2F6C-4F10-B889-C698E26C1AE0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s HoldCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s HoldCallResponseBody) GoString() string {
	return s.String()
}

func (s *HoldCallResponseBody) SetCode(v string) *HoldCallResponseBody {
	s.Code = &v
	return s
}

func (s *HoldCallResponseBody) SetData(v *HoldCallResponseBodyData) *HoldCallResponseBody {
	s.Data = v
	return s
}

func (s *HoldCallResponseBody) SetHttpStatusCode(v int32) *HoldCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *HoldCallResponseBody) SetMessage(v string) *HoldCallResponseBody {
	s.Message = &v
	return s
}

func (s *HoldCallResponseBody) SetParams(v []*string) *HoldCallResponseBody {
	s.Params = v
	return s
}

func (s *HoldCallResponseBody) SetRequestId(v string) *HoldCallResponseBody {
	s.RequestId = &v
	return s
}

type HoldCallResponseBodyData struct {
	CallContext *HoldCallResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	UserContext *HoldCallResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s HoldCallResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s HoldCallResponseBodyData) GoString() string {
	return s.String()
}

func (s *HoldCallResponseBodyData) SetCallContext(v *HoldCallResponseBodyDataCallContext) *HoldCallResponseBodyData {
	s.CallContext = v
	return s
}

func (s *HoldCallResponseBodyData) SetUserContext(v *HoldCallResponseBodyDataUserContext) *HoldCallResponseBodyData {
	s.UserContext = v
	return s
}

type HoldCallResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                               `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*HoldCallResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6582589278232****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s HoldCallResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s HoldCallResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *HoldCallResponseBodyDataCallContext) SetCallType(v string) *HoldCallResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *HoldCallResponseBodyDataCallContext) SetChannelContexts(v []*HoldCallResponseBodyDataCallContextChannelContexts) *HoldCallResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *HoldCallResponseBodyDataCallContext) SetInstanceId(v string) *HoldCallResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *HoldCallResponseBodyDataCallContext) SetJobId(v string) *HoldCallResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type HoldCallResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// ANSWERED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 8001****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// job-6582589278232****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1318888****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1609255716900
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8001****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s HoldCallResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s HoldCallResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *HoldCallResponseBodyDataCallContextChannelContexts) SetCallType(v string) *HoldCallResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *HoldCallResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *HoldCallResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *HoldCallResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *HoldCallResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *HoldCallResponseBodyDataCallContextChannelContexts) SetDestination(v string) *HoldCallResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *HoldCallResponseBodyDataCallContextChannelContexts) SetJobId(v string) *HoldCallResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *HoldCallResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *HoldCallResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *HoldCallResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *HoldCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *HoldCallResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *HoldCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *HoldCallResponseBodyDataCallContextChannelContexts) SetSkillGroupId(v string) *HoldCallResponseBodyDataCallContextChannelContexts {
	s.SkillGroupId = &v
	return s
}

func (s *HoldCallResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *HoldCallResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *HoldCallResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *HoldCallResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *HoldCallResponseBodyDataCallContextChannelContexts) SetUserId(v string) *HoldCallResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type HoldCallResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8001****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609255716908
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6582589278232****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1390000****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609255715822
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s HoldCallResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s HoldCallResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *HoldCallResponseBodyDataUserContext) SetBreakCode(v string) *HoldCallResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *HoldCallResponseBodyDataUserContext) SetDeviceId(v string) *HoldCallResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *HoldCallResponseBodyDataUserContext) SetExtension(v string) *HoldCallResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *HoldCallResponseBodyDataUserContext) SetHeartbeat(v int64) *HoldCallResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *HoldCallResponseBodyDataUserContext) SetInstanceId(v string) *HoldCallResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *HoldCallResponseBodyDataUserContext) SetJobId(v string) *HoldCallResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *HoldCallResponseBodyDataUserContext) SetMobile(v string) *HoldCallResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *HoldCallResponseBodyDataUserContext) SetOutboundScenario(v bool) *HoldCallResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *HoldCallResponseBodyDataUserContext) SetReserved(v int64) *HoldCallResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *HoldCallResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *HoldCallResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *HoldCallResponseBodyDataUserContext) SetUserId(v string) *HoldCallResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *HoldCallResponseBodyDataUserContext) SetUserState(v string) *HoldCallResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *HoldCallResponseBodyDataUserContext) SetWorkMode(v string) *HoldCallResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type HoldCallResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *HoldCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s HoldCallResponse) String() string {
	return tea.Prettify(s)
}

func (s HoldCallResponse) GoString() string {
	return s.String()
}

func (s *HoldCallResponse) SetHeaders(v map[string]*string) *HoldCallResponse {
	s.Headers = v
	return s
}

func (s *HoldCallResponse) SetStatusCode(v int32) *HoldCallResponse {
	s.StatusCode = &v
	return s
}

func (s *HoldCallResponse) SetBody(v *HoldCallResponseBody) *HoldCallResponse {
	s.Body = v
	return s
}

type ImportAdminsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["26972543893791****"]
	RamIdList *string `json:"RamIdList,omitempty" xml:"RamIdList,omitempty"`
}

func (s ImportAdminsRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportAdminsRequest) GoString() string {
	return s.String()
}

func (s *ImportAdminsRequest) SetInstanceId(v string) *ImportAdminsRequest {
	s.InstanceId = &v
	return s
}

func (s *ImportAdminsRequest) SetRamIdList(v string) *ImportAdminsRequest {
	s.RamIdList = &v
	return s
}

type ImportAdminsResponseBody struct {
	// example:
	//
	// OK
	Code *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ImportAdminsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1CDB5C94-ACFB-59B5-85FE-C1DAF8049C63
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ImportAdminsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportAdminsResponseBody) GoString() string {
	return s.String()
}

func (s *ImportAdminsResponseBody) SetCode(v string) *ImportAdminsResponseBody {
	s.Code = &v
	return s
}

func (s *ImportAdminsResponseBody) SetData(v []*ImportAdminsResponseBodyData) *ImportAdminsResponseBody {
	s.Data = v
	return s
}

func (s *ImportAdminsResponseBody) SetHttpStatusCode(v int32) *ImportAdminsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ImportAdminsResponseBody) SetMessage(v string) *ImportAdminsResponseBody {
	s.Message = &v
	return s
}

func (s *ImportAdminsResponseBody) SetRequestId(v string) *ImportAdminsResponseBody {
	s.RequestId = &v
	return s
}

type ImportAdminsResponseBodyData struct {
	// example:
	//
	// 8021****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 26972543893791****
	RamId *string `json:"RamId,omitempty" xml:"RamId,omitempty"`
	// example:
	//
	// Admin@ccc-test
	RoleId *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ImportAdminsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ImportAdminsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ImportAdminsResponseBodyData) SetExtension(v string) *ImportAdminsResponseBodyData {
	s.Extension = &v
	return s
}

func (s *ImportAdminsResponseBodyData) SetInstanceId(v string) *ImportAdminsResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *ImportAdminsResponseBodyData) SetRamId(v string) *ImportAdminsResponseBodyData {
	s.RamId = &v
	return s
}

func (s *ImportAdminsResponseBodyData) SetRoleId(v string) *ImportAdminsResponseBodyData {
	s.RoleId = &v
	return s
}

func (s *ImportAdminsResponseBodyData) SetUserId(v string) *ImportAdminsResponseBodyData {
	s.UserId = &v
	return s
}

type ImportAdminsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportAdminsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportAdminsResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportAdminsResponse) GoString() string {
	return s.String()
}

func (s *ImportAdminsResponse) SetHeaders(v map[string]*string) *ImportAdminsResponse {
	s.Headers = v
	return s
}

func (s *ImportAdminsResponse) SetStatusCode(v int32) *ImportAdminsResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportAdminsResponse) SetBody(v *ImportAdminsResponseBody) *ImportAdminsResponse {
	s.Body = v
	return s
}

type ImportCorpNumbersRequest struct {
	City     *string `json:"City,omitempty" xml:"City,omitempty"`
	CorpName *string `json:"CorpName,omitempty" xml:"CorpName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [\\"02912345678\\"]
	NumberList *string `json:"NumberList,omitempty" xml:"NumberList,omitempty"`
	// This parameter is required.
	Provider *string `json:"Provider,omitempty" xml:"Provider,omitempty"`
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
	TagList  *string `json:"TagList,omitempty" xml:"TagList,omitempty"`
}

func (s ImportCorpNumbersRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportCorpNumbersRequest) GoString() string {
	return s.String()
}

func (s *ImportCorpNumbersRequest) SetCity(v string) *ImportCorpNumbersRequest {
	s.City = &v
	return s
}

func (s *ImportCorpNumbersRequest) SetCorpName(v string) *ImportCorpNumbersRequest {
	s.CorpName = &v
	return s
}

func (s *ImportCorpNumbersRequest) SetNumberList(v string) *ImportCorpNumbersRequest {
	s.NumberList = &v
	return s
}

func (s *ImportCorpNumbersRequest) SetProvider(v string) *ImportCorpNumbersRequest {
	s.Provider = &v
	return s
}

func (s *ImportCorpNumbersRequest) SetProvince(v string) *ImportCorpNumbersRequest {
	s.Province = &v
	return s
}

func (s *ImportCorpNumbersRequest) SetTagList(v string) *ImportCorpNumbersRequest {
	s.TagList = &v
	return s
}

type ImportCorpNumbersResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// C42981C7-93D9-55CD-B078-784F8522E0E1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ImportCorpNumbersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportCorpNumbersResponseBody) GoString() string {
	return s.String()
}

func (s *ImportCorpNumbersResponseBody) SetCode(v string) *ImportCorpNumbersResponseBody {
	s.Code = &v
	return s
}

func (s *ImportCorpNumbersResponseBody) SetHttpStatusCode(v int32) *ImportCorpNumbersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ImportCorpNumbersResponseBody) SetMessage(v string) *ImportCorpNumbersResponseBody {
	s.Message = &v
	return s
}

func (s *ImportCorpNumbersResponseBody) SetRequestId(v string) *ImportCorpNumbersResponseBody {
	s.RequestId = &v
	return s
}

type ImportCorpNumbersResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportCorpNumbersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportCorpNumbersResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportCorpNumbersResponse) GoString() string {
	return s.String()
}

func (s *ImportCorpNumbersResponse) SetHeaders(v map[string]*string) *ImportCorpNumbersResponse {
	s.Headers = v
	return s
}

func (s *ImportCorpNumbersResponse) SetStatusCode(v int32) *ImportCorpNumbersResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportCorpNumbersResponse) SetBody(v *ImportCorpNumbersResponseBody) *ImportCorpNumbersResponse {
	s.Body = v
	return s
}

type ImportCustomCallTaggingRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// temp/ImportCustomCallTagging.xlsx
	FilePath *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ImportCustomCallTaggingRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportCustomCallTaggingRequest) GoString() string {
	return s.String()
}

func (s *ImportCustomCallTaggingRequest) SetFilePath(v string) *ImportCustomCallTaggingRequest {
	s.FilePath = &v
	return s
}

func (s *ImportCustomCallTaggingRequest) SetInstanceId(v string) *ImportCustomCallTaggingRequest {
	s.InstanceId = &v
	return s
}

type ImportCustomCallTaggingResponseBody struct {
	// example:
	//
	// OK
	Code *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ImportCustomCallTaggingResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ImportCustomCallTaggingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportCustomCallTaggingResponseBody) GoString() string {
	return s.String()
}

func (s *ImportCustomCallTaggingResponseBody) SetCode(v string) *ImportCustomCallTaggingResponseBody {
	s.Code = &v
	return s
}

func (s *ImportCustomCallTaggingResponseBody) SetData(v []*ImportCustomCallTaggingResponseBodyData) *ImportCustomCallTaggingResponseBody {
	s.Data = v
	return s
}

func (s *ImportCustomCallTaggingResponseBody) SetHttpStatusCode(v int32) *ImportCustomCallTaggingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ImportCustomCallTaggingResponseBody) SetMessage(v string) *ImportCustomCallTaggingResponseBody {
	s.Message = &v
	return s
}

func (s *ImportCustomCallTaggingResponseBody) SetRequestId(v string) *ImportCustomCallTaggingResponseBody {
	s.RequestId = &v
	return s
}

type ImportCustomCallTaggingResponseBodyData struct {
	// example:
	//
	// 1312121****
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// example:
	//
	// CUSTOM_NUMBER_DUPLICATED
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
}

func (s ImportCustomCallTaggingResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ImportCustomCallTaggingResponseBodyData) GoString() string {
	return s.String()
}

func (s *ImportCustomCallTaggingResponseBodyData) SetItem(v string) *ImportCustomCallTaggingResponseBodyData {
	s.Item = &v
	return s
}

func (s *ImportCustomCallTaggingResponseBodyData) SetReason(v string) *ImportCustomCallTaggingResponseBodyData {
	s.Reason = &v
	return s
}

type ImportCustomCallTaggingResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportCustomCallTaggingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportCustomCallTaggingResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportCustomCallTaggingResponse) GoString() string {
	return s.String()
}

func (s *ImportCustomCallTaggingResponse) SetHeaders(v map[string]*string) *ImportCustomCallTaggingResponse {
	s.Headers = v
	return s
}

func (s *ImportCustomCallTaggingResponse) SetStatusCode(v int32) *ImportCustomCallTaggingResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportCustomCallTaggingResponse) SetBody(v *ImportCustomCallTaggingResponseBody) *ImportCustomCallTaggingResponse {
	s.Body = v
	return s
}

type ImportDoNotCallNumbersRequest struct {
	// example:
	//
	// temp/blacklist/import/15772471154xxxx/ccc-test/20220315100340/blacklist.xlsx
	FilePath *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// ["1900000****","1312121****"]
	NumberList *string `json:"NumberList,omitempty" xml:"NumberList,omitempty"`
	Remark     *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
}

func (s ImportDoNotCallNumbersRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportDoNotCallNumbersRequest) GoString() string {
	return s.String()
}

func (s *ImportDoNotCallNumbersRequest) SetFilePath(v string) *ImportDoNotCallNumbersRequest {
	s.FilePath = &v
	return s
}

func (s *ImportDoNotCallNumbersRequest) SetInstanceId(v string) *ImportDoNotCallNumbersRequest {
	s.InstanceId = &v
	return s
}

func (s *ImportDoNotCallNumbersRequest) SetNumberList(v string) *ImportDoNotCallNumbersRequest {
	s.NumberList = &v
	return s
}

func (s *ImportDoNotCallNumbersRequest) SetRemark(v string) *ImportDoNotCallNumbersRequest {
	s.Remark = &v
	return s
}

type ImportDoNotCallNumbersResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ImportDoNotCallNumbersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportDoNotCallNumbersResponseBody) GoString() string {
	return s.String()
}

func (s *ImportDoNotCallNumbersResponseBody) SetCode(v string) *ImportDoNotCallNumbersResponseBody {
	s.Code = &v
	return s
}

func (s *ImportDoNotCallNumbersResponseBody) SetHttpStatusCode(v int32) *ImportDoNotCallNumbersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ImportDoNotCallNumbersResponseBody) SetMessage(v string) *ImportDoNotCallNumbersResponseBody {
	s.Message = &v
	return s
}

func (s *ImportDoNotCallNumbersResponseBody) SetParams(v []*string) *ImportDoNotCallNumbersResponseBody {
	s.Params = v
	return s
}

func (s *ImportDoNotCallNumbersResponseBody) SetRequestId(v string) *ImportDoNotCallNumbersResponseBody {
	s.RequestId = &v
	return s
}

type ImportDoNotCallNumbersResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportDoNotCallNumbersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportDoNotCallNumbersResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportDoNotCallNumbersResponse) GoString() string {
	return s.String()
}

func (s *ImportDoNotCallNumbersResponse) SetHeaders(v map[string]*string) *ImportDoNotCallNumbersResponse {
	s.Headers = v
	return s
}

func (s *ImportDoNotCallNumbersResponse) SetStatusCode(v int32) *ImportDoNotCallNumbersResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportDoNotCallNumbersResponse) SetBody(v *ImportDoNotCallNumbersResponseBody) *ImportDoNotCallNumbersResponse {
	s.Body = v
	return s
}

type ImportDocumentsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// b0eb2742-f37e-4c67-82d4-25c651c1c450
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test/test-file.wav
	OssFileKey *string `json:"OssFileKey,omitempty" xml:"OssFileKey,omitempty"`
	// example:
	//
	// 7BEEA660-A45A-45E3-98CC-AFC65E715C23
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// schema id
	//
	// This parameter is required.
	//
	// example:
	//
	// profile
	SchemaId *string `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s ImportDocumentsRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportDocumentsRequest) GoString() string {
	return s.String()
}

func (s *ImportDocumentsRequest) SetInstanceId(v string) *ImportDocumentsRequest {
	s.InstanceId = &v
	return s
}

func (s *ImportDocumentsRequest) SetOssFileKey(v string) *ImportDocumentsRequest {
	s.OssFileKey = &v
	return s
}

func (s *ImportDocumentsRequest) SetRequestId(v string) *ImportDocumentsRequest {
	s.RequestId = &v
	return s
}

func (s *ImportDocumentsRequest) SetSchemaId(v string) *ImportDocumentsRequest {
	s.SchemaId = &v
	return s
}

type ImportDocumentsResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 01B12EE4-6AF2-4730-8B78-EC15F4E5C025
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ImportDocumentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportDocumentsResponseBody) GoString() string {
	return s.String()
}

func (s *ImportDocumentsResponseBody) SetCode(v string) *ImportDocumentsResponseBody {
	s.Code = &v
	return s
}

func (s *ImportDocumentsResponseBody) SetHttpStatusCode(v int32) *ImportDocumentsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ImportDocumentsResponseBody) SetMessage(v string) *ImportDocumentsResponseBody {
	s.Message = &v
	return s
}

func (s *ImportDocumentsResponseBody) SetParams(v []*string) *ImportDocumentsResponseBody {
	s.Params = v
	return s
}

func (s *ImportDocumentsResponseBody) SetRequestId(v string) *ImportDocumentsResponseBody {
	s.RequestId = &v
	return s
}

type ImportDocumentsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportDocumentsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportDocumentsResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportDocumentsResponse) GoString() string {
	return s.String()
}

func (s *ImportDocumentsResponse) SetHeaders(v map[string]*string) *ImportDocumentsResponse {
	s.Headers = v
	return s
}

func (s *ImportDocumentsResponse) SetStatusCode(v int32) *ImportDocumentsResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportDocumentsResponse) SetBody(v *ImportDocumentsResponseBody) *ImportDocumentsResponse {
	s.Body = v
	return s
}

type InitiateAttendedTransferRequest struct {
	CallPriority *int32 `json:"CallPriority,omitempty" xml:"CallPriority,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-6538214103685****
	JobId                    *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	QueuingOverflowThreshold *int64  `json:"QueuingOverflowThreshold,omitempty" xml:"QueuingOverflowThreshold,omitempty"`
	QueuingTimeoutSeconds    *int64  `json:"QueuingTimeoutSeconds,omitempty" xml:"QueuingTimeoutSeconds,omitempty"`
	RoutingType              *string `json:"RoutingType,omitempty" xml:"RoutingType,omitempty"`
	StrategyName             *string `json:"StrategyName,omitempty" xml:"StrategyName,omitempty"`
	StrategyParams           *string `json:"StrategyParams,omitempty" xml:"StrategyParams,omitempty"`
	Tags                     *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// example:
	//
	// 60
	TimeoutSeconds *int32 `json:"TimeoutSeconds,omitempty" xml:"TimeoutSeconds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// agent2@ccc-test
	Transferee     *string `json:"Transferee,omitempty" xml:"Transferee,omitempty"`
	TransfereeType *string `json:"TransfereeType,omitempty" xml:"TransfereeType,omitempty"`
	Transferor     *string `json:"Transferor,omitempty" xml:"Transferor,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s InitiateAttendedTransferRequest) String() string {
	return tea.Prettify(s)
}

func (s InitiateAttendedTransferRequest) GoString() string {
	return s.String()
}

func (s *InitiateAttendedTransferRequest) SetCallPriority(v int32) *InitiateAttendedTransferRequest {
	s.CallPriority = &v
	return s
}

func (s *InitiateAttendedTransferRequest) SetDeviceId(v string) *InitiateAttendedTransferRequest {
	s.DeviceId = &v
	return s
}

func (s *InitiateAttendedTransferRequest) SetInstanceId(v string) *InitiateAttendedTransferRequest {
	s.InstanceId = &v
	return s
}

func (s *InitiateAttendedTransferRequest) SetJobId(v string) *InitiateAttendedTransferRequest {
	s.JobId = &v
	return s
}

func (s *InitiateAttendedTransferRequest) SetQueuingOverflowThreshold(v int64) *InitiateAttendedTransferRequest {
	s.QueuingOverflowThreshold = &v
	return s
}

func (s *InitiateAttendedTransferRequest) SetQueuingTimeoutSeconds(v int64) *InitiateAttendedTransferRequest {
	s.QueuingTimeoutSeconds = &v
	return s
}

func (s *InitiateAttendedTransferRequest) SetRoutingType(v string) *InitiateAttendedTransferRequest {
	s.RoutingType = &v
	return s
}

func (s *InitiateAttendedTransferRequest) SetStrategyName(v string) *InitiateAttendedTransferRequest {
	s.StrategyName = &v
	return s
}

func (s *InitiateAttendedTransferRequest) SetStrategyParams(v string) *InitiateAttendedTransferRequest {
	s.StrategyParams = &v
	return s
}

func (s *InitiateAttendedTransferRequest) SetTags(v string) *InitiateAttendedTransferRequest {
	s.Tags = &v
	return s
}

func (s *InitiateAttendedTransferRequest) SetTimeoutSeconds(v int32) *InitiateAttendedTransferRequest {
	s.TimeoutSeconds = &v
	return s
}

func (s *InitiateAttendedTransferRequest) SetTransferee(v string) *InitiateAttendedTransferRequest {
	s.Transferee = &v
	return s
}

func (s *InitiateAttendedTransferRequest) SetTransfereeType(v string) *InitiateAttendedTransferRequest {
	s.TransfereeType = &v
	return s
}

func (s *InitiateAttendedTransferRequest) SetTransferor(v string) *InitiateAttendedTransferRequest {
	s.Transferor = &v
	return s
}

func (s *InitiateAttendedTransferRequest) SetUserId(v string) *InitiateAttendedTransferRequest {
	s.UserId = &v
	return s
}

type InitiateAttendedTransferResponseBody struct {
	// example:
	//
	// OK
	Code *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *InitiateAttendedTransferResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InitiateAttendedTransferResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InitiateAttendedTransferResponseBody) GoString() string {
	return s.String()
}

func (s *InitiateAttendedTransferResponseBody) SetCode(v string) *InitiateAttendedTransferResponseBody {
	s.Code = &v
	return s
}

func (s *InitiateAttendedTransferResponseBody) SetData(v *InitiateAttendedTransferResponseBodyData) *InitiateAttendedTransferResponseBody {
	s.Data = v
	return s
}

func (s *InitiateAttendedTransferResponseBody) SetHttpStatusCode(v int32) *InitiateAttendedTransferResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *InitiateAttendedTransferResponseBody) SetMessage(v string) *InitiateAttendedTransferResponseBody {
	s.Message = &v
	return s
}

func (s *InitiateAttendedTransferResponseBody) SetParams(v []*string) *InitiateAttendedTransferResponseBody {
	s.Params = v
	return s
}

func (s *InitiateAttendedTransferResponseBody) SetRequestId(v string) *InitiateAttendedTransferResponseBody {
	s.RequestId = &v
	return s
}

type InitiateAttendedTransferResponseBodyData struct {
	CallContext *InitiateAttendedTransferResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	// example:
	//
	// 103655
	ContextId   *int64                                               `json:"ContextId,omitempty" xml:"ContextId,omitempty"`
	UserContext *InitiateAttendedTransferResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s InitiateAttendedTransferResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s InitiateAttendedTransferResponseBodyData) GoString() string {
	return s.String()
}

func (s *InitiateAttendedTransferResponseBodyData) SetCallContext(v *InitiateAttendedTransferResponseBodyDataCallContext) *InitiateAttendedTransferResponseBodyData {
	s.CallContext = v
	return s
}

func (s *InitiateAttendedTransferResponseBodyData) SetContextId(v int64) *InitiateAttendedTransferResponseBodyData {
	s.ContextId = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyData) SetUserContext(v *InitiateAttendedTransferResponseBodyDataUserContext) *InitiateAttendedTransferResponseBodyData {
	s.UserContext = v
	return s
}

type InitiateAttendedTransferResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                                               `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*InitiateAttendedTransferResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s InitiateAttendedTransferResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s InitiateAttendedTransferResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *InitiateAttendedTransferResponseBodyDataCallContext) SetCallType(v string) *InitiateAttendedTransferResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataCallContext) SetChannelContexts(v []*InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) *InitiateAttendedTransferResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataCallContext) SetInstanceId(v string) *InitiateAttendedTransferResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataCallContext) SetJobId(v string) *InitiateAttendedTransferResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type InitiateAttendedTransferResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// MONITORING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:139xxxx0501->80326034:1609138902226:job-6538214103685****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// ANSWERED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 1390501****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// 10
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0830019****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) SetCallType(v string) *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) SetDestination(v string) *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) SetIndex(v int32) *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.Index = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) SetJobId(v string) *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) SetSkillGroupId(v string) *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.SkillGroupId = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts) SetUserId(v string) *InitiateAttendedTransferResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type InitiateAttendedTransferResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609136956378
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s InitiateAttendedTransferResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s InitiateAttendedTransferResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *InitiateAttendedTransferResponseBodyDataUserContext) SetBreakCode(v string) *InitiateAttendedTransferResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataUserContext) SetDeviceId(v string) *InitiateAttendedTransferResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataUserContext) SetExtension(v string) *InitiateAttendedTransferResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataUserContext) SetHeartbeat(v int64) *InitiateAttendedTransferResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataUserContext) SetInstanceId(v string) *InitiateAttendedTransferResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataUserContext) SetJobId(v string) *InitiateAttendedTransferResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataUserContext) SetMobile(v string) *InitiateAttendedTransferResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataUserContext) SetOutboundScenario(v bool) *InitiateAttendedTransferResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataUserContext) SetReserved(v int64) *InitiateAttendedTransferResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *InitiateAttendedTransferResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataUserContext) SetUserId(v string) *InitiateAttendedTransferResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataUserContext) SetUserState(v string) *InitiateAttendedTransferResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *InitiateAttendedTransferResponseBodyDataUserContext) SetWorkMode(v string) *InitiateAttendedTransferResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type InitiateAttendedTransferResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InitiateAttendedTransferResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InitiateAttendedTransferResponse) String() string {
	return tea.Prettify(s)
}

func (s InitiateAttendedTransferResponse) GoString() string {
	return s.String()
}

func (s *InitiateAttendedTransferResponse) SetHeaders(v map[string]*string) *InitiateAttendedTransferResponse {
	s.Headers = v
	return s
}

func (s *InitiateAttendedTransferResponse) SetStatusCode(v int32) *InitiateAttendedTransferResponse {
	s.StatusCode = &v
	return s
}

func (s *InitiateAttendedTransferResponse) SetBody(v *InitiateAttendedTransferResponseBody) *InitiateAttendedTransferResponse {
	s.Body = v
	return s
}

type InterceptCallRequest struct {
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// agent2@ccc-test
	InterceptedUserId *string `json:"InterceptedUserId,omitempty" xml:"InterceptedUserId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 60
	TimeoutSeconds *int32 `json:"TimeoutSeconds,omitempty" xml:"TimeoutSeconds,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s InterceptCallRequest) String() string {
	return tea.Prettify(s)
}

func (s InterceptCallRequest) GoString() string {
	return s.String()
}

func (s *InterceptCallRequest) SetDeviceId(v string) *InterceptCallRequest {
	s.DeviceId = &v
	return s
}

func (s *InterceptCallRequest) SetInstanceId(v string) *InterceptCallRequest {
	s.InstanceId = &v
	return s
}

func (s *InterceptCallRequest) SetInterceptedUserId(v string) *InterceptCallRequest {
	s.InterceptedUserId = &v
	return s
}

func (s *InterceptCallRequest) SetJobId(v string) *InterceptCallRequest {
	s.JobId = &v
	return s
}

func (s *InterceptCallRequest) SetTimeoutSeconds(v int32) *InterceptCallRequest {
	s.TimeoutSeconds = &v
	return s
}

func (s *InterceptCallRequest) SetUserId(v string) *InterceptCallRequest {
	s.UserId = &v
	return s
}

type InterceptCallResponseBody struct {
	// example:
	//
	// OK
	Code *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *InterceptCallResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s InterceptCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InterceptCallResponseBody) GoString() string {
	return s.String()
}

func (s *InterceptCallResponseBody) SetCode(v string) *InterceptCallResponseBody {
	s.Code = &v
	return s
}

func (s *InterceptCallResponseBody) SetData(v *InterceptCallResponseBodyData) *InterceptCallResponseBody {
	s.Data = v
	return s
}

func (s *InterceptCallResponseBody) SetHttpStatusCode(v int32) *InterceptCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *InterceptCallResponseBody) SetMessage(v string) *InterceptCallResponseBody {
	s.Message = &v
	return s
}

func (s *InterceptCallResponseBody) SetParams(v []*string) *InterceptCallResponseBody {
	s.Params = v
	return s
}

func (s *InterceptCallResponseBody) SetRequestId(v string) *InterceptCallResponseBody {
	s.RequestId = &v
	return s
}

type InterceptCallResponseBodyData struct {
	CallContext *InterceptCallResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	UserContext *InterceptCallResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s InterceptCallResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s InterceptCallResponseBodyData) GoString() string {
	return s.String()
}

func (s *InterceptCallResponseBodyData) SetCallContext(v *InterceptCallResponseBodyDataCallContext) *InterceptCallResponseBodyData {
	s.CallContext = v
	return s
}

func (s *InterceptCallResponseBodyData) SetUserContext(v *InterceptCallResponseBodyDataUserContext) *InterceptCallResponseBodyData {
	s.UserContext = v
	return s
}

type InterceptCallResponseBodyDataCallContext struct {
	// example:
	//
	// INTERCEPT
	CallType        *string                                                    `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*InterceptCallResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s InterceptCallResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s InterceptCallResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *InterceptCallResponseBodyDataCallContext) SetCallType(v string) *InterceptCallResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *InterceptCallResponseBodyDataCallContext) SetChannelContexts(v []*InterceptCallResponseBodyDataCallContextChannelContexts) *InterceptCallResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *InterceptCallResponseBodyDataCallContext) SetInstanceId(v string) *InterceptCallResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *InterceptCallResponseBodyDataCallContext) SetJobId(v string) *InterceptCallResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type InterceptCallResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// INTERCEPT
	CallType     *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// ANSWERED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 1390501****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// 10
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0830019****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s InterceptCallResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s InterceptCallResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *InterceptCallResponseBodyDataCallContextChannelContexts) SetCallType(v string) *InterceptCallResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *InterceptCallResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *InterceptCallResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *InterceptCallResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *InterceptCallResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *InterceptCallResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *InterceptCallResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *InterceptCallResponseBodyDataCallContextChannelContexts) SetDestination(v string) *InterceptCallResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *InterceptCallResponseBodyDataCallContextChannelContexts) SetIndex(v int32) *InterceptCallResponseBodyDataCallContextChannelContexts {
	s.Index = &v
	return s
}

func (s *InterceptCallResponseBodyDataCallContextChannelContexts) SetJobId(v string) *InterceptCallResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *InterceptCallResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *InterceptCallResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *InterceptCallResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *InterceptCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *InterceptCallResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *InterceptCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *InterceptCallResponseBodyDataCallContextChannelContexts) SetSkillGroupId(v string) *InterceptCallResponseBodyDataCallContextChannelContexts {
	s.SkillGroupId = &v
	return s
}

func (s *InterceptCallResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *InterceptCallResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *InterceptCallResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *InterceptCallResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *InterceptCallResponseBodyDataCallContextChannelContexts) SetUserId(v string) *InterceptCallResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type InterceptCallResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609136956378
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s InterceptCallResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s InterceptCallResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *InterceptCallResponseBodyDataUserContext) SetBreakCode(v string) *InterceptCallResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *InterceptCallResponseBodyDataUserContext) SetDeviceId(v string) *InterceptCallResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *InterceptCallResponseBodyDataUserContext) SetExtension(v string) *InterceptCallResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *InterceptCallResponseBodyDataUserContext) SetHeartbeat(v int64) *InterceptCallResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *InterceptCallResponseBodyDataUserContext) SetInstanceId(v string) *InterceptCallResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *InterceptCallResponseBodyDataUserContext) SetJobId(v string) *InterceptCallResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *InterceptCallResponseBodyDataUserContext) SetMobile(v string) *InterceptCallResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *InterceptCallResponseBodyDataUserContext) SetOutboundScenario(v bool) *InterceptCallResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *InterceptCallResponseBodyDataUserContext) SetReserved(v int64) *InterceptCallResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *InterceptCallResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *InterceptCallResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *InterceptCallResponseBodyDataUserContext) SetUserId(v string) *InterceptCallResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *InterceptCallResponseBodyDataUserContext) SetUserState(v string) *InterceptCallResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *InterceptCallResponseBodyDataUserContext) SetWorkMode(v string) *InterceptCallResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type InterceptCallResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InterceptCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InterceptCallResponse) String() string {
	return tea.Prettify(s)
}

func (s InterceptCallResponse) GoString() string {
	return s.String()
}

func (s *InterceptCallResponse) SetHeaders(v map[string]*string) *InterceptCallResponse {
	s.Headers = v
	return s
}

func (s *InterceptCallResponse) SetStatusCode(v int32) *InterceptCallResponse {
	s.StatusCode = &v
	return s
}

func (s *InterceptCallResponse) SetBody(v *InterceptCallResponseBody) *InterceptCallResponse {
	s.Body = v
	return s
}

type LaunchAuthenticationRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// af145gfc-1108-4d55-8fca-f719bd512ebb
	ContactFlowId        *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	ContactFlowVariables *string `json:"ContactFlowVariables,omitempty" xml:"ContactFlowVariables,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s LaunchAuthenticationRequest) String() string {
	return tea.Prettify(s)
}

func (s LaunchAuthenticationRequest) GoString() string {
	return s.String()
}

func (s *LaunchAuthenticationRequest) SetContactFlowId(v string) *LaunchAuthenticationRequest {
	s.ContactFlowId = &v
	return s
}

func (s *LaunchAuthenticationRequest) SetContactFlowVariables(v string) *LaunchAuthenticationRequest {
	s.ContactFlowVariables = &v
	return s
}

func (s *LaunchAuthenticationRequest) SetDeviceId(v string) *LaunchAuthenticationRequest {
	s.DeviceId = &v
	return s
}

func (s *LaunchAuthenticationRequest) SetInstanceId(v string) *LaunchAuthenticationRequest {
	s.InstanceId = &v
	return s
}

func (s *LaunchAuthenticationRequest) SetJobId(v string) *LaunchAuthenticationRequest {
	s.JobId = &v
	return s
}

func (s *LaunchAuthenticationRequest) SetUserId(v string) *LaunchAuthenticationRequest {
	s.UserId = &v
	return s
}

type LaunchAuthenticationResponseBody struct {
	// example:
	//
	// OK
	Code *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *LaunchAuthenticationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s LaunchAuthenticationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LaunchAuthenticationResponseBody) GoString() string {
	return s.String()
}

func (s *LaunchAuthenticationResponseBody) SetCode(v string) *LaunchAuthenticationResponseBody {
	s.Code = &v
	return s
}

func (s *LaunchAuthenticationResponseBody) SetData(v *LaunchAuthenticationResponseBodyData) *LaunchAuthenticationResponseBody {
	s.Data = v
	return s
}

func (s *LaunchAuthenticationResponseBody) SetHttpStatusCode(v int32) *LaunchAuthenticationResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *LaunchAuthenticationResponseBody) SetMessage(v string) *LaunchAuthenticationResponseBody {
	s.Message = &v
	return s
}

func (s *LaunchAuthenticationResponseBody) SetParams(v []*string) *LaunchAuthenticationResponseBody {
	s.Params = v
	return s
}

func (s *LaunchAuthenticationResponseBody) SetRequestId(v string) *LaunchAuthenticationResponseBody {
	s.RequestId = &v
	return s
}

type LaunchAuthenticationResponseBodyData struct {
	CallContext *LaunchAuthenticationResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	UserContext *LaunchAuthenticationResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s LaunchAuthenticationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s LaunchAuthenticationResponseBodyData) GoString() string {
	return s.String()
}

func (s *LaunchAuthenticationResponseBodyData) SetCallContext(v *LaunchAuthenticationResponseBodyDataCallContext) *LaunchAuthenticationResponseBodyData {
	s.CallContext = v
	return s
}

func (s *LaunchAuthenticationResponseBodyData) SetUserContext(v *LaunchAuthenticationResponseBodyDataUserContext) *LaunchAuthenticationResponseBodyData {
	s.UserContext = v
	return s
}

type LaunchAuthenticationResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                                           `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*LaunchAuthenticationResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s LaunchAuthenticationResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s LaunchAuthenticationResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *LaunchAuthenticationResponseBodyDataCallContext) SetCallType(v string) *LaunchAuthenticationResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataCallContext) SetChannelContexts(v []*LaunchAuthenticationResponseBodyDataCallContextChannelContexts) *LaunchAuthenticationResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataCallContext) SetInstanceId(v string) *LaunchAuthenticationResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataCallContext) SetJobId(v string) *LaunchAuthenticationResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type LaunchAuthenticationResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// MONITORING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// ANSWERED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 1390501****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// 10
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0830019****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s LaunchAuthenticationResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s LaunchAuthenticationResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *LaunchAuthenticationResponseBodyDataCallContextChannelContexts) SetCallType(v string) *LaunchAuthenticationResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *LaunchAuthenticationResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *LaunchAuthenticationResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *LaunchAuthenticationResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataCallContextChannelContexts) SetDestination(v string) *LaunchAuthenticationResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataCallContextChannelContexts) SetIndex(v int32) *LaunchAuthenticationResponseBodyDataCallContextChannelContexts {
	s.Index = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataCallContextChannelContexts) SetJobId(v string) *LaunchAuthenticationResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *LaunchAuthenticationResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *LaunchAuthenticationResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *LaunchAuthenticationResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataCallContextChannelContexts) SetSkillGroupId(v string) *LaunchAuthenticationResponseBodyDataCallContextChannelContexts {
	s.SkillGroupId = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *LaunchAuthenticationResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *LaunchAuthenticationResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataCallContextChannelContexts) SetUserId(v string) *LaunchAuthenticationResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type LaunchAuthenticationResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609136956378
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s LaunchAuthenticationResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s LaunchAuthenticationResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *LaunchAuthenticationResponseBodyDataUserContext) SetBreakCode(v string) *LaunchAuthenticationResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataUserContext) SetDeviceId(v string) *LaunchAuthenticationResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataUserContext) SetExtension(v string) *LaunchAuthenticationResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataUserContext) SetHeartbeat(v int64) *LaunchAuthenticationResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataUserContext) SetInstanceId(v string) *LaunchAuthenticationResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataUserContext) SetJobId(v string) *LaunchAuthenticationResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataUserContext) SetMobile(v string) *LaunchAuthenticationResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataUserContext) SetOutboundScenario(v bool) *LaunchAuthenticationResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataUserContext) SetReserved(v int64) *LaunchAuthenticationResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *LaunchAuthenticationResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataUserContext) SetUserId(v string) *LaunchAuthenticationResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataUserContext) SetUserState(v string) *LaunchAuthenticationResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *LaunchAuthenticationResponseBodyDataUserContext) SetWorkMode(v string) *LaunchAuthenticationResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type LaunchAuthenticationResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *LaunchAuthenticationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s LaunchAuthenticationResponse) String() string {
	return tea.Prettify(s)
}

func (s LaunchAuthenticationResponse) GoString() string {
	return s.String()
}

func (s *LaunchAuthenticationResponse) SetHeaders(v map[string]*string) *LaunchAuthenticationResponse {
	s.Headers = v
	return s
}

func (s *LaunchAuthenticationResponse) SetStatusCode(v int32) *LaunchAuthenticationResponse {
	s.StatusCode = &v
	return s
}

func (s *LaunchAuthenticationResponse) SetBody(v *LaunchAuthenticationResponseBody) *LaunchAuthenticationResponse {
	s.Body = v
	return s
}

type LaunchSurveyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 4685b65a-eb8f-11ec-8ea0-0242ac120002
	ContactFlowId        *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	ContactFlowVariables *string `json:"ContactFlowVariables,omitempty" xml:"ContactFlowVariables,omitempty"`
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-6580466654649****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 4685b65a-eb8f-11ec-8ea0-0242ac120002
	SmsMetadataId *string `json:"SmsMetadataId,omitempty" xml:"SmsMetadataId,omitempty"`
	// example:
	//
	// IVR
	SurveyChannel           *string `json:"SurveyChannel,omitempty" xml:"SurveyChannel,omitempty"`
	SurveyTemplateId        *string `json:"SurveyTemplateId,omitempty" xml:"SurveyTemplateId,omitempty"`
	SurveyTemplateVariables *string `json:"SurveyTemplateVariables,omitempty" xml:"SurveyTemplateVariables,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s LaunchSurveyRequest) String() string {
	return tea.Prettify(s)
}

func (s LaunchSurveyRequest) GoString() string {
	return s.String()
}

func (s *LaunchSurveyRequest) SetContactFlowId(v string) *LaunchSurveyRequest {
	s.ContactFlowId = &v
	return s
}

func (s *LaunchSurveyRequest) SetContactFlowVariables(v string) *LaunchSurveyRequest {
	s.ContactFlowVariables = &v
	return s
}

func (s *LaunchSurveyRequest) SetDeviceId(v string) *LaunchSurveyRequest {
	s.DeviceId = &v
	return s
}

func (s *LaunchSurveyRequest) SetInstanceId(v string) *LaunchSurveyRequest {
	s.InstanceId = &v
	return s
}

func (s *LaunchSurveyRequest) SetJobId(v string) *LaunchSurveyRequest {
	s.JobId = &v
	return s
}

func (s *LaunchSurveyRequest) SetSmsMetadataId(v string) *LaunchSurveyRequest {
	s.SmsMetadataId = &v
	return s
}

func (s *LaunchSurveyRequest) SetSurveyChannel(v string) *LaunchSurveyRequest {
	s.SurveyChannel = &v
	return s
}

func (s *LaunchSurveyRequest) SetSurveyTemplateId(v string) *LaunchSurveyRequest {
	s.SurveyTemplateId = &v
	return s
}

func (s *LaunchSurveyRequest) SetSurveyTemplateVariables(v string) *LaunchSurveyRequest {
	s.SurveyTemplateVariables = &v
	return s
}

func (s *LaunchSurveyRequest) SetUserId(v string) *LaunchSurveyRequest {
	s.UserId = &v
	return s
}

type LaunchSurveyResponseBody struct {
	// example:
	//
	// OK
	Code *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *LaunchSurveyResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// AF1E5957-5276-48FF-A6E6-347166A4ADCD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s LaunchSurveyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LaunchSurveyResponseBody) GoString() string {
	return s.String()
}

func (s *LaunchSurveyResponseBody) SetCode(v string) *LaunchSurveyResponseBody {
	s.Code = &v
	return s
}

func (s *LaunchSurveyResponseBody) SetData(v *LaunchSurveyResponseBodyData) *LaunchSurveyResponseBody {
	s.Data = v
	return s
}

func (s *LaunchSurveyResponseBody) SetHttpStatusCode(v int32) *LaunchSurveyResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *LaunchSurveyResponseBody) SetMessage(v string) *LaunchSurveyResponseBody {
	s.Message = &v
	return s
}

func (s *LaunchSurveyResponseBody) SetParams(v []*string) *LaunchSurveyResponseBody {
	s.Params = v
	return s
}

func (s *LaunchSurveyResponseBody) SetRequestId(v string) *LaunchSurveyResponseBody {
	s.RequestId = &v
	return s
}

type LaunchSurveyResponseBodyData struct {
	CallContext *LaunchSurveyResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	// example:
	//
	// 102323
	ContextId   *int64                                   `json:"ContextId,omitempty" xml:"ContextId,omitempty"`
	UserContext *LaunchSurveyResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s LaunchSurveyResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s LaunchSurveyResponseBodyData) GoString() string {
	return s.String()
}

func (s *LaunchSurveyResponseBodyData) SetCallContext(v *LaunchSurveyResponseBodyDataCallContext) *LaunchSurveyResponseBodyData {
	s.CallContext = v
	return s
}

func (s *LaunchSurveyResponseBodyData) SetContextId(v int64) *LaunchSurveyResponseBodyData {
	s.ContextId = &v
	return s
}

func (s *LaunchSurveyResponseBodyData) SetUserContext(v *LaunchSurveyResponseBodyDataUserContext) *LaunchSurveyResponseBodyData {
	s.UserContext = v
	return s
}

type LaunchSurveyResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                                   `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*LaunchSurveyResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6580466654649****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s LaunchSurveyResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s LaunchSurveyResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *LaunchSurveyResponseBodyDataCallContext) SetCallType(v string) *LaunchSurveyResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataCallContext) SetChannelContexts(v []*LaunchSurveyResponseBodyDataCallContextChannelContexts) *LaunchSurveyResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *LaunchSurveyResponseBodyDataCallContext) SetInstanceId(v string) *LaunchSurveyResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataCallContext) SetJobId(v string) *LaunchSurveyResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type LaunchSurveyResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// MONITORING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// ANSWERED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 1318888****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// 1
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// job-6580466654649****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1318888****
	Originator       *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	ReleaseReason    *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1609250655922
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8001****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s LaunchSurveyResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s LaunchSurveyResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *LaunchSurveyResponseBodyDataCallContextChannelContexts) SetCallType(v string) *LaunchSurveyResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *LaunchSurveyResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *LaunchSurveyResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *LaunchSurveyResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataCallContextChannelContexts) SetDestination(v string) *LaunchSurveyResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataCallContextChannelContexts) SetIndex(v int32) *LaunchSurveyResponseBodyDataCallContextChannelContexts {
	s.Index = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataCallContextChannelContexts) SetJobId(v string) *LaunchSurveyResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *LaunchSurveyResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *LaunchSurveyResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *LaunchSurveyResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataCallContextChannelContexts) SetSkillGroupId(v string) *LaunchSurveyResponseBodyDataCallContextChannelContexts {
	s.SkillGroupId = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *LaunchSurveyResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *LaunchSurveyResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataCallContextChannelContexts) SetUserId(v string) *LaunchSurveyResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type LaunchSurveyResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8001****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609250656122
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6580466654649****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1390000****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609250655090
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s LaunchSurveyResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s LaunchSurveyResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *LaunchSurveyResponseBodyDataUserContext) SetBreakCode(v string) *LaunchSurveyResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataUserContext) SetDeviceId(v string) *LaunchSurveyResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataUserContext) SetExtension(v string) *LaunchSurveyResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataUserContext) SetHeartbeat(v int64) *LaunchSurveyResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataUserContext) SetInstanceId(v string) *LaunchSurveyResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataUserContext) SetJobId(v string) *LaunchSurveyResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataUserContext) SetMobile(v string) *LaunchSurveyResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataUserContext) SetOutboundScenario(v bool) *LaunchSurveyResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataUserContext) SetReserved(v int64) *LaunchSurveyResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *LaunchSurveyResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *LaunchSurveyResponseBodyDataUserContext) SetUserId(v string) *LaunchSurveyResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataUserContext) SetUserState(v string) *LaunchSurveyResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *LaunchSurveyResponseBodyDataUserContext) SetWorkMode(v string) *LaunchSurveyResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type LaunchSurveyResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *LaunchSurveyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s LaunchSurveyResponse) String() string {
	return tea.Prettify(s)
}

func (s LaunchSurveyResponse) GoString() string {
	return s.String()
}

func (s *LaunchSurveyResponse) SetHeaders(v map[string]*string) *LaunchSurveyResponse {
	s.Headers = v
	return s
}

func (s *LaunchSurveyResponse) SetStatusCode(v int32) *LaunchSurveyResponse {
	s.StatusCode = &v
	return s
}

func (s *LaunchSurveyResponse) SetBody(v *LaunchSurveyResponseBody) *LaunchSurveyResponse {
	s.Body = v
	return s
}

type ListAgentStateLogsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// agent@ccc-test
	AgentId *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	// example:
	//
	// 1620273600000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 1620230400000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListAgentStateLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStateLogsRequest) GoString() string {
	return s.String()
}

func (s *ListAgentStateLogsRequest) SetAgentId(v string) *ListAgentStateLogsRequest {
	s.AgentId = &v
	return s
}

func (s *ListAgentStateLogsRequest) SetEndTime(v int64) *ListAgentStateLogsRequest {
	s.EndTime = &v
	return s
}

func (s *ListAgentStateLogsRequest) SetInstanceId(v string) *ListAgentStateLogsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListAgentStateLogsRequest) SetStartTime(v int64) *ListAgentStateLogsRequest {
	s.StartTime = &v
	return s
}

type ListAgentStateLogsResponseBody struct {
	// example:
	//
	// OK
	Code *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListAgentStateLogsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 943D8EF3-3321-471F-A104-51C96FCA94D6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAgentStateLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStateLogsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAgentStateLogsResponseBody) SetCode(v string) *ListAgentStateLogsResponseBody {
	s.Code = &v
	return s
}

func (s *ListAgentStateLogsResponseBody) SetData(v []*ListAgentStateLogsResponseBodyData) *ListAgentStateLogsResponseBody {
	s.Data = v
	return s
}

func (s *ListAgentStateLogsResponseBody) SetHttpStatusCode(v int32) *ListAgentStateLogsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAgentStateLogsResponseBody) SetMessage(v string) *ListAgentStateLogsResponseBody {
	s.Message = &v
	return s
}

func (s *ListAgentStateLogsResponseBody) SetRequestId(v string) *ListAgentStateLogsResponseBody {
	s.RequestId = &v
	return s
}

type ListAgentStateLogsResponseBodyData struct {
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	Duration  *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1620259200000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// Break
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// CHECK_IN_BREAK
	StateCode *string `json:"StateCode,omitempty" xml:"StateCode,omitempty"`
	WorkMode  *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s ListAgentStateLogsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStateLogsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAgentStateLogsResponseBodyData) SetBreakCode(v string) *ListAgentStateLogsResponseBodyData {
	s.BreakCode = &v
	return s
}

func (s *ListAgentStateLogsResponseBodyData) SetDuration(v int64) *ListAgentStateLogsResponseBodyData {
	s.Duration = &v
	return s
}

func (s *ListAgentStateLogsResponseBodyData) SetOutboundScenario(v bool) *ListAgentStateLogsResponseBodyData {
	s.OutboundScenario = &v
	return s
}

func (s *ListAgentStateLogsResponseBodyData) SetStartTime(v int64) *ListAgentStateLogsResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *ListAgentStateLogsResponseBodyData) SetState(v string) *ListAgentStateLogsResponseBodyData {
	s.State = &v
	return s
}

func (s *ListAgentStateLogsResponseBodyData) SetStateCode(v string) *ListAgentStateLogsResponseBodyData {
	s.StateCode = &v
	return s
}

func (s *ListAgentStateLogsResponseBodyData) SetWorkMode(v string) *ListAgentStateLogsResponseBodyData {
	s.WorkMode = &v
	return s
}

type ListAgentStateLogsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAgentStateLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAgentStateLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStateLogsResponse) GoString() string {
	return s.String()
}

func (s *ListAgentStateLogsResponse) SetHeaders(v map[string]*string) *ListAgentStateLogsResponse {
	s.Headers = v
	return s
}

func (s *ListAgentStateLogsResponse) SetStatusCode(v int32) *ListAgentStateLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAgentStateLogsResponse) SetBody(v *ListAgentStateLogsResponseBody) *ListAgentStateLogsResponse {
	s.Body = v
	return s
}

type ListAgentStatesRequest struct {
	// example:
	//
	// agent@ccc-test
	AgentIds *string `json:"AgentIds,omitempty" xml:"AgentIds,omitempty"`
	// if can be null:
	// true
	//
	// example:
	//
	// true
	ExcludeOfflineUsers *bool `json:"ExcludeOfflineUsers,omitempty" xml:"ExcludeOfflineUsers,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// Ready
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListAgentStatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStatesRequest) GoString() string {
	return s.String()
}

func (s *ListAgentStatesRequest) SetAgentIds(v string) *ListAgentStatesRequest {
	s.AgentIds = &v
	return s
}

func (s *ListAgentStatesRequest) SetExcludeOfflineUsers(v bool) *ListAgentStatesRequest {
	s.ExcludeOfflineUsers = &v
	return s
}

func (s *ListAgentStatesRequest) SetInstanceId(v string) *ListAgentStatesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListAgentStatesRequest) SetPageNumber(v int32) *ListAgentStatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAgentStatesRequest) SetPageSize(v int32) *ListAgentStatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListAgentStatesRequest) SetSkillGroupId(v string) *ListAgentStatesRequest {
	s.SkillGroupId = &v
	return s
}

func (s *ListAgentStatesRequest) SetState(v string) *ListAgentStatesRequest {
	s.State = &v
	return s
}

type ListAgentStatesResponseBody struct {
	// example:
	//
	// OK
	Code *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListAgentStatesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 03C67DAD-EB26-41D8-949D-9B0C470FB716
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAgentStatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListAgentStatesResponseBody) SetCode(v string) *ListAgentStatesResponseBody {
	s.Code = &v
	return s
}

func (s *ListAgentStatesResponseBody) SetData(v *ListAgentStatesResponseBodyData) *ListAgentStatesResponseBody {
	s.Data = v
	return s
}

func (s *ListAgentStatesResponseBody) SetHttpStatusCode(v int32) *ListAgentStatesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAgentStatesResponseBody) SetMessage(v string) *ListAgentStatesResponseBody {
	s.Message = &v
	return s
}

func (s *ListAgentStatesResponseBody) SetRequestId(v string) *ListAgentStatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAgentStatesResponseBody) SetSuccess(v bool) *ListAgentStatesResponseBody {
	s.Success = &v
	return s
}

type ListAgentStatesResponseBodyData struct {
	List []*ListAgentStatesResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 11
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAgentStatesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStatesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAgentStatesResponseBodyData) SetList(v []*ListAgentStatesResponseBodyDataList) *ListAgentStatesResponseBodyData {
	s.List = v
	return s
}

func (s *ListAgentStatesResponseBodyData) SetPageNumber(v int32) *ListAgentStatesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListAgentStatesResponseBodyData) SetPageSize(v int32) *ListAgentStatesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListAgentStatesResponseBodyData) SetTotalCount(v int32) *ListAgentStatesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListAgentStatesResponseBodyDataList struct {
	// example:
	//
	// agent@ccc-test
	AgentId   *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName *string `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// 8030****
	Dn *string `json:"Dn,omitempty" xml:"Dn,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// agent
	LoginName *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// Ready
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// 10
	StateDuration *string `json:"StateDuration,omitempty" xml:"StateDuration,omitempty"`
}

func (s ListAgentStatesResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStatesResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListAgentStatesResponseBodyDataList) SetAgentId(v string) *ListAgentStatesResponseBodyDataList {
	s.AgentId = &v
	return s
}

func (s *ListAgentStatesResponseBodyDataList) SetAgentName(v string) *ListAgentStatesResponseBodyDataList {
	s.AgentName = &v
	return s
}

func (s *ListAgentStatesResponseBodyDataList) SetBreakCode(v string) *ListAgentStatesResponseBodyDataList {
	s.BreakCode = &v
	return s
}

func (s *ListAgentStatesResponseBodyDataList) SetDn(v string) *ListAgentStatesResponseBodyDataList {
	s.Dn = &v
	return s
}

func (s *ListAgentStatesResponseBodyDataList) SetInstanceId(v string) *ListAgentStatesResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListAgentStatesResponseBodyDataList) SetLoginName(v string) *ListAgentStatesResponseBodyDataList {
	s.LoginName = &v
	return s
}

func (s *ListAgentStatesResponseBodyDataList) SetOutboundScenario(v bool) *ListAgentStatesResponseBodyDataList {
	s.OutboundScenario = &v
	return s
}

func (s *ListAgentStatesResponseBodyDataList) SetState(v string) *ListAgentStatesResponseBodyDataList {
	s.State = &v
	return s
}

func (s *ListAgentStatesResponseBodyDataList) SetStateDuration(v string) *ListAgentStatesResponseBodyDataList {
	s.StateDuration = &v
	return s
}

type ListAgentStatesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAgentStatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAgentStatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStatesResponse) GoString() string {
	return s.String()
}

func (s *ListAgentStatesResponse) SetHeaders(v map[string]*string) *ListAgentStatesResponse {
	s.Headers = v
	return s
}

func (s *ListAgentStatesResponse) SetStatusCode(v int32) *ListAgentStatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAgentStatesResponse) SetBody(v *ListAgentStatesResponseBody) *ListAgentStatesResponse {
	s.Body = v
	return s
}

type ListAgentSummaryReportsSinceMidnightRequest struct {
	// example:
	//
	// ["agent1@ccc-test", "agent2@ccc-test"]
	AgentIds *string `json:"AgentIds,omitempty" xml:"AgentIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s ListAgentSummaryReportsSinceMidnightRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightRequest) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightRequest) SetAgentIds(v string) *ListAgentSummaryReportsSinceMidnightRequest {
	s.AgentIds = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightRequest) SetInstanceId(v string) *ListAgentSummaryReportsSinceMidnightRequest {
	s.InstanceId = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightRequest) SetPageNumber(v int32) *ListAgentSummaryReportsSinceMidnightRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightRequest) SetPageSize(v int32) *ListAgentSummaryReportsSinceMidnightRequest {
	s.PageSize = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightRequest) SetSkillGroupId(v string) *ListAgentSummaryReportsSinceMidnightRequest {
	s.SkillGroupId = &v
	return s
}

type ListAgentSummaryReportsSinceMidnightResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode          *int32                                                                   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message                 *string                                                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	PagedAgentSummaryReport *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport `json:"PagedAgentSummaryReport,omitempty" xml:"PagedAgentSummaryReport,omitempty" type:"Struct"`
	// example:
	//
	// 27DD30C4-CAE2-481A-97CC-D3C54625341D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAgentSummaryReportsSinceMidnightResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightResponseBody) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBody) SetCode(v string) *ListAgentSummaryReportsSinceMidnightResponseBody {
	s.Code = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBody) SetHttpStatusCode(v int32) *ListAgentSummaryReportsSinceMidnightResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBody) SetMessage(v string) *ListAgentSummaryReportsSinceMidnightResponseBody {
	s.Message = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBody) SetPagedAgentSummaryReport(v *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport) *ListAgentSummaryReportsSinceMidnightResponseBody {
	s.PagedAgentSummaryReport = v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBody) SetRequestId(v string) *ListAgentSummaryReportsSinceMidnightResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBody) SetSuccess(v bool) *ListAgentSummaryReportsSinceMidnightResponseBody {
	s.Success = &v
	return s
}

type ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport struct {
	List []*ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 2
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport) SetList(v []*ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport {
	s.List = v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport) SetPageNumber(v int32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport {
	s.PageNumber = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport) SetPageSize(v int32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport {
	s.PageSize = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport) SetTotalCount(v int32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport {
	s.TotalCount = &v
	return s
}

type ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList struct {
	// example:
	//
	// agent@ccc-test
	AgentId   *string                                                                             `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName *string                                                                             `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	Inbound   *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// agent
	LoginName *string                                                                              `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	Outbound  *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall   *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	// example:
	//
	// ["skillgroup1@ccc-test","skillgroup2@ccc-test"]
	SkillGroupIds   *string `json:"SkillGroupIds,omitempty" xml:"SkillGroupIds,omitempty"`
	SkillGroupNames *string `json:"SkillGroupNames,omitempty" xml:"SkillGroupNames,omitempty"`
	// example:
	//
	// 2018-09-13 00:00:00
	Timestamp *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) SetAgentId(v string) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList {
	s.AgentId = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) SetAgentName(v string) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList {
	s.AgentName = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) SetInbound(v *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList {
	s.Inbound = v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) SetInstanceId(v string) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList {
	s.InstanceId = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) SetLoginName(v string) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList {
	s.LoginName = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) SetOutbound(v *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList {
	s.Outbound = v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) SetOverall(v *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList {
	s.Overall = v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) SetSkillGroupIds(v string) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList {
	s.SkillGroupIds = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) SetSkillGroupNames(v string) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList {
	s.SkillGroupNames = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) SetTimestamp(v string) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList {
	s.Timestamp = &v
	return s
}

type ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound struct {
	// example:
	//
	// 0
	AverageRingTime *int64 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *int64 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 0
	AverageWorkTime *int64 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 0
	CallsHandled *int64 `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	// example:
	//
	// 0
	CallsOffered *int64 `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	// example:
	//
	// 0
	HandleRate *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	// example:
	//
	// 0
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 0
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 0
	ServiceLevel20 *float32 `json:"ServiceLevel20,omitempty" xml:"ServiceLevel20,omitempty"`
	// example:
	//
	// 0
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 0
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) SetAverageRingTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) SetAverageTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) SetAverageWorkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) SetCallsHandled(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound {
	s.CallsHandled = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) SetCallsOffered(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound {
	s.CallsOffered = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) SetHandleRate(v float32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound {
	s.HandleRate = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) SetMaxRingTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) SetMaxTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) SetMaxWorkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) SetSatisfactionIndex(v float32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) SetSatisfactionSurveysOffered(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) SetSatisfactionSurveysResponded(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) SetServiceLevel20(v float32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound {
	s.ServiceLevel20 = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) SetTotalRingTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) SetTotalTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound) SetTotalWorkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListInbound {
	s.TotalWorkTime = &v
	return s
}

type ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound struct {
	// example:
	//
	// 0
	AnswerRate *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	// example:
	//
	// 0
	AverageDialingTime *int64 `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *int64 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 0
	AverageWorkTime *int64 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 0
	CallsAnswered *int64 `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	// example:
	//
	// 0
	CallsDialed *int64 `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	// example:
	//
	// 0
	MaxDialingTime *int64 `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 0
	MaxWorkTime *string `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 0
	TotalDialingTime *int64 `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 0
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) SetAnswerRate(v float32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound {
	s.AnswerRate = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) SetAverageDialingTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) SetAverageTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) SetAverageWorkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) SetCallsAnswered(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) SetCallsDialed(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound {
	s.CallsDialed = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) SetMaxDialingTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) SetMaxTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) SetMaxWorkTime(v string) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) SetSatisfactionIndex(v float32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) SetSatisfactionSurveysOffered(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) SetSatisfactionSurveysResponded(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) SetTotalDialingTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) SetTotalTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound) SetTotalWorkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOutbound {
	s.TotalWorkTime = &v
	return s
}

type ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall struct {
	// example:
	//
	// 0
	AverageReadyTime *int64 `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *int64 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 0
	AverageWorkTime *int64 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 37
	MaxReadyTime *int64 `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 0
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	OccupancyRate *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	// example:
	//
	// 0
	OneTransferCalls *int64 `json:"OneTransferCalls,omitempty" xml:"OneTransferCalls,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 0
	TotalBreakTime *int64 `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	// example:
	//
	// 0
	TotalCalls *int64 `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	// example:
	//
	// 0
	TotalLoggedInTime *int64 `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	// example:
	//
	// 0
	TotalReadyTime *int64 `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 0
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetAverageReadyTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetAverageTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetAverageWorkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetMaxReadyTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetMaxTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetMaxWorkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetOccupancyRate(v float32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.OccupancyRate = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetOneTransferCalls(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.OneTransferCalls = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetSatisfactionIndex(v float32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetSatisfactionSurveysOffered(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetSatisfactionSurveysResponded(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetTotalBreakTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetTotalCalls(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.TotalCalls = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetTotalLoggedInTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetTotalReadyTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetTotalTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall) SetTotalWorkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListOverall {
	s.TotalWorkTime = &v
	return s
}

type ListAgentSummaryReportsSinceMidnightResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAgentSummaryReportsSinceMidnightResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAgentSummaryReportsSinceMidnightResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightResponse) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightResponse) SetHeaders(v map[string]*string) *ListAgentSummaryReportsSinceMidnightResponse {
	s.Headers = v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponse) SetStatusCode(v int32) *ListAgentSummaryReportsSinceMidnightResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponse) SetBody(v *ListAgentSummaryReportsSinceMidnightResponseBody) *ListAgentSummaryReportsSinceMidnightResponse {
	s.Body = v
	return s
}

type ListAttemptsRequest struct {
	// example:
	//
	// agent@ccc-test
	AgentId *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	// example:
	//
	// job-16976964500325****
	AttemptId *string `json:"AttemptId,omitempty" xml:"AttemptId,omitempty"`
	// example:
	//
	// 1888888****
	Callee *string `json:"Callee,omitempty" xml:"Callee,omitempty"`
	// example:
	//
	// 05711234****
	Caller *string `json:"Caller,omitempty" xml:"Caller,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 6badb397-a8b5-40b6-21019d382a09
	CampaignId *string `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60ecb1a2-4480-4d01-bede-c5b7655bfadf
	CaseId *string `json:"CaseId,omitempty" xml:"CaseId,omitempty"`
	// example:
	//
	// job-16976964500325****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	Criteria  *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	// example:
	//
	// 1634115698291
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	QueueId *string `json:"QueueId,omitempty" xml:"QueueId,omitempty"`
	// example:
	//
	// 1634115688291
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListAttemptsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAttemptsRequest) GoString() string {
	return s.String()
}

func (s *ListAttemptsRequest) SetAgentId(v string) *ListAttemptsRequest {
	s.AgentId = &v
	return s
}

func (s *ListAttemptsRequest) SetAttemptId(v string) *ListAttemptsRequest {
	s.AttemptId = &v
	return s
}

func (s *ListAttemptsRequest) SetCallee(v string) *ListAttemptsRequest {
	s.Callee = &v
	return s
}

func (s *ListAttemptsRequest) SetCaller(v string) *ListAttemptsRequest {
	s.Caller = &v
	return s
}

func (s *ListAttemptsRequest) SetCampaignId(v string) *ListAttemptsRequest {
	s.CampaignId = &v
	return s
}

func (s *ListAttemptsRequest) SetCaseId(v string) *ListAttemptsRequest {
	s.CaseId = &v
	return s
}

func (s *ListAttemptsRequest) SetContactId(v string) *ListAttemptsRequest {
	s.ContactId = &v
	return s
}

func (s *ListAttemptsRequest) SetCriteria(v string) *ListAttemptsRequest {
	s.Criteria = &v
	return s
}

func (s *ListAttemptsRequest) SetEndTime(v int64) *ListAttemptsRequest {
	s.EndTime = &v
	return s
}

func (s *ListAttemptsRequest) SetInstanceId(v string) *ListAttemptsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListAttemptsRequest) SetPageNumber(v int32) *ListAttemptsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAttemptsRequest) SetPageSize(v int32) *ListAttemptsRequest {
	s.PageSize = &v
	return s
}

func (s *ListAttemptsRequest) SetQueueId(v string) *ListAttemptsRequest {
	s.QueueId = &v
	return s
}

func (s *ListAttemptsRequest) SetStartTime(v int64) *ListAttemptsRequest {
	s.StartTime = &v
	return s
}

type ListAttemptsResponseBody struct {
	// example:
	//
	// OK
	Code *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListAttemptsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 7CC6523B-0E51-1B62-8DA5-6A9831CAE315
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAttemptsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAttemptsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAttemptsResponseBody) SetCode(v string) *ListAttemptsResponseBody {
	s.Code = &v
	return s
}

func (s *ListAttemptsResponseBody) SetData(v *ListAttemptsResponseBodyData) *ListAttemptsResponseBody {
	s.Data = v
	return s
}

func (s *ListAttemptsResponseBody) SetHttpStatusCode(v int32) *ListAttemptsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAttemptsResponseBody) SetMessage(v string) *ListAttemptsResponseBody {
	s.Message = &v
	return s
}

func (s *ListAttemptsResponseBody) SetRequestId(v string) *ListAttemptsResponseBody {
	s.RequestId = &v
	return s
}

type ListAttemptsResponseBodyData struct {
	List []*ListAttemptsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAttemptsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAttemptsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAttemptsResponseBodyData) SetList(v []*ListAttemptsResponseBodyDataList) *ListAttemptsResponseBodyData {
	s.List = v
	return s
}

func (s *ListAttemptsResponseBodyData) SetPageNumber(v int32) *ListAttemptsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListAttemptsResponseBodyData) SetPageSize(v int32) *ListAttemptsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListAttemptsResponseBodyData) SetTotalCount(v int32) *ListAttemptsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListAttemptsResponseBodyDataList struct {
	// example:
	//
	// 1632883592732
	AgentEstablishedTime *int64 `json:"AgentEstablishedTime,omitempty" xml:"AgentEstablishedTime,omitempty"`
	// example:
	//
	// agent@ccc-test
	AgentId *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	// example:
	//
	// 23
	AgentRingDuration *int64 `json:"AgentRingDuration,omitempty" xml:"AgentRingDuration,omitempty"`
	// example:
	//
	// 1634196287869
	AssignAgentTime *int64 `json:"AssignAgentTime,omitempty" xml:"AssignAgentTime,omitempty"`
	// example:
	//
	// job-1704342174816****
	AttemptId *string `json:"AttemptId,omitempty" xml:"AttemptId,omitempty"`
	// example:
	//
	// 1888888****
	Callee *string `json:"Callee,omitempty" xml:"Callee,omitempty"`
	// example:
	//
	// 05711234****
	Caller *string `json:"Caller,omitempty" xml:"Caller,omitempty"`
	// example:
	//
	// 083046e3-5822-4cda-9b84-04f2a02eb605
	CampaignId *string `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	// example:
	//
	// 21d194a7-60b7-4824-932b-48ed03a83704
	CaseId *string `json:"CaseId,omitempty" xml:"CaseId,omitempty"`
	// example:
	//
	// job-1704342174816****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// example:
	//
	// 1634196286708
	CustomerEstablishedTime *int64 `json:"CustomerEstablishedTime,omitempty" xml:"CustomerEstablishedTime,omitempty"`
	// example:
	//
	// 1634196317888
	CustomerReleasedTime *int64 `json:"CustomerReleasedTime,omitempty" xml:"CustomerReleasedTime,omitempty"`
	// example:
	//
	// 2734
	DialDuration *int64 `json:"DialDuration,omitempty" xml:"DialDuration,omitempty"`
	// example:
	//
	// 1634196283974
	DialTime *int64 `json:"DialTime,omitempty" xml:"DialTime,omitempty"`
	// example:
	//
	// 1634196287789
	EnqueueTime *int64 `json:"EnqueueTime,omitempty" xml:"EnqueueTime,omitempty"`
	// example:
	//
	// 1634196286740
	EnterIvrTime *int64 `json:"EnterIvrTime,omitempty" xml:"EnterIvrTime,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 1049
	IvrDuration *int64 `json:"IvrDuration,omitempty" xml:"IvrDuration,omitempty"`
	// example:
	//
	// 80
	QueueDuration *int64 `json:"QueueDuration,omitempty" xml:"QueueDuration,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	QueueId *string `json:"QueueId,omitempty" xml:"QueueId,omitempty"`
}

func (s ListAttemptsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListAttemptsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListAttemptsResponseBodyDataList) SetAgentEstablishedTime(v int64) *ListAttemptsResponseBodyDataList {
	s.AgentEstablishedTime = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetAgentId(v string) *ListAttemptsResponseBodyDataList {
	s.AgentId = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetAgentRingDuration(v int64) *ListAttemptsResponseBodyDataList {
	s.AgentRingDuration = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetAssignAgentTime(v int64) *ListAttemptsResponseBodyDataList {
	s.AssignAgentTime = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetAttemptId(v string) *ListAttemptsResponseBodyDataList {
	s.AttemptId = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetCallee(v string) *ListAttemptsResponseBodyDataList {
	s.Callee = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetCaller(v string) *ListAttemptsResponseBodyDataList {
	s.Caller = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetCampaignId(v string) *ListAttemptsResponseBodyDataList {
	s.CampaignId = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetCaseId(v string) *ListAttemptsResponseBodyDataList {
	s.CaseId = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetContactId(v string) *ListAttemptsResponseBodyDataList {
	s.ContactId = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetCustomerEstablishedTime(v int64) *ListAttemptsResponseBodyDataList {
	s.CustomerEstablishedTime = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetCustomerReleasedTime(v int64) *ListAttemptsResponseBodyDataList {
	s.CustomerReleasedTime = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetDialDuration(v int64) *ListAttemptsResponseBodyDataList {
	s.DialDuration = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetDialTime(v int64) *ListAttemptsResponseBodyDataList {
	s.DialTime = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetEnqueueTime(v int64) *ListAttemptsResponseBodyDataList {
	s.EnqueueTime = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetEnterIvrTime(v int64) *ListAttemptsResponseBodyDataList {
	s.EnterIvrTime = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetInstanceId(v string) *ListAttemptsResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetIvrDuration(v int64) *ListAttemptsResponseBodyDataList {
	s.IvrDuration = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetQueueDuration(v int64) *ListAttemptsResponseBodyDataList {
	s.QueueDuration = &v
	return s
}

func (s *ListAttemptsResponseBodyDataList) SetQueueId(v string) *ListAttemptsResponseBodyDataList {
	s.QueueId = &v
	return s
}

type ListAttemptsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAttemptsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAttemptsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAttemptsResponse) GoString() string {
	return s.String()
}

func (s *ListAttemptsResponse) SetHeaders(v map[string]*string) *ListAttemptsResponse {
	s.Headers = v
	return s
}

func (s *ListAttemptsResponse) SetStatusCode(v int32) *ListAttemptsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAttemptsResponse) SetBody(v *ListAttemptsResponseBody) *ListAttemptsResponse {
	s.Body = v
	return s
}

type ListAudioFilesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status   *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Usage    *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s ListAudioFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAudioFilesRequest) GoString() string {
	return s.String()
}

func (s *ListAudioFilesRequest) SetInstanceId(v string) *ListAudioFilesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListAudioFilesRequest) SetPageNumber(v int32) *ListAudioFilesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAudioFilesRequest) SetPageSize(v int32) *ListAudioFilesRequest {
	s.PageSize = &v
	return s
}

func (s *ListAudioFilesRequest) SetStatus(v string) *ListAudioFilesRequest {
	s.Status = &v
	return s
}

func (s *ListAudioFilesRequest) SetUsage(v string) *ListAudioFilesRequest {
	s.Usage = &v
	return s
}

type ListAudioFilesResponseBody struct {
	// example:
	//
	// OK
	Code *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListAudioFilesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 53223330-EBF1-586B-A2CB-93C3B711FDA0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAudioFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAudioFilesResponseBody) GoString() string {
	return s.String()
}

func (s *ListAudioFilesResponseBody) SetCode(v string) *ListAudioFilesResponseBody {
	s.Code = &v
	return s
}

func (s *ListAudioFilesResponseBody) SetData(v *ListAudioFilesResponseBodyData) *ListAudioFilesResponseBody {
	s.Data = v
	return s
}

func (s *ListAudioFilesResponseBody) SetHttpStatusCode(v int32) *ListAudioFilesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAudioFilesResponseBody) SetMessage(v string) *ListAudioFilesResponseBody {
	s.Message = &v
	return s
}

func (s *ListAudioFilesResponseBody) SetRequestId(v string) *ListAudioFilesResponseBody {
	s.RequestId = &v
	return s
}

type ListAudioFilesResponseBodyData struct {
	List []*ListAudioFilesResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAudioFilesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAudioFilesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAudioFilesResponseBodyData) SetList(v []*ListAudioFilesResponseBodyDataList) *ListAudioFilesResponseBodyData {
	s.List = v
	return s
}

func (s *ListAudioFilesResponseBodyData) SetPageNumber(v int32) *ListAudioFilesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListAudioFilesResponseBodyData) SetPageSize(v int32) *ListAudioFilesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListAudioFilesResponseBodyData) SetTotalCount(v int32) *ListAudioFilesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListAudioFilesResponseBodyDataList struct {
	// example:
	//
	// test-file.wav
	AudioFileName *string `json:"AudioFileName,omitempty" xml:"AudioFileName,omitempty"`
	// example:
	//
	// d5cd7a94-3b6a-47d2-b7fd-0b1cd839bf77
	AudioResourceId *string `json:"AudioResourceId,omitempty" xml:"AudioResourceId,omitempty"`
	AuditResult     *string `json:"AuditResult,omitempty" xml:"AuditResult,omitempty"`
	// example:
	//
	// 2021-03-05 17:35:45.0
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// ccc-test/test-file.wav
	OssFileKey *string `json:"OssFileKey,omitempty" xml:"OssFileKey,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 2021-03-08 15:34:49.0
	UpdatedTime *string `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
	Usage       *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s ListAudioFilesResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListAudioFilesResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListAudioFilesResponseBodyDataList) SetAudioFileName(v string) *ListAudioFilesResponseBodyDataList {
	s.AudioFileName = &v
	return s
}

func (s *ListAudioFilesResponseBodyDataList) SetAudioResourceId(v string) *ListAudioFilesResponseBodyDataList {
	s.AudioResourceId = &v
	return s
}

func (s *ListAudioFilesResponseBodyDataList) SetAuditResult(v string) *ListAudioFilesResponseBodyDataList {
	s.AuditResult = &v
	return s
}

func (s *ListAudioFilesResponseBodyDataList) SetCreatedTime(v string) *ListAudioFilesResponseBodyDataList {
	s.CreatedTime = &v
	return s
}

func (s *ListAudioFilesResponseBodyDataList) SetInstanceId(v string) *ListAudioFilesResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListAudioFilesResponseBodyDataList) SetName(v string) *ListAudioFilesResponseBodyDataList {
	s.Name = &v
	return s
}

func (s *ListAudioFilesResponseBodyDataList) SetOssFileKey(v string) *ListAudioFilesResponseBodyDataList {
	s.OssFileKey = &v
	return s
}

func (s *ListAudioFilesResponseBodyDataList) SetStatus(v string) *ListAudioFilesResponseBodyDataList {
	s.Status = &v
	return s
}

func (s *ListAudioFilesResponseBodyDataList) SetUpdatedTime(v string) *ListAudioFilesResponseBodyDataList {
	s.UpdatedTime = &v
	return s
}

func (s *ListAudioFilesResponseBodyDataList) SetUsage(v string) *ListAudioFilesResponseBodyDataList {
	s.Usage = &v
	return s
}

type ListAudioFilesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAudioFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAudioFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAudioFilesResponse) GoString() string {
	return s.String()
}

func (s *ListAudioFilesResponse) SetHeaders(v map[string]*string) *ListAudioFilesResponse {
	s.Headers = v
	return s
}

func (s *ListAudioFilesResponse) SetStatusCode(v int32) *ListAudioFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAudioFilesResponse) SetBody(v *ListAudioFilesResponseBody) *ListAudioFilesResponse {
	s.Body = v
	return s
}

type ListBlacklistCallTaggingsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [{"number":"1521083xxxx","jobId":"job-481841171213393920"}]
	NumberList *string `json:"NumberList,omitempty" xml:"NumberList,omitempty"`
}

func (s ListBlacklistCallTaggingsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListBlacklistCallTaggingsRequest) GoString() string {
	return s.String()
}

func (s *ListBlacklistCallTaggingsRequest) SetInstanceId(v string) *ListBlacklistCallTaggingsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListBlacklistCallTaggingsRequest) SetNumberList(v string) *ListBlacklistCallTaggingsRequest {
	s.NumberList = &v
	return s
}

type ListBlacklistCallTaggingsResponseBody struct {
	// example:
	//
	// OK
	Code *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListBlacklistCallTaggingsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 032C73C4-3A6F-4502-872B-4F5B41161C6E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListBlacklistCallTaggingsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListBlacklistCallTaggingsResponseBody) GoString() string {
	return s.String()
}

func (s *ListBlacklistCallTaggingsResponseBody) SetCode(v string) *ListBlacklistCallTaggingsResponseBody {
	s.Code = &v
	return s
}

func (s *ListBlacklistCallTaggingsResponseBody) SetData(v []*ListBlacklistCallTaggingsResponseBodyData) *ListBlacklistCallTaggingsResponseBody {
	s.Data = v
	return s
}

func (s *ListBlacklistCallTaggingsResponseBody) SetHttpStatusCode(v int32) *ListBlacklistCallTaggingsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListBlacklistCallTaggingsResponseBody) SetMessage(v string) *ListBlacklistCallTaggingsResponseBody {
	s.Message = &v
	return s
}

func (s *ListBlacklistCallTaggingsResponseBody) SetRequestId(v string) *ListBlacklistCallTaggingsResponseBody {
	s.RequestId = &v
	return s
}

type ListBlacklistCallTaggingsResponseBodyData struct {
	// example:
	//
	// true
	Blacklisted *bool `json:"Blacklisted,omitempty" xml:"Blacklisted,omitempty"`
	// example:
	//
	// job-481841171213393920
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1521083xxxx
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
}

func (s ListBlacklistCallTaggingsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListBlacklistCallTaggingsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListBlacklistCallTaggingsResponseBodyData) SetBlacklisted(v bool) *ListBlacklistCallTaggingsResponseBodyData {
	s.Blacklisted = &v
	return s
}

func (s *ListBlacklistCallTaggingsResponseBodyData) SetJobId(v string) *ListBlacklistCallTaggingsResponseBodyData {
	s.JobId = &v
	return s
}

func (s *ListBlacklistCallTaggingsResponseBodyData) SetNumber(v string) *ListBlacklistCallTaggingsResponseBodyData {
	s.Number = &v
	return s
}

type ListBlacklistCallTaggingsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListBlacklistCallTaggingsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListBlacklistCallTaggingsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListBlacklistCallTaggingsResponse) GoString() string {
	return s.String()
}

func (s *ListBlacklistCallTaggingsResponse) SetHeaders(v map[string]*string) *ListBlacklistCallTaggingsResponse {
	s.Headers = v
	return s
}

func (s *ListBlacklistCallTaggingsResponse) SetStatusCode(v int32) *ListBlacklistCallTaggingsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListBlacklistCallTaggingsResponse) SetBody(v *ListBlacklistCallTaggingsResponseBody) *ListBlacklistCallTaggingsResponse {
	s.Body = v
	return s
}

type ListBriefSkillGroupsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MediaType  *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// skillgroup
	SearchPattern *string `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
}

func (s ListBriefSkillGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListBriefSkillGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListBriefSkillGroupsRequest) SetInstanceId(v string) *ListBriefSkillGroupsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListBriefSkillGroupsRequest) SetMediaType(v string) *ListBriefSkillGroupsRequest {
	s.MediaType = &v
	return s
}

func (s *ListBriefSkillGroupsRequest) SetPageNumber(v int32) *ListBriefSkillGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListBriefSkillGroupsRequest) SetPageSize(v int32) *ListBriefSkillGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *ListBriefSkillGroupsRequest) SetSearchPattern(v string) *ListBriefSkillGroupsRequest {
	s.SearchPattern = &v
	return s
}

type ListBriefSkillGroupsResponseBody struct {
	// example:
	//
	// OK
	Code *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListBriefSkillGroupsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3969FC68-CEC2-4398-B76A-60D2F7EDEBAF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListBriefSkillGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListBriefSkillGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListBriefSkillGroupsResponseBody) SetCode(v string) *ListBriefSkillGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *ListBriefSkillGroupsResponseBody) SetData(v *ListBriefSkillGroupsResponseBodyData) *ListBriefSkillGroupsResponseBody {
	s.Data = v
	return s
}

func (s *ListBriefSkillGroupsResponseBody) SetHttpStatusCode(v int32) *ListBriefSkillGroupsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListBriefSkillGroupsResponseBody) SetMessage(v string) *ListBriefSkillGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *ListBriefSkillGroupsResponseBody) SetRequestId(v string) *ListBriefSkillGroupsResponseBody {
	s.RequestId = &v
	return s
}

type ListBriefSkillGroupsResponseBodyData struct {
	List []*ListBriefSkillGroupsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListBriefSkillGroupsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListBriefSkillGroupsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListBriefSkillGroupsResponseBodyData) SetList(v []*ListBriefSkillGroupsResponseBodyDataList) *ListBriefSkillGroupsResponseBodyData {
	s.List = v
	return s
}

func (s *ListBriefSkillGroupsResponseBodyData) SetPageNumber(v int32) *ListBriefSkillGroupsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListBriefSkillGroupsResponseBodyData) SetPageSize(v int32) *ListBriefSkillGroupsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListBriefSkillGroupsResponseBodyData) SetTotalCount(v int32) *ListBriefSkillGroupsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListBriefSkillGroupsResponseBodyDataList struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MediaType  *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 1
	PhoneNumberCount *int32 `json:"PhoneNumberCount,omitempty" xml:"PhoneNumberCount,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// skillgroup
	SkillGroupName *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
	// example:
	//
	// 10
	UserCount *int32 `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
}

func (s ListBriefSkillGroupsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListBriefSkillGroupsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListBriefSkillGroupsResponseBodyDataList) SetDescription(v string) *ListBriefSkillGroupsResponseBodyDataList {
	s.Description = &v
	return s
}

func (s *ListBriefSkillGroupsResponseBodyDataList) SetDisplayName(v string) *ListBriefSkillGroupsResponseBodyDataList {
	s.DisplayName = &v
	return s
}

func (s *ListBriefSkillGroupsResponseBodyDataList) SetInstanceId(v string) *ListBriefSkillGroupsResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListBriefSkillGroupsResponseBodyDataList) SetMediaType(v string) *ListBriefSkillGroupsResponseBodyDataList {
	s.MediaType = &v
	return s
}

func (s *ListBriefSkillGroupsResponseBodyDataList) SetPhoneNumberCount(v int32) *ListBriefSkillGroupsResponseBodyDataList {
	s.PhoneNumberCount = &v
	return s
}

func (s *ListBriefSkillGroupsResponseBodyDataList) SetSkillGroupId(v string) *ListBriefSkillGroupsResponseBodyDataList {
	s.SkillGroupId = &v
	return s
}

func (s *ListBriefSkillGroupsResponseBodyDataList) SetSkillGroupName(v string) *ListBriefSkillGroupsResponseBodyDataList {
	s.SkillGroupName = &v
	return s
}

func (s *ListBriefSkillGroupsResponseBodyDataList) SetUserCount(v int32) *ListBriefSkillGroupsResponseBodyDataList {
	s.UserCount = &v
	return s
}

type ListBriefSkillGroupsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListBriefSkillGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListBriefSkillGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListBriefSkillGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListBriefSkillGroupsResponse) SetHeaders(v map[string]*string) *ListBriefSkillGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListBriefSkillGroupsResponse) SetStatusCode(v int32) *ListBriefSkillGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListBriefSkillGroupsResponse) SetBody(v *ListBriefSkillGroupsResponseBody) *ListBriefSkillGroupsResponse {
	s.Body = v
	return s
}

type ListCallDetailRecordsRequest struct {
	// example:
	//
	// agent@ccc-test
	AgentId *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	// example:
	//
	// 1320523****
	CalledNumber *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	// example:
	//
	// 07353988****
	CallingNumber *string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	// example:
	//
	// Success
	ContactDisposition *string `json:"ContactDisposition,omitempty" xml:"ContactDisposition,omitempty"`
	// example:
	//
	// ["Success","NoAnswer"]
	ContactDispositionList *string `json:"ContactDispositionList,omitempty" xml:"ContactDispositionList,omitempty"`
	// example:
	//
	// job-12515239414412****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// example:
	//
	// Outbound
	ContactType *string `json:"ContactType,omitempty" xml:"ContactType,omitempty"`
	// example:
	//
	// ["Internal","Inbound"]
	ContactTypeList *string `json:"ContactTypeList,omitempty" xml:"ContactTypeList,omitempty"`
	// example:
	//
	// {"phoneNumber":"0735"}
	Criteria *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	// example:
	//
	// ["NotConnected","NoAnswer"]
	EarlyMediaStateList *string `json:"EarlyMediaStateList,omitempty" xml:"EarlyMediaStateList,omitempty"`
	// example:
	//
	// 1532707199000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// startTime
	OrderByField *string `json:"OrderByField,omitempty" xml:"OrderByField,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 100
	PageSize                    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SatisfactionDescriptionList *string `json:"SatisfactionDescriptionList,omitempty" xml:"SatisfactionDescriptionList,omitempty"`
	// example:
	//
	// ["1","3"]
	SatisfactionList *string `json:"SatisfactionList,omitempty" xml:"SatisfactionList,omitempty"`
	// example:
	//
	// IVR
	SatisfactionSurveyChannel *string `json:"SatisfactionSurveyChannel,omitempty" xml:"SatisfactionSurveyChannel,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// DESC
	SortOrder *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	// example:
	//
	// 1532448000000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListCallDetailRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCallDetailRecordsRequest) GoString() string {
	return s.String()
}

func (s *ListCallDetailRecordsRequest) SetAgentId(v string) *ListCallDetailRecordsRequest {
	s.AgentId = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetCalledNumber(v string) *ListCallDetailRecordsRequest {
	s.CalledNumber = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetCallingNumber(v string) *ListCallDetailRecordsRequest {
	s.CallingNumber = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetContactDisposition(v string) *ListCallDetailRecordsRequest {
	s.ContactDisposition = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetContactDispositionList(v string) *ListCallDetailRecordsRequest {
	s.ContactDispositionList = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetContactId(v string) *ListCallDetailRecordsRequest {
	s.ContactId = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetContactType(v string) *ListCallDetailRecordsRequest {
	s.ContactType = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetContactTypeList(v string) *ListCallDetailRecordsRequest {
	s.ContactTypeList = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetCriteria(v string) *ListCallDetailRecordsRequest {
	s.Criteria = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetEarlyMediaStateList(v string) *ListCallDetailRecordsRequest {
	s.EarlyMediaStateList = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetEndTime(v int64) *ListCallDetailRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetInstanceId(v string) *ListCallDetailRecordsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetOrderByField(v string) *ListCallDetailRecordsRequest {
	s.OrderByField = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetPageNumber(v int32) *ListCallDetailRecordsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetPageSize(v int32) *ListCallDetailRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetSatisfactionDescriptionList(v string) *ListCallDetailRecordsRequest {
	s.SatisfactionDescriptionList = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetSatisfactionList(v string) *ListCallDetailRecordsRequest {
	s.SatisfactionList = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetSatisfactionSurveyChannel(v string) *ListCallDetailRecordsRequest {
	s.SatisfactionSurveyChannel = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetSkillGroupId(v string) *ListCallDetailRecordsRequest {
	s.SkillGroupId = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetSortOrder(v string) *ListCallDetailRecordsRequest {
	s.SortOrder = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetStartTime(v int64) *ListCallDetailRecordsRequest {
	s.StartTime = &v
	return s
}

type ListCallDetailRecordsResponseBody struct {
	// example:
	//
	// OK
	Code *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListCallDetailRecordsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListCallDetailRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCallDetailRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCallDetailRecordsResponseBody) SetCode(v string) *ListCallDetailRecordsResponseBody {
	s.Code = &v
	return s
}

func (s *ListCallDetailRecordsResponseBody) SetData(v *ListCallDetailRecordsResponseBodyData) *ListCallDetailRecordsResponseBody {
	s.Data = v
	return s
}

func (s *ListCallDetailRecordsResponseBody) SetHttpStatusCode(v int32) *ListCallDetailRecordsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListCallDetailRecordsResponseBody) SetMessage(v string) *ListCallDetailRecordsResponseBody {
	s.Message = &v
	return s
}

func (s *ListCallDetailRecordsResponseBody) SetRequestId(v string) *ListCallDetailRecordsResponseBody {
	s.RequestId = &v
	return s
}

type ListCallDetailRecordsResponseBodyData struct {
	List []*ListCallDetailRecordsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 11
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCallDetailRecordsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCallDetailRecordsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCallDetailRecordsResponseBodyData) SetList(v []*ListCallDetailRecordsResponseBodyDataList) *ListCallDetailRecordsResponseBodyData {
	s.List = v
	return s
}

func (s *ListCallDetailRecordsResponseBodyData) SetPageNumber(v int32) *ListCallDetailRecordsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyData) SetPageSize(v int32) *ListCallDetailRecordsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyData) SetTotalCount(v int32) *ListCallDetailRecordsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListCallDetailRecordsResponseBodyDataList struct {
	// example:
	//
	// 0533128****
	AdditionalBroker *string `json:"AdditionalBroker,omitempty" xml:"AdditionalBroker,omitempty"`
	// example:
	//
	// agent@ccc-test
	AgentIds   *string `json:"AgentIds,omitempty" xml:"AgentIds,omitempty"`
	AgentNames *string `json:"AgentNames,omitempty" xml:"AgentNames,omitempty"`
	// example:
	//
	// 0533127****
	Broker *string `json:"Broker,omitempty" xml:"Broker,omitempty"`
	// example:
	//
	// 30
	CallDuration *string `json:"CallDuration,omitempty" xml:"CallDuration,omitempty"`
	// example:
	//
	// 1332315****
	CalledNumber   *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CalleeLocation *string `json:"CalleeLocation,omitempty" xml:"CalleeLocation,omitempty"`
	CallerLocation *string `json:"CallerLocation,omitempty" xml:"CallerLocation,omitempty"`
	// example:
	//
	// 0533128****
	CallingNumber *string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	// example:
	//
	// Success
	ContactDisposition *string `json:"ContactDisposition,omitempty" xml:"ContactDisposition,omitempty"`
	// example:
	//
	// job-12515239414412****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// example:
	//
	// Outbound
	ContactType *string `json:"ContactType,omitempty" xml:"ContactType,omitempty"`
	DialingTime *int64  `json:"DialingTime,omitempty" xml:"DialingTime,omitempty"`
	// example:
	//
	// NotConnected
	EarlyMediaState *string `json:"EarlyMediaState,omitempty" xml:"EarlyMediaState,omitempty"`
	// example:
	//
	// 1532448000000
	EstablishedTime *int64 `json:"EstablishedTime,omitempty" xml:"EstablishedTime,omitempty"`
	HeldTime        *int64 `json:"HeldTime,omitempty" xml:"HeldTime,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 8
	IvrTime *int64 `json:"IvrTime,omitempty" xml:"IvrTime,omitempty"`
	// example:
	//
	// 0
	QueueTime *int64 `json:"QueueTime,omitempty" xml:"QueueTime,omitempty"`
	// example:
	//
	// 10
	RecordingDuration *int64 `json:"RecordingDuration,omitempty" xml:"RecordingDuration,omitempty"`
	// example:
	//
	// true
	RecordingReady *bool `json:"RecordingReady,omitempty" xml:"RecordingReady,omitempty"`
	// example:
	//
	// customer
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	ReleaseReason    *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// 1532707199000
	ReleaseTime *int64 `json:"ReleaseTime,omitempty" xml:"ReleaseTime,omitempty"`
	// example:
	//
	// 5
	RingTime                *int64  `json:"RingTime,omitempty" xml:"RingTime,omitempty"`
	SatisfactionDescription *string `json:"SatisfactionDescription,omitempty" xml:"SatisfactionDescription,omitempty"`
	// example:
	//
	// 1
	SatisfactionIndex *int32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// IVR
	SatisfactionSurveyChannel *string `json:"SatisfactionSurveyChannel,omitempty" xml:"SatisfactionSurveyChannel,omitempty"`
	// example:
	//
	// true
	SatisfactionSurveyOffered *bool `json:"SatisfactionSurveyOffered,omitempty" xml:"SatisfactionSurveyOffered,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupIds   *string `json:"SkillGroupIds,omitempty" xml:"SkillGroupIds,omitempty"`
	SkillGroupNames *string `json:"SkillGroupNames,omitempty" xml:"SkillGroupNames,omitempty"`
	// example:
	//
	// 1532448000000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TalkTime  *int64 `json:"TalkTime,omitempty" xml:"TalkTime,omitempty"`
	// example:
	//
	// 5
	WaitTime *int64 `json:"WaitTime,omitempty" xml:"WaitTime,omitempty"`
}

func (s ListCallDetailRecordsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListCallDetailRecordsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetAdditionalBroker(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.AdditionalBroker = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetAgentIds(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.AgentIds = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetAgentNames(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.AgentNames = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetBroker(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.Broker = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetCallDuration(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.CallDuration = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetCalledNumber(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.CalledNumber = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetCalleeLocation(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.CalleeLocation = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetCallerLocation(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.CallerLocation = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetCallingNumber(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.CallingNumber = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetContactDisposition(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.ContactDisposition = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetContactId(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.ContactId = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetContactType(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.ContactType = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetDialingTime(v int64) *ListCallDetailRecordsResponseBodyDataList {
	s.DialingTime = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetEarlyMediaState(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.EarlyMediaState = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetEstablishedTime(v int64) *ListCallDetailRecordsResponseBodyDataList {
	s.EstablishedTime = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetHeldTime(v int64) *ListCallDetailRecordsResponseBodyDataList {
	s.HeldTime = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetInstanceId(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetIvrTime(v int64) *ListCallDetailRecordsResponseBodyDataList {
	s.IvrTime = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetQueueTime(v int64) *ListCallDetailRecordsResponseBodyDataList {
	s.QueueTime = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetRecordingDuration(v int64) *ListCallDetailRecordsResponseBodyDataList {
	s.RecordingDuration = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetRecordingReady(v bool) *ListCallDetailRecordsResponseBodyDataList {
	s.RecordingReady = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetReleaseInitiator(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.ReleaseInitiator = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetReleaseReason(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.ReleaseReason = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetReleaseTime(v int64) *ListCallDetailRecordsResponseBodyDataList {
	s.ReleaseTime = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetRingTime(v int64) *ListCallDetailRecordsResponseBodyDataList {
	s.RingTime = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetSatisfactionDescription(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.SatisfactionDescription = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetSatisfactionIndex(v int32) *ListCallDetailRecordsResponseBodyDataList {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetSatisfactionSurveyChannel(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.SatisfactionSurveyChannel = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetSatisfactionSurveyOffered(v bool) *ListCallDetailRecordsResponseBodyDataList {
	s.SatisfactionSurveyOffered = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetSkillGroupIds(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.SkillGroupIds = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetSkillGroupNames(v string) *ListCallDetailRecordsResponseBodyDataList {
	s.SkillGroupNames = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetStartTime(v int64) *ListCallDetailRecordsResponseBodyDataList {
	s.StartTime = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetTalkTime(v int64) *ListCallDetailRecordsResponseBodyDataList {
	s.TalkTime = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyDataList) SetWaitTime(v int64) *ListCallDetailRecordsResponseBodyDataList {
	s.WaitTime = &v
	return s
}

type ListCallDetailRecordsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCallDetailRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCallDetailRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCallDetailRecordsResponse) GoString() string {
	return s.String()
}

func (s *ListCallDetailRecordsResponse) SetHeaders(v map[string]*string) *ListCallDetailRecordsResponse {
	s.Headers = v
	return s
}

func (s *ListCallDetailRecordsResponse) SetStatusCode(v int32) *ListCallDetailRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCallDetailRecordsResponse) SetBody(v *ListCallDetailRecordsResponseBody) *ListCallDetailRecordsResponse {
	s.Body = v
	return s
}

type ListCallTagsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListCallTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCallTagsRequest) GoString() string {
	return s.String()
}

func (s *ListCallTagsRequest) SetInstanceId(v string) *ListCallTagsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListCallTagsRequest) SetPageNumber(v int32) *ListCallTagsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCallTagsRequest) SetPageSize(v int32) *ListCallTagsRequest {
	s.PageSize = &v
	return s
}

type ListCallTagsResponseBody struct {
	// example:
	//
	// OK
	Code *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListCallTagsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListCallTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCallTagsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCallTagsResponseBody) SetCode(v string) *ListCallTagsResponseBody {
	s.Code = &v
	return s
}

func (s *ListCallTagsResponseBody) SetData(v *ListCallTagsResponseBodyData) *ListCallTagsResponseBody {
	s.Data = v
	return s
}

func (s *ListCallTagsResponseBody) SetHttpStatusCode(v int32) *ListCallTagsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListCallTagsResponseBody) SetMessage(v string) *ListCallTagsResponseBody {
	s.Message = &v
	return s
}

func (s *ListCallTagsResponseBody) SetRequestId(v string) *ListCallTagsResponseBody {
	s.RequestId = &v
	return s
}

type ListCallTagsResponseBodyData struct {
	List []*ListCallTagsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCallTagsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCallTagsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCallTagsResponseBodyData) SetList(v []*ListCallTagsResponseBodyDataList) *ListCallTagsResponseBodyData {
	s.List = v
	return s
}

func (s *ListCallTagsResponseBodyData) SetPageNumber(v int32) *ListCallTagsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListCallTagsResponseBodyData) SetPageSize(v int32) *ListCallTagsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListCallTagsResponseBodyData) SetTotalCount(v int32) *ListCallTagsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListCallTagsResponseBodyDataList struct {
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// TagA
	TagName *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
}

func (s ListCallTagsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListCallTagsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListCallTagsResponseBodyDataList) SetInstanceId(v string) *ListCallTagsResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListCallTagsResponseBodyDataList) SetTagName(v string) *ListCallTagsResponseBodyDataList {
	s.TagName = &v
	return s
}

type ListCallTagsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCallTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCallTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCallTagsResponse) GoString() string {
	return s.String()
}

func (s *ListCallTagsResponse) SetHeaders(v map[string]*string) *ListCallTagsResponse {
	s.Headers = v
	return s
}

func (s *ListCallTagsResponse) SetStatusCode(v int32) *ListCallTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCallTagsResponse) SetBody(v *ListCallTagsResponseBody) *ListCallTagsResponse {
	s.Body = v
	return s
}

type ListCampaignTrendingReportRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 6badb397-a8b5-40b6-21019d382a09
	CampaignId *string `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	// example:
	//
	// 2021-10-14 20:59:59
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 2021-10-14 00:00:00
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListCampaignTrendingReportRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCampaignTrendingReportRequest) GoString() string {
	return s.String()
}

func (s *ListCampaignTrendingReportRequest) SetCampaignId(v string) *ListCampaignTrendingReportRequest {
	s.CampaignId = &v
	return s
}

func (s *ListCampaignTrendingReportRequest) SetEndTime(v int64) *ListCampaignTrendingReportRequest {
	s.EndTime = &v
	return s
}

func (s *ListCampaignTrendingReportRequest) SetInstanceId(v string) *ListCampaignTrendingReportRequest {
	s.InstanceId = &v
	return s
}

func (s *ListCampaignTrendingReportRequest) SetStartTime(v int64) *ListCampaignTrendingReportRequest {
	s.StartTime = &v
	return s
}

type ListCampaignTrendingReportResponseBody struct {
	// example:
	//
	// OK
	Code *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListCampaignTrendingReportResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 6CCEF32F-8614-535F-A1D9-D85B8C0DC4F0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListCampaignTrendingReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCampaignTrendingReportResponseBody) GoString() string {
	return s.String()
}

func (s *ListCampaignTrendingReportResponseBody) SetCode(v string) *ListCampaignTrendingReportResponseBody {
	s.Code = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBody) SetData(v []*ListCampaignTrendingReportResponseBodyData) *ListCampaignTrendingReportResponseBody {
	s.Data = v
	return s
}

func (s *ListCampaignTrendingReportResponseBody) SetHttpStatusCode(v int32) *ListCampaignTrendingReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBody) SetMessage(v string) *ListCampaignTrendingReportResponseBody {
	s.Message = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBody) SetRequestId(v string) *ListCampaignTrendingReportResponseBody {
	s.RequestId = &v
	return s
}

type ListCampaignTrendingReportResponseBodyData struct {
	// example:
	//
	// 0
	BreakAgents    *int64 `json:"BreakAgents,omitempty" xml:"BreakAgents,omitempty"`
	BreakingAgents *int64 `json:"BreakingAgents,omitempty" xml:"BreakingAgents,omitempty"`
	// example:
	//
	// 1
	Concurrency *int64 `json:"Concurrency,omitempty" xml:"Concurrency,omitempty"`
	// example:
	//
	// 1634037840000
	Datetime *int64 `json:"Datetime,omitempty" xml:"Datetime,omitempty"`
	// example:
	//
	// 2
	LoggedInAgents                 *int64 `json:"LoggedInAgents,omitempty" xml:"LoggedInAgents,omitempty"`
	OutboundScenarioBreakingAgents *int64 `json:"OutboundScenarioBreakingAgents,omitempty" xml:"OutboundScenarioBreakingAgents,omitempty"`
	OutboundScenarioReadyAgents    *int64 `json:"OutboundScenarioReadyAgents,omitempty" xml:"OutboundScenarioReadyAgents,omitempty"`
	OutboundScenarioTalkingAgents  *int64 `json:"OutboundScenarioTalkingAgents,omitempty" xml:"OutboundScenarioTalkingAgents,omitempty"`
	OutboundScenarioWorkingAgents  *int64 `json:"OutboundScenarioWorkingAgents,omitempty" xml:"OutboundScenarioWorkingAgents,omitempty"`
	// example:
	//
	// 2
	ReadyAgents *int64 `json:"ReadyAgents,omitempty" xml:"ReadyAgents,omitempty"`
	StatsTime   *int64 `json:"StatsTime,omitempty" xml:"StatsTime,omitempty"`
	// example:
	//
	// 0
	TalkAgents    *int64 `json:"TalkAgents,omitempty" xml:"TalkAgents,omitempty"`
	TalkingAgents *int64 `json:"TalkingAgents,omitempty" xml:"TalkingAgents,omitempty"`
	// example:
	//
	// 0
	WorkAgents    *int64 `json:"WorkAgents,omitempty" xml:"WorkAgents,omitempty"`
	WorkingAgents *int64 `json:"WorkingAgents,omitempty" xml:"WorkingAgents,omitempty"`
}

func (s ListCampaignTrendingReportResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCampaignTrendingReportResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCampaignTrendingReportResponseBodyData) SetBreakAgents(v int64) *ListCampaignTrendingReportResponseBodyData {
	s.BreakAgents = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBodyData) SetBreakingAgents(v int64) *ListCampaignTrendingReportResponseBodyData {
	s.BreakingAgents = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBodyData) SetConcurrency(v int64) *ListCampaignTrendingReportResponseBodyData {
	s.Concurrency = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBodyData) SetDatetime(v int64) *ListCampaignTrendingReportResponseBodyData {
	s.Datetime = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBodyData) SetLoggedInAgents(v int64) *ListCampaignTrendingReportResponseBodyData {
	s.LoggedInAgents = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBodyData) SetOutboundScenarioBreakingAgents(v int64) *ListCampaignTrendingReportResponseBodyData {
	s.OutboundScenarioBreakingAgents = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBodyData) SetOutboundScenarioReadyAgents(v int64) *ListCampaignTrendingReportResponseBodyData {
	s.OutboundScenarioReadyAgents = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBodyData) SetOutboundScenarioTalkingAgents(v int64) *ListCampaignTrendingReportResponseBodyData {
	s.OutboundScenarioTalkingAgents = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBodyData) SetOutboundScenarioWorkingAgents(v int64) *ListCampaignTrendingReportResponseBodyData {
	s.OutboundScenarioWorkingAgents = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBodyData) SetReadyAgents(v int64) *ListCampaignTrendingReportResponseBodyData {
	s.ReadyAgents = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBodyData) SetStatsTime(v int64) *ListCampaignTrendingReportResponseBodyData {
	s.StatsTime = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBodyData) SetTalkAgents(v int64) *ListCampaignTrendingReportResponseBodyData {
	s.TalkAgents = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBodyData) SetTalkingAgents(v int64) *ListCampaignTrendingReportResponseBodyData {
	s.TalkingAgents = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBodyData) SetWorkAgents(v int64) *ListCampaignTrendingReportResponseBodyData {
	s.WorkAgents = &v
	return s
}

func (s *ListCampaignTrendingReportResponseBodyData) SetWorkingAgents(v int64) *ListCampaignTrendingReportResponseBodyData {
	s.WorkingAgents = &v
	return s
}

type ListCampaignTrendingReportResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCampaignTrendingReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCampaignTrendingReportResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCampaignTrendingReportResponse) GoString() string {
	return s.String()
}

func (s *ListCampaignTrendingReportResponse) SetHeaders(v map[string]*string) *ListCampaignTrendingReportResponse {
	s.Headers = v
	return s
}

func (s *ListCampaignTrendingReportResponse) SetStatusCode(v int32) *ListCampaignTrendingReportResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCampaignTrendingReportResponse) SetBody(v *ListCampaignTrendingReportResponseBody) *ListCampaignTrendingReportResponse {
	s.Body = v
	return s
}

type ListCampaignsRequest struct {
	// example:
	//
	// 2021-10-14 20:59:59
	ActualStartTimeFrom *string `json:"ActualStartTimeFrom,omitempty" xml:"ActualStartTimeFrom,omitempty"`
	// example:
	//
	// 2021-10-14 20:59:59
	ActualStartTimeTo *string `json:"ActualStartTimeTo,omitempty" xml:"ActualStartTimeTo,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// test-campaign
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 2021-10-14 00:00:00
	PlanedStartTimeFrom *string `json:"PlanedStartTimeFrom,omitempty" xml:"PlanedStartTimeFrom,omitempty"`
	// example:
	//
	// 2021-10-14 20:59:59
	PlanedStartTimeTo *string `json:"PlanedStartTimeTo,omitempty" xml:"PlanedStartTimeTo,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	QueueId *string `json:"QueueId,omitempty" xml:"QueueId,omitempty"`
	// example:
	//
	// Draft
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListCampaignsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCampaignsRequest) GoString() string {
	return s.String()
}

func (s *ListCampaignsRequest) SetActualStartTimeFrom(v string) *ListCampaignsRequest {
	s.ActualStartTimeFrom = &v
	return s
}

func (s *ListCampaignsRequest) SetActualStartTimeTo(v string) *ListCampaignsRequest {
	s.ActualStartTimeTo = &v
	return s
}

func (s *ListCampaignsRequest) SetInstanceId(v string) *ListCampaignsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListCampaignsRequest) SetName(v string) *ListCampaignsRequest {
	s.Name = &v
	return s
}

func (s *ListCampaignsRequest) SetPageNumber(v int64) *ListCampaignsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCampaignsRequest) SetPageSize(v int64) *ListCampaignsRequest {
	s.PageSize = &v
	return s
}

func (s *ListCampaignsRequest) SetPlanedStartTimeFrom(v string) *ListCampaignsRequest {
	s.PlanedStartTimeFrom = &v
	return s
}

func (s *ListCampaignsRequest) SetPlanedStartTimeTo(v string) *ListCampaignsRequest {
	s.PlanedStartTimeTo = &v
	return s
}

func (s *ListCampaignsRequest) SetQueueId(v string) *ListCampaignsRequest {
	s.QueueId = &v
	return s
}

func (s *ListCampaignsRequest) SetState(v string) *ListCampaignsRequest {
	s.State = &v
	return s
}

type ListCampaignsResponseBody struct {
	// example:
	//
	// OK
	Code *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListCampaignsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int64  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 6CCEF32F-8614-535F-A1D9-D85B8C0DC4F0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListCampaignsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCampaignsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCampaignsResponseBody) SetCode(v string) *ListCampaignsResponseBody {
	s.Code = &v
	return s
}

func (s *ListCampaignsResponseBody) SetData(v *ListCampaignsResponseBodyData) *ListCampaignsResponseBody {
	s.Data = v
	return s
}

func (s *ListCampaignsResponseBody) SetHttpStatusCode(v int64) *ListCampaignsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListCampaignsResponseBody) SetMessage(v string) *ListCampaignsResponseBody {
	s.Message = &v
	return s
}

func (s *ListCampaignsResponseBody) SetRequestId(v string) *ListCampaignsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCampaignsResponseBody) SetSuccess(v bool) *ListCampaignsResponseBody {
	s.Success = &v
	return s
}

type ListCampaignsResponseBodyData struct {
	List []*ListCampaignsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCampaignsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCampaignsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCampaignsResponseBodyData) SetList(v []*ListCampaignsResponseBodyDataList) *ListCampaignsResponseBodyData {
	s.List = v
	return s
}

func (s *ListCampaignsResponseBodyData) SetPageNumber(v int64) *ListCampaignsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListCampaignsResponseBodyData) SetPageSize(v int64) *ListCampaignsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListCampaignsResponseBodyData) SetTotalCount(v int64) *ListCampaignsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListCampaignsResponseBodyDataList struct {
	// example:
	//
	// 1634008800000
	ActualEndTime *int64 `json:"ActualEndTime,omitempty" xml:"ActualEndTime,omitempty"`
	// example:
	//
	// 1634000460000
	ActualStartTime *int64 `json:"ActualStartTime,omitempty" xml:"ActualStartTime,omitempty"`
	// example:
	//
	// 6badb397-a8b5-40b6-21019d382a09
	CampaignId *string `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	// example:
	//
	// 0
	CasesAborted *int64 `json:"CasesAborted,omitempty" xml:"CasesAborted,omitempty"`
	// example:
	//
	// 40
	CasesConnected *int64 `json:"CasesConnected,omitempty" xml:"CasesConnected,omitempty"`
	// example:
	//
	// 0
	CasesUncompleted *int64   `json:"CasesUncompleted,omitempty" xml:"CasesUncompleted,omitempty"`
	CompletionRate   *float32 `json:"CompletionRate,omitempty" xml:"CompletionRate,omitempty"`
	ContactFlowId    *string  `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// example:
	//
	// 1
	MaxAttemptCount *int64 `json:"MaxAttemptCount,omitempty" xml:"MaxAttemptCount,omitempty"`
	// example:
	//
	// 1
	MinAttemptInterval *int64 `json:"MinAttemptInterval,omitempty" xml:"MinAttemptInterval,omitempty"`
	// example:
	//
	// test-campaign
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1634054400000
	PlanedEndTime *int64 `json:"PlanedEndTime,omitempty" xml:"PlanedEndTime,omitempty"`
	// example:
	//
	// 1633968000000
	PlanedStartTime *int64 `json:"PlanedStartTime,omitempty" xml:"PlanedStartTime,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	QueueId   *string `json:"QueueId,omitempty" xml:"QueueId,omitempty"`
	QueueName *string `json:"QueueName,omitempty" xml:"QueueName,omitempty"`
	// example:
	//
	// false
	Simulation *bool `json:"Simulation,omitempty" xml:"Simulation,omitempty"`
	// example:
	//
	// Completed
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// {"ratio":1}
	StrategyParameters *string `json:"StrategyParameters,omitempty" xml:"StrategyParameters,omitempty"`
	// example:
	//
	// PACING
	StrategyType *string `json:"StrategyType,omitempty" xml:"StrategyType,omitempty"`
	// example:
	//
	// 100
	TotalCases *int64 `json:"TotalCases,omitempty" xml:"TotalCases,omitempty"`
}

func (s ListCampaignsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListCampaignsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListCampaignsResponseBodyDataList) SetActualEndTime(v int64) *ListCampaignsResponseBodyDataList {
	s.ActualEndTime = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetActualStartTime(v int64) *ListCampaignsResponseBodyDataList {
	s.ActualStartTime = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetCampaignId(v string) *ListCampaignsResponseBodyDataList {
	s.CampaignId = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetCasesAborted(v int64) *ListCampaignsResponseBodyDataList {
	s.CasesAborted = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetCasesConnected(v int64) *ListCampaignsResponseBodyDataList {
	s.CasesConnected = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetCasesUncompleted(v int64) *ListCampaignsResponseBodyDataList {
	s.CasesUncompleted = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetCompletionRate(v float32) *ListCampaignsResponseBodyDataList {
	s.CompletionRate = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetContactFlowId(v string) *ListCampaignsResponseBodyDataList {
	s.ContactFlowId = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetMaxAttemptCount(v int64) *ListCampaignsResponseBodyDataList {
	s.MaxAttemptCount = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetMinAttemptInterval(v int64) *ListCampaignsResponseBodyDataList {
	s.MinAttemptInterval = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetName(v string) *ListCampaignsResponseBodyDataList {
	s.Name = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetPlanedEndTime(v int64) *ListCampaignsResponseBodyDataList {
	s.PlanedEndTime = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetPlanedStartTime(v int64) *ListCampaignsResponseBodyDataList {
	s.PlanedStartTime = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetQueueId(v string) *ListCampaignsResponseBodyDataList {
	s.QueueId = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetQueueName(v string) *ListCampaignsResponseBodyDataList {
	s.QueueName = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetSimulation(v bool) *ListCampaignsResponseBodyDataList {
	s.Simulation = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetState(v string) *ListCampaignsResponseBodyDataList {
	s.State = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetStrategyParameters(v string) *ListCampaignsResponseBodyDataList {
	s.StrategyParameters = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetStrategyType(v string) *ListCampaignsResponseBodyDataList {
	s.StrategyType = &v
	return s
}

func (s *ListCampaignsResponseBodyDataList) SetTotalCases(v int64) *ListCampaignsResponseBodyDataList {
	s.TotalCases = &v
	return s
}

type ListCampaignsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCampaignsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCampaignsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCampaignsResponse) GoString() string {
	return s.String()
}

func (s *ListCampaignsResponse) SetHeaders(v map[string]*string) *ListCampaignsResponse {
	s.Headers = v
	return s
}

func (s *ListCampaignsResponse) SetStatusCode(v int32) *ListCampaignsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCampaignsResponse) SetBody(v *ListCampaignsResponseBody) *ListCampaignsResponse {
	s.Body = v
	return s
}

type ListCasesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 6badb397-a8b5-40b6-21019d382a09
	CampaignId *string `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 100
	PageSize    *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	State       *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListCasesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCasesRequest) GoString() string {
	return s.String()
}

func (s *ListCasesRequest) SetCampaignId(v string) *ListCasesRequest {
	s.CampaignId = &v
	return s
}

func (s *ListCasesRequest) SetInstanceId(v string) *ListCasesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListCasesRequest) SetPageNumber(v int64) *ListCasesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCasesRequest) SetPageSize(v int64) *ListCasesRequest {
	s.PageSize = &v
	return s
}

func (s *ListCasesRequest) SetPhoneNumber(v string) *ListCasesRequest {
	s.PhoneNumber = &v
	return s
}

func (s *ListCasesRequest) SetState(v string) *ListCasesRequest {
	s.State = &v
	return s
}

type ListCasesResponseBody struct {
	// example:
	//
	// OK
	Code *string                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListCasesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int64  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 7CC6523B-0E51-1B62-8DA5-6A9831CAE316
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListCasesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCasesResponseBody) GoString() string {
	return s.String()
}

func (s *ListCasesResponseBody) SetCode(v string) *ListCasesResponseBody {
	s.Code = &v
	return s
}

func (s *ListCasesResponseBody) SetData(v *ListCasesResponseBodyData) *ListCasesResponseBody {
	s.Data = v
	return s
}

func (s *ListCasesResponseBody) SetHttpStatusCode(v int64) *ListCasesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListCasesResponseBody) SetMessage(v string) *ListCasesResponseBody {
	s.Message = &v
	return s
}

func (s *ListCasesResponseBody) SetRequestId(v string) *ListCasesResponseBody {
	s.RequestId = &v
	return s
}

type ListCasesResponseBodyData struct {
	List []*ListCasesResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 100
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCasesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCasesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCasesResponseBodyData) SetList(v []*ListCasesResponseBodyDataList) *ListCasesResponseBodyData {
	s.List = v
	return s
}

func (s *ListCasesResponseBodyData) SetPageNumber(v int64) *ListCasesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListCasesResponseBodyData) SetPageSize(v int64) *ListCasesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListCasesResponseBodyData) SetTotalCount(v int64) *ListCasesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListCasesResponseBodyDataList struct {
	AbandonPhase *string `json:"AbandonPhase,omitempty" xml:"AbandonPhase,omitempty"`
	// example:
	//
	// NA
	AbandonType *string `json:"AbandonType,omitempty" xml:"AbandonType,omitempty"`
	// example:
	//
	// 1
	AttemptCount *int64 `json:"AttemptCount,omitempty" xml:"AttemptCount,omitempty"`
	// example:
	//
	// 60ecb1a2-4480-4d01-bede-c5b7655bfadf
	CaseId          *string `json:"CaseId,omitempty" xml:"CaseId,omitempty"`
	CustomVariables *string `json:"CustomVariables,omitempty" xml:"CustomVariables,omitempty"`
	FailureReason   *string `json:"FailureReason,omitempty" xml:"FailureReason,omitempty"`
	// example:
	//
	// 1888888****
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	// example:
	//
	// Connected
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListCasesResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListCasesResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListCasesResponseBodyDataList) SetAbandonPhase(v string) *ListCasesResponseBodyDataList {
	s.AbandonPhase = &v
	return s
}

func (s *ListCasesResponseBodyDataList) SetAbandonType(v string) *ListCasesResponseBodyDataList {
	s.AbandonType = &v
	return s
}

func (s *ListCasesResponseBodyDataList) SetAttemptCount(v int64) *ListCasesResponseBodyDataList {
	s.AttemptCount = &v
	return s
}

func (s *ListCasesResponseBodyDataList) SetCaseId(v string) *ListCasesResponseBodyDataList {
	s.CaseId = &v
	return s
}

func (s *ListCasesResponseBodyDataList) SetCustomVariables(v string) *ListCasesResponseBodyDataList {
	s.CustomVariables = &v
	return s
}

func (s *ListCasesResponseBodyDataList) SetFailureReason(v string) *ListCasesResponseBodyDataList {
	s.FailureReason = &v
	return s
}

func (s *ListCasesResponseBodyDataList) SetPhoneNumber(v string) *ListCasesResponseBodyDataList {
	s.PhoneNumber = &v
	return s
}

func (s *ListCasesResponseBodyDataList) SetState(v string) *ListCasesResponseBodyDataList {
	s.State = &v
	return s
}

type ListCasesResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCasesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCasesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCasesResponse) GoString() string {
	return s.String()
}

func (s *ListCasesResponse) SetHeaders(v map[string]*string) *ListCasesResponse {
	s.Headers = v
	return s
}

func (s *ListCasesResponse) SetStatusCode(v int32) *ListCasesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCasesResponse) SetBody(v *ListCasesResponseBody) *ListCasesResponse {
	s.Body = v
	return s
}

type ListCategoriesRequest struct {
	// example:
	//
	// 43c2671b-***-***-86d0-6bd187905cc8
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// Ticket
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListCategoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCategoriesRequest) GoString() string {
	return s.String()
}

func (s *ListCategoriesRequest) SetCategoryId(v string) *ListCategoriesRequest {
	s.CategoryId = &v
	return s
}

func (s *ListCategoriesRequest) SetInstanceId(v string) *ListCategoriesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListCategoriesRequest) SetType(v string) *ListCategoriesRequest {
	s.Type = &v
	return s
}

type ListCategoriesResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// DE803553-8AA9-4B9D-9E4E-A82BC69EDCEE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListCategoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCategoriesResponseBody) GoString() string {
	return s.String()
}

func (s *ListCategoriesResponseBody) SetCode(v string) *ListCategoriesResponseBody {
	s.Code = &v
	return s
}

func (s *ListCategoriesResponseBody) SetData(v string) *ListCategoriesResponseBody {
	s.Data = &v
	return s
}

func (s *ListCategoriesResponseBody) SetHttpStatusCode(v int32) *ListCategoriesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListCategoriesResponseBody) SetMessage(v string) *ListCategoriesResponseBody {
	s.Message = &v
	return s
}

func (s *ListCategoriesResponseBody) SetParams(v []*string) *ListCategoriesResponseBody {
	s.Params = v
	return s
}

func (s *ListCategoriesResponseBody) SetRequestId(v string) *ListCategoriesResponseBody {
	s.RequestId = &v
	return s
}

type ListCategoriesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCategoriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCategoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCategoriesResponse) GoString() string {
	return s.String()
}

func (s *ListCategoriesResponse) SetHeaders(v map[string]*string) *ListCategoriesResponse {
	s.Headers = v
	return s
}

func (s *ListCategoriesResponse) SetStatusCode(v int32) *ListCategoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCategoriesResponse) SetBody(v *ListCategoriesResponseBody) *ListCategoriesResponse {
	s.Body = v
	return s
}

type ListCommonTicketFieldsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ListCommonTicketFieldsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCommonTicketFieldsRequest) GoString() string {
	return s.String()
}

func (s *ListCommonTicketFieldsRequest) SetInstanceId(v string) *ListCommonTicketFieldsRequest {
	s.InstanceId = &v
	return s
}

type ListCommonTicketFieldsResponseBody struct {
	// example:
	//
	// OK
	Code *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListCommonTicketFieldsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 30C7D235-DDCF-4C7F-A462-5E2598252C2B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListCommonTicketFieldsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCommonTicketFieldsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCommonTicketFieldsResponseBody) SetCode(v string) *ListCommonTicketFieldsResponseBody {
	s.Code = &v
	return s
}

func (s *ListCommonTicketFieldsResponseBody) SetData(v *ListCommonTicketFieldsResponseBodyData) *ListCommonTicketFieldsResponseBody {
	s.Data = v
	return s
}

func (s *ListCommonTicketFieldsResponseBody) SetHttpStatusCode(v int32) *ListCommonTicketFieldsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListCommonTicketFieldsResponseBody) SetMessage(v string) *ListCommonTicketFieldsResponseBody {
	s.Message = &v
	return s
}

func (s *ListCommonTicketFieldsResponseBody) SetParams(v []*string) *ListCommonTicketFieldsResponseBody {
	s.Params = v
	return s
}

func (s *ListCommonTicketFieldsResponseBody) SetRequestId(v string) *ListCommonTicketFieldsResponseBody {
	s.RequestId = &v
	return s
}

type ListCommonTicketFieldsResponseBodyData struct {
	// example:
	//
	// 1703517780627
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// Schema ID。
	//
	// example:
	//
	// ticketing
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string                         `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Properties map[string]*DataPropertiesValue `json:"Properties,omitempty" xml:"Properties,omitempty"`
	// example:
	//
	// 1716211430928
	UpdatedTime *string `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
}

func (s ListCommonTicketFieldsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCommonTicketFieldsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCommonTicketFieldsResponseBodyData) SetCreatedTime(v string) *ListCommonTicketFieldsResponseBodyData {
	s.CreatedTime = &v
	return s
}

func (s *ListCommonTicketFieldsResponseBodyData) SetId(v string) *ListCommonTicketFieldsResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListCommonTicketFieldsResponseBodyData) SetInstanceId(v string) *ListCommonTicketFieldsResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *ListCommonTicketFieldsResponseBodyData) SetProperties(v map[string]*DataPropertiesValue) *ListCommonTicketFieldsResponseBodyData {
	s.Properties = v
	return s
}

func (s *ListCommonTicketFieldsResponseBodyData) SetUpdatedTime(v string) *ListCommonTicketFieldsResponseBodyData {
	s.UpdatedTime = &v
	return s
}

type ListCommonTicketFieldsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCommonTicketFieldsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCommonTicketFieldsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCommonTicketFieldsResponse) GoString() string {
	return s.String()
}

func (s *ListCommonTicketFieldsResponse) SetHeaders(v map[string]*string) *ListCommonTicketFieldsResponse {
	s.Headers = v
	return s
}

func (s *ListCommonTicketFieldsResponse) SetStatusCode(v int32) *ListCommonTicketFieldsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCommonTicketFieldsResponse) SetBody(v *ListCommonTicketFieldsResponseBody) *ListCommonTicketFieldsResponse {
	s.Body = v
	return s
}

type ListConfigItemsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	ObjectId *string `json:"ObjectId,omitempty" xml:"ObjectId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// INSTANCE
	ObjectType *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
}

func (s ListConfigItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListConfigItemsRequest) GoString() string {
	return s.String()
}

func (s *ListConfigItemsRequest) SetInstanceId(v string) *ListConfigItemsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListConfigItemsRequest) SetObjectId(v string) *ListConfigItemsRequest {
	s.ObjectId = &v
	return s
}

func (s *ListConfigItemsRequest) SetObjectType(v string) *ListConfigItemsRequest {
	s.ObjectType = &v
	return s
}

type ListConfigItemsResponseBody struct {
	// example:
	//
	// OK
	Code *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListConfigItemsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListConfigItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListConfigItemsResponseBody) GoString() string {
	return s.String()
}

func (s *ListConfigItemsResponseBody) SetCode(v string) *ListConfigItemsResponseBody {
	s.Code = &v
	return s
}

func (s *ListConfigItemsResponseBody) SetData(v []*ListConfigItemsResponseBodyData) *ListConfigItemsResponseBody {
	s.Data = v
	return s
}

func (s *ListConfigItemsResponseBody) SetHttpStatusCode(v int32) *ListConfigItemsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListConfigItemsResponseBody) SetMessage(v string) *ListConfigItemsResponseBody {
	s.Message = &v
	return s
}

func (s *ListConfigItemsResponseBody) SetParams(v []*string) *ListConfigItemsResponseBody {
	s.Params = v
	return s
}

func (s *ListConfigItemsResponseBody) SetRequestId(v string) *ListConfigItemsResponseBody {
	s.RequestId = &v
	return s
}

type ListConfigItemsResponseBodyData struct {
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// config-item
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// ccc-test
	ObjectId *string `json:"ObjectId,omitempty" xml:"ObjectId,omitempty"`
	// example:
	//
	// INSTANCE
	ObjectType *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
	// example:
	//
	// 100
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListConfigItemsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListConfigItemsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListConfigItemsResponseBodyData) SetInstanceId(v string) *ListConfigItemsResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *ListConfigItemsResponseBodyData) SetName(v string) *ListConfigItemsResponseBodyData {
	s.Name = &v
	return s
}

func (s *ListConfigItemsResponseBodyData) SetObjectId(v string) *ListConfigItemsResponseBodyData {
	s.ObjectId = &v
	return s
}

func (s *ListConfigItemsResponseBodyData) SetObjectType(v string) *ListConfigItemsResponseBodyData {
	s.ObjectType = &v
	return s
}

func (s *ListConfigItemsResponseBodyData) SetValue(v string) *ListConfigItemsResponseBodyData {
	s.Value = &v
	return s
}

type ListConfigItemsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListConfigItemsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListConfigItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListConfigItemsResponse) GoString() string {
	return s.String()
}

func (s *ListConfigItemsResponse) SetHeaders(v map[string]*string) *ListConfigItemsResponse {
	s.Headers = v
	return s
}

func (s *ListConfigItemsResponse) SetStatusCode(v int32) *ListConfigItemsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListConfigItemsResponse) SetBody(v *ListConfigItemsResponseBody) *ListConfigItemsResponse {
	s.Body = v
	return s
}

type ListContactFlowsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OrderByField *string `json:"OrderByField,omitempty" xml:"OrderByField,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize  *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SortOrder *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	// example:
	//
	// MAIN_FLOW
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListContactFlowsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListContactFlowsRequest) GoString() string {
	return s.String()
}

func (s *ListContactFlowsRequest) SetInstanceId(v string) *ListContactFlowsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListContactFlowsRequest) SetOrderByField(v string) *ListContactFlowsRequest {
	s.OrderByField = &v
	return s
}

func (s *ListContactFlowsRequest) SetPageNumber(v int32) *ListContactFlowsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListContactFlowsRequest) SetPageSize(v int32) *ListContactFlowsRequest {
	s.PageSize = &v
	return s
}

func (s *ListContactFlowsRequest) SetSortOrder(v string) *ListContactFlowsRequest {
	s.SortOrder = &v
	return s
}

func (s *ListContactFlowsRequest) SetType(v string) *ListContactFlowsRequest {
	s.Type = &v
	return s
}

type ListContactFlowsResponseBody struct {
	// example:
	//
	// OK
	Code *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListContactFlowsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListContactFlowsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListContactFlowsResponseBody) GoString() string {
	return s.String()
}

func (s *ListContactFlowsResponseBody) SetCode(v string) *ListContactFlowsResponseBody {
	s.Code = &v
	return s
}

func (s *ListContactFlowsResponseBody) SetData(v *ListContactFlowsResponseBodyData) *ListContactFlowsResponseBody {
	s.Data = v
	return s
}

func (s *ListContactFlowsResponseBody) SetHttpStatusCode(v int32) *ListContactFlowsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListContactFlowsResponseBody) SetMessage(v string) *ListContactFlowsResponseBody {
	s.Message = &v
	return s
}

func (s *ListContactFlowsResponseBody) SetRequestId(v string) *ListContactFlowsResponseBody {
	s.RequestId = &v
	return s
}

type ListContactFlowsResponseBodyData struct {
	List []*ListContactFlowsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListContactFlowsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListContactFlowsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListContactFlowsResponseBodyData) SetList(v []*ListContactFlowsResponseBodyDataList) *ListContactFlowsResponseBodyData {
	s.List = v
	return s
}

func (s *ListContactFlowsResponseBodyData) SetPageNumber(v int32) *ListContactFlowsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListContactFlowsResponseBodyData) SetPageSize(v int32) *ListContactFlowsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListContactFlowsResponseBodyData) SetTotalCount(v int32) *ListContactFlowsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListContactFlowsResponseBodyDataList struct {
	// example:
	//
	// 78128960-bb00-4ddc-8e82-923a8c5bd22d
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// example:
	//
	// 2021-03-05 17:35:45.0
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Definition  *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	// example:
	//
	// 1.0
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// db07c0bb-6b1f-47d2-b37e-2451c617562d
	DraftId *string `json:"DraftId,omitempty" xml:"DraftId,omitempty"`
	// example:
	//
	// ccc-test
	Editor *string `json:"Editor,omitempty" xml:"Editor,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name       *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	NumberList []*string `json:"NumberList,omitempty" xml:"NumberList,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Published *bool `json:"Published,omitempty" xml:"Published,omitempty"`
	// example:
	//
	// MAIN_FLOW
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// 2021-03-08 15:34:49.0
	UpdatedTime *string `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
}

func (s ListContactFlowsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListContactFlowsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListContactFlowsResponseBodyDataList) SetContactFlowId(v string) *ListContactFlowsResponseBodyDataList {
	s.ContactFlowId = &v
	return s
}

func (s *ListContactFlowsResponseBodyDataList) SetCreatedTime(v string) *ListContactFlowsResponseBodyDataList {
	s.CreatedTime = &v
	return s
}

func (s *ListContactFlowsResponseBodyDataList) SetDefinition(v string) *ListContactFlowsResponseBodyDataList {
	s.Definition = &v
	return s
}

func (s *ListContactFlowsResponseBodyDataList) SetDescription(v string) *ListContactFlowsResponseBodyDataList {
	s.Description = &v
	return s
}

func (s *ListContactFlowsResponseBodyDataList) SetDraftId(v string) *ListContactFlowsResponseBodyDataList {
	s.DraftId = &v
	return s
}

func (s *ListContactFlowsResponseBodyDataList) SetEditor(v string) *ListContactFlowsResponseBodyDataList {
	s.Editor = &v
	return s
}

func (s *ListContactFlowsResponseBodyDataList) SetInstanceId(v string) *ListContactFlowsResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListContactFlowsResponseBodyDataList) SetName(v string) *ListContactFlowsResponseBodyDataList {
	s.Name = &v
	return s
}

func (s *ListContactFlowsResponseBodyDataList) SetNumberList(v []*string) *ListContactFlowsResponseBodyDataList {
	s.NumberList = v
	return s
}

func (s *ListContactFlowsResponseBodyDataList) SetPublished(v bool) *ListContactFlowsResponseBodyDataList {
	s.Published = &v
	return s
}

func (s *ListContactFlowsResponseBodyDataList) SetType(v string) *ListContactFlowsResponseBodyDataList {
	s.Type = &v
	return s
}

func (s *ListContactFlowsResponseBodyDataList) SetUpdatedTime(v string) *ListContactFlowsResponseBodyDataList {
	s.UpdatedTime = &v
	return s
}

type ListContactFlowsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListContactFlowsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListContactFlowsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListContactFlowsResponse) GoString() string {
	return s.String()
}

func (s *ListContactFlowsResponse) SetHeaders(v map[string]*string) *ListContactFlowsResponse {
	s.Headers = v
	return s
}

func (s *ListContactFlowsResponse) SetStatusCode(v int32) *ListContactFlowsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListContactFlowsResponse) SetBody(v *ListContactFlowsResponseBody) *ListContactFlowsResponse {
	s.Body = v
	return s
}

type ListCustomCallTaggingRequest struct {
	// example:
	//
	// ["TagA"]
	CallTagNameList *string `json:"CallTagNameList,omitempty" xml:"CallTagNameList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1312121****
	SearchPattern *string `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
}

func (s ListCustomCallTaggingRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCustomCallTaggingRequest) GoString() string {
	return s.String()
}

func (s *ListCustomCallTaggingRequest) SetCallTagNameList(v string) *ListCustomCallTaggingRequest {
	s.CallTagNameList = &v
	return s
}

func (s *ListCustomCallTaggingRequest) SetInstanceId(v string) *ListCustomCallTaggingRequest {
	s.InstanceId = &v
	return s
}

func (s *ListCustomCallTaggingRequest) SetPageNumber(v int32) *ListCustomCallTaggingRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCustomCallTaggingRequest) SetPageSize(v int32) *ListCustomCallTaggingRequest {
	s.PageSize = &v
	return s
}

func (s *ListCustomCallTaggingRequest) SetSearchPattern(v string) *ListCustomCallTaggingRequest {
	s.SearchPattern = &v
	return s
}

type ListCustomCallTaggingResponseBody struct {
	// example:
	//
	// OK
	Code *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListCustomCallTaggingResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListCustomCallTaggingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCustomCallTaggingResponseBody) GoString() string {
	return s.String()
}

func (s *ListCustomCallTaggingResponseBody) SetCode(v string) *ListCustomCallTaggingResponseBody {
	s.Code = &v
	return s
}

func (s *ListCustomCallTaggingResponseBody) SetData(v *ListCustomCallTaggingResponseBodyData) *ListCustomCallTaggingResponseBody {
	s.Data = v
	return s
}

func (s *ListCustomCallTaggingResponseBody) SetHttpStatusCode(v int32) *ListCustomCallTaggingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListCustomCallTaggingResponseBody) SetMessage(v string) *ListCustomCallTaggingResponseBody {
	s.Message = &v
	return s
}

func (s *ListCustomCallTaggingResponseBody) SetRequestId(v string) *ListCustomCallTaggingResponseBody {
	s.RequestId = &v
	return s
}

type ListCustomCallTaggingResponseBodyData struct {
	List []*ListCustomCallTaggingResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCustomCallTaggingResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCustomCallTaggingResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCustomCallTaggingResponseBodyData) SetList(v []*ListCustomCallTaggingResponseBodyDataList) *ListCustomCallTaggingResponseBodyData {
	s.List = v
	return s
}

func (s *ListCustomCallTaggingResponseBodyData) SetPageNumber(v int32) *ListCustomCallTaggingResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListCustomCallTaggingResponseBodyData) SetPageSize(v int32) *ListCustomCallTaggingResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListCustomCallTaggingResponseBodyData) SetTotalCount(v int32) *ListCustomCallTaggingResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListCustomCallTaggingResponseBodyDataList struct {
	CallTagList []*ListCustomCallTaggingResponseBodyDataListCallTagList `json:"CallTagList,omitempty" xml:"CallTagList,omitempty" type:"Repeated"`
	// example:
	//
	// agent
	Creator     *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 1312121****
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
	// example:
	//
	// 2020-07-05 00:00:00.0
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s ListCustomCallTaggingResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListCustomCallTaggingResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListCustomCallTaggingResponseBodyDataList) SetCallTagList(v []*ListCustomCallTaggingResponseBodyDataListCallTagList) *ListCustomCallTaggingResponseBodyDataList {
	s.CallTagList = v
	return s
}

func (s *ListCustomCallTaggingResponseBodyDataList) SetCreator(v string) *ListCustomCallTaggingResponseBodyDataList {
	s.Creator = &v
	return s
}

func (s *ListCustomCallTaggingResponseBodyDataList) SetDescription(v string) *ListCustomCallTaggingResponseBodyDataList {
	s.Description = &v
	return s
}

func (s *ListCustomCallTaggingResponseBodyDataList) SetInstanceId(v string) *ListCustomCallTaggingResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListCustomCallTaggingResponseBodyDataList) SetNumber(v string) *ListCustomCallTaggingResponseBodyDataList {
	s.Number = &v
	return s
}

func (s *ListCustomCallTaggingResponseBodyDataList) SetUpdateTime(v string) *ListCustomCallTaggingResponseBodyDataList {
	s.UpdateTime = &v
	return s
}

type ListCustomCallTaggingResponseBodyDataListCallTagList struct {
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// TagA
	TagName *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
}

func (s ListCustomCallTaggingResponseBodyDataListCallTagList) String() string {
	return tea.Prettify(s)
}

func (s ListCustomCallTaggingResponseBodyDataListCallTagList) GoString() string {
	return s.String()
}

func (s *ListCustomCallTaggingResponseBodyDataListCallTagList) SetInstanceId(v string) *ListCustomCallTaggingResponseBodyDataListCallTagList {
	s.InstanceId = &v
	return s
}

func (s *ListCustomCallTaggingResponseBodyDataListCallTagList) SetTagName(v string) *ListCustomCallTaggingResponseBodyDataListCallTagList {
	s.TagName = &v
	return s
}

type ListCustomCallTaggingResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCustomCallTaggingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCustomCallTaggingResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCustomCallTaggingResponse) GoString() string {
	return s.String()
}

func (s *ListCustomCallTaggingResponse) SetHeaders(v map[string]*string) *ListCustomCallTaggingResponse {
	s.Headers = v
	return s
}

func (s *ListCustomCallTaggingResponse) SetStatusCode(v int32) *ListCustomCallTaggingResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCustomCallTaggingResponse) SetBody(v *ListCustomCallTaggingResponseBody) *ListCustomCallTaggingResponse {
	s.Body = v
	return s
}

type ListDevicesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDevicesRequest) GoString() string {
	return s.String()
}

func (s *ListDevicesRequest) SetInstanceId(v string) *ListDevicesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListDevicesRequest) SetUserId(v string) *ListDevicesRequest {
	s.UserId = &v
	return s
}

type ListDevicesResponseBody struct {
	// example:
	//
	// OK
	Code *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListDevicesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDevicesResponseBody) SetCode(v string) *ListDevicesResponseBody {
	s.Code = &v
	return s
}

func (s *ListDevicesResponseBody) SetData(v []*ListDevicesResponseBodyData) *ListDevicesResponseBody {
	s.Data = v
	return s
}

func (s *ListDevicesResponseBody) SetHttpStatusCode(v int32) *ListDevicesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDevicesResponseBody) SetMessage(v string) *ListDevicesResponseBody {
	s.Message = &v
	return s
}

func (s *ListDevicesResponseBody) SetParams(v []*string) *ListDevicesResponseBody {
	s.Params = v
	return s
}

func (s *ListDevicesResponseBody) SetRequestId(v string) *ListDevicesResponseBody {
	s.RequestId = &v
	return s
}

type ListDevicesResponseBodyData struct {
	// example:
	//
	// d7b818c3-8d3a-732f-bc9e-1782wa16****
	CallId *string `json:"CallId,omitempty" xml:"CallId,omitempty"`
	// example:
	//
	// sip:8032****@33.89.XX.XX:64189;transport=tcp;registering_acc=18_134_23_4
	Contact *string `json:"Contact,omitempty" xml:"Contact,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId   *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceType *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	// example:
	//
	// 1609118499750
	Expires *int64 `json:"Expires,omitempty" xml:"Expires,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListDevicesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDevicesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDevicesResponseBodyData) SetCallId(v string) *ListDevicesResponseBodyData {
	s.CallId = &v
	return s
}

func (s *ListDevicesResponseBodyData) SetContact(v string) *ListDevicesResponseBodyData {
	s.Contact = &v
	return s
}

func (s *ListDevicesResponseBodyData) SetDeviceId(v string) *ListDevicesResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *ListDevicesResponseBodyData) SetDeviceType(v string) *ListDevicesResponseBodyData {
	s.DeviceType = &v
	return s
}

func (s *ListDevicesResponseBodyData) SetExpires(v int64) *ListDevicesResponseBodyData {
	s.Expires = &v
	return s
}

func (s *ListDevicesResponseBodyData) SetExtension(v string) *ListDevicesResponseBodyData {
	s.Extension = &v
	return s
}

func (s *ListDevicesResponseBodyData) SetInstanceId(v string) *ListDevicesResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *ListDevicesResponseBodyData) SetUserId(v string) *ListDevicesResponseBodyData {
	s.UserId = &v
	return s
}

type ListDevicesResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDevicesResponse) GoString() string {
	return s.String()
}

func (s *ListDevicesResponse) SetHeaders(v map[string]*string) *ListDevicesResponse {
	s.Headers = v
	return s
}

func (s *ListDevicesResponse) SetStatusCode(v int32) *ListDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDevicesResponse) SetBody(v *ListDevicesResponseBody) *ListDevicesResponse {
	s.Body = v
	return s
}

type ListDoNotCallNumbersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// INSTANCE
	Scope *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	// example:
	//
	// RemarkA
	SearchPattern *string `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
}

func (s ListDoNotCallNumbersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDoNotCallNumbersRequest) GoString() string {
	return s.String()
}

func (s *ListDoNotCallNumbersRequest) SetInstanceId(v string) *ListDoNotCallNumbersRequest {
	s.InstanceId = &v
	return s
}

func (s *ListDoNotCallNumbersRequest) SetPageNumber(v int32) *ListDoNotCallNumbersRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDoNotCallNumbersRequest) SetPageSize(v int32) *ListDoNotCallNumbersRequest {
	s.PageSize = &v
	return s
}

func (s *ListDoNotCallNumbersRequest) SetScope(v string) *ListDoNotCallNumbersRequest {
	s.Scope = &v
	return s
}

func (s *ListDoNotCallNumbersRequest) SetSearchPattern(v string) *ListDoNotCallNumbersRequest {
	s.SearchPattern = &v
	return s
}

type ListDoNotCallNumbersResponseBody struct {
	// example:
	//
	// OK
	Code *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListDoNotCallNumbersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDoNotCallNumbersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDoNotCallNumbersResponseBody) GoString() string {
	return s.String()
}

func (s *ListDoNotCallNumbersResponseBody) SetCode(v string) *ListDoNotCallNumbersResponseBody {
	s.Code = &v
	return s
}

func (s *ListDoNotCallNumbersResponseBody) SetData(v *ListDoNotCallNumbersResponseBodyData) *ListDoNotCallNumbersResponseBody {
	s.Data = v
	return s
}

func (s *ListDoNotCallNumbersResponseBody) SetHttpStatusCode(v int32) *ListDoNotCallNumbersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDoNotCallNumbersResponseBody) SetMessage(v string) *ListDoNotCallNumbersResponseBody {
	s.Message = &v
	return s
}

func (s *ListDoNotCallNumbersResponseBody) SetParams(v []*string) *ListDoNotCallNumbersResponseBody {
	s.Params = v
	return s
}

func (s *ListDoNotCallNumbersResponseBody) SetRequestId(v string) *ListDoNotCallNumbersResponseBody {
	s.RequestId = &v
	return s
}

type ListDoNotCallNumbersResponseBodyData struct {
	List []*ListDoNotCallNumbersResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDoNotCallNumbersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDoNotCallNumbersResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDoNotCallNumbersResponseBodyData) SetList(v []*ListDoNotCallNumbersResponseBodyDataList) *ListDoNotCallNumbersResponseBodyData {
	s.List = v
	return s
}

func (s *ListDoNotCallNumbersResponseBodyData) SetPageNumber(v int32) *ListDoNotCallNumbersResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListDoNotCallNumbersResponseBodyData) SetPageSize(v int32) *ListDoNotCallNumbersResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListDoNotCallNumbersResponseBodyData) SetTotalCount(v int32) *ListDoNotCallNumbersResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListDoNotCallNumbersResponseBodyDataList struct {
	// example:
	//
	// 1626962425000
	CreateTime  *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	CreatedTime *int64 `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// example:
	//
	// agent
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// example:
	//
	// 1900000****
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// example:
	//
	// INSTANCE
	Scope *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
}

func (s ListDoNotCallNumbersResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListDoNotCallNumbersResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListDoNotCallNumbersResponseBodyDataList) SetCreateTime(v int64) *ListDoNotCallNumbersResponseBodyDataList {
	s.CreateTime = &v
	return s
}

func (s *ListDoNotCallNumbersResponseBodyDataList) SetCreatedTime(v int64) *ListDoNotCallNumbersResponseBodyDataList {
	s.CreatedTime = &v
	return s
}

func (s *ListDoNotCallNumbersResponseBodyDataList) SetCreator(v string) *ListDoNotCallNumbersResponseBodyDataList {
	s.Creator = &v
	return s
}

func (s *ListDoNotCallNumbersResponseBodyDataList) SetNumber(v string) *ListDoNotCallNumbersResponseBodyDataList {
	s.Number = &v
	return s
}

func (s *ListDoNotCallNumbersResponseBodyDataList) SetRemark(v string) *ListDoNotCallNumbersResponseBodyDataList {
	s.Remark = &v
	return s
}

func (s *ListDoNotCallNumbersResponseBodyDataList) SetScope(v string) *ListDoNotCallNumbersResponseBodyDataList {
	s.Scope = &v
	return s
}

type ListDoNotCallNumbersResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDoNotCallNumbersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDoNotCallNumbersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDoNotCallNumbersResponse) GoString() string {
	return s.String()
}

func (s *ListDoNotCallNumbersResponse) SetHeaders(v map[string]*string) *ListDoNotCallNumbersResponse {
	s.Headers = v
	return s
}

func (s *ListDoNotCallNumbersResponse) SetStatusCode(v int32) *ListDoNotCallNumbersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDoNotCallNumbersResponse) SetBody(v *ListDoNotCallNumbersResponseBody) *ListDoNotCallNumbersResponse {
	s.Body = v
	return s
}

type ListDocumentsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// d278629c-c687-4aa3-b044-4fe9b012e7ef
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// eyJ0YWJsZUlkIjoiY2Y2MTQxYjA5NDY0NDUxMzk5YjFjMTA5YTMxZWNkMzEiLCJ0b2tlbiI6IjAwMDAwMDAwMDAwNzAzNzcifQ==
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// example:
	//
	// 2
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// EAF3C248-E123-441B-A545-B6CD02E98EED
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// schema id
	//
	// This parameter is required.
	//
	// example:
	//
	// profile
	SchemaId      *string                      `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
	SearchPattern *string                      `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
	Sorts         []*ListDocumentsRequestSorts `json:"Sorts,omitempty" xml:"Sorts,omitempty" type:"Repeated"`
}

func (s ListDocumentsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentsRequest) GoString() string {
	return s.String()
}

func (s *ListDocumentsRequest) SetInstanceId(v string) *ListDocumentsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListDocumentsRequest) SetNextPageToken(v string) *ListDocumentsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListDocumentsRequest) SetPageSize(v int32) *ListDocumentsRequest {
	s.PageSize = &v
	return s
}

func (s *ListDocumentsRequest) SetRequestId(v string) *ListDocumentsRequest {
	s.RequestId = &v
	return s
}

func (s *ListDocumentsRequest) SetSchemaId(v string) *ListDocumentsRequest {
	s.SchemaId = &v
	return s
}

func (s *ListDocumentsRequest) SetSearchPattern(v string) *ListDocumentsRequest {
	s.SearchPattern = &v
	return s
}

func (s *ListDocumentsRequest) SetSorts(v []*ListDocumentsRequestSorts) *ListDocumentsRequest {
	s.Sorts = v
	return s
}

type ListDocumentsRequestSorts struct {
	// example:
	//
	// desc
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// name
	PropertyName *string `json:"PropertyName,omitempty" xml:"PropertyName,omitempty"`
}

func (s ListDocumentsRequestSorts) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentsRequestSorts) GoString() string {
	return s.String()
}

func (s *ListDocumentsRequestSorts) SetOrder(v string) *ListDocumentsRequestSorts {
	s.Order = &v
	return s
}

func (s *ListDocumentsRequestSorts) SetPropertyName(v string) *ListDocumentsRequestSorts {
	s.PropertyName = &v
	return s
}

type ListDocumentsShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// d278629c-c687-4aa3-b044-4fe9b012e7ef
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// eyJ0YWJsZUlkIjoiY2Y2MTQxYjA5NDY0NDUxMzk5YjFjMTA5YTMxZWNkMzEiLCJ0b2tlbiI6IjAwMDAwMDAwMDAwNzAzNzcifQ==
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// example:
	//
	// 2
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// EAF3C248-E123-441B-A545-B6CD02E98EED
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// schema id
	//
	// This parameter is required.
	//
	// example:
	//
	// profile
	SchemaId      *string `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
	SearchPattern *string `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
	SortsShrink   *string `json:"Sorts,omitempty" xml:"Sorts,omitempty"`
}

func (s ListDocumentsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListDocumentsShrinkRequest) SetInstanceId(v string) *ListDocumentsShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *ListDocumentsShrinkRequest) SetNextPageToken(v string) *ListDocumentsShrinkRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListDocumentsShrinkRequest) SetPageSize(v int32) *ListDocumentsShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListDocumentsShrinkRequest) SetRequestId(v string) *ListDocumentsShrinkRequest {
	s.RequestId = &v
	return s
}

func (s *ListDocumentsShrinkRequest) SetSchemaId(v string) *ListDocumentsShrinkRequest {
	s.SchemaId = &v
	return s
}

func (s *ListDocumentsShrinkRequest) SetSearchPattern(v string) *ListDocumentsShrinkRequest {
	s.SearchPattern = &v
	return s
}

func (s *ListDocumentsShrinkRequest) SetSortsShrink(v string) *ListDocumentsShrinkRequest {
	s.SortsShrink = &v
	return s
}

type ListDocumentsResponseBody struct {
	// example:
	//
	// OK
	Code *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListDocumentsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 7BEEA660-A45A-45E3-98CC-AFC65E715C23
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDocumentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDocumentsResponseBody) SetCode(v string) *ListDocumentsResponseBody {
	s.Code = &v
	return s
}

func (s *ListDocumentsResponseBody) SetData(v *ListDocumentsResponseBodyData) *ListDocumentsResponseBody {
	s.Data = v
	return s
}

func (s *ListDocumentsResponseBody) SetHttpStatusCode(v int32) *ListDocumentsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDocumentsResponseBody) SetMessage(v string) *ListDocumentsResponseBody {
	s.Message = &v
	return s
}

func (s *ListDocumentsResponseBody) SetParams(v []*string) *ListDocumentsResponseBody {
	s.Params = v
	return s
}

func (s *ListDocumentsResponseBody) SetRequestId(v string) *ListDocumentsResponseBody {
	s.RequestId = &v
	return s
}

type ListDocumentsResponseBodyData struct {
	Documents []map[string]interface{} `json:"Documents,omitempty" xml:"Documents,omitempty" type:"Repeated"`
	// example:
	//
	// 54d1a616d95a4a01ba58967a9115b649
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// scheme
	Schema *ListDocumentsResponseBodyDataSchema `json:"Schema,omitempty" xml:"Schema,omitempty" type:"Struct"`
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListDocumentsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDocumentsResponseBodyData) SetDocuments(v []map[string]interface{}) *ListDocumentsResponseBodyData {
	s.Documents = v
	return s
}

func (s *ListDocumentsResponseBodyData) SetNextPageToken(v string) *ListDocumentsResponseBodyData {
	s.NextPageToken = &v
	return s
}

func (s *ListDocumentsResponseBodyData) SetSchema(v *ListDocumentsResponseBodyDataSchema) *ListDocumentsResponseBodyData {
	s.Schema = v
	return s
}

func (s *ListDocumentsResponseBodyData) SetTotalCount(v int64) *ListDocumentsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListDocumentsResponseBodyDataSchema struct {
	// example:
	//
	// 2020-10-14T09:53:53Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// example:
	//
	// false
	Deleted *bool `json:"Deleted,omitempty" xml:"Deleted,omitempty"`
	// example:
	//
	// -
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// schame id
	//
	// example:
	//
	// profile
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 87b12784-8ce2-40b6-b21f-c49cb3b5501e
	InstanceId *string                               `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Properties map[string]*DataSchemaPropertiesValue `json:"Properties,omitempty" xml:"Properties,omitempty"`
	// example:
	//
	// 2020-10-14T09:53:53Z
	UpdatedTime *string `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
}

func (s ListDocumentsResponseBodyDataSchema) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentsResponseBodyDataSchema) GoString() string {
	return s.String()
}

func (s *ListDocumentsResponseBodyDataSchema) SetCreatedTime(v string) *ListDocumentsResponseBodyDataSchema {
	s.CreatedTime = &v
	return s
}

func (s *ListDocumentsResponseBodyDataSchema) SetDeleted(v bool) *ListDocumentsResponseBodyDataSchema {
	s.Deleted = &v
	return s
}

func (s *ListDocumentsResponseBodyDataSchema) SetDescription(v string) *ListDocumentsResponseBodyDataSchema {
	s.Description = &v
	return s
}

func (s *ListDocumentsResponseBodyDataSchema) SetId(v string) *ListDocumentsResponseBodyDataSchema {
	s.Id = &v
	return s
}

func (s *ListDocumentsResponseBodyDataSchema) SetInstanceId(v string) *ListDocumentsResponseBodyDataSchema {
	s.InstanceId = &v
	return s
}

func (s *ListDocumentsResponseBodyDataSchema) SetProperties(v map[string]*DataSchemaPropertiesValue) *ListDocumentsResponseBodyDataSchema {
	s.Properties = v
	return s
}

func (s *ListDocumentsResponseBodyDataSchema) SetUpdatedTime(v string) *ListDocumentsResponseBodyDataSchema {
	s.UpdatedTime = &v
	return s
}

type ListDocumentsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDocumentsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDocumentsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDocumentsResponse) GoString() string {
	return s.String()
}

func (s *ListDocumentsResponse) SetHeaders(v map[string]*string) *ListDocumentsResponse {
	s.Headers = v
	return s
}

func (s *ListDocumentsResponse) SetStatusCode(v int32) *ListDocumentsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDocumentsResponse) SetBody(v *ListDocumentsResponseBody) *ListDocumentsResponse {
	s.Body = v
	return s
}

type ListHistoricalAgentReportRequest struct {
	// example:
	//
	// ["agent1@ccc-test", "agent2@ccc-test"]
	AgentIdList *string `json:"AgentIdList,omitempty" xml:"AgentIdList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MediaType  *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 100
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1532448000000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1532707199000
	StopTime *int64 `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
}

func (s ListHistoricalAgentReportRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentReportRequest) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentReportRequest) SetAgentIdList(v string) *ListHistoricalAgentReportRequest {
	s.AgentIdList = &v
	return s
}

func (s *ListHistoricalAgentReportRequest) SetInstanceId(v string) *ListHistoricalAgentReportRequest {
	s.InstanceId = &v
	return s
}

func (s *ListHistoricalAgentReportRequest) SetMediaType(v string) *ListHistoricalAgentReportRequest {
	s.MediaType = &v
	return s
}

func (s *ListHistoricalAgentReportRequest) SetPageNumber(v int32) *ListHistoricalAgentReportRequest {
	s.PageNumber = &v
	return s
}

func (s *ListHistoricalAgentReportRequest) SetPageSize(v int32) *ListHistoricalAgentReportRequest {
	s.PageSize = &v
	return s
}

func (s *ListHistoricalAgentReportRequest) SetSkillGroupId(v string) *ListHistoricalAgentReportRequest {
	s.SkillGroupId = &v
	return s
}

func (s *ListHistoricalAgentReportRequest) SetStartTime(v int64) *ListHistoricalAgentReportRequest {
	s.StartTime = &v
	return s
}

func (s *ListHistoricalAgentReportRequest) SetStopTime(v int64) *ListHistoricalAgentReportRequest {
	s.StopTime = &v
	return s
}

type ListHistoricalAgentReportResponseBody struct {
	// example:
	//
	// OK
	Code *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListHistoricalAgentReportResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListHistoricalAgentReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentReportResponseBody) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentReportResponseBody) SetCode(v string) *ListHistoricalAgentReportResponseBody {
	s.Code = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBody) SetData(v *ListHistoricalAgentReportResponseBodyData) *ListHistoricalAgentReportResponseBody {
	s.Data = v
	return s
}

func (s *ListHistoricalAgentReportResponseBody) SetHttpStatusCode(v int32) *ListHistoricalAgentReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBody) SetMessage(v string) *ListHistoricalAgentReportResponseBody {
	s.Message = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBody) SetRequestId(v string) *ListHistoricalAgentReportResponseBody {
	s.RequestId = &v
	return s
}

type ListHistoricalAgentReportResponseBodyData struct {
	List []*ListHistoricalAgentReportResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHistoricalAgentReportResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentReportResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentReportResponseBodyData) SetList(v []*ListHistoricalAgentReportResponseBodyDataList) *ListHistoricalAgentReportResponseBodyData {
	s.List = v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyData) SetPageNumber(v int32) *ListHistoricalAgentReportResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyData) SetPageSize(v int32) *ListHistoricalAgentReportResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyData) SetTotalCount(v int32) *ListHistoricalAgentReportResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListHistoricalAgentReportResponseBodyDataList struct {
	// example:
	//
	// agent1@ccc-test
	AgentId   *string                                                 `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName *string                                                 `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	Back2Back *ListHistoricalAgentReportResponseBodyDataListBack2Back `json:"Back2Back,omitempty" xml:"Back2Back,omitempty" type:"Struct"`
	// example:
	//
	// 001
	DisplayId *string                                                `json:"DisplayId,omitempty" xml:"DisplayId,omitempty"`
	Inbound   *ListHistoricalAgentReportResponseBodyDataListInbound  `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	Internal  *ListHistoricalAgentReportResponseBodyDataListInternal `json:"Internal,omitempty" xml:"Internal,omitempty" type:"Struct"`
	Outbound  *ListHistoricalAgentReportResponseBodyDataListOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall   *ListHistoricalAgentReportResponseBodyDataListOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	// example:
	//
	// ["skillgroup1@ccc-test","skillgroup2@ccc-test"]
	SkillGroupIds   *string `json:"SkillGroupIds,omitempty" xml:"SkillGroupIds,omitempty"`
	SkillGroupNames *string `json:"SkillGroupNames,omitempty" xml:"SkillGroupNames,omitempty"`
}

func (s ListHistoricalAgentReportResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentReportResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentReportResponseBodyDataList) SetAgentId(v string) *ListHistoricalAgentReportResponseBodyDataList {
	s.AgentId = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataList) SetAgentName(v string) *ListHistoricalAgentReportResponseBodyDataList {
	s.AgentName = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataList) SetBack2Back(v *ListHistoricalAgentReportResponseBodyDataListBack2Back) *ListHistoricalAgentReportResponseBodyDataList {
	s.Back2Back = v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataList) SetDisplayId(v string) *ListHistoricalAgentReportResponseBodyDataList {
	s.DisplayId = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataList) SetInbound(v *ListHistoricalAgentReportResponseBodyDataListInbound) *ListHistoricalAgentReportResponseBodyDataList {
	s.Inbound = v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataList) SetInternal(v *ListHistoricalAgentReportResponseBodyDataListInternal) *ListHistoricalAgentReportResponseBodyDataList {
	s.Internal = v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataList) SetOutbound(v *ListHistoricalAgentReportResponseBodyDataListOutbound) *ListHistoricalAgentReportResponseBodyDataList {
	s.Outbound = v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataList) SetOverall(v *ListHistoricalAgentReportResponseBodyDataListOverall) *ListHistoricalAgentReportResponseBodyDataList {
	s.Overall = v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataList) SetSkillGroupIds(v string) *ListHistoricalAgentReportResponseBodyDataList {
	s.SkillGroupIds = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataList) SetSkillGroupNames(v string) *ListHistoricalAgentReportResponseBodyDataList {
	s.SkillGroupNames = &v
	return s
}

type ListHistoricalAgentReportResponseBodyDataListBack2Back struct {
	AgentHandleRate         *string `json:"AgentHandleRate,omitempty" xml:"AgentHandleRate,omitempty"`
	AnswerRate              *string `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	AverageCustomerRingTime *string `json:"AverageCustomerRingTime,omitempty" xml:"AverageCustomerRingTime,omitempty"`
	AverageRingTime         *string `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	AverageTalkTime         *string `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	CallsAgentHandled       *string `json:"CallsAgentHandled,omitempty" xml:"CallsAgentHandled,omitempty"`
	CallsAnswered           *string `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsCustomerAnswered   *string `json:"CallsCustomerAnswered,omitempty" xml:"CallsCustomerAnswered,omitempty"`
	CallsDialed             *string `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	CustomerAnswerRate      *string `json:"CustomerAnswerRate,omitempty" xml:"CustomerAnswerRate,omitempty"`
	MaxCustomerRingTime     *string `json:"MaxCustomerRingTime,omitempty" xml:"MaxCustomerRingTime,omitempty"`
	MaxRingTime             *string `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	MaxTalkTime             *string `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	TotalCustomerRingTime   *string `json:"TotalCustomerRingTime,omitempty" xml:"TotalCustomerRingTime,omitempty"`
	TotalRingTime           *string `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	TotalTalkTime           *string `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
}

func (s ListHistoricalAgentReportResponseBodyDataListBack2Back) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentReportResponseBodyDataListBack2Back) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentReportResponseBodyDataListBack2Back) SetAgentHandleRate(v string) *ListHistoricalAgentReportResponseBodyDataListBack2Back {
	s.AgentHandleRate = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListBack2Back) SetAnswerRate(v string) *ListHistoricalAgentReportResponseBodyDataListBack2Back {
	s.AnswerRate = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListBack2Back) SetAverageCustomerRingTime(v string) *ListHistoricalAgentReportResponseBodyDataListBack2Back {
	s.AverageCustomerRingTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListBack2Back) SetAverageRingTime(v string) *ListHistoricalAgentReportResponseBodyDataListBack2Back {
	s.AverageRingTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListBack2Back) SetAverageTalkTime(v string) *ListHistoricalAgentReportResponseBodyDataListBack2Back {
	s.AverageTalkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListBack2Back) SetCallsAgentHandled(v string) *ListHistoricalAgentReportResponseBodyDataListBack2Back {
	s.CallsAgentHandled = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListBack2Back) SetCallsAnswered(v string) *ListHistoricalAgentReportResponseBodyDataListBack2Back {
	s.CallsAnswered = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListBack2Back) SetCallsCustomerAnswered(v string) *ListHistoricalAgentReportResponseBodyDataListBack2Back {
	s.CallsCustomerAnswered = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListBack2Back) SetCallsDialed(v string) *ListHistoricalAgentReportResponseBodyDataListBack2Back {
	s.CallsDialed = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListBack2Back) SetCustomerAnswerRate(v string) *ListHistoricalAgentReportResponseBodyDataListBack2Back {
	s.CustomerAnswerRate = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListBack2Back) SetMaxCustomerRingTime(v string) *ListHistoricalAgentReportResponseBodyDataListBack2Back {
	s.MaxCustomerRingTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListBack2Back) SetMaxRingTime(v string) *ListHistoricalAgentReportResponseBodyDataListBack2Back {
	s.MaxRingTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListBack2Back) SetMaxTalkTime(v string) *ListHistoricalAgentReportResponseBodyDataListBack2Back {
	s.MaxTalkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListBack2Back) SetTotalCustomerRingTime(v string) *ListHistoricalAgentReportResponseBodyDataListBack2Back {
	s.TotalCustomerRingTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListBack2Back) SetTotalRingTime(v string) *ListHistoricalAgentReportResponseBodyDataListBack2Back {
	s.TotalRingTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListBack2Back) SetTotalTalkTime(v string) *ListHistoricalAgentReportResponseBodyDataListBack2Back {
	s.TotalTalkTime = &v
	return s
}

type ListHistoricalAgentReportResponseBodyDataListInbound struct {
	AccessChannelTypeDetails []*ListHistoricalAgentReportResponseBodyDataListInboundAccessChannelTypeDetails `json:"AccessChannelTypeDetails,omitempty" xml:"AccessChannelTypeDetails,omitempty" type:"Repeated"`
	AverageFirstResponseTime *float32                                                                        `json:"AverageFirstResponseTime,omitempty" xml:"AverageFirstResponseTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime     *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	AverageResponseTime *float32 `json:"AverageResponseTime,omitempty" xml:"AverageResponseTime,omitempty"`
	// example:
	//
	// 0
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 0
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferIn *int64 `json:"CallsAttendedTransferIn,omitempty" xml:"CallsAttendedTransferIn,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferOut *int64 `json:"CallsAttendedTransferOut,omitempty" xml:"CallsAttendedTransferOut,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferIn *int64 `json:"CallsBlindTransferIn,omitempty" xml:"CallsBlindTransferIn,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferOut *int64 `json:"CallsBlindTransferOut,omitempty" xml:"CallsBlindTransferOut,omitempty"`
	// example:
	//
	// 0
	CallsHandled *int64 `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	// example:
	//
	// 0
	CallsHold *int64 `json:"CallsHold,omitempty" xml:"CallsHold,omitempty"`
	// example:
	//
	// 0
	CallsOffered *int64 `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	// example:
	//
	// 0
	CallsRinged *int64 `json:"CallsRinged,omitempty" xml:"CallsRinged,omitempty"`
	// example:
	//
	// 0
	HandleRate *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 0
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 0
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	ServiceLevel15               *float32 `json:"ServiceLevel15,omitempty" xml:"ServiceLevel15,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime               *int64  `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	TotalMessagesSent           *int64  `json:"TotalMessagesSent,omitempty" xml:"TotalMessagesSent,omitempty"`
	TotalMessagesSentByAgent    *int64  `json:"TotalMessagesSentByAgent,omitempty" xml:"TotalMessagesSentByAgent,omitempty"`
	TotalMessagesSentByCustomer *string `json:"TotalMessagesSentByCustomer,omitempty" xml:"TotalMessagesSentByCustomer,omitempty"`
	// example:
	//
	// 0
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 0
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListHistoricalAgentReportResponseBodyDataListInbound) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentReportResponseBodyDataListInbound) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetAccessChannelTypeDetails(v []*ListHistoricalAgentReportResponseBodyDataListInboundAccessChannelTypeDetails) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.AccessChannelTypeDetails = v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetAverageFirstResponseTime(v float32) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.AverageFirstResponseTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetAverageHoldTime(v float32) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.AverageHoldTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetAverageResponseTime(v float32) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.AverageResponseTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetAverageRingTime(v float32) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetAverageTalkTime(v float32) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetAverageWorkTime(v float32) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetCallsAttendedTransferIn(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.CallsAttendedTransferIn = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetCallsAttendedTransferOut(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.CallsAttendedTransferOut = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetCallsBlindTransferIn(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.CallsBlindTransferIn = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetCallsBlindTransferOut(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.CallsBlindTransferOut = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetCallsHandled(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.CallsHandled = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetCallsHold(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.CallsHold = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetCallsOffered(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.CallsOffered = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetCallsRinged(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.CallsRinged = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetHandleRate(v float32) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.HandleRate = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetMaxHoldTime(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.MaxHoldTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetMaxRingTime(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetMaxTalkTime(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetMaxWorkTime(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetSatisfactionIndex(v float32) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetSatisfactionRate(v float32) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.SatisfactionRate = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetSatisfactionSurveysOffered(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetSatisfactionSurveysResponded(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetServiceLevel15(v float32) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.ServiceLevel15 = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetTotalHoldTime(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.TotalHoldTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetTotalMessagesSent(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.TotalMessagesSent = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetTotalMessagesSentByAgent(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.TotalMessagesSentByAgent = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetTotalMessagesSentByCustomer(v string) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.TotalMessagesSentByCustomer = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetTotalRingTime(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetTotalTalkTime(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInbound) SetTotalWorkTime(v int64) *ListHistoricalAgentReportResponseBodyDataListInbound {
	s.TotalWorkTime = &v
	return s
}

type ListHistoricalAgentReportResponseBodyDataListInboundAccessChannelTypeDetails struct {
	AccessChannelType *string `json:"AccessChannelType,omitempty" xml:"AccessChannelType,omitempty"`
	CallsOffered      *int64  `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
}

func (s ListHistoricalAgentReportResponseBodyDataListInboundAccessChannelTypeDetails) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentReportResponseBodyDataListInboundAccessChannelTypeDetails) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentReportResponseBodyDataListInboundAccessChannelTypeDetails) SetAccessChannelType(v string) *ListHistoricalAgentReportResponseBodyDataListInboundAccessChannelTypeDetails {
	s.AccessChannelType = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInboundAccessChannelTypeDetails) SetCallsOffered(v int64) *ListHistoricalAgentReportResponseBodyDataListInboundAccessChannelTypeDetails {
	s.CallsOffered = &v
	return s
}

type ListHistoricalAgentReportResponseBodyDataListInternal struct {
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	CallsAnswered   *int64   `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsDialed     *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	CallsHandled    *int64   `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	CallsOffered    *int64   `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	CallsTalked     *int64   `json:"CallsTalked,omitempty" xml:"CallsTalked,omitempty"`
	MaxTalkTime     *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	TotalTalkTime   *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
}

func (s ListHistoricalAgentReportResponseBodyDataListInternal) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentReportResponseBodyDataListInternal) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentReportResponseBodyDataListInternal) SetAverageTalkTime(v float32) *ListHistoricalAgentReportResponseBodyDataListInternal {
	s.AverageTalkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInternal) SetCallsAnswered(v int64) *ListHistoricalAgentReportResponseBodyDataListInternal {
	s.CallsAnswered = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInternal) SetCallsDialed(v int64) *ListHistoricalAgentReportResponseBodyDataListInternal {
	s.CallsDialed = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInternal) SetCallsHandled(v int64) *ListHistoricalAgentReportResponseBodyDataListInternal {
	s.CallsHandled = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInternal) SetCallsOffered(v int64) *ListHistoricalAgentReportResponseBodyDataListInternal {
	s.CallsOffered = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInternal) SetCallsTalked(v int64) *ListHistoricalAgentReportResponseBodyDataListInternal {
	s.CallsTalked = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInternal) SetMaxTalkTime(v int64) *ListHistoricalAgentReportResponseBodyDataListInternal {
	s.MaxTalkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListInternal) SetTotalTalkTime(v int64) *ListHistoricalAgentReportResponseBodyDataListInternal {
	s.TotalTalkTime = &v
	return s
}

type ListHistoricalAgentReportResponseBodyDataListOutbound struct {
	// example:
	//
	// 0
	AnswerRate *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	// example:
	//
	// 0
	AverageDialingTime *float32 `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	// example:
	//
	// 0
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 0
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 0
	CallsAnswered *int64 `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferIn *int64 `json:"CallsAttendedTransferIn,omitempty" xml:"CallsAttendedTransferIn,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferOut *int64 `json:"CallsAttendedTransferOut,omitempty" xml:"CallsAttendedTransferOut,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferIn *int64 `json:"CallsBlindTransferIn,omitempty" xml:"CallsBlindTransferIn,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferOut *int64 `json:"CallsBlindTransferOut,omitempty" xml:"CallsBlindTransferOut,omitempty"`
	// example:
	//
	// 0
	CallsDialed *int64 `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	// example:
	//
	// 0
	CallsHold *int64 `json:"CallsHold,omitempty" xml:"CallsHold,omitempty"`
	// example:
	//
	// 0
	CallsRinged *int64 `json:"CallsRinged,omitempty" xml:"CallsRinged,omitempty"`
	// example:
	//
	// 0
	MaxDialingTime *int64 `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 0
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 0
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 0
	TotalDialingTime *int64 `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	// example:
	//
	// 0
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 0
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListHistoricalAgentReportResponseBodyDataListOutbound) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentReportResponseBodyDataListOutbound) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetAnswerRate(v float32) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.AnswerRate = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetAverageDialingTime(v float32) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetAverageHoldTime(v float32) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.AverageHoldTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetAverageRingTime(v float32) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetAverageTalkTime(v float32) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetAverageWorkTime(v float32) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetCallsAnswered(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetCallsAttendedTransferIn(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.CallsAttendedTransferIn = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetCallsAttendedTransferOut(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.CallsAttendedTransferOut = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetCallsBlindTransferIn(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.CallsBlindTransferIn = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetCallsBlindTransferOut(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.CallsBlindTransferOut = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetCallsDialed(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.CallsDialed = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetCallsHold(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.CallsHold = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetCallsRinged(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.CallsRinged = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetMaxDialingTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetMaxHoldTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.MaxHoldTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetMaxRingTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetMaxTalkTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetMaxWorkTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetSatisfactionIndex(v float32) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetSatisfactionRate(v float32) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.SatisfactionRate = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetSatisfactionSurveysOffered(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetSatisfactionSurveysResponded(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetTotalDialingTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetTotalHoldTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.TotalHoldTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetTotalRingTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetTotalTalkTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOutbound) SetTotalWorkTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOutbound {
	s.TotalWorkTime = &v
	return s
}

type ListHistoricalAgentReportResponseBodyDataListOverall struct {
	// example:
	//
	// 0
	AverageBreakTime *float32 `json:"AverageBreakTime,omitempty" xml:"AverageBreakTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	// example:
	//
	// 0
	AverageReadyTime *float32 `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 0
	AverageWorkTime     *float32                                                                   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	BreakCodeDetailList []*ListHistoricalAgentReportResponseBodyDataListOverallBreakCodeDetailList `json:"BreakCodeDetailList,omitempty" xml:"BreakCodeDetailList,omitempty" type:"Repeated"`
	FirstCheckInTime    *int64                                                                     `json:"FirstCheckInTime,omitempty" xml:"FirstCheckInTime,omitempty"`
	LastCheckOutTime    *int64                                                                     `json:"LastCheckOutTime,omitempty" xml:"LastCheckOutTime,omitempty"`
	// example:
	//
	// 0
	MaxBreakTime *int64 `json:"MaxBreakTime,omitempty" xml:"MaxBreakTime,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 0
	MaxReadyTime *int64 `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 0
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	OccupancyRate *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 0
	TotalBreakTime *int64 `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	// example:
	//
	// 0
	TotalCalls *int64 `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	// example:
	//
	// 0
	TotalLoggedInTime        *int64 `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	TotalOffSiteLoggedInTime *int64 `json:"TotalOffSiteLoggedInTime,omitempty" xml:"TotalOffSiteLoggedInTime,omitempty"`
	// example:
	//
	// 已弃用，请使用TotalOffSiteLoggedInTime代替此参数
	TotalOffSiteOnlineTime       *int64 `json:"TotalOffSiteOnlineTime,omitempty" xml:"TotalOffSiteOnlineTime,omitempty"`
	TotalOfficePhoneLoggedInTime *int64 `json:"TotalOfficePhoneLoggedInTime,omitempty" xml:"TotalOfficePhoneLoggedInTime,omitempty"`
	// example:
	//
	// 已弃用，请使用TotalOfficePhoneLoggedInTime代替此参数
	TotalOfficePhoneOnlineTime *int64 `json:"TotalOfficePhoneOnlineTime,omitempty" xml:"TotalOfficePhoneOnlineTime,omitempty"`
	TotalOnSiteLoggedInTime    *int64 `json:"TotalOnSiteLoggedInTime,omitempty" xml:"TotalOnSiteLoggedInTime,omitempty"`
	// example:
	//
	// 已弃用，请使用TotalOnSiteLoggedInTime代替此参数
	TotalOnSiteOnlineTime             *int64 `json:"TotalOnSiteOnlineTime,omitempty" xml:"TotalOnSiteOnlineTime,omitempty"`
	TotalOutboundScenarioLoggedInTime *int64 `json:"TotalOutboundScenarioLoggedInTime,omitempty" xml:"TotalOutboundScenarioLoggedInTime,omitempty"`
	TotalOutboundScenarioReadyTime    *int64 `json:"TotalOutboundScenarioReadyTime,omitempty" xml:"TotalOutboundScenarioReadyTime,omitempty"`
	// example:
	//
	// 已弃用，请使用TotalOutboundScenarioLoggedInTime代替此参数
	TotalOutboundScenarioTime *int64 `json:"TotalOutboundScenarioTime,omitempty" xml:"TotalOutboundScenarioTime,omitempty"`
	// example:
	//
	// 0
	TotalReadyTime *int64 `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 0
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListHistoricalAgentReportResponseBodyDataListOverall) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentReportResponseBodyDataListOverall) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetAverageBreakTime(v float32) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.AverageBreakTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetAverageHoldTime(v float32) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.AverageHoldTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetAverageReadyTime(v float32) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetAverageTalkTime(v float32) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetAverageWorkTime(v float32) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetBreakCodeDetailList(v []*ListHistoricalAgentReportResponseBodyDataListOverallBreakCodeDetailList) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.BreakCodeDetailList = v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetFirstCheckInTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.FirstCheckInTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetLastCheckOutTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.LastCheckOutTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetMaxBreakTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.MaxBreakTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetMaxHoldTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.MaxHoldTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetMaxReadyTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetMaxTalkTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetMaxWorkTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetOccupancyRate(v float32) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.OccupancyRate = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetSatisfactionIndex(v float32) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetSatisfactionRate(v float32) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.SatisfactionRate = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetSatisfactionSurveysOffered(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetSatisfactionSurveysResponded(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetTotalBreakTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetTotalCalls(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.TotalCalls = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetTotalHoldTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.TotalHoldTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetTotalLoggedInTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetTotalOffSiteLoggedInTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.TotalOffSiteLoggedInTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetTotalOffSiteOnlineTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.TotalOffSiteOnlineTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetTotalOfficePhoneLoggedInTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.TotalOfficePhoneLoggedInTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetTotalOfficePhoneOnlineTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.TotalOfficePhoneOnlineTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetTotalOnSiteLoggedInTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.TotalOnSiteLoggedInTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetTotalOnSiteOnlineTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.TotalOnSiteOnlineTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetTotalOutboundScenarioLoggedInTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.TotalOutboundScenarioLoggedInTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetTotalOutboundScenarioReadyTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.TotalOutboundScenarioReadyTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetTotalOutboundScenarioTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.TotalOutboundScenarioTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetTotalReadyTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetTotalTalkTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverall) SetTotalWorkTime(v int64) *ListHistoricalAgentReportResponseBodyDataListOverall {
	s.TotalWorkTime = &v
	return s
}

type ListHistoricalAgentReportResponseBodyDataListOverallBreakCodeDetailList struct {
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	Count     *int64  `json:"Count,omitempty" xml:"Count,omitempty"`
	Duration  *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s ListHistoricalAgentReportResponseBodyDataListOverallBreakCodeDetailList) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentReportResponseBodyDataListOverallBreakCodeDetailList) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverallBreakCodeDetailList) SetBreakCode(v string) *ListHistoricalAgentReportResponseBodyDataListOverallBreakCodeDetailList {
	s.BreakCode = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverallBreakCodeDetailList) SetCount(v int64) *ListHistoricalAgentReportResponseBodyDataListOverallBreakCodeDetailList {
	s.Count = &v
	return s
}

func (s *ListHistoricalAgentReportResponseBodyDataListOverallBreakCodeDetailList) SetDuration(v int64) *ListHistoricalAgentReportResponseBodyDataListOverallBreakCodeDetailList {
	s.Duration = &v
	return s
}

type ListHistoricalAgentReportResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHistoricalAgentReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHistoricalAgentReportResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentReportResponse) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentReportResponse) SetHeaders(v map[string]*string) *ListHistoricalAgentReportResponse {
	s.Headers = v
	return s
}

func (s *ListHistoricalAgentReportResponse) SetStatusCode(v int32) *ListHistoricalAgentReportResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHistoricalAgentReportResponse) SetBody(v *ListHistoricalAgentReportResponseBody) *ListHistoricalAgentReportResponse {
	s.Body = v
	return s
}

type ListHistoricalAgentSkillGroupReportRequest struct {
	// example:
	//
	// ["agent1@ccc-test", "agent2@ccc-test"]
	AgentIdList *string `json:"AgentIdList,omitempty" xml:"AgentIdList,omitempty"`
	// example:
	//
	// 1620273600000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MediaType  *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// [
	//
	//       "skg1@ccc-test",
	//
	//       "skg2@ccc-test"
	//
	// ]
	SkillGroupIdList *string `json:"SkillGroupIdList,omitempty" xml:"SkillGroupIdList,omitempty"`
	// example:
	//
	// 1634140800000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListHistoricalAgentSkillGroupReportRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentSkillGroupReportRequest) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentSkillGroupReportRequest) SetAgentIdList(v string) *ListHistoricalAgentSkillGroupReportRequest {
	s.AgentIdList = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportRequest) SetEndTime(v int64) *ListHistoricalAgentSkillGroupReportRequest {
	s.EndTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportRequest) SetInstanceId(v string) *ListHistoricalAgentSkillGroupReportRequest {
	s.InstanceId = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportRequest) SetMediaType(v string) *ListHistoricalAgentSkillGroupReportRequest {
	s.MediaType = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportRequest) SetPageNumber(v int32) *ListHistoricalAgentSkillGroupReportRequest {
	s.PageNumber = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportRequest) SetPageSize(v int32) *ListHistoricalAgentSkillGroupReportRequest {
	s.PageSize = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportRequest) SetSkillGroupIdList(v string) *ListHistoricalAgentSkillGroupReportRequest {
	s.SkillGroupIdList = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportRequest) SetStartTime(v int64) *ListHistoricalAgentSkillGroupReportRequest {
	s.StartTime = &v
	return s
}

type ListHistoricalAgentSkillGroupReportResponseBody struct {
	// example:
	//
	// OK
	Code *string                                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListHistoricalAgentSkillGroupReportResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListHistoricalAgentSkillGroupReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentSkillGroupReportResponseBody) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentSkillGroupReportResponseBody) SetCode(v string) *ListHistoricalAgentSkillGroupReportResponseBody {
	s.Code = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBody) SetData(v *ListHistoricalAgentSkillGroupReportResponseBodyData) *ListHistoricalAgentSkillGroupReportResponseBody {
	s.Data = v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBody) SetHttpStatusCode(v int32) *ListHistoricalAgentSkillGroupReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBody) SetMessage(v string) *ListHistoricalAgentSkillGroupReportResponseBody {
	s.Message = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBody) SetRequestId(v string) *ListHistoricalAgentSkillGroupReportResponseBody {
	s.RequestId = &v
	return s
}

type ListHistoricalAgentSkillGroupReportResponseBodyData struct {
	List []*ListHistoricalAgentSkillGroupReportResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 11
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHistoricalAgentSkillGroupReportResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentSkillGroupReportResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyData) SetList(v []*ListHistoricalAgentSkillGroupReportResponseBodyDataList) *ListHistoricalAgentSkillGroupReportResponseBodyData {
	s.List = v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyData) SetPageNumber(v int32) *ListHistoricalAgentSkillGroupReportResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyData) SetPageSize(v int32) *ListHistoricalAgentSkillGroupReportResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyData) SetTotalCount(v int32) *ListHistoricalAgentSkillGroupReportResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListHistoricalAgentSkillGroupReportResponseBodyDataList struct {
	// example:
	//
	// agent1@ccc-test
	AgentId   *string                                                           `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName *string                                                           `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	Back2Back *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back `json:"Back2Back,omitempty" xml:"Back2Back,omitempty" type:"Struct"`
	// example:
	//
	// 1001
	DisplayId *string                                                          `json:"DisplayId,omitempty" xml:"DisplayId,omitempty"`
	Inbound   *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound  `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	Internal  *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal `json:"Internal,omitempty" xml:"Internal,omitempty" type:"Struct"`
	Outbound  *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall   *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	// example:
	//
	// skillgroup1@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// Default
	SkillGroupName *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
}

func (s ListHistoricalAgentSkillGroupReportResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentSkillGroupReportResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataList) SetAgentId(v string) *ListHistoricalAgentSkillGroupReportResponseBodyDataList {
	s.AgentId = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataList) SetAgentName(v string) *ListHistoricalAgentSkillGroupReportResponseBodyDataList {
	s.AgentName = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataList) SetBack2Back(v *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) *ListHistoricalAgentSkillGroupReportResponseBodyDataList {
	s.Back2Back = v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataList) SetDisplayId(v string) *ListHistoricalAgentSkillGroupReportResponseBodyDataList {
	s.DisplayId = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataList) SetInbound(v *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) *ListHistoricalAgentSkillGroupReportResponseBodyDataList {
	s.Inbound = v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataList) SetInternal(v *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal) *ListHistoricalAgentSkillGroupReportResponseBodyDataList {
	s.Internal = v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataList) SetOutbound(v *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) *ListHistoricalAgentSkillGroupReportResponseBodyDataList {
	s.Outbound = v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataList) SetOverall(v *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) *ListHistoricalAgentSkillGroupReportResponseBodyDataList {
	s.Overall = v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataList) SetSkillGroupId(v string) *ListHistoricalAgentSkillGroupReportResponseBodyDataList {
	s.SkillGroupId = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataList) SetSkillGroupName(v string) *ListHistoricalAgentSkillGroupReportResponseBodyDataList {
	s.SkillGroupName = &v
	return s
}

type ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back struct {
	// example:
	//
	// 0.5
	AgentAnswerRate *float32 `json:"AgentAnswerRate,omitempty" xml:"AgentAnswerRate,omitempty"`
	AgentHandleRate *float32 `json:"AgentHandleRate,omitempty" xml:"AgentHandleRate,omitempty"`
	// example:
	//
	// 0.6
	AnswerRate *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	// example:
	//
	// 100
	AverageCustomerRingTime *float32 `json:"AverageCustomerRingTime,omitempty" xml:"AverageCustomerRingTime,omitempty"`
	// example:
	//
	// 100
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 100
	AverageTalkTime   *int64 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	CallsAgentHandled *int64 `json:"CallsAgentHandled,omitempty" xml:"CallsAgentHandled,omitempty"`
	// example:
	//
	// 100
	CallsAnswered         *int64 `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsCustomerAnswered *int64 `json:"CallsCustomerAnswered,omitempty" xml:"CallsCustomerAnswered,omitempty"`
	// example:
	//
	// 100
	CallsCustomerHandled *int64 `json:"CallsCustomerHandled,omitempty" xml:"CallsCustomerHandled,omitempty"`
	// example:
	//
	// 100
	CallsDialed        *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	CustomerAnswerRate *float32 `json:"CustomerAnswerRate,omitempty" xml:"CustomerAnswerRate,omitempty"`
	// example:
	//
	// 0.5
	CustomerHandleRate *float32 `json:"CustomerHandleRate,omitempty" xml:"CustomerHandleRate,omitempty"`
	// example:
	//
	// 100
	MaxCustomerRingTime *int64 `json:"MaxCustomerRingTime,omitempty" xml:"MaxCustomerRingTime,omitempty"`
	// example:
	//
	// 100
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 100
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 100
	TotalCustomerRingTime *int64 `json:"TotalCustomerRingTime,omitempty" xml:"TotalCustomerRingTime,omitempty"`
	// example:
	//
	// 100
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 100
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
}

func (s ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetAgentAnswerRate(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.AgentAnswerRate = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetAgentHandleRate(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.AgentHandleRate = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetAnswerRate(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.AnswerRate = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetAverageCustomerRingTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.AverageCustomerRingTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetAverageRingTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.AverageRingTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetAverageTalkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.AverageTalkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetCallsAgentHandled(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.CallsAgentHandled = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetCallsAnswered(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.CallsAnswered = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetCallsCustomerAnswered(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.CallsCustomerAnswered = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetCallsCustomerHandled(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.CallsCustomerHandled = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetCallsDialed(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.CallsDialed = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetCustomerAnswerRate(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.CustomerAnswerRate = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetCustomerHandleRate(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.CustomerHandleRate = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetMaxCustomerRingTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.MaxCustomerRingTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetMaxRingTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.MaxRingTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetMaxTalkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.MaxTalkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetTotalCustomerRingTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.TotalCustomerRingTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetTotalRingTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.TotalRingTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back) SetTotalTalkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListBack2Back {
	s.TotalTalkTime = &v
	return s
}

type ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound struct {
	AverageFirstResponseTime *float32 `json:"AverageFirstResponseTime,omitempty" xml:"AverageFirstResponseTime,omitempty"`
	// example:
	//
	// 100
	AverageHoldTime     *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	AverageResponseTime *float32 `json:"AverageResponseTime,omitempty" xml:"AverageResponseTime,omitempty"`
	// example:
	//
	// 100
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 100
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 100
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 100
	CallsAttendedTransferIn *int64 `json:"CallsAttendedTransferIn,omitempty" xml:"CallsAttendedTransferIn,omitempty"`
	// example:
	//
	// 100
	CallsAttendedTransferOut *int64 `json:"CallsAttendedTransferOut,omitempty" xml:"CallsAttendedTransferOut,omitempty"`
	// example:
	//
	// 100
	CallsBlindTransferIn *int64 `json:"CallsBlindTransferIn,omitempty" xml:"CallsBlindTransferIn,omitempty"`
	// example:
	//
	// 100
	CallsBlindTransferOut *int64 `json:"CallsBlindTransferOut,omitempty" xml:"CallsBlindTransferOut,omitempty"`
	// example:
	//
	// 100
	CallsHandled *int64 `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	// example:
	//
	// 100
	CallsHold *int64 `json:"CallsHold,omitempty" xml:"CallsHold,omitempty"`
	// example:
	//
	// 100
	CallsOffered *int64 `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	// example:
	//
	// 100
	CallsRinged *int64 `json:"CallsRinged,omitempty" xml:"CallsRinged,omitempty"`
	// example:
	//
	// 100
	HandleRate *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	// example:
	//
	// 100
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 100
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 100
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 100
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 100
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0.5
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 100
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 100
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 100
	TotalHoldTime               *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	TotalMessagesSent           *int64 `json:"TotalMessagesSent,omitempty" xml:"TotalMessagesSent,omitempty"`
	TotalMessagesSentByAgent    *int64 `json:"TotalMessagesSentByAgent,omitempty" xml:"TotalMessagesSentByAgent,omitempty"`
	TotalMessagesSentByCustomer *int64 `json:"TotalMessagesSentByCustomer,omitempty" xml:"TotalMessagesSentByCustomer,omitempty"`
	// example:
	//
	// 100
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 100
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 100
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetAverageFirstResponseTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.AverageFirstResponseTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetAverageHoldTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.AverageHoldTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetAverageResponseTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.AverageResponseTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetAverageRingTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetAverageTalkTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetAverageWorkTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetCallsAttendedTransferIn(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.CallsAttendedTransferIn = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetCallsAttendedTransferOut(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.CallsAttendedTransferOut = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetCallsBlindTransferIn(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.CallsBlindTransferIn = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetCallsBlindTransferOut(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.CallsBlindTransferOut = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetCallsHandled(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.CallsHandled = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetCallsHold(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.CallsHold = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetCallsOffered(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.CallsOffered = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetCallsRinged(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.CallsRinged = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetHandleRate(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.HandleRate = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetMaxHoldTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.MaxHoldTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetMaxRingTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetMaxTalkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetMaxWorkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetSatisfactionIndex(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetSatisfactionRate(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.SatisfactionRate = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetSatisfactionSurveysOffered(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetSatisfactionSurveysResponded(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetTotalHoldTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.TotalHoldTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetTotalMessagesSent(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.TotalMessagesSent = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetTotalMessagesSentByAgent(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.TotalMessagesSentByAgent = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetTotalMessagesSentByCustomer(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.TotalMessagesSentByCustomer = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetTotalRingTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetTotalTalkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound) SetTotalWorkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInbound {
	s.TotalWorkTime = &v
	return s
}

type ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal struct {
	// example:
	//
	// 100
	AverageTalkTime *int64 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 100
	CallsAnswered *int64 `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	// example:
	//
	// 100
	CallsDialed *int64 `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	// example:
	//
	// 100
	CallsHandled *int64 `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	// example:
	//
	// 100
	CallsOffered *int64 `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	// example:
	//
	// 100
	CallsTalk   *int64 `json:"CallsTalk,omitempty" xml:"CallsTalk,omitempty"`
	CallsTalked *int64 `json:"CallsTalked,omitempty" xml:"CallsTalked,omitempty"`
	// example:
	//
	// 100
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 100
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
}

func (s ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal) SetAverageTalkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal {
	s.AverageTalkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal) SetCallsAnswered(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal {
	s.CallsAnswered = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal) SetCallsDialed(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal {
	s.CallsDialed = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal) SetCallsHandled(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal {
	s.CallsHandled = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal) SetCallsOffered(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal {
	s.CallsOffered = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal) SetCallsTalk(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal {
	s.CallsTalk = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal) SetCallsTalked(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal {
	s.CallsTalked = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal) SetMaxTalkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal {
	s.MaxTalkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal) SetTotalTalkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListInternal {
	s.TotalTalkTime = &v
	return s
}

type ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound struct {
	// example:
	//
	// 0.5
	AnswerRate *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	// example:
	//
	// 100
	AverageDialingTime *float32 `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	// example:
	//
	// 100
	AverageHoldTime *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	// example:
	//
	// 100
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 100
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 100
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 100
	CallsAnswered *int64 `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	// example:
	//
	// 100
	CallsAttendedTransferIn *int64 `json:"CallsAttendedTransferIn,omitempty" xml:"CallsAttendedTransferIn,omitempty"`
	// example:
	//
	// 100
	CallsAttendedTransferOut *int64 `json:"CallsAttendedTransferOut,omitempty" xml:"CallsAttendedTransferOut,omitempty"`
	// example:
	//
	// 100
	CallsBlindTransferIn *int64 `json:"CallsBlindTransferIn,omitempty" xml:"CallsBlindTransferIn,omitempty"`
	// example:
	//
	// 100
	CallsBlindTransferOut *int64 `json:"CallsBlindTransferOut,omitempty" xml:"CallsBlindTransferOut,omitempty"`
	// example:
	//
	// 100
	CallsDialed *int64 `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	// example:
	//
	// 100
	CallsHold *int64 `json:"CallsHold,omitempty" xml:"CallsHold,omitempty"`
	// example:
	//
	// 100
	CallsRinged *int64 `json:"CallsRinged,omitempty" xml:"CallsRinged,omitempty"`
	// example:
	//
	// 100
	MaxDialingTime *int64 `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	// example:
	//
	// 100
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 100
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 100
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 100
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 1.4
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0.5
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 100
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 100
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 100
	TotalDialingTime *int64 `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	// example:
	//
	// 100
	TotalHoldTime *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	// example:
	//
	// 100
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 100
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 100
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetAnswerRate(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.AnswerRate = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetAverageDialingTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetAverageHoldTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.AverageHoldTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetAverageRingTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetAverageTalkTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetAverageWorkTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetCallsAnswered(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetCallsAttendedTransferIn(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.CallsAttendedTransferIn = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetCallsAttendedTransferOut(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.CallsAttendedTransferOut = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetCallsBlindTransferIn(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.CallsBlindTransferIn = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetCallsBlindTransferOut(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.CallsBlindTransferOut = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetCallsDialed(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.CallsDialed = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetCallsHold(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.CallsHold = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetCallsRinged(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.CallsRinged = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetMaxDialingTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetMaxHoldTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.MaxHoldTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetMaxRingTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetMaxTalkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetMaxWorkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetSatisfactionIndex(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetSatisfactionRate(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.SatisfactionRate = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetSatisfactionSurveysOffered(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetSatisfactionSurveysResponded(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetTotalDialingTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetTotalHoldTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.TotalHoldTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetTotalRingTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetTotalTalkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound) SetTotalWorkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOutbound {
	s.TotalWorkTime = &v
	return s
}

type ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall struct {
	// example:
	//
	// 100
	AverageBreakTime *float32 `json:"AverageBreakTime,omitempty" xml:"AverageBreakTime,omitempty"`
	// example:
	//
	// 100
	AverageHoldTime *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	// example:
	//
	// 100
	AverageReadyTime *float32 `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	// example:
	//
	// 100
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 100
	AverageWorkTime     *float32                                                                             `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	BreakCodeDetailList []*ListHistoricalAgentSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList `json:"BreakCodeDetailList,omitempty" xml:"BreakCodeDetailList,omitempty" type:"Repeated"`
	// example:
	//
	// 1686030515000
	FirstCheckInTime *int64 `json:"FirstCheckInTime,omitempty" xml:"FirstCheckInTime,omitempty"`
	// example:
	//
	// 1686030515000
	LastCheckOutTime *int64 `json:"LastCheckOutTime,omitempty" xml:"LastCheckOutTime,omitempty"`
	// example:
	//
	// 100
	MaxBreakTime *int64 `json:"MaxBreakTime,omitempty" xml:"MaxBreakTime,omitempty"`
	// example:
	//
	// 100
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 100
	MaxReadyTime *int64 `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	// example:
	//
	// 100
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 100
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0.5
	OccupancyRate *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	// example:
	//
	// 1.4
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0.5
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 100
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 100
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 100
	TotalBreakTime *int64 `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	// example:
	//
	// 100
	TotalCalls *int64 `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	// example:
	//
	// 100
	TotalHoldTime *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	// example:
	//
	// 100
	TotalLoggedInTime                 *int64  `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	TotalOffSiteLggedInTime           *int64  `json:"TotalOffSiteLggedInTime,omitempty" xml:"TotalOffSiteLggedInTime,omitempty"`
	TotalOfficePhoneLoggedInTime      *int64  `json:"TotalOfficePhoneLoggedInTime,omitempty" xml:"TotalOfficePhoneLoggedInTime,omitempty"`
	TotalOnSiteLoggedInTime           *string `json:"TotalOnSiteLoggedInTime,omitempty" xml:"TotalOnSiteLoggedInTime,omitempty"`
	TotalOutboundScenarioLoggedInTime *int64  `json:"TotalOutboundScenarioLoggedInTime,omitempty" xml:"TotalOutboundScenarioLoggedInTime,omitempty"`
	// example:
	//
	// 100
	TotalOutboundScenarioReadyTime *int64 `json:"TotalOutboundScenarioReadyTime,omitempty" xml:"TotalOutboundScenarioReadyTime,omitempty"`
	// example:
	//
	// 100
	TotalOutboundScenarioTime *int64 `json:"TotalOutboundScenarioTime,omitempty" xml:"TotalOutboundScenarioTime,omitempty"`
	// example:
	//
	// 100
	TotalReadyTime *int64 `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	// example:
	//
	// 100
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 100
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetAverageBreakTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.AverageBreakTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetAverageHoldTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.AverageHoldTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetAverageReadyTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetAverageTalkTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetAverageWorkTime(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetBreakCodeDetailList(v []*ListHistoricalAgentSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.BreakCodeDetailList = v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetFirstCheckInTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.FirstCheckInTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetLastCheckOutTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.LastCheckOutTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetMaxBreakTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.MaxBreakTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetMaxHoldTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.MaxHoldTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetMaxReadyTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetMaxTalkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetMaxWorkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetOccupancyRate(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.OccupancyRate = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetSatisfactionIndex(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetSatisfactionRate(v float32) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.SatisfactionRate = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetSatisfactionSurveysOffered(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetSatisfactionSurveysResponded(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetTotalBreakTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetTotalCalls(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.TotalCalls = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetTotalHoldTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.TotalHoldTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetTotalLoggedInTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetTotalOffSiteLggedInTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.TotalOffSiteLggedInTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetTotalOfficePhoneLoggedInTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.TotalOfficePhoneLoggedInTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetTotalOnSiteLoggedInTime(v string) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.TotalOnSiteLoggedInTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetTotalOutboundScenarioLoggedInTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.TotalOutboundScenarioLoggedInTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetTotalOutboundScenarioReadyTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.TotalOutboundScenarioReadyTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetTotalOutboundScenarioTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.TotalOutboundScenarioTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetTotalReadyTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetTotalTalkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall) SetTotalWorkTime(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverall {
	s.TotalWorkTime = &v
	return s
}

type ListHistoricalAgentSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList struct {
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// 1
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// example:
	//
	// 100
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s ListHistoricalAgentSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList) SetBreakCode(v string) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList {
	s.BreakCode = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList) SetCount(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList {
	s.Count = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList) SetDuration(v int64) *ListHistoricalAgentSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList {
	s.Duration = &v
	return s
}

type ListHistoricalAgentSkillGroupReportResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHistoricalAgentSkillGroupReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHistoricalAgentSkillGroupReportResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalAgentSkillGroupReportResponse) GoString() string {
	return s.String()
}

func (s *ListHistoricalAgentSkillGroupReportResponse) SetHeaders(v map[string]*string) *ListHistoricalAgentSkillGroupReportResponse {
	s.Headers = v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponse) SetStatusCode(v int32) *ListHistoricalAgentSkillGroupReportResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHistoricalAgentSkillGroupReportResponse) SetBody(v *ListHistoricalAgentSkillGroupReportResponseBody) *ListHistoricalAgentSkillGroupReportResponse {
	s.Body = v
	return s
}

type ListHistoricalSkillGroupReportRequest struct {
	// example:
	//
	// 1532707199000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MediaType  *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ["skillgroup1@ccc-test", "skillgroup2@ccc-test2"]
	SkillGroupIdList *string `json:"SkillGroupIdList,omitempty" xml:"SkillGroupIdList,omitempty"`
	// example:
	//
	// 1532448000000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListHistoricalSkillGroupReportRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalSkillGroupReportRequest) GoString() string {
	return s.String()
}

func (s *ListHistoricalSkillGroupReportRequest) SetEndTime(v int64) *ListHistoricalSkillGroupReportRequest {
	s.EndTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportRequest) SetInstanceId(v string) *ListHistoricalSkillGroupReportRequest {
	s.InstanceId = &v
	return s
}

func (s *ListHistoricalSkillGroupReportRequest) SetMediaType(v string) *ListHistoricalSkillGroupReportRequest {
	s.MediaType = &v
	return s
}

func (s *ListHistoricalSkillGroupReportRequest) SetPageNumber(v int32) *ListHistoricalSkillGroupReportRequest {
	s.PageNumber = &v
	return s
}

func (s *ListHistoricalSkillGroupReportRequest) SetPageSize(v int32) *ListHistoricalSkillGroupReportRequest {
	s.PageSize = &v
	return s
}

func (s *ListHistoricalSkillGroupReportRequest) SetSkillGroupIdList(v string) *ListHistoricalSkillGroupReportRequest {
	s.SkillGroupIdList = &v
	return s
}

func (s *ListHistoricalSkillGroupReportRequest) SetStartTime(v int64) *ListHistoricalSkillGroupReportRequest {
	s.StartTime = &v
	return s
}

type ListHistoricalSkillGroupReportResponseBody struct {
	// example:
	//
	// OK
	Code *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListHistoricalSkillGroupReportResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 26A34338-5CD9-4C95-A7A6-5BDCE76C6B94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListHistoricalSkillGroupReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalSkillGroupReportResponseBody) GoString() string {
	return s.String()
}

func (s *ListHistoricalSkillGroupReportResponseBody) SetCode(v string) *ListHistoricalSkillGroupReportResponseBody {
	s.Code = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBody) SetData(v *ListHistoricalSkillGroupReportResponseBodyData) *ListHistoricalSkillGroupReportResponseBody {
	s.Data = v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBody) SetHttpStatusCode(v int32) *ListHistoricalSkillGroupReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBody) SetMessage(v string) *ListHistoricalSkillGroupReportResponseBody {
	s.Message = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBody) SetRequestId(v string) *ListHistoricalSkillGroupReportResponseBody {
	s.RequestId = &v
	return s
}

type ListHistoricalSkillGroupReportResponseBodyData struct {
	List []*ListHistoricalSkillGroupReportResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 4
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListHistoricalSkillGroupReportResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalSkillGroupReportResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListHistoricalSkillGroupReportResponseBodyData) SetList(v []*ListHistoricalSkillGroupReportResponseBodyDataList) *ListHistoricalSkillGroupReportResponseBodyData {
	s.List = v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyData) SetPageNumber(v int32) *ListHistoricalSkillGroupReportResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyData) SetPageSize(v int32) *ListHistoricalSkillGroupReportResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyData) SetTotalCount(v int32) *ListHistoricalSkillGroupReportResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListHistoricalSkillGroupReportResponseBodyDataList struct {
	Back2Back *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back `json:"Back2Back,omitempty" xml:"Back2Back,omitempty" type:"Struct"`
	Inbound   *ListHistoricalSkillGroupReportResponseBodyDataListInbound   `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	Outbound  *ListHistoricalSkillGroupReportResponseBodyDataListOutbound  `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall   *ListHistoricalSkillGroupReportResponseBodyDataListOverall   `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// skillgroup
	SkillGroupName *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
}

func (s ListHistoricalSkillGroupReportResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalSkillGroupReportResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataList) SetBack2Back(v *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) *ListHistoricalSkillGroupReportResponseBodyDataList {
	s.Back2Back = v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataList) SetInbound(v *ListHistoricalSkillGroupReportResponseBodyDataListInbound) *ListHistoricalSkillGroupReportResponseBodyDataList {
	s.Inbound = v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataList) SetOutbound(v *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) *ListHistoricalSkillGroupReportResponseBodyDataList {
	s.Outbound = v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataList) SetOverall(v *ListHistoricalSkillGroupReportResponseBodyDataListOverall) *ListHistoricalSkillGroupReportResponseBodyDataList {
	s.Overall = v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataList) SetSkillGroupId(v string) *ListHistoricalSkillGroupReportResponseBodyDataList {
	s.SkillGroupId = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataList) SetSkillGroupName(v string) *ListHistoricalSkillGroupReportResponseBodyDataList {
	s.SkillGroupName = &v
	return s
}

type ListHistoricalSkillGroupReportResponseBodyDataListBack2Back struct {
	AgentHandleRate         *float32 `json:"AgentHandleRate,omitempty" xml:"AgentHandleRate,omitempty"`
	AnswerRate              *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	AverageCustomerRingTime *float32 `json:"AverageCustomerRingTime,omitempty" xml:"AverageCustomerRingTime,omitempty"`
	AverageRingTime         *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	AverageTalkTime         *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	CallsAnswered           *int64   `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsCustomerAnswered   *int64   `json:"CallsCustomerAnswered,omitempty" xml:"CallsCustomerAnswered,omitempty"`
	CallsDialed             *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	CustomerAnswerRate      *float32 `json:"CustomerAnswerRate,omitempty" xml:"CustomerAnswerRate,omitempty"`
	MaxCustomerRingTime     *int64   `json:"MaxCustomerRingTime,omitempty" xml:"MaxCustomerRingTime,omitempty"`
	MaxRingTime             *int64   `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	MaxTalkTime             *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	TotalCustomerRingTime   *int64   `json:"TotalCustomerRingTime,omitempty" xml:"TotalCustomerRingTime,omitempty"`
	TotalRingTime           *int64   `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	TotalTalkTime           *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
}

func (s ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) GoString() string {
	return s.String()
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) SetAgentHandleRate(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back {
	s.AgentHandleRate = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) SetAnswerRate(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back {
	s.AnswerRate = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) SetAverageCustomerRingTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back {
	s.AverageCustomerRingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) SetAverageRingTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back {
	s.AverageRingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) SetAverageTalkTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back {
	s.AverageTalkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) SetCallsAnswered(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back {
	s.CallsAnswered = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) SetCallsCustomerAnswered(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back {
	s.CallsCustomerAnswered = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) SetCallsDialed(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back {
	s.CallsDialed = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) SetCustomerAnswerRate(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back {
	s.CustomerAnswerRate = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) SetMaxCustomerRingTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back {
	s.MaxCustomerRingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) SetMaxRingTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back {
	s.MaxRingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) SetMaxTalkTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back {
	s.MaxTalkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) SetTotalCustomerRingTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back {
	s.TotalCustomerRingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) SetTotalRingTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back {
	s.TotalRingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back) SetTotalTalkTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListBack2Back {
	s.TotalTalkTime = &v
	return s
}

type ListHistoricalSkillGroupReportResponseBodyDataListInbound struct {
	// example:
	//
	// 0
	AbandonRate              *float32                                                                             `json:"AbandonRate,omitempty" xml:"AbandonRate,omitempty"`
	AccessChannelTypeDetails []*ListHistoricalSkillGroupReportResponseBodyDataListInboundAccessChannelTypeDetails `json:"AccessChannelTypeDetails,omitempty" xml:"AccessChannelTypeDetails,omitempty" type:"Repeated"`
	// example:
	//
	// 0
	AverageAbandonTime *float32 `json:"AverageAbandonTime,omitempty" xml:"AverageAbandonTime,omitempty"`
	// example:
	//
	// 0
	AverageAbandonedInQueueTime *float32 `json:"AverageAbandonedInQueueTime,omitempty" xml:"AverageAbandonedInQueueTime,omitempty"`
	// example:
	//
	// 0
	AverageAbandonedInRingTime *float32 `json:"AverageAbandonedInRingTime,omitempty" xml:"AverageAbandonedInRingTime,omitempty"`
	AverageFirstResponseTime   *float32 `json:"AverageFirstResponseTime,omitempty" xml:"AverageFirstResponseTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime     *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	AverageResponseTime *float32 `json:"AverageResponseTime,omitempty" xml:"AverageResponseTime,omitempty"`
	// example:
	//
	// 5
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 64
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 5
	AverageWaitTime *float32 `json:"AverageWaitTime,omitempty" xml:"AverageWaitTime,omitempty"`
	// example:
	//
	// 13
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 0
	CallsAbandoned *int64 `json:"CallsAbandoned,omitempty" xml:"CallsAbandoned,omitempty"`
	// example:
	//
	// 0
	CallsAbandonedInQueue *int64 `json:"CallsAbandonedInQueue,omitempty" xml:"CallsAbandonedInQueue,omitempty"`
	// example:
	//
	// 0
	CallsAbandonedInRing *int64 `json:"CallsAbandonedInRing,omitempty" xml:"CallsAbandonedInRing,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferIn *int64 `json:"CallsAttendedTransferIn,omitempty" xml:"CallsAttendedTransferIn,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferOut *int64 `json:"CallsAttendedTransferOut,omitempty" xml:"CallsAttendedTransferOut,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferIn *int64 `json:"CallsBlindTransferIn,omitempty" xml:"CallsBlindTransferIn,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferOut *int64 `json:"CallsBlindTransferOut,omitempty" xml:"CallsBlindTransferOut,omitempty"`
	// example:
	//
	// 7
	CallsHandled *int64 `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	// example:
	//
	// 0
	CallsHold *int64 `json:"CallsHold,omitempty" xml:"CallsHold,omitempty"`
	// example:
	//
	// 7
	CallsOffered *int64 `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	// example:
	//
	// 0
	CallsOverflow *int64 `json:"CallsOverflow,omitempty" xml:"CallsOverflow,omitempty"`
	// example:
	//
	// 7
	CallsQueued          *int64 `json:"CallsQueued,omitempty" xml:"CallsQueued,omitempty"`
	CallsQueuingFailed   *int64 `json:"CallsQueuingFailed,omitempty" xml:"CallsQueuingFailed,omitempty"`
	CallsQueuingOverflow *int64 `json:"CallsQueuingOverflow,omitempty" xml:"CallsQueuingOverflow,omitempty"`
	CallsQueuingTimeout  *int64 `json:"CallsQueuingTimeout,omitempty" xml:"CallsQueuingTimeout,omitempty"`
	// example:
	//
	// 7
	CallsRinged *int64 `json:"CallsRinged,omitempty" xml:"CallsRinged,omitempty"`
	// example:
	//
	// 0
	CallsTimeout *int64 `json:"CallsTimeout,omitempty" xml:"CallsTimeout,omitempty"`
	// example:
	//
	// 1
	HandleRate *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	// example:
	//
	// 0
	MaxAbandonTime *int64 `json:"MaxAbandonTime,omitempty" xml:"MaxAbandonTime,omitempty"`
	// example:
	//
	// 0
	MaxAbandonedInQueueTime *int64 `json:"MaxAbandonedInQueueTime,omitempty" xml:"MaxAbandonedInQueueTime,omitempty"`
	// example:
	//
	// 0
	MaxAbandonedInRingTime *int64 `json:"MaxAbandonedInRingTime,omitempty" xml:"MaxAbandonedInRingTime,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 12
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 13
	MaxWaitTime *int64 `json:"MaxWaitTime,omitempty" xml:"MaxWaitTime,omitempty"`
	// example:
	//
	// 12
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	ServiceLevel15               *float32 `json:"ServiceLevel15,omitempty" xml:"ServiceLevel15,omitempty"`
	// example:
	//
	// 0
	ServiceLevel20 *float32 `json:"ServiceLevel20,omitempty" xml:"ServiceLevel20,omitempty"`
	ServiceLevel30 *float32 `json:"ServiceLevel30,omitempty" xml:"ServiceLevel30,omitempty"`
	// example:
	//
	// 0
	TotalAbandonTime *int64 `json:"TotalAbandonTime,omitempty" xml:"TotalAbandonTime,omitempty"`
	// example:
	//
	// 0
	TotalAbandonedInQueueTime *int64 `json:"TotalAbandonedInQueueTime,omitempty" xml:"TotalAbandonedInQueueTime,omitempty"`
	// example:
	//
	// 0
	TotalAbandonedInRingTime *int64 `json:"TotalAbandonedInRingTime,omitempty" xml:"TotalAbandonedInRingTime,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime               *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	TotalMessagesSent           *int64 `json:"TotalMessagesSent,omitempty" xml:"TotalMessagesSent,omitempty"`
	TotalMessagesSentByAgent    *int64 `json:"TotalMessagesSentByAgent,omitempty" xml:"TotalMessagesSentByAgent,omitempty"`
	TotalMessagesSentByCustomer *int64 `json:"TotalMessagesSentByCustomer,omitempty" xml:"TotalMessagesSentByCustomer,omitempty"`
	// example:
	//
	// 32
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 447
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 34
	TotalWaitTime *int64 `json:"TotalWaitTime,omitempty" xml:"TotalWaitTime,omitempty"`
	// example:
	//
	// 85
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListHistoricalSkillGroupReportResponseBodyDataListInbound) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalSkillGroupReportResponseBodyDataListInbound) GoString() string {
	return s.String()
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetAbandonRate(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.AbandonRate = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetAccessChannelTypeDetails(v []*ListHistoricalSkillGroupReportResponseBodyDataListInboundAccessChannelTypeDetails) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.AccessChannelTypeDetails = v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetAverageAbandonTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.AverageAbandonTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetAverageAbandonedInQueueTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.AverageAbandonedInQueueTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetAverageAbandonedInRingTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.AverageAbandonedInRingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetAverageFirstResponseTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.AverageFirstResponseTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetAverageHoldTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.AverageHoldTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetAverageResponseTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.AverageResponseTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetAverageRingTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetAverageTalkTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetAverageWaitTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.AverageWaitTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetAverageWorkTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsAbandoned(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsAbandoned = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsAbandonedInQueue(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsAbandonedInQueue = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsAbandonedInRing(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsAbandonedInRing = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsAttendedTransferIn(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsAttendedTransferIn = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsAttendedTransferOut(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsAttendedTransferOut = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsBlindTransferIn(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsBlindTransferIn = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsBlindTransferOut(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsBlindTransferOut = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsHandled(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsHandled = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsHold(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsHold = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsOffered(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsOffered = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsOverflow(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsOverflow = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsQueued(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsQueued = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsQueuingFailed(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsQueuingFailed = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsQueuingOverflow(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsQueuingOverflow = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsQueuingTimeout(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsQueuingTimeout = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsRinged(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsRinged = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetCallsTimeout(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.CallsTimeout = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetHandleRate(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.HandleRate = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetMaxAbandonTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.MaxAbandonTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetMaxAbandonedInQueueTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.MaxAbandonedInQueueTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetMaxAbandonedInRingTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.MaxAbandonedInRingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetMaxHoldTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.MaxHoldTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetMaxRingTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetMaxTalkTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetMaxWaitTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.MaxWaitTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetMaxWorkTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetSatisfactionIndex(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetSatisfactionRate(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.SatisfactionRate = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetSatisfactionSurveysOffered(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetSatisfactionSurveysResponded(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetServiceLevel15(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.ServiceLevel15 = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetServiceLevel20(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.ServiceLevel20 = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetServiceLevel30(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.ServiceLevel30 = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetTotalAbandonTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.TotalAbandonTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetTotalAbandonedInQueueTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.TotalAbandonedInQueueTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetTotalAbandonedInRingTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.TotalAbandonedInRingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetTotalHoldTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.TotalHoldTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetTotalMessagesSent(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.TotalMessagesSent = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetTotalMessagesSentByAgent(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.TotalMessagesSentByAgent = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetTotalMessagesSentByCustomer(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.TotalMessagesSentByCustomer = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetTotalRingTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetTotalTalkTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetTotalWaitTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.TotalWaitTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInbound) SetTotalWorkTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInbound {
	s.TotalWorkTime = &v
	return s
}

type ListHistoricalSkillGroupReportResponseBodyDataListInboundAccessChannelTypeDetails struct {
	AccessChannelType *string `json:"AccessChannelType,omitempty" xml:"AccessChannelType,omitempty"`
	CallsOffered      *int64  `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
}

func (s ListHistoricalSkillGroupReportResponseBodyDataListInboundAccessChannelTypeDetails) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalSkillGroupReportResponseBodyDataListInboundAccessChannelTypeDetails) GoString() string {
	return s.String()
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInboundAccessChannelTypeDetails) SetAccessChannelType(v string) *ListHistoricalSkillGroupReportResponseBodyDataListInboundAccessChannelTypeDetails {
	s.AccessChannelType = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListInboundAccessChannelTypeDetails) SetCallsOffered(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListInboundAccessChannelTypeDetails {
	s.CallsOffered = &v
	return s
}

type ListHistoricalSkillGroupReportResponseBodyDataListOutbound struct {
	// example:
	//
	// 0
	AnswerRate *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	// example:
	//
	// 37
	AverageDialingTime *float32 `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	// example:
	//
	// 0
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 3
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 2
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 1
	CallsAnswered *int64 `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferIn *int64 `json:"CallsAttendedTransferIn,omitempty" xml:"CallsAttendedTransferIn,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferOut *int64 `json:"CallsAttendedTransferOut,omitempty" xml:"CallsAttendedTransferOut,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferIn *int64 `json:"CallsBlindTransferIn,omitempty" xml:"CallsBlindTransferIn,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferOut *int64 `json:"CallsBlindTransferOut,omitempty" xml:"CallsBlindTransferOut,omitempty"`
	// example:
	//
	// 6
	CallsDialed *int64 `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	// example:
	//
	// 0
	CallsHold *int64 `json:"CallsHold,omitempty" xml:"CallsHold,omitempty"`
	// example:
	//
	// 0
	CallsRinged *int64 `json:"CallsRinged,omitempty" xml:"CallsRinged,omitempty"`
	// example:
	//
	// 12
	MaxDialingTime *int64 `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 0
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 0
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 218
	TotalDialingTime *int64 `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	// example:
	//
	// 0
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 3
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 9
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListHistoricalSkillGroupReportResponseBodyDataListOutbound) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalSkillGroupReportResponseBodyDataListOutbound) GoString() string {
	return s.String()
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetAnswerRate(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.AnswerRate = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetAverageDialingTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetAverageHoldTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.AverageHoldTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetAverageRingTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetAverageTalkTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetAverageWorkTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetCallsAnswered(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetCallsAttendedTransferIn(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.CallsAttendedTransferIn = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetCallsAttendedTransferOut(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.CallsAttendedTransferOut = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetCallsBlindTransferIn(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.CallsBlindTransferIn = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetCallsBlindTransferOut(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.CallsBlindTransferOut = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetCallsDialed(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.CallsDialed = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetCallsHold(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.CallsHold = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetCallsRinged(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.CallsRinged = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetMaxDialingTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetMaxHoldTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.MaxHoldTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetMaxRingTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetMaxTalkTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetMaxWorkTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetSatisfactionIndex(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetSatisfactionRate(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.SatisfactionRate = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetSatisfactionSurveysOffered(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetSatisfactionSurveysResponded(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetTotalDialingTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetTotalHoldTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.TotalHoldTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetTotalRingTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetTotalTalkTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOutbound) SetTotalWorkTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOutbound {
	s.TotalWorkTime = &v
	return s
}

type ListHistoricalSkillGroupReportResponseBodyDataListOverall struct {
	// example:
	//
	// 0
	AverageBreakTime *float32 `json:"AverageBreakTime,omitempty" xml:"AverageBreakTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	// example:
	//
	// 0
	AverageReadyTime *float32 `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 8
	AverageWorkTime     *float32                                                                        `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	BreakCodeDetailList []*ListHistoricalSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList `json:"BreakCodeDetailList,omitempty" xml:"BreakCodeDetailList,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	MaxBreakTime *int64 `json:"MaxBreakTime,omitempty" xml:"MaxBreakTime,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 19328
	MaxReadyTime *int64 `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 12
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0.02332222293912065
	OccupancyRate *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 3
	TotalBreakTime *int64 `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	// example:
	//
	// 13
	TotalCalls *int64 `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	// example:
	//
	// 23218
	TotalLoggedInTime *int64 `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	// example:
	//
	// 22428
	TotalReadyTime *int64 `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	// example:
	//
	// 449
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 94
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListHistoricalSkillGroupReportResponseBodyDataListOverall) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalSkillGroupReportResponseBodyDataListOverall) GoString() string {
	return s.String()
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetAverageBreakTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.AverageBreakTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetAverageHoldTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.AverageHoldTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetAverageReadyTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetAverageTalkTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetAverageWorkTime(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetBreakCodeDetailList(v []*ListHistoricalSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.BreakCodeDetailList = v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetMaxBreakTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.MaxBreakTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetMaxHoldTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.MaxHoldTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetMaxReadyTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetMaxTalkTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetMaxWorkTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetOccupancyRate(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.OccupancyRate = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetSatisfactionIndex(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetSatisfactionRate(v float32) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.SatisfactionRate = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetSatisfactionSurveysOffered(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetSatisfactionSurveysResponded(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetTotalBreakTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetTotalCalls(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.TotalCalls = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetTotalHoldTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.TotalHoldTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetTotalLoggedInTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetTotalReadyTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetTotalTalkTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverall) SetTotalWorkTime(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOverall {
	s.TotalWorkTime = &v
	return s
}

type ListHistoricalSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList struct {
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	Count     *int64  `json:"Count,omitempty" xml:"Count,omitempty"`
	Duration  *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s ListHistoricalSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList) GoString() string {
	return s.String()
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList) SetBreakCode(v string) *ListHistoricalSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList {
	s.BreakCode = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList) SetCount(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList {
	s.Count = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList) SetDuration(v int64) *ListHistoricalSkillGroupReportResponseBodyDataListOverallBreakCodeDetailList {
	s.Duration = &v
	return s
}

type ListHistoricalSkillGroupReportResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHistoricalSkillGroupReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHistoricalSkillGroupReportResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHistoricalSkillGroupReportResponse) GoString() string {
	return s.String()
}

func (s *ListHistoricalSkillGroupReportResponse) SetHeaders(v map[string]*string) *ListHistoricalSkillGroupReportResponse {
	s.Headers = v
	return s
}

func (s *ListHistoricalSkillGroupReportResponse) SetStatusCode(v int32) *ListHistoricalSkillGroupReportResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHistoricalSkillGroupReportResponse) SetBody(v *ListHistoricalSkillGroupReportResponseBody) *ListHistoricalSkillGroupReportResponse {
	s.Body = v
	return s
}

type ListInstancesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListInstancesRequest) SetPageNumber(v int32) *ListInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListInstancesRequest) SetPageSize(v int32) *ListInstancesRequest {
	s.PageSize = &v
	return s
}

type ListInstancesResponseBody struct {
	// example:
	//
	// OK
	Code *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListInstancesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 26A34338-5CD9-4C95-A7A6-5BDCE76C6B94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBody) SetCode(v string) *ListInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *ListInstancesResponseBody) SetData(v *ListInstancesResponseBodyData) *ListInstancesResponseBody {
	s.Data = v
	return s
}

func (s *ListInstancesResponseBody) SetHttpStatusCode(v int32) *ListInstancesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListInstancesResponseBody) SetMessage(v string) *ListInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *ListInstancesResponseBody) SetRequestId(v string) *ListInstancesResponseBody {
	s.RequestId = &v
	return s
}

type ListInstancesResponseBodyData struct {
	List []*ListInstancesResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListInstancesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyData) SetList(v []*ListInstancesResponseBodyDataList) *ListInstancesResponseBodyData {
	s.List = v
	return s
}

func (s *ListInstancesResponseBodyData) SetPageNumber(v int32) *ListInstancesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListInstancesResponseBodyData) SetPageSize(v int32) *ListInstancesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListInstancesResponseBodyData) SetTotalCount(v int32) *ListInstancesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListInstancesResponseBodyDataList struct {
	AdminList []*ListInstancesResponseBodyDataListAdminList `json:"AdminList,omitempty" xml:"AdminList,omitempty" type:"Repeated"`
	// example:
	//
	// 157123456789****
	AliyunUid *string `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
	// example:
	//
	// https://ccc-v2.aliyun.com/#/workbench/ccc-test
	ConsoleUrl *string `json:"ConsoleUrl,omitempty" xml:"ConsoleUrl,omitempty"`
	// example:
	//
	// 1624679747000
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// ccc-test
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// ccc-test
	Id         *string                                        `json:"Id,omitempty" xml:"Id,omitempty"`
	Name       *string                                        `json:"Name,omitempty" xml:"Name,omitempty"`
	NumberList []*ListInstancesResponseBodyDataListNumberList `json:"NumberList,omitempty" xml:"NumberList,omitempty" type:"Repeated"`
	// example:
	//
	// RUNNING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListInstancesResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyDataList) SetAdminList(v []*ListInstancesResponseBodyDataListAdminList) *ListInstancesResponseBodyDataList {
	s.AdminList = v
	return s
}

func (s *ListInstancesResponseBodyDataList) SetAliyunUid(v string) *ListInstancesResponseBodyDataList {
	s.AliyunUid = &v
	return s
}

func (s *ListInstancesResponseBodyDataList) SetConsoleUrl(v string) *ListInstancesResponseBodyDataList {
	s.ConsoleUrl = &v
	return s
}

func (s *ListInstancesResponseBodyDataList) SetCreateTime(v int64) *ListInstancesResponseBodyDataList {
	s.CreateTime = &v
	return s
}

func (s *ListInstancesResponseBodyDataList) SetDescription(v string) *ListInstancesResponseBodyDataList {
	s.Description = &v
	return s
}

func (s *ListInstancesResponseBodyDataList) SetDomainName(v string) *ListInstancesResponseBodyDataList {
	s.DomainName = &v
	return s
}

func (s *ListInstancesResponseBodyDataList) SetId(v string) *ListInstancesResponseBodyDataList {
	s.Id = &v
	return s
}

func (s *ListInstancesResponseBodyDataList) SetName(v string) *ListInstancesResponseBodyDataList {
	s.Name = &v
	return s
}

func (s *ListInstancesResponseBodyDataList) SetNumberList(v []*ListInstancesResponseBodyDataListNumberList) *ListInstancesResponseBodyDataList {
	s.NumberList = v
	return s
}

func (s *ListInstancesResponseBodyDataList) SetStatus(v string) *ListInstancesResponseBodyDataList {
	s.Status = &v
	return s
}

type ListInstancesResponseBodyDataListAdminList struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// agent
	LoginName *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	// example:
	//
	// 1382114****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// Admin@ccc-test
	RoleId *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	// example:
	//
	// Admin
	RoleName *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s ListInstancesResponseBodyDataListAdminList) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponseBodyDataListAdminList) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyDataListAdminList) SetDisplayName(v string) *ListInstancesResponseBodyDataListAdminList {
	s.DisplayName = &v
	return s
}

func (s *ListInstancesResponseBodyDataListAdminList) SetEmail(v string) *ListInstancesResponseBodyDataListAdminList {
	s.Email = &v
	return s
}

func (s *ListInstancesResponseBodyDataListAdminList) SetExtension(v string) *ListInstancesResponseBodyDataListAdminList {
	s.Extension = &v
	return s
}

func (s *ListInstancesResponseBodyDataListAdminList) SetInstanceId(v string) *ListInstancesResponseBodyDataListAdminList {
	s.InstanceId = &v
	return s
}

func (s *ListInstancesResponseBodyDataListAdminList) SetLoginName(v string) *ListInstancesResponseBodyDataListAdminList {
	s.LoginName = &v
	return s
}

func (s *ListInstancesResponseBodyDataListAdminList) SetMobile(v string) *ListInstancesResponseBodyDataListAdminList {
	s.Mobile = &v
	return s
}

func (s *ListInstancesResponseBodyDataListAdminList) SetRoleId(v string) *ListInstancesResponseBodyDataListAdminList {
	s.RoleId = &v
	return s
}

func (s *ListInstancesResponseBodyDataListAdminList) SetRoleName(v string) *ListInstancesResponseBodyDataListAdminList {
	s.RoleName = &v
	return s
}

func (s *ListInstancesResponseBodyDataListAdminList) SetUserId(v string) *ListInstancesResponseBodyDataListAdminList {
	s.UserId = &v
	return s
}

func (s *ListInstancesResponseBodyDataListAdminList) SetWorkMode(v string) *ListInstancesResponseBodyDataListAdminList {
	s.WorkMode = &v
	return s
}

type ListInstancesResponseBodyDataListNumberList struct {
	// example:
	//
	// 0830011****
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
}

func (s ListInstancesResponseBodyDataListNumberList) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponseBodyDataListNumberList) GoString() string {
	return s.String()
}

func (s *ListInstancesResponseBodyDataListNumberList) SetNumber(v string) *ListInstancesResponseBodyDataListNumberList {
	s.Number = &v
	return s
}

type ListInstancesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListInstancesResponse) SetHeaders(v map[string]*string) *ListInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListInstancesResponse) SetStatusCode(v int32) *ListInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInstancesResponse) SetBody(v *ListInstancesResponseBody) *ListInstancesResponse {
	s.Body = v
	return s
}

type ListInstancesOfUserRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListInstancesOfUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserRequest) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserRequest) SetPageNumber(v int32) *ListInstancesOfUserRequest {
	s.PageNumber = &v
	return s
}

func (s *ListInstancesOfUserRequest) SetPageSize(v int32) *ListInstancesOfUserRequest {
	s.PageSize = &v
	return s
}

type ListInstancesOfUserResponseBody struct {
	// example:
	//
	// OK
	Code *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListInstancesOfUserResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3969FC68-CEC2-4398-B76A-60D2F7EDEBAF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListInstancesOfUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserResponseBody) SetCode(v string) *ListInstancesOfUserResponseBody {
	s.Code = &v
	return s
}

func (s *ListInstancesOfUserResponseBody) SetData(v *ListInstancesOfUserResponseBodyData) *ListInstancesOfUserResponseBody {
	s.Data = v
	return s
}

func (s *ListInstancesOfUserResponseBody) SetHttpStatusCode(v int32) *ListInstancesOfUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListInstancesOfUserResponseBody) SetMessage(v string) *ListInstancesOfUserResponseBody {
	s.Message = &v
	return s
}

func (s *ListInstancesOfUserResponseBody) SetRequestId(v string) *ListInstancesOfUserResponseBody {
	s.RequestId = &v
	return s
}

type ListInstancesOfUserResponseBodyData struct {
	List []*ListInstancesOfUserResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListInstancesOfUserResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserResponseBodyData) SetList(v []*ListInstancesOfUserResponseBodyDataList) *ListInstancesOfUserResponseBodyData {
	s.List = v
	return s
}

func (s *ListInstancesOfUserResponseBodyData) SetPageNumber(v int32) *ListInstancesOfUserResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyData) SetPageSize(v int32) *ListInstancesOfUserResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyData) SetTotalCount(v int32) *ListInstancesOfUserResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListInstancesOfUserResponseBodyDataList struct {
	AdminList []*ListInstancesOfUserResponseBodyDataListAdminList `json:"AdminList,omitempty" xml:"AdminList,omitempty" type:"Repeated"`
	// example:
	//
	// 157123456789****
	AliyunUid *string `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
	// example:
	//
	// https://ccc-v2.aliyun.com/#/workbench/ccc-test
	ConsoleUrl  *string `json:"ConsoleUrl,omitempty" xml:"ConsoleUrl,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// ccc-test
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// ccc-test
	Id         *string                                              `json:"Id,omitempty" xml:"Id,omitempty"`
	Name       *string                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	NumberList []*ListInstancesOfUserResponseBodyDataListNumberList `json:"NumberList,omitempty" xml:"NumberList,omitempty" type:"Repeated"`
	// example:
	//
	// RUNNING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListInstancesOfUserResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserResponseBodyDataList) SetAdminList(v []*ListInstancesOfUserResponseBodyDataListAdminList) *ListInstancesOfUserResponseBodyDataList {
	s.AdminList = v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataList) SetAliyunUid(v string) *ListInstancesOfUserResponseBodyDataList {
	s.AliyunUid = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataList) SetConsoleUrl(v string) *ListInstancesOfUserResponseBodyDataList {
	s.ConsoleUrl = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataList) SetDescription(v string) *ListInstancesOfUserResponseBodyDataList {
	s.Description = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataList) SetDomainName(v string) *ListInstancesOfUserResponseBodyDataList {
	s.DomainName = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataList) SetId(v string) *ListInstancesOfUserResponseBodyDataList {
	s.Id = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataList) SetName(v string) *ListInstancesOfUserResponseBodyDataList {
	s.Name = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataList) SetNumberList(v []*ListInstancesOfUserResponseBodyDataListNumberList) *ListInstancesOfUserResponseBodyDataList {
	s.NumberList = v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataList) SetStatus(v string) *ListInstancesOfUserResponseBodyDataList {
	s.Status = &v
	return s
}

type ListInstancesOfUserResponseBodyDataListAdminList struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// agent
	LoginName *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	// example:
	//
	// 1382114****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// Admin@ccc-test
	RoleId *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	// example:
	//
	// Admin
	RoleName *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s ListInstancesOfUserResponseBodyDataListAdminList) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserResponseBodyDataListAdminList) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserResponseBodyDataListAdminList) SetDisplayName(v string) *ListInstancesOfUserResponseBodyDataListAdminList {
	s.DisplayName = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListAdminList) SetEmail(v string) *ListInstancesOfUserResponseBodyDataListAdminList {
	s.Email = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListAdminList) SetExtension(v string) *ListInstancesOfUserResponseBodyDataListAdminList {
	s.Extension = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListAdminList) SetInstanceId(v string) *ListInstancesOfUserResponseBodyDataListAdminList {
	s.InstanceId = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListAdminList) SetLoginName(v string) *ListInstancesOfUserResponseBodyDataListAdminList {
	s.LoginName = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListAdminList) SetMobile(v string) *ListInstancesOfUserResponseBodyDataListAdminList {
	s.Mobile = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListAdminList) SetRoleId(v string) *ListInstancesOfUserResponseBodyDataListAdminList {
	s.RoleId = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListAdminList) SetRoleName(v string) *ListInstancesOfUserResponseBodyDataListAdminList {
	s.RoleName = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListAdminList) SetUserId(v string) *ListInstancesOfUserResponseBodyDataListAdminList {
	s.UserId = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListAdminList) SetWorkMode(v string) *ListInstancesOfUserResponseBodyDataListAdminList {
	s.WorkMode = &v
	return s
}

type ListInstancesOfUserResponseBodyDataListNumberList struct {
	// example:
	//
	// true
	Active *bool   `json:"Active,omitempty" xml:"Active,omitempty"`
	City   *string `json:"City,omitempty" xml:"City,omitempty"`
	// example:
	//
	// a3fb6c62-9b49-4942-ae5b-cf2abd4123ek
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 0830011****
	Number      *string                                                         `json:"Number,omitempty" xml:"Number,omitempty"`
	Province    *string                                                         `json:"Province,omitempty" xml:"Province,omitempty"`
	SkillGroups []*ListInstancesOfUserResponseBodyDataListNumberListSkillGroups `json:"SkillGroups,omitempty" xml:"SkillGroups,omitempty" type:"Repeated"`
	// example:
	//
	// Bidirection
	Usage *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListInstancesOfUserResponseBodyDataListNumberList) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserResponseBodyDataListNumberList) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserResponseBodyDataListNumberList) SetActive(v bool) *ListInstancesOfUserResponseBodyDataListNumberList {
	s.Active = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListNumberList) SetCity(v string) *ListInstancesOfUserResponseBodyDataListNumberList {
	s.City = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListNumberList) SetContactFlowId(v string) *ListInstancesOfUserResponseBodyDataListNumberList {
	s.ContactFlowId = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListNumberList) SetInstanceId(v string) *ListInstancesOfUserResponseBodyDataListNumberList {
	s.InstanceId = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListNumberList) SetNumber(v string) *ListInstancesOfUserResponseBodyDataListNumberList {
	s.Number = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListNumberList) SetProvince(v string) *ListInstancesOfUserResponseBodyDataListNumberList {
	s.Province = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListNumberList) SetSkillGroups(v []*ListInstancesOfUserResponseBodyDataListNumberListSkillGroups) *ListInstancesOfUserResponseBodyDataListNumberList {
	s.SkillGroups = v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListNumberList) SetUsage(v string) *ListInstancesOfUserResponseBodyDataListNumberList {
	s.Usage = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListNumberList) SetUserId(v string) *ListInstancesOfUserResponseBodyDataListNumberList {
	s.UserId = &v
	return s
}

type ListInstancesOfUserResponseBodyDataListNumberListSkillGroups struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// skillgroup
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1
	PhoneNumberCount *int32 `json:"PhoneNumberCount,omitempty" xml:"PhoneNumberCount,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 2
	UserCount *int32 `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
}

func (s ListInstancesOfUserResponseBodyDataListNumberListSkillGroups) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserResponseBodyDataListNumberListSkillGroups) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserResponseBodyDataListNumberListSkillGroups) SetDescription(v string) *ListInstancesOfUserResponseBodyDataListNumberListSkillGroups {
	s.Description = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListNumberListSkillGroups) SetDisplayName(v string) *ListInstancesOfUserResponseBodyDataListNumberListSkillGroups {
	s.DisplayName = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListNumberListSkillGroups) SetInstanceId(v string) *ListInstancesOfUserResponseBodyDataListNumberListSkillGroups {
	s.InstanceId = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListNumberListSkillGroups) SetName(v string) *ListInstancesOfUserResponseBodyDataListNumberListSkillGroups {
	s.Name = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListNumberListSkillGroups) SetPhoneNumberCount(v int32) *ListInstancesOfUserResponseBodyDataListNumberListSkillGroups {
	s.PhoneNumberCount = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListNumberListSkillGroups) SetSkillGroupId(v string) *ListInstancesOfUserResponseBodyDataListNumberListSkillGroups {
	s.SkillGroupId = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyDataListNumberListSkillGroups) SetUserCount(v int32) *ListInstancesOfUserResponseBodyDataListNumberListSkillGroups {
	s.UserCount = &v
	return s
}

type ListInstancesOfUserResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListInstancesOfUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListInstancesOfUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserResponse) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserResponse) SetHeaders(v map[string]*string) *ListInstancesOfUserResponse {
	s.Headers = v
	return s
}

func (s *ListInstancesOfUserResponse) SetStatusCode(v int32) *ListInstancesOfUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInstancesOfUserResponse) SetBody(v *ListInstancesOfUserResponseBody) *ListInstancesOfUserResponse {
	s.Body = v
	return s
}

type ListIntervalAgentReportRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// agent@ccc-test
	AgentId *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	// example:
	//
	// 1532707199000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// Hourly
	Interval  *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 1532448000000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListIntervalAgentReportRequest) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentReportRequest) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentReportRequest) SetAgentId(v string) *ListIntervalAgentReportRequest {
	s.AgentId = &v
	return s
}

func (s *ListIntervalAgentReportRequest) SetEndTime(v int64) *ListIntervalAgentReportRequest {
	s.EndTime = &v
	return s
}

func (s *ListIntervalAgentReportRequest) SetInstanceId(v string) *ListIntervalAgentReportRequest {
	s.InstanceId = &v
	return s
}

func (s *ListIntervalAgentReportRequest) SetInterval(v string) *ListIntervalAgentReportRequest {
	s.Interval = &v
	return s
}

func (s *ListIntervalAgentReportRequest) SetMediaType(v string) *ListIntervalAgentReportRequest {
	s.MediaType = &v
	return s
}

func (s *ListIntervalAgentReportRequest) SetStartTime(v int64) *ListIntervalAgentReportRequest {
	s.StartTime = &v
	return s
}

type ListIntervalAgentReportResponseBody struct {
	// example:
	//
	// OK
	Code *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListIntervalAgentReportResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 943D8EF3-3321-471F-A104-51C96FCA94D6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListIntervalAgentReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentReportResponseBody) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentReportResponseBody) SetCode(v string) *ListIntervalAgentReportResponseBody {
	s.Code = &v
	return s
}

func (s *ListIntervalAgentReportResponseBody) SetData(v []*ListIntervalAgentReportResponseBodyData) *ListIntervalAgentReportResponseBody {
	s.Data = v
	return s
}

func (s *ListIntervalAgentReportResponseBody) SetHttpStatusCode(v int32) *ListIntervalAgentReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListIntervalAgentReportResponseBody) SetMessage(v string) *ListIntervalAgentReportResponseBody {
	s.Message = &v
	return s
}

func (s *ListIntervalAgentReportResponseBody) SetRequestId(v string) *ListIntervalAgentReportResponseBody {
	s.RequestId = &v
	return s
}

type ListIntervalAgentReportResponseBodyData struct {
	Back2Back *ListIntervalAgentReportResponseBodyDataBack2Back `json:"Back2Back,omitempty" xml:"Back2Back,omitempty" type:"Struct"`
	Inbound   *ListIntervalAgentReportResponseBodyDataInbound   `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	Internal  *ListIntervalAgentReportResponseBodyDataInternal  `json:"Internal,omitempty" xml:"Internal,omitempty" type:"Struct"`
	Outbound  *ListIntervalAgentReportResponseBodyDataOutbound  `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall   *ListIntervalAgentReportResponseBodyDataOverall   `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	// example:
	//
	// 1620291600000
	StatsTime *int64 `json:"StatsTime,omitempty" xml:"StatsTime,omitempty"`
}

func (s ListIntervalAgentReportResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentReportResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentReportResponseBodyData) SetBack2Back(v *ListIntervalAgentReportResponseBodyDataBack2Back) *ListIntervalAgentReportResponseBodyData {
	s.Back2Back = v
	return s
}

func (s *ListIntervalAgentReportResponseBodyData) SetInbound(v *ListIntervalAgentReportResponseBodyDataInbound) *ListIntervalAgentReportResponseBodyData {
	s.Inbound = v
	return s
}

func (s *ListIntervalAgentReportResponseBodyData) SetInternal(v *ListIntervalAgentReportResponseBodyDataInternal) *ListIntervalAgentReportResponseBodyData {
	s.Internal = v
	return s
}

func (s *ListIntervalAgentReportResponseBodyData) SetOutbound(v *ListIntervalAgentReportResponseBodyDataOutbound) *ListIntervalAgentReportResponseBodyData {
	s.Outbound = v
	return s
}

func (s *ListIntervalAgentReportResponseBodyData) SetOverall(v *ListIntervalAgentReportResponseBodyDataOverall) *ListIntervalAgentReportResponseBodyData {
	s.Overall = v
	return s
}

func (s *ListIntervalAgentReportResponseBodyData) SetStatsTime(v int64) *ListIntervalAgentReportResponseBodyData {
	s.StatsTime = &v
	return s
}

type ListIntervalAgentReportResponseBodyDataBack2Back struct {
	AgentHandleRate         *float32 `json:"AgentHandleRate,omitempty" xml:"AgentHandleRate,omitempty"`
	AnswerRate              *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	AverageCustomerRingTime *float32 `json:"AverageCustomerRingTime,omitempty" xml:"AverageCustomerRingTime,omitempty"`
	AverageRingTime         *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	AverageTalkTime         *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	CallsAgentHandled       *int64   `json:"CallsAgentHandled,omitempty" xml:"CallsAgentHandled,omitempty"`
	CallsAnswered           *int64   `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsCustomerAnswered   *int64   `json:"CallsCustomerAnswered,omitempty" xml:"CallsCustomerAnswered,omitempty"`
	CallsDialed             *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	CustomerAnswerRate      *float32 `json:"CustomerAnswerRate,omitempty" xml:"CustomerAnswerRate,omitempty"`
	MaxCustomerRingTime     *int64   `json:"MaxCustomerRingTime,omitempty" xml:"MaxCustomerRingTime,omitempty"`
	MaxRingTime             *int64   `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	MaxTalkTime             *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	TotalCustomerRingTime   *int64   `json:"TotalCustomerRingTime,omitempty" xml:"TotalCustomerRingTime,omitempty"`
	TotalRingTime           *int64   `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	TotalTalkTime           *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
}

func (s ListIntervalAgentReportResponseBodyDataBack2Back) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentReportResponseBodyDataBack2Back) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentReportResponseBodyDataBack2Back) SetAgentHandleRate(v float32) *ListIntervalAgentReportResponseBodyDataBack2Back {
	s.AgentHandleRate = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataBack2Back) SetAnswerRate(v float32) *ListIntervalAgentReportResponseBodyDataBack2Back {
	s.AnswerRate = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataBack2Back) SetAverageCustomerRingTime(v float32) *ListIntervalAgentReportResponseBodyDataBack2Back {
	s.AverageCustomerRingTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataBack2Back) SetAverageRingTime(v float32) *ListIntervalAgentReportResponseBodyDataBack2Back {
	s.AverageRingTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataBack2Back) SetAverageTalkTime(v float32) *ListIntervalAgentReportResponseBodyDataBack2Back {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataBack2Back) SetCallsAgentHandled(v int64) *ListIntervalAgentReportResponseBodyDataBack2Back {
	s.CallsAgentHandled = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataBack2Back) SetCallsAnswered(v int64) *ListIntervalAgentReportResponseBodyDataBack2Back {
	s.CallsAnswered = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataBack2Back) SetCallsCustomerAnswered(v int64) *ListIntervalAgentReportResponseBodyDataBack2Back {
	s.CallsCustomerAnswered = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataBack2Back) SetCallsDialed(v int64) *ListIntervalAgentReportResponseBodyDataBack2Back {
	s.CallsDialed = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataBack2Back) SetCustomerAnswerRate(v float32) *ListIntervalAgentReportResponseBodyDataBack2Back {
	s.CustomerAnswerRate = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataBack2Back) SetMaxCustomerRingTime(v int64) *ListIntervalAgentReportResponseBodyDataBack2Back {
	s.MaxCustomerRingTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataBack2Back) SetMaxRingTime(v int64) *ListIntervalAgentReportResponseBodyDataBack2Back {
	s.MaxRingTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataBack2Back) SetMaxTalkTime(v int64) *ListIntervalAgentReportResponseBodyDataBack2Back {
	s.MaxTalkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataBack2Back) SetTotalCustomerRingTime(v int64) *ListIntervalAgentReportResponseBodyDataBack2Back {
	s.TotalCustomerRingTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataBack2Back) SetTotalRingTime(v int64) *ListIntervalAgentReportResponseBodyDataBack2Back {
	s.TotalRingTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataBack2Back) SetTotalTalkTime(v int64) *ListIntervalAgentReportResponseBodyDataBack2Back {
	s.TotalTalkTime = &v
	return s
}

type ListIntervalAgentReportResponseBodyDataInbound struct {
	AccessChannelTypeDetails []*ListIntervalAgentReportResponseBodyDataInboundAccessChannelTypeDetails `json:"AccessChannelTypeDetails,omitempty" xml:"AccessChannelTypeDetails,omitempty" type:"Repeated"`
	AverageFirstResponseTime *float32                                                                  `json:"AverageFirstResponseTime,omitempty" xml:"AverageFirstResponseTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime     *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	AverageResponseTime *float32 `json:"AverageResponseTime,omitempty" xml:"AverageResponseTime,omitempty"`
	// example:
	//
	// 0
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 0
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferIn *int64 `json:"CallsAttendedTransferIn,omitempty" xml:"CallsAttendedTransferIn,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferOut *int64 `json:"CallsAttendedTransferOut,omitempty" xml:"CallsAttendedTransferOut,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferIn *int64 `json:"CallsBlindTransferIn,omitempty" xml:"CallsBlindTransferIn,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferOut *int64 `json:"CallsBlindTransferOut,omitempty" xml:"CallsBlindTransferOut,omitempty"`
	// example:
	//
	// 0
	CallsHandled *int64 `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	// example:
	//
	// 0
	CallsHold *int64 `json:"CallsHold,omitempty" xml:"CallsHold,omitempty"`
	// example:
	//
	// 0
	CallsOffered *int64 `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	// example:
	//
	// 0
	CallsRinged *int64 `json:"CallsRinged,omitempty" xml:"CallsRinged,omitempty"`
	// example:
	//
	// 0
	HandleRate *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 0
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 0
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	ServiceLevel15               *float32 `json:"ServiceLevel15,omitempty" xml:"ServiceLevel15,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime               *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	TotalMessagesSent           *int64 `json:"TotalMessagesSent,omitempty" xml:"TotalMessagesSent,omitempty"`
	TotalMessagesSentByAgent    *int64 `json:"TotalMessagesSentByAgent,omitempty" xml:"TotalMessagesSentByAgent,omitempty"`
	TotalMessagesSentByCustomer *int64 `json:"TotalMessagesSentByCustomer,omitempty" xml:"TotalMessagesSentByCustomer,omitempty"`
	// example:
	//
	// 0
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 0
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListIntervalAgentReportResponseBodyDataInbound) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentReportResponseBodyDataInbound) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetAccessChannelTypeDetails(v []*ListIntervalAgentReportResponseBodyDataInboundAccessChannelTypeDetails) *ListIntervalAgentReportResponseBodyDataInbound {
	s.AccessChannelTypeDetails = v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetAverageFirstResponseTime(v float32) *ListIntervalAgentReportResponseBodyDataInbound {
	s.AverageFirstResponseTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetAverageHoldTime(v float32) *ListIntervalAgentReportResponseBodyDataInbound {
	s.AverageHoldTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetAverageResponseTime(v float32) *ListIntervalAgentReportResponseBodyDataInbound {
	s.AverageResponseTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetAverageRingTime(v float32) *ListIntervalAgentReportResponseBodyDataInbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetAverageTalkTime(v float32) *ListIntervalAgentReportResponseBodyDataInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetAverageWorkTime(v float32) *ListIntervalAgentReportResponseBodyDataInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetCallsAttendedTransferIn(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.CallsAttendedTransferIn = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetCallsAttendedTransferOut(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.CallsAttendedTransferOut = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetCallsBlindTransferIn(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.CallsBlindTransferIn = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetCallsBlindTransferOut(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.CallsBlindTransferOut = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetCallsHandled(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.CallsHandled = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetCallsHold(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.CallsHold = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetCallsOffered(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.CallsOffered = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetCallsRinged(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.CallsRinged = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetHandleRate(v float32) *ListIntervalAgentReportResponseBodyDataInbound {
	s.HandleRate = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetMaxHoldTime(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.MaxHoldTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetMaxRingTime(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetMaxTalkTime(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetMaxWorkTime(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetSatisfactionIndex(v float32) *ListIntervalAgentReportResponseBodyDataInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetSatisfactionRate(v float32) *ListIntervalAgentReportResponseBodyDataInbound {
	s.SatisfactionRate = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetSatisfactionSurveysOffered(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetSatisfactionSurveysResponded(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetServiceLevel15(v float32) *ListIntervalAgentReportResponseBodyDataInbound {
	s.ServiceLevel15 = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetTotalHoldTime(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.TotalHoldTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetTotalMessagesSent(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.TotalMessagesSent = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetTotalMessagesSentByAgent(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.TotalMessagesSentByAgent = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetTotalMessagesSentByCustomer(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.TotalMessagesSentByCustomer = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetTotalRingTime(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetTotalTalkTime(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInbound) SetTotalWorkTime(v int64) *ListIntervalAgentReportResponseBodyDataInbound {
	s.TotalWorkTime = &v
	return s
}

type ListIntervalAgentReportResponseBodyDataInboundAccessChannelTypeDetails struct {
	AccessChannelType *string `json:"AccessChannelType,omitempty" xml:"AccessChannelType,omitempty"`
	CallsOffered      *int64  `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
}

func (s ListIntervalAgentReportResponseBodyDataInboundAccessChannelTypeDetails) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentReportResponseBodyDataInboundAccessChannelTypeDetails) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentReportResponseBodyDataInboundAccessChannelTypeDetails) SetAccessChannelType(v string) *ListIntervalAgentReportResponseBodyDataInboundAccessChannelTypeDetails {
	s.AccessChannelType = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInboundAccessChannelTypeDetails) SetCallsOffered(v int64) *ListIntervalAgentReportResponseBodyDataInboundAccessChannelTypeDetails {
	s.CallsOffered = &v
	return s
}

type ListIntervalAgentReportResponseBodyDataInternal struct {
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	CallsAnswered   *int64   `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsDialed     *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	CallsHandled    *int64   `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	CallsOffered    *int64   `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	CallsTalked     *int64   `json:"CallsTalked,omitempty" xml:"CallsTalked,omitempty"`
}

func (s ListIntervalAgentReportResponseBodyDataInternal) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentReportResponseBodyDataInternal) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentReportResponseBodyDataInternal) SetAverageTalkTime(v float32) *ListIntervalAgentReportResponseBodyDataInternal {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInternal) SetCallsAnswered(v int64) *ListIntervalAgentReportResponseBodyDataInternal {
	s.CallsAnswered = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInternal) SetCallsDialed(v int64) *ListIntervalAgentReportResponseBodyDataInternal {
	s.CallsDialed = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInternal) SetCallsHandled(v int64) *ListIntervalAgentReportResponseBodyDataInternal {
	s.CallsHandled = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInternal) SetCallsOffered(v int64) *ListIntervalAgentReportResponseBodyDataInternal {
	s.CallsOffered = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataInternal) SetCallsTalked(v int64) *ListIntervalAgentReportResponseBodyDataInternal {
	s.CallsTalked = &v
	return s
}

type ListIntervalAgentReportResponseBodyDataOutbound struct {
	// example:
	//
	// 0
	AnswerRate *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	// example:
	//
	// 30
	AverageDialingTime *float32 `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	// example:
	//
	// 0
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 1
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 0
	CallsAnswered *int64 `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferIn *int64 `json:"CallsAttendedTransferIn,omitempty" xml:"CallsAttendedTransferIn,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferOut *int64 `json:"CallsAttendedTransferOut,omitempty" xml:"CallsAttendedTransferOut,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferIn *int64 `json:"CallsBlindTransferIn,omitempty" xml:"CallsBlindTransferIn,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferOut *int64 `json:"CallsBlindTransferOut,omitempty" xml:"CallsBlindTransferOut,omitempty"`
	// example:
	//
	// 5
	CallsDialed *int64 `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	// example:
	//
	// 0
	CallsHold *int64 `json:"CallsHold,omitempty" xml:"CallsHold,omitempty"`
	// example:
	//
	// 0
	CallsRinged *int64 `json:"CallsRinged,omitempty" xml:"CallsRinged,omitempty"`
	// example:
	//
	// 60
	MaxDialingTime *int64 `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 0
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 2
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 148
	TotalDialingTime *int64 `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	// example:
	//
	// 0
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 4
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListIntervalAgentReportResponseBodyDataOutbound) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentReportResponseBodyDataOutbound) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetAnswerRate(v float32) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.AnswerRate = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetAverageDialingTime(v float32) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetAverageHoldTime(v float32) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.AverageHoldTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetAverageRingTime(v float32) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetAverageTalkTime(v float32) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetAverageWorkTime(v float32) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetCallsAnswered(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetCallsAttendedTransferIn(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.CallsAttendedTransferIn = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetCallsAttendedTransferOut(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.CallsAttendedTransferOut = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetCallsBlindTransferIn(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.CallsBlindTransferIn = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetCallsBlindTransferOut(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.CallsBlindTransferOut = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetCallsDialed(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.CallsDialed = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetCallsHold(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.CallsHold = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetCallsRinged(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.CallsRinged = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetMaxDialingTime(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetMaxHoldTime(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.MaxHoldTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetMaxRingTime(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetMaxTalkTime(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetMaxWorkTime(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetSatisfactionIndex(v float32) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetSatisfactionRate(v float32) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.SatisfactionRate = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetSatisfactionSurveysOffered(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetSatisfactionSurveysResponded(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetTotalDialingTime(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetTotalHoldTime(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.TotalHoldTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetTotalRingTime(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetTotalTalkTime(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOutbound) SetTotalWorkTime(v int64) *ListIntervalAgentReportResponseBodyDataOutbound {
	s.TotalWorkTime = &v
	return s
}

type ListIntervalAgentReportResponseBodyDataOverall struct {
	// example:
	//
	// 0
	AverageBreakTime *float32 `json:"AverageBreakTime,omitempty" xml:"AverageBreakTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	// example:
	//
	// 0
	AverageReadyTime *float32 `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 1
	AverageWorkTime     *float32                                                             `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	BreakCodeDetailList []*ListIntervalAgentReportResponseBodyDataOverallBreakCodeDetailList `json:"BreakCodeDetailList,omitempty" xml:"BreakCodeDetailList,omitempty" type:"Repeated"`
	// example:
	//
	// 0
	FirstCheckInTime *int64 `json:"FirstCheckInTime,omitempty" xml:"FirstCheckInTime,omitempty"`
	LastCheckOutTime *int64 `json:"LastCheckOutTime,omitempty" xml:"LastCheckOutTime,omitempty"`
	// example:
	//
	// 0
	LastCheckoutTime *int64 `json:"LastCheckoutTime,omitempty" xml:"LastCheckoutTime,omitempty"`
	// example:
	//
	// 1
	MaxBreakTime *int64 `json:"MaxBreakTime,omitempty" xml:"MaxBreakTime,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 435
	MaxReadyTime *int64 `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 2
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	OccupancyRate *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 1
	TotalBreakTime *int64 `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	// example:
	//
	// 5
	TotalCalls *int64 `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	// example:
	//
	// 914
	TotalLoggedInTime        *int64 `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	TotalOffSiteLoggedInTime *int64 `json:"TotalOffSiteLoggedInTime,omitempty" xml:"TotalOffSiteLoggedInTime,omitempty"`
	// example:
	//
	// 已弃用，请使用TotalOffSiteLoggedInTime代替此参数
	TotalOffSiteOnlineTime       *int64 `json:"TotalOffSiteOnlineTime,omitempty" xml:"TotalOffSiteOnlineTime,omitempty"`
	TotalOfficePhoneLoggedInTime *int64 `json:"TotalOfficePhoneLoggedInTime,omitempty" xml:"TotalOfficePhoneLoggedInTime,omitempty"`
	// example:
	//
	// 已弃用，请使用TotalOfficePhoneLoggedInTime代替此参数
	TotalOfficePhoneOnlineTime *int64 `json:"TotalOfficePhoneOnlineTime,omitempty" xml:"TotalOfficePhoneOnlineTime,omitempty"`
	TotalOnSiteLoggedInTime    *int64 `json:"TotalOnSiteLoggedInTime,omitempty" xml:"TotalOnSiteLoggedInTime,omitempty"`
	// example:
	//
	// 已弃用，请使用TotalOnSiteLoggedInTime代替此参数
	TotalOnSiteOnlineTime             *int64 `json:"TotalOnSiteOnlineTime,omitempty" xml:"TotalOnSiteOnlineTime,omitempty"`
	TotalOutboundScenarioLoggedInTime *int64 `json:"TotalOutboundScenarioLoggedInTime,omitempty" xml:"TotalOutboundScenarioLoggedInTime,omitempty"`
	TotalOutboundScenarioReadyTime    *int64 `json:"TotalOutboundScenarioReadyTime,omitempty" xml:"TotalOutboundScenarioReadyTime,omitempty"`
	// example:
	//
	// 已弃用，请使用TotalOutboundScenarioLoggedInTime代替此参数
	TotalOutboundScenarioTime *int64 `json:"TotalOutboundScenarioTime,omitempty" xml:"TotalOutboundScenarioTime,omitempty"`
	// example:
	//
	// 763
	TotalReadyTime *int64 `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 4
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListIntervalAgentReportResponseBodyDataOverall) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentReportResponseBodyDataOverall) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetAverageBreakTime(v float32) *ListIntervalAgentReportResponseBodyDataOverall {
	s.AverageBreakTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetAverageHoldTime(v float32) *ListIntervalAgentReportResponseBodyDataOverall {
	s.AverageHoldTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetAverageReadyTime(v float32) *ListIntervalAgentReportResponseBodyDataOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetAverageTalkTime(v float32) *ListIntervalAgentReportResponseBodyDataOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetAverageWorkTime(v float32) *ListIntervalAgentReportResponseBodyDataOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetBreakCodeDetailList(v []*ListIntervalAgentReportResponseBodyDataOverallBreakCodeDetailList) *ListIntervalAgentReportResponseBodyDataOverall {
	s.BreakCodeDetailList = v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetFirstCheckInTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.FirstCheckInTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetLastCheckOutTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.LastCheckOutTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetLastCheckoutTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.LastCheckoutTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetMaxBreakTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.MaxBreakTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetMaxHoldTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.MaxHoldTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetMaxReadyTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetMaxTalkTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetMaxWorkTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetOccupancyRate(v float32) *ListIntervalAgentReportResponseBodyDataOverall {
	s.OccupancyRate = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetSatisfactionIndex(v float32) *ListIntervalAgentReportResponseBodyDataOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetSatisfactionRate(v float32) *ListIntervalAgentReportResponseBodyDataOverall {
	s.SatisfactionRate = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetSatisfactionSurveysOffered(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetSatisfactionSurveysResponded(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetTotalBreakTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetTotalCalls(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.TotalCalls = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetTotalHoldTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.TotalHoldTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetTotalLoggedInTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetTotalOffSiteLoggedInTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.TotalOffSiteLoggedInTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetTotalOffSiteOnlineTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.TotalOffSiteOnlineTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetTotalOfficePhoneLoggedInTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.TotalOfficePhoneLoggedInTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetTotalOfficePhoneOnlineTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.TotalOfficePhoneOnlineTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetTotalOnSiteLoggedInTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.TotalOnSiteLoggedInTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetTotalOnSiteOnlineTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.TotalOnSiteOnlineTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetTotalOutboundScenarioLoggedInTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.TotalOutboundScenarioLoggedInTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetTotalOutboundScenarioReadyTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.TotalOutboundScenarioReadyTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetTotalOutboundScenarioTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.TotalOutboundScenarioTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetTotalReadyTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetTotalTalkTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverall) SetTotalWorkTime(v int64) *ListIntervalAgentReportResponseBodyDataOverall {
	s.TotalWorkTime = &v
	return s
}

type ListIntervalAgentReportResponseBodyDataOverallBreakCodeDetailList struct {
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	Count     *int64  `json:"Count,omitempty" xml:"Count,omitempty"`
	Duration  *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s ListIntervalAgentReportResponseBodyDataOverallBreakCodeDetailList) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentReportResponseBodyDataOverallBreakCodeDetailList) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentReportResponseBodyDataOverallBreakCodeDetailList) SetBreakCode(v string) *ListIntervalAgentReportResponseBodyDataOverallBreakCodeDetailList {
	s.BreakCode = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverallBreakCodeDetailList) SetCount(v int64) *ListIntervalAgentReportResponseBodyDataOverallBreakCodeDetailList {
	s.Count = &v
	return s
}

func (s *ListIntervalAgentReportResponseBodyDataOverallBreakCodeDetailList) SetDuration(v int64) *ListIntervalAgentReportResponseBodyDataOverallBreakCodeDetailList {
	s.Duration = &v
	return s
}

type ListIntervalAgentReportResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListIntervalAgentReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListIntervalAgentReportResponse) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentReportResponse) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentReportResponse) SetHeaders(v map[string]*string) *ListIntervalAgentReportResponse {
	s.Headers = v
	return s
}

func (s *ListIntervalAgentReportResponse) SetStatusCode(v int32) *ListIntervalAgentReportResponse {
	s.StatusCode = &v
	return s
}

func (s *ListIntervalAgentReportResponse) SetBody(v *ListIntervalAgentReportResponseBody) *ListIntervalAgentReportResponse {
	s.Body = v
	return s
}

type ListIntervalAgentSkillGroupReportRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// agent@ccc-test
	AgentId *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	// example:
	//
	// 1558443508000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// Daily
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// skg-default@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1532448000000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListIntervalAgentSkillGroupReportRequest) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentSkillGroupReportRequest) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentSkillGroupReportRequest) SetAgentId(v string) *ListIntervalAgentSkillGroupReportRequest {
	s.AgentId = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportRequest) SetEndTime(v int64) *ListIntervalAgentSkillGroupReportRequest {
	s.EndTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportRequest) SetInstanceId(v string) *ListIntervalAgentSkillGroupReportRequest {
	s.InstanceId = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportRequest) SetInterval(v string) *ListIntervalAgentSkillGroupReportRequest {
	s.Interval = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportRequest) SetSkillGroupId(v string) *ListIntervalAgentSkillGroupReportRequest {
	s.SkillGroupId = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportRequest) SetStartTime(v int64) *ListIntervalAgentSkillGroupReportRequest {
	s.StartTime = &v
	return s
}

type ListIntervalAgentSkillGroupReportResponseBody struct {
	// example:
	//
	// OK
	Code *string                                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListIntervalAgentSkillGroupReportResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2778FA12-EDD6-42AA-9B15-AF855072E5E5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListIntervalAgentSkillGroupReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentSkillGroupReportResponseBody) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentSkillGroupReportResponseBody) SetCode(v string) *ListIntervalAgentSkillGroupReportResponseBody {
	s.Code = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBody) SetData(v []*ListIntervalAgentSkillGroupReportResponseBodyData) *ListIntervalAgentSkillGroupReportResponseBody {
	s.Data = v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBody) SetHttpStatusCode(v int32) *ListIntervalAgentSkillGroupReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBody) SetMessage(v string) *ListIntervalAgentSkillGroupReportResponseBody {
	s.Message = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBody) SetRequestId(v string) *ListIntervalAgentSkillGroupReportResponseBody {
	s.RequestId = &v
	return s
}

type ListIntervalAgentSkillGroupReportResponseBodyData struct {
	Back2Back *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back `json:"Back2Back,omitempty" xml:"Back2Back,omitempty" type:"Struct"`
	Inbound   *ListIntervalAgentSkillGroupReportResponseBodyDataInbound   `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	Internal  *ListIntervalAgentSkillGroupReportResponseBodyDataInternal  `json:"Internal,omitempty" xml:"Internal,omitempty" type:"Struct"`
	Outbound  *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound  `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall   *ListIntervalAgentSkillGroupReportResponseBodyDataOverall   `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	// example:
	//
	// 1620291600000
	StatsTime *int64 `json:"StatsTime,omitempty" xml:"StatsTime,omitempty"`
}

func (s ListIntervalAgentSkillGroupReportResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentSkillGroupReportResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyData) SetBack2Back(v *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) *ListIntervalAgentSkillGroupReportResponseBodyData {
	s.Back2Back = v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyData) SetInbound(v *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) *ListIntervalAgentSkillGroupReportResponseBodyData {
	s.Inbound = v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyData) SetInternal(v *ListIntervalAgentSkillGroupReportResponseBodyDataInternal) *ListIntervalAgentSkillGroupReportResponseBodyData {
	s.Internal = v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyData) SetOutbound(v *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) *ListIntervalAgentSkillGroupReportResponseBodyData {
	s.Outbound = v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyData) SetOverall(v *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) *ListIntervalAgentSkillGroupReportResponseBodyData {
	s.Overall = v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyData) SetStatsTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyData {
	s.StatsTime = &v
	return s
}

type ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back struct {
	// example:
	//
	// 100
	AgentAnswerRate *float32 `json:"AgentAnswerRate,omitempty" xml:"AgentAnswerRate,omitempty"`
	AgentHandleRate *float32 `json:"AgentHandleRate,omitempty" xml:"AgentHandleRate,omitempty"`
	// example:
	//
	// 0.5
	AnswerRate *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	// example:
	//
	// 100
	AverageCustomerRingTime *float32 `json:"AverageCustomerRingTime,omitempty" xml:"AverageCustomerRingTime,omitempty"`
	// example:
	//
	// 100
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 100
	AverageTalkTime   *int64 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	CallsAgentHandled *int64 `json:"CallsAgentHandled,omitempty" xml:"CallsAgentHandled,omitempty"`
	// example:
	//
	// 100
	CallsAnswered         *int64 `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsCustomerAnswered *int64 `json:"CallsCustomerAnswered,omitempty" xml:"CallsCustomerAnswered,omitempty"`
	// example:
	//
	// 100
	CallsCustomerHandled *int64 `json:"CallsCustomerHandled,omitempty" xml:"CallsCustomerHandled,omitempty"`
	// example:
	//
	// 100
	CallsDialed        *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	CustomerAnswerRate *float32 `json:"CustomerAnswerRate,omitempty" xml:"CustomerAnswerRate,omitempty"`
	// example:
	//
	// 100
	CustomerHandleRate *float32 `json:"CustomerHandleRate,omitempty" xml:"CustomerHandleRate,omitempty"`
	// example:
	//
	// 100
	MaxCustomerRingTime *int64 `json:"MaxCustomerRingTime,omitempty" xml:"MaxCustomerRingTime,omitempty"`
	// example:
	//
	// 100
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 100
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 100
	TotalCustomerRingTime *int64 `json:"TotalCustomerRingTime,omitempty" xml:"TotalCustomerRingTime,omitempty"`
	// example:
	//
	// 100
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 100
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
}

func (s ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetAgentAnswerRate(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.AgentAnswerRate = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetAgentHandleRate(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.AgentHandleRate = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetAnswerRate(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.AnswerRate = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetAverageCustomerRingTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.AverageCustomerRingTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetAverageRingTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.AverageRingTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetAverageTalkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetCallsAgentHandled(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.CallsAgentHandled = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetCallsAnswered(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.CallsAnswered = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetCallsCustomerAnswered(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.CallsCustomerAnswered = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetCallsCustomerHandled(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.CallsCustomerHandled = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetCallsDialed(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.CallsDialed = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetCustomerAnswerRate(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.CustomerAnswerRate = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetCustomerHandleRate(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.CustomerHandleRate = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetMaxCustomerRingTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.MaxCustomerRingTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetMaxRingTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.MaxRingTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetMaxTalkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.MaxTalkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetTotalCustomerRingTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.TotalCustomerRingTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetTotalRingTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.TotalRingTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back) SetTotalTalkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataBack2Back {
	s.TotalTalkTime = &v
	return s
}

type ListIntervalAgentSkillGroupReportResponseBodyDataInbound struct {
	AverageFirstResponseTime *float32 `json:"AverageFirstResponseTime,omitempty" xml:"AverageFirstResponseTime,omitempty"`
	// example:
	//
	// 100
	AverageHoldTime     *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	AverageResponseTime *float32 `json:"AverageResponseTime,omitempty" xml:"AverageResponseTime,omitempty"`
	// example:
	//
	// 11
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 100
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 100
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 100
	CallsAttendedTransferIn *int64 `json:"CallsAttendedTransferIn,omitempty" xml:"CallsAttendedTransferIn,omitempty"`
	// example:
	//
	// 10
	CallsAttendedTransferOut *int64 `json:"CallsAttendedTransferOut,omitempty" xml:"CallsAttendedTransferOut,omitempty"`
	// example:
	//
	// 100
	CallsBlindTransferIn *int64 `json:"CallsBlindTransferIn,omitempty" xml:"CallsBlindTransferIn,omitempty"`
	// example:
	//
	// 100
	CallsBlindTransferOut *int64 `json:"CallsBlindTransferOut,omitempty" xml:"CallsBlindTransferOut,omitempty"`
	// example:
	//
	// 7
	CallsHandled *int64 `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	// example:
	//
	// 100
	CallsHold *int64 `json:"CallsHold,omitempty" xml:"CallsHold,omitempty"`
	// example:
	//
	// 100
	CallsOffered *int64 `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	// example:
	//
	// 100
	CallsRinged *int64 `json:"CallsRinged,omitempty" xml:"CallsRinged,omitempty"`
	// example:
	//
	// 0.5
	HandleRate *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	// example:
	//
	// 100
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 100
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 100
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 100
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 100
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0.5
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 100
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 100
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 100
	TotalHoldTime               *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	TotalMessagesSent           *int64 `json:"TotalMessagesSent,omitempty" xml:"TotalMessagesSent,omitempty"`
	TotalMessagesSentByAgent    *int64 `json:"TotalMessagesSentByAgent,omitempty" xml:"TotalMessagesSentByAgent,omitempty"`
	TotalMessagesSentByCustomer *int64 `json:"TotalMessagesSentByCustomer,omitempty" xml:"TotalMessagesSentByCustomer,omitempty"`
	// example:
	//
	// 100
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 100
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 85
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListIntervalAgentSkillGroupReportResponseBodyDataInbound) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentSkillGroupReportResponseBodyDataInbound) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetAverageFirstResponseTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.AverageFirstResponseTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetAverageHoldTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.AverageHoldTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetAverageResponseTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.AverageResponseTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetAverageRingTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetAverageTalkTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetAverageWorkTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetCallsAttendedTransferIn(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.CallsAttendedTransferIn = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetCallsAttendedTransferOut(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.CallsAttendedTransferOut = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetCallsBlindTransferIn(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.CallsBlindTransferIn = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetCallsBlindTransferOut(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.CallsBlindTransferOut = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetCallsHandled(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.CallsHandled = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetCallsHold(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.CallsHold = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetCallsOffered(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.CallsOffered = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetCallsRinged(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.CallsRinged = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetHandleRate(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.HandleRate = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetMaxHoldTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.MaxHoldTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetMaxRingTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetMaxTalkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetMaxWorkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetSatisfactionIndex(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetSatisfactionRate(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.SatisfactionRate = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetSatisfactionSurveysOffered(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetSatisfactionSurveysResponded(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetTotalHoldTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.TotalHoldTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetTotalMessagesSent(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.TotalMessagesSent = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetTotalMessagesSentByAgent(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.TotalMessagesSentByAgent = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetTotalMessagesSentByCustomer(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.TotalMessagesSentByCustomer = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetTotalRingTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetTotalTalkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInbound) SetTotalWorkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInbound {
	s.TotalWorkTime = &v
	return s
}

type ListIntervalAgentSkillGroupReportResponseBodyDataInternal struct {
	// example:
	//
	// 100
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 100
	CallsAnswered *int64 `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	// example:
	//
	// 100
	CallsDialed *int64 `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	// example:
	//
	// 100
	CallsHandled *int64 `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	// example:
	//
	// 100
	CallsOffered *int64 `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	// example:
	//
	// 100
	CallsTalk   *int64 `json:"CallsTalk,omitempty" xml:"CallsTalk,omitempty"`
	CallsTalked *int64 `json:"CallsTalked,omitempty" xml:"CallsTalked,omitempty"`
	// example:
	//
	// 100
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 100
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
}

func (s ListIntervalAgentSkillGroupReportResponseBodyDataInternal) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentSkillGroupReportResponseBodyDataInternal) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInternal) SetAverageTalkTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataInternal {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInternal) SetCallsAnswered(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInternal {
	s.CallsAnswered = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInternal) SetCallsDialed(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInternal {
	s.CallsDialed = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInternal) SetCallsHandled(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInternal {
	s.CallsHandled = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInternal) SetCallsOffered(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInternal {
	s.CallsOffered = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInternal) SetCallsTalk(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInternal {
	s.CallsTalk = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInternal) SetCallsTalked(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInternal {
	s.CallsTalked = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInternal) SetMaxTalkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInternal {
	s.MaxTalkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataInternal) SetTotalTalkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataInternal {
	s.TotalTalkTime = &v
	return s
}

type ListIntervalAgentSkillGroupReportResponseBodyDataOutbound struct {
	// example:
	//
	// 0.5
	AnswerRate *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	// example:
	//
	// 100
	AverageDialingTime *float32 `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	// example:
	//
	// 100
	AverageHoldTime *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	// example:
	//
	// 100
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 100
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 100
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 100
	CallsAnswered *int64 `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	// example:
	//
	// 100
	CallsAttendedTransferIn *int64 `json:"CallsAttendedTransferIn,omitempty" xml:"CallsAttendedTransferIn,omitempty"`
	// example:
	//
	// 100
	CallsAttendedTransferOut *int64 `json:"CallsAttendedTransferOut,omitempty" xml:"CallsAttendedTransferOut,omitempty"`
	// example:
	//
	// 100
	CallsBlindTransferIn *int64 `json:"CallsBlindTransferIn,omitempty" xml:"CallsBlindTransferIn,omitempty"`
	// example:
	//
	// 100
	CallsBlindTransferOut *int64 `json:"CallsBlindTransferOut,omitempty" xml:"CallsBlindTransferOut,omitempty"`
	// example:
	//
	// 100
	CallsDialed *int64 `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	// example:
	//
	// 100
	CallsHold *int64 `json:"CallsHold,omitempty" xml:"CallsHold,omitempty"`
	// example:
	//
	// 100
	CallsRinged *int64 `json:"CallsRinged,omitempty" xml:"CallsRinged,omitempty"`
	// example:
	//
	// 100
	MaxDialingTime *int64 `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	// example:
	//
	// 100
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 100
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 100
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 100
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 100
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 100
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 100
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 100
	TotalDialingTime *int64 `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	// example:
	//
	// 100
	TotalHoldTime *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	// example:
	//
	// 100
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 100
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 100
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetAnswerRate(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.AnswerRate = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetAverageDialingTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetAverageHoldTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.AverageHoldTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetAverageRingTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetAverageTalkTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetAverageWorkTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetCallsAnswered(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetCallsAttendedTransferIn(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.CallsAttendedTransferIn = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetCallsAttendedTransferOut(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.CallsAttendedTransferOut = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetCallsBlindTransferIn(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.CallsBlindTransferIn = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetCallsBlindTransferOut(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.CallsBlindTransferOut = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetCallsDialed(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.CallsDialed = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetCallsHold(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.CallsHold = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetCallsRinged(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.CallsRinged = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetMaxDialingTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetMaxHoldTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.MaxHoldTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetMaxRingTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetMaxTalkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetMaxWorkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetSatisfactionIndex(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetSatisfactionRate(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.SatisfactionRate = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetSatisfactionSurveysOffered(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetSatisfactionSurveysResponded(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetTotalDialingTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetTotalHoldTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.TotalHoldTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetTotalRingTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetTotalTalkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound) SetTotalWorkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOutbound {
	s.TotalWorkTime = &v
	return s
}

type ListIntervalAgentSkillGroupReportResponseBodyDataOverall struct {
	// example:
	//
	// 100
	AverageBreakTime *float32 `json:"AverageBreakTime,omitempty" xml:"AverageBreakTime,omitempty"`
	// example:
	//
	// 100
	AverageHoldTime *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	// example:
	//
	// 100
	AverageReadyTime *float32 `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	// example:
	//
	// 100
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 100
	AverageWorkTime     *float32                                                                       `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	BreakCodeDetailList []*ListIntervalAgentSkillGroupReportResponseBodyDataOverallBreakCodeDetailList `json:"BreakCodeDetailList,omitempty" xml:"BreakCodeDetailList,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	FirstCheckInTime *int64 `json:"FirstCheckInTime,omitempty" xml:"FirstCheckInTime,omitempty"`
	LastCheckOutTime *int64 `json:"LastCheckOutTime,omitempty" xml:"LastCheckOutTime,omitempty"`
	// example:
	//
	// 100
	LastCheckoutTime *int64 `json:"LastCheckoutTime,omitempty" xml:"LastCheckoutTime,omitempty"`
	// example:
	//
	// 100
	MaxBreakTime *int64 `json:"MaxBreakTime,omitempty" xml:"MaxBreakTime,omitempty"`
	// example:
	//
	// 100
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 100
	MaxReadyTime *int64 `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	// example:
	//
	// 100
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 100
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0.4
	OccupancyRate *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	// example:
	//
	// 1.4
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 100
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 100
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 100
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 100
	TotalBreakTime *int64 `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	// example:
	//
	// 100
	TotalCalls *int64 `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	// example:
	//
	// 100
	TotalHoldTime *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	// example:
	//
	// 100
	TotalLoggedInTime                 *int64  `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	TotalOffSiteLoggedInTime          *string `json:"TotalOffSiteLoggedInTime,omitempty" xml:"TotalOffSiteLoggedInTime,omitempty"`
	TotalOfficePhoneLoggedInTime      *string `json:"TotalOfficePhoneLoggedInTime,omitempty" xml:"TotalOfficePhoneLoggedInTime,omitempty"`
	TotalOnSiteLoggedInTime           *string `json:"TotalOnSiteLoggedInTime,omitempty" xml:"TotalOnSiteLoggedInTime,omitempty"`
	TotalOutboundScenarioLoggedInTime *int64  `json:"TotalOutboundScenarioLoggedInTime,omitempty" xml:"TotalOutboundScenarioLoggedInTime,omitempty"`
	// example:
	//
	// 100
	TotalOutboundScenarioReadyTime *int64 `json:"TotalOutboundScenarioReadyTime,omitempty" xml:"TotalOutboundScenarioReadyTime,omitempty"`
	// example:
	//
	// 100
	TotalOutboundScenarioTime *int64 `json:"TotalOutboundScenarioTime,omitempty" xml:"TotalOutboundScenarioTime,omitempty"`
	// example:
	//
	// 100
	TotalReadyTime *int64 `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	// example:
	//
	// 100
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 100
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListIntervalAgentSkillGroupReportResponseBodyDataOverall) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentSkillGroupReportResponseBodyDataOverall) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetAverageBreakTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.AverageBreakTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetAverageHoldTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.AverageHoldTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetAverageReadyTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetAverageTalkTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetAverageWorkTime(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetBreakCodeDetailList(v []*ListIntervalAgentSkillGroupReportResponseBodyDataOverallBreakCodeDetailList) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.BreakCodeDetailList = v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetFirstCheckInTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.FirstCheckInTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetLastCheckOutTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.LastCheckOutTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetLastCheckoutTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.LastCheckoutTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetMaxBreakTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.MaxBreakTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetMaxHoldTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.MaxHoldTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetMaxReadyTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetMaxTalkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetMaxWorkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetOccupancyRate(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.OccupancyRate = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetSatisfactionIndex(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetSatisfactionRate(v float32) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.SatisfactionRate = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetSatisfactionSurveysOffered(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetSatisfactionSurveysResponded(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetTotalBreakTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetTotalCalls(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.TotalCalls = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetTotalHoldTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.TotalHoldTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetTotalLoggedInTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetTotalOffSiteLoggedInTime(v string) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.TotalOffSiteLoggedInTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetTotalOfficePhoneLoggedInTime(v string) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.TotalOfficePhoneLoggedInTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetTotalOnSiteLoggedInTime(v string) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.TotalOnSiteLoggedInTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetTotalOutboundScenarioLoggedInTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.TotalOutboundScenarioLoggedInTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetTotalOutboundScenarioReadyTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.TotalOutboundScenarioReadyTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetTotalOutboundScenarioTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.TotalOutboundScenarioTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetTotalReadyTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetTotalTalkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverall) SetTotalWorkTime(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverall {
	s.TotalWorkTime = &v
	return s
}

type ListIntervalAgentSkillGroupReportResponseBodyDataOverallBreakCodeDetailList struct {
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// 1
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// example:
	//
	// 100
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s ListIntervalAgentSkillGroupReportResponseBodyDataOverallBreakCodeDetailList) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentSkillGroupReportResponseBodyDataOverallBreakCodeDetailList) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverallBreakCodeDetailList) SetBreakCode(v string) *ListIntervalAgentSkillGroupReportResponseBodyDataOverallBreakCodeDetailList {
	s.BreakCode = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverallBreakCodeDetailList) SetCount(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverallBreakCodeDetailList {
	s.Count = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponseBodyDataOverallBreakCodeDetailList) SetDuration(v int64) *ListIntervalAgentSkillGroupReportResponseBodyDataOverallBreakCodeDetailList {
	s.Duration = &v
	return s
}

type ListIntervalAgentSkillGroupReportResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListIntervalAgentSkillGroupReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListIntervalAgentSkillGroupReportResponse) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalAgentSkillGroupReportResponse) GoString() string {
	return s.String()
}

func (s *ListIntervalAgentSkillGroupReportResponse) SetHeaders(v map[string]*string) *ListIntervalAgentSkillGroupReportResponse {
	s.Headers = v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponse) SetStatusCode(v int32) *ListIntervalAgentSkillGroupReportResponse {
	s.StatusCode = &v
	return s
}

func (s *ListIntervalAgentSkillGroupReportResponse) SetBody(v *ListIntervalAgentSkillGroupReportResponseBody) *ListIntervalAgentSkillGroupReportResponse {
	s.Body = v
	return s
}

type ListIntervalInstanceReportRequest struct {
	// example:
	//
	// 1620316799000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// Hourly
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// 1620230400000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListIntervalInstanceReportRequest) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalInstanceReportRequest) GoString() string {
	return s.String()
}

func (s *ListIntervalInstanceReportRequest) SetEndTime(v int64) *ListIntervalInstanceReportRequest {
	s.EndTime = &v
	return s
}

func (s *ListIntervalInstanceReportRequest) SetInstanceId(v string) *ListIntervalInstanceReportRequest {
	s.InstanceId = &v
	return s
}

func (s *ListIntervalInstanceReportRequest) SetInterval(v string) *ListIntervalInstanceReportRequest {
	s.Interval = &v
	return s
}

func (s *ListIntervalInstanceReportRequest) SetStartTime(v int64) *ListIntervalInstanceReportRequest {
	s.StartTime = &v
	return s
}

type ListIntervalInstanceReportResponseBody struct {
	// example:
	//
	// OK
	Code *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListIntervalInstanceReportResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 943D8EF3-3321-471F-A104-51C96FCA94D6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListIntervalInstanceReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalInstanceReportResponseBody) GoString() string {
	return s.String()
}

func (s *ListIntervalInstanceReportResponseBody) SetCode(v string) *ListIntervalInstanceReportResponseBody {
	s.Code = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBody) SetData(v []*ListIntervalInstanceReportResponseBodyData) *ListIntervalInstanceReportResponseBody {
	s.Data = v
	return s
}

func (s *ListIntervalInstanceReportResponseBody) SetHttpStatusCode(v int32) *ListIntervalInstanceReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBody) SetMessage(v string) *ListIntervalInstanceReportResponseBody {
	s.Message = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBody) SetRequestId(v string) *ListIntervalInstanceReportResponseBody {
	s.RequestId = &v
	return s
}

type ListIntervalInstanceReportResponseBodyData struct {
	Inbound  *ListIntervalInstanceReportResponseBodyDataInbound  `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	Outbound *ListIntervalInstanceReportResponseBodyDataOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall  *ListIntervalInstanceReportResponseBodyDataOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	// example:
	//
	// 1620230400000
	StatsTime *int64 `json:"StatsTime,omitempty" xml:"StatsTime,omitempty"`
}

func (s ListIntervalInstanceReportResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalInstanceReportResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListIntervalInstanceReportResponseBodyData) SetInbound(v *ListIntervalInstanceReportResponseBodyDataInbound) *ListIntervalInstanceReportResponseBodyData {
	s.Inbound = v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyData) SetOutbound(v *ListIntervalInstanceReportResponseBodyDataOutbound) *ListIntervalInstanceReportResponseBodyData {
	s.Outbound = v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyData) SetOverall(v *ListIntervalInstanceReportResponseBodyDataOverall) *ListIntervalInstanceReportResponseBodyData {
	s.Overall = v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyData) SetStatsTime(v int64) *ListIntervalInstanceReportResponseBodyData {
	s.StatsTime = &v
	return s
}

type ListIntervalInstanceReportResponseBodyDataInbound struct {
	AbandonRate *float32 `json:"AbandonRate,omitempty" xml:"AbandonRate,omitempty"`
	// example:
	//
	// 0
	AbandonedRate *float32 `json:"AbandonedRate,omitempty" xml:"AbandonedRate,omitempty"`
	// example:
	//
	// 0
	AverageAbandonTime *float32 `json:"AverageAbandonTime,omitempty" xml:"AverageAbandonTime,omitempty"`
	// example:
	//
	// 0
	AverageAbandonedInIVRTime *float32 `json:"AverageAbandonedInIVRTime,omitempty" xml:"AverageAbandonedInIVRTime,omitempty"`
	// example:
	//
	// 0
	AverageAbandonedInQueueTime *float32 `json:"AverageAbandonedInQueueTime,omitempty" xml:"AverageAbandonedInQueueTime,omitempty"`
	// example:
	//
	// 0
	AverageAbandonedInRingTime *float32 `json:"AverageAbandonedInRingTime,omitempty" xml:"AverageAbandonedInRingTime,omitempty"`
	AverageFirstResponseTime   *float32 `json:"AverageFirstResponseTime,omitempty" xml:"AverageFirstResponseTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime     *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	AverageResponseTime *float32 `json:"AverageResponseTime,omitempty" xml:"AverageResponseTime,omitempty"`
	// example:
	//
	// 5
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 64
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 5
	AverageWaitTime *float32 `json:"AverageWaitTime,omitempty" xml:"AverageWaitTime,omitempty"`
	// example:
	//
	// 13
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 0
	CallsAbandoned *int64 `json:"CallsAbandoned,omitempty" xml:"CallsAbandoned,omitempty"`
	// example:
	//
	// 0
	CallsAbandonedInIVR *int64 `json:"CallsAbandonedInIVR,omitempty" xml:"CallsAbandonedInIVR,omitempty"`
	// example:
	//
	// 0
	CallsAbandonedInQueue *int64 `json:"CallsAbandonedInQueue,omitempty" xml:"CallsAbandonedInQueue,omitempty"`
	// example:
	//
	// 0
	CallsAbandonedInRing *int64 `json:"CallsAbandonedInRing,omitempty" xml:"CallsAbandonedInRing,omitempty"`
	// example:
	//
	// 0
	CallsAbandonedInVoiceNavigator *int64 `json:"CallsAbandonedInVoiceNavigator,omitempty" xml:"CallsAbandonedInVoiceNavigator,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferred *int64 `json:"CallsAttendedTransferred,omitempty" xml:"CallsAttendedTransferred,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferred   *int64 `json:"CallsBlindTransferred,omitempty" xml:"CallsBlindTransferred,omitempty"`
	CallsCausedIVRException *int64 `json:"CallsCausedIVRException,omitempty" xml:"CallsCausedIVRException,omitempty"`
	// example:
	//
	// 0
	CallsForwardToOutsideNumber *int64 `json:"CallsForwardToOutsideNumber,omitempty" xml:"CallsForwardToOutsideNumber,omitempty"`
	// example:
	//
	// 7
	CallsHandled *int64 `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	// example:
	//
	// 0
	CallsHold *int64 `json:"CallsHold,omitempty" xml:"CallsHold,omitempty"`
	// example:
	//
	// 0
	CallsIVRException *int64 `json:"CallsIVRException,omitempty" xml:"CallsIVRException,omitempty"`
	// example:
	//
	// 7
	CallsOffered *int64 `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	// example:
	//
	// 7
	CallsQueued *int64 `json:"CallsQueued,omitempty" xml:"CallsQueued,omitempty"`
	// example:
	//
	// 0
	CallsQueuingFailed *int64 `json:"CallsQueuingFailed,omitempty" xml:"CallsQueuingFailed,omitempty"`
	// example:
	//
	// 0
	CallsQueuingOverflow *int64 `json:"CallsQueuingOverflow,omitempty" xml:"CallsQueuingOverflow,omitempty"`
	// example:
	//
	// 0
	CallsQueuingTimeout *int64 `json:"CallsQueuingTimeout,omitempty" xml:"CallsQueuingTimeout,omitempty"`
	// example:
	//
	// 7
	CallsRinged      *int64 `json:"CallsRinged,omitempty" xml:"CallsRinged,omitempty"`
	CallsToVoicemail *int64 `json:"CallsToVoicemail,omitempty" xml:"CallsToVoicemail,omitempty"`
	// example:
	//
	// 0
	CallsVoicemail *int64 `json:"CallsVoicemail,omitempty" xml:"CallsVoicemail,omitempty"`
	// example:
	//
	// 1
	HandleRate *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	// example:
	//
	// 0
	MaxAbandonTime *int64 `json:"MaxAbandonTime,omitempty" xml:"MaxAbandonTime,omitempty"`
	// example:
	//
	// 0
	MaxAbandonedInIVRTime *int64 `json:"MaxAbandonedInIVRTime,omitempty" xml:"MaxAbandonedInIVRTime,omitempty"`
	// example:
	//
	// 0
	MaxAbandonedInQueueTime *int64 `json:"MaxAbandonedInQueueTime,omitempty" xml:"MaxAbandonedInQueueTime,omitempty"`
	// example:
	//
	// 0
	MaxAbandonedInRingTime *int64 `json:"MaxAbandonedInRingTime,omitempty" xml:"MaxAbandonedInRingTime,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 12
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 219
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 13
	MaxWaitTime *int64 `json:"MaxWaitTime,omitempty" xml:"MaxWaitTime,omitempty"`
	// example:
	//
	// 17
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 1
	ServiceLevel20 *float32 `json:"ServiceLevel20,omitempty" xml:"ServiceLevel20,omitempty"`
	// example:
	//
	// 0
	TotalAbandonTime *int64 `json:"TotalAbandonTime,omitempty" xml:"TotalAbandonTime,omitempty"`
	// example:
	//
	// 0
	TotalAbandonedInIVRTime *int64 `json:"TotalAbandonedInIVRTime,omitempty" xml:"TotalAbandonedInIVRTime,omitempty"`
	// example:
	//
	// 0
	TotalAbandonedInQueueTime *int64 `json:"TotalAbandonedInQueueTime,omitempty" xml:"TotalAbandonedInQueueTime,omitempty"`
	// example:
	//
	// 0
	TotalAbandonedInRingTime *int64 `json:"TotalAbandonedInRingTime,omitempty" xml:"TotalAbandonedInRingTime,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime               *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	TotalMessagesSent           *int64 `json:"TotalMessagesSent,omitempty" xml:"TotalMessagesSent,omitempty"`
	TotalMessagesSentByAgent    *int64 `json:"TotalMessagesSentByAgent,omitempty" xml:"TotalMessagesSentByAgent,omitempty"`
	TotalMessagesSentByCustomer *int64 `json:"TotalMessagesSentByCustomer,omitempty" xml:"TotalMessagesSentByCustomer,omitempty"`
	// example:
	//
	// 32
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 447
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 34
	TotalWaitTime *int64 `json:"TotalWaitTime,omitempty" xml:"TotalWaitTime,omitempty"`
	// example:
	//
	// 85
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListIntervalInstanceReportResponseBodyDataInbound) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalInstanceReportResponseBodyDataInbound) GoString() string {
	return s.String()
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetAbandonRate(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.AbandonRate = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetAbandonedRate(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.AbandonedRate = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetAverageAbandonTime(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.AverageAbandonTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetAverageAbandonedInIVRTime(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.AverageAbandonedInIVRTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetAverageAbandonedInQueueTime(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.AverageAbandonedInQueueTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetAverageAbandonedInRingTime(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.AverageAbandonedInRingTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetAverageFirstResponseTime(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.AverageFirstResponseTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetAverageHoldTime(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.AverageHoldTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetAverageResponseTime(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.AverageResponseTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetAverageRingTime(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetAverageTalkTime(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetAverageWaitTime(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.AverageWaitTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetAverageWorkTime(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsAbandoned(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsAbandoned = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsAbandonedInIVR(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsAbandonedInIVR = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsAbandonedInQueue(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsAbandonedInQueue = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsAbandonedInRing(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsAbandonedInRing = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsAbandonedInVoiceNavigator(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsAbandonedInVoiceNavigator = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsAttendedTransferred(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsAttendedTransferred = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsBlindTransferred(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsBlindTransferred = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsCausedIVRException(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsCausedIVRException = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsForwardToOutsideNumber(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsForwardToOutsideNumber = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsHandled(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsHandled = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsHold(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsHold = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsIVRException(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsIVRException = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsOffered(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsOffered = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsQueued(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsQueued = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsQueuingFailed(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsQueuingFailed = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsQueuingOverflow(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsQueuingOverflow = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsQueuingTimeout(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsQueuingTimeout = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsRinged(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsRinged = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsToVoicemail(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsToVoicemail = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetCallsVoicemail(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.CallsVoicemail = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetHandleRate(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.HandleRate = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetMaxAbandonTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.MaxAbandonTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetMaxAbandonedInIVRTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.MaxAbandonedInIVRTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetMaxAbandonedInQueueTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.MaxAbandonedInQueueTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetMaxAbandonedInRingTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.MaxAbandonedInRingTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetMaxHoldTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.MaxHoldTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetMaxRingTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetMaxTalkTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetMaxWaitTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.MaxWaitTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetMaxWorkTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetSatisfactionIndex(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetSatisfactionRate(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.SatisfactionRate = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetSatisfactionSurveysOffered(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetSatisfactionSurveysResponded(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetServiceLevel20(v float32) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.ServiceLevel20 = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetTotalAbandonTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.TotalAbandonTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetTotalAbandonedInIVRTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.TotalAbandonedInIVRTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetTotalAbandonedInQueueTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.TotalAbandonedInQueueTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetTotalAbandonedInRingTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.TotalAbandonedInRingTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetTotalHoldTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.TotalHoldTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetTotalMessagesSent(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.TotalMessagesSent = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetTotalMessagesSentByAgent(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.TotalMessagesSentByAgent = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetTotalMessagesSentByCustomer(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.TotalMessagesSentByCustomer = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetTotalRingTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetTotalTalkTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetTotalWaitTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.TotalWaitTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataInbound) SetTotalWorkTime(v int64) *ListIntervalInstanceReportResponseBodyDataInbound {
	s.TotalWorkTime = &v
	return s
}

type ListIntervalInstanceReportResponseBodyDataOutbound struct {
	// example:
	//
	// 0
	AnswerRate *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	// example:
	//
	// 0
	AverageDialingTime *float32 `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	// example:
	//
	// 0
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 0
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 0
	CallsAnswered *int64 `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferred *int64 `json:"CallsAttendedTransferred,omitempty" xml:"CallsAttendedTransferred,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferred *int64 `json:"CallsBlindTransferred,omitempty" xml:"CallsBlindTransferred,omitempty"`
	// example:
	//
	// 0
	CallsDialed *int64 `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	// example:
	//
	// 0
	CallsHold *int64 `json:"CallsHold,omitempty" xml:"CallsHold,omitempty"`
	// example:
	//
	// 0
	CallsRinged *int64 `json:"CallsRinged,omitempty" xml:"CallsRinged,omitempty"`
	// example:
	//
	// 0
	MaxDialingTime *int64 `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 0
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 0
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 0
	TotalDialingTime *int64 `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	// example:
	//
	// 0
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 0
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListIntervalInstanceReportResponseBodyDataOutbound) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalInstanceReportResponseBodyDataOutbound) GoString() string {
	return s.String()
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetAnswerRate(v float32) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.AnswerRate = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetAverageDialingTime(v float32) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetAverageHoldTime(v float32) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.AverageHoldTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetAverageRingTime(v float32) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetAverageTalkTime(v float32) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetAverageWorkTime(v float32) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetCallsAnswered(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetCallsAttendedTransferred(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.CallsAttendedTransferred = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetCallsBlindTransferred(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.CallsBlindTransferred = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetCallsDialed(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.CallsDialed = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetCallsHold(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.CallsHold = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetCallsRinged(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.CallsRinged = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetMaxDialingTime(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetMaxHoldTime(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.MaxHoldTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetMaxRingTime(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetMaxTalkTime(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetMaxWorkTime(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetSatisfactionIndex(v float32) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetSatisfactionRate(v float32) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.SatisfactionRate = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetSatisfactionSurveysOffered(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetSatisfactionSurveysResponded(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetTotalDialingTime(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetTotalHoldTime(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.TotalHoldTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetTotalRingTime(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetTotalTalkTime(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOutbound) SetTotalWorkTime(v int64) *ListIntervalInstanceReportResponseBodyDataOutbound {
	s.TotalWorkTime = &v
	return s
}

type ListIntervalInstanceReportResponseBodyDataOverall struct {
	// example:
	//
	// 0
	AverageBreakTime *float32 `json:"AverageBreakTime,omitempty" xml:"AverageBreakTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	// example:
	//
	// 0
	AverageReadyTime *float32 `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 0
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 0
	MaxBreakTime *int64 `json:"MaxBreakTime,omitempty" xml:"MaxBreakTime,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 0
	MaxReadyTime *int64 `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 0
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	OccupancyRate *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 0
	TotalBreakTime *int64 `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	// example:
	//
	// 0
	TotalCalls *int64 `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	// example:
	//
	// 0
	TotalLoggedInTime *int64 `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	// example:
	//
	// 0
	TotalReadyTime *int64 `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 0
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListIntervalInstanceReportResponseBodyDataOverall) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalInstanceReportResponseBodyDataOverall) GoString() string {
	return s.String()
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetAverageBreakTime(v float32) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.AverageBreakTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetAverageHoldTime(v float32) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.AverageHoldTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetAverageReadyTime(v float32) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetAverageTalkTime(v float32) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetAverageWorkTime(v float32) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetMaxBreakTime(v int64) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.MaxBreakTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetMaxHoldTime(v int64) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.MaxHoldTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetMaxReadyTime(v int64) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetMaxTalkTime(v int64) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetMaxWorkTime(v int64) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetOccupancyRate(v float32) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.OccupancyRate = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetSatisfactionIndex(v float32) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetSatisfactionRate(v float32) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.SatisfactionRate = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetSatisfactionSurveysOffered(v int64) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetSatisfactionSurveysResponded(v int64) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetTotalBreakTime(v int64) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetTotalCalls(v int64) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.TotalCalls = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetTotalHoldTime(v int64) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.TotalHoldTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetTotalLoggedInTime(v int64) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetTotalReadyTime(v int64) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetTotalTalkTime(v int64) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *ListIntervalInstanceReportResponseBodyDataOverall) SetTotalWorkTime(v int64) *ListIntervalInstanceReportResponseBodyDataOverall {
	s.TotalWorkTime = &v
	return s
}

type ListIntervalInstanceReportResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListIntervalInstanceReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListIntervalInstanceReportResponse) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalInstanceReportResponse) GoString() string {
	return s.String()
}

func (s *ListIntervalInstanceReportResponse) SetHeaders(v map[string]*string) *ListIntervalInstanceReportResponse {
	s.Headers = v
	return s
}

func (s *ListIntervalInstanceReportResponse) SetStatusCode(v int32) *ListIntervalInstanceReportResponse {
	s.StatusCode = &v
	return s
}

func (s *ListIntervalInstanceReportResponse) SetBody(v *ListIntervalInstanceReportResponseBody) *ListIntervalInstanceReportResponse {
	s.Body = v
	return s
}

type ListIntervalSkillGroupReportRequest struct {
	// example:
	//
	// 1604725528000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// Hourly
	Interval  *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// skg-default@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1604639129000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListIntervalSkillGroupReportRequest) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalSkillGroupReportRequest) GoString() string {
	return s.String()
}

func (s *ListIntervalSkillGroupReportRequest) SetEndTime(v int64) *ListIntervalSkillGroupReportRequest {
	s.EndTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportRequest) SetInstanceId(v string) *ListIntervalSkillGroupReportRequest {
	s.InstanceId = &v
	return s
}

func (s *ListIntervalSkillGroupReportRequest) SetInterval(v string) *ListIntervalSkillGroupReportRequest {
	s.Interval = &v
	return s
}

func (s *ListIntervalSkillGroupReportRequest) SetMediaType(v string) *ListIntervalSkillGroupReportRequest {
	s.MediaType = &v
	return s
}

func (s *ListIntervalSkillGroupReportRequest) SetSkillGroupId(v string) *ListIntervalSkillGroupReportRequest {
	s.SkillGroupId = &v
	return s
}

func (s *ListIntervalSkillGroupReportRequest) SetStartTime(v int64) *ListIntervalSkillGroupReportRequest {
	s.StartTime = &v
	return s
}

type ListIntervalSkillGroupReportResponseBody struct {
	// example:
	//
	// OK
	Code *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListIntervalSkillGroupReportResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 943D8EF3-3321-471F-A104-51C96FCA94D6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListIntervalSkillGroupReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalSkillGroupReportResponseBody) GoString() string {
	return s.String()
}

func (s *ListIntervalSkillGroupReportResponseBody) SetCode(v string) *ListIntervalSkillGroupReportResponseBody {
	s.Code = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBody) SetData(v []*ListIntervalSkillGroupReportResponseBodyData) *ListIntervalSkillGroupReportResponseBody {
	s.Data = v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBody) SetHttpStatusCode(v int32) *ListIntervalSkillGroupReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBody) SetMessage(v string) *ListIntervalSkillGroupReportResponseBody {
	s.Message = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBody) SetRequestId(v string) *ListIntervalSkillGroupReportResponseBody {
	s.RequestId = &v
	return s
}

type ListIntervalSkillGroupReportResponseBodyData struct {
	Back2Back *ListIntervalSkillGroupReportResponseBodyDataBack2Back `json:"Back2Back,omitempty" xml:"Back2Back,omitempty" type:"Struct"`
	Inbound   *ListIntervalSkillGroupReportResponseBodyDataInbound   `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	Outbound  *ListIntervalSkillGroupReportResponseBodyDataOutbound  `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall   *ListIntervalSkillGroupReportResponseBodyDataOverall   `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	// example:
	//
	// 1604639129000
	StatsTime *int64 `json:"StatsTime,omitempty" xml:"StatsTime,omitempty"`
}

func (s ListIntervalSkillGroupReportResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalSkillGroupReportResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListIntervalSkillGroupReportResponseBodyData) SetBack2Back(v *ListIntervalSkillGroupReportResponseBodyDataBack2Back) *ListIntervalSkillGroupReportResponseBodyData {
	s.Back2Back = v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyData) SetInbound(v *ListIntervalSkillGroupReportResponseBodyDataInbound) *ListIntervalSkillGroupReportResponseBodyData {
	s.Inbound = v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyData) SetOutbound(v *ListIntervalSkillGroupReportResponseBodyDataOutbound) *ListIntervalSkillGroupReportResponseBodyData {
	s.Outbound = v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyData) SetOverall(v *ListIntervalSkillGroupReportResponseBodyDataOverall) *ListIntervalSkillGroupReportResponseBodyData {
	s.Overall = v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyData) SetStatsTime(v int64) *ListIntervalSkillGroupReportResponseBodyData {
	s.StatsTime = &v
	return s
}

type ListIntervalSkillGroupReportResponseBodyDataBack2Back struct {
	AgentHandleRate         *float32 `json:"AgentHandleRate,omitempty" xml:"AgentHandleRate,omitempty"`
	AnswerRate              *string  `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	AverageCustomerRingTime *float32 `json:"AverageCustomerRingTime,omitempty" xml:"AverageCustomerRingTime,omitempty"`
	AverageRingTime         *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	AverageTalkTime         *string  `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	CallsAgentHandled       *int64   `json:"CallsAgentHandled,omitempty" xml:"CallsAgentHandled,omitempty"`
	CallsAnswered           *int64   `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsCustomerAnswered   *int64   `json:"CallsCustomerAnswered,omitempty" xml:"CallsCustomerAnswered,omitempty"`
	CallsDialed             *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	CustomerAnswerRate      *float32 `json:"CustomerAnswerRate,omitempty" xml:"CustomerAnswerRate,omitempty"`
	MaxCustomerRingTime     *int64   `json:"MaxCustomerRingTime,omitempty" xml:"MaxCustomerRingTime,omitempty"`
	MaxRingTime             *int64   `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	MaxTalkTime             *string  `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	TotalCustomerRingTime   *int64   `json:"TotalCustomerRingTime,omitempty" xml:"TotalCustomerRingTime,omitempty"`
	TotalRingTime           *int64   `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	TotalTalkTime           *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
}

func (s ListIntervalSkillGroupReportResponseBodyDataBack2Back) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalSkillGroupReportResponseBodyDataBack2Back) GoString() string {
	return s.String()
}

func (s *ListIntervalSkillGroupReportResponseBodyDataBack2Back) SetAgentHandleRate(v float32) *ListIntervalSkillGroupReportResponseBodyDataBack2Back {
	s.AgentHandleRate = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataBack2Back) SetAnswerRate(v string) *ListIntervalSkillGroupReportResponseBodyDataBack2Back {
	s.AnswerRate = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataBack2Back) SetAverageCustomerRingTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataBack2Back {
	s.AverageCustomerRingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataBack2Back) SetAverageRingTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataBack2Back {
	s.AverageRingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataBack2Back) SetAverageTalkTime(v string) *ListIntervalSkillGroupReportResponseBodyDataBack2Back {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataBack2Back) SetCallsAgentHandled(v int64) *ListIntervalSkillGroupReportResponseBodyDataBack2Back {
	s.CallsAgentHandled = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataBack2Back) SetCallsAnswered(v int64) *ListIntervalSkillGroupReportResponseBodyDataBack2Back {
	s.CallsAnswered = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataBack2Back) SetCallsCustomerAnswered(v int64) *ListIntervalSkillGroupReportResponseBodyDataBack2Back {
	s.CallsCustomerAnswered = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataBack2Back) SetCallsDialed(v int64) *ListIntervalSkillGroupReportResponseBodyDataBack2Back {
	s.CallsDialed = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataBack2Back) SetCustomerAnswerRate(v float32) *ListIntervalSkillGroupReportResponseBodyDataBack2Back {
	s.CustomerAnswerRate = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataBack2Back) SetMaxCustomerRingTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataBack2Back {
	s.MaxCustomerRingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataBack2Back) SetMaxRingTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataBack2Back {
	s.MaxRingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataBack2Back) SetMaxTalkTime(v string) *ListIntervalSkillGroupReportResponseBodyDataBack2Back {
	s.MaxTalkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataBack2Back) SetTotalCustomerRingTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataBack2Back {
	s.TotalCustomerRingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataBack2Back) SetTotalRingTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataBack2Back {
	s.TotalRingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataBack2Back) SetTotalTalkTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataBack2Back {
	s.TotalTalkTime = &v
	return s
}

type ListIntervalSkillGroupReportResponseBodyDataInbound struct {
	// example:
	//
	// 0
	AbandonRate *float32 `json:"AbandonRate,omitempty" xml:"AbandonRate,omitempty"`
	// example:
	//
	// 0
	AverageAbandonTime *float32 `json:"AverageAbandonTime,omitempty" xml:"AverageAbandonTime,omitempty"`
	// example:
	//
	// 0
	AverageAbandonedInQueueTime *float32 `json:"AverageAbandonedInQueueTime,omitempty" xml:"AverageAbandonedInQueueTime,omitempty"`
	// example:
	//
	// 0
	AverageAbandonedInRingTime *float32 `json:"AverageAbandonedInRingTime,omitempty" xml:"AverageAbandonedInRingTime,omitempty"`
	AverageFirstResponseTime   *float32 `json:"AverageFirstResponseTime,omitempty" xml:"AverageFirstResponseTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime     *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	AverageResponseTime *float32 `json:"AverageResponseTime,omitempty" xml:"AverageResponseTime,omitempty"`
	// example:
	//
	// 11
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 5
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 11
	AverageWaitTime *float32 `json:"AverageWaitTime,omitempty" xml:"AverageWaitTime,omitempty"`
	// example:
	//
	// 8
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 0
	CallsAbandoned *int64 `json:"CallsAbandoned,omitempty" xml:"CallsAbandoned,omitempty"`
	// example:
	//
	// 0
	CallsAbandonedInQueue *int64 `json:"CallsAbandonedInQueue,omitempty" xml:"CallsAbandonedInQueue,omitempty"`
	// example:
	//
	// 0
	CallsAbandonedInRing *int64 `json:"CallsAbandonedInRing,omitempty" xml:"CallsAbandonedInRing,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferIn *int64 `json:"CallsAttendedTransferIn,omitempty" xml:"CallsAttendedTransferIn,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferOut *int64 `json:"CallsAttendedTransferOut,omitempty" xml:"CallsAttendedTransferOut,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferIn *int64 `json:"CallsBlindTransferIn,omitempty" xml:"CallsBlindTransferIn,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferOut *int64 `json:"CallsBlindTransferOut,omitempty" xml:"CallsBlindTransferOut,omitempty"`
	// example:
	//
	// 2
	CallsHandled *int64 `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	// example:
	//
	// 0
	CallsHold *int64 `json:"CallsHold,omitempty" xml:"CallsHold,omitempty"`
	// example:
	//
	// 3
	CallsOffered *int64 `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	// example:
	//
	// 0
	CallsOverflow *int64 `json:"CallsOverflow,omitempty" xml:"CallsOverflow,omitempty"`
	// example:
	//
	// 3
	CallsQueued          *int64 `json:"CallsQueued,omitempty" xml:"CallsQueued,omitempty"`
	CallsQueuingOverflow *int64 `json:"CallsQueuingOverflow,omitempty" xml:"CallsQueuingOverflow,omitempty"`
	CallsQueuingTimeout  *int64 `json:"CallsQueuingTimeout,omitempty" xml:"CallsQueuingTimeout,omitempty"`
	// example:
	//
	// 3
	CallsRinged *int64 `json:"CallsRinged,omitempty" xml:"CallsRinged,omitempty"`
	// example:
	//
	// 0
	CallsTimeout *int64 `json:"CallsTimeout,omitempty" xml:"CallsTimeout,omitempty"`
	// example:
	//
	// 0.6666666666666666
	HandleRate *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	// example:
	//
	// 0
	MaxAbandonTime *int64 `json:"MaxAbandonTime,omitempty" xml:"MaxAbandonTime,omitempty"`
	// example:
	//
	// 0
	MaxAbandonedInQueueTime *int64 `json:"MaxAbandonedInQueueTime,omitempty" xml:"MaxAbandonedInQueueTime,omitempty"`
	// example:
	//
	// 0
	MaxAbandonedInRingTime *int64 `json:"MaxAbandonedInRingTime,omitempty" xml:"MaxAbandonedInRingTime,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 18
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 6
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 18
	MaxWaitTime *int64 `json:"MaxWaitTime,omitempty" xml:"MaxWaitTime,omitempty"`
	// example:
	//
	// 19
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 0
	ServiceLevel20 *float32 `json:"ServiceLevel20,omitempty" xml:"ServiceLevel20,omitempty"`
	// example:
	//
	// 0
	TotalAbandonTime *int64 `json:"TotalAbandonTime,omitempty" xml:"TotalAbandonTime,omitempty"`
	// example:
	//
	// 0
	TotalAbandonedInQueueTime *int64 `json:"TotalAbandonedInQueueTime,omitempty" xml:"TotalAbandonedInQueueTime,omitempty"`
	// example:
	//
	// 0
	TotalAbandonedInRingTime *int64 `json:"TotalAbandonedInRingTime,omitempty" xml:"TotalAbandonedInRingTime,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime               *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	TotalMessagesSent           *int64 `json:"TotalMessagesSent,omitempty" xml:"TotalMessagesSent,omitempty"`
	TotalMessagesSentByAgent    *int64 `json:"TotalMessagesSentByAgent,omitempty" xml:"TotalMessagesSentByAgent,omitempty"`
	TotalMessagesSentByCustomer *int64 `json:"TotalMessagesSentByCustomer,omitempty" xml:"TotalMessagesSentByCustomer,omitempty"`
	// example:
	//
	// 33
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 9
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 33
	TotalWaitTime *int64 `json:"TotalWaitTime,omitempty" xml:"TotalWaitTime,omitempty"`
	// example:
	//
	// 23
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListIntervalSkillGroupReportResponseBodyDataInbound) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalSkillGroupReportResponseBodyDataInbound) GoString() string {
	return s.String()
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetAbandonRate(v float32) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.AbandonRate = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetAverageAbandonTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.AverageAbandonTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetAverageAbandonedInQueueTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.AverageAbandonedInQueueTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetAverageAbandonedInRingTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.AverageAbandonedInRingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetAverageFirstResponseTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.AverageFirstResponseTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetAverageHoldTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.AverageHoldTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetAverageResponseTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.AverageResponseTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetAverageRingTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetAverageTalkTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetAverageWaitTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.AverageWaitTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetAverageWorkTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetCallsAbandoned(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.CallsAbandoned = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetCallsAbandonedInQueue(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.CallsAbandonedInQueue = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetCallsAbandonedInRing(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.CallsAbandonedInRing = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetCallsAttendedTransferIn(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.CallsAttendedTransferIn = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetCallsAttendedTransferOut(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.CallsAttendedTransferOut = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetCallsBlindTransferIn(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.CallsBlindTransferIn = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetCallsBlindTransferOut(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.CallsBlindTransferOut = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetCallsHandled(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.CallsHandled = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetCallsHold(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.CallsHold = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetCallsOffered(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.CallsOffered = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetCallsOverflow(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.CallsOverflow = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetCallsQueued(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.CallsQueued = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetCallsQueuingOverflow(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.CallsQueuingOverflow = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetCallsQueuingTimeout(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.CallsQueuingTimeout = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetCallsRinged(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.CallsRinged = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetCallsTimeout(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.CallsTimeout = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetHandleRate(v float32) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.HandleRate = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetMaxAbandonTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.MaxAbandonTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetMaxAbandonedInQueueTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.MaxAbandonedInQueueTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetMaxAbandonedInRingTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.MaxAbandonedInRingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetMaxHoldTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.MaxHoldTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetMaxRingTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetMaxTalkTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetMaxWaitTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.MaxWaitTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetMaxWorkTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetSatisfactionIndex(v float32) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetSatisfactionRate(v float32) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.SatisfactionRate = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetSatisfactionSurveysOffered(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetSatisfactionSurveysResponded(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetServiceLevel20(v float32) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.ServiceLevel20 = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetTotalAbandonTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.TotalAbandonTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetTotalAbandonedInQueueTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.TotalAbandonedInQueueTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetTotalAbandonedInRingTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.TotalAbandonedInRingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetTotalHoldTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.TotalHoldTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetTotalMessagesSent(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.TotalMessagesSent = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetTotalMessagesSentByAgent(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.TotalMessagesSentByAgent = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetTotalMessagesSentByCustomer(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.TotalMessagesSentByCustomer = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetTotalRingTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetTotalTalkTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetTotalWaitTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.TotalWaitTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataInbound) SetTotalWorkTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataInbound {
	s.TotalWorkTime = &v
	return s
}

type ListIntervalSkillGroupReportResponseBodyDataOutbound struct {
	// example:
	//
	// 0
	AnswerRate *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	// example:
	//
	// 30
	AverageDialingTime *float32 `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	// example:
	//
	// 0
	AverageRingTime *float32 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 5
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 3
	AverageWorkTime *float32 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 1
	CallsAnswered *int64 `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferIn *int64 `json:"CallsAttendedTransferIn,omitempty" xml:"CallsAttendedTransferIn,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferOut *int64 `json:"CallsAttendedTransferOut,omitempty" xml:"CallsAttendedTransferOut,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferIn *int64 `json:"CallsBlindTransferIn,omitempty" xml:"CallsBlindTransferIn,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferOut *int64 `json:"CallsBlindTransferOut,omitempty" xml:"CallsBlindTransferOut,omitempty"`
	// example:
	//
	// 2
	CallsDialed *int64 `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	// example:
	//
	// 0
	CallsHold *int64 `json:"CallsHold,omitempty" xml:"CallsHold,omitempty"`
	// example:
	//
	// 0
	CallsRinged *int64 `json:"CallsRinged,omitempty" xml:"CallsRinged,omitempty"`
	// example:
	//
	// 49
	MaxDialingTime *int64 `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 0
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 5
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 4
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 60
	TotalDialingTime *int64 `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	// example:
	//
	// 0
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 5
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 5
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListIntervalSkillGroupReportResponseBodyDataOutbound) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalSkillGroupReportResponseBodyDataOutbound) GoString() string {
	return s.String()
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetAnswerRate(v float32) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.AnswerRate = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetAverageDialingTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetAverageHoldTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.AverageHoldTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetAverageRingTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetAverageTalkTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetAverageWorkTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetCallsAnswered(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetCallsAttendedTransferIn(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.CallsAttendedTransferIn = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetCallsAttendedTransferOut(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.CallsAttendedTransferOut = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetCallsBlindTransferIn(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.CallsBlindTransferIn = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetCallsBlindTransferOut(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.CallsBlindTransferOut = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetCallsDialed(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.CallsDialed = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetCallsHold(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.CallsHold = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetCallsRinged(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.CallsRinged = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetMaxDialingTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetMaxHoldTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.MaxHoldTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetMaxRingTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetMaxTalkTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetMaxWorkTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetSatisfactionIndex(v float32) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetSatisfactionRate(v float32) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.SatisfactionRate = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetSatisfactionSurveysOffered(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetSatisfactionSurveysResponded(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetTotalDialingTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetTotalHoldTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.TotalHoldTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetTotalRingTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetTotalTalkTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOutbound) SetTotalWorkTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOutbound {
	s.TotalWorkTime = &v
	return s
}

type ListIntervalSkillGroupReportResponseBodyDataOverall struct {
	// example:
	//
	// 0
	AverageBreakTime *float32 `json:"AverageBreakTime,omitempty" xml:"AverageBreakTime,omitempty"`
	// example:
	//
	// 0
	AverageHoldTime *float32 `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	// example:
	//
	// 0
	AverageReadyTime *float32 `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *float32 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 6
	AverageWorkTime     *float32                                                                  `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	BreakCodeDetailList []*ListIntervalSkillGroupReportResponseBodyDataOverallBreakCodeDetailList `json:"BreakCodeDetailList,omitempty" xml:"BreakCodeDetailList,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	MaxBreakTime *int64 `json:"MaxBreakTime,omitempty" xml:"MaxBreakTime,omitempty"`
	// example:
	//
	// 0
	MaxHoldTime *int64 `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	// example:
	//
	// 4927
	MaxReadyTime *int64 `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	// example:
	//
	// 6
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 19
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0.00422315148470254
	OccupancyRate *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionRate *float32 `json:"SatisfactionRate,omitempty" xml:"SatisfactionRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 5
	TotalBreakTime *int64 `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	// example:
	//
	// 5
	TotalCalls *int64 `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	// example:
	//
	// 0
	TotalHoldTime *int64 `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	// example:
	//
	// 9236
	TotalLoggedInTime *int64 `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	// example:
	//
	// 9106
	TotalReadyTime *int64 `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	// example:
	//
	// 13
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 27
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListIntervalSkillGroupReportResponseBodyDataOverall) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalSkillGroupReportResponseBodyDataOverall) GoString() string {
	return s.String()
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetAverageBreakTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.AverageBreakTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetAverageHoldTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.AverageHoldTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetAverageReadyTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetAverageTalkTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetAverageWorkTime(v float32) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetBreakCodeDetailList(v []*ListIntervalSkillGroupReportResponseBodyDataOverallBreakCodeDetailList) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.BreakCodeDetailList = v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetMaxBreakTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.MaxBreakTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetMaxHoldTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.MaxHoldTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetMaxReadyTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetMaxTalkTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetMaxWorkTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetOccupancyRate(v float32) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.OccupancyRate = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetSatisfactionIndex(v float32) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetSatisfactionRate(v float32) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.SatisfactionRate = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetSatisfactionSurveysOffered(v int64) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetSatisfactionSurveysResponded(v int64) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetTotalBreakTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetTotalCalls(v int64) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.TotalCalls = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetTotalHoldTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.TotalHoldTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetTotalLoggedInTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetTotalReadyTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetTotalTalkTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverall) SetTotalWorkTime(v int64) *ListIntervalSkillGroupReportResponseBodyDataOverall {
	s.TotalWorkTime = &v
	return s
}

type ListIntervalSkillGroupReportResponseBodyDataOverallBreakCodeDetailList struct {
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	Count     *int64  `json:"Count,omitempty" xml:"Count,omitempty"`
	Duration  *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s ListIntervalSkillGroupReportResponseBodyDataOverallBreakCodeDetailList) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalSkillGroupReportResponseBodyDataOverallBreakCodeDetailList) GoString() string {
	return s.String()
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverallBreakCodeDetailList) SetBreakCode(v string) *ListIntervalSkillGroupReportResponseBodyDataOverallBreakCodeDetailList {
	s.BreakCode = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverallBreakCodeDetailList) SetCount(v int64) *ListIntervalSkillGroupReportResponseBodyDataOverallBreakCodeDetailList {
	s.Count = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponseBodyDataOverallBreakCodeDetailList) SetDuration(v int64) *ListIntervalSkillGroupReportResponseBodyDataOverallBreakCodeDetailList {
	s.Duration = &v
	return s
}

type ListIntervalSkillGroupReportResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListIntervalSkillGroupReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListIntervalSkillGroupReportResponse) String() string {
	return tea.Prettify(s)
}

func (s ListIntervalSkillGroupReportResponse) GoString() string {
	return s.String()
}

func (s *ListIntervalSkillGroupReportResponse) SetHeaders(v map[string]*string) *ListIntervalSkillGroupReportResponse {
	s.Headers = v
	return s
}

func (s *ListIntervalSkillGroupReportResponse) SetStatusCode(v int32) *ListIntervalSkillGroupReportResponse {
	s.StatusCode = &v
	return s
}

func (s *ListIntervalSkillGroupReportResponse) SetBody(v *ListIntervalSkillGroupReportResponseBody) *ListIntervalSkillGroupReportResponse {
	s.Body = v
	return s
}

type ListIvrTrackingDetailsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// job-10963442671187****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListIvrTrackingDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListIvrTrackingDetailsRequest) GoString() string {
	return s.String()
}

func (s *ListIvrTrackingDetailsRequest) SetContactId(v string) *ListIvrTrackingDetailsRequest {
	s.ContactId = &v
	return s
}

func (s *ListIvrTrackingDetailsRequest) SetInstanceId(v string) *ListIvrTrackingDetailsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListIvrTrackingDetailsRequest) SetPageNumber(v int32) *ListIvrTrackingDetailsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListIvrTrackingDetailsRequest) SetPageSize(v int32) *ListIvrTrackingDetailsRequest {
	s.PageSize = &v
	return s
}

type ListIvrTrackingDetailsResponseBody struct {
	// example:
	//
	// OK
	Code *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListIvrTrackingDetailsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// D2RB671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListIvrTrackingDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListIvrTrackingDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *ListIvrTrackingDetailsResponseBody) SetCode(v string) *ListIvrTrackingDetailsResponseBody {
	s.Code = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBody) SetData(v *ListIvrTrackingDetailsResponseBodyData) *ListIvrTrackingDetailsResponseBody {
	s.Data = v
	return s
}

func (s *ListIvrTrackingDetailsResponseBody) SetHttpStatusCode(v int32) *ListIvrTrackingDetailsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBody) SetMessage(v string) *ListIvrTrackingDetailsResponseBody {
	s.Message = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBody) SetRequestId(v string) *ListIvrTrackingDetailsResponseBody {
	s.RequestId = &v
	return s
}

type ListIvrTrackingDetailsResponseBodyData struct {
	List []*ListIvrTrackingDetailsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 3
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListIvrTrackingDetailsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListIvrTrackingDetailsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListIvrTrackingDetailsResponseBodyData) SetList(v []*ListIvrTrackingDetailsResponseBodyDataList) *ListIvrTrackingDetailsResponseBodyData {
	s.List = v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyData) SetPageNumber(v int32) *ListIvrTrackingDetailsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyData) SetPageSize(v int32) *ListIvrTrackingDetailsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyData) SetTotalCount(v int32) *ListIvrTrackingDetailsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListIvrTrackingDetailsResponseBodyDataList struct {
	// example:
	//
	// 0533128****
	Callee *string `json:"Callee,omitempty" xml:"Callee,omitempty"`
	// example:
	//
	// 1332315****
	Caller *string `json:"Caller,omitempty" xml:"Caller,omitempty"`
	// example:
	//
	// 65cp2c15-92ac-4e67-98b2-073a3c541c5d
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// A=B;C=D
	ChannelVariables *string `json:"ChannelVariables,omitempty" xml:"ChannelVariables,omitempty"`
	// example:
	//
	// job-10963442671187****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// example:
	//
	// 1621910542876
	EnterTime *int64 `json:"EnterTime,omitempty" xml:"EnterTime,omitempty"`
	// example:
	//
	// abc99462-1058-47d0-a114-f145ea7444ff
	FlowId   *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	FlowName *string `json:"FlowName,omitempty" xml:"FlowName,omitempty"`
	// example:
	//
	// ccc-test
	Instance *string `json:"Instance,omitempty" xml:"Instance,omitempty"`
	// example:
	//
	// 1621910545105
	LeaveTime *int64 `json:"LeaveTime,omitempty" xml:"LeaveTime,omitempty"`
	// example:
	//
	// Success
	NodeExitCode *string `json:"NodeExitCode,omitempty" xml:"NodeExitCode,omitempty"`
	// example:
	//
	// e0bc19a3
	NodeId         *string                `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName       *string                `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	NodeProperties map[string]interface{} `json:"NodeProperties,omitempty" xml:"NodeProperties,omitempty"`
	// example:
	//
	// PLAY_OR_SAY
	NodeType *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	// example:
	//
	// {"digits":"2"}
	NodeVariables map[string]interface{} `json:"NodeVariables,omitempty" xml:"NodeVariables,omitempty"`
}

func (s ListIvrTrackingDetailsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListIvrTrackingDetailsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListIvrTrackingDetailsResponseBodyDataList) SetCallee(v string) *ListIvrTrackingDetailsResponseBodyDataList {
	s.Callee = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyDataList) SetCaller(v string) *ListIvrTrackingDetailsResponseBodyDataList {
	s.Caller = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyDataList) SetChannelId(v string) *ListIvrTrackingDetailsResponseBodyDataList {
	s.ChannelId = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyDataList) SetChannelVariables(v string) *ListIvrTrackingDetailsResponseBodyDataList {
	s.ChannelVariables = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyDataList) SetContactId(v string) *ListIvrTrackingDetailsResponseBodyDataList {
	s.ContactId = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyDataList) SetEnterTime(v int64) *ListIvrTrackingDetailsResponseBodyDataList {
	s.EnterTime = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyDataList) SetFlowId(v string) *ListIvrTrackingDetailsResponseBodyDataList {
	s.FlowId = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyDataList) SetFlowName(v string) *ListIvrTrackingDetailsResponseBodyDataList {
	s.FlowName = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyDataList) SetInstance(v string) *ListIvrTrackingDetailsResponseBodyDataList {
	s.Instance = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyDataList) SetLeaveTime(v int64) *ListIvrTrackingDetailsResponseBodyDataList {
	s.LeaveTime = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyDataList) SetNodeExitCode(v string) *ListIvrTrackingDetailsResponseBodyDataList {
	s.NodeExitCode = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyDataList) SetNodeId(v string) *ListIvrTrackingDetailsResponseBodyDataList {
	s.NodeId = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyDataList) SetNodeName(v string) *ListIvrTrackingDetailsResponseBodyDataList {
	s.NodeName = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyDataList) SetNodeProperties(v map[string]interface{}) *ListIvrTrackingDetailsResponseBodyDataList {
	s.NodeProperties = v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyDataList) SetNodeType(v string) *ListIvrTrackingDetailsResponseBodyDataList {
	s.NodeType = &v
	return s
}

func (s *ListIvrTrackingDetailsResponseBodyDataList) SetNodeVariables(v map[string]interface{}) *ListIvrTrackingDetailsResponseBodyDataList {
	s.NodeVariables = v
	return s
}

type ListIvrTrackingDetailsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListIvrTrackingDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListIvrTrackingDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListIvrTrackingDetailsResponse) GoString() string {
	return s.String()
}

func (s *ListIvrTrackingDetailsResponse) SetHeaders(v map[string]*string) *ListIvrTrackingDetailsResponse {
	s.Headers = v
	return s
}

func (s *ListIvrTrackingDetailsResponse) SetStatusCode(v int32) *ListIvrTrackingDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListIvrTrackingDetailsResponse) SetBody(v *ListIvrTrackingDetailsResponseBody) *ListIvrTrackingDetailsResponse {
	s.Body = v
	return s
}

type ListLegacyAgentEventLogsRequest struct {
	// example:
	//
	// agent@ccc-test
	AgentId *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1658026440011
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1657853640015
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListLegacyAgentEventLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyAgentEventLogsRequest) GoString() string {
	return s.String()
}

func (s *ListLegacyAgentEventLogsRequest) SetAgentId(v string) *ListLegacyAgentEventLogsRequest {
	s.AgentId = &v
	return s
}

func (s *ListLegacyAgentEventLogsRequest) SetEndTime(v int64) *ListLegacyAgentEventLogsRequest {
	s.EndTime = &v
	return s
}

func (s *ListLegacyAgentEventLogsRequest) SetInstanceId(v string) *ListLegacyAgentEventLogsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListLegacyAgentEventLogsRequest) SetPageNumber(v int32) *ListLegacyAgentEventLogsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListLegacyAgentEventLogsRequest) SetPageSize(v int32) *ListLegacyAgentEventLogsRequest {
	s.PageSize = &v
	return s
}

func (s *ListLegacyAgentEventLogsRequest) SetStartTime(v int64) *ListLegacyAgentEventLogsRequest {
	s.StartTime = &v
	return s
}

type ListLegacyAgentEventLogsResponseBody struct {
	// example:
	//
	// OK
	Code *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListLegacyAgentEventLogsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2802EE59-3B53-513A-A130-85E480AF689D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListLegacyAgentEventLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyAgentEventLogsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLegacyAgentEventLogsResponseBody) SetCode(v string) *ListLegacyAgentEventLogsResponseBody {
	s.Code = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBody) SetData(v *ListLegacyAgentEventLogsResponseBodyData) *ListLegacyAgentEventLogsResponseBody {
	s.Data = v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBody) SetHttpStatusCode(v int32) *ListLegacyAgentEventLogsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBody) SetMessage(v string) *ListLegacyAgentEventLogsResponseBody {
	s.Message = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBody) SetRequestId(v string) *ListLegacyAgentEventLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBody) SetSuccess(v bool) *ListLegacyAgentEventLogsResponseBody {
	s.Success = &v
	return s
}

type ListLegacyAgentEventLogsResponseBodyData struct {
	List []*ListLegacyAgentEventLogsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLegacyAgentEventLogsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyAgentEventLogsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListLegacyAgentEventLogsResponseBodyData) SetList(v []*ListLegacyAgentEventLogsResponseBodyDataList) *ListLegacyAgentEventLogsResponseBodyData {
	s.List = v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyData) SetPageNumber(v int32) *ListLegacyAgentEventLogsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyData) SetPageSize(v int32) *ListLegacyAgentEventLogsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyData) SetTotalCount(v int32) *ListLegacyAgentEventLogsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListLegacyAgentEventLogsResponseBodyDataList struct {
	// example:
	//
	// false
	AgentDropCall *string `json:"AgentDropCall,omitempty" xml:"AgentDropCall,omitempty"`
	// example:
	//
	// agent@ccc-test
	AgentNo *string `json:"AgentNo,omitempty" xml:"AgentNo,omitempty"`
	CallDir *string `json:"CallDir,omitempty" xml:"CallDir,omitempty"`
	// example:
	//
	// 378654****
	CallId   *string `json:"CallId,omitempty" xml:"CallId,omitempty"`
	CallMode *string `json:"CallMode,omitempty" xml:"CallMode,omitempty"`
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// 1312343****
	CalleeId *string `json:"CalleeId,omitempty" xml:"CalleeId,omitempty"`
	// example:
	//
	// 08331111****
	CallerId *string `json:"CallerId,omitempty" xml:"CallerId,omitempty"`
	// example:
	//
	// 345467****
	ConnId *string `json:"ConnId,omitempty" xml:"ConnId,omitempty"`
	Event  *string `json:"Event,omitempty" xml:"Event,omitempty"`
	// example:
	//
	// skillgroup1@ccc-test,skillgroup2@ccc-test
	GroupNo *string `json:"GroupNo,omitempty" xml:"GroupNo,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 8012****
	PhoneNo *string `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	// example:
	//
	// 2021-12-03T10:15:30
	StatisticDate *string `json:"StatisticDate,omitempty" xml:"StatisticDate,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	TargetRequest *string `json:"TargetRequest,omitempty" xml:"TargetRequest,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	TargetSelect *string `json:"TargetSelect,omitempty" xml:"TargetSelect,omitempty"`
	// example:
	//
	// acc101
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// example:
	//
	// 07518888****
	TransferNumber *string `json:"TransferNumber,omitempty" xml:"TransferNumber,omitempty"`
}

func (s ListLegacyAgentEventLogsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyAgentEventLogsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetAgentDropCall(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.AgentDropCall = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetAgentNo(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.AgentNo = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetCallDir(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.CallDir = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetCallId(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.CallId = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetCallMode(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.CallMode = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetCallType(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.CallType = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetCalleeId(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.CalleeId = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetCallerId(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.CallerId = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetConnId(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.ConnId = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetEvent(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.Event = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetGroupNo(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.GroupNo = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetOutboundScenario(v bool) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.OutboundScenario = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetPhoneNo(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.PhoneNo = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetStatisticDate(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.StatisticDate = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetTargetRequest(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.TargetRequest = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetTargetSelect(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.TargetSelect = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetTenantId(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.TenantId = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponseBodyDataList) SetTransferNumber(v string) *ListLegacyAgentEventLogsResponseBodyDataList {
	s.TransferNumber = &v
	return s
}

type ListLegacyAgentEventLogsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLegacyAgentEventLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLegacyAgentEventLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyAgentEventLogsResponse) GoString() string {
	return s.String()
}

func (s *ListLegacyAgentEventLogsResponse) SetHeaders(v map[string]*string) *ListLegacyAgentEventLogsResponse {
	s.Headers = v
	return s
}

func (s *ListLegacyAgentEventLogsResponse) SetStatusCode(v int32) *ListLegacyAgentEventLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLegacyAgentEventLogsResponse) SetBody(v *ListLegacyAgentEventLogsResponseBody) *ListLegacyAgentEventLogsResponse {
	s.Body = v
	return s
}

type ListLegacyAgentStatusLogsRequest struct {
	// example:
	//
	// agent@ccc-test
	AgentId *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1657879880010
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1657778840011
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListLegacyAgentStatusLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyAgentStatusLogsRequest) GoString() string {
	return s.String()
}

func (s *ListLegacyAgentStatusLogsRequest) SetAgentId(v string) *ListLegacyAgentStatusLogsRequest {
	s.AgentId = &v
	return s
}

func (s *ListLegacyAgentStatusLogsRequest) SetEndTime(v int64) *ListLegacyAgentStatusLogsRequest {
	s.EndTime = &v
	return s
}

func (s *ListLegacyAgentStatusLogsRequest) SetInstanceId(v string) *ListLegacyAgentStatusLogsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListLegacyAgentStatusLogsRequest) SetPageNumber(v int32) *ListLegacyAgentStatusLogsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListLegacyAgentStatusLogsRequest) SetPageSize(v int32) *ListLegacyAgentStatusLogsRequest {
	s.PageSize = &v
	return s
}

func (s *ListLegacyAgentStatusLogsRequest) SetStartTime(v int64) *ListLegacyAgentStatusLogsRequest {
	s.StartTime = &v
	return s
}

type ListLegacyAgentStatusLogsResponseBody struct {
	// example:
	//
	// OK
	Code *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListLegacyAgentStatusLogsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 4C9A5D93-33A6-57F3-A423-4C83BD0A8455
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListLegacyAgentStatusLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyAgentStatusLogsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLegacyAgentStatusLogsResponseBody) SetCode(v string) *ListLegacyAgentStatusLogsResponseBody {
	s.Code = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBody) SetData(v *ListLegacyAgentStatusLogsResponseBodyData) *ListLegacyAgentStatusLogsResponseBody {
	s.Data = v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBody) SetHttpStatusCode(v int32) *ListLegacyAgentStatusLogsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBody) SetMessage(v string) *ListLegacyAgentStatusLogsResponseBody {
	s.Message = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBody) SetRequestId(v string) *ListLegacyAgentStatusLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBody) SetSuccess(v bool) *ListLegacyAgentStatusLogsResponseBody {
	s.Success = &v
	return s
}

type ListLegacyAgentStatusLogsResponseBodyData struct {
	List []*ListLegacyAgentStatusLogsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLegacyAgentStatusLogsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyAgentStatusLogsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListLegacyAgentStatusLogsResponseBodyData) SetList(v []*ListLegacyAgentStatusLogsResponseBodyDataList) *ListLegacyAgentStatusLogsResponseBodyData {
	s.List = v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyData) SetPageNumber(v int32) *ListLegacyAgentStatusLogsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyData) SetPageSize(v int32) *ListLegacyAgentStatusLogsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyData) SetTotalCount(v int32) *ListLegacyAgentStatusLogsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListLegacyAgentStatusLogsResponseBodyDataList struct {
	// example:
	//
	// false
	AgentDropCall *string `json:"AgentDropCall,omitempty" xml:"AgentDropCall,omitempty"`
	// example:
	//
	// agent@ccc-test
	AgentNo        *string `json:"AgentNo,omitempty" xml:"AgentNo,omitempty"`
	AliHangupCause *string `json:"AliHangupCause,omitempty" xml:"AliHangupCause,omitempty"`
	CallDir        *string `json:"CallDir,omitempty" xml:"CallDir,omitempty"`
	// example:
	//
	// 454326****
	CallId   *string `json:"CallId,omitempty" xml:"CallId,omitempty"`
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// 1312121****
	CalleeId *string `json:"CalleeId,omitempty" xml:"CalleeId,omitempty"`
	// example:
	//
	// 08337676****
	CallerId *string `json:"CallerId,omitempty" xml:"CallerId,omitempty"`
	// example:
	//
	// 487326****
	ConnId  *string `json:"ConnId,omitempty" xml:"ConnId,omitempty"`
	Extend1 *string `json:"Extend1,omitempty" xml:"Extend1,omitempty"`
	Extend2 *string `json:"Extend2,omitempty" xml:"Extend2,omitempty"`
	Extend3 *string `json:"Extend3,omitempty" xml:"Extend3,omitempty"`
	Extend4 *string `json:"Extend4,omitempty" xml:"Extend4,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	GroupNo *string `json:"GroupNo,omitempty" xml:"GroupNo,omitempty"`
	// example:
	//
	// 8032****
	MonitedAgentNo *string `json:"MonitedAgentNo,omitempty" xml:"MonitedAgentNo,omitempty"`
	// example:
	//
	// 8012****
	MonitedAgentPhoneNo *string `json:"MonitedAgentPhoneNo,omitempty" xml:"MonitedAgentPhoneNo,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 8012****
	PhoneNo *string `json:"PhoneNo,omitempty" xml:"PhoneNo,omitempty"`
	// example:
	//
	// 2021-12-03T10:15:30
	StatisticDate *string `json:"StatisticDate,omitempty" xml:"StatisticDate,omitempty"`
	// example:
	//
	// 3
	StatisticTime *int32  `json:"StatisticTime,omitempty" xml:"StatisticTime,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	TargetRequest *string `json:"TargetRequest,omitempty" xml:"TargetRequest,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	TargetSelect *string `json:"TargetSelect,omitempty" xml:"TargetSelect,omitempty"`
	// example:
	//
	// acc6736
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// example:
	//
	// 07551231****
	TransferNo *string `json:"TransferNo,omitempty" xml:"TransferNo,omitempty"`
	// example:
	//
	// 05711231****
	TransferNumber *string `json:"TransferNumber,omitempty" xml:"TransferNumber,omitempty"`
}

func (s ListLegacyAgentStatusLogsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyAgentStatusLogsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetAgentDropCall(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.AgentDropCall = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetAgentNo(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.AgentNo = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetAliHangupCause(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.AliHangupCause = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetCallDir(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.CallDir = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetCallId(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.CallId = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetCallType(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.CallType = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetCalleeId(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.CalleeId = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetCallerId(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.CallerId = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetConnId(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.ConnId = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetExtend1(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.Extend1 = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetExtend2(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.Extend2 = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetExtend3(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.Extend3 = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetExtend4(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.Extend4 = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetGroupNo(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.GroupNo = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetMonitedAgentNo(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.MonitedAgentNo = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetMonitedAgentPhoneNo(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.MonitedAgentPhoneNo = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetOutboundScenario(v bool) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.OutboundScenario = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetPhoneNo(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.PhoneNo = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetStatisticDate(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.StatisticDate = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetStatisticTime(v int32) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.StatisticTime = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetStatus(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.Status = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetTargetRequest(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.TargetRequest = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetTargetSelect(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.TargetSelect = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetTenantId(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.TenantId = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetTransferNo(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.TransferNo = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponseBodyDataList) SetTransferNumber(v string) *ListLegacyAgentStatusLogsResponseBodyDataList {
	s.TransferNumber = &v
	return s
}

type ListLegacyAgentStatusLogsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLegacyAgentStatusLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLegacyAgentStatusLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyAgentStatusLogsResponse) GoString() string {
	return s.String()
}

func (s *ListLegacyAgentStatusLogsResponse) SetHeaders(v map[string]*string) *ListLegacyAgentStatusLogsResponse {
	s.Headers = v
	return s
}

func (s *ListLegacyAgentStatusLogsResponse) SetStatusCode(v int32) *ListLegacyAgentStatusLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLegacyAgentStatusLogsResponse) SetBody(v *ListLegacyAgentStatusLogsResponseBody) *ListLegacyAgentStatusLogsResponse {
	s.Body = v
	return s
}

type ListLegacyAppraiseLogsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1620273600000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1604638129000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListLegacyAppraiseLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyAppraiseLogsRequest) GoString() string {
	return s.String()
}

func (s *ListLegacyAppraiseLogsRequest) SetEndTime(v int64) *ListLegacyAppraiseLogsRequest {
	s.EndTime = &v
	return s
}

func (s *ListLegacyAppraiseLogsRequest) SetInstanceId(v string) *ListLegacyAppraiseLogsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListLegacyAppraiseLogsRequest) SetPageNumber(v int32) *ListLegacyAppraiseLogsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListLegacyAppraiseLogsRequest) SetPageSize(v int32) *ListLegacyAppraiseLogsRequest {
	s.PageSize = &v
	return s
}

func (s *ListLegacyAppraiseLogsRequest) SetStartTime(v int64) *ListLegacyAppraiseLogsRequest {
	s.StartTime = &v
	return s
}

type ListLegacyAppraiseLogsResponseBody struct {
	// example:
	//
	// OK
	Code *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListLegacyAppraiseLogsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// A13BB835-94AA-4E55-8D9E-5EA585CE6555"
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListLegacyAppraiseLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyAppraiseLogsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLegacyAppraiseLogsResponseBody) SetCode(v string) *ListLegacyAppraiseLogsResponseBody {
	s.Code = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBody) SetData(v *ListLegacyAppraiseLogsResponseBodyData) *ListLegacyAppraiseLogsResponseBody {
	s.Data = v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBody) SetHttpStatusCode(v int32) *ListLegacyAppraiseLogsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBody) SetMessage(v string) *ListLegacyAppraiseLogsResponseBody {
	s.Message = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBody) SetRequestId(v string) *ListLegacyAppraiseLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBody) SetSuccess(v bool) *ListLegacyAppraiseLogsResponseBody {
	s.Success = &v
	return s
}

type ListLegacyAppraiseLogsResponseBodyData struct {
	List []*ListLegacyAppraiseLogsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 18
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLegacyAppraiseLogsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyAppraiseLogsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListLegacyAppraiseLogsResponseBodyData) SetList(v []*ListLegacyAppraiseLogsResponseBodyDataList) *ListLegacyAppraiseLogsResponseBodyData {
	s.List = v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBodyData) SetPageNumber(v int32) *ListLegacyAppraiseLogsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBodyData) SetPageSize(v int32) *ListLegacyAppraiseLogsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBodyData) SetTotalCount(v int32) *ListLegacyAppraiseLogsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListLegacyAppraiseLogsResponseBodyDataList struct {
	// example:
	//
	// 3786929579
	Acid *string `json:"Acid,omitempty" xml:"Acid,omitempty"`
	// example:
	//
	// Outbound
	ContactType *string `json:"ContactType,omitempty" xml:"ContactType,omitempty"`
	// example:
	//
	// 10505
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// {}
	KeyMarkRelation *string `json:"KeyMarkRelation,omitempty" xml:"KeyMarkRelation,omitempty"`
	Note            *string `json:"Note,omitempty" xml:"Note,omitempty"`
	ParentNote      *string `json:"ParentNote,omitempty" xml:"ParentNote,omitempty"`
	// example:
	//
	// 2
	PressKey *string `json:"PressKey,omitempty" xml:"PressKey,omitempty"`
	// example:
	//
	// 28036411123456****
	RamId *string `json:"RamId,omitempty" xml:"RamId,omitempty"`
	// example:
	//
	// test@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 2021-12-03T10:15:30
	StatisticDate *string `json:"StatisticDate,omitempty" xml:"StatisticDate,omitempty"`
	// example:
	//
	// Launch
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLegacyAppraiseLogsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyAppraiseLogsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListLegacyAppraiseLogsResponseBodyDataList) SetAcid(v string) *ListLegacyAppraiseLogsResponseBodyDataList {
	s.Acid = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBodyDataList) SetContactType(v string) *ListLegacyAppraiseLogsResponseBodyDataList {
	s.ContactType = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBodyDataList) SetId(v int64) *ListLegacyAppraiseLogsResponseBodyDataList {
	s.Id = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBodyDataList) SetInstanceId(v string) *ListLegacyAppraiseLogsResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBodyDataList) SetKeyMarkRelation(v string) *ListLegacyAppraiseLogsResponseBodyDataList {
	s.KeyMarkRelation = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBodyDataList) SetNote(v string) *ListLegacyAppraiseLogsResponseBodyDataList {
	s.Note = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBodyDataList) SetParentNote(v string) *ListLegacyAppraiseLogsResponseBodyDataList {
	s.ParentNote = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBodyDataList) SetPressKey(v string) *ListLegacyAppraiseLogsResponseBodyDataList {
	s.PressKey = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBodyDataList) SetRamId(v string) *ListLegacyAppraiseLogsResponseBodyDataList {
	s.RamId = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBodyDataList) SetSkillGroupId(v string) *ListLegacyAppraiseLogsResponseBodyDataList {
	s.SkillGroupId = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBodyDataList) SetStatisticDate(v string) *ListLegacyAppraiseLogsResponseBodyDataList {
	s.StatisticDate = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponseBodyDataList) SetType(v string) *ListLegacyAppraiseLogsResponseBodyDataList {
	s.Type = &v
	return s
}

type ListLegacyAppraiseLogsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLegacyAppraiseLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLegacyAppraiseLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyAppraiseLogsResponse) GoString() string {
	return s.String()
}

func (s *ListLegacyAppraiseLogsResponse) SetHeaders(v map[string]*string) *ListLegacyAppraiseLogsResponse {
	s.Headers = v
	return s
}

func (s *ListLegacyAppraiseLogsResponse) SetStatusCode(v int32) *ListLegacyAppraiseLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLegacyAppraiseLogsResponse) SetBody(v *ListLegacyAppraiseLogsResponseBody) *ListLegacyAppraiseLogsResponse {
	s.Body = v
	return s
}

type ListLegacyQueueEventLogsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1658026180018
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1657939540015
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListLegacyQueueEventLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyQueueEventLogsRequest) GoString() string {
	return s.String()
}

func (s *ListLegacyQueueEventLogsRequest) SetEndTime(v int64) *ListLegacyQueueEventLogsRequest {
	s.EndTime = &v
	return s
}

func (s *ListLegacyQueueEventLogsRequest) SetInstanceId(v string) *ListLegacyQueueEventLogsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListLegacyQueueEventLogsRequest) SetPageNumber(v int32) *ListLegacyQueueEventLogsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListLegacyQueueEventLogsRequest) SetPageSize(v int32) *ListLegacyQueueEventLogsRequest {
	s.PageSize = &v
	return s
}

func (s *ListLegacyQueueEventLogsRequest) SetSkillGroupId(v string) *ListLegacyQueueEventLogsRequest {
	s.SkillGroupId = &v
	return s
}

func (s *ListLegacyQueueEventLogsRequest) SetStartTime(v int64) *ListLegacyQueueEventLogsRequest {
	s.StartTime = &v
	return s
}

type ListLegacyQueueEventLogsResponseBody struct {
	// example:
	//
	// OK
	Code *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListLegacyQueueEventLogsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1A5A8998-41F9-5F85-BFCF-EB2B6E376812
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListLegacyQueueEventLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyQueueEventLogsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLegacyQueueEventLogsResponseBody) SetCode(v string) *ListLegacyQueueEventLogsResponseBody {
	s.Code = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBody) SetData(v *ListLegacyQueueEventLogsResponseBodyData) *ListLegacyQueueEventLogsResponseBody {
	s.Data = v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBody) SetHttpStatusCode(v int32) *ListLegacyQueueEventLogsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBody) SetMessage(v string) *ListLegacyQueueEventLogsResponseBody {
	s.Message = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBody) SetRequestId(v string) *ListLegacyQueueEventLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBody) SetSuccess(v bool) *ListLegacyQueueEventLogsResponseBody {
	s.Success = &v
	return s
}

type ListLegacyQueueEventLogsResponseBodyData struct {
	List []*ListLegacyQueueEventLogsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLegacyQueueEventLogsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyQueueEventLogsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListLegacyQueueEventLogsResponseBodyData) SetList(v []*ListLegacyQueueEventLogsResponseBodyDataList) *ListLegacyQueueEventLogsResponseBodyData {
	s.List = v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBodyData) SetPageNumber(v int32) *ListLegacyQueueEventLogsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBodyData) SetPageSize(v int32) *ListLegacyQueueEventLogsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBodyData) SetTotalCount(v int32) *ListLegacyQueueEventLogsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListLegacyQueueEventLogsResponseBodyDataList struct {
	// example:
	//
	// 456328****
	Acid *string `json:"Acid,omitempty" xml:"Acid,omitempty"`
	// example:
	//
	// 8012****
	Ani *string `json:"Ani,omitempty" xml:"Ani,omitempty"`
	// example:
	//
	// agent@ccc-test
	AnswerPhone *string `json:"AnswerPhone,omitempty" xml:"AnswerPhone,omitempty"`
	// example:
	//
	// 15
	AnswerTime *int64  `json:"AnswerTime,omitempty" xml:"AnswerTime,omitempty"`
	Cause      *string `json:"Cause,omitempty" xml:"Cause,omitempty"`
	// example:
	//
	// 1312211****
	Dnis *string `json:"Dnis,omitempty" xml:"Dnis,omitempty"`
	Id   *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 10
	QueueTime *int64 `json:"QueueTime,omitempty" xml:"QueueTime,omitempty"`
	// example:
	//
	// 2021-12-03T10:15:30
	StatisticDate *string `json:"StatisticDate,omitempty" xml:"StatisticDate,omitempty"`
	// example:
	//
	// acc3733
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	Vq *string `json:"Vq,omitempty" xml:"Vq,omitempty"`
}

func (s ListLegacyQueueEventLogsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyQueueEventLogsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListLegacyQueueEventLogsResponseBodyDataList) SetAcid(v string) *ListLegacyQueueEventLogsResponseBodyDataList {
	s.Acid = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBodyDataList) SetAni(v string) *ListLegacyQueueEventLogsResponseBodyDataList {
	s.Ani = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBodyDataList) SetAnswerPhone(v string) *ListLegacyQueueEventLogsResponseBodyDataList {
	s.AnswerPhone = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBodyDataList) SetAnswerTime(v int64) *ListLegacyQueueEventLogsResponseBodyDataList {
	s.AnswerTime = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBodyDataList) SetCause(v string) *ListLegacyQueueEventLogsResponseBodyDataList {
	s.Cause = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBodyDataList) SetDnis(v string) *ListLegacyQueueEventLogsResponseBodyDataList {
	s.Dnis = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBodyDataList) SetId(v int64) *ListLegacyQueueEventLogsResponseBodyDataList {
	s.Id = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBodyDataList) SetQueueTime(v int64) *ListLegacyQueueEventLogsResponseBodyDataList {
	s.QueueTime = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBodyDataList) SetStatisticDate(v string) *ListLegacyQueueEventLogsResponseBodyDataList {
	s.StatisticDate = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBodyDataList) SetTenantId(v string) *ListLegacyQueueEventLogsResponseBodyDataList {
	s.TenantId = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponseBodyDataList) SetVq(v string) *ListLegacyQueueEventLogsResponseBodyDataList {
	s.Vq = &v
	return s
}

type ListLegacyQueueEventLogsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLegacyQueueEventLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLegacyQueueEventLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLegacyQueueEventLogsResponse) GoString() string {
	return s.String()
}

func (s *ListLegacyQueueEventLogsResponse) SetHeaders(v map[string]*string) *ListLegacyQueueEventLogsResponse {
	s.Headers = v
	return s
}

func (s *ListLegacyQueueEventLogsResponse) SetStatusCode(v int32) *ListLegacyQueueEventLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLegacyQueueEventLogsResponse) SetBody(v *ListLegacyQueueEventLogsResponseBody) *ListLegacyQueueEventLogsResponse {
	s.Body = v
	return s
}

type ListMonoRecordingsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// job-25697383427137****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ListMonoRecordingsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMonoRecordingsRequest) GoString() string {
	return s.String()
}

func (s *ListMonoRecordingsRequest) SetContactId(v string) *ListMonoRecordingsRequest {
	s.ContactId = &v
	return s
}

func (s *ListMonoRecordingsRequest) SetInstanceId(v string) *ListMonoRecordingsRequest {
	s.InstanceId = &v
	return s
}

type ListMonoRecordingsResponseBody struct {
	// example:
	//
	// OK
	Code *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListMonoRecordingsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// E836EF2A-EDAE-5310-8921-F983C967D42D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListMonoRecordingsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMonoRecordingsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMonoRecordingsResponseBody) SetCode(v string) *ListMonoRecordingsResponseBody {
	s.Code = &v
	return s
}

func (s *ListMonoRecordingsResponseBody) SetData(v []*ListMonoRecordingsResponseBodyData) *ListMonoRecordingsResponseBody {
	s.Data = v
	return s
}

func (s *ListMonoRecordingsResponseBody) SetHttpStatusCode(v int32) *ListMonoRecordingsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListMonoRecordingsResponseBody) SetMessage(v string) *ListMonoRecordingsResponseBody {
	s.Message = &v
	return s
}

func (s *ListMonoRecordingsResponseBody) SetRequestId(v string) *ListMonoRecordingsResponseBody {
	s.RequestId = &v
	return s
}

type ListMonoRecordingsResponseBodyData struct {
	// example:
	//
	// agent@ccc-test
	AgentId   *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName *string `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	// example:
	//
	// job-25920271311543****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// example:
	//
	// 5903871
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// job-25920271311543****-798f1e90-1f82-42da-914c-46580c8f4c85-1656926518491.wav
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// https://ccc-v2-shanghai.oss-cn-shanghai.aliyuncs.com/ccc-test/job-25920271311543****-798f1e90-1f82-42da-914c-46580c8f4c85-1656926518491.wav?Expires=1657014031&OSSAccessKeyId=****&Signature=****
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// 26972543893791****
	RamId *string `json:"RamId,omitempty" xml:"RamId,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1620259200000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListMonoRecordingsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListMonoRecordingsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListMonoRecordingsResponseBodyData) SetAgentId(v string) *ListMonoRecordingsResponseBodyData {
	s.AgentId = &v
	return s
}

func (s *ListMonoRecordingsResponseBodyData) SetAgentName(v string) *ListMonoRecordingsResponseBodyData {
	s.AgentName = &v
	return s
}

func (s *ListMonoRecordingsResponseBodyData) SetContactId(v string) *ListMonoRecordingsResponseBodyData {
	s.ContactId = &v
	return s
}

func (s *ListMonoRecordingsResponseBodyData) SetDuration(v string) *ListMonoRecordingsResponseBodyData {
	s.Duration = &v
	return s
}

func (s *ListMonoRecordingsResponseBodyData) SetFileName(v string) *ListMonoRecordingsResponseBodyData {
	s.FileName = &v
	return s
}

func (s *ListMonoRecordingsResponseBodyData) SetFileUrl(v string) *ListMonoRecordingsResponseBodyData {
	s.FileUrl = &v
	return s
}

func (s *ListMonoRecordingsResponseBodyData) SetRamId(v string) *ListMonoRecordingsResponseBodyData {
	s.RamId = &v
	return s
}

func (s *ListMonoRecordingsResponseBodyData) SetSkillGroupId(v string) *ListMonoRecordingsResponseBodyData {
	s.SkillGroupId = &v
	return s
}

func (s *ListMonoRecordingsResponseBodyData) SetStartTime(v string) *ListMonoRecordingsResponseBodyData {
	s.StartTime = &v
	return s
}

type ListMonoRecordingsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMonoRecordingsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMonoRecordingsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMonoRecordingsResponse) GoString() string {
	return s.String()
}

func (s *ListMonoRecordingsResponse) SetHeaders(v map[string]*string) *ListMonoRecordingsResponse {
	s.Headers = v
	return s
}

func (s *ListMonoRecordingsResponse) SetStatusCode(v int32) *ListMonoRecordingsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMonoRecordingsResponse) SetBody(v *ListMonoRecordingsResponseBody) *ListMonoRecordingsResponse {
	s.Body = v
	return s
}

type ListMultiChannelRecordingsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// job-25920271311543****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ListMultiChannelRecordingsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMultiChannelRecordingsRequest) GoString() string {
	return s.String()
}

func (s *ListMultiChannelRecordingsRequest) SetContactId(v string) *ListMultiChannelRecordingsRequest {
	s.ContactId = &v
	return s
}

func (s *ListMultiChannelRecordingsRequest) SetInstanceId(v string) *ListMultiChannelRecordingsRequest {
	s.InstanceId = &v
	return s
}

type ListMultiChannelRecordingsResponseBody struct {
	// example:
	//
	// OK
	Code *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListMultiChannelRecordingsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// B19CD719-9F65-56A6-8B79-DA4282EA4797
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListMultiChannelRecordingsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMultiChannelRecordingsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMultiChannelRecordingsResponseBody) SetCode(v string) *ListMultiChannelRecordingsResponseBody {
	s.Code = &v
	return s
}

func (s *ListMultiChannelRecordingsResponseBody) SetData(v []*ListMultiChannelRecordingsResponseBodyData) *ListMultiChannelRecordingsResponseBody {
	s.Data = v
	return s
}

func (s *ListMultiChannelRecordingsResponseBody) SetHttpStatusCode(v int32) *ListMultiChannelRecordingsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListMultiChannelRecordingsResponseBody) SetMessage(v string) *ListMultiChannelRecordingsResponseBody {
	s.Message = &v
	return s
}

func (s *ListMultiChannelRecordingsResponseBody) SetRequestId(v string) *ListMultiChannelRecordingsResponseBody {
	s.RequestId = &v
	return s
}

type ListMultiChannelRecordingsResponseBodyData struct {
	// example:
	//
	// ch-user-8526899****-8602****-1656926504363-job-25920271311543****
	AgentChannelId *string `json:"AgentChannelId,omitempty" xml:"AgentChannelId,omitempty"`
	// example:
	//
	// agent@ccc-test
	AgentId   *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName *string `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	// example:
	//
	// job-25920271311543****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// example:
	//
	// 56321
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// job-25920271311543****-798f1e90-1f82-42da-914c-46580c8f4c85-1656926518491.mkv
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// https://ccc-v2-shanghai.oss-cn-shanghai.aliyuncs.com/ccc-test/job-25920271311543****-798f1e90-1f82-42da-914c-46580c8f4c85-1656926518491.mkv?Expires=1657014031&OSSAccessKeyId=****&Signature=****
	FileUrl          *string                                                       `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	HoldTimeSegments []*ListMultiChannelRecordingsResponseBodyDataHoldTimeSegments `json:"HoldTimeSegments,omitempty" xml:"HoldTimeSegments,omitempty" type:"Repeated"`
	// example:
	//
	// 22807673106369****
	RamId *string `json:"RamId,omitempty" xml:"RamId,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1656926518491
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListMultiChannelRecordingsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListMultiChannelRecordingsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListMultiChannelRecordingsResponseBodyData) SetAgentChannelId(v string) *ListMultiChannelRecordingsResponseBodyData {
	s.AgentChannelId = &v
	return s
}

func (s *ListMultiChannelRecordingsResponseBodyData) SetAgentId(v string) *ListMultiChannelRecordingsResponseBodyData {
	s.AgentId = &v
	return s
}

func (s *ListMultiChannelRecordingsResponseBodyData) SetAgentName(v string) *ListMultiChannelRecordingsResponseBodyData {
	s.AgentName = &v
	return s
}

func (s *ListMultiChannelRecordingsResponseBodyData) SetContactId(v string) *ListMultiChannelRecordingsResponseBodyData {
	s.ContactId = &v
	return s
}

func (s *ListMultiChannelRecordingsResponseBodyData) SetDuration(v string) *ListMultiChannelRecordingsResponseBodyData {
	s.Duration = &v
	return s
}

func (s *ListMultiChannelRecordingsResponseBodyData) SetFileName(v string) *ListMultiChannelRecordingsResponseBodyData {
	s.FileName = &v
	return s
}

func (s *ListMultiChannelRecordingsResponseBodyData) SetFileUrl(v string) *ListMultiChannelRecordingsResponseBodyData {
	s.FileUrl = &v
	return s
}

func (s *ListMultiChannelRecordingsResponseBodyData) SetHoldTimeSegments(v []*ListMultiChannelRecordingsResponseBodyDataHoldTimeSegments) *ListMultiChannelRecordingsResponseBodyData {
	s.HoldTimeSegments = v
	return s
}

func (s *ListMultiChannelRecordingsResponseBodyData) SetRamId(v string) *ListMultiChannelRecordingsResponseBodyData {
	s.RamId = &v
	return s
}

func (s *ListMultiChannelRecordingsResponseBodyData) SetSkillGroupId(v string) *ListMultiChannelRecordingsResponseBodyData {
	s.SkillGroupId = &v
	return s
}

func (s *ListMultiChannelRecordingsResponseBodyData) SetStartTime(v int64) *ListMultiChannelRecordingsResponseBodyData {
	s.StartTime = &v
	return s
}

type ListMultiChannelRecordingsResponseBodyDataHoldTimeSegments struct {
	EndTime   *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListMultiChannelRecordingsResponseBodyDataHoldTimeSegments) String() string {
	return tea.Prettify(s)
}

func (s ListMultiChannelRecordingsResponseBodyDataHoldTimeSegments) GoString() string {
	return s.String()
}

func (s *ListMultiChannelRecordingsResponseBodyDataHoldTimeSegments) SetEndTime(v int64) *ListMultiChannelRecordingsResponseBodyDataHoldTimeSegments {
	s.EndTime = &v
	return s
}

func (s *ListMultiChannelRecordingsResponseBodyDataHoldTimeSegments) SetStartTime(v int64) *ListMultiChannelRecordingsResponseBodyDataHoldTimeSegments {
	s.StartTime = &v
	return s
}

type ListMultiChannelRecordingsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMultiChannelRecordingsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMultiChannelRecordingsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMultiChannelRecordingsResponse) GoString() string {
	return s.String()
}

func (s *ListMultiChannelRecordingsResponse) SetHeaders(v map[string]*string) *ListMultiChannelRecordingsResponse {
	s.Headers = v
	return s
}

func (s *ListMultiChannelRecordingsResponse) SetStatusCode(v int32) *ListMultiChannelRecordingsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMultiChannelRecordingsResponse) SetBody(v *ListMultiChannelRecordingsResponseBody) *ListMultiChannelRecordingsResponse {
	s.Body = v
	return s
}

type ListOutboundNumbersOfUserRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ["skillgroup1@ccc-test","skillgroup2@ccc-test"]
	SkillGroupIdList *string `json:"SkillGroupIdList,omitempty" xml:"SkillGroupIdList,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListOutboundNumbersOfUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundNumbersOfUserRequest) GoString() string {
	return s.String()
}

func (s *ListOutboundNumbersOfUserRequest) SetInstanceId(v string) *ListOutboundNumbersOfUserRequest {
	s.InstanceId = &v
	return s
}

func (s *ListOutboundNumbersOfUserRequest) SetPageNumber(v int32) *ListOutboundNumbersOfUserRequest {
	s.PageNumber = &v
	return s
}

func (s *ListOutboundNumbersOfUserRequest) SetPageSize(v int32) *ListOutboundNumbersOfUserRequest {
	s.PageSize = &v
	return s
}

func (s *ListOutboundNumbersOfUserRequest) SetSkillGroupIdList(v string) *ListOutboundNumbersOfUserRequest {
	s.SkillGroupIdList = &v
	return s
}

func (s *ListOutboundNumbersOfUserRequest) SetUserId(v string) *ListOutboundNumbersOfUserRequest {
	s.UserId = &v
	return s
}

type ListOutboundNumbersOfUserResponseBody struct {
	// example:
	//
	// OK
	Code *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListOutboundNumbersOfUserResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListOutboundNumbersOfUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundNumbersOfUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListOutboundNumbersOfUserResponseBody) SetCode(v string) *ListOutboundNumbersOfUserResponseBody {
	s.Code = &v
	return s
}

func (s *ListOutboundNumbersOfUserResponseBody) SetData(v *ListOutboundNumbersOfUserResponseBodyData) *ListOutboundNumbersOfUserResponseBody {
	s.Data = v
	return s
}

func (s *ListOutboundNumbersOfUserResponseBody) SetHttpStatusCode(v int32) *ListOutboundNumbersOfUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListOutboundNumbersOfUserResponseBody) SetMessage(v string) *ListOutboundNumbersOfUserResponseBody {
	s.Message = &v
	return s
}

func (s *ListOutboundNumbersOfUserResponseBody) SetRequestId(v string) *ListOutboundNumbersOfUserResponseBody {
	s.RequestId = &v
	return s
}

type ListOutboundNumbersOfUserResponseBodyData struct {
	List []*ListOutboundNumbersOfUserResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListOutboundNumbersOfUserResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundNumbersOfUserResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListOutboundNumbersOfUserResponseBodyData) SetList(v []*ListOutboundNumbersOfUserResponseBodyDataList) *ListOutboundNumbersOfUserResponseBodyData {
	s.List = v
	return s
}

func (s *ListOutboundNumbersOfUserResponseBodyData) SetPageNumber(v int32) *ListOutboundNumbersOfUserResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListOutboundNumbersOfUserResponseBodyData) SetPageSize(v int32) *ListOutboundNumbersOfUserResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListOutboundNumbersOfUserResponseBodyData) SetTotalCount(v int32) *ListOutboundNumbersOfUserResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListOutboundNumbersOfUserResponseBodyDataList struct {
	City *string `json:"City,omitempty" xml:"City,omitempty"`
	// example:
	//
	// 0830019****
	Number   *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s ListOutboundNumbersOfUserResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundNumbersOfUserResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListOutboundNumbersOfUserResponseBodyDataList) SetCity(v string) *ListOutboundNumbersOfUserResponseBodyDataList {
	s.City = &v
	return s
}

func (s *ListOutboundNumbersOfUserResponseBodyDataList) SetNumber(v string) *ListOutboundNumbersOfUserResponseBodyDataList {
	s.Number = &v
	return s
}

func (s *ListOutboundNumbersOfUserResponseBodyDataList) SetProvince(v string) *ListOutboundNumbersOfUserResponseBodyDataList {
	s.Province = &v
	return s
}

type ListOutboundNumbersOfUserResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListOutboundNumbersOfUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListOutboundNumbersOfUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundNumbersOfUserResponse) GoString() string {
	return s.String()
}

func (s *ListOutboundNumbersOfUserResponse) SetHeaders(v map[string]*string) *ListOutboundNumbersOfUserResponse {
	s.Headers = v
	return s
}

func (s *ListOutboundNumbersOfUserResponse) SetStatusCode(v int32) *ListOutboundNumbersOfUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ListOutboundNumbersOfUserResponse) SetBody(v *ListOutboundNumbersOfUserResponseBody) *ListOutboundNumbersOfUserResponse {
	s.Body = v
	return s
}

type ListPersonalNumbersOfUserRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// true
	IsMember *bool `json:"IsMember,omitempty" xml:"IsMember,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 0833
	SearchPattern *string `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// user-test@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListPersonalNumbersOfUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPersonalNumbersOfUserRequest) GoString() string {
	return s.String()
}

func (s *ListPersonalNumbersOfUserRequest) SetInstanceId(v string) *ListPersonalNumbersOfUserRequest {
	s.InstanceId = &v
	return s
}

func (s *ListPersonalNumbersOfUserRequest) SetIsMember(v bool) *ListPersonalNumbersOfUserRequest {
	s.IsMember = &v
	return s
}

func (s *ListPersonalNumbersOfUserRequest) SetPageNumber(v int32) *ListPersonalNumbersOfUserRequest {
	s.PageNumber = &v
	return s
}

func (s *ListPersonalNumbersOfUserRequest) SetPageSize(v int32) *ListPersonalNumbersOfUserRequest {
	s.PageSize = &v
	return s
}

func (s *ListPersonalNumbersOfUserRequest) SetSearchPattern(v string) *ListPersonalNumbersOfUserRequest {
	s.SearchPattern = &v
	return s
}

func (s *ListPersonalNumbersOfUserRequest) SetUserId(v string) *ListPersonalNumbersOfUserRequest {
	s.UserId = &v
	return s
}

type ListPersonalNumbersOfUserResponseBody struct {
	// example:
	//
	// OK
	Code *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListPersonalNumbersOfUserResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPersonalNumbersOfUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPersonalNumbersOfUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListPersonalNumbersOfUserResponseBody) SetCode(v string) *ListPersonalNumbersOfUserResponseBody {
	s.Code = &v
	return s
}

func (s *ListPersonalNumbersOfUserResponseBody) SetData(v *ListPersonalNumbersOfUserResponseBodyData) *ListPersonalNumbersOfUserResponseBody {
	s.Data = v
	return s
}

func (s *ListPersonalNumbersOfUserResponseBody) SetHttpStatusCode(v int32) *ListPersonalNumbersOfUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListPersonalNumbersOfUserResponseBody) SetMessage(v string) *ListPersonalNumbersOfUserResponseBody {
	s.Message = &v
	return s
}

func (s *ListPersonalNumbersOfUserResponseBody) SetRequestId(v string) *ListPersonalNumbersOfUserResponseBody {
	s.RequestId = &v
	return s
}

type ListPersonalNumbersOfUserResponseBodyData struct {
	List []*ListPersonalNumbersOfUserResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPersonalNumbersOfUserResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListPersonalNumbersOfUserResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListPersonalNumbersOfUserResponseBodyData) SetList(v []*ListPersonalNumbersOfUserResponseBodyDataList) *ListPersonalNumbersOfUserResponseBodyData {
	s.List = v
	return s
}

func (s *ListPersonalNumbersOfUserResponseBodyData) SetPageNumber(v int32) *ListPersonalNumbersOfUserResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListPersonalNumbersOfUserResponseBodyData) SetPageSize(v int32) *ListPersonalNumbersOfUserResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListPersonalNumbersOfUserResponseBodyData) SetTotalCount(v int32) *ListPersonalNumbersOfUserResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListPersonalNumbersOfUserResponseBodyDataList struct {
	// example:
	//
	// true
	Active *bool   `json:"Active,omitempty" xml:"Active,omitempty"`
	City   *string `json:"City,omitempty" xml:"City,omitempty"`
	// example:
	//
	// a3fb6c62-9b49-4942-ae5b-cf2abd4123ek
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 08330011****
	Number   *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s ListPersonalNumbersOfUserResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListPersonalNumbersOfUserResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListPersonalNumbersOfUserResponseBodyDataList) SetActive(v bool) *ListPersonalNumbersOfUserResponseBodyDataList {
	s.Active = &v
	return s
}

func (s *ListPersonalNumbersOfUserResponseBodyDataList) SetCity(v string) *ListPersonalNumbersOfUserResponseBodyDataList {
	s.City = &v
	return s
}

func (s *ListPersonalNumbersOfUserResponseBodyDataList) SetContactFlowId(v string) *ListPersonalNumbersOfUserResponseBodyDataList {
	s.ContactFlowId = &v
	return s
}

func (s *ListPersonalNumbersOfUserResponseBodyDataList) SetInstanceId(v string) *ListPersonalNumbersOfUserResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListPersonalNumbersOfUserResponseBodyDataList) SetNumber(v string) *ListPersonalNumbersOfUserResponseBodyDataList {
	s.Number = &v
	return s
}

func (s *ListPersonalNumbersOfUserResponseBodyDataList) SetProvince(v string) *ListPersonalNumbersOfUserResponseBodyDataList {
	s.Province = &v
	return s
}

type ListPersonalNumbersOfUserResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPersonalNumbersOfUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPersonalNumbersOfUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPersonalNumbersOfUserResponse) GoString() string {
	return s.String()
}

func (s *ListPersonalNumbersOfUserResponse) SetHeaders(v map[string]*string) *ListPersonalNumbersOfUserResponse {
	s.Headers = v
	return s
}

func (s *ListPersonalNumbersOfUserResponse) SetStatusCode(v int32) *ListPersonalNumbersOfUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPersonalNumbersOfUserResponse) SetBody(v *ListPersonalNumbersOfUserResponseBody) *ListPersonalNumbersOfUserResponse {
	s.Body = v
	return s
}

type ListPhoneNumbersRequest struct {
	// example:
	//
	// true
	Active *bool `json:"Active,omitempty" xml:"Active,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 0833
	SearchPattern *string `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
	// example:
	//
	// Bidirection
	Usage *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s ListPhoneNumbersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersRequest) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersRequest) SetActive(v bool) *ListPhoneNumbersRequest {
	s.Active = &v
	return s
}

func (s *ListPhoneNumbersRequest) SetInstanceId(v string) *ListPhoneNumbersRequest {
	s.InstanceId = &v
	return s
}

func (s *ListPhoneNumbersRequest) SetPageNumber(v int32) *ListPhoneNumbersRequest {
	s.PageNumber = &v
	return s
}

func (s *ListPhoneNumbersRequest) SetPageSize(v int32) *ListPhoneNumbersRequest {
	s.PageSize = &v
	return s
}

func (s *ListPhoneNumbersRequest) SetSearchPattern(v string) *ListPhoneNumbersRequest {
	s.SearchPattern = &v
	return s
}

func (s *ListPhoneNumbersRequest) SetUsage(v string) *ListPhoneNumbersRequest {
	s.Usage = &v
	return s
}

type ListPhoneNumbersResponseBody struct {
	// example:
	//
	// OK
	Code *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListPhoneNumbersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPhoneNumbersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersResponseBody) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersResponseBody) SetCode(v string) *ListPhoneNumbersResponseBody {
	s.Code = &v
	return s
}

func (s *ListPhoneNumbersResponseBody) SetData(v *ListPhoneNumbersResponseBodyData) *ListPhoneNumbersResponseBody {
	s.Data = v
	return s
}

func (s *ListPhoneNumbersResponseBody) SetHttpStatusCode(v int32) *ListPhoneNumbersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListPhoneNumbersResponseBody) SetMessage(v string) *ListPhoneNumbersResponseBody {
	s.Message = &v
	return s
}

func (s *ListPhoneNumbersResponseBody) SetRequestId(v string) *ListPhoneNumbersResponseBody {
	s.RequestId = &v
	return s
}

type ListPhoneNumbersResponseBodyData struct {
	List []*ListPhoneNumbersResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPhoneNumbersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersResponseBodyData) SetList(v []*ListPhoneNumbersResponseBodyDataList) *ListPhoneNumbersResponseBodyData {
	s.List = v
	return s
}

func (s *ListPhoneNumbersResponseBodyData) SetPageNumber(v int32) *ListPhoneNumbersResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyData) SetPageSize(v int32) *ListPhoneNumbersResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyData) SetTotalCount(v int32) *ListPhoneNumbersResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListPhoneNumbersResponseBodyDataList struct {
	// example:
	//
	// true
	Active *bool   `json:"Active,omitempty" xml:"Active,omitempty"`
	City   *string `json:"City,omitempty" xml:"City,omitempty"`
	// example:
	//
	// a3fb6c62-9b49-4942-ae5b-cf2abd4123ek
	ContactFlowId   *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	ContactFlowName *string `json:"ContactFlowName,omitempty" xml:"ContactFlowName,omitempty"`
	// example:
	//
	// 1617958538000
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 08330011****
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
	// example:
	//
	// alicom
	Provider    *string                                            `json:"Provider,omitempty" xml:"Provider,omitempty"`
	Province    *string                                            `json:"Province,omitempty" xml:"Province,omitempty"`
	SkillGroups []*ListPhoneNumbersResponseBodyDataListSkillGroups `json:"SkillGroups,omitempty" xml:"SkillGroups,omitempty" type:"Repeated"`
	// example:
	//
	// M1
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// example:
	//
	// Bidirection
	Usage *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListPhoneNumbersResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersResponseBodyDataList) SetActive(v bool) *ListPhoneNumbersResponseBodyDataList {
	s.Active = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyDataList) SetCity(v string) *ListPhoneNumbersResponseBodyDataList {
	s.City = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyDataList) SetContactFlowId(v string) *ListPhoneNumbersResponseBodyDataList {
	s.ContactFlowId = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyDataList) SetContactFlowName(v string) *ListPhoneNumbersResponseBodyDataList {
	s.ContactFlowName = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyDataList) SetCreateTime(v string) *ListPhoneNumbersResponseBodyDataList {
	s.CreateTime = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyDataList) SetInstanceId(v string) *ListPhoneNumbersResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyDataList) SetNumber(v string) *ListPhoneNumbersResponseBodyDataList {
	s.Number = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyDataList) SetProvider(v string) *ListPhoneNumbersResponseBodyDataList {
	s.Provider = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyDataList) SetProvince(v string) *ListPhoneNumbersResponseBodyDataList {
	s.Province = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyDataList) SetSkillGroups(v []*ListPhoneNumbersResponseBodyDataListSkillGroups) *ListPhoneNumbersResponseBodyDataList {
	s.SkillGroups = v
	return s
}

func (s *ListPhoneNumbersResponseBodyDataList) SetTags(v string) *ListPhoneNumbersResponseBodyDataList {
	s.Tags = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyDataList) SetUsage(v string) *ListPhoneNumbersResponseBodyDataList {
	s.Usage = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyDataList) SetUserId(v string) *ListPhoneNumbersResponseBodyDataList {
	s.UserId = &v
	return s
}

type ListPhoneNumbersResponseBodyDataListSkillGroups struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// skillgroup
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s ListPhoneNumbersResponseBodyDataListSkillGroups) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersResponseBodyDataListSkillGroups) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersResponseBodyDataListSkillGroups) SetDisplayName(v string) *ListPhoneNumbersResponseBodyDataListSkillGroups {
	s.DisplayName = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyDataListSkillGroups) SetInstanceId(v string) *ListPhoneNumbersResponseBodyDataListSkillGroups {
	s.InstanceId = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyDataListSkillGroups) SetName(v string) *ListPhoneNumbersResponseBodyDataListSkillGroups {
	s.Name = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyDataListSkillGroups) SetSkillGroupId(v string) *ListPhoneNumbersResponseBodyDataListSkillGroups {
	s.SkillGroupId = &v
	return s
}

type ListPhoneNumbersResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPhoneNumbersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPhoneNumbersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersResponse) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersResponse) SetHeaders(v map[string]*string) *ListPhoneNumbersResponse {
	s.Headers = v
	return s
}

func (s *ListPhoneNumbersResponse) SetStatusCode(v int32) *ListPhoneNumbersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPhoneNumbersResponse) SetBody(v *ListPhoneNumbersResponseBody) *ListPhoneNumbersResponse {
	s.Body = v
	return s
}

type ListPhoneNumbersOfSkillGroupRequest struct {
	// example:
	//
	// true
	Active *bool `json:"Active,omitempty" xml:"Active,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// true
	IsMember *bool `json:"IsMember,omitempty" xml:"IsMember,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 0833
	SearchPattern *string `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s ListPhoneNumbersOfSkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersOfSkillGroupRequest) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersOfSkillGroupRequest) SetActive(v bool) *ListPhoneNumbersOfSkillGroupRequest {
	s.Active = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupRequest) SetInstanceId(v string) *ListPhoneNumbersOfSkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupRequest) SetIsMember(v bool) *ListPhoneNumbersOfSkillGroupRequest {
	s.IsMember = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupRequest) SetPageNumber(v int32) *ListPhoneNumbersOfSkillGroupRequest {
	s.PageNumber = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupRequest) SetPageSize(v int32) *ListPhoneNumbersOfSkillGroupRequest {
	s.PageSize = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupRequest) SetSearchPattern(v string) *ListPhoneNumbersOfSkillGroupRequest {
	s.SearchPattern = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupRequest) SetSkillGroupId(v string) *ListPhoneNumbersOfSkillGroupRequest {
	s.SkillGroupId = &v
	return s
}

type ListPhoneNumbersOfSkillGroupResponseBody struct {
	// example:
	//
	// OK
	Code *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListPhoneNumbersOfSkillGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPhoneNumbersOfSkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersOfSkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersOfSkillGroupResponseBody) SetCode(v string) *ListPhoneNumbersOfSkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupResponseBody) SetData(v *ListPhoneNumbersOfSkillGroupResponseBodyData) *ListPhoneNumbersOfSkillGroupResponseBody {
	s.Data = v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupResponseBody) SetHttpStatusCode(v int32) *ListPhoneNumbersOfSkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupResponseBody) SetMessage(v string) *ListPhoneNumbersOfSkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupResponseBody) SetRequestId(v string) *ListPhoneNumbersOfSkillGroupResponseBody {
	s.RequestId = &v
	return s
}

type ListPhoneNumbersOfSkillGroupResponseBodyData struct {
	List []*ListPhoneNumbersOfSkillGroupResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPhoneNumbersOfSkillGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersOfSkillGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersOfSkillGroupResponseBodyData) SetList(v []*ListPhoneNumbersOfSkillGroupResponseBodyDataList) *ListPhoneNumbersOfSkillGroupResponseBodyData {
	s.List = v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupResponseBodyData) SetPageNumber(v int32) *ListPhoneNumbersOfSkillGroupResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupResponseBodyData) SetPageSize(v int32) *ListPhoneNumbersOfSkillGroupResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupResponseBodyData) SetTotalCount(v int32) *ListPhoneNumbersOfSkillGroupResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListPhoneNumbersOfSkillGroupResponseBodyDataList struct {
	// example:
	//
	// true
	Active *bool   `json:"Active,omitempty" xml:"Active,omitempty"`
	City   *string `json:"City,omitempty" xml:"City,omitempty"`
	// example:
	//
	// a3fb6c62-9b49-4942-ae5b-cf2abd4123ek
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 08330011****
	Number   *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
	// example:
	//
	// Bidirection
	Usage *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s ListPhoneNumbersOfSkillGroupResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersOfSkillGroupResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersOfSkillGroupResponseBodyDataList) SetActive(v bool) *ListPhoneNumbersOfSkillGroupResponseBodyDataList {
	s.Active = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupResponseBodyDataList) SetCity(v string) *ListPhoneNumbersOfSkillGroupResponseBodyDataList {
	s.City = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupResponseBodyDataList) SetContactFlowId(v string) *ListPhoneNumbersOfSkillGroupResponseBodyDataList {
	s.ContactFlowId = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupResponseBodyDataList) SetInstanceId(v string) *ListPhoneNumbersOfSkillGroupResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupResponseBodyDataList) SetNumber(v string) *ListPhoneNumbersOfSkillGroupResponseBodyDataList {
	s.Number = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupResponseBodyDataList) SetProvince(v string) *ListPhoneNumbersOfSkillGroupResponseBodyDataList {
	s.Province = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupResponseBodyDataList) SetUsage(v string) *ListPhoneNumbersOfSkillGroupResponseBodyDataList {
	s.Usage = &v
	return s
}

type ListPhoneNumbersOfSkillGroupResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPhoneNumbersOfSkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPhoneNumbersOfSkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersOfSkillGroupResponse) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersOfSkillGroupResponse) SetHeaders(v map[string]*string) *ListPhoneNumbersOfSkillGroupResponse {
	s.Headers = v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupResponse) SetStatusCode(v int32) *ListPhoneNumbersOfSkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPhoneNumbersOfSkillGroupResponse) SetBody(v *ListPhoneNumbersOfSkillGroupResponseBody) *ListPhoneNumbersOfSkillGroupResponse {
	s.Body = v
	return s
}

type ListPrivilegesOfUserRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ListPrivilegesOfUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPrivilegesOfUserRequest) GoString() string {
	return s.String()
}

func (s *ListPrivilegesOfUserRequest) SetInstanceId(v string) *ListPrivilegesOfUserRequest {
	s.InstanceId = &v
	return s
}

type ListPrivilegesOfUserResponseBody struct {
	// example:
	//
	// OK
	Code *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListPrivilegesOfUserResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPrivilegesOfUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPrivilegesOfUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListPrivilegesOfUserResponseBody) SetCode(v string) *ListPrivilegesOfUserResponseBody {
	s.Code = &v
	return s
}

func (s *ListPrivilegesOfUserResponseBody) SetData(v []*ListPrivilegesOfUserResponseBodyData) *ListPrivilegesOfUserResponseBody {
	s.Data = v
	return s
}

func (s *ListPrivilegesOfUserResponseBody) SetHttpStatusCode(v int32) *ListPrivilegesOfUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListPrivilegesOfUserResponseBody) SetMessage(v string) *ListPrivilegesOfUserResponseBody {
	s.Message = &v
	return s
}

func (s *ListPrivilegesOfUserResponseBody) SetRequestId(v string) *ListPrivilegesOfUserResponseBody {
	s.RequestId = &v
	return s
}

type ListPrivilegesOfUserResponseBodyData struct {
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// Workbench:Call
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// SELF_ONLY
	Scope *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
}

func (s ListPrivilegesOfUserResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListPrivilegesOfUserResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListPrivilegesOfUserResponseBodyData) SetInstanceId(v string) *ListPrivilegesOfUserResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *ListPrivilegesOfUserResponseBodyData) SetName(v string) *ListPrivilegesOfUserResponseBodyData {
	s.Name = &v
	return s
}

func (s *ListPrivilegesOfUserResponseBodyData) SetScope(v string) *ListPrivilegesOfUserResponseBodyData {
	s.Scope = &v
	return s
}

type ListPrivilegesOfUserResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPrivilegesOfUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPrivilegesOfUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPrivilegesOfUserResponse) GoString() string {
	return s.String()
}

func (s *ListPrivilegesOfUserResponse) SetHeaders(v map[string]*string) *ListPrivilegesOfUserResponse {
	s.Headers = v
	return s
}

func (s *ListPrivilegesOfUserResponse) SetStatusCode(v int32) *ListPrivilegesOfUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPrivilegesOfUserResponse) SetBody(v *ListPrivilegesOfUserResponseBody) *ListPrivilegesOfUserResponse {
	s.Body = v
	return s
}

type ListRamUsersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// agent
	SearchPattern *string `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
}

func (s ListRamUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRamUsersRequest) GoString() string {
	return s.String()
}

func (s *ListRamUsersRequest) SetInstanceId(v string) *ListRamUsersRequest {
	s.InstanceId = &v
	return s
}

func (s *ListRamUsersRequest) SetPageNumber(v int32) *ListRamUsersRequest {
	s.PageNumber = &v
	return s
}

func (s *ListRamUsersRequest) SetPageSize(v int32) *ListRamUsersRequest {
	s.PageSize = &v
	return s
}

func (s *ListRamUsersRequest) SetSearchPattern(v string) *ListRamUsersRequest {
	s.SearchPattern = &v
	return s
}

type ListRamUsersResponseBody struct {
	// example:
	//
	// OK
	Code *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListRamUsersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 24753D71-C91D-1A38-A8AD-372BF12453F6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListRamUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRamUsersResponseBody) GoString() string {
	return s.String()
}

func (s *ListRamUsersResponseBody) SetCode(v string) *ListRamUsersResponseBody {
	s.Code = &v
	return s
}

func (s *ListRamUsersResponseBody) SetData(v *ListRamUsersResponseBodyData) *ListRamUsersResponseBody {
	s.Data = v
	return s
}

func (s *ListRamUsersResponseBody) SetHttpStatusCode(v int32) *ListRamUsersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListRamUsersResponseBody) SetMessage(v string) *ListRamUsersResponseBody {
	s.Message = &v
	return s
}

func (s *ListRamUsersResponseBody) SetParams(v []*string) *ListRamUsersResponseBody {
	s.Params = v
	return s
}

func (s *ListRamUsersResponseBody) SetRequestId(v string) *ListRamUsersResponseBody {
	s.RequestId = &v
	return s
}

type ListRamUsersResponseBodyData struct {
	List []*ListRamUsersResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListRamUsersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListRamUsersResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListRamUsersResponseBodyData) SetList(v []*ListRamUsersResponseBodyDataList) *ListRamUsersResponseBodyData {
	s.List = v
	return s
}

func (s *ListRamUsersResponseBodyData) SetPageNumber(v int32) *ListRamUsersResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListRamUsersResponseBodyData) SetPageSize(v int32) *ListRamUsersResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListRamUsersResponseBodyData) SetTotalCount(v int32) *ListRamUsersResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListRamUsersResponseBodyDataList struct {
	// example:
	//
	// 15772400000****
	AliyunUid   *int64  `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// example:
	//
	// agent
	LoginName *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	// example:
	//
	// 1382114****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	Primary *bool `json:"Primary,omitempty" xml:"Primary,omitempty"`
	// example:
	//
	// 28036411123456****
	RamId *string `json:"RamId,omitempty" xml:"RamId,omitempty"`
}

func (s ListRamUsersResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListRamUsersResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListRamUsersResponseBodyDataList) SetAliyunUid(v int64) *ListRamUsersResponseBodyDataList {
	s.AliyunUid = &v
	return s
}

func (s *ListRamUsersResponseBodyDataList) SetDisplayName(v string) *ListRamUsersResponseBodyDataList {
	s.DisplayName = &v
	return s
}

func (s *ListRamUsersResponseBodyDataList) SetEmail(v string) *ListRamUsersResponseBodyDataList {
	s.Email = &v
	return s
}

func (s *ListRamUsersResponseBodyDataList) SetLoginName(v string) *ListRamUsersResponseBodyDataList {
	s.LoginName = &v
	return s
}

func (s *ListRamUsersResponseBodyDataList) SetMobile(v string) *ListRamUsersResponseBodyDataList {
	s.Mobile = &v
	return s
}

func (s *ListRamUsersResponseBodyDataList) SetPrimary(v bool) *ListRamUsersResponseBodyDataList {
	s.Primary = &v
	return s
}

func (s *ListRamUsersResponseBodyDataList) SetRamId(v string) *ListRamUsersResponseBodyDataList {
	s.RamId = &v
	return s
}

type ListRamUsersResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRamUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRamUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRamUsersResponse) GoString() string {
	return s.String()
}

func (s *ListRamUsersResponse) SetHeaders(v map[string]*string) *ListRamUsersResponse {
	s.Headers = v
	return s
}

func (s *ListRamUsersResponse) SetStatusCode(v int32) *ListRamUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRamUsersResponse) SetBody(v *ListRamUsersResponseBody) *ListRamUsersResponse {
	s.Body = v
	return s
}

type ListRealtimeAgentStatesRequest struct {
	// example:
	//
	// ["agent1@ccc-test", "agent2@ccc-test"]
	AgentIdList *string `json:"AgentIdList,omitempty" xml:"AgentIdList,omitempty"`
	// example:
	//
	// agent
	AgentName *string `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	// example:
	//
	// ["INBOUND", "OUTBOUND"]
	CallTypeList *string `json:"CallTypeList,omitempty" xml:"CallTypeList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MediaType  *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// agent
	Query *string `json:"Query,omitempty" xml:"Query,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// ["ACW", "Dialing"]
	StateList *string `json:"StateList,omitempty" xml:"StateList,omitempty"`
	// example:
	//
	// ["OFFICE_PHONE","ON_SITE"]
	WorkModeList *string `json:"WorkModeList,omitempty" xml:"WorkModeList,omitempty"`
}

func (s ListRealtimeAgentStatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRealtimeAgentStatesRequest) GoString() string {
	return s.String()
}

func (s *ListRealtimeAgentStatesRequest) SetAgentIdList(v string) *ListRealtimeAgentStatesRequest {
	s.AgentIdList = &v
	return s
}

func (s *ListRealtimeAgentStatesRequest) SetAgentName(v string) *ListRealtimeAgentStatesRequest {
	s.AgentName = &v
	return s
}

func (s *ListRealtimeAgentStatesRequest) SetCallTypeList(v string) *ListRealtimeAgentStatesRequest {
	s.CallTypeList = &v
	return s
}

func (s *ListRealtimeAgentStatesRequest) SetInstanceId(v string) *ListRealtimeAgentStatesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListRealtimeAgentStatesRequest) SetMediaType(v string) *ListRealtimeAgentStatesRequest {
	s.MediaType = &v
	return s
}

func (s *ListRealtimeAgentStatesRequest) SetOutboundScenario(v bool) *ListRealtimeAgentStatesRequest {
	s.OutboundScenario = &v
	return s
}

func (s *ListRealtimeAgentStatesRequest) SetPageNumber(v int32) *ListRealtimeAgentStatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListRealtimeAgentStatesRequest) SetPageSize(v int32) *ListRealtimeAgentStatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListRealtimeAgentStatesRequest) SetQuery(v string) *ListRealtimeAgentStatesRequest {
	s.Query = &v
	return s
}

func (s *ListRealtimeAgentStatesRequest) SetSkillGroupId(v string) *ListRealtimeAgentStatesRequest {
	s.SkillGroupId = &v
	return s
}

func (s *ListRealtimeAgentStatesRequest) SetStateList(v string) *ListRealtimeAgentStatesRequest {
	s.StateList = &v
	return s
}

func (s *ListRealtimeAgentStatesRequest) SetWorkModeList(v string) *ListRealtimeAgentStatesRequest {
	s.WorkModeList = &v
	return s
}

type ListRealtimeAgentStatesResponseBody struct {
	// example:
	//
	// OK
	Code *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListRealtimeAgentStatesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListRealtimeAgentStatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRealtimeAgentStatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListRealtimeAgentStatesResponseBody) SetCode(v string) *ListRealtimeAgentStatesResponseBody {
	s.Code = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBody) SetData(v *ListRealtimeAgentStatesResponseBodyData) *ListRealtimeAgentStatesResponseBody {
	s.Data = v
	return s
}

func (s *ListRealtimeAgentStatesResponseBody) SetHttpStatusCode(v int32) *ListRealtimeAgentStatesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBody) SetMessage(v string) *ListRealtimeAgentStatesResponseBody {
	s.Message = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBody) SetRequestId(v string) *ListRealtimeAgentStatesResponseBody {
	s.RequestId = &v
	return s
}

type ListRealtimeAgentStatesResponseBodyData struct {
	List []*ListRealtimeAgentStatesResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListRealtimeAgentStatesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListRealtimeAgentStatesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListRealtimeAgentStatesResponseBodyData) SetList(v []*ListRealtimeAgentStatesResponseBodyDataList) *ListRealtimeAgentStatesResponseBodyData {
	s.List = v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyData) SetPageNumber(v int32) *ListRealtimeAgentStatesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyData) SetPageSize(v int32) *ListRealtimeAgentStatesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyData) SetTotalCount(v int32) *ListRealtimeAgentStatesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListRealtimeAgentStatesResponseBodyDataList struct {
	// example:
	//
	// agent1@ccc-test
	AgentId   *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName *string `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	// example:
	//
	// Outbound
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// agent@ccc-test
	CounterParty *string `json:"CounterParty,omitempty" xml:"CounterParty,omitempty"`
	// example:
	//
	// 16
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 80317391
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 1382114****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario   *bool     `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	SkillGroupIdList   []*string `json:"SkillGroupIdList,omitempty" xml:"SkillGroupIdList,omitempty" type:"Repeated"`
	SkillGroupNameList []*string `json:"SkillGroupNameList,omitempty" xml:"SkillGroupNameList,omitempty" type:"Repeated"`
	// example:
	//
	// ACW
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// Monitored
	StateCode *string `json:"StateCode,omitempty" xml:"StateCode,omitempty"`
	// example:
	//
	// 8
	StateTime *int64 `json:"StateTime,omitempty" xml:"StateTime,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s ListRealtimeAgentStatesResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListRealtimeAgentStatesResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListRealtimeAgentStatesResponseBodyDataList) SetAgentId(v string) *ListRealtimeAgentStatesResponseBodyDataList {
	s.AgentId = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyDataList) SetAgentName(v string) *ListRealtimeAgentStatesResponseBodyDataList {
	s.AgentName = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyDataList) SetCallType(v string) *ListRealtimeAgentStatesResponseBodyDataList {
	s.CallType = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyDataList) SetCounterParty(v string) *ListRealtimeAgentStatesResponseBodyDataList {
	s.CounterParty = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyDataList) SetDuration(v int64) *ListRealtimeAgentStatesResponseBodyDataList {
	s.Duration = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyDataList) SetExtension(v string) *ListRealtimeAgentStatesResponseBodyDataList {
	s.Extension = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyDataList) SetInstanceId(v string) *ListRealtimeAgentStatesResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyDataList) SetMobile(v string) *ListRealtimeAgentStatesResponseBodyDataList {
	s.Mobile = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyDataList) SetOutboundScenario(v bool) *ListRealtimeAgentStatesResponseBodyDataList {
	s.OutboundScenario = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyDataList) SetSkillGroupIdList(v []*string) *ListRealtimeAgentStatesResponseBodyDataList {
	s.SkillGroupIdList = v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyDataList) SetSkillGroupNameList(v []*string) *ListRealtimeAgentStatesResponseBodyDataList {
	s.SkillGroupNameList = v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyDataList) SetState(v string) *ListRealtimeAgentStatesResponseBodyDataList {
	s.State = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyDataList) SetStateCode(v string) *ListRealtimeAgentStatesResponseBodyDataList {
	s.StateCode = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyDataList) SetStateTime(v int64) *ListRealtimeAgentStatesResponseBodyDataList {
	s.StateTime = &v
	return s
}

func (s *ListRealtimeAgentStatesResponseBodyDataList) SetWorkMode(v string) *ListRealtimeAgentStatesResponseBodyDataList {
	s.WorkMode = &v
	return s
}

type ListRealtimeAgentStatesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRealtimeAgentStatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRealtimeAgentStatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRealtimeAgentStatesResponse) GoString() string {
	return s.String()
}

func (s *ListRealtimeAgentStatesResponse) SetHeaders(v map[string]*string) *ListRealtimeAgentStatesResponse {
	s.Headers = v
	return s
}

func (s *ListRealtimeAgentStatesResponse) SetStatusCode(v int32) *ListRealtimeAgentStatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRealtimeAgentStatesResponse) SetBody(v *ListRealtimeAgentStatesResponseBody) *ListRealtimeAgentStatesResponse {
	s.Body = v
	return s
}

type ListRealtimeSkillGroupStatesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MediaType  *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ["skillgroup1@ccc-test", "skillgroup2@ccc-test"]
	SkillGroupIdList *string `json:"SkillGroupIdList,omitempty" xml:"SkillGroupIdList,omitempty"`
}

func (s ListRealtimeSkillGroupStatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRealtimeSkillGroupStatesRequest) GoString() string {
	return s.String()
}

func (s *ListRealtimeSkillGroupStatesRequest) SetInstanceId(v string) *ListRealtimeSkillGroupStatesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesRequest) SetMediaType(v string) *ListRealtimeSkillGroupStatesRequest {
	s.MediaType = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesRequest) SetPageNumber(v int32) *ListRealtimeSkillGroupStatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesRequest) SetPageSize(v int32) *ListRealtimeSkillGroupStatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesRequest) SetSkillGroupIdList(v string) *ListRealtimeSkillGroupStatesRequest {
	s.SkillGroupIdList = &v
	return s
}

type ListRealtimeSkillGroupStatesResponseBody struct {
	// example:
	//
	// OK
	Code *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListRealtimeSkillGroupStatesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 26A34338-5CD9-4C95-A7A6-5BDCE76C6B94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListRealtimeSkillGroupStatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRealtimeSkillGroupStatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListRealtimeSkillGroupStatesResponseBody) SetCode(v string) *ListRealtimeSkillGroupStatesResponseBody {
	s.Code = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBody) SetData(v *ListRealtimeSkillGroupStatesResponseBodyData) *ListRealtimeSkillGroupStatesResponseBody {
	s.Data = v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBody) SetHttpStatusCode(v int32) *ListRealtimeSkillGroupStatesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBody) SetMessage(v string) *ListRealtimeSkillGroupStatesResponseBody {
	s.Message = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBody) SetRequestId(v string) *ListRealtimeSkillGroupStatesResponseBody {
	s.RequestId = &v
	return s
}

type ListRealtimeSkillGroupStatesResponseBodyData struct {
	List []*ListRealtimeSkillGroupStatesResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 2
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListRealtimeSkillGroupStatesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListRealtimeSkillGroupStatesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListRealtimeSkillGroupStatesResponseBodyData) SetList(v []*ListRealtimeSkillGroupStatesResponseBodyDataList) *ListRealtimeSkillGroupStatesResponseBodyData {
	s.List = v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBodyData) SetPageNumber(v int32) *ListRealtimeSkillGroupStatesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBodyData) SetPageSize(v int32) *ListRealtimeSkillGroupStatesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBodyData) SetTotalCount(v int32) *ListRealtimeSkillGroupStatesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListRealtimeSkillGroupStatesResponseBodyDataList struct {
	BreakCodeDetailList []*ListRealtimeSkillGroupStatesResponseBodyDataListBreakCodeDetailList `json:"BreakCodeDetailList,omitempty" xml:"BreakCodeDetailList,omitempty" type:"Repeated"`
	// example:
	//
	// 0
	BreakingAgents *int64 `json:"BreakingAgents,omitempty" xml:"BreakingAgents,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 2
	LoggedInAgents *int64 `json:"LoggedInAgents,omitempty" xml:"LoggedInAgents,omitempty"`
	// example:
	//
	// 0
	LongestWaitingTime *int64 `json:"LongestWaitingTime,omitempty" xml:"LongestWaitingTime,omitempty"`
	// example:
	//
	// 0
	OutboundScenarioReadyAgents *int64 `json:"OutboundScenarioReadyAgents,omitempty" xml:"OutboundScenarioReadyAgents,omitempty"`
	// example:
	//
	// 2
	ReadyAgents *int64 `json:"ReadyAgents,omitempty" xml:"ReadyAgents,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// skillgroup
	SkillGroupName *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
	// example:
	//
	// 0
	TalkingAgents *int64 `json:"TalkingAgents,omitempty" xml:"TalkingAgents,omitempty"`
	TotalAgents   *int64 `json:"TotalAgents,omitempty" xml:"TotalAgents,omitempty"`
	// example:
	//
	// 0
	WaitingCalls *int64 `json:"WaitingCalls,omitempty" xml:"WaitingCalls,omitempty"`
	// example:
	//
	// 0
	WorkingAgents *int64 `json:"WorkingAgents,omitempty" xml:"WorkingAgents,omitempty"`
}

func (s ListRealtimeSkillGroupStatesResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListRealtimeSkillGroupStatesResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListRealtimeSkillGroupStatesResponseBodyDataList) SetBreakCodeDetailList(v []*ListRealtimeSkillGroupStatesResponseBodyDataListBreakCodeDetailList) *ListRealtimeSkillGroupStatesResponseBodyDataList {
	s.BreakCodeDetailList = v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBodyDataList) SetBreakingAgents(v int64) *ListRealtimeSkillGroupStatesResponseBodyDataList {
	s.BreakingAgents = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBodyDataList) SetInstanceId(v string) *ListRealtimeSkillGroupStatesResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBodyDataList) SetLoggedInAgents(v int64) *ListRealtimeSkillGroupStatesResponseBodyDataList {
	s.LoggedInAgents = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBodyDataList) SetLongestWaitingTime(v int64) *ListRealtimeSkillGroupStatesResponseBodyDataList {
	s.LongestWaitingTime = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBodyDataList) SetOutboundScenarioReadyAgents(v int64) *ListRealtimeSkillGroupStatesResponseBodyDataList {
	s.OutboundScenarioReadyAgents = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBodyDataList) SetReadyAgents(v int64) *ListRealtimeSkillGroupStatesResponseBodyDataList {
	s.ReadyAgents = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBodyDataList) SetSkillGroupId(v string) *ListRealtimeSkillGroupStatesResponseBodyDataList {
	s.SkillGroupId = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBodyDataList) SetSkillGroupName(v string) *ListRealtimeSkillGroupStatesResponseBodyDataList {
	s.SkillGroupName = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBodyDataList) SetTalkingAgents(v int64) *ListRealtimeSkillGroupStatesResponseBodyDataList {
	s.TalkingAgents = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBodyDataList) SetTotalAgents(v int64) *ListRealtimeSkillGroupStatesResponseBodyDataList {
	s.TotalAgents = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBodyDataList) SetWaitingCalls(v int64) *ListRealtimeSkillGroupStatesResponseBodyDataList {
	s.WaitingCalls = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBodyDataList) SetWorkingAgents(v int64) *ListRealtimeSkillGroupStatesResponseBodyDataList {
	s.WorkingAgents = &v
	return s
}

type ListRealtimeSkillGroupStatesResponseBodyDataListBreakCodeDetailList struct {
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	Count     *int64  `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s ListRealtimeSkillGroupStatesResponseBodyDataListBreakCodeDetailList) String() string {
	return tea.Prettify(s)
}

func (s ListRealtimeSkillGroupStatesResponseBodyDataListBreakCodeDetailList) GoString() string {
	return s.String()
}

func (s *ListRealtimeSkillGroupStatesResponseBodyDataListBreakCodeDetailList) SetBreakCode(v string) *ListRealtimeSkillGroupStatesResponseBodyDataListBreakCodeDetailList {
	s.BreakCode = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponseBodyDataListBreakCodeDetailList) SetCount(v int64) *ListRealtimeSkillGroupStatesResponseBodyDataListBreakCodeDetailList {
	s.Count = &v
	return s
}

type ListRealtimeSkillGroupStatesResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRealtimeSkillGroupStatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRealtimeSkillGroupStatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRealtimeSkillGroupStatesResponse) GoString() string {
	return s.String()
}

func (s *ListRealtimeSkillGroupStatesResponse) SetHeaders(v map[string]*string) *ListRealtimeSkillGroupStatesResponse {
	s.Headers = v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponse) SetStatusCode(v int32) *ListRealtimeSkillGroupStatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRealtimeSkillGroupStatesResponse) SetBody(v *ListRealtimeSkillGroupStatesResponseBody) *ListRealtimeSkillGroupStatesResponse {
	s.Body = v
	return s
}

type ListRecentCallDetailRecordsRequest struct {
	// example:
	//
	// {"phoneNumber":"1312121****","callingNumber":"1312121****","calledNumber":"1312121****"}
	Criteria *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	// example:
	//
	// 1604639129000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1604638129000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListRecentCallDetailRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRecentCallDetailRecordsRequest) GoString() string {
	return s.String()
}

func (s *ListRecentCallDetailRecordsRequest) SetCriteria(v string) *ListRecentCallDetailRecordsRequest {
	s.Criteria = &v
	return s
}

func (s *ListRecentCallDetailRecordsRequest) SetEndTime(v int64) *ListRecentCallDetailRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *ListRecentCallDetailRecordsRequest) SetInstanceId(v string) *ListRecentCallDetailRecordsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListRecentCallDetailRecordsRequest) SetPageNumber(v int32) *ListRecentCallDetailRecordsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListRecentCallDetailRecordsRequest) SetPageSize(v int32) *ListRecentCallDetailRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *ListRecentCallDetailRecordsRequest) SetStartTime(v int64) *ListRecentCallDetailRecordsRequest {
	s.StartTime = &v
	return s
}

type ListRecentCallDetailRecordsResponseBody struct {
	// example:
	//
	// OK
	Code *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListRecentCallDetailRecordsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListRecentCallDetailRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRecentCallDetailRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *ListRecentCallDetailRecordsResponseBody) SetCode(v string) *ListRecentCallDetailRecordsResponseBody {
	s.Code = &v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBody) SetData(v *ListRecentCallDetailRecordsResponseBodyData) *ListRecentCallDetailRecordsResponseBody {
	s.Data = v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBody) SetHttpStatusCode(v int32) *ListRecentCallDetailRecordsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBody) SetMessage(v string) *ListRecentCallDetailRecordsResponseBody {
	s.Message = &v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBody) SetRequestId(v string) *ListRecentCallDetailRecordsResponseBody {
	s.RequestId = &v
	return s
}

type ListRecentCallDetailRecordsResponseBodyData struct {
	List []*ListRecentCallDetailRecordsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 11
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListRecentCallDetailRecordsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListRecentCallDetailRecordsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListRecentCallDetailRecordsResponseBodyData) SetList(v []*ListRecentCallDetailRecordsResponseBodyDataList) *ListRecentCallDetailRecordsResponseBodyData {
	s.List = v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBodyData) SetPageNumber(v int32) *ListRecentCallDetailRecordsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBodyData) SetPageSize(v int32) *ListRecentCallDetailRecordsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBodyData) SetTotalCount(v int32) *ListRecentCallDetailRecordsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListRecentCallDetailRecordsResponseBodyDataList struct {
	// example:
	//
	// agent@ccc-test
	AgentIds *string `json:"AgentIds,omitempty" xml:"AgentIds,omitempty"`
	// example:
	//
	// 16
	CallDuration *string `json:"CallDuration,omitempty" xml:"CallDuration,omitempty"`
	// example:
	//
	// 1332315****
	CalledNumber *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	// example:
	//
	// 0533128****
	CallingNumber *string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	// example:
	//
	// Success
	ContactDisposition *string `json:"ContactDisposition,omitempty" xml:"ContactDisposition,omitempty"`
	// example:
	//
	// job-7660472242845****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// example:
	//
	// Outbound
	ContactType *string `json:"ContactType,omitempty" xml:"ContactType,omitempty"`
	// example:
	//
	// 16
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupIds *string `json:"SkillGroupIds,omitempty" xml:"SkillGroupIds,omitempty"`
	// example:
	//
	// 1532448000000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListRecentCallDetailRecordsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListRecentCallDetailRecordsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListRecentCallDetailRecordsResponseBodyDataList) SetAgentIds(v string) *ListRecentCallDetailRecordsResponseBodyDataList {
	s.AgentIds = &v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBodyDataList) SetCallDuration(v string) *ListRecentCallDetailRecordsResponseBodyDataList {
	s.CallDuration = &v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBodyDataList) SetCalledNumber(v string) *ListRecentCallDetailRecordsResponseBodyDataList {
	s.CalledNumber = &v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBodyDataList) SetCallingNumber(v string) *ListRecentCallDetailRecordsResponseBodyDataList {
	s.CallingNumber = &v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBodyDataList) SetContactDisposition(v string) *ListRecentCallDetailRecordsResponseBodyDataList {
	s.ContactDisposition = &v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBodyDataList) SetContactId(v string) *ListRecentCallDetailRecordsResponseBodyDataList {
	s.ContactId = &v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBodyDataList) SetContactType(v string) *ListRecentCallDetailRecordsResponseBodyDataList {
	s.ContactType = &v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBodyDataList) SetDuration(v int64) *ListRecentCallDetailRecordsResponseBodyDataList {
	s.Duration = &v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBodyDataList) SetInstanceId(v string) *ListRecentCallDetailRecordsResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBodyDataList) SetSkillGroupIds(v string) *ListRecentCallDetailRecordsResponseBodyDataList {
	s.SkillGroupIds = &v
	return s
}

func (s *ListRecentCallDetailRecordsResponseBodyDataList) SetStartTime(v int64) *ListRecentCallDetailRecordsResponseBodyDataList {
	s.StartTime = &v
	return s
}

type ListRecentCallDetailRecordsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRecentCallDetailRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRecentCallDetailRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRecentCallDetailRecordsResponse) GoString() string {
	return s.String()
}

func (s *ListRecentCallDetailRecordsResponse) SetHeaders(v map[string]*string) *ListRecentCallDetailRecordsResponse {
	s.Headers = v
	return s
}

func (s *ListRecentCallDetailRecordsResponse) SetStatusCode(v int32) *ListRecentCallDetailRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRecentCallDetailRecordsResponse) SetBody(v *ListRecentCallDetailRecordsResponseBody) *ListRecentCallDetailRecordsResponse {
	s.Body = v
	return s
}

type ListRolesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ListRolesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRolesRequest) GoString() string {
	return s.String()
}

func (s *ListRolesRequest) SetInstanceId(v string) *ListRolesRequest {
	s.InstanceId = &v
	return s
}

type ListRolesResponseBody struct {
	// example:
	//
	// OK
	Code *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListRolesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 711D948F-C616-4E23-8573-0F260513CE09
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListRolesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRolesResponseBody) GoString() string {
	return s.String()
}

func (s *ListRolesResponseBody) SetCode(v string) *ListRolesResponseBody {
	s.Code = &v
	return s
}

func (s *ListRolesResponseBody) SetData(v []*ListRolesResponseBodyData) *ListRolesResponseBody {
	s.Data = v
	return s
}

func (s *ListRolesResponseBody) SetHttpStatusCode(v int32) *ListRolesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListRolesResponseBody) SetMessage(v string) *ListRolesResponseBody {
	s.Message = &v
	return s
}

func (s *ListRolesResponseBody) SetRequestId(v string) *ListRolesResponseBody {
	s.RequestId = &v
	return s
}

type ListRolesResponseBodyData struct {
	// example:
	//
	// Admin
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Admin@ccc-test
	RoleId *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
}

func (s ListRolesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListRolesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListRolesResponseBodyData) SetName(v string) *ListRolesResponseBodyData {
	s.Name = &v
	return s
}

func (s *ListRolesResponseBodyData) SetRoleId(v string) *ListRolesResponseBodyData {
	s.RoleId = &v
	return s
}

type ListRolesResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRolesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRolesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRolesResponse) GoString() string {
	return s.String()
}

func (s *ListRolesResponse) SetHeaders(v map[string]*string) *ListRolesResponse {
	s.Headers = v
	return s
}

func (s *ListRolesResponse) SetStatusCode(v int32) *ListRolesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRolesResponse) SetBody(v *ListRolesResponseBody) *ListRolesResponse {
	s.Body = v
	return s
}

type ListSkillGroupStatesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ["skillgroup1@ccc-test","skillgroup2@ccc-test"]
	SkillGroupIds *string `json:"SkillGroupIds,omitempty" xml:"SkillGroupIds,omitempty"`
}

func (s ListSkillGroupStatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupStatesRequest) GoString() string {
	return s.String()
}

func (s *ListSkillGroupStatesRequest) SetInstanceId(v string) *ListSkillGroupStatesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupStatesRequest) SetPageNumber(v int32) *ListSkillGroupStatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSkillGroupStatesRequest) SetPageSize(v int32) *ListSkillGroupStatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListSkillGroupStatesRequest) SetSkillGroupIds(v string) *ListSkillGroupStatesRequest {
	s.SkillGroupIds = &v
	return s
}

type ListSkillGroupStatesResponseBody struct {
	// example:
	//
	// OK
	Code *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListSkillGroupStatesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 1F69EBB0-63E9-5DDE-887F-9FC040ADF309
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListSkillGroupStatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupStatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListSkillGroupStatesResponseBody) SetCode(v string) *ListSkillGroupStatesResponseBody {
	s.Code = &v
	return s
}

func (s *ListSkillGroupStatesResponseBody) SetData(v *ListSkillGroupStatesResponseBodyData) *ListSkillGroupStatesResponseBody {
	s.Data = v
	return s
}

func (s *ListSkillGroupStatesResponseBody) SetHttpStatusCode(v int32) *ListSkillGroupStatesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListSkillGroupStatesResponseBody) SetMessage(v string) *ListSkillGroupStatesResponseBody {
	s.Message = &v
	return s
}

func (s *ListSkillGroupStatesResponseBody) SetRequestId(v string) *ListSkillGroupStatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSkillGroupStatesResponseBody) SetSuccess(v bool) *ListSkillGroupStatesResponseBody {
	s.Success = &v
	return s
}

type ListSkillGroupStatesResponseBodyData struct {
	List []*ListSkillGroupStatesResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSkillGroupStatesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupStatesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListSkillGroupStatesResponseBodyData) SetList(v []*ListSkillGroupStatesResponseBodyDataList) *ListSkillGroupStatesResponseBodyData {
	s.List = v
	return s
}

func (s *ListSkillGroupStatesResponseBodyData) SetPageNumber(v int32) *ListSkillGroupStatesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyData) SetPageSize(v int32) *ListSkillGroupStatesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyData) SetTotalCount(v int32) *ListSkillGroupStatesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListSkillGroupStatesResponseBodyDataList struct {
	// example:
	//
	// 3
	AverageWaitingTime *int64 `json:"AverageWaitingTime,omitempty" xml:"AverageWaitingTime,omitempty"`
	// example:
	//
	// 0
	BreakingAgents       *int64 `json:"BreakingAgents,omitempty" xml:"BreakingAgents,omitempty"`
	InboundTalkingAgents *int64 `json:"InboundTalkingAgents,omitempty" xml:"InboundTalkingAgents,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 0
	LoggedInAgents *int64 `json:"LoggedInAgents,omitempty" xml:"LoggedInAgents,omitempty"`
	// example:
	//
	// 0
	LongestCall *int64 `json:"LongestCall,omitempty" xml:"LongestCall,omitempty"`
	// example:
	//
	// 0
	OutboundScenarioReadyAgents *int64 `json:"OutboundScenarioReadyAgents,omitempty" xml:"OutboundScenarioReadyAgents,omitempty"`
	OutboundTalkingAgents       *int64 `json:"OutboundTalkingAgents,omitempty" xml:"OutboundTalkingAgents,omitempty"`
	// example:
	//
	// 1
	ReadyAgents *int64 `json:"ReadyAgents,omitempty" xml:"ReadyAgents,omitempty"`
	// example:
	//
	// skillgroup1@ccc-test
	SkillGroupId   *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
	// example:
	//
	// 0
	TalkingAgents *int64 `json:"TalkingAgents,omitempty" xml:"TalkingAgents,omitempty"`
	// example:
	//
	// 0
	WaitingCalls *int64 `json:"WaitingCalls,omitempty" xml:"WaitingCalls,omitempty"`
	// example:
	//
	// 0
	WaitingCallsLevel10 *int64 `json:"WaitingCallsLevel10,omitempty" xml:"WaitingCallsLevel10,omitempty"`
	// example:
	//
	// 0
	WaitingCallsLevel20 *int64 `json:"WaitingCallsLevel20,omitempty" xml:"WaitingCallsLevel20,omitempty"`
	// example:
	//
	// 0
	WaitingCallsLevel30 *int64 `json:"WaitingCallsLevel30,omitempty" xml:"WaitingCallsLevel30,omitempty"`
	// example:
	//
	// 0
	WorkingAgents *int64 `json:"WorkingAgents,omitempty" xml:"WorkingAgents,omitempty"`
}

func (s ListSkillGroupStatesResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupStatesResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetAverageWaitingTime(v int64) *ListSkillGroupStatesResponseBodyDataList {
	s.AverageWaitingTime = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetBreakingAgents(v int64) *ListSkillGroupStatesResponseBodyDataList {
	s.BreakingAgents = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetInboundTalkingAgents(v int64) *ListSkillGroupStatesResponseBodyDataList {
	s.InboundTalkingAgents = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetInstanceId(v string) *ListSkillGroupStatesResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetLoggedInAgents(v int64) *ListSkillGroupStatesResponseBodyDataList {
	s.LoggedInAgents = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetLongestCall(v int64) *ListSkillGroupStatesResponseBodyDataList {
	s.LongestCall = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetOutboundScenarioReadyAgents(v int64) *ListSkillGroupStatesResponseBodyDataList {
	s.OutboundScenarioReadyAgents = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetOutboundTalkingAgents(v int64) *ListSkillGroupStatesResponseBodyDataList {
	s.OutboundTalkingAgents = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetReadyAgents(v int64) *ListSkillGroupStatesResponseBodyDataList {
	s.ReadyAgents = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetSkillGroupId(v string) *ListSkillGroupStatesResponseBodyDataList {
	s.SkillGroupId = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetSkillGroupName(v string) *ListSkillGroupStatesResponseBodyDataList {
	s.SkillGroupName = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetTalkingAgents(v int64) *ListSkillGroupStatesResponseBodyDataList {
	s.TalkingAgents = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetWaitingCalls(v int64) *ListSkillGroupStatesResponseBodyDataList {
	s.WaitingCalls = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetWaitingCallsLevel10(v int64) *ListSkillGroupStatesResponseBodyDataList {
	s.WaitingCallsLevel10 = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetWaitingCallsLevel20(v int64) *ListSkillGroupStatesResponseBodyDataList {
	s.WaitingCallsLevel20 = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetWaitingCallsLevel30(v int64) *ListSkillGroupStatesResponseBodyDataList {
	s.WaitingCallsLevel30 = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetWorkingAgents(v int64) *ListSkillGroupStatesResponseBodyDataList {
	s.WorkingAgents = &v
	return s
}

type ListSkillGroupStatesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSkillGroupStatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSkillGroupStatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupStatesResponse) GoString() string {
	return s.String()
}

func (s *ListSkillGroupStatesResponse) SetHeaders(v map[string]*string) *ListSkillGroupStatesResponse {
	s.Headers = v
	return s
}

func (s *ListSkillGroupStatesResponse) SetStatusCode(v int32) *ListSkillGroupStatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSkillGroupStatesResponse) SetBody(v *ListSkillGroupStatesResponseBody) *ListSkillGroupStatesResponse {
	s.Body = v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ["skillgroup1@ccc-test", "skillgroup2@ccc-test2"]
	SkillGroups *string `json:"SkillGroups,omitempty" xml:"SkillGroups,omitempty"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightRequest) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightRequest) SetInstanceId(v string) *ListSkillGroupSummaryReportsSinceMidnightRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightRequest) SetPageNumber(v int32) *ListSkillGroupSummaryReportsSinceMidnightRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightRequest) SetPageSize(v int32) *ListSkillGroupSummaryReportsSinceMidnightRequest {
	s.PageSize = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightRequest) SetSkillGroups(v string) *ListSkillGroupSummaryReportsSinceMidnightRequest {
	s.SkillGroups = &v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode               *int32                                                                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message                      *string                                                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	PagedSkillGroupSummaryReport *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport `json:"PagedSkillGroupSummaryReport,omitempty" xml:"PagedSkillGroupSummaryReport,omitempty" type:"Struct"`
	// example:
	//
	// 2B36CEBC-6D11-5451-9E6B-C6D1927841C5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBody) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBody) SetCode(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBody {
	s.Code = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBody) SetHttpStatusCode(v int32) *ListSkillGroupSummaryReportsSinceMidnightResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBody) SetMessage(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBody {
	s.Message = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBody) SetPagedSkillGroupSummaryReport(v *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport) *ListSkillGroupSummaryReportsSinceMidnightResponseBody {
	s.PagedSkillGroupSummaryReport = v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBody) SetRequestId(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBody) SetSuccess(v bool) *ListSkillGroupSummaryReportsSinceMidnightResponseBody {
	s.Success = &v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport struct {
	List []*ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 3
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport) SetList(v []*ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport {
	s.List = v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport) SetPageNumber(v int32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport {
	s.PageNumber = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport) SetPageSize(v int32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport {
	s.PageSize = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport) SetTotalCount(v int32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport {
	s.TotalCount = &v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList struct {
	Inbound *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	// example:
	//
	// ccc-test
	InstanceId *string                                                                                        `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Outbound   *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall    *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId   *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
	// example:
	//
	// 2018-09-13 00:00:00
	Timestamp *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList) SetInbound(v *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList {
	s.Inbound = v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList) SetInstanceId(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList) SetOutbound(v *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList {
	s.Outbound = v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList) SetOverall(v *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList {
	s.Overall = v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList) SetSkillGroupId(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList {
	s.SkillGroupId = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList) SetSkillGroupName(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList {
	s.SkillGroupName = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList) SetTimestamp(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList {
	s.Timestamp = &v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound struct {
	// example:
	//
	// 0
	AbandonedInQueueOfQueueCount *int64 `json:"AbandonedInQueueOfQueueCount,omitempty" xml:"AbandonedInQueueOfQueueCount,omitempty"`
	// example:
	//
	// 0
	AnsweredByAgentOfQueueCount *int64 `json:"AnsweredByAgentOfQueueCount,omitempty" xml:"AnsweredByAgentOfQueueCount,omitempty"`
	// example:
	//
	// 0
	AnsweredByAgentOfQueueMaxWaitTimeDuration *int64 `json:"AnsweredByAgentOfQueueMaxWaitTimeDuration,omitempty" xml:"AnsweredByAgentOfQueueMaxWaitTimeDuration,omitempty"`
	// example:
	//
	// 0
	AnsweredByAgentOfQueueWaitTimeDuration *int64 `json:"AnsweredByAgentOfQueueWaitTimeDuration,omitempty" xml:"AnsweredByAgentOfQueueWaitTimeDuration,omitempty"`
	// example:
	//
	// 0
	AverageRingTime *int64 `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *int64 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 0
	AverageWorkTime *int64 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsAbandoned  *int64 `json:"CallsAbandoned,omitempty" xml:"CallsAbandoned,omitempty"`
	// example:
	//
	// 0
	CallsAttendedTransferOut *int64 `json:"CallsAttendedTransferOut,omitempty" xml:"CallsAttendedTransferOut,omitempty"`
	// example:
	//
	// 0
	CallsBlindTransferOut *int64 `json:"CallsBlindTransferOut,omitempty" xml:"CallsBlindTransferOut,omitempty"`
	// example:
	//
	// 0
	CallsHandled *int64 `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	// example:
	//
	// 0
	CallsOffered         *int64  `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	CallsOverflow        *string `json:"CallsOverflow,omitempty" xml:"CallsOverflow,omitempty"`
	CallsQueuingCanceled *string `json:"CallsQueuingCanceled,omitempty" xml:"CallsQueuingCanceled,omitempty"`
	CallsQueuingFailure  *string `json:"CallsQueuingFailure,omitempty" xml:"CallsQueuingFailure,omitempty"`
	CallsQueuingRerouted *string `json:"CallsQueuingRerouted,omitempty" xml:"CallsQueuingRerouted,omitempty"`
	CallsQueuingTimeout  *int64  `json:"CallsQueuingTimeout,omitempty" xml:"CallsQueuingTimeout,omitempty"`
	// example:
	//
	// 0
	CallsServiceLevel10 *int64 `json:"CallsServiceLevel10,omitempty" xml:"CallsServiceLevel10,omitempty"`
	// example:
	//
	// 0
	CallsServiceLevel20 *int64 `json:"CallsServiceLevel20,omitempty" xml:"CallsServiceLevel20,omitempty"`
	// example:
	//
	// 0
	CallsServiceLevel30 *int64 `json:"CallsServiceLevel30,omitempty" xml:"CallsServiceLevel30,omitempty"`
	CallsTimeout        *int64 `json:"CallsTimeout,omitempty" xml:"CallsTimeout,omitempty"`
	// example:
	//
	// 0
	GiveUpByAgentOfQueueCount *int64 `json:"GiveUpByAgentOfQueueCount,omitempty" xml:"GiveUpByAgentOfQueueCount,omitempty"`
	// example:
	//
	// 0
	HandleRate *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	// example:
	//
	// 0
	InComingQueueOfQueueCount *int64 `json:"InComingQueueOfQueueCount,omitempty" xml:"InComingQueueOfQueueCount,omitempty"`
	// example:
	//
	// 0
	MaxRingTime *int64 `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *string `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 0
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	OverFlowInQueueOfQueueCount *int64 `json:"OverFlowInQueueOfQueueCount,omitempty" xml:"OverFlowInQueueOfQueueCount,omitempty"`
	// example:
	//
	// 0
	QueueMaxWaitTimeDuration *int64 `json:"QueueMaxWaitTimeDuration,omitempty" xml:"QueueMaxWaitTimeDuration,omitempty"`
	// example:
	//
	// 0
	QueueWaitTimeDuration *int64 `json:"QueueWaitTimeDuration,omitempty" xml:"QueueWaitTimeDuration,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 0
	ServiceLevel20 *float32 `json:"ServiceLevel20,omitempty" xml:"ServiceLevel20,omitempty"`
	// example:
	//
	// 0
	TotalRingTime *int64 `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 0
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetAbandonedInQueueOfQueueCount(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.AbandonedInQueueOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetAnsweredByAgentOfQueueCount(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.AnsweredByAgentOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetAnsweredByAgentOfQueueMaxWaitTimeDuration(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.AnsweredByAgentOfQueueMaxWaitTimeDuration = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetAnsweredByAgentOfQueueWaitTimeDuration(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.AnsweredByAgentOfQueueWaitTimeDuration = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetAverageRingTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetAverageTalkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetAverageWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetCallsAbandoned(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.CallsAbandoned = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetCallsAttendedTransferOut(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.CallsAttendedTransferOut = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetCallsBlindTransferOut(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.CallsBlindTransferOut = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetCallsHandled(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.CallsHandled = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetCallsOffered(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.CallsOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetCallsOverflow(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.CallsOverflow = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetCallsQueuingCanceled(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.CallsQueuingCanceled = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetCallsQueuingFailure(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.CallsQueuingFailure = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetCallsQueuingRerouted(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.CallsQueuingRerouted = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetCallsQueuingTimeout(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.CallsQueuingTimeout = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetCallsServiceLevel10(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.CallsServiceLevel10 = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetCallsServiceLevel20(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.CallsServiceLevel20 = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetCallsServiceLevel30(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.CallsServiceLevel30 = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetCallsTimeout(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.CallsTimeout = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetGiveUpByAgentOfQueueCount(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.GiveUpByAgentOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetHandleRate(v float32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.HandleRate = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetInComingQueueOfQueueCount(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.InComingQueueOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetMaxRingTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetMaxTalkTime(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetMaxWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetOverFlowInQueueOfQueueCount(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.OverFlowInQueueOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetQueueMaxWaitTimeDuration(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.QueueMaxWaitTimeDuration = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetQueueWaitTimeDuration(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.QueueWaitTimeDuration = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetSatisfactionIndex(v float32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetSatisfactionSurveysOffered(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetSatisfactionSurveysResponded(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetServiceLevel20(v float32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.ServiceLevel20 = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetTotalRingTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetTotalTalkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound) SetTotalWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListInbound {
	s.TotalWorkTime = &v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound struct {
	// example:
	//
	// 0
	AnswerRate *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	// example:
	//
	// 0
	AverageDialingTime *int64 `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *int64 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 0
	AverageWorkTime   *int64 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsAbandoned    *int64 `json:"CallsAbandoned,omitempty" xml:"CallsAbandoned,omitempty"`
	CallsAgentHandled *int64 `json:"CallsAgentHandled,omitempty" xml:"CallsAgentHandled,omitempty"`
	// example:
	//
	// 0
	CallsAnswered *int64 `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	// example:
	//
	// 0
	CallsDialed           *int64 `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	CallsOffered          *int64 `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	CallsQueuingCancelled *int64 `json:"CallsQueuingCancelled,omitempty" xml:"CallsQueuingCancelled,omitempty"`
	CallsQueuingFailed    *int64 `json:"CallsQueuingFailed,omitempty" xml:"CallsQueuingFailed,omitempty"`
	CallsQueuingFailure   *int64 `json:"CallsQueuingFailure,omitempty" xml:"CallsQueuingFailure,omitempty"`
	CallsQueuingOverflow  *int64 `json:"CallsQueuingOverflow,omitempty" xml:"CallsQueuingOverflow,omitempty"`
	CallsQueuingRerouted  *int64 `json:"CallsQueuingRerouted,omitempty" xml:"CallsQueuingRerouted,omitempty"`
	CallsQueuingTimeout   *int64 `json:"CallsQueuingTimeout,omitempty" xml:"CallsQueuingTimeout,omitempty"`
	// example:
	//
	// 0
	CallsServiceLevel30   *string `json:"CallsServiceLevel30,omitempty" xml:"CallsServiceLevel30,omitempty"`
	CallsServiceLevel30V2 *int64  `json:"CallsServiceLevel30V2,omitempty" xml:"CallsServiceLevel30V2,omitempty"`
	// example:
	//
	// 0
	MaxDialingTime *int64 `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 0
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 0
	TotalDialingTime *int64 `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWaitTime *int64 `json:"TotalWaitTime,omitempty" xml:"TotalWaitTime,omitempty"`
	// example:
	//
	// 0
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetAnswerRate(v float32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.AnswerRate = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetAverageDialingTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetAverageTalkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetAverageWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetCallsAbandoned(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.CallsAbandoned = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetCallsAgentHandled(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.CallsAgentHandled = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetCallsAnswered(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetCallsDialed(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.CallsDialed = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetCallsOffered(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.CallsOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetCallsQueuingCancelled(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.CallsQueuingCancelled = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetCallsQueuingFailed(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.CallsQueuingFailed = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetCallsQueuingFailure(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.CallsQueuingFailure = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetCallsQueuingOverflow(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.CallsQueuingOverflow = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetCallsQueuingRerouted(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.CallsQueuingRerouted = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetCallsQueuingTimeout(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.CallsQueuingTimeout = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetCallsServiceLevel30(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.CallsServiceLevel30 = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetCallsServiceLevel30V2(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.CallsServiceLevel30V2 = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetMaxDialingTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetMaxTalkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetMaxWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetSatisfactionIndex(v float32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetSatisfactionSurveysOffered(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetSatisfactionSurveysResponded(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetTotalDialingTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetTotalTalkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetTotalWaitTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.TotalWaitTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound) SetTotalWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOutbound {
	s.TotalWorkTime = &v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall struct {
	// example:
	//
	// 0
	AverageReadyTime *int64 `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	// example:
	//
	// 0
	AverageTalkTime *int64 `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	// example:
	//
	// 0
	AverageWorkTime *int64 `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	// example:
	//
	// 0
	MaxReadyTime *int64 `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	// example:
	//
	// 0
	MaxTalkTime *int64 `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	// example:
	//
	// 0
	MaxWorkTime *int64 `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	// example:
	//
	// 0
	OccupancyRate *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	// example:
	//
	// 0
	SatisfactionIndex *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysOffered *int64 `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	// example:
	//
	// 0
	SatisfactionSurveysResponded *int64 `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	// example:
	//
	// 0
	TotalBreakTime *int64 `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	// example:
	//
	// 0
	TotalCalls *int64 `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	// example:
	//
	// 0
	TotalLoggedInTime *int64 `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	// example:
	//
	// 0
	TotalReadyTime *int64 `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	// example:
	//
	// 0
	TotalTalkTime *int64 `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	// example:
	//
	// 0
	TotalWorkTime *int64 `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) SetAverageReadyTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) SetAverageTalkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) SetAverageWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) SetMaxReadyTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) SetMaxTalkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) SetMaxWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) SetOccupancyRate(v float32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall {
	s.OccupancyRate = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) SetSatisfactionIndex(v float32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) SetSatisfactionSurveysOffered(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) SetSatisfactionSurveysResponded(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) SetTotalBreakTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) SetTotalCalls(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall {
	s.TotalCalls = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) SetTotalLoggedInTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) SetTotalReadyTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) SetTotalTalkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall) SetTotalWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListOverall {
	s.TotalWorkTime = &v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightResponse struct {
	Headers    map[string]*string                                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSkillGroupSummaryReportsSinceMidnightResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponse) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponse) SetHeaders(v map[string]*string) *ListSkillGroupSummaryReportsSinceMidnightResponse {
	s.Headers = v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponse) SetStatusCode(v int32) *ListSkillGroupSummaryReportsSinceMidnightResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponse) SetBody(v *ListSkillGroupSummaryReportsSinceMidnightResponseBody) *ListSkillGroupSummaryReportsSinceMidnightResponse {
	s.Body = v
	return s
}

type ListSkillGroupsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MediaType  *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchPattern *string `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
}

func (s ListSkillGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsRequest) SetInstanceId(v string) *ListSkillGroupsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupsRequest) SetMediaType(v string) *ListSkillGroupsRequest {
	s.MediaType = &v
	return s
}

func (s *ListSkillGroupsRequest) SetPageNumber(v int32) *ListSkillGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSkillGroupsRequest) SetPageSize(v int32) *ListSkillGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *ListSkillGroupsRequest) SetSearchPattern(v string) *ListSkillGroupsRequest {
	s.SearchPattern = &v
	return s
}

type ListSkillGroupsResponseBody struct {
	// example:
	//
	// OK
	Code *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListSkillGroupsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListSkillGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsResponseBody) SetCode(v string) *ListSkillGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *ListSkillGroupsResponseBody) SetData(v *ListSkillGroupsResponseBodyData) *ListSkillGroupsResponseBody {
	s.Data = v
	return s
}

func (s *ListSkillGroupsResponseBody) SetHttpStatusCode(v int32) *ListSkillGroupsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListSkillGroupsResponseBody) SetMessage(v string) *ListSkillGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *ListSkillGroupsResponseBody) SetRequestId(v string) *ListSkillGroupsResponseBody {
	s.RequestId = &v
	return s
}

type ListSkillGroupsResponseBodyData struct {
	List []*ListSkillGroupsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSkillGroupsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsResponseBodyData) SetList(v []*ListSkillGroupsResponseBodyDataList) *ListSkillGroupsResponseBodyData {
	s.List = v
	return s
}

func (s *ListSkillGroupsResponseBodyData) SetPageNumber(v int32) *ListSkillGroupsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListSkillGroupsResponseBodyData) SetPageSize(v int32) *ListSkillGroupsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListSkillGroupsResponseBodyData) SetTotalCount(v int32) *ListSkillGroupsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListSkillGroupsResponseBodyDataList struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MediaType  *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 1
	PhoneNumberCount *int32 `json:"PhoneNumberCount,omitempty" xml:"PhoneNumberCount,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// skillgroup
	SkillGroupName *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
	// example:
	//
	// 2
	UserCount *int32 `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
}

func (s ListSkillGroupsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsResponseBodyDataList) SetDescription(v string) *ListSkillGroupsResponseBodyDataList {
	s.Description = &v
	return s
}

func (s *ListSkillGroupsResponseBodyDataList) SetDisplayName(v string) *ListSkillGroupsResponseBodyDataList {
	s.DisplayName = &v
	return s
}

func (s *ListSkillGroupsResponseBodyDataList) SetInstanceId(v string) *ListSkillGroupsResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupsResponseBodyDataList) SetMediaType(v string) *ListSkillGroupsResponseBodyDataList {
	s.MediaType = &v
	return s
}

func (s *ListSkillGroupsResponseBodyDataList) SetPhoneNumberCount(v int32) *ListSkillGroupsResponseBodyDataList {
	s.PhoneNumberCount = &v
	return s
}

func (s *ListSkillGroupsResponseBodyDataList) SetSkillGroupId(v string) *ListSkillGroupsResponseBodyDataList {
	s.SkillGroupId = &v
	return s
}

func (s *ListSkillGroupsResponseBodyDataList) SetSkillGroupName(v string) *ListSkillGroupsResponseBodyDataList {
	s.SkillGroupName = &v
	return s
}

func (s *ListSkillGroupsResponseBodyDataList) SetUserCount(v int32) *ListSkillGroupsResponseBodyDataList {
	s.UserCount = &v
	return s
}

type ListSkillGroupsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSkillGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSkillGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsResponse) SetHeaders(v map[string]*string) *ListSkillGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListSkillGroupsResponse) SetStatusCode(v int32) *ListSkillGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSkillGroupsResponse) SetBody(v *ListSkillGroupsResponseBody) *ListSkillGroupsResponse {
	s.Body = v
	return s
}

type ListSkillLevelsOfUserRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// true
	IsMember *bool `json:"IsMember,omitempty" xml:"IsMember,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// skillgroup
	SearchPattern *string `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListSkillLevelsOfUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSkillLevelsOfUserRequest) GoString() string {
	return s.String()
}

func (s *ListSkillLevelsOfUserRequest) SetInstanceId(v string) *ListSkillLevelsOfUserRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSkillLevelsOfUserRequest) SetIsMember(v bool) *ListSkillLevelsOfUserRequest {
	s.IsMember = &v
	return s
}

func (s *ListSkillLevelsOfUserRequest) SetPageNumber(v int32) *ListSkillLevelsOfUserRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSkillLevelsOfUserRequest) SetPageSize(v int32) *ListSkillLevelsOfUserRequest {
	s.PageSize = &v
	return s
}

func (s *ListSkillLevelsOfUserRequest) SetSearchPattern(v string) *ListSkillLevelsOfUserRequest {
	s.SearchPattern = &v
	return s
}

func (s *ListSkillLevelsOfUserRequest) SetUserId(v string) *ListSkillLevelsOfUserRequest {
	s.UserId = &v
	return s
}

type ListSkillLevelsOfUserResponseBody struct {
	// example:
	//
	// OK
	Code *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListSkillLevelsOfUserResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListSkillLevelsOfUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSkillLevelsOfUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListSkillLevelsOfUserResponseBody) SetCode(v string) *ListSkillLevelsOfUserResponseBody {
	s.Code = &v
	return s
}

func (s *ListSkillLevelsOfUserResponseBody) SetData(v *ListSkillLevelsOfUserResponseBodyData) *ListSkillLevelsOfUserResponseBody {
	s.Data = v
	return s
}

func (s *ListSkillLevelsOfUserResponseBody) SetHttpStatusCode(v int32) *ListSkillLevelsOfUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListSkillLevelsOfUserResponseBody) SetMessage(v string) *ListSkillLevelsOfUserResponseBody {
	s.Message = &v
	return s
}

func (s *ListSkillLevelsOfUserResponseBody) SetRequestId(v string) *ListSkillLevelsOfUserResponseBody {
	s.RequestId = &v
	return s
}

type ListSkillLevelsOfUserResponseBodyData struct {
	List []*ListSkillLevelsOfUserResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSkillLevelsOfUserResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListSkillLevelsOfUserResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListSkillLevelsOfUserResponseBodyData) SetList(v []*ListSkillLevelsOfUserResponseBodyDataList) *ListSkillLevelsOfUserResponseBodyData {
	s.List = v
	return s
}

func (s *ListSkillLevelsOfUserResponseBodyData) SetPageNumber(v int32) *ListSkillLevelsOfUserResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListSkillLevelsOfUserResponseBodyData) SetPageSize(v int32) *ListSkillLevelsOfUserResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListSkillLevelsOfUserResponseBodyData) SetTotalCount(v int32) *ListSkillLevelsOfUserResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListSkillLevelsOfUserResponseBodyDataList struct {
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// skillgroup
	SkillGroupName *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
	// example:
	//
	// 5
	SkillLevel *string `json:"SkillLevel,omitempty" xml:"SkillLevel,omitempty"`
}

func (s ListSkillLevelsOfUserResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListSkillLevelsOfUserResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListSkillLevelsOfUserResponseBodyDataList) SetMediaType(v string) *ListSkillLevelsOfUserResponseBodyDataList {
	s.MediaType = &v
	return s
}

func (s *ListSkillLevelsOfUserResponseBodyDataList) SetSkillGroupId(v string) *ListSkillLevelsOfUserResponseBodyDataList {
	s.SkillGroupId = &v
	return s
}

func (s *ListSkillLevelsOfUserResponseBodyDataList) SetSkillGroupName(v string) *ListSkillLevelsOfUserResponseBodyDataList {
	s.SkillGroupName = &v
	return s
}

func (s *ListSkillLevelsOfUserResponseBodyDataList) SetSkillLevel(v string) *ListSkillLevelsOfUserResponseBodyDataList {
	s.SkillLevel = &v
	return s
}

type ListSkillLevelsOfUserResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSkillLevelsOfUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSkillLevelsOfUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSkillLevelsOfUserResponse) GoString() string {
	return s.String()
}

func (s *ListSkillLevelsOfUserResponse) SetHeaders(v map[string]*string) *ListSkillLevelsOfUserResponse {
	s.Headers = v
	return s
}

func (s *ListSkillLevelsOfUserResponse) SetStatusCode(v int32) *ListSkillLevelsOfUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSkillLevelsOfUserResponse) SetBody(v *ListSkillLevelsOfUserResponseBody) *ListSkillLevelsOfUserResponse {
	s.Body = v
	return s
}

type ListTicketTasksRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 5491d3b4-14ee-4341-b5f1-db2c78beddeb
	TicketId *string `json:"TicketId,omitempty" xml:"TicketId,omitempty"`
}

func (s ListTicketTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTicketTasksRequest) GoString() string {
	return s.String()
}

func (s *ListTicketTasksRequest) SetInstanceId(v string) *ListTicketTasksRequest {
	s.InstanceId = &v
	return s
}

func (s *ListTicketTasksRequest) SetTicketId(v string) *ListTicketTasksRequest {
	s.TicketId = &v
	return s
}

type ListTicketTasksResponseBody struct {
	// example:
	//
	// OK
	Code *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*ListTicketTasksResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// DE803553-8AA9-4B9D-9E4E-A82BC69EDCEE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListTicketTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTicketTasksResponseBody) GoString() string {
	return s.String()
}

func (s *ListTicketTasksResponseBody) SetCode(v string) *ListTicketTasksResponseBody {
	s.Code = &v
	return s
}

func (s *ListTicketTasksResponseBody) SetData(v []*ListTicketTasksResponseBodyData) *ListTicketTasksResponseBody {
	s.Data = v
	return s
}

func (s *ListTicketTasksResponseBody) SetHttpStatusCode(v int32) *ListTicketTasksResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListTicketTasksResponseBody) SetMessage(v string) *ListTicketTasksResponseBody {
	s.Message = &v
	return s
}

func (s *ListTicketTasksResponseBody) SetParams(v []*string) *ListTicketTasksResponseBody {
	s.Params = v
	return s
}

func (s *ListTicketTasksResponseBody) SetRequestId(v string) *ListTicketTasksResponseBody {
	s.RequestId = &v
	return s
}

type ListTicketTasksResponseBodyData struct {
	// example:
	//
	// CounterSignTask
	Action *string `json:"Action,omitempty" xml:"Action,omitempty"`
	// example:
	//
	// assignee@ccc-test
	Assignee *string `json:"Assignee,omitempty" xml:"Assignee,omitempty"`
	// example:
	//
	// assignee
	AssigneeName *string `json:"AssigneeName,omitempty" xml:"AssigneeName,omitempty"`
	Comment      *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// 1620269200000
	EndTime  *int64    `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	FileKeys []*string `json:"FileKeys,omitempty" xml:"FileKeys,omitempty" type:"Repeated"`
	FileUrls []*string `json:"FileUrls,omitempty" xml:"FileUrls,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 1620259200000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// APPROVAL__6zu2QjAz
	TaskDefinitionNodeId *string `json:"TaskDefinitionNodeId,omitempty" xml:"TaskDefinitionNodeId,omitempty"`
	// example:
	//
	// APPROVAL
	TaskDefinitionNodeType *string `json:"TaskDefinitionNodeType,omitempty" xml:"TaskDefinitionNodeType,omitempty"`
	// example:
	//
	// eb039a4a6a5742c6b44ccff0c1fca745
	TaskId   *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// example:
	//
	// 5491d3b4-14ee-4341-b5f1-db2c78beddeb
	TicketId *string `json:"TicketId,omitempty" xml:"TicketId,omitempty"`
}

func (s ListTicketTasksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListTicketTasksResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListTicketTasksResponseBodyData) SetAction(v string) *ListTicketTasksResponseBodyData {
	s.Action = &v
	return s
}

func (s *ListTicketTasksResponseBodyData) SetAssignee(v string) *ListTicketTasksResponseBodyData {
	s.Assignee = &v
	return s
}

func (s *ListTicketTasksResponseBodyData) SetAssigneeName(v string) *ListTicketTasksResponseBodyData {
	s.AssigneeName = &v
	return s
}

func (s *ListTicketTasksResponseBodyData) SetComment(v string) *ListTicketTasksResponseBodyData {
	s.Comment = &v
	return s
}

func (s *ListTicketTasksResponseBodyData) SetEndTime(v int64) *ListTicketTasksResponseBodyData {
	s.EndTime = &v
	return s
}

func (s *ListTicketTasksResponseBodyData) SetFileKeys(v []*string) *ListTicketTasksResponseBodyData {
	s.FileKeys = v
	return s
}

func (s *ListTicketTasksResponseBodyData) SetFileUrls(v []*string) *ListTicketTasksResponseBodyData {
	s.FileUrls = v
	return s
}

func (s *ListTicketTasksResponseBodyData) SetInstanceId(v string) *ListTicketTasksResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *ListTicketTasksResponseBodyData) SetStartTime(v int64) *ListTicketTasksResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *ListTicketTasksResponseBodyData) SetTaskDefinitionNodeId(v string) *ListTicketTasksResponseBodyData {
	s.TaskDefinitionNodeId = &v
	return s
}

func (s *ListTicketTasksResponseBodyData) SetTaskDefinitionNodeType(v string) *ListTicketTasksResponseBodyData {
	s.TaskDefinitionNodeType = &v
	return s
}

func (s *ListTicketTasksResponseBodyData) SetTaskId(v string) *ListTicketTasksResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *ListTicketTasksResponseBodyData) SetTaskName(v string) *ListTicketTasksResponseBodyData {
	s.TaskName = &v
	return s
}

func (s *ListTicketTasksResponseBodyData) SetTicketId(v string) *ListTicketTasksResponseBodyData {
	s.TicketId = &v
	return s
}

type ListTicketTasksResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTicketTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTicketTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTicketTasksResponse) GoString() string {
	return s.String()
}

func (s *ListTicketTasksResponse) SetHeaders(v map[string]*string) *ListTicketTasksResponse {
	s.Headers = v
	return s
}

func (s *ListTicketTasksResponse) SetStatusCode(v int32) *ListTicketTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTicketTasksResponse) SetBody(v *ListTicketTasksResponseBody) *ListTicketTasksResponse {
	s.Body = v
	return s
}

type ListTicketTemplatesRequest struct {
	// example:
	//
	// 43c2671b-********86d0-6bd187905cc8
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 100
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchPattern *string `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
	// example:
	//
	// Enabled
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListTicketTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTicketTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListTicketTemplatesRequest) SetCategoryId(v string) *ListTicketTemplatesRequest {
	s.CategoryId = &v
	return s
}

func (s *ListTicketTemplatesRequest) SetInstanceId(v string) *ListTicketTemplatesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListTicketTemplatesRequest) SetPageNumber(v int32) *ListTicketTemplatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListTicketTemplatesRequest) SetPageSize(v int32) *ListTicketTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListTicketTemplatesRequest) SetSearchPattern(v string) *ListTicketTemplatesRequest {
	s.SearchPattern = &v
	return s
}

func (s *ListTicketTemplatesRequest) SetState(v string) *ListTicketTemplatesRequest {
	s.State = &v
	return s
}

type ListTicketTemplatesResponseBody struct {
	// example:
	//
	// OK
	Code *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListTicketTemplatesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 8707EB29-BAED-4302-B999-40BA61877437
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListTicketTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTicketTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTicketTemplatesResponseBody) SetCode(v string) *ListTicketTemplatesResponseBody {
	s.Code = &v
	return s
}

func (s *ListTicketTemplatesResponseBody) SetData(v *ListTicketTemplatesResponseBodyData) *ListTicketTemplatesResponseBody {
	s.Data = v
	return s
}

func (s *ListTicketTemplatesResponseBody) SetHttpStatusCode(v int32) *ListTicketTemplatesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListTicketTemplatesResponseBody) SetMessage(v string) *ListTicketTemplatesResponseBody {
	s.Message = &v
	return s
}

func (s *ListTicketTemplatesResponseBody) SetParams(v []*string) *ListTicketTemplatesResponseBody {
	s.Params = v
	return s
}

func (s *ListTicketTemplatesResponseBody) SetRequestId(v string) *ListTicketTemplatesResponseBody {
	s.RequestId = &v
	return s
}

type ListTicketTemplatesResponseBodyData struct {
	List []*ListTicketTemplatesResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 25
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTicketTemplatesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListTicketTemplatesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListTicketTemplatesResponseBodyData) SetList(v []*ListTicketTemplatesResponseBodyDataList) *ListTicketTemplatesResponseBodyData {
	s.List = v
	return s
}

func (s *ListTicketTemplatesResponseBodyData) SetPageNumber(v int32) *ListTicketTemplatesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyData) SetPageSize(v int32) *ListTicketTemplatesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyData) SetTotalCount(v int32) *ListTicketTemplatesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListTicketTemplatesResponseBodyDataList struct {
	// example:
	//
	// 0
	AppliedVersion *string `json:"AppliedVersion,omitempty" xml:"AppliedVersion,omitempty"`
	// example:
	//
	// 43c2671b-*****-4223-86d0-6bd187905cc8
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	// example:
	//
	// creator@ccc-test
	Editor *string `json:"Editor,omitempty" xml:"Editor,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 1715780670000
	LatestVersion     *string `json:"LatestVersion,omitempty" xml:"LatestVersion,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProcessDefinition *string `json:"ProcessDefinition,omitempty" xml:"ProcessDefinition,omitempty"`
	// example:
	//
	// Enabled
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// b5c21219-3a1e-4bc0-92e7-da66e057d2f6
	TemplateId   *string                                                `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TicketFields []*ListTicketTemplatesResponseBodyDataListTicketFields `json:"TicketFields,omitempty" xml:"TicketFields,omitempty" type:"Repeated"`
	// example:
	//
	// 1715780670000
	UpdatedTime *int64 `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
}

func (s ListTicketTemplatesResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListTicketTemplatesResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListTicketTemplatesResponseBodyDataList) SetAppliedVersion(v string) *ListTicketTemplatesResponseBodyDataList {
	s.AppliedVersion = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataList) SetCategoryId(v string) *ListTicketTemplatesResponseBodyDataList {
	s.CategoryId = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataList) SetEditor(v string) *ListTicketTemplatesResponseBodyDataList {
	s.Editor = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataList) SetInstanceId(v string) *ListTicketTemplatesResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataList) SetLatestVersion(v string) *ListTicketTemplatesResponseBodyDataList {
	s.LatestVersion = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataList) SetName(v string) *ListTicketTemplatesResponseBodyDataList {
	s.Name = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataList) SetProcessDefinition(v string) *ListTicketTemplatesResponseBodyDataList {
	s.ProcessDefinition = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataList) SetState(v string) *ListTicketTemplatesResponseBodyDataList {
	s.State = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataList) SetTemplateId(v string) *ListTicketTemplatesResponseBodyDataList {
	s.TemplateId = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataList) SetTicketFields(v []*ListTicketTemplatesResponseBodyDataListTicketFields) *ListTicketTemplatesResponseBodyDataList {
	s.TicketFields = v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataList) SetUpdatedTime(v int64) *ListTicketTemplatesResponseBodyDataList {
	s.UpdatedTime = &v
	return s
}

type ListTicketTemplatesResponseBodyDataListTicketFields struct {
	// example:
	//
	// false
	Array *bool `json:"Array,omitempty" xml:"Array,omitempty"`
	// example:
	//
	// {}
	Attribute *string `json:"Attribute,omitempty" xml:"Attribute,omitempty"`
	// example:
	//
	// 1715780670000
	CreatedTime *int64 `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// example:
	//
	// creator
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// example:
	//
	// String
	DataType    *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// false
	Disabled    *bool   `json:"Disabled,omitempty" xml:"Disabled,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// 1
	DisplayOrder *int32 `json:"DisplayOrder,omitempty" xml:"DisplayOrder,omitempty"`
	// example:
	//
	// textbox
	EditorType *string `json:"EditorType,omitempty" xml:"EditorType,omitempty"`
	// example:
	//
	// 30
	MaxLength *int32 `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	// example:
	//
	// 10
	Maximum *float64 `json:"Maximum,omitempty" xml:"Maximum,omitempty"`
	// example:
	//
	// 1
	MinLength *int32 `json:"MinLength,omitempty" xml:"MinLength,omitempty"`
	// example:
	//
	// 1
	Minimum *float64 `json:"Minimum,omitempty" xml:"Minimum,omitempty"`
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// ^
	Pattern             *string `json:"Pattern,omitempty" xml:"Pattern,omitempty"`
	PatternErrorMessage *string `json:"PatternErrorMessage,omitempty" xml:"PatternErrorMessage,omitempty"`
	// example:
	//
	// false
	ReadOnly *bool `json:"ReadOnly,omitempty" xml:"ReadOnly,omitempty"`
	// example:
	//
	// false
	Required *bool `json:"Required,omitempty" xml:"Required,omitempty"`
	// example:
	//
	// false
	System *bool `json:"System,omitempty" xml:"System,omitempty"`
	// example:
	//
	// 1715780670000
	UpdatedTime *int64 `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
}

func (s ListTicketTemplatesResponseBodyDataListTicketFields) String() string {
	return tea.Prettify(s)
}

func (s ListTicketTemplatesResponseBodyDataListTicketFields) GoString() string {
	return s.String()
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetArray(v bool) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.Array = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetAttribute(v string) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.Attribute = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetCreatedTime(v int64) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.CreatedTime = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetCreator(v string) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.Creator = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetDataType(v string) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.DataType = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetDescription(v string) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.Description = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetDisabled(v bool) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.Disabled = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetDisplayName(v string) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.DisplayName = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetDisplayOrder(v int32) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.DisplayOrder = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetEditorType(v string) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.EditorType = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetMaxLength(v int32) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.MaxLength = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetMaximum(v float64) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.Maximum = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetMinLength(v int32) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.MinLength = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetMinimum(v float64) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.Minimum = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetName(v string) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.Name = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetPattern(v string) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.Pattern = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetPatternErrorMessage(v string) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.PatternErrorMessage = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetReadOnly(v bool) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.ReadOnly = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetRequired(v bool) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.Required = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetSystem(v bool) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.System = &v
	return s
}

func (s *ListTicketTemplatesResponseBodyDataListTicketFields) SetUpdatedTime(v int64) *ListTicketTemplatesResponseBodyDataListTicketFields {
	s.UpdatedTime = &v
	return s
}

type ListTicketTemplatesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTicketTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTicketTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTicketTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListTicketTemplatesResponse) SetHeaders(v map[string]*string) *ListTicketTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListTicketTemplatesResponse) SetStatusCode(v int32) *ListTicketTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTicketTemplatesResponse) SetBody(v *ListTicketTemplatesResponseBody) *ListTicketTemplatesResponse {
	s.Body = v
	return s
}

type ListTicketsRequest struct {
	// example:
	//
	// assignee@cccV2-kmz
	Assignee *string `json:"Assignee,omitempty" xml:"Assignee,omitempty"`
	// example:
	//
	// Agent
	AssigneeType *string `json:"AssigneeType,omitempty" xml:"AssigneeType,omitempty"`
	// example:
	//
	// 43c2671b-****-4223-86d0-6bd187905cc8
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	// example:
	//
	// creator@cccV2-kmz
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// example:
	//
	// 51e155ce-3747-*****-b402-13c69597b920
	CustomerId *string `json:"CustomerId,omitempty" xml:"CustomerId,omitempty"`
	// example:
	//
	// 1646928000000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// ["job-12******","job-23****"]
	JobIdList *string `json:"JobIdList,omitempty" xml:"JobIdList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// participant@cccV2-kmz
	Participant *string `json:"Participant,omitempty" xml:"Participant,omitempty"`
	// example:
	//
	// 1646841600000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// Processing
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// 5491d3b4-14ee-4341-b5f1-db2c78beddeb
	TicketId *string `json:"TicketId,omitempty" xml:"TicketId,omitempty"`
	Title    *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s ListTicketsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTicketsRequest) GoString() string {
	return s.String()
}

func (s *ListTicketsRequest) SetAssignee(v string) *ListTicketsRequest {
	s.Assignee = &v
	return s
}

func (s *ListTicketsRequest) SetAssigneeType(v string) *ListTicketsRequest {
	s.AssigneeType = &v
	return s
}

func (s *ListTicketsRequest) SetCategoryId(v string) *ListTicketsRequest {
	s.CategoryId = &v
	return s
}

func (s *ListTicketsRequest) SetCreator(v string) *ListTicketsRequest {
	s.Creator = &v
	return s
}

func (s *ListTicketsRequest) SetCustomerId(v string) *ListTicketsRequest {
	s.CustomerId = &v
	return s
}

func (s *ListTicketsRequest) SetEndTime(v int64) *ListTicketsRequest {
	s.EndTime = &v
	return s
}

func (s *ListTicketsRequest) SetInstanceId(v string) *ListTicketsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListTicketsRequest) SetJobIdList(v string) *ListTicketsRequest {
	s.JobIdList = &v
	return s
}

func (s *ListTicketsRequest) SetPageNumber(v int64) *ListTicketsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListTicketsRequest) SetPageSize(v int64) *ListTicketsRequest {
	s.PageSize = &v
	return s
}

func (s *ListTicketsRequest) SetParticipant(v string) *ListTicketsRequest {
	s.Participant = &v
	return s
}

func (s *ListTicketsRequest) SetStartTime(v int64) *ListTicketsRequest {
	s.StartTime = &v
	return s
}

func (s *ListTicketsRequest) SetState(v string) *ListTicketsRequest {
	s.State = &v
	return s
}

func (s *ListTicketsRequest) SetTicketId(v string) *ListTicketsRequest {
	s.TicketId = &v
	return s
}

func (s *ListTicketsRequest) SetTitle(v string) *ListTicketsRequest {
	s.Title = &v
	return s
}

type ListTicketsResponseBody struct {
	// example:
	//
	// OK
	Code *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListTicketsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int64  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 7BEEA660-A45A-45E3-98CC-AFC65E715C23
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListTicketsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTicketsResponseBody) GoString() string {
	return s.String()
}

func (s *ListTicketsResponseBody) SetCode(v string) *ListTicketsResponseBody {
	s.Code = &v
	return s
}

func (s *ListTicketsResponseBody) SetData(v *ListTicketsResponseBodyData) *ListTicketsResponseBody {
	s.Data = v
	return s
}

func (s *ListTicketsResponseBody) SetHttpStatusCode(v int64) *ListTicketsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListTicketsResponseBody) SetMessage(v string) *ListTicketsResponseBody {
	s.Message = &v
	return s
}

func (s *ListTicketsResponseBody) SetRequestId(v string) *ListTicketsResponseBody {
	s.RequestId = &v
	return s
}

type ListTicketsResponseBodyData struct {
	List []*ListTicketsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 10
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTicketsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListTicketsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListTicketsResponseBodyData) SetList(v []*ListTicketsResponseBodyDataList) *ListTicketsResponseBodyData {
	s.List = v
	return s
}

func (s *ListTicketsResponseBodyData) SetPageNumber(v int64) *ListTicketsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListTicketsResponseBodyData) SetPageSize(v int64) *ListTicketsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListTicketsResponseBodyData) SetTotalCount(v int64) *ListTicketsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListTicketsResponseBodyDataList struct {
	// example:
	//
	// assignee@ccc-test
	Assignee *string `json:"Assignee,omitempty" xml:"Assignee,omitempty"`
	// example:
	//
	// Assignee
	AssigneeName *string `json:"AssigneeName,omitempty" xml:"AssigneeName,omitempty"`
	// example:
	//
	// 43c2671b-*****-4223-86d0-6bd187905cc8
	CategoryId   *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	CategoryName *string `json:"CategoryName,omitempty" xml:"CategoryName,omitempty"`
	// example:
	//
	// Completed
	CloseCode *string `json:"CloseCode,omitempty" xml:"CloseCode,omitempty"`
	Comment   *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// {"productName":"alynx"}
	Context *string `json:"Context,omitempty" xml:"Context,omitempty"`
	// example:
	//
	// 1631440860000
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// example:
	//
	// creator@ccc-test
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// example:
	//
	// Creator
	CreatorName *string `json:"CreatorName,omitempty" xml:"CreatorName,omitempty"`
	// example:
	//
	// 0707dab6-34a8-11ef-9823-161e3802b2d4
	CurrentTaskId   *string `json:"CurrentTaskId,omitempty" xml:"CurrentTaskId,omitempty"`
	CurrentTaskName *string `json:"CurrentTaskName,omitempty" xml:"CurrentTaskName,omitempty"`
	// example:
	//
	// 1631440860000
	CurrentTaskStartTime *int64 `json:"CurrentTaskStartTime,omitempty" xml:"CurrentTaskStartTime,omitempty"`
	// example:
	//
	// 51e155ce-*****1-b402-13c69597b920
	CustomerId *string `json:"CustomerId,omitempty" xml:"CustomerId,omitempty"`
	// example:
	//
	// 1631440860000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-47150***150396416
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// CHAT
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 1631440860000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// Processing
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// c844a5f0-496c-4c5b-8a0c-dd27686e8ff6
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// 0
	TemplateVersion *string `json:"TemplateVersion,omitempty" xml:"TemplateVersion,omitempty"`
	// example:
	//
	// feb83abd-9f08-49d2-9b56-41d1b66ca0ac
	TicketId *string `json:"TicketId,omitempty" xml:"TicketId,omitempty"`
	Title    *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 1631440860000
	UpdatedTime *string `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
}

func (s ListTicketsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListTicketsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListTicketsResponseBodyDataList) SetAssignee(v string) *ListTicketsResponseBodyDataList {
	s.Assignee = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetAssigneeName(v string) *ListTicketsResponseBodyDataList {
	s.AssigneeName = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetCategoryId(v string) *ListTicketsResponseBodyDataList {
	s.CategoryId = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetCategoryName(v string) *ListTicketsResponseBodyDataList {
	s.CategoryName = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetCloseCode(v string) *ListTicketsResponseBodyDataList {
	s.CloseCode = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetComment(v string) *ListTicketsResponseBodyDataList {
	s.Comment = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetContext(v string) *ListTicketsResponseBodyDataList {
	s.Context = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetCreatedTime(v string) *ListTicketsResponseBodyDataList {
	s.CreatedTime = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetCreator(v string) *ListTicketsResponseBodyDataList {
	s.Creator = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetCreatorName(v string) *ListTicketsResponseBodyDataList {
	s.CreatorName = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetCurrentTaskId(v string) *ListTicketsResponseBodyDataList {
	s.CurrentTaskId = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetCurrentTaskName(v string) *ListTicketsResponseBodyDataList {
	s.CurrentTaskName = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetCurrentTaskStartTime(v int64) *ListTicketsResponseBodyDataList {
	s.CurrentTaskStartTime = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetCustomerId(v string) *ListTicketsResponseBodyDataList {
	s.CustomerId = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetEndTime(v int64) *ListTicketsResponseBodyDataList {
	s.EndTime = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetInstanceId(v string) *ListTicketsResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetJobId(v string) *ListTicketsResponseBodyDataList {
	s.JobId = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetSource(v string) *ListTicketsResponseBodyDataList {
	s.Source = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetStartTime(v int64) *ListTicketsResponseBodyDataList {
	s.StartTime = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetState(v string) *ListTicketsResponseBodyDataList {
	s.State = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetTemplateId(v string) *ListTicketsResponseBodyDataList {
	s.TemplateId = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetTemplateVersion(v string) *ListTicketsResponseBodyDataList {
	s.TemplateVersion = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetTicketId(v string) *ListTicketsResponseBodyDataList {
	s.TicketId = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetTitle(v string) *ListTicketsResponseBodyDataList {
	s.Title = &v
	return s
}

func (s *ListTicketsResponseBodyDataList) SetUpdatedTime(v string) *ListTicketsResponseBodyDataList {
	s.UpdatedTime = &v
	return s
}

type ListTicketsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTicketsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTicketsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTicketsResponse) GoString() string {
	return s.String()
}

func (s *ListTicketsResponse) SetHeaders(v map[string]*string) *ListTicketsResponse {
	s.Headers = v
	return s
}

func (s *ListTicketsResponse) SetStatusCode(v int32) *ListTicketsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTicketsResponse) SetBody(v *ListTicketsResponseBody) *ListTicketsResponse {
	s.Body = v
	return s
}

type ListUnassignedNumbersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 0833
	SearchPattern *string `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
}

func (s ListUnassignedNumbersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUnassignedNumbersRequest) GoString() string {
	return s.String()
}

func (s *ListUnassignedNumbersRequest) SetPageNumber(v int32) *ListUnassignedNumbersRequest {
	s.PageNumber = &v
	return s
}

func (s *ListUnassignedNumbersRequest) SetPageSize(v int32) *ListUnassignedNumbersRequest {
	s.PageSize = &v
	return s
}

func (s *ListUnassignedNumbersRequest) SetSearchPattern(v string) *ListUnassignedNumbersRequest {
	s.SearchPattern = &v
	return s
}

type ListUnassignedNumbersResponseBody struct {
	// example:
	//
	// OK
	Code *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListUnassignedNumbersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListUnassignedNumbersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUnassignedNumbersResponseBody) GoString() string {
	return s.String()
}

func (s *ListUnassignedNumbersResponseBody) SetCode(v string) *ListUnassignedNumbersResponseBody {
	s.Code = &v
	return s
}

func (s *ListUnassignedNumbersResponseBody) SetData(v *ListUnassignedNumbersResponseBodyData) *ListUnassignedNumbersResponseBody {
	s.Data = v
	return s
}

func (s *ListUnassignedNumbersResponseBody) SetHttpStatusCode(v int32) *ListUnassignedNumbersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListUnassignedNumbersResponseBody) SetMessage(v string) *ListUnassignedNumbersResponseBody {
	s.Message = &v
	return s
}

func (s *ListUnassignedNumbersResponseBody) SetRequestId(v string) *ListUnassignedNumbersResponseBody {
	s.RequestId = &v
	return s
}

type ListUnassignedNumbersResponseBodyData struct {
	List []*ListUnassignedNumbersResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 3
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListUnassignedNumbersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListUnassignedNumbersResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListUnassignedNumbersResponseBodyData) SetList(v []*ListUnassignedNumbersResponseBodyDataList) *ListUnassignedNumbersResponseBodyData {
	s.List = v
	return s
}

func (s *ListUnassignedNumbersResponseBodyData) SetPageNumber(v int32) *ListUnassignedNumbersResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListUnassignedNumbersResponseBodyData) SetPageSize(v int32) *ListUnassignedNumbersResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListUnassignedNumbersResponseBodyData) SetTotalCount(v int32) *ListUnassignedNumbersResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListUnassignedNumbersResponseBodyDataList struct {
	City *string `json:"City,omitempty" xml:"City,omitempty"`
	// example:
	//
	// 08330011****
	Number   *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s ListUnassignedNumbersResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListUnassignedNumbersResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListUnassignedNumbersResponseBodyDataList) SetCity(v string) *ListUnassignedNumbersResponseBodyDataList {
	s.City = &v
	return s
}

func (s *ListUnassignedNumbersResponseBodyDataList) SetNumber(v string) *ListUnassignedNumbersResponseBodyDataList {
	s.Number = &v
	return s
}

func (s *ListUnassignedNumbersResponseBodyDataList) SetProvince(v string) *ListUnassignedNumbersResponseBodyDataList {
	s.Province = &v
	return s
}

type ListUnassignedNumbersResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListUnassignedNumbersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListUnassignedNumbersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUnassignedNumbersResponse) GoString() string {
	return s.String()
}

func (s *ListUnassignedNumbersResponse) SetHeaders(v map[string]*string) *ListUnassignedNumbersResponse {
	s.Headers = v
	return s
}

func (s *ListUnassignedNumbersResponse) SetStatusCode(v int32) *ListUnassignedNumbersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListUnassignedNumbersResponse) SetBody(v *ListUnassignedNumbersResponseBody) *ListUnassignedNumbersResponse {
	s.Body = v
	return s
}

type ListUserLevelsOfSkillGroupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// true
	IsMember *bool `json:"IsMember,omitempty" xml:"IsMember,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchPattern *string `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s ListUserLevelsOfSkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUserLevelsOfSkillGroupRequest) GoString() string {
	return s.String()
}

func (s *ListUserLevelsOfSkillGroupRequest) SetInstanceId(v string) *ListUserLevelsOfSkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupRequest) SetIsMember(v bool) *ListUserLevelsOfSkillGroupRequest {
	s.IsMember = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupRequest) SetPageNumber(v int32) *ListUserLevelsOfSkillGroupRequest {
	s.PageNumber = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupRequest) SetPageSize(v int32) *ListUserLevelsOfSkillGroupRequest {
	s.PageSize = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupRequest) SetSearchPattern(v string) *ListUserLevelsOfSkillGroupRequest {
	s.SearchPattern = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupRequest) SetSkillGroupId(v string) *ListUserLevelsOfSkillGroupRequest {
	s.SkillGroupId = &v
	return s
}

type ListUserLevelsOfSkillGroupResponseBody struct {
	// example:
	//
	// OK
	Code *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListUserLevelsOfSkillGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListUserLevelsOfSkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUserLevelsOfSkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListUserLevelsOfSkillGroupResponseBody) SetCode(v string) *ListUserLevelsOfSkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponseBody) SetData(v *ListUserLevelsOfSkillGroupResponseBodyData) *ListUserLevelsOfSkillGroupResponseBody {
	s.Data = v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponseBody) SetHttpStatusCode(v int32) *ListUserLevelsOfSkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponseBody) SetMessage(v string) *ListUserLevelsOfSkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponseBody) SetRequestId(v string) *ListUserLevelsOfSkillGroupResponseBody {
	s.RequestId = &v
	return s
}

type ListUserLevelsOfSkillGroupResponseBodyData struct {
	List []*ListUserLevelsOfSkillGroupResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListUserLevelsOfSkillGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListUserLevelsOfSkillGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListUserLevelsOfSkillGroupResponseBodyData) SetList(v []*ListUserLevelsOfSkillGroupResponseBodyDataList) *ListUserLevelsOfSkillGroupResponseBodyData {
	s.List = v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponseBodyData) SetPageNumber(v int32) *ListUserLevelsOfSkillGroupResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponseBodyData) SetPageSize(v int32) *ListUserLevelsOfSkillGroupResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponseBodyData) SetTotalCount(v int32) *ListUserLevelsOfSkillGroupResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListUserLevelsOfSkillGroupResponseBodyDataList struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// agent
	LoginName *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	RamId     *string `json:"RamId,omitempty" xml:"RamId,omitempty"`
	// example:
	//
	// Admin@ccc-test
	RoleId *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	// example:
	//
	// Admin
	RoleName *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// skillgroup
	SkillGroupName *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
	// example:
	//
	// 5
	SkillLevel *int32 `json:"SkillLevel,omitempty" xml:"SkillLevel,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListUserLevelsOfSkillGroupResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListUserLevelsOfSkillGroupResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListUserLevelsOfSkillGroupResponseBodyDataList) SetDisplayName(v string) *ListUserLevelsOfSkillGroupResponseBodyDataList {
	s.DisplayName = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponseBodyDataList) SetLoginName(v string) *ListUserLevelsOfSkillGroupResponseBodyDataList {
	s.LoginName = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponseBodyDataList) SetRamId(v string) *ListUserLevelsOfSkillGroupResponseBodyDataList {
	s.RamId = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponseBodyDataList) SetRoleId(v string) *ListUserLevelsOfSkillGroupResponseBodyDataList {
	s.RoleId = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponseBodyDataList) SetRoleName(v string) *ListUserLevelsOfSkillGroupResponseBodyDataList {
	s.RoleName = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponseBodyDataList) SetSkillGroupId(v string) *ListUserLevelsOfSkillGroupResponseBodyDataList {
	s.SkillGroupId = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponseBodyDataList) SetSkillGroupName(v string) *ListUserLevelsOfSkillGroupResponseBodyDataList {
	s.SkillGroupName = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponseBodyDataList) SetSkillLevel(v int32) *ListUserLevelsOfSkillGroupResponseBodyDataList {
	s.SkillLevel = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponseBodyDataList) SetUserId(v string) *ListUserLevelsOfSkillGroupResponseBodyDataList {
	s.UserId = &v
	return s
}

type ListUserLevelsOfSkillGroupResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListUserLevelsOfSkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListUserLevelsOfSkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUserLevelsOfSkillGroupResponse) GoString() string {
	return s.String()
}

func (s *ListUserLevelsOfSkillGroupResponse) SetHeaders(v map[string]*string) *ListUserLevelsOfSkillGroupResponse {
	s.Headers = v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponse) SetStatusCode(v int32) *ListUserLevelsOfSkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ListUserLevelsOfSkillGroupResponse) SetBody(v *ListUserLevelsOfSkillGroupResponseBody) *ListUserLevelsOfSkillGroupResponse {
	s.Body = v
	return s
}

type ListUsersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// agent
	SearchPattern *string `json:"SearchPattern,omitempty" xml:"SearchPattern,omitempty"`
	SkillGroupId  *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s ListUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUsersRequest) GoString() string {
	return s.String()
}

func (s *ListUsersRequest) SetInstanceId(v string) *ListUsersRequest {
	s.InstanceId = &v
	return s
}

func (s *ListUsersRequest) SetPageNumber(v int32) *ListUsersRequest {
	s.PageNumber = &v
	return s
}

func (s *ListUsersRequest) SetPageSize(v int32) *ListUsersRequest {
	s.PageSize = &v
	return s
}

func (s *ListUsersRequest) SetSearchPattern(v string) *ListUsersRequest {
	s.SearchPattern = &v
	return s
}

func (s *ListUsersRequest) SetSkillGroupId(v string) *ListUsersRequest {
	s.SkillGroupId = &v
	return s
}

type ListUsersResponseBody struct {
	// example:
	//
	// OK
	Code *string                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListUsersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBody) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBody) SetCode(v string) *ListUsersResponseBody {
	s.Code = &v
	return s
}

func (s *ListUsersResponseBody) SetData(v *ListUsersResponseBodyData) *ListUsersResponseBody {
	s.Data = v
	return s
}

func (s *ListUsersResponseBody) SetHttpStatusCode(v int32) *ListUsersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListUsersResponseBody) SetMessage(v string) *ListUsersResponseBody {
	s.Message = &v
	return s
}

func (s *ListUsersResponseBody) SetParams(v []*string) *ListUsersResponseBody {
	s.Params = v
	return s
}

func (s *ListUsersResponseBody) SetRequestId(v string) *ListUsersResponseBody {
	s.RequestId = &v
	return s
}

type ListUsersResponseBodyData struct {
	List []*ListUsersResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListUsersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyData) SetList(v []*ListUsersResponseBodyDataList) *ListUsersResponseBodyData {
	s.List = v
	return s
}

func (s *ListUsersResponseBodyData) SetPageNumber(v int32) *ListUsersResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListUsersResponseBodyData) SetPageSize(v int32) *ListUsersResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListUsersResponseBodyData) SetTotalCount(v int32) *ListUsersResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListUsersResponseBodyDataList struct {
	// example:
	//
	// 8033****
	DeviceExt *string `json:"DeviceExt,omitempty" xml:"DeviceExt,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// OFFLINE
	DeviceState *string `json:"DeviceState,omitempty" xml:"DeviceState,omitempty"`
	// example:
	//
	// 1001
	DisplayId   *string `json:"DisplayId,omitempty" xml:"DisplayId,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// example:
	//
	// 8031****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// agent
	LoginName *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	// example:
	//
	// 1382114****
	Mobile                     *string                                                    `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	PersonalOutboundNumberList []*ListUsersResponseBodyDataListPersonalOutboundNumberList `json:"PersonalOutboundNumberList,omitempty" xml:"PersonalOutboundNumberList,omitempty" type:"Repeated"`
	Primary                    *bool                                                      `json:"Primary,omitempty" xml:"Primary,omitempty"`
	// example:
	//
	// false
	PrimaryAccount *bool `json:"PrimaryAccount,omitempty" xml:"PrimaryAccount,omitempty"`
	// example:
	//
	// 21234502254620****
	RamId *int64 `json:"RamId,omitempty" xml:"RamId,omitempty"`
	// example:
	//
	// Admin@ccc-test
	RoleId *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	// example:
	//
	// Admin
	RoleName       *string                                        `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	SkillLevelList []*ListUsersResponseBodyDataListSkillLevelList `json:"SkillLevelList,omitempty" xml:"SkillLevelList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s ListUsersResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyDataList) SetDeviceExt(v string) *ListUsersResponseBodyDataList {
	s.DeviceExt = &v
	return s
}

func (s *ListUsersResponseBodyDataList) SetDeviceId(v string) *ListUsersResponseBodyDataList {
	s.DeviceId = &v
	return s
}

func (s *ListUsersResponseBodyDataList) SetDeviceState(v string) *ListUsersResponseBodyDataList {
	s.DeviceState = &v
	return s
}

func (s *ListUsersResponseBodyDataList) SetDisplayId(v string) *ListUsersResponseBodyDataList {
	s.DisplayId = &v
	return s
}

func (s *ListUsersResponseBodyDataList) SetDisplayName(v string) *ListUsersResponseBodyDataList {
	s.DisplayName = &v
	return s
}

func (s *ListUsersResponseBodyDataList) SetEmail(v string) *ListUsersResponseBodyDataList {
	s.Email = &v
	return s
}

func (s *ListUsersResponseBodyDataList) SetExtension(v string) *ListUsersResponseBodyDataList {
	s.Extension = &v
	return s
}

func (s *ListUsersResponseBodyDataList) SetLoginName(v string) *ListUsersResponseBodyDataList {
	s.LoginName = &v
	return s
}

func (s *ListUsersResponseBodyDataList) SetMobile(v string) *ListUsersResponseBodyDataList {
	s.Mobile = &v
	return s
}

func (s *ListUsersResponseBodyDataList) SetPersonalOutboundNumberList(v []*ListUsersResponseBodyDataListPersonalOutboundNumberList) *ListUsersResponseBodyDataList {
	s.PersonalOutboundNumberList = v
	return s
}

func (s *ListUsersResponseBodyDataList) SetPrimary(v bool) *ListUsersResponseBodyDataList {
	s.Primary = &v
	return s
}

func (s *ListUsersResponseBodyDataList) SetPrimaryAccount(v bool) *ListUsersResponseBodyDataList {
	s.PrimaryAccount = &v
	return s
}

func (s *ListUsersResponseBodyDataList) SetRamId(v int64) *ListUsersResponseBodyDataList {
	s.RamId = &v
	return s
}

func (s *ListUsersResponseBodyDataList) SetRoleId(v string) *ListUsersResponseBodyDataList {
	s.RoleId = &v
	return s
}

func (s *ListUsersResponseBodyDataList) SetRoleName(v string) *ListUsersResponseBodyDataList {
	s.RoleName = &v
	return s
}

func (s *ListUsersResponseBodyDataList) SetSkillLevelList(v []*ListUsersResponseBodyDataListSkillLevelList) *ListUsersResponseBodyDataList {
	s.SkillLevelList = v
	return s
}

func (s *ListUsersResponseBodyDataList) SetUserId(v string) *ListUsersResponseBodyDataList {
	s.UserId = &v
	return s
}

func (s *ListUsersResponseBodyDataList) SetWorkMode(v string) *ListUsersResponseBodyDataList {
	s.WorkMode = &v
	return s
}

type ListUsersResponseBodyDataListPersonalOutboundNumberList struct {
	// example:
	//
	// true
	Active *bool   `json:"Active,omitempty" xml:"Active,omitempty"`
	City   *string `json:"City,omitempty" xml:"City,omitempty"`
	// example:
	//
	// 0830011****
	Number   *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
	// example:
	//
	// Bidirection
	Usage *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s ListUsersResponseBodyDataListPersonalOutboundNumberList) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyDataListPersonalOutboundNumberList) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyDataListPersonalOutboundNumberList) SetActive(v bool) *ListUsersResponseBodyDataListPersonalOutboundNumberList {
	s.Active = &v
	return s
}

func (s *ListUsersResponseBodyDataListPersonalOutboundNumberList) SetCity(v string) *ListUsersResponseBodyDataListPersonalOutboundNumberList {
	s.City = &v
	return s
}

func (s *ListUsersResponseBodyDataListPersonalOutboundNumberList) SetNumber(v string) *ListUsersResponseBodyDataListPersonalOutboundNumberList {
	s.Number = &v
	return s
}

func (s *ListUsersResponseBodyDataListPersonalOutboundNumberList) SetProvince(v string) *ListUsersResponseBodyDataListPersonalOutboundNumberList {
	s.Province = &v
	return s
}

func (s *ListUsersResponseBodyDataListPersonalOutboundNumberList) SetUsage(v string) *ListUsersResponseBodyDataListPersonalOutboundNumberList {
	s.Usage = &v
	return s
}

type ListUsersResponseBodyDataListSkillLevelList struct {
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// skillgroup
	SkillGroupName *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
	// example:
	//
	// 5
	SkillLevel *int32 `json:"SkillLevel,omitempty" xml:"SkillLevel,omitempty"`
}

func (s ListUsersResponseBodyDataListSkillLevelList) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyDataListSkillLevelList) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyDataListSkillLevelList) SetSkillGroupId(v string) *ListUsersResponseBodyDataListSkillLevelList {
	s.SkillGroupId = &v
	return s
}

func (s *ListUsersResponseBodyDataListSkillLevelList) SetSkillGroupName(v string) *ListUsersResponseBodyDataListSkillLevelList {
	s.SkillGroupName = &v
	return s
}

func (s *ListUsersResponseBodyDataListSkillLevelList) SetSkillLevel(v int32) *ListUsersResponseBodyDataListSkillLevelList {
	s.SkillLevel = &v
	return s
}

type ListUsersResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponse) GoString() string {
	return s.String()
}

func (s *ListUsersResponse) SetHeaders(v map[string]*string) *ListUsersResponse {
	s.Headers = v
	return s
}

func (s *ListUsersResponse) SetStatusCode(v int32) *ListUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListUsersResponse) SetBody(v *ListUsersResponseBody) *ListUsersResponse {
	s.Body = v
	return s
}

type ListVoicemailsRequest struct {
	// example:
	//
	// 073xxxx7539
	Caller *string `json:"Caller,omitempty" xml:"Caller,omitempty"`
	// example:
	//
	// job-125152394144124921
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// example:
	//
	// 1532707199000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Deprecated
	//
	// example:
	//
	// voicemail-test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 1532448000000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListVoicemailsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListVoicemailsRequest) GoString() string {
	return s.String()
}

func (s *ListVoicemailsRequest) SetCaller(v string) *ListVoicemailsRequest {
	s.Caller = &v
	return s
}

func (s *ListVoicemailsRequest) SetContactId(v string) *ListVoicemailsRequest {
	s.ContactId = &v
	return s
}

func (s *ListVoicemailsRequest) SetEndTime(v int64) *ListVoicemailsRequest {
	s.EndTime = &v
	return s
}

func (s *ListVoicemailsRequest) SetInstanceId(v string) *ListVoicemailsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListVoicemailsRequest) SetName(v string) *ListVoicemailsRequest {
	s.Name = &v
	return s
}

func (s *ListVoicemailsRequest) SetPageNumber(v int32) *ListVoicemailsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListVoicemailsRequest) SetPageSize(v int32) *ListVoicemailsRequest {
	s.PageSize = &v
	return s
}

func (s *ListVoicemailsRequest) SetStartTime(v int64) *ListVoicemailsRequest {
	s.StartTime = &v
	return s
}

type ListVoicemailsResponseBody struct {
	// example:
	//
	// OK
	Code *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ListVoicemailsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListVoicemailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListVoicemailsResponseBody) GoString() string {
	return s.String()
}

func (s *ListVoicemailsResponseBody) SetCode(v string) *ListVoicemailsResponseBody {
	s.Code = &v
	return s
}

func (s *ListVoicemailsResponseBody) SetData(v *ListVoicemailsResponseBodyData) *ListVoicemailsResponseBody {
	s.Data = v
	return s
}

func (s *ListVoicemailsResponseBody) SetHttpStatusCode(v int32) *ListVoicemailsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListVoicemailsResponseBody) SetMessage(v string) *ListVoicemailsResponseBody {
	s.Message = &v
	return s
}

func (s *ListVoicemailsResponseBody) SetRequestId(v string) *ListVoicemailsResponseBody {
	s.RequestId = &v
	return s
}

type ListVoicemailsResponseBodyData struct {
	List []*ListVoicemailsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 11
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListVoicemailsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListVoicemailsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListVoicemailsResponseBodyData) SetList(v []*ListVoicemailsResponseBodyDataList) *ListVoicemailsResponseBodyData {
	s.List = v
	return s
}

func (s *ListVoicemailsResponseBodyData) SetPageNumber(v int32) *ListVoicemailsResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListVoicemailsResponseBodyData) SetPageSize(v int32) *ListVoicemailsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListVoicemailsResponseBodyData) SetTotalCount(v int32) *ListVoicemailsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListVoicemailsResponseBodyDataList struct {
	// example:
	//
	// 0533128****
	Callee *string `json:"Callee,omitempty" xml:"Callee,omitempty"`
	// example:
	//
	// 073xxxx7539
	Caller       *string `json:"Caller,omitempty" xml:"Caller,omitempty"`
	CdrStartTime *int64  `json:"CdrStartTime,omitempty" xml:"CdrStartTime,omitempty"`
	// example:
	//
	// job-125152394144124921
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// example:
	//
	// 16
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// voicemail-test
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RecordingDuration *int64  `json:"RecordingDuration,omitempty" xml:"RecordingDuration,omitempty"`
	// example:
	//
	// 1631440860000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListVoicemailsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListVoicemailsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListVoicemailsResponseBodyDataList) SetCallee(v string) *ListVoicemailsResponseBodyDataList {
	s.Callee = &v
	return s
}

func (s *ListVoicemailsResponseBodyDataList) SetCaller(v string) *ListVoicemailsResponseBodyDataList {
	s.Caller = &v
	return s
}

func (s *ListVoicemailsResponseBodyDataList) SetCdrStartTime(v int64) *ListVoicemailsResponseBodyDataList {
	s.CdrStartTime = &v
	return s
}

func (s *ListVoicemailsResponseBodyDataList) SetContactId(v string) *ListVoicemailsResponseBodyDataList {
	s.ContactId = &v
	return s
}

func (s *ListVoicemailsResponseBodyDataList) SetDuration(v int64) *ListVoicemailsResponseBodyDataList {
	s.Duration = &v
	return s
}

func (s *ListVoicemailsResponseBodyDataList) SetInstanceId(v string) *ListVoicemailsResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *ListVoicemailsResponseBodyDataList) SetName(v string) *ListVoicemailsResponseBodyDataList {
	s.Name = &v
	return s
}

func (s *ListVoicemailsResponseBodyDataList) SetRecordingDuration(v int64) *ListVoicemailsResponseBodyDataList {
	s.RecordingDuration = &v
	return s
}

func (s *ListVoicemailsResponseBodyDataList) SetStartTime(v string) *ListVoicemailsResponseBodyDataList {
	s.StartTime = &v
	return s
}

type ListVoicemailsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListVoicemailsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListVoicemailsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListVoicemailsResponse) GoString() string {
	return s.String()
}

func (s *ListVoicemailsResponse) SetHeaders(v map[string]*string) *ListVoicemailsResponse {
	s.Headers = v
	return s
}

func (s *ListVoicemailsResponse) SetStatusCode(v int32) *ListVoicemailsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListVoicemailsResponse) SetBody(v *ListVoicemailsResponseBody) *ListVoicemailsResponse {
	s.Body = v
	return s
}

type MakeCallRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1318888****
	Callee *string `json:"Callee,omitempty" xml:"Callee,omitempty"`
	// example:
	//
	// 010989****
	Caller *string `json:"Caller,omitempty" xml:"Caller,omitempty"`
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 131****8888
	MaskedCallee *string `json:"MaskedCallee,omitempty" xml:"MaskedCallee,omitempty"`
	MediaType    *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// tags
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// example:
	//
	// 30
	TimeoutSeconds *int32 `json:"TimeoutSeconds,omitempty" xml:"TimeoutSeconds,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s MakeCallRequest) String() string {
	return tea.Prettify(s)
}

func (s MakeCallRequest) GoString() string {
	return s.String()
}

func (s *MakeCallRequest) SetCallee(v string) *MakeCallRequest {
	s.Callee = &v
	return s
}

func (s *MakeCallRequest) SetCaller(v string) *MakeCallRequest {
	s.Caller = &v
	return s
}

func (s *MakeCallRequest) SetDeviceId(v string) *MakeCallRequest {
	s.DeviceId = &v
	return s
}

func (s *MakeCallRequest) SetInstanceId(v string) *MakeCallRequest {
	s.InstanceId = &v
	return s
}

func (s *MakeCallRequest) SetMaskedCallee(v string) *MakeCallRequest {
	s.MaskedCallee = &v
	return s
}

func (s *MakeCallRequest) SetMediaType(v string) *MakeCallRequest {
	s.MediaType = &v
	return s
}

func (s *MakeCallRequest) SetTags(v string) *MakeCallRequest {
	s.Tags = &v
	return s
}

func (s *MakeCallRequest) SetTimeoutSeconds(v int32) *MakeCallRequest {
	s.TimeoutSeconds = &v
	return s
}

func (s *MakeCallRequest) SetUserId(v string) *MakeCallRequest {
	s.UserId = &v
	return s
}

type MakeCallResponseBody struct {
	// example:
	//
	// OK
	Code *string                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *MakeCallResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 26A34338-5CD9-4C95-A7A6-5BDCE76C6B94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s MakeCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MakeCallResponseBody) GoString() string {
	return s.String()
}

func (s *MakeCallResponseBody) SetCode(v string) *MakeCallResponseBody {
	s.Code = &v
	return s
}

func (s *MakeCallResponseBody) SetData(v *MakeCallResponseBodyData) *MakeCallResponseBody {
	s.Data = v
	return s
}

func (s *MakeCallResponseBody) SetHttpStatusCode(v int32) *MakeCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *MakeCallResponseBody) SetMessage(v string) *MakeCallResponseBody {
	s.Message = &v
	return s
}

func (s *MakeCallResponseBody) SetParams(v []*string) *MakeCallResponseBody {
	s.Params = v
	return s
}

func (s *MakeCallResponseBody) SetRequestId(v string) *MakeCallResponseBody {
	s.RequestId = &v
	return s
}

type MakeCallResponseBodyData struct {
	CallContext *MakeCallResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	// example:
	//
	// 123456
	ContextId   *int64                               `json:"ContextId,omitempty" xml:"ContextId,omitempty"`
	UserContext *MakeCallResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s MakeCallResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s MakeCallResponseBodyData) GoString() string {
	return s.String()
}

func (s *MakeCallResponseBodyData) SetCallContext(v *MakeCallResponseBodyDataCallContext) *MakeCallResponseBodyData {
	s.CallContext = v
	return s
}

func (s *MakeCallResponseBodyData) SetContextId(v int64) *MakeCallResponseBodyData {
	s.ContextId = &v
	return s
}

func (s *MakeCallResponseBodyData) SetUserContext(v *MakeCallResponseBodyDataUserContext) *MakeCallResponseBodyData {
	s.UserContext = v
	return s
}

type MakeCallResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                               `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*MakeCallResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6570007401392****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s MakeCallResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s MakeCallResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *MakeCallResponseBodyDataCallContext) SetCallType(v string) *MakeCallResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *MakeCallResponseBodyDataCallContext) SetChannelContexts(v []*MakeCallResponseBodyDataCallContextChannelContexts) *MakeCallResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *MakeCallResponseBodyDataCallContext) SetInstanceId(v string) *MakeCallResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *MakeCallResponseBodyDataCallContext) SetJobId(v string) *MakeCallResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type MakeCallResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// MONITORING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// NONE
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 8001****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// job-6570007401392****
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 1318888****
	Originator       *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	ReleaseReason    *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// 1609225718295
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8001****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s MakeCallResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s MakeCallResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *MakeCallResponseBodyDataCallContextChannelContexts) SetCallType(v string) *MakeCallResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *MakeCallResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *MakeCallResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *MakeCallResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *MakeCallResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *MakeCallResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *MakeCallResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *MakeCallResponseBodyDataCallContextChannelContexts) SetDestination(v string) *MakeCallResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *MakeCallResponseBodyDataCallContextChannelContexts) SetJobId(v string) *MakeCallResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *MakeCallResponseBodyDataCallContextChannelContexts) SetMediaType(v string) *MakeCallResponseBodyDataCallContextChannelContexts {
	s.MediaType = &v
	return s
}

func (s *MakeCallResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *MakeCallResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *MakeCallResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *MakeCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *MakeCallResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *MakeCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *MakeCallResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *MakeCallResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *MakeCallResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *MakeCallResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *MakeCallResponseBodyDataCallContextChannelContexts) SetUserId(v string) *MakeCallResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type MakeCallResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8001****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6570007401392****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// false
	OutboundScenario       *bool     `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// READY
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s MakeCallResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s MakeCallResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *MakeCallResponseBodyDataUserContext) SetBreakCode(v string) *MakeCallResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *MakeCallResponseBodyDataUserContext) SetDeviceId(v string) *MakeCallResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *MakeCallResponseBodyDataUserContext) SetExtension(v string) *MakeCallResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *MakeCallResponseBodyDataUserContext) SetInstanceId(v string) *MakeCallResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *MakeCallResponseBodyDataUserContext) SetJobId(v string) *MakeCallResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *MakeCallResponseBodyDataUserContext) SetOutboundScenario(v bool) *MakeCallResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *MakeCallResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *MakeCallResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *MakeCallResponseBodyDataUserContext) SetUserId(v string) *MakeCallResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *MakeCallResponseBodyDataUserContext) SetUserState(v string) *MakeCallResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *MakeCallResponseBodyDataUserContext) SetWorkMode(v string) *MakeCallResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type MakeCallResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *MakeCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s MakeCallResponse) String() string {
	return tea.Prettify(s)
}

func (s MakeCallResponse) GoString() string {
	return s.String()
}

func (s *MakeCallResponse) SetHeaders(v map[string]*string) *MakeCallResponse {
	s.Headers = v
	return s
}

func (s *MakeCallResponse) SetStatusCode(v int32) *MakeCallResponse {
	s.StatusCode = &v
	return s
}

func (s *MakeCallResponse) SetBody(v *MakeCallResponseBody) *MakeCallResponse {
	s.Body = v
	return s
}

type ModifyAudioFileRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// new-test-file.wav
	AudioFileName *string `json:"AudioFileName,omitempty" xml:"AudioFileName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// acc300c4-75c9-41ba-ba5e-2a365c96c248
	AudioResourceId *string `json:"AudioResourceId,omitempty" xml:"AudioResourceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test/new-test-file.wav
	OssFileKey *string `json:"OssFileKey,omitempty" xml:"OssFileKey,omitempty"`
	Usage      *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s ModifyAudioFileRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAudioFileRequest) GoString() string {
	return s.String()
}

func (s *ModifyAudioFileRequest) SetAudioFileName(v string) *ModifyAudioFileRequest {
	s.AudioFileName = &v
	return s
}

func (s *ModifyAudioFileRequest) SetAudioResourceId(v string) *ModifyAudioFileRequest {
	s.AudioResourceId = &v
	return s
}

func (s *ModifyAudioFileRequest) SetInstanceId(v string) *ModifyAudioFileRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyAudioFileRequest) SetName(v string) *ModifyAudioFileRequest {
	s.Name = &v
	return s
}

func (s *ModifyAudioFileRequest) SetOssFileKey(v string) *ModifyAudioFileRequest {
	s.OssFileKey = &v
	return s
}

func (s *ModifyAudioFileRequest) SetUsage(v string) *ModifyAudioFileRequest {
	s.Usage = &v
	return s
}

type ModifyAudioFileResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// D2F84AAC-7C79-547F-8EE9-7B735F42B93F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyAudioFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAudioFileResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAudioFileResponseBody) SetCode(v string) *ModifyAudioFileResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyAudioFileResponseBody) SetData(v string) *ModifyAudioFileResponseBody {
	s.Data = &v
	return s
}

func (s *ModifyAudioFileResponseBody) SetHttpStatusCode(v int32) *ModifyAudioFileResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyAudioFileResponseBody) SetMessage(v string) *ModifyAudioFileResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyAudioFileResponseBody) SetRequestId(v string) *ModifyAudioFileResponseBody {
	s.RequestId = &v
	return s
}

type ModifyAudioFileResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyAudioFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyAudioFileResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAudioFileResponse) GoString() string {
	return s.String()
}

func (s *ModifyAudioFileResponse) SetHeaders(v map[string]*string) *ModifyAudioFileResponse {
	s.Headers = v
	return s
}

func (s *ModifyAudioFileResponse) SetStatusCode(v int32) *ModifyAudioFileResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAudioFileResponse) SetBody(v *ModifyAudioFileResponseBody) *ModifyAudioFileResponse {
	s.Body = v
	return s
}

type ModifyCustomCallTaggingRequest struct {
	// example:
	//
	// ["TagA","TagB"]
	CallTagNameList *string `json:"CallTagNameList,omitempty" xml:"CallTagNameList,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1312121****
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
}

func (s ModifyCustomCallTaggingRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCustomCallTaggingRequest) GoString() string {
	return s.String()
}

func (s *ModifyCustomCallTaggingRequest) SetCallTagNameList(v string) *ModifyCustomCallTaggingRequest {
	s.CallTagNameList = &v
	return s
}

func (s *ModifyCustomCallTaggingRequest) SetDescription(v string) *ModifyCustomCallTaggingRequest {
	s.Description = &v
	return s
}

func (s *ModifyCustomCallTaggingRequest) SetInstanceId(v string) *ModifyCustomCallTaggingRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyCustomCallTaggingRequest) SetNumber(v string) *ModifyCustomCallTaggingRequest {
	s.Number = &v
	return s
}

type ModifyCustomCallTaggingResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyCustomCallTaggingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCustomCallTaggingResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCustomCallTaggingResponseBody) SetCode(v string) *ModifyCustomCallTaggingResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyCustomCallTaggingResponseBody) SetHttpStatusCode(v int32) *ModifyCustomCallTaggingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyCustomCallTaggingResponseBody) SetMessage(v string) *ModifyCustomCallTaggingResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyCustomCallTaggingResponseBody) SetRequestId(v string) *ModifyCustomCallTaggingResponseBody {
	s.RequestId = &v
	return s
}

type ModifyCustomCallTaggingResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyCustomCallTaggingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyCustomCallTaggingResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCustomCallTaggingResponse) GoString() string {
	return s.String()
}

func (s *ModifyCustomCallTaggingResponse) SetHeaders(v map[string]*string) *ModifyCustomCallTaggingResponse {
	s.Headers = v
	return s
}

func (s *ModifyCustomCallTaggingResponse) SetStatusCode(v int32) *ModifyCustomCallTaggingResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCustomCallTaggingResponse) SetBody(v *ModifyCustomCallTaggingResponseBody) *ModifyCustomCallTaggingResponse {
	s.Body = v
	return s
}

type ModifyInstanceRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ModifyInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceRequest) SetDescription(v string) *ModifyInstanceRequest {
	s.Description = &v
	return s
}

func (s *ModifyInstanceRequest) SetInstanceId(v string) *ModifyInstanceRequest {
	s.InstanceId = &v
	return s
}

type ModifyInstanceResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 83TKE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceResponseBody) SetCode(v string) *ModifyInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyInstanceResponseBody) SetData(v string) *ModifyInstanceResponseBody {
	s.Data = &v
	return s
}

func (s *ModifyInstanceResponseBody) SetHttpStatusCode(v int32) *ModifyInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyInstanceResponseBody) SetMessage(v string) *ModifyInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyInstanceResponseBody) SetRequestId(v string) *ModifyInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceResponse) SetHeaders(v map[string]*string) *ModifyInstanceResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceResponse) SetStatusCode(v int32) *ModifyInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceResponse) SetBody(v *ModifyInstanceResponseBody) *ModifyInstanceResponse {
	s.Body = v
	return s
}

type ModifyPhoneNumberRequest struct {
	// example:
	//
	// 78128960-bb00-4ddc-8a82-923a8c5bd22d
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0102134****
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Bidirection
	Usage *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s ModifyPhoneNumberRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhoneNumberRequest) GoString() string {
	return s.String()
}

func (s *ModifyPhoneNumberRequest) SetContactFlowId(v string) *ModifyPhoneNumberRequest {
	s.ContactFlowId = &v
	return s
}

func (s *ModifyPhoneNumberRequest) SetInstanceId(v string) *ModifyPhoneNumberRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyPhoneNumberRequest) SetNumber(v string) *ModifyPhoneNumberRequest {
	s.Number = &v
	return s
}

func (s *ModifyPhoneNumberRequest) SetUsage(v string) *ModifyPhoneNumberRequest {
	s.Usage = &v
	return s
}

type ModifyPhoneNumberResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyPhoneNumberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhoneNumberResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyPhoneNumberResponseBody) SetCode(v string) *ModifyPhoneNumberResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyPhoneNumberResponseBody) SetHttpStatusCode(v int32) *ModifyPhoneNumberResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyPhoneNumberResponseBody) SetMessage(v string) *ModifyPhoneNumberResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyPhoneNumberResponseBody) SetRequestId(v string) *ModifyPhoneNumberResponseBody {
	s.RequestId = &v
	return s
}

type ModifyPhoneNumberResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyPhoneNumberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyPhoneNumberResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhoneNumberResponse) GoString() string {
	return s.String()
}

func (s *ModifyPhoneNumberResponse) SetHeaders(v map[string]*string) *ModifyPhoneNumberResponse {
	s.Headers = v
	return s
}

func (s *ModifyPhoneNumberResponse) SetStatusCode(v int32) *ModifyPhoneNumberResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyPhoneNumberResponse) SetBody(v *ModifyPhoneNumberResponseBody) *ModifyPhoneNumberResponse {
	s.Body = v
	return s
}

type ModifySkillGroupRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s ModifySkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifySkillGroupRequest) SetDescription(v string) *ModifySkillGroupRequest {
	s.Description = &v
	return s
}

func (s *ModifySkillGroupRequest) SetDisplayName(v string) *ModifySkillGroupRequest {
	s.DisplayName = &v
	return s
}

func (s *ModifySkillGroupRequest) SetInstanceId(v string) *ModifySkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifySkillGroupRequest) SetSkillGroupId(v string) *ModifySkillGroupRequest {
	s.SkillGroupId = &v
	return s
}

type ModifySkillGroupResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySkillGroupResponseBody) SetCode(v string) *ModifySkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ModifySkillGroupResponseBody) SetHttpStatusCode(v int32) *ModifySkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifySkillGroupResponseBody) SetMessage(v string) *ModifySkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ModifySkillGroupResponseBody) SetRequestId(v string) *ModifySkillGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifySkillGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifySkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifySkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifySkillGroupResponse) SetHeaders(v map[string]*string) *ModifySkillGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifySkillGroupResponse) SetStatusCode(v int32) *ModifySkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySkillGroupResponse) SetBody(v *ModifySkillGroupResponseBody) *ModifySkillGroupResponse {
	s.Body = v
	return s
}

type ModifySkillLevelsOfUserRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [{"skillGroupId":"skillgroup1@ccc-test","skillLevel":1},{"skillGroupId":"skillgroup2@ccc-test","skillLevel":10}]
	SkillLevelList *string `json:"SkillLevelList,omitempty" xml:"SkillLevelList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ModifySkillLevelsOfUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillLevelsOfUserRequest) GoString() string {
	return s.String()
}

func (s *ModifySkillLevelsOfUserRequest) SetInstanceId(v string) *ModifySkillLevelsOfUserRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifySkillLevelsOfUserRequest) SetSkillLevelList(v string) *ModifySkillLevelsOfUserRequest {
	s.SkillLevelList = &v
	return s
}

func (s *ModifySkillLevelsOfUserRequest) SetUserId(v string) *ModifySkillLevelsOfUserRequest {
	s.UserId = &v
	return s
}

type ModifySkillLevelsOfUserResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// E49D8B83-A3EC-44D4-A920-578BC3C698AD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySkillLevelsOfUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillLevelsOfUserResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySkillLevelsOfUserResponseBody) SetCode(v string) *ModifySkillLevelsOfUserResponseBody {
	s.Code = &v
	return s
}

func (s *ModifySkillLevelsOfUserResponseBody) SetData(v string) *ModifySkillLevelsOfUserResponseBody {
	s.Data = &v
	return s
}

func (s *ModifySkillLevelsOfUserResponseBody) SetHttpStatusCode(v int32) *ModifySkillLevelsOfUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifySkillLevelsOfUserResponseBody) SetMessage(v string) *ModifySkillLevelsOfUserResponseBody {
	s.Message = &v
	return s
}

func (s *ModifySkillLevelsOfUserResponseBody) SetRequestId(v string) *ModifySkillLevelsOfUserResponseBody {
	s.RequestId = &v
	return s
}

type ModifySkillLevelsOfUserResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifySkillLevelsOfUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifySkillLevelsOfUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillLevelsOfUserResponse) GoString() string {
	return s.String()
}

func (s *ModifySkillLevelsOfUserResponse) SetHeaders(v map[string]*string) *ModifySkillLevelsOfUserResponse {
	s.Headers = v
	return s
}

func (s *ModifySkillLevelsOfUserResponse) SetStatusCode(v int32) *ModifySkillLevelsOfUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySkillLevelsOfUserResponse) SetBody(v *ModifySkillLevelsOfUserResponseBody) *ModifySkillLevelsOfUserResponse {
	s.Body = v
	return s
}

type ModifyUserRequest struct {
	AvatarUrl *string `json:"AvatarUrl,omitempty" xml:"AvatarUrl,omitempty"`
	// example:
	//
	// 1001
	DisplayId   *string `json:"DisplayId,omitempty" xml:"DisplayId,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Force       *bool   `json:"Force,omitempty" xml:"Force,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 1382114****
	Mobile   *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	Nickname *string `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
	// example:
	//
	// Admin@ccc-test
	RoleId *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// user-test@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s ModifyUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserRequest) GoString() string {
	return s.String()
}

func (s *ModifyUserRequest) SetAvatarUrl(v string) *ModifyUserRequest {
	s.AvatarUrl = &v
	return s
}

func (s *ModifyUserRequest) SetDisplayId(v string) *ModifyUserRequest {
	s.DisplayId = &v
	return s
}

func (s *ModifyUserRequest) SetDisplayName(v string) *ModifyUserRequest {
	s.DisplayName = &v
	return s
}

func (s *ModifyUserRequest) SetForce(v bool) *ModifyUserRequest {
	s.Force = &v
	return s
}

func (s *ModifyUserRequest) SetInstanceId(v string) *ModifyUserRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyUserRequest) SetMobile(v string) *ModifyUserRequest {
	s.Mobile = &v
	return s
}

func (s *ModifyUserRequest) SetNickname(v string) *ModifyUserRequest {
	s.Nickname = &v
	return s
}

func (s *ModifyUserRequest) SetRoleId(v string) *ModifyUserRequest {
	s.RoleId = &v
	return s
}

func (s *ModifyUserRequest) SetUserId(v string) *ModifyUserRequest {
	s.UserId = &v
	return s
}

func (s *ModifyUserRequest) SetWorkMode(v string) *ModifyUserRequest {
	s.WorkMode = &v
	return s
}

type ModifyUserResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyUserResponseBody) SetCode(v string) *ModifyUserResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyUserResponseBody) SetData(v string) *ModifyUserResponseBody {
	s.Data = &v
	return s
}

func (s *ModifyUserResponseBody) SetHttpStatusCode(v int32) *ModifyUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyUserResponseBody) SetMessage(v string) *ModifyUserResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyUserResponseBody) SetParams(v []*string) *ModifyUserResponseBody {
	s.Params = v
	return s
}

func (s *ModifyUserResponseBody) SetRequestId(v string) *ModifyUserResponseBody {
	s.RequestId = &v
	return s
}

type ModifyUserResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserResponse) GoString() string {
	return s.String()
}

func (s *ModifyUserResponse) SetHeaders(v map[string]*string) *ModifyUserResponse {
	s.Headers = v
	return s
}

func (s *ModifyUserResponse) SetStatusCode(v int32) *ModifyUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyUserResponse) SetBody(v *ModifyUserResponseBody) *ModifyUserResponse {
	s.Body = v
	return s
}

type ModifyUserLevelsOfSkillGroupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [{"userId":"agent1@ccc-test","skillLevel":1},{"userId":"agent2@ccc-test","skillLevel":10}]
	UserLevelList *string `json:"UserLevelList,omitempty" xml:"UserLevelList,omitempty"`
}

func (s ModifyUserLevelsOfSkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserLevelsOfSkillGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyUserLevelsOfSkillGroupRequest) SetInstanceId(v string) *ModifyUserLevelsOfSkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyUserLevelsOfSkillGroupRequest) SetSkillGroupId(v string) *ModifyUserLevelsOfSkillGroupRequest {
	s.SkillGroupId = &v
	return s
}

func (s *ModifyUserLevelsOfSkillGroupRequest) SetUserLevelList(v string) *ModifyUserLevelsOfSkillGroupRequest {
	s.UserLevelList = &v
	return s
}

type ModifyUserLevelsOfSkillGroupResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// E49D8B83-A3EC-44D4-A920-578BC3C698AD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyUserLevelsOfSkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserLevelsOfSkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyUserLevelsOfSkillGroupResponseBody) SetCode(v string) *ModifyUserLevelsOfSkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyUserLevelsOfSkillGroupResponseBody) SetData(v string) *ModifyUserLevelsOfSkillGroupResponseBody {
	s.Data = &v
	return s
}

func (s *ModifyUserLevelsOfSkillGroupResponseBody) SetHttpStatusCode(v int32) *ModifyUserLevelsOfSkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyUserLevelsOfSkillGroupResponseBody) SetMessage(v string) *ModifyUserLevelsOfSkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyUserLevelsOfSkillGroupResponseBody) SetRequestId(v string) *ModifyUserLevelsOfSkillGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyUserLevelsOfSkillGroupResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyUserLevelsOfSkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyUserLevelsOfSkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserLevelsOfSkillGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyUserLevelsOfSkillGroupResponse) SetHeaders(v map[string]*string) *ModifyUserLevelsOfSkillGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyUserLevelsOfSkillGroupResponse) SetStatusCode(v int32) *ModifyUserLevelsOfSkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyUserLevelsOfSkillGroupResponse) SetBody(v *ModifyUserLevelsOfSkillGroupResponseBody) *ModifyUserLevelsOfSkillGroupResponse {
	s.Body = v
	return s
}

type MonitorCallRequest struct {
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// agent2@ccc-test
	MonitoredUserId *string `json:"MonitoredUserId,omitempty" xml:"MonitoredUserId,omitempty"`
	// example:
	//
	// 30
	TimeoutSeconds *int32 `json:"TimeoutSeconds,omitempty" xml:"TimeoutSeconds,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s MonitorCallRequest) String() string {
	return tea.Prettify(s)
}

func (s MonitorCallRequest) GoString() string {
	return s.String()
}

func (s *MonitorCallRequest) SetDeviceId(v string) *MonitorCallRequest {
	s.DeviceId = &v
	return s
}

func (s *MonitorCallRequest) SetInstanceId(v string) *MonitorCallRequest {
	s.InstanceId = &v
	return s
}

func (s *MonitorCallRequest) SetMonitoredUserId(v string) *MonitorCallRequest {
	s.MonitoredUserId = &v
	return s
}

func (s *MonitorCallRequest) SetTimeoutSeconds(v int32) *MonitorCallRequest {
	s.TimeoutSeconds = &v
	return s
}

func (s *MonitorCallRequest) SetUserId(v string) *MonitorCallRequest {
	s.UserId = &v
	return s
}

type MonitorCallResponseBody struct {
	// example:
	//
	// OK
	Code *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *MonitorCallResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s MonitorCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MonitorCallResponseBody) GoString() string {
	return s.String()
}

func (s *MonitorCallResponseBody) SetCode(v string) *MonitorCallResponseBody {
	s.Code = &v
	return s
}

func (s *MonitorCallResponseBody) SetData(v *MonitorCallResponseBodyData) *MonitorCallResponseBody {
	s.Data = v
	return s
}

func (s *MonitorCallResponseBody) SetHttpStatusCode(v int32) *MonitorCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *MonitorCallResponseBody) SetMessage(v string) *MonitorCallResponseBody {
	s.Message = &v
	return s
}

func (s *MonitorCallResponseBody) SetParams(v []*string) *MonitorCallResponseBody {
	s.Params = v
	return s
}

func (s *MonitorCallResponseBody) SetRequestId(v string) *MonitorCallResponseBody {
	s.RequestId = &v
	return s
}

type MonitorCallResponseBodyData struct {
	CallContext *MonitorCallResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	UserContext *MonitorCallResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s MonitorCallResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s MonitorCallResponseBodyData) GoString() string {
	return s.String()
}

func (s *MonitorCallResponseBodyData) SetCallContext(v *MonitorCallResponseBodyDataCallContext) *MonitorCallResponseBodyData {
	s.CallContext = v
	return s
}

func (s *MonitorCallResponseBodyData) SetUserContext(v *MonitorCallResponseBodyDataUserContext) *MonitorCallResponseBodyData {
	s.UserContext = v
	return s
}

type MonitorCallResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                                  `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*MonitorCallResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s MonitorCallResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s MonitorCallResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *MonitorCallResponseBodyDataCallContext) SetCallType(v string) *MonitorCallResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *MonitorCallResponseBodyDataCallContext) SetChannelContexts(v []*MonitorCallResponseBodyDataCallContextChannelContexts) *MonitorCallResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *MonitorCallResponseBodyDataCallContext) SetInstanceId(v string) *MonitorCallResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *MonitorCallResponseBodyDataCallContext) SetJobId(v string) *MonitorCallResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type MonitorCallResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// MONITORING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// CREATED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 1390501****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// 1
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0830019****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s MonitorCallResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s MonitorCallResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *MonitorCallResponseBodyDataCallContextChannelContexts) SetCallType(v string) *MonitorCallResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *MonitorCallResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *MonitorCallResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *MonitorCallResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *MonitorCallResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *MonitorCallResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *MonitorCallResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *MonitorCallResponseBodyDataCallContextChannelContexts) SetDestination(v string) *MonitorCallResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *MonitorCallResponseBodyDataCallContextChannelContexts) SetIndex(v int32) *MonitorCallResponseBodyDataCallContextChannelContexts {
	s.Index = &v
	return s
}

func (s *MonitorCallResponseBodyDataCallContextChannelContexts) SetJobId(v string) *MonitorCallResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *MonitorCallResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *MonitorCallResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *MonitorCallResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *MonitorCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *MonitorCallResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *MonitorCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *MonitorCallResponseBodyDataCallContextChannelContexts) SetSkillGroupId(v string) *MonitorCallResponseBodyDataCallContextChannelContexts {
	s.SkillGroupId = &v
	return s
}

func (s *MonitorCallResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *MonitorCallResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *MonitorCallResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *MonitorCallResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *MonitorCallResponseBodyDataCallContextChannelContexts) SetUserId(v string) *MonitorCallResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type MonitorCallResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609136956378
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// BREAK
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s MonitorCallResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s MonitorCallResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *MonitorCallResponseBodyDataUserContext) SetBreakCode(v string) *MonitorCallResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *MonitorCallResponseBodyDataUserContext) SetDeviceId(v string) *MonitorCallResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *MonitorCallResponseBodyDataUserContext) SetExtension(v string) *MonitorCallResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *MonitorCallResponseBodyDataUserContext) SetHeartbeat(v int64) *MonitorCallResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *MonitorCallResponseBodyDataUserContext) SetInstanceId(v string) *MonitorCallResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *MonitorCallResponseBodyDataUserContext) SetJobId(v string) *MonitorCallResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *MonitorCallResponseBodyDataUserContext) SetMobile(v string) *MonitorCallResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *MonitorCallResponseBodyDataUserContext) SetOutboundScenario(v bool) *MonitorCallResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *MonitorCallResponseBodyDataUserContext) SetReserved(v int64) *MonitorCallResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *MonitorCallResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *MonitorCallResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *MonitorCallResponseBodyDataUserContext) SetUserId(v string) *MonitorCallResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *MonitorCallResponseBodyDataUserContext) SetUserState(v string) *MonitorCallResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *MonitorCallResponseBodyDataUserContext) SetWorkMode(v string) *MonitorCallResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type MonitorCallResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *MonitorCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s MonitorCallResponse) String() string {
	return tea.Prettify(s)
}

func (s MonitorCallResponse) GoString() string {
	return s.String()
}

func (s *MonitorCallResponse) SetHeaders(v map[string]*string) *MonitorCallResponse {
	s.Headers = v
	return s
}

func (s *MonitorCallResponse) SetStatusCode(v int32) *MonitorCallResponse {
	s.StatusCode = &v
	return s
}

func (s *MonitorCallResponse) SetBody(v *MonitorCallResponseBody) *MonitorCallResponse {
	s.Body = v
	return s
}

type MuteCallRequest struct {
	// example:
	//
	// ch:user:1318888****->8001****:1609253204816:job-6581536084722****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-6581536084722****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s MuteCallRequest) String() string {
	return tea.Prettify(s)
}

func (s MuteCallRequest) GoString() string {
	return s.String()
}

func (s *MuteCallRequest) SetChannelId(v string) *MuteCallRequest {
	s.ChannelId = &v
	return s
}

func (s *MuteCallRequest) SetDeviceId(v string) *MuteCallRequest {
	s.DeviceId = &v
	return s
}

func (s *MuteCallRequest) SetInstanceId(v string) *MuteCallRequest {
	s.InstanceId = &v
	return s
}

func (s *MuteCallRequest) SetJobId(v string) *MuteCallRequest {
	s.JobId = &v
	return s
}

func (s *MuteCallRequest) SetUserId(v string) *MuteCallRequest {
	s.UserId = &v
	return s
}

type MuteCallResponseBody struct {
	// example:
	//
	// OK
	Code *string                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *MuteCallResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// A275B008-A25B-494D-AB53-93CE253815B6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s MuteCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MuteCallResponseBody) GoString() string {
	return s.String()
}

func (s *MuteCallResponseBody) SetCode(v string) *MuteCallResponseBody {
	s.Code = &v
	return s
}

func (s *MuteCallResponseBody) SetData(v *MuteCallResponseBodyData) *MuteCallResponseBody {
	s.Data = v
	return s
}

func (s *MuteCallResponseBody) SetHttpStatusCode(v int32) *MuteCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *MuteCallResponseBody) SetMessage(v string) *MuteCallResponseBody {
	s.Message = &v
	return s
}

func (s *MuteCallResponseBody) SetParams(v []*string) *MuteCallResponseBody {
	s.Params = v
	return s
}

func (s *MuteCallResponseBody) SetRequestId(v string) *MuteCallResponseBody {
	s.RequestId = &v
	return s
}

type MuteCallResponseBodyData struct {
	CallContext *MuteCallResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	UserContext *MuteCallResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s MuteCallResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s MuteCallResponseBodyData) GoString() string {
	return s.String()
}

func (s *MuteCallResponseBodyData) SetCallContext(v *MuteCallResponseBodyDataCallContext) *MuteCallResponseBodyData {
	s.CallContext = v
	return s
}

func (s *MuteCallResponseBodyData) SetUserContext(v *MuteCallResponseBodyDataUserContext) *MuteCallResponseBodyData {
	s.UserContext = v
	return s
}

type MuteCallResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                               `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*MuteCallResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6581536084722****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s MuteCallResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s MuteCallResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *MuteCallResponseBodyDataCallContext) SetCallType(v string) *MuteCallResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *MuteCallResponseBodyDataCallContext) SetChannelContexts(v []*MuteCallResponseBodyDataCallContextChannelContexts) *MuteCallResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *MuteCallResponseBodyDataCallContext) SetInstanceId(v string) *MuteCallResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *MuteCallResponseBodyDataCallContext) SetJobId(v string) *MuteCallResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type MuteCallResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// []
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:1318888****->8001****:1609253204816:job-6581536084722****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// ANSWERED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 8001****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// 1
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// job-6581536084722****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1318888****
	Originator       *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	ReleaseReason    *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	SkillGroupId     *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1609253212511
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8001****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s MuteCallResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s MuteCallResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *MuteCallResponseBodyDataCallContextChannelContexts) SetCallType(v string) *MuteCallResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *MuteCallResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *MuteCallResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *MuteCallResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *MuteCallResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *MuteCallResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *MuteCallResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *MuteCallResponseBodyDataCallContextChannelContexts) SetDestination(v string) *MuteCallResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *MuteCallResponseBodyDataCallContextChannelContexts) SetIndex(v int32) *MuteCallResponseBodyDataCallContextChannelContexts {
	s.Index = &v
	return s
}

func (s *MuteCallResponseBodyDataCallContextChannelContexts) SetJobId(v string) *MuteCallResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *MuteCallResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *MuteCallResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *MuteCallResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *MuteCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *MuteCallResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *MuteCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *MuteCallResponseBodyDataCallContextChannelContexts) SetSkillGroupId(v string) *MuteCallResponseBodyDataCallContextChannelContexts {
	s.SkillGroupId = &v
	return s
}

func (s *MuteCallResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *MuteCallResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *MuteCallResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *MuteCallResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *MuteCallResponseBodyDataCallContextChannelContexts) SetUserId(v string) *MuteCallResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type MuteCallResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8001****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609253205896
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6581536084722****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1390000****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609253204811
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s MuteCallResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s MuteCallResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *MuteCallResponseBodyDataUserContext) SetBreakCode(v string) *MuteCallResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *MuteCallResponseBodyDataUserContext) SetDeviceId(v string) *MuteCallResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *MuteCallResponseBodyDataUserContext) SetExtension(v string) *MuteCallResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *MuteCallResponseBodyDataUserContext) SetHeartbeat(v int64) *MuteCallResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *MuteCallResponseBodyDataUserContext) SetInstanceId(v string) *MuteCallResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *MuteCallResponseBodyDataUserContext) SetJobId(v string) *MuteCallResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *MuteCallResponseBodyDataUserContext) SetMobile(v string) *MuteCallResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *MuteCallResponseBodyDataUserContext) SetOutboundScenario(v bool) *MuteCallResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *MuteCallResponseBodyDataUserContext) SetReserved(v int64) *MuteCallResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *MuteCallResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *MuteCallResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *MuteCallResponseBodyDataUserContext) SetUserId(v string) *MuteCallResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *MuteCallResponseBodyDataUserContext) SetUserState(v string) *MuteCallResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *MuteCallResponseBodyDataUserContext) SetWorkMode(v string) *MuteCallResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type MuteCallResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *MuteCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s MuteCallResponse) String() string {
	return tea.Prettify(s)
}

func (s MuteCallResponse) GoString() string {
	return s.String()
}

func (s *MuteCallResponse) SetHeaders(v map[string]*string) *MuteCallResponse {
	s.Headers = v
	return s
}

func (s *MuteCallResponse) SetStatusCode(v int32) *MuteCallResponse {
	s.StatusCode = &v
	return s
}

func (s *MuteCallResponse) SetBody(v *MuteCallResponseBody) *MuteCallResponse {
	s.Body = v
	return s
}

type PauseCampaignRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 6badb397-a8b5-40b6-21019d382a09
	CampaignId *string `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s PauseCampaignRequest) String() string {
	return tea.Prettify(s)
}

func (s PauseCampaignRequest) GoString() string {
	return s.String()
}

func (s *PauseCampaignRequest) SetCampaignId(v string) *PauseCampaignRequest {
	s.CampaignId = &v
	return s
}

func (s *PauseCampaignRequest) SetInstanceId(v string) *PauseCampaignRequest {
	s.InstanceId = &v
	return s
}

type PauseCampaignResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 4A68E287-6888-5ADB-8048-DB488B4DEF35
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PauseCampaignResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PauseCampaignResponseBody) GoString() string {
	return s.String()
}

func (s *PauseCampaignResponseBody) SetCode(v string) *PauseCampaignResponseBody {
	s.Code = &v
	return s
}

func (s *PauseCampaignResponseBody) SetHttpStatusCode(v string) *PauseCampaignResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *PauseCampaignResponseBody) SetMessage(v string) *PauseCampaignResponseBody {
	s.Message = &v
	return s
}

func (s *PauseCampaignResponseBody) SetRequestId(v string) *PauseCampaignResponseBody {
	s.RequestId = &v
	return s
}

type PauseCampaignResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PauseCampaignResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PauseCampaignResponse) String() string {
	return tea.Prettify(s)
}

func (s PauseCampaignResponse) GoString() string {
	return s.String()
}

func (s *PauseCampaignResponse) SetHeaders(v map[string]*string) *PauseCampaignResponse {
	s.Headers = v
	return s
}

func (s *PauseCampaignResponse) SetStatusCode(v int32) *PauseCampaignResponse {
	s.StatusCode = &v
	return s
}

func (s *PauseCampaignResponse) SetBody(v *PauseCampaignResponseBody) *PauseCampaignResponse {
	s.Body = v
	return s
}

type PickOutboundNumbersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1388888****
	CalledNumber *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	// example:
	//
	// 1
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["skillgroup@ccc-test"]
	SkillGroupIdList *string `json:"SkillGroupIdList,omitempty" xml:"SkillGroupIdList,omitempty"`
}

func (s PickOutboundNumbersRequest) String() string {
	return tea.Prettify(s)
}

func (s PickOutboundNumbersRequest) GoString() string {
	return s.String()
}

func (s *PickOutboundNumbersRequest) SetCalledNumber(v string) *PickOutboundNumbersRequest {
	s.CalledNumber = &v
	return s
}

func (s *PickOutboundNumbersRequest) SetCount(v int32) *PickOutboundNumbersRequest {
	s.Count = &v
	return s
}

func (s *PickOutboundNumbersRequest) SetInstanceId(v string) *PickOutboundNumbersRequest {
	s.InstanceId = &v
	return s
}

func (s *PickOutboundNumbersRequest) SetSkillGroupIdList(v string) *PickOutboundNumbersRequest {
	s.SkillGroupIdList = &v
	return s
}

type PickOutboundNumbersResponseBody struct {
	// example:
	//
	// OK
	Code *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*PickOutboundNumbersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PickOutboundNumbersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PickOutboundNumbersResponseBody) GoString() string {
	return s.String()
}

func (s *PickOutboundNumbersResponseBody) SetCode(v string) *PickOutboundNumbersResponseBody {
	s.Code = &v
	return s
}

func (s *PickOutboundNumbersResponseBody) SetData(v []*PickOutboundNumbersResponseBodyData) *PickOutboundNumbersResponseBody {
	s.Data = v
	return s
}

func (s *PickOutboundNumbersResponseBody) SetHttpStatusCode(v int32) *PickOutboundNumbersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *PickOutboundNumbersResponseBody) SetMessage(v string) *PickOutboundNumbersResponseBody {
	s.Message = &v
	return s
}

func (s *PickOutboundNumbersResponseBody) SetRequestId(v string) *PickOutboundNumbersResponseBody {
	s.RequestId = &v
	return s
}

type PickOutboundNumbersResponseBodyData struct {
	Callee *PickOutboundNumbersResponseBodyDataCallee `json:"Callee,omitempty" xml:"Callee,omitempty" type:"Struct"`
	Caller *PickOutboundNumbersResponseBodyDataCaller `json:"Caller,omitempty" xml:"Caller,omitempty" type:"Struct"`
}

func (s PickOutboundNumbersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s PickOutboundNumbersResponseBodyData) GoString() string {
	return s.String()
}

func (s *PickOutboundNumbersResponseBodyData) SetCallee(v *PickOutboundNumbersResponseBodyDataCallee) *PickOutboundNumbersResponseBodyData {
	s.Callee = v
	return s
}

func (s *PickOutboundNumbersResponseBodyData) SetCaller(v *PickOutboundNumbersResponseBodyDataCaller) *PickOutboundNumbersResponseBodyData {
	s.Caller = v
	return s
}

type PickOutboundNumbersResponseBodyDataCallee struct {
	City *string `json:"City,omitempty" xml:"City,omitempty"`
	// example:
	//
	// 1388888****
	Number   *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s PickOutboundNumbersResponseBodyDataCallee) String() string {
	return tea.Prettify(s)
}

func (s PickOutboundNumbersResponseBodyDataCallee) GoString() string {
	return s.String()
}

func (s *PickOutboundNumbersResponseBodyDataCallee) SetCity(v string) *PickOutboundNumbersResponseBodyDataCallee {
	s.City = &v
	return s
}

func (s *PickOutboundNumbersResponseBodyDataCallee) SetNumber(v string) *PickOutboundNumbersResponseBodyDataCallee {
	s.Number = &v
	return s
}

func (s *PickOutboundNumbersResponseBodyDataCallee) SetProvince(v string) *PickOutboundNumbersResponseBodyDataCallee {
	s.Province = &v
	return s
}

type PickOutboundNumbersResponseBodyDataCaller struct {
	City *string `json:"City,omitempty" xml:"City,omitempty"`
	// example:
	//
	// 0108989****
	Number   *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s PickOutboundNumbersResponseBodyDataCaller) String() string {
	return tea.Prettify(s)
}

func (s PickOutboundNumbersResponseBodyDataCaller) GoString() string {
	return s.String()
}

func (s *PickOutboundNumbersResponseBodyDataCaller) SetCity(v string) *PickOutboundNumbersResponseBodyDataCaller {
	s.City = &v
	return s
}

func (s *PickOutboundNumbersResponseBodyDataCaller) SetNumber(v string) *PickOutboundNumbersResponseBodyDataCaller {
	s.Number = &v
	return s
}

func (s *PickOutboundNumbersResponseBodyDataCaller) SetProvince(v string) *PickOutboundNumbersResponseBodyDataCaller {
	s.Province = &v
	return s
}

type PickOutboundNumbersResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PickOutboundNumbersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PickOutboundNumbersResponse) String() string {
	return tea.Prettify(s)
}

func (s PickOutboundNumbersResponse) GoString() string {
	return s.String()
}

func (s *PickOutboundNumbersResponse) SetHeaders(v map[string]*string) *PickOutboundNumbersResponse {
	s.Headers = v
	return s
}

func (s *PickOutboundNumbersResponse) SetStatusCode(v int32) *PickOutboundNumbersResponse {
	s.StatusCode = &v
	return s
}

func (s *PickOutboundNumbersResponse) SetBody(v *PickOutboundNumbersResponseBody) *PickOutboundNumbersResponse {
	s.Body = v
	return s
}

type PollUserStatusRequest struct {
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s PollUserStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s PollUserStatusRequest) GoString() string {
	return s.String()
}

func (s *PollUserStatusRequest) SetDeviceId(v string) *PollUserStatusRequest {
	s.DeviceId = &v
	return s
}

func (s *PollUserStatusRequest) SetInstanceId(v string) *PollUserStatusRequest {
	s.InstanceId = &v
	return s
}

func (s *PollUserStatusRequest) SetUserId(v string) *PollUserStatusRequest {
	s.UserId = &v
	return s
}

type PollUserStatusResponseBody struct {
	// example:
	//
	// OK
	Code *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *PollUserStatusResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PollUserStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PollUserStatusResponseBody) GoString() string {
	return s.String()
}

func (s *PollUserStatusResponseBody) SetCode(v string) *PollUserStatusResponseBody {
	s.Code = &v
	return s
}

func (s *PollUserStatusResponseBody) SetData(v *PollUserStatusResponseBodyData) *PollUserStatusResponseBody {
	s.Data = v
	return s
}

func (s *PollUserStatusResponseBody) SetHttpStatusCode(v int32) *PollUserStatusResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *PollUserStatusResponseBody) SetMessage(v string) *PollUserStatusResponseBody {
	s.Message = &v
	return s
}

func (s *PollUserStatusResponseBody) SetParams(v []*string) *PollUserStatusResponseBody {
	s.Params = v
	return s
}

func (s *PollUserStatusResponseBody) SetRequestId(v string) *PollUserStatusResponseBody {
	s.RequestId = &v
	return s
}

type PollUserStatusResponseBodyData struct {
	CallContext  *PollUserStatusResponseBodyDataCallContext    `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	ChatContexts []*PollUserStatusResponseBodyDataChatContexts `json:"ChatContexts,omitempty" xml:"ChatContexts,omitempty" type:"Repeated"`
	// example:
	//
	// 103655
	ContextId   *int64                                     `json:"ContextId,omitempty" xml:"ContextId,omitempty"`
	UserContext *PollUserStatusResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s PollUserStatusResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s PollUserStatusResponseBodyData) GoString() string {
	return s.String()
}

func (s *PollUserStatusResponseBodyData) SetCallContext(v *PollUserStatusResponseBodyDataCallContext) *PollUserStatusResponseBodyData {
	s.CallContext = v
	return s
}

func (s *PollUserStatusResponseBodyData) SetChatContexts(v []*PollUserStatusResponseBodyDataChatContexts) *PollUserStatusResponseBodyData {
	s.ChatContexts = v
	return s
}

func (s *PollUserStatusResponseBodyData) SetContextId(v int64) *PollUserStatusResponseBodyData {
	s.ContextId = &v
	return s
}

func (s *PollUserStatusResponseBodyData) SetUserContext(v *PollUserStatusResponseBodyDataUserContext) *PollUserStatusResponseBodyData {
	s.UserContext = v
	return s
}

type PollUserStatusResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// a=b;c=d
	CallVariables   *string                                                     `json:"CallVariables,omitempty" xml:"CallVariables,omitempty"`
	ChannelContexts []*PollUserStatusResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s PollUserStatusResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s PollUserStatusResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *PollUserStatusResponseBodyDataCallContext) SetCallType(v string) *PollUserStatusResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContext) SetCallVariables(v string) *PollUserStatusResponseBodyDataCallContext {
	s.CallVariables = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContext) SetChannelContexts(v []*PollUserStatusResponseBodyDataCallContextChannelContexts) *PollUserStatusResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContext) SetInstanceId(v string) *PollUserStatusResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContext) SetJobId(v string) *PollUserStatusResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type PollUserStatusResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// MONITORING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// CREATED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 123
	ChannelVariables *string `json:"ChannelVariables,omitempty" xml:"ChannelVariables,omitempty"`
	// example:
	//
	// 1390501****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// 1
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0830019****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s PollUserStatusResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s PollUserStatusResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *PollUserStatusResponseBodyDataCallContextChannelContexts) SetCallType(v string) *PollUserStatusResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *PollUserStatusResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *PollUserStatusResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *PollUserStatusResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContextChannelContexts) SetChannelVariables(v string) *PollUserStatusResponseBodyDataCallContextChannelContexts {
	s.ChannelVariables = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContextChannelContexts) SetDestination(v string) *PollUserStatusResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContextChannelContexts) SetIndex(v int32) *PollUserStatusResponseBodyDataCallContextChannelContexts {
	s.Index = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContextChannelContexts) SetJobId(v string) *PollUserStatusResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *PollUserStatusResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *PollUserStatusResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *PollUserStatusResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContextChannelContexts) SetSkillGroupId(v string) *PollUserStatusResponseBodyDataCallContextChannelContexts {
	s.SkillGroupId = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *PollUserStatusResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *PollUserStatusResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *PollUserStatusResponseBodyDataCallContextChannelContexts) SetUserId(v string) *PollUserStatusResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type PollUserStatusResponseBodyDataChatContexts struct {
	CallVariables *string                                              `json:"CallVariables,omitempty" xml:"CallVariables,omitempty"`
	ChatType      *string                                              `json:"ChatType,omitempty" xml:"ChatType,omitempty"`
	InstanceId    *string                                              `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobId         *string                                              `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Members       []*PollUserStatusResponseBodyDataChatContextsMembers `json:"Members,omitempty" xml:"Members,omitempty" type:"Repeated"`
}

func (s PollUserStatusResponseBodyDataChatContexts) String() string {
	return tea.Prettify(s)
}

func (s PollUserStatusResponseBodyDataChatContexts) GoString() string {
	return s.String()
}

func (s *PollUserStatusResponseBodyDataChatContexts) SetCallVariables(v string) *PollUserStatusResponseBodyDataChatContexts {
	s.CallVariables = &v
	return s
}

func (s *PollUserStatusResponseBodyDataChatContexts) SetChatType(v string) *PollUserStatusResponseBodyDataChatContexts {
	s.ChatType = &v
	return s
}

func (s *PollUserStatusResponseBodyDataChatContexts) SetInstanceId(v string) *PollUserStatusResponseBodyDataChatContexts {
	s.InstanceId = &v
	return s
}

func (s *PollUserStatusResponseBodyDataChatContexts) SetJobId(v string) *PollUserStatusResponseBodyDataChatContexts {
	s.JobId = &v
	return s
}

func (s *PollUserStatusResponseBodyDataChatContexts) SetMembers(v []*PollUserStatusResponseBodyDataChatContextsMembers) *PollUserStatusResponseBodyDataChatContexts {
	s.Members = v
	return s
}

type PollUserStatusResponseBodyDataChatContextsMembers struct {
	Index            *int32  `json:"Index,omitempty" xml:"Index,omitempty"`
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	ReleaseReason    *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	SkillGroupId     *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UserId           *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserType         *string `json:"UserType,omitempty" xml:"UserType,omitempty"`
}

func (s PollUserStatusResponseBodyDataChatContextsMembers) String() string {
	return tea.Prettify(s)
}

func (s PollUserStatusResponseBodyDataChatContextsMembers) GoString() string {
	return s.String()
}

func (s *PollUserStatusResponseBodyDataChatContextsMembers) SetIndex(v int32) *PollUserStatusResponseBodyDataChatContextsMembers {
	s.Index = &v
	return s
}

func (s *PollUserStatusResponseBodyDataChatContextsMembers) SetReleaseInitiator(v string) *PollUserStatusResponseBodyDataChatContextsMembers {
	s.ReleaseInitiator = &v
	return s
}

func (s *PollUserStatusResponseBodyDataChatContextsMembers) SetReleaseReason(v string) *PollUserStatusResponseBodyDataChatContextsMembers {
	s.ReleaseReason = &v
	return s
}

func (s *PollUserStatusResponseBodyDataChatContextsMembers) SetSkillGroupId(v string) *PollUserStatusResponseBodyDataChatContextsMembers {
	s.SkillGroupId = &v
	return s
}

func (s *PollUserStatusResponseBodyDataChatContextsMembers) SetStatus(v string) *PollUserStatusResponseBodyDataChatContextsMembers {
	s.Status = &v
	return s
}

func (s *PollUserStatusResponseBodyDataChatContextsMembers) SetUserId(v string) *PollUserStatusResponseBodyDataChatContextsMembers {
	s.UserId = &v
	return s
}

func (s *PollUserStatusResponseBodyDataChatContextsMembers) SetUserType(v string) *PollUserStatusResponseBodyDataChatContextsMembers {
	s.UserType = &v
	return s
}

type PollUserStatusResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool                                                       `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	ParallelJobList  []*PollUserStatusResponseBodyDataUserContextParallelJobList `json:"ParallelJobList,omitempty" xml:"ParallelJobList,omitempty" type:"Repeated"`
	// example:
	//
	// 1609136956378
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// BREAK
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s PollUserStatusResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s PollUserStatusResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *PollUserStatusResponseBodyDataUserContext) SetBreakCode(v string) *PollUserStatusResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *PollUserStatusResponseBodyDataUserContext) SetDeviceId(v string) *PollUserStatusResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *PollUserStatusResponseBodyDataUserContext) SetExtension(v string) *PollUserStatusResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *PollUserStatusResponseBodyDataUserContext) SetHeartbeat(v int64) *PollUserStatusResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *PollUserStatusResponseBodyDataUserContext) SetInstanceId(v string) *PollUserStatusResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *PollUserStatusResponseBodyDataUserContext) SetJobId(v string) *PollUserStatusResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *PollUserStatusResponseBodyDataUserContext) SetMobile(v string) *PollUserStatusResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *PollUserStatusResponseBodyDataUserContext) SetOutboundScenario(v bool) *PollUserStatusResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *PollUserStatusResponseBodyDataUserContext) SetParallelJobList(v []*PollUserStatusResponseBodyDataUserContextParallelJobList) *PollUserStatusResponseBodyDataUserContext {
	s.ParallelJobList = v
	return s
}

func (s *PollUserStatusResponseBodyDataUserContext) SetReserved(v int64) *PollUserStatusResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *PollUserStatusResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *PollUserStatusResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *PollUserStatusResponseBodyDataUserContext) SetUserId(v string) *PollUserStatusResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *PollUserStatusResponseBodyDataUserContext) SetUserState(v string) *PollUserStatusResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *PollUserStatusResponseBodyDataUserContext) SetWorkMode(v string) *PollUserStatusResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type PollUserStatusResponseBodyDataUserContextParallelJobList struct {
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Timestamp *int64  `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s PollUserStatusResponseBodyDataUserContextParallelJobList) String() string {
	return tea.Prettify(s)
}

func (s PollUserStatusResponseBodyDataUserContextParallelJobList) GoString() string {
	return s.String()
}

func (s *PollUserStatusResponseBodyDataUserContextParallelJobList) SetJobId(v string) *PollUserStatusResponseBodyDataUserContextParallelJobList {
	s.JobId = &v
	return s
}

func (s *PollUserStatusResponseBodyDataUserContextParallelJobList) SetStatus(v string) *PollUserStatusResponseBodyDataUserContextParallelJobList {
	s.Status = &v
	return s
}

func (s *PollUserStatusResponseBodyDataUserContextParallelJobList) SetTimestamp(v int64) *PollUserStatusResponseBodyDataUserContextParallelJobList {
	s.Timestamp = &v
	return s
}

type PollUserStatusResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PollUserStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PollUserStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s PollUserStatusResponse) GoString() string {
	return s.String()
}

func (s *PollUserStatusResponse) SetHeaders(v map[string]*string) *PollUserStatusResponse {
	s.Headers = v
	return s
}

func (s *PollUserStatusResponse) SetStatusCode(v int32) *PollUserStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *PollUserStatusResponse) SetBody(v *PollUserStatusResponseBody) *PollUserStatusResponse {
	s.Body = v
	return s
}

type ProcessAliMeCallbackOfStagingRequest struct {
	Data  *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s ProcessAliMeCallbackOfStagingRequest) String() string {
	return tea.Prettify(s)
}

func (s ProcessAliMeCallbackOfStagingRequest) GoString() string {
	return s.String()
}

func (s *ProcessAliMeCallbackOfStagingRequest) SetData(v string) *ProcessAliMeCallbackOfStagingRequest {
	s.Data = &v
	return s
}

func (s *ProcessAliMeCallbackOfStagingRequest) SetToken(v string) *ProcessAliMeCallbackOfStagingRequest {
	s.Token = &v
	return s
}

type ProcessAliMeCallbackOfStagingResponseBody struct {
	Code           *string                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *ProcessAliMeCallbackOfStagingResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                                         `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                        `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ProcessAliMeCallbackOfStagingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ProcessAliMeCallbackOfStagingResponseBody) GoString() string {
	return s.String()
}

func (s *ProcessAliMeCallbackOfStagingResponseBody) SetCode(v string) *ProcessAliMeCallbackOfStagingResponseBody {
	s.Code = &v
	return s
}

func (s *ProcessAliMeCallbackOfStagingResponseBody) SetData(v *ProcessAliMeCallbackOfStagingResponseBodyData) *ProcessAliMeCallbackOfStagingResponseBody {
	s.Data = v
	return s
}

func (s *ProcessAliMeCallbackOfStagingResponseBody) SetHttpStatusCode(v int32) *ProcessAliMeCallbackOfStagingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ProcessAliMeCallbackOfStagingResponseBody) SetMessage(v string) *ProcessAliMeCallbackOfStagingResponseBody {
	s.Message = &v
	return s
}

func (s *ProcessAliMeCallbackOfStagingResponseBody) SetRequestId(v string) *ProcessAliMeCallbackOfStagingResponseBody {
	s.RequestId = &v
	return s
}

type ProcessAliMeCallbackOfStagingResponseBodyData struct {
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s ProcessAliMeCallbackOfStagingResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ProcessAliMeCallbackOfStagingResponseBodyData) GoString() string {
	return s.String()
}

func (s *ProcessAliMeCallbackOfStagingResponseBodyData) SetResult(v string) *ProcessAliMeCallbackOfStagingResponseBodyData {
	s.Result = &v
	return s
}

type ProcessAliMeCallbackOfStagingResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ProcessAliMeCallbackOfStagingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ProcessAliMeCallbackOfStagingResponse) String() string {
	return tea.Prettify(s)
}

func (s ProcessAliMeCallbackOfStagingResponse) GoString() string {
	return s.String()
}

func (s *ProcessAliMeCallbackOfStagingResponse) SetHeaders(v map[string]*string) *ProcessAliMeCallbackOfStagingResponse {
	s.Headers = v
	return s
}

func (s *ProcessAliMeCallbackOfStagingResponse) SetStatusCode(v int32) *ProcessAliMeCallbackOfStagingResponse {
	s.StatusCode = &v
	return s
}

func (s *ProcessAliMeCallbackOfStagingResponse) SetBody(v *ProcessAliMeCallbackOfStagingResponseBody) *ProcessAliMeCallbackOfStagingResponse {
	s.Body = v
	return s
}

type PublishContactFlowRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// b0a063bf-f138-42a4-ad9f-9babe3ec1a9e
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0e0b8e78-af3e-4360-a5c5-f9bb5c2b8af2
	DraftId *string `json:"DraftId,omitempty" xml:"DraftId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s PublishContactFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s PublishContactFlowRequest) GoString() string {
	return s.String()
}

func (s *PublishContactFlowRequest) SetContactFlowId(v string) *PublishContactFlowRequest {
	s.ContactFlowId = &v
	return s
}

func (s *PublishContactFlowRequest) SetDraftId(v string) *PublishContactFlowRequest {
	s.DraftId = &v
	return s
}

func (s *PublishContactFlowRequest) SetInstanceId(v string) *PublishContactFlowRequest {
	s.InstanceId = &v
	return s
}

type PublishContactFlowResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BFB6788F-20D4-5767-BC67-99EAAC28F789
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PublishContactFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PublishContactFlowResponseBody) GoString() string {
	return s.String()
}

func (s *PublishContactFlowResponseBody) SetCode(v string) *PublishContactFlowResponseBody {
	s.Code = &v
	return s
}

func (s *PublishContactFlowResponseBody) SetHttpStatusCode(v int32) *PublishContactFlowResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *PublishContactFlowResponseBody) SetMessage(v string) *PublishContactFlowResponseBody {
	s.Message = &v
	return s
}

func (s *PublishContactFlowResponseBody) SetRequestId(v string) *PublishContactFlowResponseBody {
	s.RequestId = &v
	return s
}

type PublishContactFlowResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PublishContactFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PublishContactFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s PublishContactFlowResponse) GoString() string {
	return s.String()
}

func (s *PublishContactFlowResponse) SetHeaders(v map[string]*string) *PublishContactFlowResponse {
	s.Headers = v
	return s
}

func (s *PublishContactFlowResponse) SetStatusCode(v int32) *PublishContactFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *PublishContactFlowResponse) SetBody(v *PublishContactFlowResponseBody) *PublishContactFlowResponse {
	s.Body = v
	return s
}

type ReadyForServiceRequest struct {
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// user-test@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ReadyForServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReadyForServiceRequest) GoString() string {
	return s.String()
}

func (s *ReadyForServiceRequest) SetDeviceId(v string) *ReadyForServiceRequest {
	s.DeviceId = &v
	return s
}

func (s *ReadyForServiceRequest) SetInstanceId(v string) *ReadyForServiceRequest {
	s.InstanceId = &v
	return s
}

func (s *ReadyForServiceRequest) SetOutboundScenario(v bool) *ReadyForServiceRequest {
	s.OutboundScenario = &v
	return s
}

func (s *ReadyForServiceRequest) SetUserId(v string) *ReadyForServiceRequest {
	s.UserId = &v
	return s
}

type ReadyForServiceResponseBody struct {
	// example:
	//
	// OK
	Code *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ReadyForServiceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// CC49060B-87ED-489A-AD3D-00E57775DBFF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReadyForServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReadyForServiceResponseBody) GoString() string {
	return s.String()
}

func (s *ReadyForServiceResponseBody) SetCode(v string) *ReadyForServiceResponseBody {
	s.Code = &v
	return s
}

func (s *ReadyForServiceResponseBody) SetData(v *ReadyForServiceResponseBodyData) *ReadyForServiceResponseBody {
	s.Data = v
	return s
}

func (s *ReadyForServiceResponseBody) SetHttpStatusCode(v int32) *ReadyForServiceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ReadyForServiceResponseBody) SetMessage(v string) *ReadyForServiceResponseBody {
	s.Message = &v
	return s
}

func (s *ReadyForServiceResponseBody) SetParams(v []*string) *ReadyForServiceResponseBody {
	s.Params = v
	return s
}

func (s *ReadyForServiceResponseBody) SetRequestId(v string) *ReadyForServiceResponseBody {
	s.RequestId = &v
	return s
}

type ReadyForServiceResponseBodyData struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8001****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// false
	OutboundScenario       *bool     `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// READY
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s ReadyForServiceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ReadyForServiceResponseBodyData) GoString() string {
	return s.String()
}

func (s *ReadyForServiceResponseBodyData) SetBreakCode(v string) *ReadyForServiceResponseBodyData {
	s.BreakCode = &v
	return s
}

func (s *ReadyForServiceResponseBodyData) SetDeviceId(v string) *ReadyForServiceResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *ReadyForServiceResponseBodyData) SetExtension(v string) *ReadyForServiceResponseBodyData {
	s.Extension = &v
	return s
}

func (s *ReadyForServiceResponseBodyData) SetInstanceId(v string) *ReadyForServiceResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *ReadyForServiceResponseBodyData) SetJobId(v string) *ReadyForServiceResponseBodyData {
	s.JobId = &v
	return s
}

func (s *ReadyForServiceResponseBodyData) SetOutboundScenario(v bool) *ReadyForServiceResponseBodyData {
	s.OutboundScenario = &v
	return s
}

func (s *ReadyForServiceResponseBodyData) SetSignedSkillGroupIdList(v []*string) *ReadyForServiceResponseBodyData {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *ReadyForServiceResponseBodyData) SetUserId(v string) *ReadyForServiceResponseBodyData {
	s.UserId = &v
	return s
}

func (s *ReadyForServiceResponseBodyData) SetUserState(v string) *ReadyForServiceResponseBodyData {
	s.UserState = &v
	return s
}

func (s *ReadyForServiceResponseBodyData) SetWorkMode(v string) *ReadyForServiceResponseBodyData {
	s.WorkMode = &v
	return s
}

type ReadyForServiceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReadyForServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReadyForServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReadyForServiceResponse) GoString() string {
	return s.String()
}

func (s *ReadyForServiceResponse) SetHeaders(v map[string]*string) *ReadyForServiceResponse {
	s.Headers = v
	return s
}

func (s *ReadyForServiceResponse) SetStatusCode(v int32) *ReadyForServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *ReadyForServiceResponse) SetBody(v *ReadyForServiceResponseBody) *ReadyForServiceResponse {
	s.Body = v
	return s
}

type RedialCallRequest struct {
	// example:
	//
	// 1318888****
	Callee *string `json:"Callee,omitempty" xml:"Callee,omitempty"`
	// example:
	//
	// 0109810****
	Caller   *string `json:"Caller,omitempty" xml:"Caller,omitempty"`
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// abc
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6581536084722****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// a=b
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// example:
	//
	// 30
	TimeoutSeconds *int32 `json:"TimeoutSeconds,omitempty" xml:"TimeoutSeconds,omitempty"`
	// example:
	//
	// samzhang@abc
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s RedialCallRequest) String() string {
	return tea.Prettify(s)
}

func (s RedialCallRequest) GoString() string {
	return s.String()
}

func (s *RedialCallRequest) SetCallee(v string) *RedialCallRequest {
	s.Callee = &v
	return s
}

func (s *RedialCallRequest) SetCaller(v string) *RedialCallRequest {
	s.Caller = &v
	return s
}

func (s *RedialCallRequest) SetDeviceId(v string) *RedialCallRequest {
	s.DeviceId = &v
	return s
}

func (s *RedialCallRequest) SetInstanceId(v string) *RedialCallRequest {
	s.InstanceId = &v
	return s
}

func (s *RedialCallRequest) SetJobId(v string) *RedialCallRequest {
	s.JobId = &v
	return s
}

func (s *RedialCallRequest) SetTags(v string) *RedialCallRequest {
	s.Tags = &v
	return s
}

func (s *RedialCallRequest) SetTimeoutSeconds(v int32) *RedialCallRequest {
	s.TimeoutSeconds = &v
	return s
}

func (s *RedialCallRequest) SetUserId(v string) *RedialCallRequest {
	s.UserId = &v
	return s
}

type RedialCallResponseBody struct {
	// example:
	//
	// OK
	Code *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *RedialCallResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// BF268B34-09C2-43FD-BAC4-5D31EA63****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RedialCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RedialCallResponseBody) GoString() string {
	return s.String()
}

func (s *RedialCallResponseBody) SetCode(v string) *RedialCallResponseBody {
	s.Code = &v
	return s
}

func (s *RedialCallResponseBody) SetData(v *RedialCallResponseBodyData) *RedialCallResponseBody {
	s.Data = v
	return s
}

func (s *RedialCallResponseBody) SetHttpStatusCode(v int32) *RedialCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RedialCallResponseBody) SetMessage(v string) *RedialCallResponseBody {
	s.Message = &v
	return s
}

func (s *RedialCallResponseBody) SetParams(v []*string) *RedialCallResponseBody {
	s.Params = v
	return s
}

func (s *RedialCallResponseBody) SetRequestId(v string) *RedialCallResponseBody {
	s.RequestId = &v
	return s
}

type RedialCallResponseBodyData struct {
	CallContext *RedialCallResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	// example:
	//
	// 123456789
	ContextId   *int64                                 `json:"ContextId,omitempty" xml:"ContextId,omitempty"`
	UserContext *RedialCallResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s RedialCallResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RedialCallResponseBodyData) GoString() string {
	return s.String()
}

func (s *RedialCallResponseBodyData) SetCallContext(v *RedialCallResponseBodyDataCallContext) *RedialCallResponseBodyData {
	s.CallContext = v
	return s
}

func (s *RedialCallResponseBodyData) SetContextId(v int64) *RedialCallResponseBodyData {
	s.ContextId = &v
	return s
}

func (s *RedialCallResponseBodyData) SetUserContext(v *RedialCallResponseBodyDataUserContext) *RedialCallResponseBodyData {
	s.UserContext = v
	return s
}

type RedialCallResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                                 `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*RedialCallResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// abc
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s RedialCallResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s RedialCallResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *RedialCallResponseBodyDataCallContext) SetCallType(v string) *RedialCallResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *RedialCallResponseBodyDataCallContext) SetChannelContexts(v []*RedialCallResponseBodyDataCallContextChannelContexts) *RedialCallResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *RedialCallResponseBodyDataCallContext) SetInstanceId(v string) *RedialCallResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *RedialCallResponseBodyDataCallContext) SetJobId(v string) *RedialCallResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type RedialCallResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// COACHING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// CREATED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 8001****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// job-6573574060089****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1318888****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 139xxxx0501
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 486:USER_BUSY
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8000****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// samzhang@abc
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s RedialCallResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s RedialCallResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *RedialCallResponseBodyDataCallContextChannelContexts) SetCallType(v string) *RedialCallResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *RedialCallResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *RedialCallResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *RedialCallResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *RedialCallResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *RedialCallResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *RedialCallResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *RedialCallResponseBodyDataCallContextChannelContexts) SetDestination(v string) *RedialCallResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *RedialCallResponseBodyDataCallContextChannelContexts) SetJobId(v string) *RedialCallResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *RedialCallResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *RedialCallResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *RedialCallResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *RedialCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *RedialCallResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *RedialCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *RedialCallResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *RedialCallResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *RedialCallResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *RedialCallResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *RedialCallResponseBodyDataCallContextChannelContexts) SetUserId(v string) *RedialCallResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type RedialCallResponseBodyDataUserContext struct {
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	DeviceId  *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8000****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// abc
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6573574060089****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// False
	OutboundScenario       *bool     `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// samzhang@abc
	UserId    *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	WorkMode  *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s RedialCallResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s RedialCallResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *RedialCallResponseBodyDataUserContext) SetBreakCode(v string) *RedialCallResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *RedialCallResponseBodyDataUserContext) SetDeviceId(v string) *RedialCallResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *RedialCallResponseBodyDataUserContext) SetExtension(v string) *RedialCallResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *RedialCallResponseBodyDataUserContext) SetInstanceId(v string) *RedialCallResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *RedialCallResponseBodyDataUserContext) SetJobId(v string) *RedialCallResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *RedialCallResponseBodyDataUserContext) SetOutboundScenario(v bool) *RedialCallResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *RedialCallResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *RedialCallResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *RedialCallResponseBodyDataUserContext) SetUserId(v string) *RedialCallResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *RedialCallResponseBodyDataUserContext) SetUserState(v string) *RedialCallResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *RedialCallResponseBodyDataUserContext) SetWorkMode(v string) *RedialCallResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type RedialCallResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RedialCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RedialCallResponse) String() string {
	return tea.Prettify(s)
}

func (s RedialCallResponse) GoString() string {
	return s.String()
}

func (s *RedialCallResponse) SetHeaders(v map[string]*string) *RedialCallResponse {
	s.Headers = v
	return s
}

func (s *RedialCallResponse) SetStatusCode(v int32) *RedialCallResponse {
	s.StatusCode = &v
	return s
}

func (s *RedialCallResponse) SetBody(v *RedialCallResponseBody) *RedialCallResponse {
	s.Body = v
	return s
}

type RegisterDeviceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// test-device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// password
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s RegisterDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s RegisterDeviceRequest) GoString() string {
	return s.String()
}

func (s *RegisterDeviceRequest) SetDeviceId(v string) *RegisterDeviceRequest {
	s.DeviceId = &v
	return s
}

func (s *RegisterDeviceRequest) SetInstanceId(v string) *RegisterDeviceRequest {
	s.InstanceId = &v
	return s
}

func (s *RegisterDeviceRequest) SetPassword(v string) *RegisterDeviceRequest {
	s.Password = &v
	return s
}

func (s *RegisterDeviceRequest) SetUserId(v string) *RegisterDeviceRequest {
	s.UserId = &v
	return s
}

type RegisterDeviceResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RegisterDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RegisterDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *RegisterDeviceResponseBody) SetCode(v string) *RegisterDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *RegisterDeviceResponseBody) SetHttpStatusCode(v int32) *RegisterDeviceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RegisterDeviceResponseBody) SetMessage(v string) *RegisterDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *RegisterDeviceResponseBody) SetParams(v []*string) *RegisterDeviceResponseBody {
	s.Params = v
	return s
}

func (s *RegisterDeviceResponseBody) SetRequestId(v string) *RegisterDeviceResponseBody {
	s.RequestId = &v
	return s
}

type RegisterDeviceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RegisterDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RegisterDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s RegisterDeviceResponse) GoString() string {
	return s.String()
}

func (s *RegisterDeviceResponse) SetHeaders(v map[string]*string) *RegisterDeviceResponse {
	s.Headers = v
	return s
}

func (s *RegisterDeviceResponse) SetStatusCode(v int32) *RegisterDeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *RegisterDeviceResponse) SetBody(v *RegisterDeviceResponseBody) *RegisterDeviceResponse {
	s.Body = v
	return s
}

type RegisterDevicesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// test-device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// password
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// example:
	//
	// ["user-test@ccc-test"]
	UserIdListJson *string `json:"UserIdListJson,omitempty" xml:"UserIdListJson,omitempty"`
}

func (s RegisterDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s RegisterDevicesRequest) GoString() string {
	return s.String()
}

func (s *RegisterDevicesRequest) SetDeviceId(v string) *RegisterDevicesRequest {
	s.DeviceId = &v
	return s
}

func (s *RegisterDevicesRequest) SetInstanceId(v string) *RegisterDevicesRequest {
	s.InstanceId = &v
	return s
}

func (s *RegisterDevicesRequest) SetPassword(v string) *RegisterDevicesRequest {
	s.Password = &v
	return s
}

func (s *RegisterDevicesRequest) SetUserIdListJson(v string) *RegisterDevicesRequest {
	s.UserIdListJson = &v
	return s
}

type RegisterDevicesResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RegisterDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RegisterDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *RegisterDevicesResponseBody) SetCode(v string) *RegisterDevicesResponseBody {
	s.Code = &v
	return s
}

func (s *RegisterDevicesResponseBody) SetHttpStatusCode(v int32) *RegisterDevicesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RegisterDevicesResponseBody) SetMessage(v string) *RegisterDevicesResponseBody {
	s.Message = &v
	return s
}

func (s *RegisterDevicesResponseBody) SetParams(v []*string) *RegisterDevicesResponseBody {
	s.Params = v
	return s
}

func (s *RegisterDevicesResponseBody) SetRequestId(v string) *RegisterDevicesResponseBody {
	s.RequestId = &v
	return s
}

type RegisterDevicesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RegisterDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RegisterDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s RegisterDevicesResponse) GoString() string {
	return s.String()
}

func (s *RegisterDevicesResponse) SetHeaders(v map[string]*string) *RegisterDevicesResponse {
	s.Headers = v
	return s
}

func (s *RegisterDevicesResponse) SetStatusCode(v int32) *RegisterDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *RegisterDevicesResponse) SetBody(v *RegisterDevicesResponseBody) *RegisterDevicesResponse {
	s.Body = v
	return s
}

type RejectChatRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// chat-65382141036853491
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s RejectChatRequest) String() string {
	return tea.Prettify(s)
}

func (s RejectChatRequest) GoString() string {
	return s.String()
}

func (s *RejectChatRequest) SetInstanceId(v string) *RejectChatRequest {
	s.InstanceId = &v
	return s
}

func (s *RejectChatRequest) SetJobId(v string) *RejectChatRequest {
	s.JobId = &v
	return s
}

type RejectChatResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// B59382D2-5755-4C6D-861F-FA2AAD8F89F7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RejectChatResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RejectChatResponseBody) GoString() string {
	return s.String()
}

func (s *RejectChatResponseBody) SetCode(v string) *RejectChatResponseBody {
	s.Code = &v
	return s
}

func (s *RejectChatResponseBody) SetHttpStatusCode(v int32) *RejectChatResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RejectChatResponseBody) SetMessage(v string) *RejectChatResponseBody {
	s.Message = &v
	return s
}

func (s *RejectChatResponseBody) SetRequestId(v string) *RejectChatResponseBody {
	s.RequestId = &v
	return s
}

type RejectChatResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RejectChatResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RejectChatResponse) String() string {
	return tea.Prettify(s)
}

func (s RejectChatResponse) GoString() string {
	return s.String()
}

func (s *RejectChatResponse) SetHeaders(v map[string]*string) *RejectChatResponse {
	s.Headers = v
	return s
}

func (s *RejectChatResponse) SetStatusCode(v int32) *RejectChatResponse {
	s.StatusCode = &v
	return s
}

func (s *RejectChatResponse) SetBody(v *RejectChatResponseBody) *RejectChatResponse {
	s.Body = v
	return s
}

type RejectTicketRequest struct {
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// f2c6722b-cd13-442d-bf10-22a07c70d6d5
	TicketId *string `json:"TicketId,omitempty" xml:"TicketId,omitempty"`
}

func (s RejectTicketRequest) String() string {
	return tea.Prettify(s)
}

func (s RejectTicketRequest) GoString() string {
	return s.String()
}

func (s *RejectTicketRequest) SetComment(v string) *RejectTicketRequest {
	s.Comment = &v
	return s
}

func (s *RejectTicketRequest) SetInstanceId(v string) *RejectTicketRequest {
	s.InstanceId = &v
	return s
}

func (s *RejectTicketRequest) SetTicketId(v string) *RejectTicketRequest {
	s.TicketId = &v
	return s
}

type RejectTicketResponseBody struct {
	// example:
	//
	// OK
	Code *string     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 678F7002-CA01-4ABF-A112-585AFBDF3A3B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RejectTicketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RejectTicketResponseBody) GoString() string {
	return s.String()
}

func (s *RejectTicketResponseBody) SetCode(v string) *RejectTicketResponseBody {
	s.Code = &v
	return s
}

func (s *RejectTicketResponseBody) SetData(v interface{}) *RejectTicketResponseBody {
	s.Data = v
	return s
}

func (s *RejectTicketResponseBody) SetHttpStatusCode(v int32) *RejectTicketResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RejectTicketResponseBody) SetMessage(v string) *RejectTicketResponseBody {
	s.Message = &v
	return s
}

func (s *RejectTicketResponseBody) SetParams(v []*string) *RejectTicketResponseBody {
	s.Params = v
	return s
}

func (s *RejectTicketResponseBody) SetRequestId(v string) *RejectTicketResponseBody {
	s.RequestId = &v
	return s
}

type RejectTicketResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RejectTicketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RejectTicketResponse) String() string {
	return tea.Prettify(s)
}

func (s RejectTicketResponse) GoString() string {
	return s.String()
}

func (s *RejectTicketResponse) SetHeaders(v map[string]*string) *RejectTicketResponse {
	s.Headers = v
	return s
}

func (s *RejectTicketResponse) SetStatusCode(v int32) *RejectTicketResponse {
	s.StatusCode = &v
	return s
}

func (s *RejectTicketResponse) SetBody(v *RejectTicketResponseBody) *RejectTicketResponse {
	s.Body = v
	return s
}

type ReleaseCallRequest struct {
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-6538214103685****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ReleaseCallRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseCallRequest) GoString() string {
	return s.String()
}

func (s *ReleaseCallRequest) SetChannelId(v string) *ReleaseCallRequest {
	s.ChannelId = &v
	return s
}

func (s *ReleaseCallRequest) SetDeviceId(v string) *ReleaseCallRequest {
	s.DeviceId = &v
	return s
}

func (s *ReleaseCallRequest) SetInstanceId(v string) *ReleaseCallRequest {
	s.InstanceId = &v
	return s
}

func (s *ReleaseCallRequest) SetJobId(v string) *ReleaseCallRequest {
	s.JobId = &v
	return s
}

func (s *ReleaseCallRequest) SetUserId(v string) *ReleaseCallRequest {
	s.UserId = &v
	return s
}

type ReleaseCallResponseBody struct {
	// example:
	//
	// OK
	Code *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ReleaseCallResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseCallResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseCallResponseBody) SetCode(v string) *ReleaseCallResponseBody {
	s.Code = &v
	return s
}

func (s *ReleaseCallResponseBody) SetData(v *ReleaseCallResponseBodyData) *ReleaseCallResponseBody {
	s.Data = v
	return s
}

func (s *ReleaseCallResponseBody) SetHttpStatusCode(v int32) *ReleaseCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ReleaseCallResponseBody) SetMessage(v string) *ReleaseCallResponseBody {
	s.Message = &v
	return s
}

func (s *ReleaseCallResponseBody) SetParams(v []*string) *ReleaseCallResponseBody {
	s.Params = v
	return s
}

func (s *ReleaseCallResponseBody) SetRequestId(v string) *ReleaseCallResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseCallResponseBodyData struct {
	CallContext *ReleaseCallResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	// example:
	//
	// 123456
	ContextId   *int64                                  `json:"ContextId,omitempty" xml:"ContextId,omitempty"`
	UserContext *ReleaseCallResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s ReleaseCallResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ReleaseCallResponseBodyData) GoString() string {
	return s.String()
}

func (s *ReleaseCallResponseBodyData) SetCallContext(v *ReleaseCallResponseBodyDataCallContext) *ReleaseCallResponseBodyData {
	s.CallContext = v
	return s
}

func (s *ReleaseCallResponseBodyData) SetContextId(v int64) *ReleaseCallResponseBodyData {
	s.ContextId = &v
	return s
}

func (s *ReleaseCallResponseBodyData) SetUserContext(v *ReleaseCallResponseBodyDataUserContext) *ReleaseCallResponseBodyData {
	s.UserContext = v
	return s
}

type ReleaseCallResponseBodyDataCallContext struct {
	ChannelContexts []*ReleaseCallResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s ReleaseCallResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s ReleaseCallResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *ReleaseCallResponseBodyDataCallContext) SetChannelContexts(v []*ReleaseCallResponseBodyDataCallContextChannelContexts) *ReleaseCallResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *ReleaseCallResponseBodyDataCallContext) SetInstanceId(v string) *ReleaseCallResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *ReleaseCallResponseBodyDataCallContext) SetJobId(v string) *ReleaseCallResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type ReleaseCallResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// CREATED
	ChannelState     *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	ChannelVariables *string `json:"ChannelVariables,omitempty" xml:"ChannelVariables,omitempty"`
	// example:
	//
	// 1390501****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0830019****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ReleaseCallResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s ReleaseCallResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *ReleaseCallResponseBodyDataCallContextChannelContexts) SetCallType(v string) *ReleaseCallResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *ReleaseCallResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *ReleaseCallResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *ReleaseCallResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *ReleaseCallResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *ReleaseCallResponseBodyDataCallContextChannelContexts) SetChannelVariables(v string) *ReleaseCallResponseBodyDataCallContextChannelContexts {
	s.ChannelVariables = &v
	return s
}

func (s *ReleaseCallResponseBodyDataCallContextChannelContexts) SetDestination(v string) *ReleaseCallResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *ReleaseCallResponseBodyDataCallContextChannelContexts) SetJobId(v string) *ReleaseCallResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *ReleaseCallResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *ReleaseCallResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *ReleaseCallResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *ReleaseCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *ReleaseCallResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *ReleaseCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *ReleaseCallResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *ReleaseCallResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *ReleaseCallResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *ReleaseCallResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *ReleaseCallResponseBodyDataCallContextChannelContexts) SetUserId(v string) *ReleaseCallResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type ReleaseCallResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// false
	OutboundScenario       *bool     `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// BREAK
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s ReleaseCallResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s ReleaseCallResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *ReleaseCallResponseBodyDataUserContext) SetBreakCode(v string) *ReleaseCallResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *ReleaseCallResponseBodyDataUserContext) SetDeviceId(v string) *ReleaseCallResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *ReleaseCallResponseBodyDataUserContext) SetExtension(v string) *ReleaseCallResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *ReleaseCallResponseBodyDataUserContext) SetInstanceId(v string) *ReleaseCallResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *ReleaseCallResponseBodyDataUserContext) SetJobId(v string) *ReleaseCallResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *ReleaseCallResponseBodyDataUserContext) SetOutboundScenario(v bool) *ReleaseCallResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *ReleaseCallResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *ReleaseCallResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *ReleaseCallResponseBodyDataUserContext) SetUserId(v string) *ReleaseCallResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *ReleaseCallResponseBodyDataUserContext) SetUserState(v string) *ReleaseCallResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *ReleaseCallResponseBodyDataUserContext) SetWorkMode(v string) *ReleaseCallResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type ReleaseCallResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleaseCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleaseCallResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseCallResponse) GoString() string {
	return s.String()
}

func (s *ReleaseCallResponse) SetHeaders(v map[string]*string) *ReleaseCallResponse {
	s.Headers = v
	return s
}

func (s *ReleaseCallResponse) SetStatusCode(v int32) *ReleaseCallResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseCallResponse) SetBody(v *ReleaseCallResponseBody) *ReleaseCallResponse {
	s.Body = v
	return s
}

type ReleaseChatRequest struct {
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// chat-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 9XYGTGWtq2wFi_Bpg7aUnIoYi_vG_rO3bjEn0YtsxbHRHrYHlz1LDBLJAyZcLxieRQR4h_6AnWvTjJeNU5jg************Hwej7WgWrmA=
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
	// example:
	//
	// edbcf95a-ef9f-4296-a0a6-985ac9e36db3
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// CUSTOMER
	UserType *string `json:"UserType,omitempty" xml:"UserType,omitempty"`
}

func (s ReleaseChatRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseChatRequest) GoString() string {
	return s.String()
}

func (s *ReleaseChatRequest) SetInstanceId(v string) *ReleaseChatRequest {
	s.InstanceId = &v
	return s
}

func (s *ReleaseChatRequest) SetJobId(v string) *ReleaseChatRequest {
	s.JobId = &v
	return s
}

func (s *ReleaseChatRequest) SetToken(v string) *ReleaseChatRequest {
	s.Token = &v
	return s
}

func (s *ReleaseChatRequest) SetUserId(v string) *ReleaseChatRequest {
	s.UserId = &v
	return s
}

func (s *ReleaseChatRequest) SetUserType(v string) *ReleaseChatRequest {
	s.UserType = &v
	return s
}

type ReleaseChatResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// B06B3244-1B44-481B-90C4-F2F92E59D6B5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseChatResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseChatResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseChatResponseBody) SetCode(v string) *ReleaseChatResponseBody {
	s.Code = &v
	return s
}

func (s *ReleaseChatResponseBody) SetHttpStatusCode(v int32) *ReleaseChatResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ReleaseChatResponseBody) SetMessage(v string) *ReleaseChatResponseBody {
	s.Message = &v
	return s
}

func (s *ReleaseChatResponseBody) SetRequestId(v string) *ReleaseChatResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseChatResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleaseChatResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleaseChatResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseChatResponse) GoString() string {
	return s.String()
}

func (s *ReleaseChatResponse) SetHeaders(v map[string]*string) *ReleaseChatResponse {
	s.Headers = v
	return s
}

func (s *ReleaseChatResponse) SetStatusCode(v int32) *ReleaseChatResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseChatResponse) SetBody(v *ReleaseChatResponseBody) *ReleaseChatResponse {
	s.Body = v
	return s
}

type RemoveBlacklistCallTaggingRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1312121****
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
}

func (s RemoveBlacklistCallTaggingRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveBlacklistCallTaggingRequest) GoString() string {
	return s.String()
}

func (s *RemoveBlacklistCallTaggingRequest) SetInstanceId(v string) *RemoveBlacklistCallTaggingRequest {
	s.InstanceId = &v
	return s
}

func (s *RemoveBlacklistCallTaggingRequest) SetJobId(v string) *RemoveBlacklistCallTaggingRequest {
	s.JobId = &v
	return s
}

func (s *RemoveBlacklistCallTaggingRequest) SetNumber(v string) *RemoveBlacklistCallTaggingRequest {
	s.Number = &v
	return s
}

type RemoveBlacklistCallTaggingResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 03C67DAD-EB26-41D8-949D-9B0C470FB716
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveBlacklistCallTaggingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveBlacklistCallTaggingResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveBlacklistCallTaggingResponseBody) SetCode(v string) *RemoveBlacklistCallTaggingResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveBlacklistCallTaggingResponseBody) SetHttpStatusCode(v int32) *RemoveBlacklistCallTaggingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RemoveBlacklistCallTaggingResponseBody) SetMessage(v string) *RemoveBlacklistCallTaggingResponseBody {
	s.Message = &v
	return s
}

func (s *RemoveBlacklistCallTaggingResponseBody) SetRequestId(v string) *RemoveBlacklistCallTaggingResponseBody {
	s.RequestId = &v
	return s
}

type RemoveBlacklistCallTaggingResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveBlacklistCallTaggingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveBlacklistCallTaggingResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveBlacklistCallTaggingResponse) GoString() string {
	return s.String()
}

func (s *RemoveBlacklistCallTaggingResponse) SetHeaders(v map[string]*string) *RemoveBlacklistCallTaggingResponse {
	s.Headers = v
	return s
}

func (s *RemoveBlacklistCallTaggingResponse) SetStatusCode(v int32) *RemoveBlacklistCallTaggingResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveBlacklistCallTaggingResponse) SetBody(v *RemoveBlacklistCallTaggingResponseBody) *RemoveBlacklistCallTaggingResponse {
	s.Body = v
	return s
}

type RemoveDoNotCallNumbersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// ["1900000****","1312211****"]
	NumberList *string `json:"NumberList,omitempty" xml:"NumberList,omitempty"`
}

func (s RemoveDoNotCallNumbersRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveDoNotCallNumbersRequest) GoString() string {
	return s.String()
}

func (s *RemoveDoNotCallNumbersRequest) SetInstanceId(v string) *RemoveDoNotCallNumbersRequest {
	s.InstanceId = &v
	return s
}

func (s *RemoveDoNotCallNumbersRequest) SetNumberList(v string) *RemoveDoNotCallNumbersRequest {
	s.NumberList = &v
	return s
}

type RemoveDoNotCallNumbersResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveDoNotCallNumbersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveDoNotCallNumbersResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveDoNotCallNumbersResponseBody) SetCode(v string) *RemoveDoNotCallNumbersResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveDoNotCallNumbersResponseBody) SetData(v string) *RemoveDoNotCallNumbersResponseBody {
	s.Data = &v
	return s
}

func (s *RemoveDoNotCallNumbersResponseBody) SetHttpStatusCode(v int32) *RemoveDoNotCallNumbersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RemoveDoNotCallNumbersResponseBody) SetMessage(v string) *RemoveDoNotCallNumbersResponseBody {
	s.Message = &v
	return s
}

func (s *RemoveDoNotCallNumbersResponseBody) SetParams(v []*string) *RemoveDoNotCallNumbersResponseBody {
	s.Params = v
	return s
}

func (s *RemoveDoNotCallNumbersResponseBody) SetRequestId(v string) *RemoveDoNotCallNumbersResponseBody {
	s.RequestId = &v
	return s
}

type RemoveDoNotCallNumbersResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveDoNotCallNumbersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveDoNotCallNumbersResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveDoNotCallNumbersResponse) GoString() string {
	return s.String()
}

func (s *RemoveDoNotCallNumbersResponse) SetHeaders(v map[string]*string) *RemoveDoNotCallNumbersResponse {
	s.Headers = v
	return s
}

func (s *RemoveDoNotCallNumbersResponse) SetStatusCode(v int32) *RemoveDoNotCallNumbersResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveDoNotCallNumbersResponse) SetBody(v *RemoveDoNotCallNumbersResponseBody) *RemoveDoNotCallNumbersResponse {
	s.Body = v
	return s
}

type RemovePersonalNumbersFromUserRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["0101234****", "0105678****"]
	NumberList *string `json:"NumberList,omitempty" xml:"NumberList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s RemovePersonalNumbersFromUserRequest) String() string {
	return tea.Prettify(s)
}

func (s RemovePersonalNumbersFromUserRequest) GoString() string {
	return s.String()
}

func (s *RemovePersonalNumbersFromUserRequest) SetInstanceId(v string) *RemovePersonalNumbersFromUserRequest {
	s.InstanceId = &v
	return s
}

func (s *RemovePersonalNumbersFromUserRequest) SetNumberList(v string) *RemovePersonalNumbersFromUserRequest {
	s.NumberList = &v
	return s
}

func (s *RemovePersonalNumbersFromUserRequest) SetUserId(v string) *RemovePersonalNumbersFromUserRequest {
	s.UserId = &v
	return s
}

type RemovePersonalNumbersFromUserResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemovePersonalNumbersFromUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemovePersonalNumbersFromUserResponseBody) GoString() string {
	return s.String()
}

func (s *RemovePersonalNumbersFromUserResponseBody) SetCode(v string) *RemovePersonalNumbersFromUserResponseBody {
	s.Code = &v
	return s
}

func (s *RemovePersonalNumbersFromUserResponseBody) SetHttpStatusCode(v int32) *RemovePersonalNumbersFromUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RemovePersonalNumbersFromUserResponseBody) SetMessage(v string) *RemovePersonalNumbersFromUserResponseBody {
	s.Message = &v
	return s
}

func (s *RemovePersonalNumbersFromUserResponseBody) SetRequestId(v string) *RemovePersonalNumbersFromUserResponseBody {
	s.RequestId = &v
	return s
}

type RemovePersonalNumbersFromUserResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemovePersonalNumbersFromUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemovePersonalNumbersFromUserResponse) String() string {
	return tea.Prettify(s)
}

func (s RemovePersonalNumbersFromUserResponse) GoString() string {
	return s.String()
}

func (s *RemovePersonalNumbersFromUserResponse) SetHeaders(v map[string]*string) *RemovePersonalNumbersFromUserResponse {
	s.Headers = v
	return s
}

func (s *RemovePersonalNumbersFromUserResponse) SetStatusCode(v int32) *RemovePersonalNumbersFromUserResponse {
	s.StatusCode = &v
	return s
}

func (s *RemovePersonalNumbersFromUserResponse) SetBody(v *RemovePersonalNumbersFromUserResponseBody) *RemovePersonalNumbersFromUserResponse {
	s.Body = v
	return s
}

type RemovePhoneNumberFromSkillGroupsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0101234****
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["skillgroup1@ccc-test","skillgroup2@ccc-test"]
	SkillGroupIdList *string `json:"SkillGroupIdList,omitempty" xml:"SkillGroupIdList,omitempty"`
}

func (s RemovePhoneNumberFromSkillGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s RemovePhoneNumberFromSkillGroupsRequest) GoString() string {
	return s.String()
}

func (s *RemovePhoneNumberFromSkillGroupsRequest) SetInstanceId(v string) *RemovePhoneNumberFromSkillGroupsRequest {
	s.InstanceId = &v
	return s
}

func (s *RemovePhoneNumberFromSkillGroupsRequest) SetNumber(v string) *RemovePhoneNumberFromSkillGroupsRequest {
	s.Number = &v
	return s
}

func (s *RemovePhoneNumberFromSkillGroupsRequest) SetSkillGroupIdList(v string) *RemovePhoneNumberFromSkillGroupsRequest {
	s.SkillGroupIdList = &v
	return s
}

type RemovePhoneNumberFromSkillGroupsResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemovePhoneNumberFromSkillGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemovePhoneNumberFromSkillGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *RemovePhoneNumberFromSkillGroupsResponseBody) SetCode(v string) *RemovePhoneNumberFromSkillGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *RemovePhoneNumberFromSkillGroupsResponseBody) SetHttpStatusCode(v int32) *RemovePhoneNumberFromSkillGroupsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RemovePhoneNumberFromSkillGroupsResponseBody) SetMessage(v string) *RemovePhoneNumberFromSkillGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *RemovePhoneNumberFromSkillGroupsResponseBody) SetRequestId(v string) *RemovePhoneNumberFromSkillGroupsResponseBody {
	s.RequestId = &v
	return s
}

type RemovePhoneNumberFromSkillGroupsResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemovePhoneNumberFromSkillGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemovePhoneNumberFromSkillGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s RemovePhoneNumberFromSkillGroupsResponse) GoString() string {
	return s.String()
}

func (s *RemovePhoneNumberFromSkillGroupsResponse) SetHeaders(v map[string]*string) *RemovePhoneNumberFromSkillGroupsResponse {
	s.Headers = v
	return s
}

func (s *RemovePhoneNumberFromSkillGroupsResponse) SetStatusCode(v int32) *RemovePhoneNumberFromSkillGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *RemovePhoneNumberFromSkillGroupsResponse) SetBody(v *RemovePhoneNumberFromSkillGroupsResponseBody) *RemovePhoneNumberFromSkillGroupsResponse {
	s.Body = v
	return s
}

type RemovePhoneNumbersRequest struct {
	// example:
	//
	// true
	Force *bool `json:"Force,omitempty" xml:"Force,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["0101234****","0105678****"]
	NumberList *string `json:"NumberList,omitempty" xml:"NumberList,omitempty"`
}

func (s RemovePhoneNumbersRequest) String() string {
	return tea.Prettify(s)
}

func (s RemovePhoneNumbersRequest) GoString() string {
	return s.String()
}

func (s *RemovePhoneNumbersRequest) SetForce(v bool) *RemovePhoneNumbersRequest {
	s.Force = &v
	return s
}

func (s *RemovePhoneNumbersRequest) SetInstanceId(v string) *RemovePhoneNumbersRequest {
	s.InstanceId = &v
	return s
}

func (s *RemovePhoneNumbersRequest) SetNumberList(v string) *RemovePhoneNumbersRequest {
	s.NumberList = &v
	return s
}

type RemovePhoneNumbersResponseBody struct {
	// example:
	//
	// OK
	Code *string   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*string `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemovePhoneNumbersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemovePhoneNumbersResponseBody) GoString() string {
	return s.String()
}

func (s *RemovePhoneNumbersResponseBody) SetCode(v string) *RemovePhoneNumbersResponseBody {
	s.Code = &v
	return s
}

func (s *RemovePhoneNumbersResponseBody) SetData(v []*string) *RemovePhoneNumbersResponseBody {
	s.Data = v
	return s
}

func (s *RemovePhoneNumbersResponseBody) SetHttpStatusCode(v int32) *RemovePhoneNumbersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RemovePhoneNumbersResponseBody) SetMessage(v string) *RemovePhoneNumbersResponseBody {
	s.Message = &v
	return s
}

func (s *RemovePhoneNumbersResponseBody) SetParams(v []*string) *RemovePhoneNumbersResponseBody {
	s.Params = v
	return s
}

func (s *RemovePhoneNumbersResponseBody) SetRequestId(v string) *RemovePhoneNumbersResponseBody {
	s.RequestId = &v
	return s
}

type RemovePhoneNumbersResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemovePhoneNumbersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemovePhoneNumbersResponse) String() string {
	return tea.Prettify(s)
}

func (s RemovePhoneNumbersResponse) GoString() string {
	return s.String()
}

func (s *RemovePhoneNumbersResponse) SetHeaders(v map[string]*string) *RemovePhoneNumbersResponse {
	s.Headers = v
	return s
}

func (s *RemovePhoneNumbersResponse) SetStatusCode(v int32) *RemovePhoneNumbersResponse {
	s.StatusCode = &v
	return s
}

func (s *RemovePhoneNumbersResponse) SetBody(v *RemovePhoneNumbersResponseBody) *RemovePhoneNumbersResponse {
	s.Body = v
	return s
}

type RemovePhoneNumbersFromSkillGroupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["0101234****","0105678****"]
	NumberList *string `json:"NumberList,omitempty" xml:"NumberList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s RemovePhoneNumbersFromSkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RemovePhoneNumbersFromSkillGroupRequest) GoString() string {
	return s.String()
}

func (s *RemovePhoneNumbersFromSkillGroupRequest) SetInstanceId(v string) *RemovePhoneNumbersFromSkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *RemovePhoneNumbersFromSkillGroupRequest) SetNumberList(v string) *RemovePhoneNumbersFromSkillGroupRequest {
	s.NumberList = &v
	return s
}

func (s *RemovePhoneNumbersFromSkillGroupRequest) SetSkillGroupId(v string) *RemovePhoneNumbersFromSkillGroupRequest {
	s.SkillGroupId = &v
	return s
}

type RemovePhoneNumbersFromSkillGroupResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemovePhoneNumbersFromSkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemovePhoneNumbersFromSkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *RemovePhoneNumbersFromSkillGroupResponseBody) SetCode(v string) *RemovePhoneNumbersFromSkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *RemovePhoneNumbersFromSkillGroupResponseBody) SetHttpStatusCode(v int32) *RemovePhoneNumbersFromSkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RemovePhoneNumbersFromSkillGroupResponseBody) SetMessage(v string) *RemovePhoneNumbersFromSkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *RemovePhoneNumbersFromSkillGroupResponseBody) SetRequestId(v string) *RemovePhoneNumbersFromSkillGroupResponseBody {
	s.RequestId = &v
	return s
}

type RemovePhoneNumbersFromSkillGroupResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemovePhoneNumbersFromSkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemovePhoneNumbersFromSkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RemovePhoneNumbersFromSkillGroupResponse) GoString() string {
	return s.String()
}

func (s *RemovePhoneNumbersFromSkillGroupResponse) SetHeaders(v map[string]*string) *RemovePhoneNumbersFromSkillGroupResponse {
	s.Headers = v
	return s
}

func (s *RemovePhoneNumbersFromSkillGroupResponse) SetStatusCode(v int32) *RemovePhoneNumbersFromSkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *RemovePhoneNumbersFromSkillGroupResponse) SetBody(v *RemovePhoneNumbersFromSkillGroupResponseBody) *RemovePhoneNumbersFromSkillGroupResponse {
	s.Body = v
	return s
}

type RemoveSkillGroupsFromUserRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["skillgroup1@ccc-test","skillgroup2@ccc-test"]
	SkillGroupIdList *string `json:"SkillGroupIdList,omitempty" xml:"SkillGroupIdList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s RemoveSkillGroupsFromUserRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveSkillGroupsFromUserRequest) GoString() string {
	return s.String()
}

func (s *RemoveSkillGroupsFromUserRequest) SetInstanceId(v string) *RemoveSkillGroupsFromUserRequest {
	s.InstanceId = &v
	return s
}

func (s *RemoveSkillGroupsFromUserRequest) SetSkillGroupIdList(v string) *RemoveSkillGroupsFromUserRequest {
	s.SkillGroupIdList = &v
	return s
}

func (s *RemoveSkillGroupsFromUserRequest) SetUserId(v string) *RemoveSkillGroupsFromUserRequest {
	s.UserId = &v
	return s
}

type RemoveSkillGroupsFromUserResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveSkillGroupsFromUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveSkillGroupsFromUserResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveSkillGroupsFromUserResponseBody) SetCode(v string) *RemoveSkillGroupsFromUserResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveSkillGroupsFromUserResponseBody) SetData(v string) *RemoveSkillGroupsFromUserResponseBody {
	s.Data = &v
	return s
}

func (s *RemoveSkillGroupsFromUserResponseBody) SetHttpStatusCode(v int32) *RemoveSkillGroupsFromUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RemoveSkillGroupsFromUserResponseBody) SetMessage(v string) *RemoveSkillGroupsFromUserResponseBody {
	s.Message = &v
	return s
}

func (s *RemoveSkillGroupsFromUserResponseBody) SetRequestId(v string) *RemoveSkillGroupsFromUserResponseBody {
	s.RequestId = &v
	return s
}

type RemoveSkillGroupsFromUserResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveSkillGroupsFromUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveSkillGroupsFromUserResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveSkillGroupsFromUserResponse) GoString() string {
	return s.String()
}

func (s *RemoveSkillGroupsFromUserResponse) SetHeaders(v map[string]*string) *RemoveSkillGroupsFromUserResponse {
	s.Headers = v
	return s
}

func (s *RemoveSkillGroupsFromUserResponse) SetStatusCode(v int32) *RemoveSkillGroupsFromUserResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveSkillGroupsFromUserResponse) SetBody(v *RemoveSkillGroupsFromUserResponseBody) *RemoveSkillGroupsFromUserResponse {
	s.Body = v
	return s
}

type RemoveUsersRequest struct {
	FilePath *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	Force    *bool   `json:"Force,omitempty" xml:"Force,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NotificationEmail *string `json:"NotificationEmail,omitempty" xml:"NotificationEmail,omitempty"`
	// example:
	//
	// ["agent1@ccc-test","agent2@ccc-test"]
	UserIdList *string `json:"UserIdList,omitempty" xml:"UserIdList,omitempty"`
}

func (s RemoveUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveUsersRequest) GoString() string {
	return s.String()
}

func (s *RemoveUsersRequest) SetFilePath(v string) *RemoveUsersRequest {
	s.FilePath = &v
	return s
}

func (s *RemoveUsersRequest) SetForce(v bool) *RemoveUsersRequest {
	s.Force = &v
	return s
}

func (s *RemoveUsersRequest) SetInstanceId(v string) *RemoveUsersRequest {
	s.InstanceId = &v
	return s
}

func (s *RemoveUsersRequest) SetNotificationEmail(v string) *RemoveUsersRequest {
	s.NotificationEmail = &v
	return s
}

func (s *RemoveUsersRequest) SetUserIdList(v string) *RemoveUsersRequest {
	s.UserIdList = &v
	return s
}

type RemoveUsersResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveUsersResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveUsersResponseBody) SetCode(v string) *RemoveUsersResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveUsersResponseBody) SetHttpStatusCode(v int32) *RemoveUsersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RemoveUsersResponseBody) SetMessage(v string) *RemoveUsersResponseBody {
	s.Message = &v
	return s
}

func (s *RemoveUsersResponseBody) SetParams(v []*string) *RemoveUsersResponseBody {
	s.Params = v
	return s
}

func (s *RemoveUsersResponseBody) SetRequestId(v string) *RemoveUsersResponseBody {
	s.RequestId = &v
	return s
}

type RemoveUsersResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveUsersResponse) GoString() string {
	return s.String()
}

func (s *RemoveUsersResponse) SetHeaders(v map[string]*string) *RemoveUsersResponse {
	s.Headers = v
	return s
}

func (s *RemoveUsersResponse) SetStatusCode(v int32) *RemoveUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveUsersResponse) SetBody(v *RemoveUsersResponseBody) *RemoveUsersResponse {
	s.Body = v
	return s
}

type RemoveUsersFromSkillGroupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["agent1@ccc-test","agent2@ccc-test"]
	UserIdList *string `json:"UserIdList,omitempty" xml:"UserIdList,omitempty"`
}

func (s RemoveUsersFromSkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveUsersFromSkillGroupRequest) GoString() string {
	return s.String()
}

func (s *RemoveUsersFromSkillGroupRequest) SetInstanceId(v string) *RemoveUsersFromSkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *RemoveUsersFromSkillGroupRequest) SetSkillGroupId(v string) *RemoveUsersFromSkillGroupRequest {
	s.SkillGroupId = &v
	return s
}

func (s *RemoveUsersFromSkillGroupRequest) SetUserIdList(v string) *RemoveUsersFromSkillGroupRequest {
	s.UserIdList = &v
	return s
}

type RemoveUsersFromSkillGroupResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveUsersFromSkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveUsersFromSkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveUsersFromSkillGroupResponseBody) SetCode(v string) *RemoveUsersFromSkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveUsersFromSkillGroupResponseBody) SetHttpStatusCode(v int32) *RemoveUsersFromSkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RemoveUsersFromSkillGroupResponseBody) SetMessage(v string) *RemoveUsersFromSkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *RemoveUsersFromSkillGroupResponseBody) SetRequestId(v string) *RemoveUsersFromSkillGroupResponseBody {
	s.RequestId = &v
	return s
}

type RemoveUsersFromSkillGroupResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveUsersFromSkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveUsersFromSkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveUsersFromSkillGroupResponse) GoString() string {
	return s.String()
}

func (s *RemoveUsersFromSkillGroupResponse) SetHeaders(v map[string]*string) *RemoveUsersFromSkillGroupResponse {
	s.Headers = v
	return s
}

func (s *RemoveUsersFromSkillGroupResponse) SetStatusCode(v int32) *RemoveUsersFromSkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveUsersFromSkillGroupResponse) SetBody(v *RemoveUsersFromSkillGroupResponseBody) *RemoveUsersFromSkillGroupResponse {
	s.Body = v
	return s
}

type ResetAgentStateRequest struct {
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ResetAgentStateRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetAgentStateRequest) GoString() string {
	return s.String()
}

func (s *ResetAgentStateRequest) SetDeviceId(v string) *ResetAgentStateRequest {
	s.DeviceId = &v
	return s
}

func (s *ResetAgentStateRequest) SetInstanceId(v string) *ResetAgentStateRequest {
	s.InstanceId = &v
	return s
}

func (s *ResetAgentStateRequest) SetUserId(v string) *ResetAgentStateRequest {
	s.UserId = &v
	return s
}

type ResetAgentStateResponseBody struct {
	// example:
	//
	// OK
	Code *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *ResetAgentStateResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetAgentStateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetAgentStateResponseBody) GoString() string {
	return s.String()
}

func (s *ResetAgentStateResponseBody) SetCode(v string) *ResetAgentStateResponseBody {
	s.Code = &v
	return s
}

func (s *ResetAgentStateResponseBody) SetData(v *ResetAgentStateResponseBodyData) *ResetAgentStateResponseBody {
	s.Data = v
	return s
}

func (s *ResetAgentStateResponseBody) SetHttpStatusCode(v int32) *ResetAgentStateResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ResetAgentStateResponseBody) SetMessage(v string) *ResetAgentStateResponseBody {
	s.Message = &v
	return s
}

func (s *ResetAgentStateResponseBody) SetParams(v []*string) *ResetAgentStateResponseBody {
	s.Params = v
	return s
}

func (s *ResetAgentStateResponseBody) SetRequestId(v string) *ResetAgentStateResponseBody {
	s.RequestId = &v
	return s
}

type ResetAgentStateResponseBodyData struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8001****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobId      *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// false
	OutboundScenario       *bool     `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// OFFLINE
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s ResetAgentStateResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ResetAgentStateResponseBodyData) GoString() string {
	return s.String()
}

func (s *ResetAgentStateResponseBodyData) SetBreakCode(v string) *ResetAgentStateResponseBodyData {
	s.BreakCode = &v
	return s
}

func (s *ResetAgentStateResponseBodyData) SetDeviceId(v string) *ResetAgentStateResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *ResetAgentStateResponseBodyData) SetExtension(v string) *ResetAgentStateResponseBodyData {
	s.Extension = &v
	return s
}

func (s *ResetAgentStateResponseBodyData) SetInstanceId(v string) *ResetAgentStateResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *ResetAgentStateResponseBodyData) SetJobId(v string) *ResetAgentStateResponseBodyData {
	s.JobId = &v
	return s
}

func (s *ResetAgentStateResponseBodyData) SetOutboundScenario(v bool) *ResetAgentStateResponseBodyData {
	s.OutboundScenario = &v
	return s
}

func (s *ResetAgentStateResponseBodyData) SetSignedSkillGroupIdList(v []*string) *ResetAgentStateResponseBodyData {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *ResetAgentStateResponseBodyData) SetUserId(v string) *ResetAgentStateResponseBodyData {
	s.UserId = &v
	return s
}

func (s *ResetAgentStateResponseBodyData) SetUserState(v string) *ResetAgentStateResponseBodyData {
	s.UserState = &v
	return s
}

func (s *ResetAgentStateResponseBodyData) SetWorkMode(v string) *ResetAgentStateResponseBodyData {
	s.WorkMode = &v
	return s
}

type ResetAgentStateResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetAgentStateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetAgentStateResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetAgentStateResponse) GoString() string {
	return s.String()
}

func (s *ResetAgentStateResponse) SetHeaders(v map[string]*string) *ResetAgentStateResponse {
	s.Headers = v
	return s
}

func (s *ResetAgentStateResponse) SetStatusCode(v int32) *ResetAgentStateResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetAgentStateResponse) SetBody(v *ResetAgentStateResponseBody) *ResetAgentStateResponse {
	s.Body = v
	return s
}

type ResetUserPasswordRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// password
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ResetUserPasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetUserPasswordRequest) GoString() string {
	return s.String()
}

func (s *ResetUserPasswordRequest) SetInstanceId(v string) *ResetUserPasswordRequest {
	s.InstanceId = &v
	return s
}

func (s *ResetUserPasswordRequest) SetPassword(v string) *ResetUserPasswordRequest {
	s.Password = &v
	return s
}

func (s *ResetUserPasswordRequest) SetUserId(v string) *ResetUserPasswordRequest {
	s.UserId = &v
	return s
}

type ResetUserPasswordResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetUserPasswordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetUserPasswordResponseBody) GoString() string {
	return s.String()
}

func (s *ResetUserPasswordResponseBody) SetCode(v string) *ResetUserPasswordResponseBody {
	s.Code = &v
	return s
}

func (s *ResetUserPasswordResponseBody) SetHttpStatusCode(v int32) *ResetUserPasswordResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ResetUserPasswordResponseBody) SetMessage(v string) *ResetUserPasswordResponseBody {
	s.Message = &v
	return s
}

func (s *ResetUserPasswordResponseBody) SetRequestId(v string) *ResetUserPasswordResponseBody {
	s.RequestId = &v
	return s
}

type ResetUserPasswordResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetUserPasswordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetUserPasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetUserPasswordResponse) GoString() string {
	return s.String()
}

func (s *ResetUserPasswordResponse) SetHeaders(v map[string]*string) *ResetUserPasswordResponse {
	s.Headers = v
	return s
}

func (s *ResetUserPasswordResponse) SetStatusCode(v int32) *ResetUserPasswordResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetUserPasswordResponse) SetBody(v *ResetUserPasswordResponseBody) *ResetUserPasswordResponse {
	s.Body = v
	return s
}

type RestoreArchivedRecordingsRequest struct {
	// example:
	//
	// [\\"job-216750038017142784\\"]
	ContactIds *string `json:"ContactIds,omitempty" xml:"ContactIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s RestoreArchivedRecordingsRequest) String() string {
	return tea.Prettify(s)
}

func (s RestoreArchivedRecordingsRequest) GoString() string {
	return s.String()
}

func (s *RestoreArchivedRecordingsRequest) SetContactIds(v string) *RestoreArchivedRecordingsRequest {
	s.ContactIds = &v
	return s
}

func (s *RestoreArchivedRecordingsRequest) SetInstanceId(v string) *RestoreArchivedRecordingsRequest {
	s.InstanceId = &v
	return s
}

type RestoreArchivedRecordingsResponseBody struct {
	// example:
	//
	// OK
	Code *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data []*RestoreArchivedRecordingsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// example:
	//
	// Instance 0 does not exist.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// F8066648-5D95-55AB-ACD3-2F4AD3BEA715
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RestoreArchivedRecordingsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestoreArchivedRecordingsResponseBody) GoString() string {
	return s.String()
}

func (s *RestoreArchivedRecordingsResponseBody) SetCode(v string) *RestoreArchivedRecordingsResponseBody {
	s.Code = &v
	return s
}

func (s *RestoreArchivedRecordingsResponseBody) SetData(v []*RestoreArchivedRecordingsResponseBodyData) *RestoreArchivedRecordingsResponseBody {
	s.Data = v
	return s
}

func (s *RestoreArchivedRecordingsResponseBody) SetHttpStatusCode(v int32) *RestoreArchivedRecordingsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RestoreArchivedRecordingsResponseBody) SetMessage(v string) *RestoreArchivedRecordingsResponseBody {
	s.Message = &v
	return s
}

func (s *RestoreArchivedRecordingsResponseBody) SetRequestId(v string) *RestoreArchivedRecordingsResponseBody {
	s.RequestId = &v
	return s
}

type RestoreArchivedRecordingsResponseBodyData struct {
	// example:
	//
	// job-25920271311543****
	ContactId *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	// example:
	//
	// False
	Exists *string `json:"Exists,omitempty" xml:"Exists,omitempty"`
	// example:
	//
	// Progressing
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// Standard
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s RestoreArchivedRecordingsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RestoreArchivedRecordingsResponseBodyData) GoString() string {
	return s.String()
}

func (s *RestoreArchivedRecordingsResponseBodyData) SetContactId(v string) *RestoreArchivedRecordingsResponseBodyData {
	s.ContactId = &v
	return s
}

func (s *RestoreArchivedRecordingsResponseBodyData) SetExists(v string) *RestoreArchivedRecordingsResponseBodyData {
	s.Exists = &v
	return s
}

func (s *RestoreArchivedRecordingsResponseBodyData) SetStatus(v string) *RestoreArchivedRecordingsResponseBodyData {
	s.Status = &v
	return s
}

func (s *RestoreArchivedRecordingsResponseBodyData) SetStorageType(v string) *RestoreArchivedRecordingsResponseBodyData {
	s.StorageType = &v
	return s
}

type RestoreArchivedRecordingsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RestoreArchivedRecordingsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RestoreArchivedRecordingsResponse) String() string {
	return tea.Prettify(s)
}

func (s RestoreArchivedRecordingsResponse) GoString() string {
	return s.String()
}

func (s *RestoreArchivedRecordingsResponse) SetHeaders(v map[string]*string) *RestoreArchivedRecordingsResponse {
	s.Headers = v
	return s
}

func (s *RestoreArchivedRecordingsResponse) SetStatusCode(v int32) *RestoreArchivedRecordingsResponse {
	s.StatusCode = &v
	return s
}

func (s *RestoreArchivedRecordingsResponse) SetBody(v *RestoreArchivedRecordingsResponseBody) *RestoreArchivedRecordingsResponse {
	s.Body = v
	return s
}

type ResubmitTicketRequest struct {
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// f2c6722b-cd13-442d-bf10-22a07c70d6d5
	TicketId *string `json:"TicketId,omitempty" xml:"TicketId,omitempty"`
}

func (s ResubmitTicketRequest) String() string {
	return tea.Prettify(s)
}

func (s ResubmitTicketRequest) GoString() string {
	return s.String()
}

func (s *ResubmitTicketRequest) SetComment(v string) *ResubmitTicketRequest {
	s.Comment = &v
	return s
}

func (s *ResubmitTicketRequest) SetInstanceId(v string) *ResubmitTicketRequest {
	s.InstanceId = &v
	return s
}

func (s *ResubmitTicketRequest) SetTicketId(v string) *ResubmitTicketRequest {
	s.TicketId = &v
	return s
}

type ResubmitTicketResponseBody struct {
	// example:
	//
	// OK
	Code *string     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 03C67DAD-EB26-41D8-949D-9B0C470FB716
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResubmitTicketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResubmitTicketResponseBody) GoString() string {
	return s.String()
}

func (s *ResubmitTicketResponseBody) SetCode(v string) *ResubmitTicketResponseBody {
	s.Code = &v
	return s
}

func (s *ResubmitTicketResponseBody) SetData(v interface{}) *ResubmitTicketResponseBody {
	s.Data = v
	return s
}

func (s *ResubmitTicketResponseBody) SetHttpStatusCode(v int32) *ResubmitTicketResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ResubmitTicketResponseBody) SetMessage(v string) *ResubmitTicketResponseBody {
	s.Message = &v
	return s
}

func (s *ResubmitTicketResponseBody) SetParams(v []*string) *ResubmitTicketResponseBody {
	s.Params = v
	return s
}

func (s *ResubmitTicketResponseBody) SetRequestId(v string) *ResubmitTicketResponseBody {
	s.RequestId = &v
	return s
}

type ResubmitTicketResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResubmitTicketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResubmitTicketResponse) String() string {
	return tea.Prettify(s)
}

func (s ResubmitTicketResponse) GoString() string {
	return s.String()
}

func (s *ResubmitTicketResponse) SetHeaders(v map[string]*string) *ResubmitTicketResponse {
	s.Headers = v
	return s
}

func (s *ResubmitTicketResponse) SetStatusCode(v int32) *ResubmitTicketResponse {
	s.StatusCode = &v
	return s
}

func (s *ResubmitTicketResponse) SetBody(v *ResubmitTicketResponseBody) *ResubmitTicketResponse {
	s.Body = v
	return s
}

type ResumeCampaignRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 6badb397-a8b5-40b6-21019d382a09
	CampaignId *string `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ResumeCampaignRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeCampaignRequest) GoString() string {
	return s.String()
}

func (s *ResumeCampaignRequest) SetCampaignId(v string) *ResumeCampaignRequest {
	s.CampaignId = &v
	return s
}

func (s *ResumeCampaignRequest) SetInstanceId(v string) *ResumeCampaignRequest {
	s.InstanceId = &v
	return s
}

type ResumeCampaignResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// F505C4C8-1E12-573A-9BA7-4BEAAD129553
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResumeCampaignResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResumeCampaignResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeCampaignResponseBody) SetCode(v string) *ResumeCampaignResponseBody {
	s.Code = &v
	return s
}

func (s *ResumeCampaignResponseBody) SetHttpStatusCode(v string) *ResumeCampaignResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ResumeCampaignResponseBody) SetMessage(v string) *ResumeCampaignResponseBody {
	s.Message = &v
	return s
}

func (s *ResumeCampaignResponseBody) SetRequestId(v string) *ResumeCampaignResponseBody {
	s.RequestId = &v
	return s
}

type ResumeCampaignResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResumeCampaignResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResumeCampaignResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeCampaignResponse) GoString() string {
	return s.String()
}

func (s *ResumeCampaignResponse) SetHeaders(v map[string]*string) *ResumeCampaignResponse {
	s.Headers = v
	return s
}

func (s *ResumeCampaignResponse) SetStatusCode(v int32) *ResumeCampaignResponse {
	s.StatusCode = &v
	return s
}

func (s *ResumeCampaignResponse) SetBody(v *ResumeCampaignResponseBody) *ResumeCampaignResponse {
	s.Body = v
	return s
}

type RetrieveCallRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-6538214103685****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s RetrieveCallRequest) String() string {
	return tea.Prettify(s)
}

func (s RetrieveCallRequest) GoString() string {
	return s.String()
}

func (s *RetrieveCallRequest) SetChannelId(v string) *RetrieveCallRequest {
	s.ChannelId = &v
	return s
}

func (s *RetrieveCallRequest) SetDeviceId(v string) *RetrieveCallRequest {
	s.DeviceId = &v
	return s
}

func (s *RetrieveCallRequest) SetInstanceId(v string) *RetrieveCallRequest {
	s.InstanceId = &v
	return s
}

func (s *RetrieveCallRequest) SetJobId(v string) *RetrieveCallRequest {
	s.JobId = &v
	return s
}

func (s *RetrieveCallRequest) SetUserId(v string) *RetrieveCallRequest {
	s.UserId = &v
	return s
}

type RetrieveCallResponseBody struct {
	// example:
	//
	// OK
	Code *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *RetrieveCallResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RetrieveCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RetrieveCallResponseBody) GoString() string {
	return s.String()
}

func (s *RetrieveCallResponseBody) SetCode(v string) *RetrieveCallResponseBody {
	s.Code = &v
	return s
}

func (s *RetrieveCallResponseBody) SetData(v *RetrieveCallResponseBodyData) *RetrieveCallResponseBody {
	s.Data = v
	return s
}

func (s *RetrieveCallResponseBody) SetHttpStatusCode(v int32) *RetrieveCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RetrieveCallResponseBody) SetMessage(v string) *RetrieveCallResponseBody {
	s.Message = &v
	return s
}

func (s *RetrieveCallResponseBody) SetParams(v []*string) *RetrieveCallResponseBody {
	s.Params = v
	return s
}

func (s *RetrieveCallResponseBody) SetRequestId(v string) *RetrieveCallResponseBody {
	s.RequestId = &v
	return s
}

type RetrieveCallResponseBodyData struct {
	CallContext *RetrieveCallResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	UserContext *RetrieveCallResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s RetrieveCallResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RetrieveCallResponseBodyData) GoString() string {
	return s.String()
}

func (s *RetrieveCallResponseBodyData) SetCallContext(v *RetrieveCallResponseBodyDataCallContext) *RetrieveCallResponseBodyData {
	s.CallContext = v
	return s
}

func (s *RetrieveCallResponseBodyData) SetUserContext(v *RetrieveCallResponseBodyDataUserContext) *RetrieveCallResponseBodyData {
	s.UserContext = v
	return s
}

type RetrieveCallResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                                   `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*RetrieveCallResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s RetrieveCallResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s RetrieveCallResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *RetrieveCallResponseBodyDataCallContext) SetCallType(v string) *RetrieveCallResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *RetrieveCallResponseBodyDataCallContext) SetChannelContexts(v []*RetrieveCallResponseBodyDataCallContextChannelContexts) *RetrieveCallResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *RetrieveCallResponseBodyDataCallContext) SetInstanceId(v string) *RetrieveCallResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *RetrieveCallResponseBodyDataCallContext) SetJobId(v string) *RetrieveCallResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type RetrieveCallResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// CREATED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 1390501****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0830019****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s RetrieveCallResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s RetrieveCallResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *RetrieveCallResponseBodyDataCallContextChannelContexts) SetCallType(v string) *RetrieveCallResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *RetrieveCallResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *RetrieveCallResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *RetrieveCallResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *RetrieveCallResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *RetrieveCallResponseBodyDataCallContextChannelContexts) SetDestination(v string) *RetrieveCallResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *RetrieveCallResponseBodyDataCallContextChannelContexts) SetJobId(v string) *RetrieveCallResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *RetrieveCallResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *RetrieveCallResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *RetrieveCallResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *RetrieveCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *RetrieveCallResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *RetrieveCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *RetrieveCallResponseBodyDataCallContextChannelContexts) SetSkillGroupId(v string) *RetrieveCallResponseBodyDataCallContextChannelContexts {
	s.SkillGroupId = &v
	return s
}

func (s *RetrieveCallResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *RetrieveCallResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *RetrieveCallResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *RetrieveCallResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *RetrieveCallResponseBodyDataCallContextChannelContexts) SetUserId(v string) *RetrieveCallResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type RetrieveCallResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609136956378
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// BREAK
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s RetrieveCallResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s RetrieveCallResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *RetrieveCallResponseBodyDataUserContext) SetBreakCode(v string) *RetrieveCallResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *RetrieveCallResponseBodyDataUserContext) SetDeviceId(v string) *RetrieveCallResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *RetrieveCallResponseBodyDataUserContext) SetExtension(v string) *RetrieveCallResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *RetrieveCallResponseBodyDataUserContext) SetHeartbeat(v int64) *RetrieveCallResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *RetrieveCallResponseBodyDataUserContext) SetInstanceId(v string) *RetrieveCallResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *RetrieveCallResponseBodyDataUserContext) SetJobId(v string) *RetrieveCallResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *RetrieveCallResponseBodyDataUserContext) SetMobile(v string) *RetrieveCallResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *RetrieveCallResponseBodyDataUserContext) SetOutboundScenario(v bool) *RetrieveCallResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *RetrieveCallResponseBodyDataUserContext) SetReserved(v int64) *RetrieveCallResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *RetrieveCallResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *RetrieveCallResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *RetrieveCallResponseBodyDataUserContext) SetUserId(v string) *RetrieveCallResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *RetrieveCallResponseBodyDataUserContext) SetUserState(v string) *RetrieveCallResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *RetrieveCallResponseBodyDataUserContext) SetWorkMode(v string) *RetrieveCallResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type RetrieveCallResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RetrieveCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RetrieveCallResponse) String() string {
	return tea.Prettify(s)
}

func (s RetrieveCallResponse) GoString() string {
	return s.String()
}

func (s *RetrieveCallResponse) SetHeaders(v map[string]*string) *RetrieveCallResponse {
	s.Headers = v
	return s
}

func (s *RetrieveCallResponse) SetStatusCode(v int32) *RetrieveCallResponse {
	s.StatusCode = &v
	return s
}

func (s *RetrieveCallResponse) SetBody(v *RetrieveCallResponseBody) *RetrieveCallResponse {
	s.Body = v
	return s
}

type SaveDocumentRequest struct {
	// example:
	//
	// xxx
	DocumentId *string `json:"DocumentId,omitempty" xml:"DocumentId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"name":"tom"}
	DocumentJson *string `json:"DocumentJson,omitempty" xml:"DocumentJson,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 9cfad875-6260-4a53-ab6e-b13e3fb31f7d
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// EAF3C248-E123-441B-A545-B6CD02E98EED
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// schema id
	//
	// This parameter is required.
	//
	// example:
	//
	// profile
	SchemaId *string `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s SaveDocumentRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveDocumentRequest) GoString() string {
	return s.String()
}

func (s *SaveDocumentRequest) SetDocumentId(v string) *SaveDocumentRequest {
	s.DocumentId = &v
	return s
}

func (s *SaveDocumentRequest) SetDocumentJson(v string) *SaveDocumentRequest {
	s.DocumentJson = &v
	return s
}

func (s *SaveDocumentRequest) SetInstanceId(v string) *SaveDocumentRequest {
	s.InstanceId = &v
	return s
}

func (s *SaveDocumentRequest) SetRequestId(v string) *SaveDocumentRequest {
	s.RequestId = &v
	return s
}

func (s *SaveDocumentRequest) SetSchemaId(v string) *SaveDocumentRequest {
	s.SchemaId = &v
	return s
}

type SaveDocumentResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 0101234****
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 01B12EE4-6AF2-4730-8B78-EC15F4E5C025
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SaveDocumentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveDocumentResponseBody) GoString() string {
	return s.String()
}

func (s *SaveDocumentResponseBody) SetCode(v string) *SaveDocumentResponseBody {
	s.Code = &v
	return s
}

func (s *SaveDocumentResponseBody) SetData(v string) *SaveDocumentResponseBody {
	s.Data = &v
	return s
}

func (s *SaveDocumentResponseBody) SetHttpStatusCode(v int32) *SaveDocumentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveDocumentResponseBody) SetMessage(v string) *SaveDocumentResponseBody {
	s.Message = &v
	return s
}

func (s *SaveDocumentResponseBody) SetParams(v []*string) *SaveDocumentResponseBody {
	s.Params = v
	return s
}

func (s *SaveDocumentResponseBody) SetRequestId(v string) *SaveDocumentResponseBody {
	s.RequestId = &v
	return s
}

type SaveDocumentResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveDocumentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveDocumentResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveDocumentResponse) GoString() string {
	return s.String()
}

func (s *SaveDocumentResponse) SetHeaders(v map[string]*string) *SaveDocumentResponse {
	s.Headers = v
	return s
}

func (s *SaveDocumentResponse) SetStatusCode(v int32) *SaveDocumentResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveDocumentResponse) SetBody(v *SaveDocumentResponseBody) *SaveDocumentResponse {
	s.Body = v
	return s
}

type SaveRTCStatsV2Request struct {
	// This parameter is required.
	//
	// example:
	//
	// 257e73de-1ee8-123b-0b9a-00163e0a****
	CallId *string `json:"CallId,omitempty" xml:"CallId,omitempty"`
	// This parameter is required.
	GeneralInfo *string `json:"GeneralInfo,omitempty" xml:"GeneralInfo,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["47.101.XX.XX","44368","47.104.XX.XX","37947"]
	GoogAddress *string `json:"GoogAddress,omitempty" xml:"GoogAddress,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["1","1649328987","40","PCMU","383560","89","49","ssrc_1649328987_recv","2022-03-15T09:52:08.820Z","","0","20000"]
	ReceiverReport *string `json:"ReceiverReport,omitempty" xml:"ReceiverReport,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["11090","2055127460","0","2236","384592","ssrc_2055127460_send","2022-03-15T09:52:08.820Z","1"]
	SenderReport *string `json:"SenderReport,omitempty" xml:"SenderReport,omitempty"`
}

func (s SaveRTCStatsV2Request) String() string {
	return tea.Prettify(s)
}

func (s SaveRTCStatsV2Request) GoString() string {
	return s.String()
}

func (s *SaveRTCStatsV2Request) SetCallId(v string) *SaveRTCStatsV2Request {
	s.CallId = &v
	return s
}

func (s *SaveRTCStatsV2Request) SetGeneralInfo(v string) *SaveRTCStatsV2Request {
	s.GeneralInfo = &v
	return s
}

func (s *SaveRTCStatsV2Request) SetGoogAddress(v string) *SaveRTCStatsV2Request {
	s.GoogAddress = &v
	return s
}

func (s *SaveRTCStatsV2Request) SetInstanceId(v string) *SaveRTCStatsV2Request {
	s.InstanceId = &v
	return s
}

func (s *SaveRTCStatsV2Request) SetReceiverReport(v string) *SaveRTCStatsV2Request {
	s.ReceiverReport = &v
	return s
}

func (s *SaveRTCStatsV2Request) SetSenderReport(v string) *SaveRTCStatsV2Request {
	s.SenderReport = &v
	return s
}

type SaveRTCStatsV2ResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int64  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 1
	RowCount *int64 `json:"RowCount,omitempty" xml:"RowCount,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 1647309061000
	TimeStamp *int64 `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s SaveRTCStatsV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveRTCStatsV2ResponseBody) GoString() string {
	return s.String()
}

func (s *SaveRTCStatsV2ResponseBody) SetCode(v string) *SaveRTCStatsV2ResponseBody {
	s.Code = &v
	return s
}

func (s *SaveRTCStatsV2ResponseBody) SetHttpStatusCode(v int64) *SaveRTCStatsV2ResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveRTCStatsV2ResponseBody) SetMessage(v string) *SaveRTCStatsV2ResponseBody {
	s.Message = &v
	return s
}

func (s *SaveRTCStatsV2ResponseBody) SetRequestId(v string) *SaveRTCStatsV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveRTCStatsV2ResponseBody) SetRowCount(v int64) *SaveRTCStatsV2ResponseBody {
	s.RowCount = &v
	return s
}

func (s *SaveRTCStatsV2ResponseBody) SetSuccess(v bool) *SaveRTCStatsV2ResponseBody {
	s.Success = &v
	return s
}

func (s *SaveRTCStatsV2ResponseBody) SetTimeStamp(v int64) *SaveRTCStatsV2ResponseBody {
	s.TimeStamp = &v
	return s
}

type SaveRTCStatsV2Response struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveRTCStatsV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveRTCStatsV2Response) String() string {
	return tea.Prettify(s)
}

func (s SaveRTCStatsV2Response) GoString() string {
	return s.String()
}

func (s *SaveRTCStatsV2Response) SetHeaders(v map[string]*string) *SaveRTCStatsV2Response {
	s.Headers = v
	return s
}

func (s *SaveRTCStatsV2Response) SetStatusCode(v int32) *SaveRTCStatsV2Response {
	s.StatusCode = &v
	return s
}

func (s *SaveRTCStatsV2Response) SetBody(v *SaveRTCStatsV2ResponseBody) *SaveRTCStatsV2Response {
	s.Body = v
	return s
}

type SaveTerminalLogRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// CCCClient
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// e13c9740-1e37-123b-21b6-00163e352f9
	CallId *string `json:"CallId,omitempty" xml:"CallId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// none
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	DataType *int32 `json:"DataType,omitempty" xml:"DataType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-b8b0ca63-330c-4e65-8ae3-9de2c7ce7683
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// TurnServerTest
	MethodName *string `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// true
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// none
	UniqueRequestId *string `json:"UniqueRequestId,omitempty" xml:"UniqueRequestId,omitempty"`
}

func (s SaveTerminalLogRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveTerminalLogRequest) GoString() string {
	return s.String()
}

func (s *SaveTerminalLogRequest) SetAppName(v string) *SaveTerminalLogRequest {
	s.AppName = &v
	return s
}

func (s *SaveTerminalLogRequest) SetCallId(v string) *SaveTerminalLogRequest {
	s.CallId = &v
	return s
}

func (s *SaveTerminalLogRequest) SetContent(v string) *SaveTerminalLogRequest {
	s.Content = &v
	return s
}

func (s *SaveTerminalLogRequest) SetDataType(v int32) *SaveTerminalLogRequest {
	s.DataType = &v
	return s
}

func (s *SaveTerminalLogRequest) SetInstanceId(v string) *SaveTerminalLogRequest {
	s.InstanceId = &v
	return s
}

func (s *SaveTerminalLogRequest) SetJobId(v string) *SaveTerminalLogRequest {
	s.JobId = &v
	return s
}

func (s *SaveTerminalLogRequest) SetMethodName(v string) *SaveTerminalLogRequest {
	s.MethodName = &v
	return s
}

func (s *SaveTerminalLogRequest) SetStatus(v string) *SaveTerminalLogRequest {
	s.Status = &v
	return s
}

func (s *SaveTerminalLogRequest) SetUniqueRequestId(v string) *SaveTerminalLogRequest {
	s.UniqueRequestId = &v
	return s
}

type SaveTerminalLogResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int64  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 1647309061000
	TimeStamp *int64 `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s SaveTerminalLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveTerminalLogResponseBody) GoString() string {
	return s.String()
}

func (s *SaveTerminalLogResponseBody) SetCode(v string) *SaveTerminalLogResponseBody {
	s.Code = &v
	return s
}

func (s *SaveTerminalLogResponseBody) SetHttpStatusCode(v int64) *SaveTerminalLogResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveTerminalLogResponseBody) SetMessage(v string) *SaveTerminalLogResponseBody {
	s.Message = &v
	return s
}

func (s *SaveTerminalLogResponseBody) SetRequestId(v string) *SaveTerminalLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveTerminalLogResponseBody) SetSuccess(v bool) *SaveTerminalLogResponseBody {
	s.Success = &v
	return s
}

func (s *SaveTerminalLogResponseBody) SetTimeStamp(v int64) *SaveTerminalLogResponseBody {
	s.TimeStamp = &v
	return s
}

type SaveTerminalLogResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveTerminalLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveTerminalLogResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveTerminalLogResponse) GoString() string {
	return s.String()
}

func (s *SaveTerminalLogResponse) SetHeaders(v map[string]*string) *SaveTerminalLogResponse {
	s.Headers = v
	return s
}

func (s *SaveTerminalLogResponse) SetStatusCode(v int32) *SaveTerminalLogResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveTerminalLogResponse) SetBody(v *SaveTerminalLogResponseBody) *SaveTerminalLogResponse {
	s.Body = v
	return s
}

type SaveWebRTCStatsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 257e73de-1ee8-123b-0b9a-00163e0a****
	CallId *string `json:"CallId,omitempty" xml:"CallId,omitempty"`
	// This parameter is required.
	GeneralInfo *string `json:"GeneralInfo,omitempty" xml:"GeneralInfo,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["47.101.XX.XX","44368","47.104.XX.XX","37947"]
	GoogAddress *string `json:"GoogAddress,omitempty" xml:"GoogAddress,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["1","1649328987","40","PCMU","383560","89","49","ssrc_1649328987_recv","2022-03-15T09:52:08.820Z","","0","20000"]
	ReceiverReport *string `json:"ReceiverReport,omitempty" xml:"ReceiverReport,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["11090","2055127460","0","2236","384592","ssrc_2055127460_send","2022-03-15T09:52:08.820Z","1"]
	SenderReport *string `json:"SenderReport,omitempty" xml:"SenderReport,omitempty"`
}

func (s SaveWebRTCStatsRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveWebRTCStatsRequest) GoString() string {
	return s.String()
}

func (s *SaveWebRTCStatsRequest) SetCallId(v string) *SaveWebRTCStatsRequest {
	s.CallId = &v
	return s
}

func (s *SaveWebRTCStatsRequest) SetGeneralInfo(v string) *SaveWebRTCStatsRequest {
	s.GeneralInfo = &v
	return s
}

func (s *SaveWebRTCStatsRequest) SetGoogAddress(v string) *SaveWebRTCStatsRequest {
	s.GoogAddress = &v
	return s
}

func (s *SaveWebRTCStatsRequest) SetInstanceId(v string) *SaveWebRTCStatsRequest {
	s.InstanceId = &v
	return s
}

func (s *SaveWebRTCStatsRequest) SetReceiverReport(v string) *SaveWebRTCStatsRequest {
	s.ReceiverReport = &v
	return s
}

func (s *SaveWebRTCStatsRequest) SetSenderReport(v string) *SaveWebRTCStatsRequest {
	s.SenderReport = &v
	return s
}

type SaveWebRTCStatsResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int64  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// CF1C21B9-2D49-4B54-880F-FBE248C16903
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 1
	RowCount *int64 `json:"RowCount,omitempty" xml:"RowCount,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 1555492246000
	TimeStamp *int64 `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s SaveWebRTCStatsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveWebRTCStatsResponseBody) GoString() string {
	return s.String()
}

func (s *SaveWebRTCStatsResponseBody) SetCode(v string) *SaveWebRTCStatsResponseBody {
	s.Code = &v
	return s
}

func (s *SaveWebRTCStatsResponseBody) SetHttpStatusCode(v int64) *SaveWebRTCStatsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveWebRTCStatsResponseBody) SetMessage(v string) *SaveWebRTCStatsResponseBody {
	s.Message = &v
	return s
}

func (s *SaveWebRTCStatsResponseBody) SetRequestId(v string) *SaveWebRTCStatsResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveWebRTCStatsResponseBody) SetRowCount(v int64) *SaveWebRTCStatsResponseBody {
	s.RowCount = &v
	return s
}

func (s *SaveWebRTCStatsResponseBody) SetSuccess(v bool) *SaveWebRTCStatsResponseBody {
	s.Success = &v
	return s
}

func (s *SaveWebRTCStatsResponseBody) SetTimeStamp(v int64) *SaveWebRTCStatsResponseBody {
	s.TimeStamp = &v
	return s
}

type SaveWebRTCStatsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveWebRTCStatsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveWebRTCStatsResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveWebRTCStatsResponse) GoString() string {
	return s.String()
}

func (s *SaveWebRTCStatsResponse) SetHeaders(v map[string]*string) *SaveWebRTCStatsResponse {
	s.Headers = v
	return s
}

func (s *SaveWebRTCStatsResponse) SetStatusCode(v int32) *SaveWebRTCStatsResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveWebRTCStatsResponse) SetBody(v *SaveWebRTCStatsResponseBody) *SaveWebRTCStatsResponse {
	s.Body = v
	return s
}

type SaveWebRtcInfoRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// e13c9740-1e37-123b-21b6-00163e352f9
	CallId *string `json:"CallId,omitempty" xml:"CallId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"media_source":{},"remote_inbound_rtp":{},"outbound_rtp":{},"inbound_rtp":{},"remote_outbound_rtp":{},"candidate":{},"basic":{"callId":"e13c9740-1e37-123b-21b6-00163e352f9","timestamp":"1647262108395","callStartTime":"1647262108393","uid":"user-test","access_point":"shanghai","browser":"90","ip":"127.0.0.1"}}
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 4
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-b8b0ca63-330c-4e65-8ae3-9de2c7ce7683
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SaveWebRtcInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveWebRtcInfoRequest) GoString() string {
	return s.String()
}

func (s *SaveWebRtcInfoRequest) SetCallId(v string) *SaveWebRtcInfoRequest {
	s.CallId = &v
	return s
}

func (s *SaveWebRtcInfoRequest) SetContent(v string) *SaveWebRtcInfoRequest {
	s.Content = &v
	return s
}

func (s *SaveWebRtcInfoRequest) SetContentType(v string) *SaveWebRtcInfoRequest {
	s.ContentType = &v
	return s
}

func (s *SaveWebRtcInfoRequest) SetInstanceId(v string) *SaveWebRtcInfoRequest {
	s.InstanceId = &v
	return s
}

func (s *SaveWebRtcInfoRequest) SetJobId(v string) *SaveWebRtcInfoRequest {
	s.JobId = &v
	return s
}

type SaveWebRtcInfoResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int64  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// CF1C21B9-2D49-4B54-880F-FBE248C16903
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 1
	RowCount *int64 `json:"RowCount,omitempty" xml:"RowCount,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 1647262108395
	TimeStamp *int64 `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s SaveWebRtcInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveWebRtcInfoResponseBody) GoString() string {
	return s.String()
}

func (s *SaveWebRtcInfoResponseBody) SetCode(v string) *SaveWebRtcInfoResponseBody {
	s.Code = &v
	return s
}

func (s *SaveWebRtcInfoResponseBody) SetHttpStatusCode(v int64) *SaveWebRtcInfoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveWebRtcInfoResponseBody) SetMessage(v string) *SaveWebRtcInfoResponseBody {
	s.Message = &v
	return s
}

func (s *SaveWebRtcInfoResponseBody) SetRequestId(v string) *SaveWebRtcInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveWebRtcInfoResponseBody) SetRowCount(v int64) *SaveWebRtcInfoResponseBody {
	s.RowCount = &v
	return s
}

func (s *SaveWebRtcInfoResponseBody) SetSuccess(v bool) *SaveWebRtcInfoResponseBody {
	s.Success = &v
	return s
}

func (s *SaveWebRtcInfoResponseBody) SetTimeStamp(v int64) *SaveWebRtcInfoResponseBody {
	s.TimeStamp = &v
	return s
}

type SaveWebRtcInfoResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveWebRtcInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveWebRtcInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveWebRtcInfoResponse) GoString() string {
	return s.String()
}

func (s *SaveWebRtcInfoResponse) SetHeaders(v map[string]*string) *SaveWebRtcInfoResponse {
	s.Headers = v
	return s
}

func (s *SaveWebRtcInfoResponse) SetStatusCode(v int32) *SaveWebRtcInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveWebRtcInfoResponse) SetBody(v *SaveWebRtcInfoResponseBody) *SaveWebRtcInfoResponse {
	s.Body = v
	return s
}

type SendDtmfSignalingRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ch:customer:0108989****->1318888****:1609234221870:job-6573574060089****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5
	Dtmf *string `json:"Dtmf,omitempty" xml:"Dtmf,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-6573574060089****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SendDtmfSignalingRequest) String() string {
	return tea.Prettify(s)
}

func (s SendDtmfSignalingRequest) GoString() string {
	return s.String()
}

func (s *SendDtmfSignalingRequest) SetChannelId(v string) *SendDtmfSignalingRequest {
	s.ChannelId = &v
	return s
}

func (s *SendDtmfSignalingRequest) SetDeviceId(v string) *SendDtmfSignalingRequest {
	s.DeviceId = &v
	return s
}

func (s *SendDtmfSignalingRequest) SetDtmf(v string) *SendDtmfSignalingRequest {
	s.Dtmf = &v
	return s
}

func (s *SendDtmfSignalingRequest) SetInstanceId(v string) *SendDtmfSignalingRequest {
	s.InstanceId = &v
	return s
}

func (s *SendDtmfSignalingRequest) SetJobId(v string) *SendDtmfSignalingRequest {
	s.JobId = &v
	return s
}

func (s *SendDtmfSignalingRequest) SetUserId(v string) *SendDtmfSignalingRequest {
	s.UserId = &v
	return s
}

type SendDtmfSignalingResponseBody struct {
	// example:
	//
	// OK
	Code *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *SendDtmfSignalingResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 842399EC-7D32-4472-AD08-9504C3F141FF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SendDtmfSignalingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendDtmfSignalingResponseBody) GoString() string {
	return s.String()
}

func (s *SendDtmfSignalingResponseBody) SetCode(v string) *SendDtmfSignalingResponseBody {
	s.Code = &v
	return s
}

func (s *SendDtmfSignalingResponseBody) SetData(v *SendDtmfSignalingResponseBodyData) *SendDtmfSignalingResponseBody {
	s.Data = v
	return s
}

func (s *SendDtmfSignalingResponseBody) SetHttpStatusCode(v int32) *SendDtmfSignalingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SendDtmfSignalingResponseBody) SetMessage(v string) *SendDtmfSignalingResponseBody {
	s.Message = &v
	return s
}

func (s *SendDtmfSignalingResponseBody) SetParams(v []*string) *SendDtmfSignalingResponseBody {
	s.Params = v
	return s
}

func (s *SendDtmfSignalingResponseBody) SetRequestId(v string) *SendDtmfSignalingResponseBody {
	s.RequestId = &v
	return s
}

type SendDtmfSignalingResponseBodyData struct {
	CallContext *SendDtmfSignalingResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	UserContext *SendDtmfSignalingResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s SendDtmfSignalingResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SendDtmfSignalingResponseBodyData) GoString() string {
	return s.String()
}

func (s *SendDtmfSignalingResponseBodyData) SetCallContext(v *SendDtmfSignalingResponseBodyDataCallContext) *SendDtmfSignalingResponseBodyData {
	s.CallContext = v
	return s
}

func (s *SendDtmfSignalingResponseBodyData) SetUserContext(v *SendDtmfSignalingResponseBodyDataUserContext) *SendDtmfSignalingResponseBodyData {
	s.UserContext = v
	return s
}

type SendDtmfSignalingResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                                        `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*SendDtmfSignalingResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6573574060089****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SendDtmfSignalingResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s SendDtmfSignalingResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *SendDtmfSignalingResponseBodyDataCallContext) SetCallType(v string) *SendDtmfSignalingResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataCallContext) SetChannelContexts(v []*SendDtmfSignalingResponseBodyDataCallContextChannelContexts) *SendDtmfSignalingResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataCallContext) SetInstanceId(v string) *SendDtmfSignalingResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataCallContext) SetJobId(v string) *SendDtmfSignalingResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type SendDtmfSignalingResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// MONITORING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:131888****->8001****:1609234221870:job-6573574060089****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// ANSWERED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 8001****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// 1
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// job-6573574060089****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0101234****
	Originator       *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	ReleaseReason    *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1609234222367
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8001****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SendDtmfSignalingResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s SendDtmfSignalingResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *SendDtmfSignalingResponseBodyDataCallContextChannelContexts) SetCallType(v string) *SendDtmfSignalingResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *SendDtmfSignalingResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *SendDtmfSignalingResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *SendDtmfSignalingResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataCallContextChannelContexts) SetDestination(v string) *SendDtmfSignalingResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataCallContextChannelContexts) SetIndex(v int32) *SendDtmfSignalingResponseBodyDataCallContextChannelContexts {
	s.Index = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataCallContextChannelContexts) SetJobId(v string) *SendDtmfSignalingResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *SendDtmfSignalingResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *SendDtmfSignalingResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *SendDtmfSignalingResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataCallContextChannelContexts) SetSkillGroupId(v string) *SendDtmfSignalingResponseBodyDataCallContextChannelContexts {
	s.SkillGroupId = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *SendDtmfSignalingResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *SendDtmfSignalingResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataCallContextChannelContexts) SetUserId(v string) *SendDtmfSignalingResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type SendDtmfSignalingResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8001****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609234222375
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6573574060089****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1390000****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609234221864
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s SendDtmfSignalingResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s SendDtmfSignalingResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *SendDtmfSignalingResponseBodyDataUserContext) SetBreakCode(v string) *SendDtmfSignalingResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataUserContext) SetDeviceId(v string) *SendDtmfSignalingResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataUserContext) SetExtension(v string) *SendDtmfSignalingResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataUserContext) SetHeartbeat(v int64) *SendDtmfSignalingResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataUserContext) SetInstanceId(v string) *SendDtmfSignalingResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataUserContext) SetJobId(v string) *SendDtmfSignalingResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataUserContext) SetMobile(v string) *SendDtmfSignalingResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataUserContext) SetOutboundScenario(v bool) *SendDtmfSignalingResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataUserContext) SetReserved(v int64) *SendDtmfSignalingResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *SendDtmfSignalingResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataUserContext) SetUserId(v string) *SendDtmfSignalingResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataUserContext) SetUserState(v string) *SendDtmfSignalingResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *SendDtmfSignalingResponseBodyDataUserContext) SetWorkMode(v string) *SendDtmfSignalingResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type SendDtmfSignalingResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendDtmfSignalingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendDtmfSignalingResponse) String() string {
	return tea.Prettify(s)
}

func (s SendDtmfSignalingResponse) GoString() string {
	return s.String()
}

func (s *SendDtmfSignalingResponse) SetHeaders(v map[string]*string) *SendDtmfSignalingResponse {
	s.Headers = v
	return s
}

func (s *SendDtmfSignalingResponse) SetStatusCode(v int32) *SendDtmfSignalingResponse {
	s.StatusCode = &v
	return s
}

func (s *SendDtmfSignalingResponse) SetBody(v *SendDtmfSignalingResponseBody) *SendDtmfSignalingResponse {
	s.Body = v
	return s
}

type SignInGroupRequest struct {
	Additivity   *bool   `json:"Additivity,omitempty" xml:"Additivity,omitempty"`
	ChatDeviceId *string `json:"ChatDeviceId,omitempty" xml:"ChatDeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["skillgroup1@ccc-test","skillgroup2@ccc-test"]
	SignedSkillGroupIdList *string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SignInGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s SignInGroupRequest) GoString() string {
	return s.String()
}

func (s *SignInGroupRequest) SetAdditivity(v bool) *SignInGroupRequest {
	s.Additivity = &v
	return s
}

func (s *SignInGroupRequest) SetChatDeviceId(v string) *SignInGroupRequest {
	s.ChatDeviceId = &v
	return s
}

func (s *SignInGroupRequest) SetDeviceId(v string) *SignInGroupRequest {
	s.DeviceId = &v
	return s
}

func (s *SignInGroupRequest) SetInstanceId(v string) *SignInGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *SignInGroupRequest) SetSignedSkillGroupIdList(v string) *SignInGroupRequest {
	s.SignedSkillGroupIdList = &v
	return s
}

func (s *SignInGroupRequest) SetUserId(v string) *SignInGroupRequest {
	s.UserId = &v
	return s
}

type SignInGroupResponseBody struct {
	// example:
	//
	// OK
	Code *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *SignInGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SignInGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SignInGroupResponseBody) GoString() string {
	return s.String()
}

func (s *SignInGroupResponseBody) SetCode(v string) *SignInGroupResponseBody {
	s.Code = &v
	return s
}

func (s *SignInGroupResponseBody) SetData(v *SignInGroupResponseBodyData) *SignInGroupResponseBody {
	s.Data = v
	return s
}

func (s *SignInGroupResponseBody) SetHttpStatusCode(v int32) *SignInGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SignInGroupResponseBody) SetMessage(v string) *SignInGroupResponseBody {
	s.Message = &v
	return s
}

func (s *SignInGroupResponseBody) SetParams(v []*string) *SignInGroupResponseBody {
	s.Params = v
	return s
}

func (s *SignInGroupResponseBody) SetRequestId(v string) *SignInGroupResponseBody {
	s.RequestId = &v
	return s
}

type SignInGroupResponseBodyData struct {
	// example:
	//
	// Warm-up
	BreakCode    *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	ChatDeviceId *string `json:"ChatDeviceId,omitempty" xml:"ChatDeviceId,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobId      *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// false
	OutboundScenario       *bool     `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// READY
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s SignInGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SignInGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *SignInGroupResponseBodyData) SetBreakCode(v string) *SignInGroupResponseBodyData {
	s.BreakCode = &v
	return s
}

func (s *SignInGroupResponseBodyData) SetChatDeviceId(v string) *SignInGroupResponseBodyData {
	s.ChatDeviceId = &v
	return s
}

func (s *SignInGroupResponseBodyData) SetDeviceId(v string) *SignInGroupResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *SignInGroupResponseBodyData) SetExtension(v string) *SignInGroupResponseBodyData {
	s.Extension = &v
	return s
}

func (s *SignInGroupResponseBodyData) SetInstanceId(v string) *SignInGroupResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *SignInGroupResponseBodyData) SetJobId(v string) *SignInGroupResponseBodyData {
	s.JobId = &v
	return s
}

func (s *SignInGroupResponseBodyData) SetOutboundScenario(v bool) *SignInGroupResponseBodyData {
	s.OutboundScenario = &v
	return s
}

func (s *SignInGroupResponseBodyData) SetSignedSkillGroupIdList(v []*string) *SignInGroupResponseBodyData {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *SignInGroupResponseBodyData) SetUserId(v string) *SignInGroupResponseBodyData {
	s.UserId = &v
	return s
}

func (s *SignInGroupResponseBodyData) SetUserState(v string) *SignInGroupResponseBodyData {
	s.UserState = &v
	return s
}

func (s *SignInGroupResponseBodyData) SetWorkMode(v string) *SignInGroupResponseBodyData {
	s.WorkMode = &v
	return s
}

type SignInGroupResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SignInGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SignInGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s SignInGroupResponse) GoString() string {
	return s.String()
}

func (s *SignInGroupResponse) SetHeaders(v map[string]*string) *SignInGroupResponse {
	s.Headers = v
	return s
}

func (s *SignInGroupResponse) SetStatusCode(v int32) *SignInGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *SignInGroupResponse) SetBody(v *SignInGroupResponseBody) *SignInGroupResponse {
	s.Body = v
	return s
}

type SignOutGroupRequest struct {
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SignOutGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s SignOutGroupRequest) GoString() string {
	return s.String()
}

func (s *SignOutGroupRequest) SetDeviceId(v string) *SignOutGroupRequest {
	s.DeviceId = &v
	return s
}

func (s *SignOutGroupRequest) SetInstanceId(v string) *SignOutGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *SignOutGroupRequest) SetUserId(v string) *SignOutGroupRequest {
	s.UserId = &v
	return s
}

type SignOutGroupResponseBody struct {
	// example:
	//
	// 200
	Code *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *SignOutGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SignOutGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SignOutGroupResponseBody) GoString() string {
	return s.String()
}

func (s *SignOutGroupResponseBody) SetCode(v string) *SignOutGroupResponseBody {
	s.Code = &v
	return s
}

func (s *SignOutGroupResponseBody) SetData(v *SignOutGroupResponseBodyData) *SignOutGroupResponseBody {
	s.Data = v
	return s
}

func (s *SignOutGroupResponseBody) SetHttpStatusCode(v int32) *SignOutGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SignOutGroupResponseBody) SetMessage(v string) *SignOutGroupResponseBody {
	s.Message = &v
	return s
}

func (s *SignOutGroupResponseBody) SetParams(v []*string) *SignOutGroupResponseBody {
	s.Params = v
	return s
}

func (s *SignOutGroupResponseBody) SetRequestId(v string) *SignOutGroupResponseBody {
	s.RequestId = &v
	return s
}

type SignOutGroupResponseBodyData struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609136956378
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// BREAK
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s SignOutGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SignOutGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *SignOutGroupResponseBodyData) SetBreakCode(v string) *SignOutGroupResponseBodyData {
	s.BreakCode = &v
	return s
}

func (s *SignOutGroupResponseBodyData) SetDeviceId(v string) *SignOutGroupResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *SignOutGroupResponseBodyData) SetExtension(v string) *SignOutGroupResponseBodyData {
	s.Extension = &v
	return s
}

func (s *SignOutGroupResponseBodyData) SetHeartbeat(v int64) *SignOutGroupResponseBodyData {
	s.Heartbeat = &v
	return s
}

func (s *SignOutGroupResponseBodyData) SetInstanceId(v string) *SignOutGroupResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *SignOutGroupResponseBodyData) SetJobId(v string) *SignOutGroupResponseBodyData {
	s.JobId = &v
	return s
}

func (s *SignOutGroupResponseBodyData) SetMobile(v string) *SignOutGroupResponseBodyData {
	s.Mobile = &v
	return s
}

func (s *SignOutGroupResponseBodyData) SetOutboundScenario(v bool) *SignOutGroupResponseBodyData {
	s.OutboundScenario = &v
	return s
}

func (s *SignOutGroupResponseBodyData) SetReserved(v int64) *SignOutGroupResponseBodyData {
	s.Reserved = &v
	return s
}

func (s *SignOutGroupResponseBodyData) SetSignedSkillGroupIdList(v []*string) *SignOutGroupResponseBodyData {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *SignOutGroupResponseBodyData) SetUserId(v string) *SignOutGroupResponseBodyData {
	s.UserId = &v
	return s
}

func (s *SignOutGroupResponseBodyData) SetUserState(v string) *SignOutGroupResponseBodyData {
	s.UserState = &v
	return s
}

func (s *SignOutGroupResponseBodyData) SetWorkMode(v string) *SignOutGroupResponseBodyData {
	s.WorkMode = &v
	return s
}

type SignOutGroupResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SignOutGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SignOutGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s SignOutGroupResponse) GoString() string {
	return s.String()
}

func (s *SignOutGroupResponse) SetHeaders(v map[string]*string) *SignOutGroupResponse {
	s.Headers = v
	return s
}

func (s *SignOutGroupResponse) SetStatusCode(v int32) *SignOutGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *SignOutGroupResponse) SetBody(v *SignOutGroupResponseBody) *SignOutGroupResponse {
	s.Body = v
	return s
}

type StartBack2BackCallRequest struct {
	// example:
	//
	// 0102156****
	AdditionalBroker *string `json:"AdditionalBroker,omitempty" xml:"AdditionalBroker,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0102157****
	Broker *string `json:"Broker,omitempty" xml:"Broker,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1372168****
	Callee *string `json:"Callee,omitempty" xml:"Callee,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1391814****
	Caller *string `json:"Caller,omitempty" xml:"Caller,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Tags       *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// example:
	//
	// 30
	TimeoutSeconds *int32 `json:"TimeoutSeconds,omitempty" xml:"TimeoutSeconds,omitempty"`
}

func (s StartBack2BackCallRequest) String() string {
	return tea.Prettify(s)
}

func (s StartBack2BackCallRequest) GoString() string {
	return s.String()
}

func (s *StartBack2BackCallRequest) SetAdditionalBroker(v string) *StartBack2BackCallRequest {
	s.AdditionalBroker = &v
	return s
}

func (s *StartBack2BackCallRequest) SetBroker(v string) *StartBack2BackCallRequest {
	s.Broker = &v
	return s
}

func (s *StartBack2BackCallRequest) SetCallee(v string) *StartBack2BackCallRequest {
	s.Callee = &v
	return s
}

func (s *StartBack2BackCallRequest) SetCaller(v string) *StartBack2BackCallRequest {
	s.Caller = &v
	return s
}

func (s *StartBack2BackCallRequest) SetInstanceId(v string) *StartBack2BackCallRequest {
	s.InstanceId = &v
	return s
}

func (s *StartBack2BackCallRequest) SetTags(v string) *StartBack2BackCallRequest {
	s.Tags = &v
	return s
}

func (s *StartBack2BackCallRequest) SetTimeoutSeconds(v int32) *StartBack2BackCallRequest {
	s.TimeoutSeconds = &v
	return s
}

type StartBack2BackCallResponseBody struct {
	// example:
	//
	// OK
	Code *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *StartBack2BackCallResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 26A34338-5CD9-4C95-A7A6-5BDCE76C6B94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartBack2BackCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartBack2BackCallResponseBody) GoString() string {
	return s.String()
}

func (s *StartBack2BackCallResponseBody) SetCode(v string) *StartBack2BackCallResponseBody {
	s.Code = &v
	return s
}

func (s *StartBack2BackCallResponseBody) SetData(v *StartBack2BackCallResponseBodyData) *StartBack2BackCallResponseBody {
	s.Data = v
	return s
}

func (s *StartBack2BackCallResponseBody) SetHttpStatusCode(v int32) *StartBack2BackCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *StartBack2BackCallResponseBody) SetMessage(v string) *StartBack2BackCallResponseBody {
	s.Message = &v
	return s
}

func (s *StartBack2BackCallResponseBody) SetParams(v []*string) *StartBack2BackCallResponseBody {
	s.Params = v
	return s
}

func (s *StartBack2BackCallResponseBody) SetRequestId(v string) *StartBack2BackCallResponseBody {
	s.RequestId = &v
	return s
}

type StartBack2BackCallResponseBodyData struct {
	CallContext *StartBack2BackCallResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	UserContext *StartBack2BackCallResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s StartBack2BackCallResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s StartBack2BackCallResponseBodyData) GoString() string {
	return s.String()
}

func (s *StartBack2BackCallResponseBodyData) SetCallContext(v *StartBack2BackCallResponseBodyDataCallContext) *StartBack2BackCallResponseBodyData {
	s.CallContext = v
	return s
}

func (s *StartBack2BackCallResponseBodyData) SetUserContext(v *StartBack2BackCallResponseBodyDataUserContext) *StartBack2BackCallResponseBodyData {
	s.UserContext = v
	return s
}

type StartBack2BackCallResponseBodyDataCallContext struct {
	// example:
	//
	// BACK2BACK
	CallType        *string                                                         `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*StartBack2BackCallResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-1034159089076****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s StartBack2BackCallResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s StartBack2BackCallResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *StartBack2BackCallResponseBodyDataCallContext) SetCallType(v string) *StartBack2BackCallResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataCallContext) SetChannelContexts(v []*StartBack2BackCallResponseBodyDataCallContextChannelContexts) *StartBack2BackCallResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *StartBack2BackCallResponseBodyDataCallContext) SetInstanceId(v string) *StartBack2BackCallResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataCallContext) SetJobId(v string) *StartBack2BackCallResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type StartBack2BackCallResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// BACK2BACK
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// MONITORING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-653821410368****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// NONE
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 1372168****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// job-1034159089076****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0102157****
	Originator       *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	ReleaseReason    *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// 1618217874062
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8001****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s StartBack2BackCallResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s StartBack2BackCallResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *StartBack2BackCallResponseBodyDataCallContextChannelContexts) SetCallType(v string) *StartBack2BackCallResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *StartBack2BackCallResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *StartBack2BackCallResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *StartBack2BackCallResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataCallContextChannelContexts) SetDestination(v string) *StartBack2BackCallResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataCallContextChannelContexts) SetJobId(v string) *StartBack2BackCallResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *StartBack2BackCallResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *StartBack2BackCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *StartBack2BackCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *StartBack2BackCallResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *StartBack2BackCallResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataCallContextChannelContexts) SetUserId(v string) *StartBack2BackCallResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type StartBack2BackCallResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId    *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceState *string `json:"DeviceState,omitempty" xml:"DeviceState,omitempty"`
	// example:
	//
	// 8020****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1618217872911
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-1034159089076****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1618217794599
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// OFFLINE
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s StartBack2BackCallResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s StartBack2BackCallResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *StartBack2BackCallResponseBodyDataUserContext) SetBreakCode(v string) *StartBack2BackCallResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataUserContext) SetDeviceId(v string) *StartBack2BackCallResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataUserContext) SetDeviceState(v string) *StartBack2BackCallResponseBodyDataUserContext {
	s.DeviceState = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataUserContext) SetExtension(v string) *StartBack2BackCallResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataUserContext) SetHeartbeat(v int64) *StartBack2BackCallResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataUserContext) SetInstanceId(v string) *StartBack2BackCallResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataUserContext) SetJobId(v string) *StartBack2BackCallResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataUserContext) SetMobile(v string) *StartBack2BackCallResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataUserContext) SetOutboundScenario(v bool) *StartBack2BackCallResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataUserContext) SetReserved(v int64) *StartBack2BackCallResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *StartBack2BackCallResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *StartBack2BackCallResponseBodyDataUserContext) SetUserId(v string) *StartBack2BackCallResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataUserContext) SetUserState(v string) *StartBack2BackCallResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *StartBack2BackCallResponseBodyDataUserContext) SetWorkMode(v string) *StartBack2BackCallResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type StartBack2BackCallResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartBack2BackCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartBack2BackCallResponse) String() string {
	return tea.Prettify(s)
}

func (s StartBack2BackCallResponse) GoString() string {
	return s.String()
}

func (s *StartBack2BackCallResponse) SetHeaders(v map[string]*string) *StartBack2BackCallResponse {
	s.Headers = v
	return s
}

func (s *StartBack2BackCallResponse) SetStatusCode(v int32) *StartBack2BackCallResponse {
	s.StatusCode = &v
	return s
}

func (s *StartBack2BackCallResponse) SetBody(v *StartBack2BackCallResponseBody) *StartBack2BackCallResponse {
	s.Body = v
	return s
}

type StartChatRequest struct {
	// example:
	//
	// cf584733-***-***-9699-cb77aa3b7aa6
	AccessChannelId *string `json:"AccessChannelId,omitempty" xml:"AccessChannelId,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 9XYGTGWtq2wFi_Bpg7aUnIoYi_vG_rO3bjEn0YtsxbHRHrYHlz1LDBLJAyZcLxieRQR4h_6AnWvTjJeNU5jg************Hwej7WgWrmA=
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
	// This parameter is required.
	UserList []*StartChatRequestUserList `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Repeated"`
}

func (s StartChatRequest) String() string {
	return tea.Prettify(s)
}

func (s StartChatRequest) GoString() string {
	return s.String()
}

func (s *StartChatRequest) SetAccessChannelId(v string) *StartChatRequest {
	s.AccessChannelId = &v
	return s
}

func (s *StartChatRequest) SetInstanceId(v string) *StartChatRequest {
	s.InstanceId = &v
	return s
}

func (s *StartChatRequest) SetToken(v string) *StartChatRequest {
	s.Token = &v
	return s
}

func (s *StartChatRequest) SetUserList(v []*StartChatRequestUserList) *StartChatRequest {
	s.UserList = v
	return s
}

type StartChatRequestUserList struct {
	// example:
	//
	// http://xxx.com/image
	AvatarUrl *string `json:"AvatarUrl,omitempty" xml:"AvatarUrl,omitempty"`
	Nickname  *string `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
	// example:
	//
	// fcd020fe-d8e4-40e5-8c77-1a272a174a7d
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// CUSTOMER
	UserType *string `json:"UserType,omitempty" xml:"UserType,omitempty"`
}

func (s StartChatRequestUserList) String() string {
	return tea.Prettify(s)
}

func (s StartChatRequestUserList) GoString() string {
	return s.String()
}

func (s *StartChatRequestUserList) SetAvatarUrl(v string) *StartChatRequestUserList {
	s.AvatarUrl = &v
	return s
}

func (s *StartChatRequestUserList) SetNickname(v string) *StartChatRequestUserList {
	s.Nickname = &v
	return s
}

func (s *StartChatRequestUserList) SetUserId(v string) *StartChatRequestUserList {
	s.UserId = &v
	return s
}

func (s *StartChatRequestUserList) SetUserType(v string) *StartChatRequestUserList {
	s.UserType = &v
	return s
}

type StartChatShrinkRequest struct {
	// example:
	//
	// cf584733-***-***-9699-cb77aa3b7aa6
	AccessChannelId *string `json:"AccessChannelId,omitempty" xml:"AccessChannelId,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 9XYGTGWtq2wFi_Bpg7aUnIoYi_vG_rO3bjEn0YtsxbHRHrYHlz1LDBLJAyZcLxieRQR4h_6AnWvTjJeNU5jg************Hwej7WgWrmA=
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
	// This parameter is required.
	UserListShrink *string `json:"UserList,omitempty" xml:"UserList,omitempty"`
}

func (s StartChatShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StartChatShrinkRequest) GoString() string {
	return s.String()
}

func (s *StartChatShrinkRequest) SetAccessChannelId(v string) *StartChatShrinkRequest {
	s.AccessChannelId = &v
	return s
}

func (s *StartChatShrinkRequest) SetInstanceId(v string) *StartChatShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *StartChatShrinkRequest) SetToken(v string) *StartChatShrinkRequest {
	s.Token = &v
	return s
}

func (s *StartChatShrinkRequest) SetUserListShrink(v string) *StartChatShrinkRequest {
	s.UserListShrink = &v
	return s
}

type StartChatResponseBody struct {
	// example:
	//
	// OK
	Code *string                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *StartChatResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartChatResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartChatResponseBody) GoString() string {
	return s.String()
}

func (s *StartChatResponseBody) SetCode(v string) *StartChatResponseBody {
	s.Code = &v
	return s
}

func (s *StartChatResponseBody) SetData(v *StartChatResponseBodyData) *StartChatResponseBody {
	s.Data = v
	return s
}

func (s *StartChatResponseBody) SetHttpStatusCode(v int32) *StartChatResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *StartChatResponseBody) SetMessage(v string) *StartChatResponseBody {
	s.Message = &v
	return s
}

func (s *StartChatResponseBody) SetRequestId(v string) *StartChatResponseBody {
	s.RequestId = &v
	return s
}

type StartChatResponseBodyData struct {
	// example:
	//
	// $23086709$EAUNIT
	ChatConversationId *string `json:"ChatConversationId,omitempty" xml:"ChatConversationId,omitempty"`
	// example:
	//
	// chat-525523618219921408
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s StartChatResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s StartChatResponseBodyData) GoString() string {
	return s.String()
}

func (s *StartChatResponseBodyData) SetChatConversationId(v string) *StartChatResponseBodyData {
	s.ChatConversationId = &v
	return s
}

func (s *StartChatResponseBodyData) SetJobId(v string) *StartChatResponseBodyData {
	s.JobId = &v
	return s
}

type StartChatResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartChatResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartChatResponse) String() string {
	return tea.Prettify(s)
}

func (s StartChatResponse) GoString() string {
	return s.String()
}

func (s *StartChatResponse) SetHeaders(v map[string]*string) *StartChatResponse {
	s.Headers = v
	return s
}

func (s *StartChatResponse) SetStatusCode(v int32) *StartChatResponse {
	s.StatusCode = &v
	return s
}

func (s *StartChatResponse) SetBody(v *StartChatResponseBody) *StartChatResponse {
	s.Body = v
	return s
}

type StartConferenceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["8045****","1317511****"]
	ParticipantListJson *string `json:"ParticipantListJson,omitempty" xml:"ParticipantListJson,omitempty"`
	Tags                *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// example:
	//
	// 30
	TimeoutSeconds *int32 `json:"TimeoutSeconds,omitempty" xml:"TimeoutSeconds,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s StartConferenceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartConferenceRequest) GoString() string {
	return s.String()
}

func (s *StartConferenceRequest) SetInstanceId(v string) *StartConferenceRequest {
	s.InstanceId = &v
	return s
}

func (s *StartConferenceRequest) SetParticipantListJson(v string) *StartConferenceRequest {
	s.ParticipantListJson = &v
	return s
}

func (s *StartConferenceRequest) SetTags(v string) *StartConferenceRequest {
	s.Tags = &v
	return s
}

func (s *StartConferenceRequest) SetTimeoutSeconds(v int32) *StartConferenceRequest {
	s.TimeoutSeconds = &v
	return s
}

func (s *StartConferenceRequest) SetUserId(v string) *StartConferenceRequest {
	s.UserId = &v
	return s
}

type StartConferenceResponseBody struct {
	// example:
	//
	// OK
	Code *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *StartConferenceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// FDD327D1-AB8A-596B-883F-F63582A73F1D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartConferenceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartConferenceResponseBody) GoString() string {
	return s.String()
}

func (s *StartConferenceResponseBody) SetCode(v string) *StartConferenceResponseBody {
	s.Code = &v
	return s
}

func (s *StartConferenceResponseBody) SetData(v *StartConferenceResponseBodyData) *StartConferenceResponseBody {
	s.Data = v
	return s
}

func (s *StartConferenceResponseBody) SetHttpStatusCode(v int32) *StartConferenceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *StartConferenceResponseBody) SetMessage(v string) *StartConferenceResponseBody {
	s.Message = &v
	return s
}

func (s *StartConferenceResponseBody) SetParams(v []*string) *StartConferenceResponseBody {
	s.Params = v
	return s
}

func (s *StartConferenceResponseBody) SetRequestId(v string) *StartConferenceResponseBody {
	s.RequestId = &v
	return s
}

type StartConferenceResponseBodyData struct {
	CallContext *StartConferenceResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	UserContext *StartConferenceResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s StartConferenceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s StartConferenceResponseBodyData) GoString() string {
	return s.String()
}

func (s *StartConferenceResponseBodyData) SetCallContext(v *StartConferenceResponseBodyDataCallContext) *StartConferenceResponseBodyData {
	s.CallContext = v
	return s
}

func (s *StartConferenceResponseBodyData) SetUserContext(v *StartConferenceResponseBodyDataUserContext) *StartConferenceResponseBodyData {
	s.UserContext = v
	return s
}

type StartConferenceResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                                      `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*StartConferenceResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s StartConferenceResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s StartConferenceResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *StartConferenceResponseBodyDataCallContext) SetCallType(v string) *StartConferenceResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *StartConferenceResponseBodyDataCallContext) SetChannelContexts(v []*StartConferenceResponseBodyDataCallContextChannelContexts) *StartConferenceResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *StartConferenceResponseBodyDataCallContext) SetInstanceId(v string) *StartConferenceResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *StartConferenceResponseBodyDataCallContext) SetJobId(v string) *StartConferenceResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type StartConferenceResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// MONITORING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:131888****->8001****:1609225718294:job-65700074013925376
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// ANSWERED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 8001****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// job-6573574060089****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1318888****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s StartConferenceResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s StartConferenceResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *StartConferenceResponseBodyDataCallContextChannelContexts) SetCallType(v string) *StartConferenceResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *StartConferenceResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *StartConferenceResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *StartConferenceResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *StartConferenceResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *StartConferenceResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *StartConferenceResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *StartConferenceResponseBodyDataCallContextChannelContexts) SetDestination(v string) *StartConferenceResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *StartConferenceResponseBodyDataCallContextChannelContexts) SetJobId(v string) *StartConferenceResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *StartConferenceResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *StartConferenceResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *StartConferenceResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *StartConferenceResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *StartConferenceResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *StartConferenceResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *StartConferenceResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *StartConferenceResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *StartConferenceResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *StartConferenceResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *StartConferenceResponseBodyDataCallContextChannelContexts) SetUserId(v string) *StartConferenceResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type StartConferenceResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// false
	DeviceState *string `json:"DeviceState,omitempty" xml:"DeviceState,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// 1609136956378
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609136956378
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s StartConferenceResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s StartConferenceResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *StartConferenceResponseBodyDataUserContext) SetBreakCode(v string) *StartConferenceResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *StartConferenceResponseBodyDataUserContext) SetDeviceId(v string) *StartConferenceResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *StartConferenceResponseBodyDataUserContext) SetDeviceState(v string) *StartConferenceResponseBodyDataUserContext {
	s.DeviceState = &v
	return s
}

func (s *StartConferenceResponseBodyDataUserContext) SetExtension(v string) *StartConferenceResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *StartConferenceResponseBodyDataUserContext) SetHeartbeat(v int64) *StartConferenceResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *StartConferenceResponseBodyDataUserContext) SetInstanceId(v string) *StartConferenceResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *StartConferenceResponseBodyDataUserContext) SetJobId(v string) *StartConferenceResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *StartConferenceResponseBodyDataUserContext) SetMobile(v string) *StartConferenceResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *StartConferenceResponseBodyDataUserContext) SetOutboundScenario(v bool) *StartConferenceResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *StartConferenceResponseBodyDataUserContext) SetReserved(v int64) *StartConferenceResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *StartConferenceResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *StartConferenceResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *StartConferenceResponseBodyDataUserContext) SetUserId(v string) *StartConferenceResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *StartConferenceResponseBodyDataUserContext) SetUserState(v string) *StartConferenceResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *StartConferenceResponseBodyDataUserContext) SetWorkMode(v string) *StartConferenceResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type StartConferenceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartConferenceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartConferenceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartConferenceResponse) GoString() string {
	return s.String()
}

func (s *StartConferenceResponse) SetHeaders(v map[string]*string) *StartConferenceResponse {
	s.Headers = v
	return s
}

func (s *StartConferenceResponse) SetStatusCode(v int32) *StartConferenceResponse {
	s.StatusCode = &v
	return s
}

func (s *StartConferenceResponse) SetBody(v *StartConferenceResponseBody) *StartConferenceResponse {
	s.Body = v
	return s
}

type StartEditContactFlowRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 798e83a9-5140-4039-afa1-761ca4cca2df
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s StartEditContactFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s StartEditContactFlowRequest) GoString() string {
	return s.String()
}

func (s *StartEditContactFlowRequest) SetContactFlowId(v string) *StartEditContactFlowRequest {
	s.ContactFlowId = &v
	return s
}

func (s *StartEditContactFlowRequest) SetInstanceId(v string) *StartEditContactFlowRequest {
	s.InstanceId = &v
	return s
}

type StartEditContactFlowResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// b3114362-9062-46c7-82dc-ae55ac168b2e
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BC2733CE-C470-564A-8C11-9DC02468823A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartEditContactFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartEditContactFlowResponseBody) GoString() string {
	return s.String()
}

func (s *StartEditContactFlowResponseBody) SetCode(v string) *StartEditContactFlowResponseBody {
	s.Code = &v
	return s
}

func (s *StartEditContactFlowResponseBody) SetData(v string) *StartEditContactFlowResponseBody {
	s.Data = &v
	return s
}

func (s *StartEditContactFlowResponseBody) SetHttpStatusCode(v int32) *StartEditContactFlowResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *StartEditContactFlowResponseBody) SetMessage(v string) *StartEditContactFlowResponseBody {
	s.Message = &v
	return s
}

func (s *StartEditContactFlowResponseBody) SetRequestId(v string) *StartEditContactFlowResponseBody {
	s.RequestId = &v
	return s
}

type StartEditContactFlowResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartEditContactFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartEditContactFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s StartEditContactFlowResponse) GoString() string {
	return s.String()
}

func (s *StartEditContactFlowResponse) SetHeaders(v map[string]*string) *StartEditContactFlowResponse {
	s.Headers = v
	return s
}

func (s *StartEditContactFlowResponse) SetStatusCode(v int32) *StartEditContactFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *StartEditContactFlowResponse) SetBody(v *StartEditContactFlowResponseBody) *StartEditContactFlowResponse {
	s.Body = v
	return s
}

type StartPredictiveCallRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1312353****
	Callee *string `json:"Callee,omitempty" xml:"Callee,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0109810****
	Caller *string `json:"Caller,omitempty" xml:"Caller,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 9774c36c-12fe-4e37-adce-89bc77ce****
	ContactFlowId        *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	ContactFlowVariables *string `json:"ContactFlowVariables,omitempty" xml:"ContactFlowVariables,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 1312353****
	MaskedCallee *string `json:"MaskedCallee,omitempty" xml:"MaskedCallee,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	Tags         *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// example:
	//
	// 10
	TimeoutSeconds *int32 `json:"TimeoutSeconds,omitempty" xml:"TimeoutSeconds,omitempty"`
}

func (s StartPredictiveCallRequest) String() string {
	return tea.Prettify(s)
}

func (s StartPredictiveCallRequest) GoString() string {
	return s.String()
}

func (s *StartPredictiveCallRequest) SetCallee(v string) *StartPredictiveCallRequest {
	s.Callee = &v
	return s
}

func (s *StartPredictiveCallRequest) SetCaller(v string) *StartPredictiveCallRequest {
	s.Caller = &v
	return s
}

func (s *StartPredictiveCallRequest) SetContactFlowId(v string) *StartPredictiveCallRequest {
	s.ContactFlowId = &v
	return s
}

func (s *StartPredictiveCallRequest) SetContactFlowVariables(v string) *StartPredictiveCallRequest {
	s.ContactFlowVariables = &v
	return s
}

func (s *StartPredictiveCallRequest) SetInstanceId(v string) *StartPredictiveCallRequest {
	s.InstanceId = &v
	return s
}

func (s *StartPredictiveCallRequest) SetMaskedCallee(v string) *StartPredictiveCallRequest {
	s.MaskedCallee = &v
	return s
}

func (s *StartPredictiveCallRequest) SetSkillGroupId(v string) *StartPredictiveCallRequest {
	s.SkillGroupId = &v
	return s
}

func (s *StartPredictiveCallRequest) SetTags(v string) *StartPredictiveCallRequest {
	s.Tags = &v
	return s
}

func (s *StartPredictiveCallRequest) SetTimeoutSeconds(v int32) *StartPredictiveCallRequest {
	s.TimeoutSeconds = &v
	return s
}

type StartPredictiveCallResponseBody struct {
	// example:
	//
	// OK
	Code *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *StartPredictiveCallResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 26A34338-5CD9-4C95-A7A6-5BDCE76C6B94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartPredictiveCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartPredictiveCallResponseBody) GoString() string {
	return s.String()
}

func (s *StartPredictiveCallResponseBody) SetCode(v string) *StartPredictiveCallResponseBody {
	s.Code = &v
	return s
}

func (s *StartPredictiveCallResponseBody) SetData(v *StartPredictiveCallResponseBodyData) *StartPredictiveCallResponseBody {
	s.Data = v
	return s
}

func (s *StartPredictiveCallResponseBody) SetHttpStatusCode(v int32) *StartPredictiveCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *StartPredictiveCallResponseBody) SetMessage(v string) *StartPredictiveCallResponseBody {
	s.Message = &v
	return s
}

func (s *StartPredictiveCallResponseBody) SetParams(v []*string) *StartPredictiveCallResponseBody {
	s.Params = v
	return s
}

func (s *StartPredictiveCallResponseBody) SetRequestId(v string) *StartPredictiveCallResponseBody {
	s.RequestId = &v
	return s
}

type StartPredictiveCallResponseBodyData struct {
	CallContext *StartPredictiveCallResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	UserContext *StartPredictiveCallResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s StartPredictiveCallResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s StartPredictiveCallResponseBodyData) GoString() string {
	return s.String()
}

func (s *StartPredictiveCallResponseBodyData) SetCallContext(v *StartPredictiveCallResponseBodyDataCallContext) *StartPredictiveCallResponseBodyData {
	s.CallContext = v
	return s
}

func (s *StartPredictiveCallResponseBodyData) SetUserContext(v *StartPredictiveCallResponseBodyDataUserContext) *StartPredictiveCallResponseBodyData {
	s.UserContext = v
	return s
}

type StartPredictiveCallResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                                          `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*StartPredictiveCallResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6570007401392****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s StartPredictiveCallResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s StartPredictiveCallResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *StartPredictiveCallResponseBodyDataCallContext) SetCallType(v string) *StartPredictiveCallResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataCallContext) SetChannelContexts(v []*StartPredictiveCallResponseBodyDataCallContextChannelContexts) *StartPredictiveCallResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *StartPredictiveCallResponseBodyDataCallContext) SetInstanceId(v string) *StartPredictiveCallResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataCallContext) SetJobId(v string) *StartPredictiveCallResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type StartPredictiveCallResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// []
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:131888****->8001****:1609225718294:job-6570007401392****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// NONE
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 8001****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// job-6570007401392****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1318888****
	Originator       *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	ReleaseReason    *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// 1609225718295
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8001****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s StartPredictiveCallResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s StartPredictiveCallResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *StartPredictiveCallResponseBodyDataCallContextChannelContexts) SetCallType(v string) *StartPredictiveCallResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *StartPredictiveCallResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *StartPredictiveCallResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *StartPredictiveCallResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataCallContextChannelContexts) SetDestination(v string) *StartPredictiveCallResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataCallContextChannelContexts) SetJobId(v string) *StartPredictiveCallResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *StartPredictiveCallResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *StartPredictiveCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *StartPredictiveCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *StartPredictiveCallResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *StartPredictiveCallResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataCallContextChannelContexts) SetUserId(v string) *StartPredictiveCallResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type StartPredictiveCallResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// ONLINE
	DeviceState *string `json:"DeviceState,omitempty" xml:"DeviceState,omitempty"`
	// example:
	//
	// 8001****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6570007401392****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609136956378
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// READY
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s StartPredictiveCallResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s StartPredictiveCallResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *StartPredictiveCallResponseBodyDataUserContext) SetBreakCode(v string) *StartPredictiveCallResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataUserContext) SetDeviceId(v string) *StartPredictiveCallResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataUserContext) SetDeviceState(v string) *StartPredictiveCallResponseBodyDataUserContext {
	s.DeviceState = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataUserContext) SetExtension(v string) *StartPredictiveCallResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataUserContext) SetHeartbeat(v int64) *StartPredictiveCallResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataUserContext) SetInstanceId(v string) *StartPredictiveCallResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataUserContext) SetJobId(v string) *StartPredictiveCallResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataUserContext) SetMobile(v string) *StartPredictiveCallResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataUserContext) SetOutboundScenario(v bool) *StartPredictiveCallResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataUserContext) SetReserved(v int64) *StartPredictiveCallResponseBodyDataUserContext {
	s.Reserved = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *StartPredictiveCallResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *StartPredictiveCallResponseBodyDataUserContext) SetUserId(v string) *StartPredictiveCallResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataUserContext) SetUserState(v string) *StartPredictiveCallResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *StartPredictiveCallResponseBodyDataUserContext) SetWorkMode(v string) *StartPredictiveCallResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type StartPredictiveCallResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartPredictiveCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartPredictiveCallResponse) String() string {
	return tea.Prettify(s)
}

func (s StartPredictiveCallResponse) GoString() string {
	return s.String()
}

func (s *StartPredictiveCallResponse) SetHeaders(v map[string]*string) *StartPredictiveCallResponse {
	s.Headers = v
	return s
}

func (s *StartPredictiveCallResponse) SetStatusCode(v int32) *StartPredictiveCallResponse {
	s.StatusCode = &v
	return s
}

func (s *StartPredictiveCallResponse) SetBody(v *StartPredictiveCallResponseBody) *StartPredictiveCallResponse {
	s.Body = v
	return s
}

type StartPrivacyCallRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ALIPUBB7A727C170949
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1888888****
	Callee *string `json:"Callee,omitempty" xml:"Callee,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0109810****
	Caller *string `json:"Caller,omitempty" xml:"Caller,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s StartPrivacyCallRequest) String() string {
	return tea.Prettify(s)
}

func (s StartPrivacyCallRequest) GoString() string {
	return s.String()
}

func (s *StartPrivacyCallRequest) SetAppId(v string) *StartPrivacyCallRequest {
	s.AppId = &v
	return s
}

func (s *StartPrivacyCallRequest) SetCallee(v string) *StartPrivacyCallRequest {
	s.Callee = &v
	return s
}

func (s *StartPrivacyCallRequest) SetCaller(v string) *StartPrivacyCallRequest {
	s.Caller = &v
	return s
}

func (s *StartPrivacyCallRequest) SetInstanceId(v string) *StartPrivacyCallRequest {
	s.InstanceId = &v
	return s
}

type StartPrivacyCallResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// job-xxx
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 0630E5DF-CEB0-445B-8626-D5C7481181C3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartPrivacyCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartPrivacyCallResponseBody) GoString() string {
	return s.String()
}

func (s *StartPrivacyCallResponseBody) SetCode(v string) *StartPrivacyCallResponseBody {
	s.Code = &v
	return s
}

func (s *StartPrivacyCallResponseBody) SetData(v string) *StartPrivacyCallResponseBody {
	s.Data = &v
	return s
}

func (s *StartPrivacyCallResponseBody) SetHttpStatusCode(v int32) *StartPrivacyCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *StartPrivacyCallResponseBody) SetMessage(v string) *StartPrivacyCallResponseBody {
	s.Message = &v
	return s
}

func (s *StartPrivacyCallResponseBody) SetParams(v []*string) *StartPrivacyCallResponseBody {
	s.Params = v
	return s
}

func (s *StartPrivacyCallResponseBody) SetRequestId(v string) *StartPrivacyCallResponseBody {
	s.RequestId = &v
	return s
}

type StartPrivacyCallResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartPrivacyCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartPrivacyCallResponse) String() string {
	return tea.Prettify(s)
}

func (s StartPrivacyCallResponse) GoString() string {
	return s.String()
}

func (s *StartPrivacyCallResponse) SetHeaders(v map[string]*string) *StartPrivacyCallResponse {
	s.Headers = v
	return s
}

func (s *StartPrivacyCallResponse) SetStatusCode(v int32) *StartPrivacyCallResponse {
	s.StatusCode = &v
	return s
}

func (s *StartPrivacyCallResponse) SetBody(v *StartPrivacyCallResponseBody) *StartPrivacyCallResponse {
	s.Body = v
	return s
}

type SubmitCampaignRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 6badb397-a8b5-40b6-21019d382a09
	CampaignId *string `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s SubmitCampaignRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitCampaignRequest) GoString() string {
	return s.String()
}

func (s *SubmitCampaignRequest) SetCampaignId(v string) *SubmitCampaignRequest {
	s.CampaignId = &v
	return s
}

func (s *SubmitCampaignRequest) SetInstanceId(v string) *SubmitCampaignRequest {
	s.InstanceId = &v
	return s
}

type SubmitCampaignResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 7CC6523B-0E51-1B62-8DA5-6A9831CAE315
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitCampaignResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitCampaignResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitCampaignResponseBody) SetCode(v string) *SubmitCampaignResponseBody {
	s.Code = &v
	return s
}

func (s *SubmitCampaignResponseBody) SetHttpStatusCode(v string) *SubmitCampaignResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SubmitCampaignResponseBody) SetMessage(v string) *SubmitCampaignResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitCampaignResponseBody) SetRequestId(v string) *SubmitCampaignResponseBody {
	s.RequestId = &v
	return s
}

type SubmitCampaignResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitCampaignResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitCampaignResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitCampaignResponse) GoString() string {
	return s.String()
}

func (s *SubmitCampaignResponse) SetHeaders(v map[string]*string) *SubmitCampaignResponse {
	s.Headers = v
	return s
}

func (s *SubmitCampaignResponse) SetStatusCode(v int32) *SubmitCampaignResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitCampaignResponse) SetBody(v *SubmitCampaignResponseBody) *SubmitCampaignResponse {
	s.Body = v
	return s
}

type SwitchToConferenceRequest struct {
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// job-24114064019637****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SwitchToConferenceRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchToConferenceRequest) GoString() string {
	return s.String()
}

func (s *SwitchToConferenceRequest) SetDeviceId(v string) *SwitchToConferenceRequest {
	s.DeviceId = &v
	return s
}

func (s *SwitchToConferenceRequest) SetInstanceId(v string) *SwitchToConferenceRequest {
	s.InstanceId = &v
	return s
}

func (s *SwitchToConferenceRequest) SetJobId(v string) *SwitchToConferenceRequest {
	s.JobId = &v
	return s
}

func (s *SwitchToConferenceRequest) SetUserId(v string) *SwitchToConferenceRequest {
	s.UserId = &v
	return s
}

type SwitchToConferenceResponseBody struct {
	// example:
	//
	// OK
	Code *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *SwitchToConferenceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// D9C96A73-09C9-5E2A-8CDB-85EC0BC246DA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SwitchToConferenceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchToConferenceResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchToConferenceResponseBody) SetCode(v string) *SwitchToConferenceResponseBody {
	s.Code = &v
	return s
}

func (s *SwitchToConferenceResponseBody) SetData(v *SwitchToConferenceResponseBodyData) *SwitchToConferenceResponseBody {
	s.Data = v
	return s
}

func (s *SwitchToConferenceResponseBody) SetHttpStatusCode(v int32) *SwitchToConferenceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SwitchToConferenceResponseBody) SetMessage(v string) *SwitchToConferenceResponseBody {
	s.Message = &v
	return s
}

func (s *SwitchToConferenceResponseBody) SetParams(v []*string) *SwitchToConferenceResponseBody {
	s.Params = v
	return s
}

func (s *SwitchToConferenceResponseBody) SetRequestId(v string) *SwitchToConferenceResponseBody {
	s.RequestId = &v
	return s
}

type SwitchToConferenceResponseBodyData struct {
	CallContext *SwitchToConferenceResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	UserContext *SwitchToConferenceResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s SwitchToConferenceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SwitchToConferenceResponseBodyData) GoString() string {
	return s.String()
}

func (s *SwitchToConferenceResponseBodyData) SetCallContext(v *SwitchToConferenceResponseBodyDataCallContext) *SwitchToConferenceResponseBodyData {
	s.CallContext = v
	return s
}

func (s *SwitchToConferenceResponseBodyData) SetUserContext(v *SwitchToConferenceResponseBodyDataUserContext) *SwitchToConferenceResponseBodyData {
	s.UserContext = v
	return s
}

type SwitchToConferenceResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                                         `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*SwitchToConferenceResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SwitchToConferenceResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s SwitchToConferenceResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *SwitchToConferenceResponseBodyDataCallContext) SetCallType(v string) *SwitchToConferenceResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataCallContext) SetChannelContexts(v []*SwitchToConferenceResponseBodyDataCallContextChannelContexts) *SwitchToConferenceResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *SwitchToConferenceResponseBodyDataCallContext) SetInstanceId(v string) *SwitchToConferenceResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataCallContext) SetJobId(v string) *SwitchToConferenceResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type SwitchToConferenceResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// MONITORING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:131888****->8001****:1609225718294:job-6538214103685****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// NONE
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 8001****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// 1
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1318888****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1609255716900
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SwitchToConferenceResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s SwitchToConferenceResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *SwitchToConferenceResponseBodyDataCallContextChannelContexts) SetCallType(v string) *SwitchToConferenceResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *SwitchToConferenceResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *SwitchToConferenceResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *SwitchToConferenceResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataCallContextChannelContexts) SetDestination(v string) *SwitchToConferenceResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataCallContextChannelContexts) SetIndex(v int32) *SwitchToConferenceResponseBodyDataCallContextChannelContexts {
	s.Index = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataCallContextChannelContexts) SetJobId(v string) *SwitchToConferenceResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *SwitchToConferenceResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *SwitchToConferenceResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *SwitchToConferenceResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataCallContextChannelContexts) SetSkillGroupId(v string) *SwitchToConferenceResponseBodyDataCallContextChannelContexts {
	s.SkillGroupId = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *SwitchToConferenceResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *SwitchToConferenceResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataCallContextChannelContexts) SetUserId(v string) *SwitchToConferenceResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type SwitchToConferenceResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// false
	DeviceState *string `json:"DeviceState,omitempty" xml:"DeviceState,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// agent@ccc-test
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario       *bool     `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// 1609136956378
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s SwitchToConferenceResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s SwitchToConferenceResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *SwitchToConferenceResponseBodyDataUserContext) SetBreakCode(v string) *SwitchToConferenceResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataUserContext) SetDeviceId(v string) *SwitchToConferenceResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataUserContext) SetDeviceState(v string) *SwitchToConferenceResponseBodyDataUserContext {
	s.DeviceState = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataUserContext) SetExtension(v string) *SwitchToConferenceResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataUserContext) SetHeartbeat(v int64) *SwitchToConferenceResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataUserContext) SetInstanceId(v string) *SwitchToConferenceResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataUserContext) SetJobId(v string) *SwitchToConferenceResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataUserContext) SetMobile(v string) *SwitchToConferenceResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataUserContext) SetOutboundScenario(v bool) *SwitchToConferenceResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *SwitchToConferenceResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *SwitchToConferenceResponseBodyDataUserContext) SetUserId(v string) *SwitchToConferenceResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataUserContext) SetUserState(v string) *SwitchToConferenceResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *SwitchToConferenceResponseBodyDataUserContext) SetWorkMode(v string) *SwitchToConferenceResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type SwitchToConferenceResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SwitchToConferenceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SwitchToConferenceResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchToConferenceResponse) GoString() string {
	return s.String()
}

func (s *SwitchToConferenceResponse) SetHeaders(v map[string]*string) *SwitchToConferenceResponse {
	s.Headers = v
	return s
}

func (s *SwitchToConferenceResponse) SetStatusCode(v int32) *SwitchToConferenceResponse {
	s.StatusCode = &v
	return s
}

func (s *SwitchToConferenceResponse) SetBody(v *SwitchToConferenceResponseBody) *SwitchToConferenceResponse {
	s.Body = v
	return s
}

type TakeBreakRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// lunchtime
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s TakeBreakRequest) String() string {
	return tea.Prettify(s)
}

func (s TakeBreakRequest) GoString() string {
	return s.String()
}

func (s *TakeBreakRequest) SetCode(v string) *TakeBreakRequest {
	s.Code = &v
	return s
}

func (s *TakeBreakRequest) SetDeviceId(v string) *TakeBreakRequest {
	s.DeviceId = &v
	return s
}

func (s *TakeBreakRequest) SetInstanceId(v string) *TakeBreakRequest {
	s.InstanceId = &v
	return s
}

func (s *TakeBreakRequest) SetUserId(v string) *TakeBreakRequest {
	s.UserId = &v
	return s
}

type TakeBreakResponseBody struct {
	// example:
	//
	// OK
	Code *string                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *TakeBreakResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// B59382D2-5755-4C6D-861F-FA2AAD8F89F7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TakeBreakResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TakeBreakResponseBody) GoString() string {
	return s.String()
}

func (s *TakeBreakResponseBody) SetCode(v string) *TakeBreakResponseBody {
	s.Code = &v
	return s
}

func (s *TakeBreakResponseBody) SetData(v *TakeBreakResponseBodyData) *TakeBreakResponseBody {
	s.Data = v
	return s
}

func (s *TakeBreakResponseBody) SetHttpStatusCode(v int32) *TakeBreakResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *TakeBreakResponseBody) SetMessage(v string) *TakeBreakResponseBody {
	s.Message = &v
	return s
}

func (s *TakeBreakResponseBody) SetParams(v []*string) *TakeBreakResponseBody {
	s.Params = v
	return s
}

func (s *TakeBreakResponseBody) SetRequestId(v string) *TakeBreakResponseBody {
	s.RequestId = &v
	return s
}

type TakeBreakResponseBodyData struct {
	// example:
	//
	// lunchtime
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8001****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609249563836
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobId      *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1390000****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario *bool `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	// example:
	//
	// 1609234221864
	Reserved               *int64    `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// BREAK
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s TakeBreakResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s TakeBreakResponseBodyData) GoString() string {
	return s.String()
}

func (s *TakeBreakResponseBodyData) SetBreakCode(v string) *TakeBreakResponseBodyData {
	s.BreakCode = &v
	return s
}

func (s *TakeBreakResponseBodyData) SetDeviceId(v string) *TakeBreakResponseBodyData {
	s.DeviceId = &v
	return s
}

func (s *TakeBreakResponseBodyData) SetExtension(v string) *TakeBreakResponseBodyData {
	s.Extension = &v
	return s
}

func (s *TakeBreakResponseBodyData) SetHeartbeat(v int64) *TakeBreakResponseBodyData {
	s.Heartbeat = &v
	return s
}

func (s *TakeBreakResponseBodyData) SetInstanceId(v string) *TakeBreakResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *TakeBreakResponseBodyData) SetJobId(v string) *TakeBreakResponseBodyData {
	s.JobId = &v
	return s
}

func (s *TakeBreakResponseBodyData) SetMobile(v string) *TakeBreakResponseBodyData {
	s.Mobile = &v
	return s
}

func (s *TakeBreakResponseBodyData) SetOutboundScenario(v bool) *TakeBreakResponseBodyData {
	s.OutboundScenario = &v
	return s
}

func (s *TakeBreakResponseBodyData) SetReserved(v int64) *TakeBreakResponseBodyData {
	s.Reserved = &v
	return s
}

func (s *TakeBreakResponseBodyData) SetSignedSkillGroupIdList(v []*string) *TakeBreakResponseBodyData {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *TakeBreakResponseBodyData) SetUserId(v string) *TakeBreakResponseBodyData {
	s.UserId = &v
	return s
}

func (s *TakeBreakResponseBodyData) SetUserState(v string) *TakeBreakResponseBodyData {
	s.UserState = &v
	return s
}

func (s *TakeBreakResponseBodyData) SetWorkMode(v string) *TakeBreakResponseBodyData {
	s.WorkMode = &v
	return s
}

type TakeBreakResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TakeBreakResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TakeBreakResponse) String() string {
	return tea.Prettify(s)
}

func (s TakeBreakResponse) GoString() string {
	return s.String()
}

func (s *TakeBreakResponse) SetHeaders(v map[string]*string) *TakeBreakResponse {
	s.Headers = v
	return s
}

func (s *TakeBreakResponse) SetStatusCode(v int32) *TakeBreakResponse {
	s.StatusCode = &v
	return s
}

func (s *TakeBreakResponse) SetBody(v *TakeBreakResponseBody) *TakeBreakResponse {
	s.Body = v
	return s
}

type TerminateTicketRequest struct {
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// 5491d3b4-14ee-4341-b5f1-db2c78beddeb
	TicketId *string `json:"TicketId,omitempty" xml:"TicketId,omitempty"`
}

func (s TerminateTicketRequest) String() string {
	return tea.Prettify(s)
}

func (s TerminateTicketRequest) GoString() string {
	return s.String()
}

func (s *TerminateTicketRequest) SetComment(v string) *TerminateTicketRequest {
	s.Comment = &v
	return s
}

func (s *TerminateTicketRequest) SetInstanceId(v string) *TerminateTicketRequest {
	s.InstanceId = &v
	return s
}

func (s *TerminateTicketRequest) SetTicketId(v string) *TerminateTicketRequest {
	s.TicketId = &v
	return s
}

type TerminateTicketResponseBody struct {
	// example:
	//
	// OK
	Code *string     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 03C67DAD-EB26-41D8-949D-9B0C470FB716
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TerminateTicketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TerminateTicketResponseBody) GoString() string {
	return s.String()
}

func (s *TerminateTicketResponseBody) SetCode(v string) *TerminateTicketResponseBody {
	s.Code = &v
	return s
}

func (s *TerminateTicketResponseBody) SetData(v interface{}) *TerminateTicketResponseBody {
	s.Data = v
	return s
}

func (s *TerminateTicketResponseBody) SetHttpStatusCode(v int32) *TerminateTicketResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *TerminateTicketResponseBody) SetMessage(v string) *TerminateTicketResponseBody {
	s.Message = &v
	return s
}

func (s *TerminateTicketResponseBody) SetParams(v []*string) *TerminateTicketResponseBody {
	s.Params = v
	return s
}

func (s *TerminateTicketResponseBody) SetRequestId(v string) *TerminateTicketResponseBody {
	s.RequestId = &v
	return s
}

type TerminateTicketResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TerminateTicketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TerminateTicketResponse) String() string {
	return tea.Prettify(s)
}

func (s TerminateTicketResponse) GoString() string {
	return s.String()
}

func (s *TerminateTicketResponse) SetHeaders(v map[string]*string) *TerminateTicketResponse {
	s.Headers = v
	return s
}

func (s *TerminateTicketResponse) SetStatusCode(v int32) *TerminateTicketResponse {
	s.StatusCode = &v
	return s
}

func (s *TerminateTicketResponse) SetBody(v *TerminateTicketResponseBody) *TerminateTicketResponse {
	s.Body = v
	return s
}

type TransferTicketTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// assignee@ccc-test
	Assignee *string `json:"Assignee,omitempty" xml:"Assignee,omitempty"`
	Comment  *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// f780ade8-3ca9-458b-b067-63077946a570
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// 5491d3b4-14ee-4341-b5f1-db2c78beddeb
	TicketId *string `json:"TicketId,omitempty" xml:"TicketId,omitempty"`
}

func (s TransferTicketTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s TransferTicketTaskRequest) GoString() string {
	return s.String()
}

func (s *TransferTicketTaskRequest) SetAssignee(v string) *TransferTicketTaskRequest {
	s.Assignee = &v
	return s
}

func (s *TransferTicketTaskRequest) SetComment(v string) *TransferTicketTaskRequest {
	s.Comment = &v
	return s
}

func (s *TransferTicketTaskRequest) SetInstanceId(v string) *TransferTicketTaskRequest {
	s.InstanceId = &v
	return s
}

func (s *TransferTicketTaskRequest) SetTaskId(v string) *TransferTicketTaskRequest {
	s.TaskId = &v
	return s
}

func (s *TransferTicketTaskRequest) SetTicketId(v string) *TransferTicketTaskRequest {
	s.TicketId = &v
	return s
}

type TransferTicketTaskResponseBody struct {
	// example:
	//
	// OK
	Code *string     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 678F7002-CA01-4ABF-A112-585AFBDF3A3B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TransferTicketTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TransferTicketTaskResponseBody) GoString() string {
	return s.String()
}

func (s *TransferTicketTaskResponseBody) SetCode(v string) *TransferTicketTaskResponseBody {
	s.Code = &v
	return s
}

func (s *TransferTicketTaskResponseBody) SetData(v interface{}) *TransferTicketTaskResponseBody {
	s.Data = v
	return s
}

func (s *TransferTicketTaskResponseBody) SetHttpStatusCode(v int32) *TransferTicketTaskResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *TransferTicketTaskResponseBody) SetMessage(v string) *TransferTicketTaskResponseBody {
	s.Message = &v
	return s
}

func (s *TransferTicketTaskResponseBody) SetParams(v []*string) *TransferTicketTaskResponseBody {
	s.Params = v
	return s
}

func (s *TransferTicketTaskResponseBody) SetRequestId(v string) *TransferTicketTaskResponseBody {
	s.RequestId = &v
	return s
}

type TransferTicketTaskResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TransferTicketTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TransferTicketTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s TransferTicketTaskResponse) GoString() string {
	return s.String()
}

func (s *TransferTicketTaskResponse) SetHeaders(v map[string]*string) *TransferTicketTaskResponse {
	s.Headers = v
	return s
}

func (s *TransferTicketTaskResponse) SetStatusCode(v int32) *TransferTicketTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *TransferTicketTaskResponse) SetBody(v *TransferTicketTaskResponseBody) *TransferTicketTaskResponse {
	s.Body = v
	return s
}

type UnmuteCallRequest struct {
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-6538214103685****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// device
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s UnmuteCallRequest) String() string {
	return tea.Prettify(s)
}

func (s UnmuteCallRequest) GoString() string {
	return s.String()
}

func (s *UnmuteCallRequest) SetChannelId(v string) *UnmuteCallRequest {
	s.ChannelId = &v
	return s
}

func (s *UnmuteCallRequest) SetDeviceId(v string) *UnmuteCallRequest {
	s.DeviceId = &v
	return s
}

func (s *UnmuteCallRequest) SetInstanceId(v string) *UnmuteCallRequest {
	s.InstanceId = &v
	return s
}

func (s *UnmuteCallRequest) SetJobId(v string) *UnmuteCallRequest {
	s.JobId = &v
	return s
}

func (s *UnmuteCallRequest) SetUserId(v string) *UnmuteCallRequest {
	s.UserId = &v
	return s
}

type UnmuteCallResponseBody struct {
	// example:
	//
	// OK
	Code *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *UnmuteCallResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// EEEE671A-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnmuteCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnmuteCallResponseBody) GoString() string {
	return s.String()
}

func (s *UnmuteCallResponseBody) SetCode(v string) *UnmuteCallResponseBody {
	s.Code = &v
	return s
}

func (s *UnmuteCallResponseBody) SetData(v *UnmuteCallResponseBodyData) *UnmuteCallResponseBody {
	s.Data = v
	return s
}

func (s *UnmuteCallResponseBody) SetHttpStatusCode(v int32) *UnmuteCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UnmuteCallResponseBody) SetMessage(v string) *UnmuteCallResponseBody {
	s.Message = &v
	return s
}

func (s *UnmuteCallResponseBody) SetParams(v []*string) *UnmuteCallResponseBody {
	s.Params = v
	return s
}

func (s *UnmuteCallResponseBody) SetRequestId(v string) *UnmuteCallResponseBody {
	s.RequestId = &v
	return s
}

type UnmuteCallResponseBodyData struct {
	CallContext *UnmuteCallResponseBodyDataCallContext `json:"CallContext,omitempty" xml:"CallContext,omitempty" type:"Struct"`
	UserContext *UnmuteCallResponseBodyDataUserContext `json:"UserContext,omitempty" xml:"UserContext,omitempty" type:"Struct"`
}

func (s UnmuteCallResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UnmuteCallResponseBodyData) GoString() string {
	return s.String()
}

func (s *UnmuteCallResponseBodyData) SetCallContext(v *UnmuteCallResponseBodyDataCallContext) *UnmuteCallResponseBodyData {
	s.CallContext = v
	return s
}

func (s *UnmuteCallResponseBodyData) SetUserContext(v *UnmuteCallResponseBodyDataUserContext) *UnmuteCallResponseBodyData {
	s.UserContext = v
	return s
}

type UnmuteCallResponseBodyDataCallContext struct {
	// example:
	//
	// OUTBOUND
	CallType        *string                                                 `json:"CallType,omitempty" xml:"CallType,omitempty"`
	ChannelContexts []*UnmuteCallResponseBodyDataCallContextChannelContexts `json:"ChannelContexts,omitempty" xml:"ChannelContexts,omitempty" type:"Repeated"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s UnmuteCallResponseBodyDataCallContext) String() string {
	return tea.Prettify(s)
}

func (s UnmuteCallResponseBodyDataCallContext) GoString() string {
	return s.String()
}

func (s *UnmuteCallResponseBodyDataCallContext) SetCallType(v string) *UnmuteCallResponseBodyDataCallContext {
	s.CallType = &v
	return s
}

func (s *UnmuteCallResponseBodyDataCallContext) SetChannelContexts(v []*UnmuteCallResponseBodyDataCallContextChannelContexts) *UnmuteCallResponseBodyDataCallContext {
	s.ChannelContexts = v
	return s
}

func (s *UnmuteCallResponseBodyDataCallContext) SetInstanceId(v string) *UnmuteCallResponseBodyDataCallContext {
	s.InstanceId = &v
	return s
}

func (s *UnmuteCallResponseBodyDataCallContext) SetJobId(v string) *UnmuteCallResponseBodyDataCallContext {
	s.JobId = &v
	return s
}

type UnmuteCallResponseBodyDataCallContextChannelContexts struct {
	// example:
	//
	// OUTBOUND
	CallType *string `json:"CallType,omitempty" xml:"CallType,omitempty"`
	// example:
	//
	// MONITORING
	ChannelFlags *string `json:"ChannelFlags,omitempty" xml:"ChannelFlags,omitempty"`
	// example:
	//
	// ch:user:1390501****->8032****:1609138902226:job-6538214103685****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// CREATED
	ChannelState *string `json:"ChannelState,omitempty" xml:"ChannelState,omitempty"`
	// example:
	//
	// 1390501****
	Destination *string `json:"Destination,omitempty" xml:"Destination,omitempty"`
	// example:
	//
	// 1
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0830019****
	Originator *string `json:"Originator,omitempty" xml:"Originator,omitempty"`
	// example:
	//
	// 1390501****
	ReleaseInitiator *string `json:"ReleaseInitiator,omitempty" xml:"ReleaseInitiator,omitempty"`
	// example:
	//
	// 404 - No destination
	ReleaseReason *string `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	// example:
	//
	// skillgroup@ccc-test
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	// example:
	//
	// 1609138903315
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 8032****
	UserExtension *string `json:"UserExtension,omitempty" xml:"UserExtension,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s UnmuteCallResponseBodyDataCallContextChannelContexts) String() string {
	return tea.Prettify(s)
}

func (s UnmuteCallResponseBodyDataCallContextChannelContexts) GoString() string {
	return s.String()
}

func (s *UnmuteCallResponseBodyDataCallContextChannelContexts) SetCallType(v string) *UnmuteCallResponseBodyDataCallContextChannelContexts {
	s.CallType = &v
	return s
}

func (s *UnmuteCallResponseBodyDataCallContextChannelContexts) SetChannelFlags(v string) *UnmuteCallResponseBodyDataCallContextChannelContexts {
	s.ChannelFlags = &v
	return s
}

func (s *UnmuteCallResponseBodyDataCallContextChannelContexts) SetChannelId(v string) *UnmuteCallResponseBodyDataCallContextChannelContexts {
	s.ChannelId = &v
	return s
}

func (s *UnmuteCallResponseBodyDataCallContextChannelContexts) SetChannelState(v string) *UnmuteCallResponseBodyDataCallContextChannelContexts {
	s.ChannelState = &v
	return s
}

func (s *UnmuteCallResponseBodyDataCallContextChannelContexts) SetDestination(v string) *UnmuteCallResponseBodyDataCallContextChannelContexts {
	s.Destination = &v
	return s
}

func (s *UnmuteCallResponseBodyDataCallContextChannelContexts) SetIndex(v int32) *UnmuteCallResponseBodyDataCallContextChannelContexts {
	s.Index = &v
	return s
}

func (s *UnmuteCallResponseBodyDataCallContextChannelContexts) SetJobId(v string) *UnmuteCallResponseBodyDataCallContextChannelContexts {
	s.JobId = &v
	return s
}

func (s *UnmuteCallResponseBodyDataCallContextChannelContexts) SetOriginator(v string) *UnmuteCallResponseBodyDataCallContextChannelContexts {
	s.Originator = &v
	return s
}

func (s *UnmuteCallResponseBodyDataCallContextChannelContexts) SetReleaseInitiator(v string) *UnmuteCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseInitiator = &v
	return s
}

func (s *UnmuteCallResponseBodyDataCallContextChannelContexts) SetReleaseReason(v string) *UnmuteCallResponseBodyDataCallContextChannelContexts {
	s.ReleaseReason = &v
	return s
}

func (s *UnmuteCallResponseBodyDataCallContextChannelContexts) SetSkillGroupId(v string) *UnmuteCallResponseBodyDataCallContextChannelContexts {
	s.SkillGroupId = &v
	return s
}

func (s *UnmuteCallResponseBodyDataCallContextChannelContexts) SetTimestamp(v int64) *UnmuteCallResponseBodyDataCallContextChannelContexts {
	s.Timestamp = &v
	return s
}

func (s *UnmuteCallResponseBodyDataCallContextChannelContexts) SetUserExtension(v string) *UnmuteCallResponseBodyDataCallContextChannelContexts {
	s.UserExtension = &v
	return s
}

func (s *UnmuteCallResponseBodyDataCallContextChannelContexts) SetUserId(v string) *UnmuteCallResponseBodyDataCallContextChannelContexts {
	s.UserId = &v
	return s
}

type UnmuteCallResponseBodyDataUserContext struct {
	// example:
	//
	// Warm-up
	BreakCode *string `json:"BreakCode,omitempty" xml:"BreakCode,omitempty"`
	// example:
	//
	// ACC-YUNBS-1.0.10-****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// example:
	//
	// 8032****
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 1609136956378
	Heartbeat *int64 `json:"Heartbeat,omitempty" xml:"Heartbeat,omitempty"`
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// job-6538214103685****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 1324730****
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// example:
	//
	// false
	OutboundScenario       *bool     `json:"OutboundScenario,omitempty" xml:"OutboundScenario,omitempty"`
	SignedSkillGroupIdList []*string `json:"SignedSkillGroupIdList,omitempty" xml:"SignedSkillGroupIdList,omitempty" type:"Repeated"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// TALKING
	UserState *string `json:"UserState,omitempty" xml:"UserState,omitempty"`
	// example:
	//
	// ON_SITE
	WorkMode *string `json:"WorkMode,omitempty" xml:"WorkMode,omitempty"`
}

func (s UnmuteCallResponseBodyDataUserContext) String() string {
	return tea.Prettify(s)
}

func (s UnmuteCallResponseBodyDataUserContext) GoString() string {
	return s.String()
}

func (s *UnmuteCallResponseBodyDataUserContext) SetBreakCode(v string) *UnmuteCallResponseBodyDataUserContext {
	s.BreakCode = &v
	return s
}

func (s *UnmuteCallResponseBodyDataUserContext) SetDeviceId(v string) *UnmuteCallResponseBodyDataUserContext {
	s.DeviceId = &v
	return s
}

func (s *UnmuteCallResponseBodyDataUserContext) SetExtension(v string) *UnmuteCallResponseBodyDataUserContext {
	s.Extension = &v
	return s
}

func (s *UnmuteCallResponseBodyDataUserContext) SetHeartbeat(v int64) *UnmuteCallResponseBodyDataUserContext {
	s.Heartbeat = &v
	return s
}

func (s *UnmuteCallResponseBodyDataUserContext) SetInstanceId(v string) *UnmuteCallResponseBodyDataUserContext {
	s.InstanceId = &v
	return s
}

func (s *UnmuteCallResponseBodyDataUserContext) SetJobId(v string) *UnmuteCallResponseBodyDataUserContext {
	s.JobId = &v
	return s
}

func (s *UnmuteCallResponseBodyDataUserContext) SetMobile(v string) *UnmuteCallResponseBodyDataUserContext {
	s.Mobile = &v
	return s
}

func (s *UnmuteCallResponseBodyDataUserContext) SetOutboundScenario(v bool) *UnmuteCallResponseBodyDataUserContext {
	s.OutboundScenario = &v
	return s
}

func (s *UnmuteCallResponseBodyDataUserContext) SetSignedSkillGroupIdList(v []*string) *UnmuteCallResponseBodyDataUserContext {
	s.SignedSkillGroupIdList = v
	return s
}

func (s *UnmuteCallResponseBodyDataUserContext) SetUserId(v string) *UnmuteCallResponseBodyDataUserContext {
	s.UserId = &v
	return s
}

func (s *UnmuteCallResponseBodyDataUserContext) SetUserState(v string) *UnmuteCallResponseBodyDataUserContext {
	s.UserState = &v
	return s
}

func (s *UnmuteCallResponseBodyDataUserContext) SetWorkMode(v string) *UnmuteCallResponseBodyDataUserContext {
	s.WorkMode = &v
	return s
}

type UnmuteCallResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnmuteCallResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnmuteCallResponse) String() string {
	return tea.Prettify(s)
}

func (s UnmuteCallResponse) GoString() string {
	return s.String()
}

func (s *UnmuteCallResponse) SetHeaders(v map[string]*string) *UnmuteCallResponse {
	s.Headers = v
	return s
}

func (s *UnmuteCallResponse) SetStatusCode(v int32) *UnmuteCallResponse {
	s.StatusCode = &v
	return s
}

func (s *UnmuteCallResponse) SetBody(v *UnmuteCallResponseBody) *UnmuteCallResponse {
	s.Body = v
	return s
}

type UnregisterDeviceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// agent@ccc-test
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s UnregisterDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s UnregisterDeviceRequest) GoString() string {
	return s.String()
}

func (s *UnregisterDeviceRequest) SetInstanceId(v string) *UnregisterDeviceRequest {
	s.InstanceId = &v
	return s
}

func (s *UnregisterDeviceRequest) SetUserId(v string) *UnregisterDeviceRequest {
	s.UserId = &v
	return s
}

type UnregisterDeviceResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BA03159C-E808-4FF1-B27E-A61B6E888D7F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnregisterDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnregisterDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *UnregisterDeviceResponseBody) SetCode(v string) *UnregisterDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *UnregisterDeviceResponseBody) SetHttpStatusCode(v int32) *UnregisterDeviceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UnregisterDeviceResponseBody) SetMessage(v string) *UnregisterDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *UnregisterDeviceResponseBody) SetRequestId(v string) *UnregisterDeviceResponseBody {
	s.RequestId = &v
	return s
}

type UnregisterDeviceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnregisterDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnregisterDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s UnregisterDeviceResponse) GoString() string {
	return s.String()
}

func (s *UnregisterDeviceResponse) SetHeaders(v map[string]*string) *UnregisterDeviceResponse {
	s.Headers = v
	return s
}

func (s *UnregisterDeviceResponse) SetStatusCode(v int32) *UnregisterDeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *UnregisterDeviceResponse) SetBody(v *UnregisterDeviceResponseBody) *UnregisterDeviceResponse {
	s.Body = v
	return s
}

type UpdateCampaignRequest struct {
	// example:
	//
	// [
	//
	//       {
	//
	//             "beginTime": "09:00:00",
	//
	//             "endTime": "12:00:00"
	//
	//       }
	//
	// ]
	CallableTime *string `json:"CallableTime,omitempty" xml:"CallableTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ab11908b-6ebc-4b0c-b51e-3e17c7060
	CampaignId *string `json:"CampaignId,omitempty" xml:"CampaignId,omitempty"`
	// example:
	//
	// 3a310f56-4d30-4081-ba24-5d87a3b7262e
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	// example:
	//
	// 1689933600000
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1689901200000
	StartTime          *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StrategyParameters *string `json:"StrategyParameters,omitempty" xml:"StrategyParameters,omitempty"`
}

func (s UpdateCampaignRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCampaignRequest) GoString() string {
	return s.String()
}

func (s *UpdateCampaignRequest) SetCallableTime(v string) *UpdateCampaignRequest {
	s.CallableTime = &v
	return s
}

func (s *UpdateCampaignRequest) SetCampaignId(v string) *UpdateCampaignRequest {
	s.CampaignId = &v
	return s
}

func (s *UpdateCampaignRequest) SetContactFlowId(v string) *UpdateCampaignRequest {
	s.ContactFlowId = &v
	return s
}

func (s *UpdateCampaignRequest) SetEndTime(v string) *UpdateCampaignRequest {
	s.EndTime = &v
	return s
}

func (s *UpdateCampaignRequest) SetInstanceId(v string) *UpdateCampaignRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateCampaignRequest) SetName(v string) *UpdateCampaignRequest {
	s.Name = &v
	return s
}

func (s *UpdateCampaignRequest) SetStartTime(v string) *UpdateCampaignRequest {
	s.StartTime = &v
	return s
}

func (s *UpdateCampaignRequest) SetStrategyParameters(v string) *UpdateCampaignRequest {
	s.StrategyParameters = &v
	return s
}

type UpdateCampaignResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int64  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// BC976D32-AC4C-4E0F-8AA9-F4BC6C4E2B3E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateCampaignResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCampaignResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCampaignResponseBody) SetCode(v string) *UpdateCampaignResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateCampaignResponseBody) SetHttpStatusCode(v int64) *UpdateCampaignResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateCampaignResponseBody) SetMessage(v string) *UpdateCampaignResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateCampaignResponseBody) SetRequestId(v string) *UpdateCampaignResponseBody {
	s.RequestId = &v
	return s
}

type UpdateCampaignResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateCampaignResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateCampaignResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCampaignResponse) GoString() string {
	return s.String()
}

func (s *UpdateCampaignResponse) SetHeaders(v map[string]*string) *UpdateCampaignResponse {
	s.Headers = v
	return s
}

func (s *UpdateCampaignResponse) SetStatusCode(v int32) *UpdateCampaignResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCampaignResponse) SetBody(v *UpdateCampaignResponseBody) *UpdateCampaignResponse {
	s.Body = v
	return s
}

type UpdateConfigItemsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// [{"name":"ShowCalledID","value":"-1"},{"name":"ShowCalleeID","value":"1"},{"name":"AllowHangup","value":"0"},{"name":"AutoAnswerCall","value":"-1"},{"name":"AllowAudioDownload","value":"1"},{"name":"AllowChooseSignedSkillGroup","value":"1"}]
	ConfigItems *string `json:"ConfigItems,omitempty" xml:"ConfigItems,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	ObjectId *string `json:"ObjectId,omitempty" xml:"ObjectId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// INSTANCE
	ObjectType *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
}

func (s UpdateConfigItemsRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigItemsRequest) GoString() string {
	return s.String()
}

func (s *UpdateConfigItemsRequest) SetConfigItems(v string) *UpdateConfigItemsRequest {
	s.ConfigItems = &v
	return s
}

func (s *UpdateConfigItemsRequest) SetInstanceId(v string) *UpdateConfigItemsRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateConfigItemsRequest) SetObjectId(v string) *UpdateConfigItemsRequest {
	s.ObjectId = &v
	return s
}

func (s *UpdateConfigItemsRequest) SetObjectType(v string) *UpdateConfigItemsRequest {
	s.ObjectType = &v
	return s
}

type UpdateConfigItemsResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 8E7Y5B39-3E24-4A04-81E6-6C4F5B39DF75
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateConfigItemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigItemsResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateConfigItemsResponseBody) SetCode(v string) *UpdateConfigItemsResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateConfigItemsResponseBody) SetHttpStatusCode(v int32) *UpdateConfigItemsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateConfigItemsResponseBody) SetMessage(v string) *UpdateConfigItemsResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateConfigItemsResponseBody) SetParams(v []*string) *UpdateConfigItemsResponseBody {
	s.Params = v
	return s
}

func (s *UpdateConfigItemsResponseBody) SetRequestId(v string) *UpdateConfigItemsResponseBody {
	s.RequestId = &v
	return s
}

type UpdateConfigItemsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateConfigItemsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateConfigItemsResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigItemsResponse) GoString() string {
	return s.String()
}

func (s *UpdateConfigItemsResponse) SetHeaders(v map[string]*string) *UpdateConfigItemsResponse {
	s.Headers = v
	return s
}

func (s *UpdateConfigItemsResponse) SetStatusCode(v int32) *UpdateConfigItemsResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateConfigItemsResponse) SetBody(v *UpdateConfigItemsResponseBody) *UpdateConfigItemsResponse {
	s.Body = v
	return s
}

type UpdateSchemaPropertyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// b0eb2742-f37e-4c67-82d4-25c651c1xxxx
	InstanceId *string                              `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Property   *UpdateSchemaPropertyRequestProperty `json:"Property,omitempty" xml:"Property,omitempty" type:"Struct"`
	// example:
	//
	// BC976D32-AC4C-4E0F-8AA9-F4BC6C4E2B3E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// schema id
	//
	// This parameter is required.
	//
	// example:
	//
	// profile
	SchemaId *string `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s UpdateSchemaPropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSchemaPropertyRequest) GoString() string {
	return s.String()
}

func (s *UpdateSchemaPropertyRequest) SetInstanceId(v string) *UpdateSchemaPropertyRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateSchemaPropertyRequest) SetProperty(v *UpdateSchemaPropertyRequestProperty) *UpdateSchemaPropertyRequest {
	s.Property = v
	return s
}

func (s *UpdateSchemaPropertyRequest) SetRequestId(v string) *UpdateSchemaPropertyRequest {
	s.RequestId = &v
	return s
}

func (s *UpdateSchemaPropertyRequest) SetSchemaId(v string) *UpdateSchemaPropertyRequest {
	s.SchemaId = &v
	return s
}

type UpdateSchemaPropertyRequestProperty struct {
	// example:
	//
	// false
	Array *bool `json:"Array,omitempty" xml:"Array,omitempty"`
	// example:
	//
	// {\\"instanceId\\":\\"4cc3f160-ca64-49ff-bc70-390a044a4e83\\",\\"appId\\":\\"1684145288664\\",\\"commodityCode\\":\\"dide_pre\\",\\"dide_pre_set\\":\\"version_ent\\"}
	Attributes *string `json:"Attributes,omitempty" xml:"Attributes,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// string
	DataType *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	// example:
	//
	// -
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// true
	Disabled    *bool   `json:"Disabled,omitempty" xml:"Disabled,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// 10
	DisplayOrder *int32 `json:"DisplayOrder,omitempty" xml:"DisplayOrder,omitempty"`
	// example:
	//
	// textbox
	EditorType *string `json:"EditorType,omitempty" xml:"EditorType,omitempty"`
	// example:
	//
	// 100
	MaxLength *int32 `json:"MaxLength,omitempty" xml:"MaxLength,omitempty"`
	// example:
	//
	// 11
	Maximum *float64 `json:"Maximum,omitempty" xml:"Maximum,omitempty"`
	// example:
	//
	// 1
	MinLength *int32 `json:"MinLength,omitempty" xml:"MinLength,omitempty"`
	// example:
	//
	// 10800
	Minimum *float64 `json:"Minimum,omitempty" xml:"Minimum,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// (.*)
	Pattern             *string `json:"Pattern,omitempty" xml:"Pattern,omitempty"`
	PatternErrorMessage *string `json:"PatternErrorMessage,omitempty" xml:"PatternErrorMessage,omitempty"`
	// example:
	//
	// true
	ReadOnly *bool `json:"ReadOnly,omitempty" xml:"ReadOnly,omitempty"`
	// example:
	//
	// false
	Required *bool `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s UpdateSchemaPropertyRequestProperty) String() string {
	return tea.Prettify(s)
}

func (s UpdateSchemaPropertyRequestProperty) GoString() string {
	return s.String()
}

func (s *UpdateSchemaPropertyRequestProperty) SetArray(v bool) *UpdateSchemaPropertyRequestProperty {
	s.Array = &v
	return s
}

func (s *UpdateSchemaPropertyRequestProperty) SetAttributes(v string) *UpdateSchemaPropertyRequestProperty {
	s.Attributes = &v
	return s
}

func (s *UpdateSchemaPropertyRequestProperty) SetDataType(v string) *UpdateSchemaPropertyRequestProperty {
	s.DataType = &v
	return s
}

func (s *UpdateSchemaPropertyRequestProperty) SetDescription(v string) *UpdateSchemaPropertyRequestProperty {
	s.Description = &v
	return s
}

func (s *UpdateSchemaPropertyRequestProperty) SetDisabled(v bool) *UpdateSchemaPropertyRequestProperty {
	s.Disabled = &v
	return s
}

func (s *UpdateSchemaPropertyRequestProperty) SetDisplayName(v string) *UpdateSchemaPropertyRequestProperty {
	s.DisplayName = &v
	return s
}

func (s *UpdateSchemaPropertyRequestProperty) SetDisplayOrder(v int32) *UpdateSchemaPropertyRequestProperty {
	s.DisplayOrder = &v
	return s
}

func (s *UpdateSchemaPropertyRequestProperty) SetEditorType(v string) *UpdateSchemaPropertyRequestProperty {
	s.EditorType = &v
	return s
}

func (s *UpdateSchemaPropertyRequestProperty) SetMaxLength(v int32) *UpdateSchemaPropertyRequestProperty {
	s.MaxLength = &v
	return s
}

func (s *UpdateSchemaPropertyRequestProperty) SetMaximum(v float64) *UpdateSchemaPropertyRequestProperty {
	s.Maximum = &v
	return s
}

func (s *UpdateSchemaPropertyRequestProperty) SetMinLength(v int32) *UpdateSchemaPropertyRequestProperty {
	s.MinLength = &v
	return s
}

func (s *UpdateSchemaPropertyRequestProperty) SetMinimum(v float64) *UpdateSchemaPropertyRequestProperty {
	s.Minimum = &v
	return s
}

func (s *UpdateSchemaPropertyRequestProperty) SetName(v string) *UpdateSchemaPropertyRequestProperty {
	s.Name = &v
	return s
}

func (s *UpdateSchemaPropertyRequestProperty) SetPattern(v string) *UpdateSchemaPropertyRequestProperty {
	s.Pattern = &v
	return s
}

func (s *UpdateSchemaPropertyRequestProperty) SetPatternErrorMessage(v string) *UpdateSchemaPropertyRequestProperty {
	s.PatternErrorMessage = &v
	return s
}

func (s *UpdateSchemaPropertyRequestProperty) SetReadOnly(v bool) *UpdateSchemaPropertyRequestProperty {
	s.ReadOnly = &v
	return s
}

func (s *UpdateSchemaPropertyRequestProperty) SetRequired(v bool) *UpdateSchemaPropertyRequestProperty {
	s.Required = &v
	return s
}

type UpdateSchemaPropertyShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// b0eb2742-f37e-4c67-82d4-25c651c1xxxx
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PropertyShrink *string `json:"Property,omitempty" xml:"Property,omitempty"`
	// example:
	//
	// BC976D32-AC4C-4E0F-8AA9-F4BC6C4E2B3E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// schema id
	//
	// This parameter is required.
	//
	// example:
	//
	// profile
	SchemaId *string `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s UpdateSchemaPropertyShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSchemaPropertyShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateSchemaPropertyShrinkRequest) SetInstanceId(v string) *UpdateSchemaPropertyShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateSchemaPropertyShrinkRequest) SetPropertyShrink(v string) *UpdateSchemaPropertyShrinkRequest {
	s.PropertyShrink = &v
	return s
}

func (s *UpdateSchemaPropertyShrinkRequest) SetRequestId(v string) *UpdateSchemaPropertyShrinkRequest {
	s.RequestId = &v
	return s
}

func (s *UpdateSchemaPropertyShrinkRequest) SetSchemaId(v string) *UpdateSchemaPropertyShrinkRequest {
	s.SchemaId = &v
	return s
}

type UpdateSchemaPropertyResponseBody struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// A450574A-337F-43E2-BC59-9C6594C994C6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateSchemaPropertyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSchemaPropertyResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSchemaPropertyResponseBody) SetCode(v string) *UpdateSchemaPropertyResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSchemaPropertyResponseBody) SetHttpStatusCode(v int32) *UpdateSchemaPropertyResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateSchemaPropertyResponseBody) SetMessage(v string) *UpdateSchemaPropertyResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSchemaPropertyResponseBody) SetParams(v []*string) *UpdateSchemaPropertyResponseBody {
	s.Params = v
	return s
}

func (s *UpdateSchemaPropertyResponseBody) SetRequestId(v string) *UpdateSchemaPropertyResponseBody {
	s.RequestId = &v
	return s
}

type UpdateSchemaPropertyResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateSchemaPropertyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateSchemaPropertyResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSchemaPropertyResponse) GoString() string {
	return s.String()
}

func (s *UpdateSchemaPropertyResponse) SetHeaders(v map[string]*string) *UpdateSchemaPropertyResponse {
	s.Headers = v
	return s
}

func (s *UpdateSchemaPropertyResponse) SetStatusCode(v int32) *UpdateSchemaPropertyResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSchemaPropertyResponse) SetBody(v *UpdateSchemaPropertyResponseBody) *UpdateSchemaPropertyResponse {
	s.Body = v
	return s
}

type UpdateTicketRequest struct {
	Context *string `json:"Context,omitempty" xml:"Context,omitempty"`
	// example:
	//
	// 51e155ce-***-****-b402-13c69597b920
	CustomerId *string `json:"CustomerId,omitempty" xml:"CustomerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5491d3b4-14ee-4341-b5f1-db2c78beddeb
	TicketId *string `json:"TicketId,omitempty" xml:"TicketId,omitempty"`
	Title    *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s UpdateTicketRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTicketRequest) GoString() string {
	return s.String()
}

func (s *UpdateTicketRequest) SetContext(v string) *UpdateTicketRequest {
	s.Context = &v
	return s
}

func (s *UpdateTicketRequest) SetCustomerId(v string) *UpdateTicketRequest {
	s.CustomerId = &v
	return s
}

func (s *UpdateTicketRequest) SetInstanceId(v string) *UpdateTicketRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateTicketRequest) SetTicketId(v string) *UpdateTicketRequest {
	s.TicketId = &v
	return s
}

func (s *UpdateTicketRequest) SetTitle(v string) *UpdateTicketRequest {
	s.Title = &v
	return s
}

type UpdateTicketResponseBody struct {
	// example:
	//
	// OK
	Code *string     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 7BEEA660-A45A-45E3-98CC-AFC65E715C23
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateTicketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTicketResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTicketResponseBody) SetCode(v string) *UpdateTicketResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateTicketResponseBody) SetData(v interface{}) *UpdateTicketResponseBody {
	s.Data = v
	return s
}

func (s *UpdateTicketResponseBody) SetHttpStatusCode(v int32) *UpdateTicketResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateTicketResponseBody) SetMessage(v string) *UpdateTicketResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateTicketResponseBody) SetParams(v []*string) *UpdateTicketResponseBody {
	s.Params = v
	return s
}

func (s *UpdateTicketResponseBody) SetRequestId(v string) *UpdateTicketResponseBody {
	s.RequestId = &v
	return s
}

type UpdateTicketResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateTicketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateTicketResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTicketResponse) GoString() string {
	return s.String()
}

func (s *UpdateTicketResponse) SetHeaders(v map[string]*string) *UpdateTicketResponse {
	s.Headers = v
	return s
}

func (s *UpdateTicketResponse) SetStatusCode(v int32) *UpdateTicketResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateTicketResponse) SetBody(v *UpdateTicketResponseBody) *UpdateTicketResponse {
	s.Body = v
	return s
}

type WithdrawTicketRequest struct {
	// This parameter is required.
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ccc-test
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5491d3b4-14ee-4341-b5f1-db2c78beddeb
	TicketId *string `json:"TicketId,omitempty" xml:"TicketId,omitempty"`
}

func (s WithdrawTicketRequest) String() string {
	return tea.Prettify(s)
}

func (s WithdrawTicketRequest) GoString() string {
	return s.String()
}

func (s *WithdrawTicketRequest) SetComment(v string) *WithdrawTicketRequest {
	s.Comment = &v
	return s
}

func (s *WithdrawTicketRequest) SetInstanceId(v string) *WithdrawTicketRequest {
	s.InstanceId = &v
	return s
}

func (s *WithdrawTicketRequest) SetTicketId(v string) *WithdrawTicketRequest {
	s.TicketId = &v
	return s
}

type WithdrawTicketResponseBody struct {
	// example:
	//
	// OK
	Code *string     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	Params         []*string `json:"Params,omitempty" xml:"Params,omitempty" type:"Repeated"`
	// example:
	//
	// 2778FA12-EDD6-42AA-9B15-AF855072E5E5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s WithdrawTicketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s WithdrawTicketResponseBody) GoString() string {
	return s.String()
}

func (s *WithdrawTicketResponseBody) SetCode(v string) *WithdrawTicketResponseBody {
	s.Code = &v
	return s
}

func (s *WithdrawTicketResponseBody) SetData(v interface{}) *WithdrawTicketResponseBody {
	s.Data = v
	return s
}

func (s *WithdrawTicketResponseBody) SetHttpStatusCode(v int32) *WithdrawTicketResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *WithdrawTicketResponseBody) SetMessage(v string) *WithdrawTicketResponseBody {
	s.Message = &v
	return s
}

func (s *WithdrawTicketResponseBody) SetParams(v []*string) *WithdrawTicketResponseBody {
	s.Params = v
	return s
}

func (s *WithdrawTicketResponseBody) SetRequestId(v string) *WithdrawTicketResponseBody {
	s.RequestId = &v
	return s
}

type WithdrawTicketResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WithdrawTicketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s WithdrawTicketResponse) String() string {
	return tea.Prettify(s)
}

func (s WithdrawTicketResponse) GoString() string {
	return s.String()
}

func (s *WithdrawTicketResponse) SetHeaders(v map[string]*string) *WithdrawTicketResponse {
	s.Headers = v
	return s
}

func (s *WithdrawTicketResponse) SetStatusCode(v int32) *WithdrawTicketResponse {
	s.StatusCode = &v
	return s
}

func (s *WithdrawTicketResponse) SetBody(v *WithdrawTicketResponseBody) *WithdrawTicketResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"ap-northeast-1":        tea.String("ccc.aliyuncs.com"),
		"ap-south-1":            tea.String("ccc.aliyuncs.com"),
		"ap-southeast-1":        tea.String("ccc.aliyuncs.com"),
		"ap-southeast-2":        tea.String("ccc.aliyuncs.com"),
		"ap-southeast-3":        tea.String("ccc.aliyuncs.com"),
		"ap-southeast-5":        tea.String("ccc.aliyuncs.com"),
		"cn-beijing":            tea.String("ccc.aliyuncs.com"),
		"cn-chengdu":            tea.String("ccc.aliyuncs.com"),
		"cn-hongkong":           tea.String("ccc.aliyuncs.com"),
		"cn-huhehaote":          tea.String("ccc.aliyuncs.com"),
		"cn-qingdao":            tea.String("ccc.aliyuncs.com"),
		"cn-shenzhen":           tea.String("ccc.aliyuncs.com"),
		"cn-zhangjiakou":        tea.String("ccc.aliyuncs.com"),
		"eu-central-1":          tea.String("ccc.aliyuncs.com"),
		"eu-west-1":             tea.String("ccc.aliyuncs.com"),
		"me-east-1":             tea.String("ccc.aliyuncs.com"),
		"us-east-1":             tea.String("ccc.aliyuncs.com"),
		"us-west-1":             tea.String("ccc.aliyuncs.com"),
		"cn-hangzhou-finance":   tea.String("ccc.aliyuncs.com"),
		"cn-shenzhen-finance-1": tea.String("ccc.aliyuncs.com"),
		"cn-shanghai-finance-1": tea.String("ccc.aliyuncs.com"),
		"cn-north-2-gov-1":      tea.String("ccc.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("ccc"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 废弃预测式外呼活动
//
// @param request - AbortCampaignRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AbortCampaignResponse
func (client *Client) AbortCampaignWithOptions(request *AbortCampaignRequest, runtime *util.RuntimeOptions) (_result *AbortCampaignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CampaignId)) {
		query["CampaignId"] = request.CampaignId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AbortCampaign"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AbortCampaignResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 废弃预测式外呼活动
//
// @param request - AbortCampaignRequest
//
// @return AbortCampaignResponse
func (client *Client) AbortCampaign(request *AbortCampaignRequest) (_result *AbortCampaignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AbortCampaignResponse{}
	_body, _err := client.AbortCampaignWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AcceptChatRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AcceptChatResponse
func (client *Client) AcceptChatWithOptions(request *AcceptChatRequest, runtime *util.RuntimeOptions) (_result *AcceptChatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AcceptChat"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AcceptChatResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AcceptChatRequest
//
// @return AcceptChatResponse
func (client *Client) AcceptChat(request *AcceptChatRequest) (_result *AcceptChatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AcceptChatResponse{}
	_body, _err := client.AcceptChatWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 编辑呼入控制号码
//
// @param request - AddBlacklistCallTaggingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddBlacklistCallTaggingResponse
func (client *Client) AddBlacklistCallTaggingWithOptions(request *AddBlacklistCallTaggingRequest, runtime *util.RuntimeOptions) (_result *AddBlacklistCallTaggingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Number)) {
		query["Number"] = request.Number
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddBlacklistCallTagging"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddBlacklistCallTaggingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 编辑呼入控制号码
//
// @param request - AddBlacklistCallTaggingRequest
//
// @return AddBlacklistCallTaggingResponse
func (client *Client) AddBlacklistCallTagging(request *AddBlacklistCallTaggingRequest) (_result *AddBlacklistCallTaggingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddBlacklistCallTaggingResponse{}
	_body, _err := client.AddBlacklistCallTaggingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 追加联系人
//
// @param tmpReq - AddCasesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCasesResponse
func (client *Client) AddCasesWithOptions(tmpReq *AddCasesRequest, runtime *util.RuntimeOptions) (_result *AddCasesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddCasesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CaseList)) {
		request.CaseListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CaseList, tea.String("CaseList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CampaignId)) {
		query["CampaignId"] = request.CampaignId
	}

	if !tea.BoolValue(util.IsUnset(request.CaseListShrink)) {
		query["CaseList"] = request.CaseListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddCases"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddCasesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 追加联系人
//
// @param request - AddCasesRequest
//
// @return AddCasesResponse
func (client *Client) AddCases(request *AddCasesRequest) (_result *AddCasesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCasesResponse{}
	_body, _err := client.AddCasesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddNumbersToSkillGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddNumbersToSkillGroupResponse
func (client *Client) AddNumbersToSkillGroupWithOptions(request *AddNumbersToSkillGroupRequest, runtime *util.RuntimeOptions) (_result *AddNumbersToSkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstNumberGroupIdList)) {
		query["InstNumberGroupIdList"] = request.InstNumberGroupIdList
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NumberList)) {
		query["NumberList"] = request.NumberList
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddNumbersToSkillGroup"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddNumbersToSkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddNumbersToSkillGroupRequest
//
// @return AddNumbersToSkillGroupResponse
func (client *Client) AddNumbersToSkillGroup(request *AddNumbersToSkillGroupRequest) (_result *AddNumbersToSkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddNumbersToSkillGroupResponse{}
	_body, _err := client.AddNumbersToSkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddPersonalNumbersToUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddPersonalNumbersToUserResponse
func (client *Client) AddPersonalNumbersToUserWithOptions(request *AddPersonalNumbersToUserRequest, runtime *util.RuntimeOptions) (_result *AddPersonalNumbersToUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NumberList)) {
		query["NumberList"] = request.NumberList
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddPersonalNumbersToUser"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddPersonalNumbersToUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddPersonalNumbersToUserRequest
//
// @return AddPersonalNumbersToUserResponse
func (client *Client) AddPersonalNumbersToUser(request *AddPersonalNumbersToUserRequest) (_result *AddPersonalNumbersToUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddPersonalNumbersToUserResponse{}
	_body, _err := client.AddPersonalNumbersToUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddPhoneNumberToSkillGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddPhoneNumberToSkillGroupsResponse
func (client *Client) AddPhoneNumberToSkillGroupsWithOptions(request *AddPhoneNumberToSkillGroupsRequest, runtime *util.RuntimeOptions) (_result *AddPhoneNumberToSkillGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Number)) {
		query["Number"] = request.Number
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupIdList)) {
		query["SkillGroupIdList"] = request.SkillGroupIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddPhoneNumberToSkillGroups"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddPhoneNumberToSkillGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddPhoneNumberToSkillGroupsRequest
//
// @return AddPhoneNumberToSkillGroupsResponse
func (client *Client) AddPhoneNumberToSkillGroups(request *AddPhoneNumberToSkillGroupsRequest) (_result *AddPhoneNumberToSkillGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddPhoneNumberToSkillGroupsResponse{}
	_body, _err := client.AddPhoneNumberToSkillGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddPhoneNumbersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddPhoneNumbersResponse
func (client *Client) AddPhoneNumbersWithOptions(request *AddPhoneNumbersRequest, runtime *util.RuntimeOptions) (_result *AddPhoneNumbersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NumberGroupId)) {
		query["NumberGroupId"] = request.NumberGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.NumberList)) {
		query["NumberList"] = request.NumberList
	}

	if !tea.BoolValue(util.IsUnset(request.Usage)) {
		query["Usage"] = request.Usage
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddPhoneNumbers"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddPhoneNumbersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddPhoneNumbersRequest
//
// @return AddPhoneNumbersResponse
func (client *Client) AddPhoneNumbers(request *AddPhoneNumbersRequest) (_result *AddPhoneNumbersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddPhoneNumbersResponse{}
	_body, _err := client.AddPhoneNumbersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - AddSchemaPropertyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddSchemaPropertyResponse
func (client *Client) AddSchemaPropertyWithOptions(tmpReq *AddSchemaPropertyRequest, runtime *util.RuntimeOptions) (_result *AddSchemaPropertyResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddSchemaPropertyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Property)) {
		request.PropertyShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Property, tea.String("Property"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PropertyShrink)) {
		body["Property"] = request.PropertyShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		body["RequestId"] = request.RequestId
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddSchemaProperty"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddSchemaPropertyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddSchemaPropertyRequest
//
// @return AddSchemaPropertyResponse
func (client *Client) AddSchemaProperty(request *AddSchemaPropertyRequest) (_result *AddSchemaPropertyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddSchemaPropertyResponse{}
	_body, _err := client.AddSchemaPropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddSkillGroupsToUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddSkillGroupsToUserResponse
func (client *Client) AddSkillGroupsToUserWithOptions(request *AddSkillGroupsToUserRequest, runtime *util.RuntimeOptions) (_result *AddSkillGroupsToUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillLevelList)) {
		query["SkillLevelList"] = request.SkillLevelList
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddSkillGroupsToUser"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddSkillGroupsToUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddSkillGroupsToUserRequest
//
// @return AddSkillGroupsToUserResponse
func (client *Client) AddSkillGroupsToUser(request *AddSkillGroupsToUserRequest) (_result *AddSkillGroupsToUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddSkillGroupsToUserResponse{}
	_body, _err := client.AddSkillGroupsToUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddTicketTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddTicketTaskResponse
func (client *Client) AddTicketTaskWithOptions(request *AddTicketTaskRequest, runtime *util.RuntimeOptions) (_result *AddTicketTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Assignee)) {
		query["Assignee"] = request.Assignee
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Position)) {
		query["Position"] = request.Position
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TicketId)) {
		query["TicketId"] = request.TicketId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddTicketTask"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddTicketTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddTicketTaskRequest
//
// @return AddTicketTaskResponse
func (client *Client) AddTicketTask(request *AddTicketTaskRequest) (_result *AddTicketTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTicketTaskResponse{}
	_body, _err := client.AddTicketTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddUsersToSkillGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddUsersToSkillGroupResponse
func (client *Client) AddUsersToSkillGroupWithOptions(request *AddUsersToSkillGroupRequest, runtime *util.RuntimeOptions) (_result *AddUsersToSkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserSkillLevelList)) {
		query["UserSkillLevelList"] = request.UserSkillLevelList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddUsersToSkillGroup"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddUsersToSkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddUsersToSkillGroupRequest
//
// @return AddUsersToSkillGroupResponse
func (client *Client) AddUsersToSkillGroup(request *AddUsersToSkillGroupRequest) (_result *AddUsersToSkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddUsersToSkillGroupResponse{}
	_body, _err := client.AddUsersToSkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AnalyzeConversationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AnalyzeConversationResponse
func (client *Client) AnalyzeConversationWithOptions(request *AnalyzeConversationRequest, runtime *util.RuntimeOptions) (_result *AnalyzeConversationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.FieldListJson)) {
		query["FieldListJson"] = request.FieldListJson
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskListJson)) {
		query["TaskListJson"] = request.TaskListJson
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AnalyzeConversation"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AnalyzeConversationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AnalyzeConversationRequest
//
// @return AnalyzeConversationResponse
func (client *Client) AnalyzeConversation(request *AnalyzeConversationRequest) (_result *AnalyzeConversationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AnalyzeConversationResponse{}
	_body, _err := client.AnalyzeConversationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AnswerCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AnswerCallResponse
func (client *Client) AnswerCallWithOptions(request *AnswerCallRequest, runtime *util.RuntimeOptions) (_result *AnswerCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AnswerCall"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AnswerCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AnswerCallRequest
//
// @return AnswerCallResponse
func (client *Client) AnswerCall(request *AnswerCallRequest) (_result *AnswerCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AnswerCallResponse{}
	_body, _err := client.AnswerCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 追加联系人
//
// @param tmpReq - AppendCasesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AppendCasesResponse
func (client *Client) AppendCasesWithOptions(tmpReq *AppendCasesRequest, runtime *util.RuntimeOptions) (_result *AppendCasesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AppendCasesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Body)) {
		request.BodyShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Body, tea.String("body"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CampaignId)) {
		query["CampaignId"] = request.CampaignId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BodyShrink)) {
		body["body"] = request.BodyShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AppendCases"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AppendCasesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 追加联系人
//
// @param request - AppendCasesRequest
//
// @return AppendCasesResponse
func (client *Client) AppendCases(request *AppendCasesRequest) (_result *AppendCasesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AppendCasesResponse{}
	_body, _err := client.AppendCasesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI AssignUsers is deprecated, please use CCC::2020-07-01::ImportRamUsers instead.
//
// @param request - AssignUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AssignUsersResponse
// Deprecated
func (client *Client) AssignUsersWithOptions(request *AssignUsersRequest, runtime *util.RuntimeOptions) (_result *AssignUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RamIdList)) {
		query["RamIdList"] = request.RamIdList
	}

	if !tea.BoolValue(util.IsUnset(request.RoleId)) {
		query["RoleId"] = request.RoleId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillLevelList)) {
		query["SkillLevelList"] = request.SkillLevelList
	}

	if !tea.BoolValue(util.IsUnset(request.WorkMode)) {
		query["WorkMode"] = request.WorkMode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AssignUsers"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AssignUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI AssignUsers is deprecated, please use CCC::2020-07-01::ImportRamUsers instead.
//
// @param request - AssignUsersRequest
//
// @return AssignUsersResponse
// Deprecated
func (client *Client) AssignUsers(request *AssignUsersRequest) (_result *AssignUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssignUsersResponse{}
	_body, _err := client.AssignUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BargeInCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BargeInCallResponse
func (client *Client) BargeInCallWithOptions(request *BargeInCallRequest, runtime *util.RuntimeOptions) (_result *BargeInCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BargedUserId)) {
		query["BargedUserId"] = request.BargedUserId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.TimeoutSeconds)) {
		query["TimeoutSeconds"] = request.TimeoutSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BargeInCall"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BargeInCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BargeInCallRequest
//
// @return BargeInCallResponse
func (client *Client) BargeInCall(request *BargeInCallRequest) (_result *BargeInCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BargeInCallResponse{}
	_body, _err := client.BargeInCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BlindTransferRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BlindTransferResponse
func (client *Client) BlindTransferWithOptions(request *BlindTransferRequest, runtime *util.RuntimeOptions) (_result *BlindTransferResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallPriority)) {
		query["CallPriority"] = request.CallPriority
	}

	if !tea.BoolValue(util.IsUnset(request.ContactFlowVariables)) {
		query["ContactFlowVariables"] = request.ContactFlowVariables
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.QueuingOverflowThreshold)) {
		query["QueuingOverflowThreshold"] = request.QueuingOverflowThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.QueuingTimeoutSeconds)) {
		query["QueuingTimeoutSeconds"] = request.QueuingTimeoutSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.RoutingType)) {
		query["RoutingType"] = request.RoutingType
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyName)) {
		query["StrategyName"] = request.StrategyName
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyParams)) {
		query["StrategyParams"] = request.StrategyParams
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.TimeoutSeconds)) {
		query["TimeoutSeconds"] = request.TimeoutSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.Transferee)) {
		query["Transferee"] = request.Transferee
	}

	if !tea.BoolValue(util.IsUnset(request.TransfereeType)) {
		query["TransfereeType"] = request.TransfereeType
	}

	if !tea.BoolValue(util.IsUnset(request.Transferor)) {
		query["Transferor"] = request.Transferor
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BlindTransfer"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BlindTransferResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BlindTransferRequest
//
// @return BlindTransferResponse
func (client *Client) BlindTransfer(request *BlindTransferRequest) (_result *BlindTransferResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BlindTransferResponse{}
	_body, _err := client.BlindTransferWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BridgeRtcCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BridgeRtcCallResponse
func (client *Client) BridgeRtcCallWithOptions(request *BridgeRtcCallRequest, runtime *util.RuntimeOptions) (_result *BridgeRtcCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Callee)) {
		query["Callee"] = request.Callee
	}

	if !tea.BoolValue(util.IsUnset(request.Caller)) {
		query["Caller"] = request.Caller
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceProvider)) {
		query["ServiceProvider"] = request.ServiceProvider
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.TimeoutSeconds)) {
		query["TimeoutSeconds"] = request.TimeoutSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.VideoEnabled)) {
		query["VideoEnabled"] = request.VideoEnabled
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BridgeRtcCall"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BridgeRtcCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BridgeRtcCallRequest
//
// @return BridgeRtcCallResponse
func (client *Client) BridgeRtcCall(request *BridgeRtcCallRequest) (_result *BridgeRtcCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BridgeRtcCallResponse{}
	_body, _err := client.BridgeRtcCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CancelAttendedTransferRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelAttendedTransferResponse
func (client *Client) CancelAttendedTransferWithOptions(request *CancelAttendedTransferRequest, runtime *util.RuntimeOptions) (_result *CancelAttendedTransferResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelAttendedTransfer"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelAttendedTransferResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CancelAttendedTransferRequest
//
// @return CancelAttendedTransferResponse
func (client *Client) CancelAttendedTransfer(request *CancelAttendedTransferRequest) (_result *CancelAttendedTransferResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelAttendedTransferResponse{}
	_body, _err := client.CancelAttendedTransferWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ChangeVisibilityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ChangeVisibilityResponse
func (client *Client) ChangeVisibilityWithOptions(request *ChangeVisibilityRequest, runtime *util.RuntimeOptions) (_result *ChangeVisibilityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Invisible)) {
		query["Invisible"] = request.Invisible
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ChangeVisibility"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ChangeVisibilityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ChangeVisibilityRequest
//
// @return ChangeVisibilityResponse
func (client *Client) ChangeVisibility(request *ChangeVisibilityRequest) (_result *ChangeVisibilityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ChangeVisibilityResponse{}
	_body, _err := client.ChangeVisibilityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ChangeWorkModeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ChangeWorkModeResponse
func (client *Client) ChangeWorkModeWithOptions(request *ChangeWorkModeRequest, runtime *util.RuntimeOptions) (_result *ChangeWorkModeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Mobile)) {
		query["Mobile"] = request.Mobile
	}

	if !tea.BoolValue(util.IsUnset(request.SignedSkillGroupIdList)) {
		query["SignedSkillGroupIdList"] = request.SignedSkillGroupIdList
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkMode)) {
		query["WorkMode"] = request.WorkMode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ChangeWorkMode"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ChangeWorkModeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ChangeWorkModeRequest
//
// @return ChangeWorkModeResponse
func (client *Client) ChangeWorkMode(request *ChangeWorkModeRequest) (_result *ChangeWorkModeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ChangeWorkModeResponse{}
	_body, _err := client.ChangeWorkModeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ClaimChatRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ClaimChatResponse
func (client *Client) ClaimChatWithOptions(request *ClaimChatRequest, runtime *util.RuntimeOptions) (_result *ClaimChatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ClaimChat"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ClaimChatResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ClaimChatRequest
//
// @return ClaimChatResponse
func (client *Client) ClaimChat(request *ClaimChatRequest) (_result *ClaimChatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ClaimChatResponse{}
	_body, _err := client.ClaimChatWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CoachCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CoachCallResponse
func (client *Client) CoachCallWithOptions(request *CoachCallRequest, runtime *util.RuntimeOptions) (_result *CoachCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CoachedUserId)) {
		query["CoachedUserId"] = request.CoachedUserId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.TimeoutSeconds)) {
		query["TimeoutSeconds"] = request.TimeoutSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CoachCall"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CoachCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CoachCallRequest
//
// @return CoachCallResponse
func (client *Client) CoachCall(request *CoachCallRequest) (_result *CoachCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CoachCallResponse{}
	_body, _err := client.CoachCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CommitContactFlowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CommitContactFlowResponse
func (client *Client) CommitContactFlowWithOptions(request *CommitContactFlowRequest, runtime *util.RuntimeOptions) (_result *CommitContactFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.Definition)) {
		query["Definition"] = request.Definition
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DraftId)) {
		query["DraftId"] = request.DraftId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CommitContactFlow"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CommitContactFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CommitContactFlowRequest
//
// @return CommitContactFlowResponse
func (client *Client) CommitContactFlow(request *CommitContactFlowRequest) (_result *CommitContactFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CommitContactFlowResponse{}
	_body, _err := client.CommitContactFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CompleteAttendedTransferRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CompleteAttendedTransferResponse
func (client *Client) CompleteAttendedTransferWithOptions(request *CompleteAttendedTransferRequest, runtime *util.RuntimeOptions) (_result *CompleteAttendedTransferResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CompleteAttendedTransfer"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CompleteAttendedTransferResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CompleteAttendedTransferRequest
//
// @return CompleteAttendedTransferResponse
func (client *Client) CompleteAttendedTransfer(request *CompleteAttendedTransferRequest) (_result *CompleteAttendedTransferResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CompleteAttendedTransferResponse{}
	_body, _err := client.CompleteAttendedTransferWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateAudioFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAudioFileResponse
func (client *Client) CreateAudioFileWithOptions(request *CreateAudioFileRequest, runtime *util.RuntimeOptions) (_result *CreateAudioFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AudioFileName)) {
		query["AudioFileName"] = request.AudioFileName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OssFileKey)) {
		query["OssFileKey"] = request.OssFileKey
	}

	if !tea.BoolValue(util.IsUnset(request.Usage)) {
		query["Usage"] = request.Usage
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAudioFile"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAudioFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateAudioFileRequest
//
// @return CreateAudioFileResponse
func (client *Client) CreateAudioFile(request *CreateAudioFileRequest) (_result *CreateAudioFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAudioFileResponse{}
	_body, _err := client.CreateAudioFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量创建号码标签
//
// @param request - CreateCallTagsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCallTagsResponse
func (client *Client) CreateCallTagsWithOptions(request *CreateCallTagsRequest, runtime *util.RuntimeOptions) (_result *CreateCallTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallTagNameList)) {
		query["CallTagNameList"] = request.CallTagNameList
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCallTags"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCallTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量创建号码标签
//
// @param request - CreateCallTagsRequest
//
// @return CreateCallTagsResponse
func (client *Client) CreateCallTags(request *CreateCallTagsRequest) (_result *CreateCallTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCallTagsResponse{}
	_body, _err := client.CreateCallTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建预测式外呼活动
//
// @param tmpReq - CreateCampaignRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCampaignResponse
func (client *Client) CreateCampaignWithOptions(tmpReq *CreateCampaignRequest, runtime *util.RuntimeOptions) (_result *CreateCampaignResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateCampaignShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CaseList)) {
		request.CaseListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CaseList, tea.String("CaseList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallableTime)) {
		query["CallableTime"] = request.CallableTime
	}

	if !tea.BoolValue(util.IsUnset(request.CaseFileKey)) {
		query["CaseFileKey"] = request.CaseFileKey
	}

	if !tea.BoolValue(util.IsUnset(request.CaseListShrink)) {
		query["CaseList"] = request.CaseListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ExecutingUntilTimeout)) {
		query["ExecutingUntilTimeout"] = request.ExecutingUntilTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxAttemptCount)) {
		query["MaxAttemptCount"] = request.MaxAttemptCount
	}

	if !tea.BoolValue(util.IsUnset(request.MinAttemptInterval)) {
		query["MinAttemptInterval"] = request.MinAttemptInterval
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.QueueId)) {
		query["QueueId"] = request.QueueId
	}

	if !tea.BoolValue(util.IsUnset(request.Simulation)) {
		query["Simulation"] = request.Simulation
	}

	if !tea.BoolValue(util.IsUnset(request.SimulationParameters)) {
		query["SimulationParameters"] = request.SimulationParameters
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyParameters)) {
		query["StrategyParameters"] = request.StrategyParameters
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyType)) {
		query["StrategyType"] = request.StrategyType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCampaign"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCampaignResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建预测式外呼活动
//
// @param request - CreateCampaignRequest
//
// @return CreateCampaignResponse
func (client *Client) CreateCampaign(request *CreateCampaignRequest) (_result *CreateCampaignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCampaignResponse{}
	_body, _err := client.CreateCampaignWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateContactFlowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateContactFlowResponse
func (client *Client) CreateContactFlowWithOptions(request *CreateContactFlowRequest, runtime *util.RuntimeOptions) (_result *CreateContactFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Definition)) {
		query["Definition"] = request.Definition
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateContactFlow"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateContactFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateContactFlowRequest
//
// @return CreateContactFlowResponse
func (client *Client) CreateContactFlow(request *CreateContactFlowRequest) (_result *CreateContactFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateContactFlowResponse{}
	_body, _err := client.CreateContactFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI CreateCustomCallTagging is deprecated, please use CCC::2020-07-01::CreateCustomCallTaggings instead.
//
// Summary:
//
// 创建呼入控制号码
//
// @param request - CreateCustomCallTaggingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCustomCallTaggingResponse
// Deprecated
func (client *Client) CreateCustomCallTaggingWithOptions(request *CreateCustomCallTaggingRequest, runtime *util.RuntimeOptions) (_result *CreateCustomCallTaggingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomNumberList)) {
		query["CustomNumberList"] = request.CustomNumberList
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCustomCallTagging"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCustomCallTaggingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI CreateCustomCallTagging is deprecated, please use CCC::2020-07-01::CreateCustomCallTaggings instead.
//
// Summary:
//
// 创建呼入控制号码
//
// @param request - CreateCustomCallTaggingRequest
//
// @return CreateCustomCallTaggingResponse
// Deprecated
func (client *Client) CreateCustomCallTagging(request *CreateCustomCallTaggingRequest) (_result *CreateCustomCallTaggingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCustomCallTaggingResponse{}
	_body, _err := client.CreateCustomCallTaggingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateInstanceResponse
func (client *Client) CreateInstanceWithOptions(request *CreateInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdminRamIdList)) {
		query["AdminRamIdList"] = request.AdminRamIdList
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NumberList)) {
		query["NumberList"] = request.NumberList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateInstance"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateInstanceRequest
//
// @return CreateInstanceResponse
func (client *Client) CreateInstance(request *CreateInstanceRequest) (_result *CreateInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CreateInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - CreateSchemaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSchemaResponse
func (client *Client) CreateSchemaWithOptions(tmpReq *CreateSchemaRequest, runtime *util.RuntimeOptions) (_result *CreateSchemaResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateSchemaShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Properties)) {
		request.PropertiesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Properties, tea.String("Properties"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PropertiesShrink)) {
		body["Properties"] = request.PropertiesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		body["RequestId"] = request.RequestId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSchema"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSchemaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateSchemaRequest
//
// @return CreateSchemaResponse
func (client *Client) CreateSchema(request *CreateSchemaRequest) (_result *CreateSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSchemaResponse{}
	_body, _err := client.CreateSchemaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateSkillGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSkillGroupResponse
func (client *Client) CreateSkillGroupWithOptions(request *CreateSkillGroupRequest, runtime *util.RuntimeOptions) (_result *CreateSkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DisplayName)) {
		query["DisplayName"] = request.DisplayName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSkillGroup"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateSkillGroupRequest
//
// @return CreateSkillGroupResponse
func (client *Client) CreateSkillGroup(request *CreateSkillGroupRequest) (_result *CreateSkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSkillGroupResponse{}
	_body, _err := client.CreateSkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateTicketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateTicketResponse
func (client *Client) CreateTicketWithOptions(request *CreateTicketRequest, runtime *util.RuntimeOptions) (_result *CreateTicketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.Context)) {
		query["Context"] = request.Context
	}

	if !tea.BoolValue(util.IsUnset(request.CustomerId)) {
		query["CustomerId"] = request.CustomerId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTicket"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTicketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateTicketRequest
//
// @return CreateTicketResponse
func (client *Client) CreateTicket(request *CreateTicketRequest) (_result *CreateTicketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTicketResponse{}
	_body, _err := client.CreateTicketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateUserResponse
func (client *Client) CreateUserWithOptions(request *CreateUserRequest, runtime *util.RuntimeOptions) (_result *CreateUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvatarUrl)) {
		query["AvatarUrl"] = request.AvatarUrl
	}

	if !tea.BoolValue(util.IsUnset(request.DisplayId)) {
		query["DisplayId"] = request.DisplayId
	}

	if !tea.BoolValue(util.IsUnset(request.DisplayName)) {
		query["DisplayName"] = request.DisplayName
	}

	if !tea.BoolValue(util.IsUnset(request.Email)) {
		query["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.LoginName)) {
		query["LoginName"] = request.LoginName
	}

	if !tea.BoolValue(util.IsUnset(request.Mobile)) {
		query["Mobile"] = request.Mobile
	}

	if !tea.BoolValue(util.IsUnset(request.Nickname)) {
		query["Nickname"] = request.Nickname
	}

	if !tea.BoolValue(util.IsUnset(request.ResetPassword)) {
		query["ResetPassword"] = request.ResetPassword
	}

	if !tea.BoolValue(util.IsUnset(request.RoleId)) {
		query["RoleId"] = request.RoleId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillLevelList)) {
		query["SkillLevelList"] = request.SkillLevelList
	}

	if !tea.BoolValue(util.IsUnset(request.WorkMode)) {
		query["WorkMode"] = request.WorkMode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUser"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateUserRequest
//
// @return CreateUserResponse
func (client *Client) CreateUser(request *CreateUserRequest) (_result *CreateUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUserResponse{}
	_body, _err := client.CreateUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteAudioFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAudioFileResponse
func (client *Client) DeleteAudioFileWithOptions(request *DeleteAudioFileRequest, runtime *util.RuntimeOptions) (_result *DeleteAudioFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AudioResourceId)) {
		query["AudioResourceId"] = request.AudioResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAudioFile"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAudioFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteAudioFileRequest
//
// @return DeleteAudioFileResponse
func (client *Client) DeleteAudioFile(request *DeleteAudioFileRequest) (_result *DeleteAudioFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAudioFileResponse{}
	_body, _err := client.DeleteAudioFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除号码标签
//
// @param request - DeleteCallTagRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCallTagResponse
func (client *Client) DeleteCallTagWithOptions(request *DeleteCallTagRequest, runtime *util.RuntimeOptions) (_result *DeleteCallTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TagName)) {
		query["TagName"] = request.TagName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCallTag"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCallTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除号码标签
//
// @param request - DeleteCallTagRequest
//
// @return DeleteCallTagResponse
func (client *Client) DeleteCallTag(request *DeleteCallTagRequest) (_result *DeleteCallTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCallTagResponse{}
	_body, _err := client.DeleteCallTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteContactFlowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteContactFlowResponse
func (client *Client) DeleteContactFlowWithOptions(request *DeleteContactFlowRequest, runtime *util.RuntimeOptions) (_result *DeleteContactFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteContactFlow"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteContactFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteContactFlowRequest
//
// @return DeleteContactFlowResponse
func (client *Client) DeleteContactFlow(request *DeleteContactFlowRequest) (_result *DeleteContactFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteContactFlowResponse{}
	_body, _err := client.DeleteContactFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除呼入控制号码
//
// @param request - DeleteCustomCallTaggingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCustomCallTaggingResponse
func (client *Client) DeleteCustomCallTaggingWithOptions(request *DeleteCustomCallTaggingRequest, runtime *util.RuntimeOptions) (_result *DeleteCustomCallTaggingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Number)) {
		query["Number"] = request.Number
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCustomCallTagging"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCustomCallTaggingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除呼入控制号码
//
// @param request - DeleteCustomCallTaggingRequest
//
// @return DeleteCustomCallTaggingResponse
func (client *Client) DeleteCustomCallTagging(request *DeleteCustomCallTaggingRequest) (_result *DeleteCustomCallTaggingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCustomCallTaggingResponse{}
	_body, _err := client.DeleteCustomCallTaggingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteDocumentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDocumentResponse
func (client *Client) DeleteDocumentWithOptions(request *DeleteDocumentRequest, runtime *util.RuntimeOptions) (_result *DeleteDocumentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocumentId)) {
		body["DocumentId"] = request.DocumentId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		body["RequestId"] = request.RequestId
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDocument"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDocumentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteDocumentRequest
//
// @return DeleteDocumentResponse
func (client *Client) DeleteDocument(request *DeleteDocumentRequest) (_result *DeleteDocumentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDocumentResponse{}
	_body, _err := client.DeleteDocumentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - DeleteDocumentsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDocumentsResponse
func (client *Client) DeleteDocumentsWithOptions(tmpReq *DeleteDocumentsRequest, runtime *util.RuntimeOptions) (_result *DeleteDocumentsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteDocumentsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DocumentIds)) {
		request.DocumentIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DocumentIds, tea.String("DocumentIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocumentIdsShrink)) {
		body["DocumentIds"] = request.DocumentIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		body["RequestId"] = request.RequestId
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDocuments"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDocumentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteDocumentsRequest
//
// @return DeleteDocumentsResponse
func (client *Client) DeleteDocuments(request *DeleteDocumentsRequest) (_result *DeleteDocumentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDocumentsResponse{}
	_body, _err := client.DeleteDocumentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteSchemaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSchemaResponse
func (client *Client) DeleteSchemaWithOptions(request *DeleteSchemaRequest, runtime *util.RuntimeOptions) (_result *DeleteSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		body["RequestId"] = request.RequestId
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSchema"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSchemaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteSchemaRequest
//
// @return DeleteSchemaResponse
func (client *Client) DeleteSchema(request *DeleteSchemaRequest) (_result *DeleteSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSchemaResponse{}
	_body, _err := client.DeleteSchemaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteSchemaPropertyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSchemaPropertyResponse
func (client *Client) DeleteSchemaPropertyWithOptions(request *DeleteSchemaPropertyRequest, runtime *util.RuntimeOptions) (_result *DeleteSchemaPropertyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PropertyName)) {
		body["PropertyName"] = request.PropertyName
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		body["RequestId"] = request.RequestId
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSchemaProperty"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSchemaPropertyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteSchemaPropertyRequest
//
// @return DeleteSchemaPropertyResponse
func (client *Client) DeleteSchemaProperty(request *DeleteSchemaPropertyRequest) (_result *DeleteSchemaPropertyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSchemaPropertyResponse{}
	_body, _err := client.DeleteSchemaPropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteSkillGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSkillGroupResponse
func (client *Client) DeleteSkillGroupWithOptions(request *DeleteSkillGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteSkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Force)) {
		query["Force"] = request.Force
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSkillGroup"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteSkillGroupRequest
//
// @return DeleteSkillGroupResponse
func (client *Client) DeleteSkillGroup(request *DeleteSkillGroupRequest) (_result *DeleteSkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSkillGroupResponse{}
	_body, _err := client.DeleteSkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteTicketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteTicketResponse
func (client *Client) DeleteTicketWithOptions(request *DeleteTicketRequest, runtime *util.RuntimeOptions) (_result *DeleteTicketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TicketId)) {
		query["TicketId"] = request.TicketId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTicket"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTicketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteTicketRequest
//
// @return DeleteTicketResponse
func (client *Client) DeleteTicket(request *DeleteTicketRequest) (_result *DeleteTicketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTicketResponse{}
	_body, _err := client.DeleteTicketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteTicketTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteTicketTemplateResponse
func (client *Client) DeleteTicketTemplateWithOptions(request *DeleteTicketTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteTicketTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTicketTemplate"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTicketTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteTicketTemplateRequest
//
// @return DeleteTicketTemplateResponse
func (client *Client) DeleteTicketTemplate(request *DeleteTicketTemplateRequest) (_result *DeleteTicketTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTicketTemplateResponse{}
	_body, _err := client.DeleteTicketTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DisableSchemaPropertyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableSchemaPropertyResponse
func (client *Client) DisableSchemaPropertyWithOptions(request *DisableSchemaPropertyRequest, runtime *util.RuntimeOptions) (_result *DisableSchemaPropertyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PropertyName)) {
		body["PropertyName"] = request.PropertyName
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		body["RequestId"] = request.RequestId
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableSchemaProperty"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableSchemaPropertyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DisableSchemaPropertyRequest
//
// @return DisableSchemaPropertyResponse
func (client *Client) DisableSchemaProperty(request *DisableSchemaPropertyRequest) (_result *DisableSchemaPropertyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableSchemaPropertyResponse{}
	_body, _err := client.DisableSchemaPropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DisableTicketTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableTicketTemplateResponse
func (client *Client) DisableTicketTemplateWithOptions(request *DisableTicketTemplateRequest, runtime *util.RuntimeOptions) (_result *DisableTicketTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableTicketTemplate"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableTicketTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DisableTicketTemplateRequest
//
// @return DisableTicketTemplateResponse
func (client *Client) DisableTicketTemplate(request *DisableTicketTemplateRequest) (_result *DisableTicketTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableTicketTemplateResponse{}
	_body, _err := client.DisableTicketTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DiscardEditingContactFlowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DiscardEditingContactFlowResponse
func (client *Client) DiscardEditingContactFlowWithOptions(request *DiscardEditingContactFlowRequest, runtime *util.RuntimeOptions) (_result *DiscardEditingContactFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.DraftId)) {
		query["DraftId"] = request.DraftId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DiscardEditingContactFlow"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DiscardEditingContactFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DiscardEditingContactFlowRequest
//
// @return DiscardEditingContactFlowResponse
func (client *Client) DiscardEditingContactFlow(request *DiscardEditingContactFlowRequest) (_result *DiscardEditingContactFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DiscardEditingContactFlowResponse{}
	_body, _err := client.DiscardEditingContactFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - EnableSchemaPropertyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableSchemaPropertyResponse
func (client *Client) EnableSchemaPropertyWithOptions(request *EnableSchemaPropertyRequest, runtime *util.RuntimeOptions) (_result *EnableSchemaPropertyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PropertyName)) {
		body["PropertyName"] = request.PropertyName
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		body["RequestId"] = request.RequestId
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableSchemaProperty"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableSchemaPropertyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - EnableSchemaPropertyRequest
//
// @return EnableSchemaPropertyResponse
func (client *Client) EnableSchemaProperty(request *EnableSchemaPropertyRequest) (_result *EnableSchemaPropertyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableSchemaPropertyResponse{}
	_body, _err := client.EnableSchemaPropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - EnableTicketTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableTicketTemplateResponse
func (client *Client) EnableTicketTemplateWithOptions(request *EnableTicketTemplateRequest, runtime *util.RuntimeOptions) (_result *EnableTicketTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableTicketTemplate"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableTicketTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - EnableTicketTemplateRequest
//
// @return EnableTicketTemplateResponse
func (client *Client) EnableTicketTemplate(request *EnableTicketTemplateRequest) (_result *EnableTicketTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableTicketTemplateResponse{}
	_body, _err := client.EnableTicketTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - EndConferenceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EndConferenceResponse
func (client *Client) EndConferenceWithOptions(request *EndConferenceRequest, runtime *util.RuntimeOptions) (_result *EndConferenceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EndConference"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EndConferenceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - EndConferenceRequest
//
// @return EndConferenceResponse
func (client *Client) EndConference(request *EndConferenceRequest) (_result *EndConferenceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EndConferenceResponse{}
	_body, _err := client.EndConferenceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI ExportCustomCallTagging is deprecated, please use CCC::2020-07-01::ExportCustomCallTaggings instead.
//
// Summary:
//
// 导出全部呼入号码标签
//
// @param request - ExportCustomCallTaggingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportCustomCallTaggingResponse
// Deprecated
func (client *Client) ExportCustomCallTaggingWithOptions(request *ExportCustomCallTaggingRequest, runtime *util.RuntimeOptions) (_result *ExportCustomCallTaggingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportCustomCallTagging"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportCustomCallTaggingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI ExportCustomCallTagging is deprecated, please use CCC::2020-07-01::ExportCustomCallTaggings instead.
//
// Summary:
//
// 导出全部呼入号码标签
//
// @param request - ExportCustomCallTaggingRequest
//
// @return ExportCustomCallTaggingResponse
// Deprecated
func (client *Client) ExportCustomCallTagging(request *ExportCustomCallTaggingRequest) (_result *ExportCustomCallTaggingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportCustomCallTaggingResponse{}
	_body, _err := client.ExportCustomCallTaggingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出黑名单号码
//
// @param request - ExportDoNotCallNumbersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportDoNotCallNumbersResponse
func (client *Client) ExportDoNotCallNumbersWithOptions(request *ExportDoNotCallNumbersRequest, runtime *util.RuntimeOptions) (_result *ExportDoNotCallNumbersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		query["Scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.SearchPattern)) {
		query["SearchPattern"] = request.SearchPattern
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportDoNotCallNumbers"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportDoNotCallNumbersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出黑名单号码
//
// @param request - ExportDoNotCallNumbersRequest
//
// @return ExportDoNotCallNumbersResponse
func (client *Client) ExportDoNotCallNumbers(request *ExportDoNotCallNumbersRequest) (_result *ExportDoNotCallNumbersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportDoNotCallNumbersResponse{}
	_body, _err := client.ExportDoNotCallNumbersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// GetAccessChannelOfStaging
//
// @param request - GetAccessChannelOfStagingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAccessChannelOfStagingResponse
func (client *Client) GetAccessChannelOfStagingWithOptions(request *GetAccessChannelOfStagingRequest, runtime *util.RuntimeOptions) (_result *GetAccessChannelOfStagingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAccessChannelOfStaging"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAccessChannelOfStagingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// GetAccessChannelOfStaging
//
// @param request - GetAccessChannelOfStagingRequest
//
// @return GetAccessChannelOfStagingResponse
func (client *Client) GetAccessChannelOfStaging(request *GetAccessChannelOfStagingRequest) (_result *GetAccessChannelOfStagingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAccessChannelOfStagingResponse{}
	_body, _err := client.GetAccessChannelOfStagingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取音频文件
//
// @param request - GetAudioFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAudioFileResponse
func (client *Client) GetAudioFileWithOptions(request *GetAudioFileRequest, runtime *util.RuntimeOptions) (_result *GetAudioFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AudioResourceId)) {
		query["AudioResourceId"] = request.AudioResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAudioFile"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAudioFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取音频文件
//
// @param request - GetAudioFileRequest
//
// @return GetAudioFileResponse
func (client *Client) GetAudioFile(request *GetAudioFileRequest) (_result *GetAudioFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAudioFileResponse{}
	_body, _err := client.GetAudioFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetAudioFileDownloadUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAudioFileDownloadUrlResponse
func (client *Client) GetAudioFileDownloadUrlWithOptions(request *GetAudioFileDownloadUrlRequest, runtime *util.RuntimeOptions) (_result *GetAudioFileDownloadUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AudioResourceId)) {
		query["AudioResourceId"] = request.AudioResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAudioFileDownloadUrl"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAudioFileDownloadUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetAudioFileDownloadUrlRequest
//
// @return GetAudioFileDownloadUrlResponse
func (client *Client) GetAudioFileDownloadUrl(request *GetAudioFileDownloadUrlRequest) (_result *GetAudioFileDownloadUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAudioFileDownloadUrlResponse{}
	_body, _err := client.GetAudioFileDownloadUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetAudioFileUploadParametersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAudioFileUploadParametersResponse
func (client *Client) GetAudioFileUploadParametersWithOptions(request *GetAudioFileUploadParametersRequest, runtime *util.RuntimeOptions) (_result *GetAudioFileUploadParametersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AudioFileName)) {
		query["AudioFileName"] = request.AudioFileName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAudioFileUploadParameters"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAudioFileUploadParametersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetAudioFileUploadParametersRequest
//
// @return GetAudioFileUploadParametersResponse
func (client *Client) GetAudioFileUploadParameters(request *GetAudioFileUploadParametersRequest) (_result *GetAudioFileUploadParametersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAudioFileUploadParametersResponse{}
	_body, _err := client.GetAudioFileUploadParametersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetCallDetailRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCallDetailRecordResponse
func (client *Client) GetCallDetailRecordWithOptions(request *GetCallDetailRecordRequest, runtime *util.RuntimeOptions) (_result *GetCallDetailRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCallDetailRecord"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCallDetailRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetCallDetailRecordRequest
//
// @return GetCallDetailRecordResponse
func (client *Client) GetCallDetailRecord(request *GetCallDetailRecordRequest) (_result *GetCallDetailRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCallDetailRecordResponse{}
	_body, _err := client.GetCallDetailRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取预测式外呼活动信息
//
// @param request - GetCampaignRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCampaignResponse
func (client *Client) GetCampaignWithOptions(request *GetCampaignRequest, runtime *util.RuntimeOptions) (_result *GetCampaignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CampaignId)) {
		query["CampaignId"] = request.CampaignId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCampaign"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCampaignResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取预测式外呼活动信息
//
// @param request - GetCampaignRequest
//
// @return GetCampaignResponse
func (client *Client) GetCampaign(request *GetCampaignRequest) (_result *GetCampaignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCampaignResponse{}
	_body, _err := client.GetCampaignWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetCaseFileUploadUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCaseFileUploadUrlResponse
func (client *Client) GetCaseFileUploadUrlWithOptions(request *GetCaseFileUploadUrlRequest, runtime *util.RuntimeOptions) (_result *GetCaseFileUploadUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCaseFileUploadUrl"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCaseFileUploadUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetCaseFileUploadUrlRequest
//
// @return GetCaseFileUploadUrlResponse
func (client *Client) GetCaseFileUploadUrl(request *GetCaseFileUploadUrlRequest) (_result *GetCaseFileUploadUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCaseFileUploadUrlResponse{}
	_body, _err := client.GetCaseFileUploadUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetContactFlowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetContactFlowResponse
func (client *Client) GetContactFlowWithOptions(request *GetContactFlowRequest, runtime *util.RuntimeOptions) (_result *GetContactFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.DraftId)) {
		query["DraftId"] = request.DraftId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetContactFlow"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetContactFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetContactFlowRequest
//
// @return GetContactFlowResponse
func (client *Client) GetContactFlow(request *GetContactFlowRequest) (_result *GetContactFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetContactFlowResponse{}
	_body, _err := client.GetContactFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取通话文本信息
//
// @param request - GetConversationDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetConversationDetailResponse
func (client *Client) GetConversationDetailWithOptions(request *GetConversationDetailRequest, runtime *util.RuntimeOptions) (_result *GetConversationDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetConversationDetail"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetConversationDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取通话文本信息
//
// @param request - GetConversationDetailRequest
//
// @return GetConversationDetailResponse
func (client *Client) GetConversationDetail(request *GetConversationDetailRequest) (_result *GetConversationDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetConversationDetailResponse{}
	_body, _err := client.GetConversationDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetDataChannelCredentialsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDataChannelCredentialsResponse
func (client *Client) GetDataChannelCredentialsWithOptions(request *GetDataChannelCredentialsRequest, runtime *util.RuntimeOptions) (_result *GetDataChannelCredentialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataChannelCredentials"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataChannelCredentialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetDataChannelCredentialsRequest
//
// @return GetDataChannelCredentialsResponse
func (client *Client) GetDataChannelCredentials(request *GetDataChannelCredentialsRequest) (_result *GetDataChannelCredentialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataChannelCredentialsResponse{}
	_body, _err := client.GetDataChannelCredentialsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取黑名单文件上传地址
//
// @param request - GetDoNotCallFileUploadParametersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDoNotCallFileUploadParametersResponse
func (client *Client) GetDoNotCallFileUploadParametersWithOptions(request *GetDoNotCallFileUploadParametersRequest, runtime *util.RuntimeOptions) (_result *GetDoNotCallFileUploadParametersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDoNotCallFileUploadParameters"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDoNotCallFileUploadParametersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取黑名单文件上传地址
//
// @param request - GetDoNotCallFileUploadParametersRequest
//
// @return GetDoNotCallFileUploadParametersResponse
func (client *Client) GetDoNotCallFileUploadParameters(request *GetDoNotCallFileUploadParametersRequest) (_result *GetDoNotCallFileUploadParametersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDoNotCallFileUploadParametersResponse{}
	_body, _err := client.GetDoNotCallFileUploadParametersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetDocumentUploadParametersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDocumentUploadParametersResponse
func (client *Client) GetDocumentUploadParametersWithOptions(request *GetDocumentUploadParametersRequest, runtime *util.RuntimeOptions) (_result *GetDocumentUploadParametersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		body["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		body["RequestId"] = request.RequestId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDocumentUploadParameters"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDocumentUploadParametersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetDocumentUploadParametersRequest
//
// @return GetDocumentUploadParametersResponse
func (client *Client) GetDocumentUploadParameters(request *GetDocumentUploadParametersRequest) (_result *GetDocumentUploadParametersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDocumentUploadParametersResponse{}
	_body, _err := client.GetDocumentUploadParametersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取早媒体音频
//
// @param request - GetEarlyMediaRecordingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetEarlyMediaRecordingResponse
func (client *Client) GetEarlyMediaRecordingWithOptions(request *GetEarlyMediaRecordingRequest, runtime *util.RuntimeOptions) (_result *GetEarlyMediaRecordingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEarlyMediaRecording"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEarlyMediaRecordingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取早媒体音频
//
// @param request - GetEarlyMediaRecordingRequest
//
// @return GetEarlyMediaRecordingResponse
func (client *Client) GetEarlyMediaRecording(request *GetEarlyMediaRecordingRequest) (_result *GetEarlyMediaRecordingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEarlyMediaRecordingResponse{}
	_body, _err := client.GetEarlyMediaRecordingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetHistoricalCallerReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHistoricalCallerReportResponse
func (client *Client) GetHistoricalCallerReportWithOptions(request *GetHistoricalCallerReportRequest, runtime *util.RuntimeOptions) (_result *GetHistoricalCallerReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallingNumber)) {
		query["CallingNumber"] = request.CallingNumber
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StopTime)) {
		query["StopTime"] = request.StopTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetHistoricalCallerReport"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetHistoricalCallerReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetHistoricalCallerReportRequest
//
// @return GetHistoricalCallerReportResponse
func (client *Client) GetHistoricalCallerReport(request *GetHistoricalCallerReportRequest) (_result *GetHistoricalCallerReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHistoricalCallerReportResponse{}
	_body, _err := client.GetHistoricalCallerReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取预测式外呼活动历史报表
//
// @param request - GetHistoricalCampaignReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHistoricalCampaignReportResponse
func (client *Client) GetHistoricalCampaignReportWithOptions(request *GetHistoricalCampaignReportRequest, runtime *util.RuntimeOptions) (_result *GetHistoricalCampaignReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetHistoricalCampaignReport"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetHistoricalCampaignReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取预测式外呼活动历史报表
//
// @param request - GetHistoricalCampaignReportRequest
//
// @return GetHistoricalCampaignReportResponse
func (client *Client) GetHistoricalCampaignReport(request *GetHistoricalCampaignReportRequest) (_result *GetHistoricalCampaignReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHistoricalCampaignReportResponse{}
	_body, _err := client.GetHistoricalCampaignReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetHistoricalInstanceReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHistoricalInstanceReportResponse
func (client *Client) GetHistoricalInstanceReportWithOptions(request *GetHistoricalInstanceReportRequest, runtime *util.RuntimeOptions) (_result *GetHistoricalInstanceReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetHistoricalInstanceReport"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetHistoricalInstanceReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetHistoricalInstanceReportRequest
//
// @return GetHistoricalInstanceReportResponse
func (client *Client) GetHistoricalInstanceReport(request *GetHistoricalInstanceReportRequest) (_result *GetHistoricalInstanceReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHistoricalInstanceReportResponse{}
	_body, _err := client.GetHistoricalInstanceReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInstanceResponse
func (client *Client) GetInstanceWithOptions(request *GetInstanceRequest, runtime *util.RuntimeOptions) (_result *GetInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstance"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetInstanceRequest
//
// @return GetInstanceResponse
func (client *Client) GetInstance(request *GetInstanceRequest) (_result *GetInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceResponse{}
	_body, _err := client.GetInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetInstanceTrendingReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInstanceTrendingReportResponse
func (client *Client) GetInstanceTrendingReportWithOptions(request *GetInstanceTrendingReportRequest, runtime *util.RuntimeOptions) (_result *GetInstanceTrendingReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceTrendingReport"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceTrendingReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetInstanceTrendingReportRequest
//
// @return GetInstanceTrendingReportResponse
func (client *Client) GetInstanceTrendingReport(request *GetInstanceTrendingReportRequest) (_result *GetInstanceTrendingReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceTrendingReportResponse{}
	_body, _err := client.GetInstanceTrendingReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetLoginDetailsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLoginDetailsResponse
func (client *Client) GetLoginDetailsWithOptions(request *GetLoginDetailsRequest, runtime *util.RuntimeOptions) (_result *GetLoginDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChatDeviceId)) {
		query["ChatDeviceId"] = request.ChatDeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLoginDetails"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLoginDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetLoginDetailsRequest
//
// @return GetLoginDetailsResponse
func (client *Client) GetLoginDetails(request *GetLoginDetailsRequest) (_result *GetLoginDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLoginDetailsResponse{}
	_body, _err := client.GetLoginDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetMonoRecordingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMonoRecordingResponse
func (client *Client) GetMonoRecordingWithOptions(request *GetMonoRecordingRequest, runtime *util.RuntimeOptions) (_result *GetMonoRecordingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.ExpireSeconds)) {
		query["ExpireSeconds"] = request.ExpireSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMonoRecording"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMonoRecordingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetMonoRecordingRequest
//
// @return GetMonoRecordingResponse
func (client *Client) GetMonoRecording(request *GetMonoRecordingRequest) (_result *GetMonoRecordingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMonoRecordingResponse{}
	_body, _err := client.GetMonoRecordingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetMultiChannelRecordingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMultiChannelRecordingResponse
func (client *Client) GetMultiChannelRecordingWithOptions(request *GetMultiChannelRecordingRequest, runtime *util.RuntimeOptions) (_result *GetMultiChannelRecordingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMultiChannelRecording"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMultiChannelRecordingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetMultiChannelRecordingRequest
//
// @return GetMultiChannelRecordingResponse
func (client *Client) GetMultiChannelRecording(request *GetMultiChannelRecordingRequest) (_result *GetMultiChannelRecordingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMultiChannelRecordingResponse{}
	_body, _err := client.GetMultiChannelRecordingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetNumberLocationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetNumberLocationResponse
func (client *Client) GetNumberLocationWithOptions(request *GetNumberLocationRequest, runtime *util.RuntimeOptions) (_result *GetNumberLocationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Number)) {
		query["Number"] = request.Number
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNumberLocation"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNumberLocationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetNumberLocationRequest
//
// @return GetNumberLocationResponse
func (client *Client) GetNumberLocation(request *GetNumberLocationRequest) (_result *GetNumberLocationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetNumberLocationResponse{}
	_body, _err := client.GetNumberLocationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取预测式外呼实时状态
//
// @param request - GetRealtimeCampaignStatsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRealtimeCampaignStatsResponse
func (client *Client) GetRealtimeCampaignStatsWithOptions(request *GetRealtimeCampaignStatsRequest, runtime *util.RuntimeOptions) (_result *GetRealtimeCampaignStatsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRealtimeCampaignStats"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRealtimeCampaignStatsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取预测式外呼实时状态
//
// @param request - GetRealtimeCampaignStatsRequest
//
// @return GetRealtimeCampaignStatsResponse
func (client *Client) GetRealtimeCampaignStats(request *GetRealtimeCampaignStatsRequest) (_result *GetRealtimeCampaignStatsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRealtimeCampaignStatsResponse{}
	_body, _err := client.GetRealtimeCampaignStatsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetRealtimeInstanceStatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRealtimeInstanceStatesResponse
func (client *Client) GetRealtimeInstanceStatesWithOptions(request *GetRealtimeInstanceStatesRequest, runtime *util.RuntimeOptions) (_result *GetRealtimeInstanceStatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRealtimeInstanceStates"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRealtimeInstanceStatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetRealtimeInstanceStatesRequest
//
// @return GetRealtimeInstanceStatesResponse
func (client *Client) GetRealtimeInstanceStates(request *GetRealtimeInstanceStatesRequest) (_result *GetRealtimeInstanceStatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRealtimeInstanceStatesResponse{}
	_body, _err := client.GetRealtimeInstanceStatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetSchemaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSchemaResponse
func (client *Client) GetSchemaWithOptions(request *GetSchemaRequest, runtime *util.RuntimeOptions) (_result *GetSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		body["RequestId"] = request.RequestId
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSchema"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSchemaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetSchemaRequest
//
// @return GetSchemaResponse
func (client *Client) GetSchema(request *GetSchemaRequest) (_result *GetSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSchemaResponse{}
	_body, _err := client.GetSchemaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询技能组
//
// @param request - GetSkillGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSkillGroupResponse
func (client *Client) GetSkillGroupWithOptions(request *GetSkillGroupRequest, runtime *util.RuntimeOptions) (_result *GetSkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSkillGroup"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询技能组
//
// @param request - GetSkillGroupRequest
//
// @return GetSkillGroupResponse
func (client *Client) GetSkillGroup(request *GetSkillGroupRequest) (_result *GetSkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSkillGroupResponse{}
	_body, _err := client.GetSkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetTicketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTicketResponse
func (client *Client) GetTicketWithOptions(request *GetTicketRequest, runtime *util.RuntimeOptions) (_result *GetTicketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TicketId)) {
		query["TicketId"] = request.TicketId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTicket"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTicketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetTicketRequest
//
// @return GetTicketResponse
func (client *Client) GetTicket(request *GetTicketRequest) (_result *GetTicketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTicketResponse{}
	_body, _err := client.GetTicketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetTicketSummaryReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTicketSummaryReportResponse
func (client *Client) GetTicketSummaryReportWithOptions(request *GetTicketSummaryReportRequest, runtime *util.RuntimeOptions) (_result *GetTicketSummaryReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Assignee)) {
		query["Assignee"] = request.Assignee
	}

	if !tea.BoolValue(util.IsUnset(request.AssigneeType)) {
		query["AssigneeType"] = request.AssigneeType
	}

	if !tea.BoolValue(util.IsUnset(request.CategoryId)) {
		query["CategoryId"] = request.CategoryId
	}

	if !tea.BoolValue(util.IsUnset(request.Creator)) {
		query["Creator"] = request.Creator
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Participant)) {
		query["Participant"] = request.Participant
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTicketSummaryReport"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTicketSummaryReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetTicketSummaryReportRequest
//
// @return GetTicketSummaryReportResponse
func (client *Client) GetTicketSummaryReport(request *GetTicketSummaryReportRequest) (_result *GetTicketSummaryReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTicketSummaryReportResponse{}
	_body, _err := client.GetTicketSummaryReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetTicketTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTicketTemplateResponse
func (client *Client) GetTicketTemplateWithOptions(request *GetTicketTemplateRequest, runtime *util.RuntimeOptions) (_result *GetTicketTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateVersion)) {
		query["TemplateVersion"] = request.TemplateVersion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTicketTemplate"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTicketTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetTicketTemplateRequest
//
// @return GetTicketTemplateResponse
func (client *Client) GetTicketTemplate(request *GetTicketTemplateRequest) (_result *GetTicketTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTicketTemplateResponse{}
	_body, _err := client.GetTicketTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetTurnCredentialsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTurnCredentialsResponse
func (client *Client) GetTurnCredentialsWithOptions(request *GetTurnCredentialsRequest, runtime *util.RuntimeOptions) (_result *GetTurnCredentialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTurnCredentials"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTurnCredentialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetTurnCredentialsRequest
//
// @return GetTurnCredentialsResponse
func (client *Client) GetTurnCredentials(request *GetTurnCredentialsRequest) (_result *GetTurnCredentialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTurnCredentialsResponse{}
	_body, _err := client.GetTurnCredentialsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetTurnServerListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTurnServerListResponse
func (client *Client) GetTurnServerListWithOptions(request *GetTurnServerListRequest, runtime *util.RuntimeOptions) (_result *GetTurnServerListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTurnServerList"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTurnServerListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetTurnServerListRequest
//
// @return GetTurnServerListResponse
func (client *Client) GetTurnServerList(request *GetTurnServerListRequest) (_result *GetTurnServerListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTurnServerListResponse{}
	_body, _err := client.GetTurnServerListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取质检参数
//
// @param request - GetUploadAudioDataParamsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetUploadAudioDataParamsResponse
func (client *Client) GetUploadAudioDataParamsWithOptions(request *GetUploadAudioDataParamsRequest, runtime *util.RuntimeOptions) (_result *GetUploadAudioDataParamsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUploadAudioDataParams"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUploadAudioDataParamsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取质检参数
//
// @param request - GetUploadAudioDataParamsRequest
//
// @return GetUploadAudioDataParamsResponse
func (client *Client) GetUploadAudioDataParams(request *GetUploadAudioDataParamsRequest) (_result *GetUploadAudioDataParamsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUploadAudioDataParamsResponse{}
	_body, _err := client.GetUploadAudioDataParamsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetUserResponse
func (client *Client) GetUserWithOptions(request *GetUserRequest, runtime *util.RuntimeOptions) (_result *GetUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Extension)) {
		query["Extension"] = request.Extension
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUser"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetUserRequest
//
// @return GetUserResponse
func (client *Client) GetUser(request *GetUserRequest) (_result *GetUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUserResponse{}
	_body, _err := client.GetUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取视频
//
// @param request - GetVideoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetVideoResponse
func (client *Client) GetVideoWithOptions(request *GetVideoRequest, runtime *util.RuntimeOptions) (_result *GetVideoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetVideo"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetVideoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取视频
//
// @param request - GetVideoRequest
//
// @return GetVideoResponse
func (client *Client) GetVideo(request *GetVideoRequest) (_result *GetVideoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetVideoResponse{}
	_body, _err := client.GetVideoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetVisitorLoginDetailsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetVisitorLoginDetailsResponse
func (client *Client) GetVisitorLoginDetailsWithOptions(request *GetVisitorLoginDetailsRequest, runtime *util.RuntimeOptions) (_result *GetVisitorLoginDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChatDeviceId)) {
		query["ChatDeviceId"] = request.ChatDeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	if !tea.BoolValue(util.IsUnset(request.VisitorId)) {
		query["VisitorId"] = request.VisitorId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetVisitorLoginDetails"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetVisitorLoginDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetVisitorLoginDetailsRequest
//
// @return GetVisitorLoginDetailsResponse
func (client *Client) GetVisitorLoginDetails(request *GetVisitorLoginDetailsRequest) (_result *GetVisitorLoginDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetVisitorLoginDetailsResponse{}
	_body, _err := client.GetVisitorLoginDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetVoicemailRecordingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetVoicemailRecordingResponse
func (client *Client) GetVoicemailRecordingWithOptions(request *GetVoicemailRecordingRequest, runtime *util.RuntimeOptions) (_result *GetVoicemailRecordingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetVoicemailRecording"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetVoicemailRecordingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetVoicemailRecordingRequest
//
// @return GetVoicemailRecordingResponse
func (client *Client) GetVoicemailRecording(request *GetVoicemailRecordingRequest) (_result *GetVoicemailRecordingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetVoicemailRecordingResponse{}
	_body, _err := client.GetVoicemailRecordingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - HoldCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return HoldCallResponse
func (client *Client) HoldCallWithOptions(request *HoldCallRequest, runtime *util.RuntimeOptions) (_result *HoldCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Music)) {
		query["Music"] = request.Music
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("HoldCall"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &HoldCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - HoldCallRequest
//
// @return HoldCallResponse
func (client *Client) HoldCall(request *HoldCallRequest) (_result *HoldCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &HoldCallResponse{}
	_body, _err := client.HoldCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ImportAdminsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportAdminsResponse
func (client *Client) ImportAdminsWithOptions(request *ImportAdminsRequest, runtime *util.RuntimeOptions) (_result *ImportAdminsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RamIdList)) {
		query["RamIdList"] = request.RamIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportAdmins"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportAdminsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ImportAdminsRequest
//
// @return ImportAdminsResponse
func (client *Client) ImportAdmins(request *ImportAdminsRequest) (_result *ImportAdminsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportAdminsResponse{}
	_body, _err := client.ImportAdminsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ImportCorpNumbersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportCorpNumbersResponse
func (client *Client) ImportCorpNumbersWithOptions(request *ImportCorpNumbersRequest, runtime *util.RuntimeOptions) (_result *ImportCorpNumbersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.City)) {
		query["City"] = request.City
	}

	if !tea.BoolValue(util.IsUnset(request.CorpName)) {
		query["CorpName"] = request.CorpName
	}

	if !tea.BoolValue(util.IsUnset(request.NumberList)) {
		query["NumberList"] = request.NumberList
	}

	if !tea.BoolValue(util.IsUnset(request.Provider)) {
		query["Provider"] = request.Provider
	}

	if !tea.BoolValue(util.IsUnset(request.Province)) {
		query["Province"] = request.Province
	}

	if !tea.BoolValue(util.IsUnset(request.TagList)) {
		query["TagList"] = request.TagList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportCorpNumbers"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportCorpNumbersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ImportCorpNumbersRequest
//
// @return ImportCorpNumbersResponse
func (client *Client) ImportCorpNumbers(request *ImportCorpNumbersRequest) (_result *ImportCorpNumbersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportCorpNumbersResponse{}
	_body, _err := client.ImportCorpNumbersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI ImportCustomCallTagging is deprecated, please use CCC::2020-07-01::ImportCustomCallTaggings instead.
//
// Summary:
//
// 文件导入呼入控制号码
//
// @param request - ImportCustomCallTaggingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportCustomCallTaggingResponse
// Deprecated
func (client *Client) ImportCustomCallTaggingWithOptions(request *ImportCustomCallTaggingRequest, runtime *util.RuntimeOptions) (_result *ImportCustomCallTaggingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		query["FilePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportCustomCallTagging"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportCustomCallTaggingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI ImportCustomCallTagging is deprecated, please use CCC::2020-07-01::ImportCustomCallTaggings instead.
//
// Summary:
//
// 文件导入呼入控制号码
//
// @param request - ImportCustomCallTaggingRequest
//
// @return ImportCustomCallTaggingResponse
// Deprecated
func (client *Client) ImportCustomCallTagging(request *ImportCustomCallTaggingRequest) (_result *ImportCustomCallTaggingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportCustomCallTaggingResponse{}
	_body, _err := client.ImportCustomCallTaggingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加黑名单号码
//
// @param request - ImportDoNotCallNumbersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportDoNotCallNumbersResponse
func (client *Client) ImportDoNotCallNumbersWithOptions(request *ImportDoNotCallNumbersRequest, runtime *util.RuntimeOptions) (_result *ImportDoNotCallNumbersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		query["FilePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NumberList)) {
		query["NumberList"] = request.NumberList
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportDoNotCallNumbers"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportDoNotCallNumbersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加黑名单号码
//
// @param request - ImportDoNotCallNumbersRequest
//
// @return ImportDoNotCallNumbersResponse
func (client *Client) ImportDoNotCallNumbers(request *ImportDoNotCallNumbersRequest) (_result *ImportDoNotCallNumbersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportDoNotCallNumbersResponse{}
	_body, _err := client.ImportDoNotCallNumbersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ImportDocumentsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportDocumentsResponse
func (client *Client) ImportDocumentsWithOptions(request *ImportDocumentsRequest, runtime *util.RuntimeOptions) (_result *ImportDocumentsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OssFileKey)) {
		body["OssFileKey"] = request.OssFileKey
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		body["RequestId"] = request.RequestId
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportDocuments"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportDocumentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ImportDocumentsRequest
//
// @return ImportDocumentsResponse
func (client *Client) ImportDocuments(request *ImportDocumentsRequest) (_result *ImportDocumentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportDocumentsResponse{}
	_body, _err := client.ImportDocumentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - InitiateAttendedTransferRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InitiateAttendedTransferResponse
func (client *Client) InitiateAttendedTransferWithOptions(request *InitiateAttendedTransferRequest, runtime *util.RuntimeOptions) (_result *InitiateAttendedTransferResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallPriority)) {
		query["CallPriority"] = request.CallPriority
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.QueuingOverflowThreshold)) {
		query["QueuingOverflowThreshold"] = request.QueuingOverflowThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.QueuingTimeoutSeconds)) {
		query["QueuingTimeoutSeconds"] = request.QueuingTimeoutSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.RoutingType)) {
		query["RoutingType"] = request.RoutingType
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyName)) {
		query["StrategyName"] = request.StrategyName
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyParams)) {
		query["StrategyParams"] = request.StrategyParams
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.TimeoutSeconds)) {
		query["TimeoutSeconds"] = request.TimeoutSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.Transferee)) {
		query["Transferee"] = request.Transferee
	}

	if !tea.BoolValue(util.IsUnset(request.TransfereeType)) {
		query["TransfereeType"] = request.TransfereeType
	}

	if !tea.BoolValue(util.IsUnset(request.Transferor)) {
		query["Transferor"] = request.Transferor
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InitiateAttendedTransfer"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InitiateAttendedTransferResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - InitiateAttendedTransferRequest
//
// @return InitiateAttendedTransferResponse
func (client *Client) InitiateAttendedTransfer(request *InitiateAttendedTransferRequest) (_result *InitiateAttendedTransferResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InitiateAttendedTransferResponse{}
	_body, _err := client.InitiateAttendedTransferWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - InterceptCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InterceptCallResponse
func (client *Client) InterceptCallWithOptions(request *InterceptCallRequest, runtime *util.RuntimeOptions) (_result *InterceptCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InterceptedUserId)) {
		query["InterceptedUserId"] = request.InterceptedUserId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.TimeoutSeconds)) {
		query["TimeoutSeconds"] = request.TimeoutSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InterceptCall"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InterceptCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - InterceptCallRequest
//
// @return InterceptCallResponse
func (client *Client) InterceptCall(request *InterceptCallRequest) (_result *InterceptCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InterceptCallResponse{}
	_body, _err := client.InterceptCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - LaunchAuthenticationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return LaunchAuthenticationResponse
func (client *Client) LaunchAuthenticationWithOptions(request *LaunchAuthenticationRequest, runtime *util.RuntimeOptions) (_result *LaunchAuthenticationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactFlowVariables)) {
		query["ContactFlowVariables"] = request.ContactFlowVariables
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("LaunchAuthentication"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &LaunchAuthenticationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - LaunchAuthenticationRequest
//
// @return LaunchAuthenticationResponse
func (client *Client) LaunchAuthentication(request *LaunchAuthenticationRequest) (_result *LaunchAuthenticationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &LaunchAuthenticationResponse{}
	_body, _err := client.LaunchAuthenticationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - LaunchSurveyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return LaunchSurveyResponse
func (client *Client) LaunchSurveyWithOptions(request *LaunchSurveyRequest, runtime *util.RuntimeOptions) (_result *LaunchSurveyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactFlowVariables)) {
		query["ContactFlowVariables"] = request.ContactFlowVariables
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.SmsMetadataId)) {
		query["SmsMetadataId"] = request.SmsMetadataId
	}

	if !tea.BoolValue(util.IsUnset(request.SurveyChannel)) {
		query["SurveyChannel"] = request.SurveyChannel
	}

	if !tea.BoolValue(util.IsUnset(request.SurveyTemplateId)) {
		query["SurveyTemplateId"] = request.SurveyTemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.SurveyTemplateVariables)) {
		query["SurveyTemplateVariables"] = request.SurveyTemplateVariables
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("LaunchSurvey"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &LaunchSurveyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - LaunchSurveyRequest
//
// @return LaunchSurveyResponse
func (client *Client) LaunchSurvey(request *LaunchSurveyRequest) (_result *LaunchSurveyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &LaunchSurveyResponse{}
	_body, _err := client.LaunchSurveyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListAgentStateLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAgentStateLogsResponse
func (client *Client) ListAgentStateLogsWithOptions(request *ListAgentStateLogsRequest, runtime *util.RuntimeOptions) (_result *ListAgentStateLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentId)) {
		query["AgentId"] = request.AgentId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAgentStateLogs"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAgentStateLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListAgentStateLogsRequest
//
// @return ListAgentStateLogsResponse
func (client *Client) ListAgentStateLogs(request *ListAgentStateLogsRequest) (_result *ListAgentStateLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAgentStateLogsResponse{}
	_body, _err := client.ListAgentStateLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI ListAgentStates is deprecated, please use CCC::2020-07-01::ListRealtimeAgentStates instead.
//
// Summary:
//
// ListAgentStates for ACC
//
// @param request - ListAgentStatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAgentStatesResponse
// Deprecated
func (client *Client) ListAgentStatesWithOptions(request *ListAgentStatesRequest, runtime *util.RuntimeOptions) (_result *ListAgentStatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentIds)) {
		query["AgentIds"] = request.AgentIds
	}

	if !tea.BoolValue(util.IsUnset(request.ExcludeOfflineUsers)) {
		query["ExcludeOfflineUsers"] = request.ExcludeOfflineUsers
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAgentStates"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAgentStatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI ListAgentStates is deprecated, please use CCC::2020-07-01::ListRealtimeAgentStates instead.
//
// Summary:
//
// ListAgentStates for ACC
//
// @param request - ListAgentStatesRequest
//
// @return ListAgentStatesResponse
// Deprecated
func (client *Client) ListAgentStates(request *ListAgentStatesRequest) (_result *ListAgentStatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAgentStatesResponse{}
	_body, _err := client.ListAgentStatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI ListAgentSummaryReportsSinceMidnight is deprecated, please use CCC::2020-07-01::ListHistoricalAgentReport instead.
//
// Summary:
//
// ListAgentSummaryReportsSinceMidnight for acc
//
// @param request - ListAgentSummaryReportsSinceMidnightRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAgentSummaryReportsSinceMidnightResponse
// Deprecated
func (client *Client) ListAgentSummaryReportsSinceMidnightWithOptions(request *ListAgentSummaryReportsSinceMidnightRequest, runtime *util.RuntimeOptions) (_result *ListAgentSummaryReportsSinceMidnightResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAgentSummaryReportsSinceMidnight"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAgentSummaryReportsSinceMidnightResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI ListAgentSummaryReportsSinceMidnight is deprecated, please use CCC::2020-07-01::ListHistoricalAgentReport instead.
//
// Summary:
//
// ListAgentSummaryReportsSinceMidnight for acc
//
// @param request - ListAgentSummaryReportsSinceMidnightRequest
//
// @return ListAgentSummaryReportsSinceMidnightResponse
// Deprecated
func (client *Client) ListAgentSummaryReportsSinceMidnight(request *ListAgentSummaryReportsSinceMidnightRequest) (_result *ListAgentSummaryReportsSinceMidnightResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAgentSummaryReportsSinceMidnightResponse{}
	_body, _err := client.ListAgentSummaryReportsSinceMidnightWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取预测式外呼呼叫记录
//
// @param request - ListAttemptsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAttemptsResponse
func (client *Client) ListAttemptsWithOptions(request *ListAttemptsRequest, runtime *util.RuntimeOptions) (_result *ListAttemptsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAttempts"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAttemptsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取预测式外呼呼叫记录
//
// @param request - ListAttemptsRequest
//
// @return ListAttemptsResponse
func (client *Client) ListAttempts(request *ListAttemptsRequest) (_result *ListAttemptsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAttemptsResponse{}
	_body, _err := client.ListAttemptsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取音频文件列表
//
// @param request - ListAudioFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAudioFilesResponse
func (client *Client) ListAudioFilesWithOptions(request *ListAudioFilesRequest, runtime *util.RuntimeOptions) (_result *ListAudioFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Usage)) {
		query["Usage"] = request.Usage
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAudioFiles"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAudioFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取音频文件列表
//
// @param request - ListAudioFilesRequest
//
// @return ListAudioFilesResponse
func (client *Client) ListAudioFiles(request *ListAudioFilesRequest) (_result *ListAudioFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAudioFilesResponse{}
	_body, _err := client.ListAudioFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 编辑呼入控制号码
//
// @param request - ListBlacklistCallTaggingsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListBlacklistCallTaggingsResponse
func (client *Client) ListBlacklistCallTaggingsWithOptions(request *ListBlacklistCallTaggingsRequest, runtime *util.RuntimeOptions) (_result *ListBlacklistCallTaggingsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NumberList)) {
		query["NumberList"] = request.NumberList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListBlacklistCallTaggings"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListBlacklistCallTaggingsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 编辑呼入控制号码
//
// @param request - ListBlacklistCallTaggingsRequest
//
// @return ListBlacklistCallTaggingsResponse
func (client *Client) ListBlacklistCallTaggings(request *ListBlacklistCallTaggingsRequest) (_result *ListBlacklistCallTaggingsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListBlacklistCallTaggingsResponse{}
	_body, _err := client.ListBlacklistCallTaggingsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListBriefSkillGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListBriefSkillGroupsResponse
func (client *Client) ListBriefSkillGroupsWithOptions(request *ListBriefSkillGroupsRequest, runtime *util.RuntimeOptions) (_result *ListBriefSkillGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchPattern)) {
		query["SearchPattern"] = request.SearchPattern
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListBriefSkillGroups"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListBriefSkillGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListBriefSkillGroupsRequest
//
// @return ListBriefSkillGroupsResponse
func (client *Client) ListBriefSkillGroups(request *ListBriefSkillGroupsRequest) (_result *ListBriefSkillGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListBriefSkillGroupsResponse{}
	_body, _err := client.ListBriefSkillGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListCallDetailRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCallDetailRecordsResponse
func (client *Client) ListCallDetailRecordsWithOptions(request *ListCallDetailRecordsRequest, runtime *util.RuntimeOptions) (_result *ListCallDetailRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentId)) {
		query["AgentId"] = request.AgentId
	}

	if !tea.BoolValue(util.IsUnset(request.CalledNumber)) {
		query["CalledNumber"] = request.CalledNumber
	}

	if !tea.BoolValue(util.IsUnset(request.CallingNumber)) {
		query["CallingNumber"] = request.CallingNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ContactDisposition)) {
		query["ContactDisposition"] = request.ContactDisposition
	}

	if !tea.BoolValue(util.IsUnset(request.ContactDispositionList)) {
		query["ContactDispositionList"] = request.ContactDispositionList
	}

	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactType)) {
		query["ContactType"] = request.ContactType
	}

	if !tea.BoolValue(util.IsUnset(request.ContactTypeList)) {
		query["ContactTypeList"] = request.ContactTypeList
	}

	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.EarlyMediaStateList)) {
		query["EarlyMediaStateList"] = request.EarlyMediaStateList
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderByField)) {
		query["OrderByField"] = request.OrderByField
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SatisfactionDescriptionList)) {
		query["SatisfactionDescriptionList"] = request.SatisfactionDescriptionList
	}

	if !tea.BoolValue(util.IsUnset(request.SatisfactionList)) {
		query["SatisfactionList"] = request.SatisfactionList
	}

	if !tea.BoolValue(util.IsUnset(request.SatisfactionSurveyChannel)) {
		query["SatisfactionSurveyChannel"] = request.SatisfactionSurveyChannel
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SortOrder)) {
		query["SortOrder"] = request.SortOrder
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCallDetailRecords"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCallDetailRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListCallDetailRecordsRequest
//
// @return ListCallDetailRecordsResponse
func (client *Client) ListCallDetailRecords(request *ListCallDetailRecordsRequest) (_result *ListCallDetailRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCallDetailRecordsResponse{}
	_body, _err := client.ListCallDetailRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 列出号码标签
//
// @param request - ListCallTagsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCallTagsResponse
func (client *Client) ListCallTagsWithOptions(request *ListCallTagsRequest, runtime *util.RuntimeOptions) (_result *ListCallTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCallTags"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCallTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 列出号码标签
//
// @param request - ListCallTagsRequest
//
// @return ListCallTagsResponse
func (client *Client) ListCallTags(request *ListCallTagsRequest) (_result *ListCallTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCallTagsResponse{}
	_body, _err := client.ListCallTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取预测式外呼活动趋势报表
//
// @param request - ListCampaignTrendingReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCampaignTrendingReportResponse
func (client *Client) ListCampaignTrendingReportWithOptions(request *ListCampaignTrendingReportRequest, runtime *util.RuntimeOptions) (_result *ListCampaignTrendingReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCampaignTrendingReport"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCampaignTrendingReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取预测式外呼活动趋势报表
//
// @param request - ListCampaignTrendingReportRequest
//
// @return ListCampaignTrendingReportResponse
func (client *Client) ListCampaignTrendingReport(request *ListCampaignTrendingReportRequest) (_result *ListCampaignTrendingReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCampaignTrendingReportResponse{}
	_body, _err := client.ListCampaignTrendingReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取预测式外呼活动列表
//
// @param request - ListCampaignsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCampaignsResponse
func (client *Client) ListCampaignsWithOptions(request *ListCampaignsRequest, runtime *util.RuntimeOptions) (_result *ListCampaignsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActualStartTimeFrom)) {
		query["ActualStartTimeFrom"] = request.ActualStartTimeFrom
	}

	if !tea.BoolValue(util.IsUnset(request.ActualStartTimeTo)) {
		query["ActualStartTimeTo"] = request.ActualStartTimeTo
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PlanedStartTimeFrom)) {
		query["PlanedStartTimeFrom"] = request.PlanedStartTimeFrom
	}

	if !tea.BoolValue(util.IsUnset(request.PlanedStartTimeTo)) {
		query["PlanedStartTimeTo"] = request.PlanedStartTimeTo
	}

	if !tea.BoolValue(util.IsUnset(request.QueueId)) {
		query["QueueId"] = request.QueueId
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCampaigns"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCampaignsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取预测式外呼活动列表
//
// @param request - ListCampaignsRequest
//
// @return ListCampaignsResponse
func (client *Client) ListCampaigns(request *ListCampaignsRequest) (_result *ListCampaignsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCampaignsResponse{}
	_body, _err := client.ListCampaignsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取预测式外呼活动的联系人呼叫详情
//
// @param request - ListCasesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCasesResponse
func (client *Client) ListCasesWithOptions(request *ListCasesRequest, runtime *util.RuntimeOptions) (_result *ListCasesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CampaignId)) {
		query["CampaignId"] = request.CampaignId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumber)) {
		query["PhoneNumber"] = request.PhoneNumber
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCases"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCasesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取预测式外呼活动的联系人呼叫详情
//
// @param request - ListCasesRequest
//
// @return ListCasesResponse
func (client *Client) ListCases(request *ListCasesRequest) (_result *ListCasesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCasesResponse{}
	_body, _err := client.ListCasesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListCategoriesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCategoriesResponse
func (client *Client) ListCategoriesWithOptions(request *ListCategoriesRequest, runtime *util.RuntimeOptions) (_result *ListCategoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CategoryId)) {
		query["CategoryId"] = request.CategoryId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCategories"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCategoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListCategoriesRequest
//
// @return ListCategoriesResponse
func (client *Client) ListCategories(request *ListCategoriesRequest) (_result *ListCategoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCategoriesResponse{}
	_body, _err := client.ListCategoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListCommonTicketFieldsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCommonTicketFieldsResponse
func (client *Client) ListCommonTicketFieldsWithOptions(request *ListCommonTicketFieldsRequest, runtime *util.RuntimeOptions) (_result *ListCommonTicketFieldsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCommonTicketFields"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCommonTicketFieldsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListCommonTicketFieldsRequest
//
// @return ListCommonTicketFieldsResponse
func (client *Client) ListCommonTicketFields(request *ListCommonTicketFieldsRequest) (_result *ListCommonTicketFieldsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCommonTicketFieldsResponse{}
	_body, _err := client.ListCommonTicketFieldsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListConfigItemsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListConfigItemsResponse
func (client *Client) ListConfigItemsWithOptions(request *ListConfigItemsRequest, runtime *util.RuntimeOptions) (_result *ListConfigItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ObjectId)) {
		query["ObjectId"] = request.ObjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ObjectType)) {
		query["ObjectType"] = request.ObjectType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListConfigItems"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListConfigItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListConfigItemsRequest
//
// @return ListConfigItemsResponse
func (client *Client) ListConfigItems(request *ListConfigItemsRequest) (_result *ListConfigItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListConfigItemsResponse{}
	_body, _err := client.ListConfigItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListContactFlowsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListContactFlowsResponse
func (client *Client) ListContactFlowsWithOptions(request *ListContactFlowsRequest, runtime *util.RuntimeOptions) (_result *ListContactFlowsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderByField)) {
		query["OrderByField"] = request.OrderByField
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortOrder)) {
		query["SortOrder"] = request.SortOrder
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListContactFlows"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListContactFlowsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListContactFlowsRequest
//
// @return ListContactFlowsResponse
func (client *Client) ListContactFlows(request *ListContactFlowsRequest) (_result *ListContactFlowsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListContactFlowsResponse{}
	_body, _err := client.ListContactFlowsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI ListCustomCallTagging is deprecated, please use CCC::2020-07-01::ListCustomCallTaggings instead.
//
// Summary:
//
// 列出呼入控制号码
//
// @param request - ListCustomCallTaggingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCustomCallTaggingResponse
// Deprecated
func (client *Client) ListCustomCallTaggingWithOptions(request *ListCustomCallTaggingRequest, runtime *util.RuntimeOptions) (_result *ListCustomCallTaggingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallTagNameList)) {
		query["CallTagNameList"] = request.CallTagNameList
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchPattern)) {
		query["SearchPattern"] = request.SearchPattern
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCustomCallTagging"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCustomCallTaggingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI ListCustomCallTagging is deprecated, please use CCC::2020-07-01::ListCustomCallTaggings instead.
//
// Summary:
//
// 列出呼入控制号码
//
// @param request - ListCustomCallTaggingRequest
//
// @return ListCustomCallTaggingResponse
// Deprecated
func (client *Client) ListCustomCallTagging(request *ListCustomCallTaggingRequest) (_result *ListCustomCallTaggingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCustomCallTaggingResponse{}
	_body, _err := client.ListCustomCallTaggingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDevicesResponse
func (client *Client) ListDevicesWithOptions(request *ListDevicesRequest, runtime *util.RuntimeOptions) (_result *ListDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDevices"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListDevicesRequest
//
// @return ListDevicesResponse
func (client *Client) ListDevices(request *ListDevicesRequest) (_result *ListDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDevicesResponse{}
	_body, _err := client.ListDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询黑名单号码
//
// @param request - ListDoNotCallNumbersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDoNotCallNumbersResponse
func (client *Client) ListDoNotCallNumbersWithOptions(request *ListDoNotCallNumbersRequest, runtime *util.RuntimeOptions) (_result *ListDoNotCallNumbersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		query["Scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.SearchPattern)) {
		query["SearchPattern"] = request.SearchPattern
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDoNotCallNumbers"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDoNotCallNumbersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询黑名单号码
//
// @param request - ListDoNotCallNumbersRequest
//
// @return ListDoNotCallNumbersResponse
func (client *Client) ListDoNotCallNumbers(request *ListDoNotCallNumbersRequest) (_result *ListDoNotCallNumbersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDoNotCallNumbersResponse{}
	_body, _err := client.ListDoNotCallNumbersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - ListDocumentsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDocumentsResponse
func (client *Client) ListDocumentsWithOptions(tmpReq *ListDocumentsRequest, runtime *util.RuntimeOptions) (_result *ListDocumentsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListDocumentsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Sorts)) {
		request.SortsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Sorts, tea.String("Sorts"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		body["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		body["RequestId"] = request.RequestId
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	if !tea.BoolValue(util.IsUnset(request.SearchPattern)) {
		body["SearchPattern"] = request.SearchPattern
	}

	if !tea.BoolValue(util.IsUnset(request.SortsShrink)) {
		body["Sorts"] = request.SortsShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDocuments"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDocumentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListDocumentsRequest
//
// @return ListDocumentsResponse
func (client *Client) ListDocuments(request *ListDocumentsRequest) (_result *ListDocumentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDocumentsResponse{}
	_body, _err := client.ListDocumentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListHistoricalAgentReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHistoricalAgentReportResponse
func (client *Client) ListHistoricalAgentReportWithOptions(request *ListHistoricalAgentReportRequest, runtime *util.RuntimeOptions) (_result *ListHistoricalAgentReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StopTime)) {
		query["StopTime"] = request.StopTime
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentIdList)) {
		body["AgentIdList"] = request.AgentIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHistoricalAgentReport"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListHistoricalAgentReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListHistoricalAgentReportRequest
//
// @return ListHistoricalAgentReportResponse
func (client *Client) ListHistoricalAgentReport(request *ListHistoricalAgentReportRequest) (_result *ListHistoricalAgentReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHistoricalAgentReportResponse{}
	_body, _err := client.ListHistoricalAgentReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// ListHistoricalAgentSkillGroupReport
//
// @param request - ListHistoricalAgentSkillGroupReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHistoricalAgentSkillGroupReportResponse
func (client *Client) ListHistoricalAgentSkillGroupReportWithOptions(request *ListHistoricalAgentSkillGroupReportRequest, runtime *util.RuntimeOptions) (_result *ListHistoricalAgentSkillGroupReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupIdList)) {
		query["SkillGroupIdList"] = request.SkillGroupIdList
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentIdList)) {
		body["AgentIdList"] = request.AgentIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHistoricalAgentSkillGroupReport"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListHistoricalAgentSkillGroupReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// ListHistoricalAgentSkillGroupReport
//
// @param request - ListHistoricalAgentSkillGroupReportRequest
//
// @return ListHistoricalAgentSkillGroupReportResponse
func (client *Client) ListHistoricalAgentSkillGroupReport(request *ListHistoricalAgentSkillGroupReportRequest) (_result *ListHistoricalAgentSkillGroupReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHistoricalAgentSkillGroupReportResponse{}
	_body, _err := client.ListHistoricalAgentSkillGroupReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListHistoricalSkillGroupReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHistoricalSkillGroupReportResponse
func (client *Client) ListHistoricalSkillGroupReportWithOptions(request *ListHistoricalSkillGroupReportRequest, runtime *util.RuntimeOptions) (_result *ListHistoricalSkillGroupReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SkillGroupIdList)) {
		body["SkillGroupIdList"] = request.SkillGroupIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHistoricalSkillGroupReport"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListHistoricalSkillGroupReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListHistoricalSkillGroupReportRequest
//
// @return ListHistoricalSkillGroupReportResponse
func (client *Client) ListHistoricalSkillGroupReport(request *ListHistoricalSkillGroupReportRequest) (_result *ListHistoricalSkillGroupReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHistoricalSkillGroupReportResponse{}
	_body, _err := client.ListHistoricalSkillGroupReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInstancesResponse
func (client *Client) ListInstancesWithOptions(request *ListInstancesRequest, runtime *util.RuntimeOptions) (_result *ListInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListInstances"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListInstancesRequest
//
// @return ListInstancesResponse
func (client *Client) ListInstances(request *ListInstancesRequest) (_result *ListInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInstancesResponse{}
	_body, _err := client.ListInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListInstancesOfUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListInstancesOfUserResponse
func (client *Client) ListInstancesOfUserWithOptions(request *ListInstancesOfUserRequest, runtime *util.RuntimeOptions) (_result *ListInstancesOfUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListInstancesOfUser"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListInstancesOfUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListInstancesOfUserRequest
//
// @return ListInstancesOfUserResponse
func (client *Client) ListInstancesOfUser(request *ListInstancesOfUserRequest) (_result *ListInstancesOfUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInstancesOfUserResponse{}
	_body, _err := client.ListInstancesOfUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListIntervalAgentReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListIntervalAgentReportResponse
func (client *Client) ListIntervalAgentReportWithOptions(request *ListIntervalAgentReportRequest, runtime *util.RuntimeOptions) (_result *ListIntervalAgentReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentId)) {
		query["AgentId"] = request.AgentId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListIntervalAgentReport"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListIntervalAgentReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListIntervalAgentReportRequest
//
// @return ListIntervalAgentReportResponse
func (client *Client) ListIntervalAgentReport(request *ListIntervalAgentReportRequest) (_result *ListIntervalAgentReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListIntervalAgentReportResponse{}
	_body, _err := client.ListIntervalAgentReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// ListIntervalAgentSkillGroupReport
//
// @param request - ListIntervalAgentSkillGroupReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListIntervalAgentSkillGroupReportResponse
func (client *Client) ListIntervalAgentSkillGroupReportWithOptions(request *ListIntervalAgentSkillGroupReportRequest, runtime *util.RuntimeOptions) (_result *ListIntervalAgentSkillGroupReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListIntervalAgentSkillGroupReport"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListIntervalAgentSkillGroupReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// ListIntervalAgentSkillGroupReport
//
// @param request - ListIntervalAgentSkillGroupReportRequest
//
// @return ListIntervalAgentSkillGroupReportResponse
func (client *Client) ListIntervalAgentSkillGroupReport(request *ListIntervalAgentSkillGroupReportRequest) (_result *ListIntervalAgentSkillGroupReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListIntervalAgentSkillGroupReportResponse{}
	_body, _err := client.ListIntervalAgentSkillGroupReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListIntervalInstanceReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListIntervalInstanceReportResponse
func (client *Client) ListIntervalInstanceReportWithOptions(request *ListIntervalInstanceReportRequest, runtime *util.RuntimeOptions) (_result *ListIntervalInstanceReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListIntervalInstanceReport"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListIntervalInstanceReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListIntervalInstanceReportRequest
//
// @return ListIntervalInstanceReportResponse
func (client *Client) ListIntervalInstanceReport(request *ListIntervalInstanceReportRequest) (_result *ListIntervalInstanceReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListIntervalInstanceReportResponse{}
	_body, _err := client.ListIntervalInstanceReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListIntervalSkillGroupReportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListIntervalSkillGroupReportResponse
func (client *Client) ListIntervalSkillGroupReportWithOptions(request *ListIntervalSkillGroupReportRequest, runtime *util.RuntimeOptions) (_result *ListIntervalSkillGroupReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListIntervalSkillGroupReport"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListIntervalSkillGroupReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListIntervalSkillGroupReportRequest
//
// @return ListIntervalSkillGroupReportResponse
func (client *Client) ListIntervalSkillGroupReport(request *ListIntervalSkillGroupReportRequest) (_result *ListIntervalSkillGroupReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListIntervalSkillGroupReportResponse{}
	_body, _err := client.ListIntervalSkillGroupReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListIvrTrackingDetailsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListIvrTrackingDetailsResponse
func (client *Client) ListIvrTrackingDetailsWithOptions(request *ListIvrTrackingDetailsRequest, runtime *util.RuntimeOptions) (_result *ListIvrTrackingDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListIvrTrackingDetails"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListIvrTrackingDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListIvrTrackingDetailsRequest
//
// @return ListIvrTrackingDetailsResponse
func (client *Client) ListIvrTrackingDetails(request *ListIvrTrackingDetailsRequest) (_result *ListIvrTrackingDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListIvrTrackingDetailsResponse{}
	_body, _err := client.ListIvrTrackingDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI ListLegacyAgentEventLogs is deprecated, please use CCC::2020-07-01::ListAgentStateLogs instead.
//
// Summary:
//
// ListLegacyAgentEventLogs
//
// @param request - ListLegacyAgentEventLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLegacyAgentEventLogsResponse
// Deprecated
func (client *Client) ListLegacyAgentEventLogsWithOptions(request *ListLegacyAgentEventLogsRequest, runtime *util.RuntimeOptions) (_result *ListLegacyAgentEventLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentId)) {
		query["AgentId"] = request.AgentId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLegacyAgentEventLogs"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLegacyAgentEventLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI ListLegacyAgentEventLogs is deprecated, please use CCC::2020-07-01::ListAgentStateLogs instead.
//
// Summary:
//
// ListLegacyAgentEventLogs
//
// @param request - ListLegacyAgentEventLogsRequest
//
// @return ListLegacyAgentEventLogsResponse
// Deprecated
func (client *Client) ListLegacyAgentEventLogs(request *ListLegacyAgentEventLogsRequest) (_result *ListLegacyAgentEventLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLegacyAgentEventLogsResponse{}
	_body, _err := client.ListLegacyAgentEventLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI ListLegacyAgentStatusLogs is deprecated, please use CCC::2020-07-01::ListAgentStateLogs instead.
//
// Summary:
//
// ListLegacyAgentStatusLogs
//
// @param request - ListLegacyAgentStatusLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLegacyAgentStatusLogsResponse
// Deprecated
func (client *Client) ListLegacyAgentStatusLogsWithOptions(request *ListLegacyAgentStatusLogsRequest, runtime *util.RuntimeOptions) (_result *ListLegacyAgentStatusLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentId)) {
		query["AgentId"] = request.AgentId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLegacyAgentStatusLogs"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLegacyAgentStatusLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI ListLegacyAgentStatusLogs is deprecated, please use CCC::2020-07-01::ListAgentStateLogs instead.
//
// Summary:
//
// ListLegacyAgentStatusLogs
//
// @param request - ListLegacyAgentStatusLogsRequest
//
// @return ListLegacyAgentStatusLogsResponse
// Deprecated
func (client *Client) ListLegacyAgentStatusLogs(request *ListLegacyAgentStatusLogsRequest) (_result *ListLegacyAgentStatusLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLegacyAgentStatusLogsResponse{}
	_body, _err := client.ListLegacyAgentStatusLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// ListLegacyAppraiseLogs
//
// @param request - ListLegacyAppraiseLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLegacyAppraiseLogsResponse
func (client *Client) ListLegacyAppraiseLogsWithOptions(request *ListLegacyAppraiseLogsRequest, runtime *util.RuntimeOptions) (_result *ListLegacyAppraiseLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLegacyAppraiseLogs"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLegacyAppraiseLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// ListLegacyAppraiseLogs
//
// @param request - ListLegacyAppraiseLogsRequest
//
// @return ListLegacyAppraiseLogsResponse
func (client *Client) ListLegacyAppraiseLogs(request *ListLegacyAppraiseLogsRequest) (_result *ListLegacyAppraiseLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLegacyAppraiseLogsResponse{}
	_body, _err := client.ListLegacyAppraiseLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// ListLegacyQueueEventLogs
//
// @param request - ListLegacyQueueEventLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLegacyQueueEventLogsResponse
func (client *Client) ListLegacyQueueEventLogsWithOptions(request *ListLegacyQueueEventLogsRequest, runtime *util.RuntimeOptions) (_result *ListLegacyQueueEventLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLegacyQueueEventLogs"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLegacyQueueEventLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// ListLegacyQueueEventLogs
//
// @param request - ListLegacyQueueEventLogsRequest
//
// @return ListLegacyQueueEventLogsResponse
func (client *Client) ListLegacyQueueEventLogs(request *ListLegacyQueueEventLogsRequest) (_result *ListLegacyQueueEventLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLegacyQueueEventLogsResponse{}
	_body, _err := client.ListLegacyQueueEventLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListMonoRecordingsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMonoRecordingsResponse
func (client *Client) ListMonoRecordingsWithOptions(request *ListMonoRecordingsRequest, runtime *util.RuntimeOptions) (_result *ListMonoRecordingsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMonoRecordings"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMonoRecordingsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListMonoRecordingsRequest
//
// @return ListMonoRecordingsResponse
func (client *Client) ListMonoRecordings(request *ListMonoRecordingsRequest) (_result *ListMonoRecordingsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMonoRecordingsResponse{}
	_body, _err := client.ListMonoRecordingsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListMultiChannelRecordingsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMultiChannelRecordingsResponse
func (client *Client) ListMultiChannelRecordingsWithOptions(request *ListMultiChannelRecordingsRequest, runtime *util.RuntimeOptions) (_result *ListMultiChannelRecordingsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMultiChannelRecordings"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMultiChannelRecordingsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListMultiChannelRecordingsRequest
//
// @return ListMultiChannelRecordingsResponse
func (client *Client) ListMultiChannelRecordings(request *ListMultiChannelRecordingsRequest) (_result *ListMultiChannelRecordingsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMultiChannelRecordingsResponse{}
	_body, _err := client.ListMultiChannelRecordingsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListOutboundNumbersOfUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOutboundNumbersOfUserResponse
func (client *Client) ListOutboundNumbersOfUserWithOptions(request *ListOutboundNumbersOfUserRequest, runtime *util.RuntimeOptions) (_result *ListOutboundNumbersOfUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupIdList)) {
		query["SkillGroupIdList"] = request.SkillGroupIdList
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListOutboundNumbersOfUser"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListOutboundNumbersOfUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListOutboundNumbersOfUserRequest
//
// @return ListOutboundNumbersOfUserResponse
func (client *Client) ListOutboundNumbersOfUser(request *ListOutboundNumbersOfUserRequest) (_result *ListOutboundNumbersOfUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOutboundNumbersOfUserResponse{}
	_body, _err := client.ListOutboundNumbersOfUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListPersonalNumbersOfUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPersonalNumbersOfUserResponse
func (client *Client) ListPersonalNumbersOfUserWithOptions(request *ListPersonalNumbersOfUserRequest, runtime *util.RuntimeOptions) (_result *ListPersonalNumbersOfUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IsMember)) {
		query["IsMember"] = request.IsMember
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchPattern)) {
		query["SearchPattern"] = request.SearchPattern
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPersonalNumbersOfUser"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPersonalNumbersOfUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListPersonalNumbersOfUserRequest
//
// @return ListPersonalNumbersOfUserResponse
func (client *Client) ListPersonalNumbersOfUser(request *ListPersonalNumbersOfUserRequest) (_result *ListPersonalNumbersOfUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPersonalNumbersOfUserResponse{}
	_body, _err := client.ListPersonalNumbersOfUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取号码列表
//
// @param request - ListPhoneNumbersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPhoneNumbersResponse
func (client *Client) ListPhoneNumbersWithOptions(request *ListPhoneNumbersRequest, runtime *util.RuntimeOptions) (_result *ListPhoneNumbersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Active)) {
		query["Active"] = request.Active
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchPattern)) {
		query["SearchPattern"] = request.SearchPattern
	}

	if !tea.BoolValue(util.IsUnset(request.Usage)) {
		query["Usage"] = request.Usage
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPhoneNumbers"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPhoneNumbersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取号码列表
//
// @param request - ListPhoneNumbersRequest
//
// @return ListPhoneNumbersResponse
func (client *Client) ListPhoneNumbers(request *ListPhoneNumbersRequest) (_result *ListPhoneNumbersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPhoneNumbersResponse{}
	_body, _err := client.ListPhoneNumbersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListPhoneNumbersOfSkillGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPhoneNumbersOfSkillGroupResponse
func (client *Client) ListPhoneNumbersOfSkillGroupWithOptions(request *ListPhoneNumbersOfSkillGroupRequest, runtime *util.RuntimeOptions) (_result *ListPhoneNumbersOfSkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Active)) {
		query["Active"] = request.Active
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IsMember)) {
		query["IsMember"] = request.IsMember
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchPattern)) {
		query["SearchPattern"] = request.SearchPattern
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPhoneNumbersOfSkillGroup"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPhoneNumbersOfSkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListPhoneNumbersOfSkillGroupRequest
//
// @return ListPhoneNumbersOfSkillGroupResponse
func (client *Client) ListPhoneNumbersOfSkillGroup(request *ListPhoneNumbersOfSkillGroupRequest) (_result *ListPhoneNumbersOfSkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPhoneNumbersOfSkillGroupResponse{}
	_body, _err := client.ListPhoneNumbersOfSkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListPrivilegesOfUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPrivilegesOfUserResponse
func (client *Client) ListPrivilegesOfUserWithOptions(request *ListPrivilegesOfUserRequest, runtime *util.RuntimeOptions) (_result *ListPrivilegesOfUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPrivilegesOfUser"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPrivilegesOfUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListPrivilegesOfUserRequest
//
// @return ListPrivilegesOfUserResponse
func (client *Client) ListPrivilegesOfUser(request *ListPrivilegesOfUserRequest) (_result *ListPrivilegesOfUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPrivilegesOfUserResponse{}
	_body, _err := client.ListPrivilegesOfUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListRamUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRamUsersResponse
func (client *Client) ListRamUsersWithOptions(request *ListRamUsersRequest, runtime *util.RuntimeOptions) (_result *ListRamUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchPattern)) {
		query["SearchPattern"] = request.SearchPattern
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRamUsers"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRamUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListRamUsersRequest
//
// @return ListRamUsersResponse
func (client *Client) ListRamUsers(request *ListRamUsersRequest) (_result *ListRamUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRamUsersResponse{}
	_body, _err := client.ListRamUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListRealtimeAgentStatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRealtimeAgentStatesResponse
func (client *Client) ListRealtimeAgentStatesWithOptions(request *ListRealtimeAgentStatesRequest, runtime *util.RuntimeOptions) (_result *ListRealtimeAgentStatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentName)) {
		query["AgentName"] = request.AgentName
	}

	if !tea.BoolValue(util.IsUnset(request.CallTypeList)) {
		query["CallTypeList"] = request.CallTypeList
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.OutboundScenario)) {
		query["OutboundScenario"] = request.OutboundScenario
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Query)) {
		query["Query"] = request.Query
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkModeList)) {
		query["WorkModeList"] = request.WorkModeList
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentIdList)) {
		body["AgentIdList"] = request.AgentIdList
	}

	if !tea.BoolValue(util.IsUnset(request.StateList)) {
		body["StateList"] = request.StateList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRealtimeAgentStates"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRealtimeAgentStatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListRealtimeAgentStatesRequest
//
// @return ListRealtimeAgentStatesResponse
func (client *Client) ListRealtimeAgentStates(request *ListRealtimeAgentStatesRequest) (_result *ListRealtimeAgentStatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRealtimeAgentStatesResponse{}
	_body, _err := client.ListRealtimeAgentStatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListRealtimeSkillGroupStatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRealtimeSkillGroupStatesResponse
func (client *Client) ListRealtimeSkillGroupStatesWithOptions(request *ListRealtimeSkillGroupStatesRequest, runtime *util.RuntimeOptions) (_result *ListRealtimeSkillGroupStatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SkillGroupIdList)) {
		body["SkillGroupIdList"] = request.SkillGroupIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRealtimeSkillGroupStates"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRealtimeSkillGroupStatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListRealtimeSkillGroupStatesRequest
//
// @return ListRealtimeSkillGroupStatesResponse
func (client *Client) ListRealtimeSkillGroupStates(request *ListRealtimeSkillGroupStatesRequest) (_result *ListRealtimeSkillGroupStatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRealtimeSkillGroupStatesResponse{}
	_body, _err := client.ListRealtimeSkillGroupStatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListRecentCallDetailRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRecentCallDetailRecordsResponse
func (client *Client) ListRecentCallDetailRecordsWithOptions(request *ListRecentCallDetailRecordsRequest, runtime *util.RuntimeOptions) (_result *ListRecentCallDetailRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRecentCallDetailRecords"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRecentCallDetailRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListRecentCallDetailRecordsRequest
//
// @return ListRecentCallDetailRecordsResponse
func (client *Client) ListRecentCallDetailRecords(request *ListRecentCallDetailRecordsRequest) (_result *ListRecentCallDetailRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRecentCallDetailRecordsResponse{}
	_body, _err := client.ListRecentCallDetailRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListRolesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRolesResponse
func (client *Client) ListRolesWithOptions(request *ListRolesRequest, runtime *util.RuntimeOptions) (_result *ListRolesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRoles"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRolesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListRolesRequest
//
// @return ListRolesResponse
func (client *Client) ListRoles(request *ListRolesRequest) (_result *ListRolesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRolesResponse{}
	_body, _err := client.ListRolesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI ListSkillGroupStates is deprecated, please use CCC::2020-07-01::ListRealtimeSkillGroupStates instead.
//
// Summary:
//
// ListSkillGroupStates for acc
//
// @param request - ListSkillGroupStatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSkillGroupStatesResponse
// Deprecated
func (client *Client) ListSkillGroupStatesWithOptions(request *ListSkillGroupStatesRequest, runtime *util.RuntimeOptions) (_result *ListSkillGroupStatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSkillGroupStates"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSkillGroupStatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI ListSkillGroupStates is deprecated, please use CCC::2020-07-01::ListRealtimeSkillGroupStates instead.
//
// Summary:
//
// ListSkillGroupStates for acc
//
// @param request - ListSkillGroupStatesRequest
//
// @return ListSkillGroupStatesResponse
// Deprecated
func (client *Client) ListSkillGroupStates(request *ListSkillGroupStatesRequest) (_result *ListSkillGroupStatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSkillGroupStatesResponse{}
	_body, _err := client.ListSkillGroupStatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI ListSkillGroupSummaryReportsSinceMidnight is deprecated, please use CCC::2020-07-01::ListHistoricalSkillGroupReport instead.
//
// Summary:
//
// ListSkillGroupSummaryReportsSinceMidnight for acc
//
// @param request - ListSkillGroupSummaryReportsSinceMidnightRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSkillGroupSummaryReportsSinceMidnightResponse
// Deprecated
func (client *Client) ListSkillGroupSummaryReportsSinceMidnightWithOptions(request *ListSkillGroupSummaryReportsSinceMidnightRequest, runtime *util.RuntimeOptions) (_result *ListSkillGroupSummaryReportsSinceMidnightResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSkillGroupSummaryReportsSinceMidnight"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSkillGroupSummaryReportsSinceMidnightResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI ListSkillGroupSummaryReportsSinceMidnight is deprecated, please use CCC::2020-07-01::ListHistoricalSkillGroupReport instead.
//
// Summary:
//
// ListSkillGroupSummaryReportsSinceMidnight for acc
//
// @param request - ListSkillGroupSummaryReportsSinceMidnightRequest
//
// @return ListSkillGroupSummaryReportsSinceMidnightResponse
// Deprecated
func (client *Client) ListSkillGroupSummaryReportsSinceMidnight(request *ListSkillGroupSummaryReportsSinceMidnightRequest) (_result *ListSkillGroupSummaryReportsSinceMidnightResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSkillGroupSummaryReportsSinceMidnightResponse{}
	_body, _err := client.ListSkillGroupSummaryReportsSinceMidnightWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListSkillGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSkillGroupsResponse
func (client *Client) ListSkillGroupsWithOptions(request *ListSkillGroupsRequest, runtime *util.RuntimeOptions) (_result *ListSkillGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchPattern)) {
		query["SearchPattern"] = request.SearchPattern
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSkillGroups"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSkillGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListSkillGroupsRequest
//
// @return ListSkillGroupsResponse
func (client *Client) ListSkillGroups(request *ListSkillGroupsRequest) (_result *ListSkillGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSkillGroupsResponse{}
	_body, _err := client.ListSkillGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListSkillLevelsOfUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSkillLevelsOfUserResponse
func (client *Client) ListSkillLevelsOfUserWithOptions(request *ListSkillLevelsOfUserRequest, runtime *util.RuntimeOptions) (_result *ListSkillLevelsOfUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IsMember)) {
		query["IsMember"] = request.IsMember
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchPattern)) {
		query["SearchPattern"] = request.SearchPattern
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSkillLevelsOfUser"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSkillLevelsOfUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListSkillLevelsOfUserRequest
//
// @return ListSkillLevelsOfUserResponse
func (client *Client) ListSkillLevelsOfUser(request *ListSkillLevelsOfUserRequest) (_result *ListSkillLevelsOfUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSkillLevelsOfUserResponse{}
	_body, _err := client.ListSkillLevelsOfUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListTicketTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTicketTasksResponse
func (client *Client) ListTicketTasksWithOptions(request *ListTicketTasksRequest, runtime *util.RuntimeOptions) (_result *ListTicketTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TicketId)) {
		query["TicketId"] = request.TicketId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTicketTasks"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTicketTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListTicketTasksRequest
//
// @return ListTicketTasksResponse
func (client *Client) ListTicketTasks(request *ListTicketTasksRequest) (_result *ListTicketTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTicketTasksResponse{}
	_body, _err := client.ListTicketTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListTicketTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTicketTemplatesResponse
func (client *Client) ListTicketTemplatesWithOptions(request *ListTicketTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListTicketTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CategoryId)) {
		query["CategoryId"] = request.CategoryId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchPattern)) {
		query["SearchPattern"] = request.SearchPattern
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTicketTemplates"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTicketTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListTicketTemplatesRequest
//
// @return ListTicketTemplatesResponse
func (client *Client) ListTicketTemplates(request *ListTicketTemplatesRequest) (_result *ListTicketTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTicketTemplatesResponse{}
	_body, _err := client.ListTicketTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListTicketsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTicketsResponse
func (client *Client) ListTicketsWithOptions(request *ListTicketsRequest, runtime *util.RuntimeOptions) (_result *ListTicketsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Assignee)) {
		query["Assignee"] = request.Assignee
	}

	if !tea.BoolValue(util.IsUnset(request.AssigneeType)) {
		query["AssigneeType"] = request.AssigneeType
	}

	if !tea.BoolValue(util.IsUnset(request.CategoryId)) {
		query["CategoryId"] = request.CategoryId
	}

	if !tea.BoolValue(util.IsUnset(request.Creator)) {
		query["Creator"] = request.Creator
	}

	if !tea.BoolValue(util.IsUnset(request.CustomerId)) {
		query["CustomerId"] = request.CustomerId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobIdList)) {
		query["JobIdList"] = request.JobIdList
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Participant)) {
		query["Participant"] = request.Participant
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	if !tea.BoolValue(util.IsUnset(request.TicketId)) {
		query["TicketId"] = request.TicketId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTickets"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTicketsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListTicketsRequest
//
// @return ListTicketsResponse
func (client *Client) ListTickets(request *ListTicketsRequest) (_result *ListTicketsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTicketsResponse{}
	_body, _err := client.ListTicketsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取未分配号码列表
//
// @param request - ListUnassignedNumbersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUnassignedNumbersResponse
func (client *Client) ListUnassignedNumbersWithOptions(request *ListUnassignedNumbersRequest, runtime *util.RuntimeOptions) (_result *ListUnassignedNumbersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchPattern)) {
		query["SearchPattern"] = request.SearchPattern
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUnassignedNumbers"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListUnassignedNumbersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取未分配号码列表
//
// @param request - ListUnassignedNumbersRequest
//
// @return ListUnassignedNumbersResponse
func (client *Client) ListUnassignedNumbers(request *ListUnassignedNumbersRequest) (_result *ListUnassignedNumbersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUnassignedNumbersResponse{}
	_body, _err := client.ListUnassignedNumbersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListUserLevelsOfSkillGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUserLevelsOfSkillGroupResponse
func (client *Client) ListUserLevelsOfSkillGroupWithOptions(request *ListUserLevelsOfSkillGroupRequest, runtime *util.RuntimeOptions) (_result *ListUserLevelsOfSkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IsMember)) {
		query["IsMember"] = request.IsMember
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchPattern)) {
		query["SearchPattern"] = request.SearchPattern
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUserLevelsOfSkillGroup"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListUserLevelsOfSkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListUserLevelsOfSkillGroupRequest
//
// @return ListUserLevelsOfSkillGroupResponse
func (client *Client) ListUserLevelsOfSkillGroup(request *ListUserLevelsOfSkillGroupRequest) (_result *ListUserLevelsOfSkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUserLevelsOfSkillGroupResponse{}
	_body, _err := client.ListUserLevelsOfSkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUsersResponse
func (client *Client) ListUsersWithOptions(request *ListUsersRequest, runtime *util.RuntimeOptions) (_result *ListUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchPattern)) {
		query["SearchPattern"] = request.SearchPattern
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUsers"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListUsersRequest
//
// @return ListUsersResponse
func (client *Client) ListUsers(request *ListUsersRequest) (_result *ListUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUsersResponse{}
	_body, _err := client.ListUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListVoicemailsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListVoicemailsResponse
func (client *Client) ListVoicemailsWithOptions(request *ListVoicemailsRequest, runtime *util.RuntimeOptions) (_result *ListVoicemailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Caller)) {
		query["Caller"] = request.Caller
	}

	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListVoicemails"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListVoicemailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListVoicemailsRequest
//
// @return ListVoicemailsResponse
func (client *Client) ListVoicemails(request *ListVoicemailsRequest) (_result *ListVoicemailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListVoicemailsResponse{}
	_body, _err := client.ListVoicemailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - MakeCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MakeCallResponse
func (client *Client) MakeCallWithOptions(request *MakeCallRequest, runtime *util.RuntimeOptions) (_result *MakeCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Callee)) {
		query["Callee"] = request.Callee
	}

	if !tea.BoolValue(util.IsUnset(request.Caller)) {
		query["Caller"] = request.Caller
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MaskedCallee)) {
		query["MaskedCallee"] = request.MaskedCallee
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.TimeoutSeconds)) {
		query["TimeoutSeconds"] = request.TimeoutSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("MakeCall"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &MakeCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - MakeCallRequest
//
// @return MakeCallResponse
func (client *Client) MakeCall(request *MakeCallRequest) (_result *MakeCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MakeCallResponse{}
	_body, _err := client.MakeCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyAudioFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyAudioFileResponse
func (client *Client) ModifyAudioFileWithOptions(request *ModifyAudioFileRequest, runtime *util.RuntimeOptions) (_result *ModifyAudioFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AudioFileName)) {
		query["AudioFileName"] = request.AudioFileName
	}

	if !tea.BoolValue(util.IsUnset(request.AudioResourceId)) {
		query["AudioResourceId"] = request.AudioResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OssFileKey)) {
		query["OssFileKey"] = request.OssFileKey
	}

	if !tea.BoolValue(util.IsUnset(request.Usage)) {
		query["Usage"] = request.Usage
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyAudioFile"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyAudioFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyAudioFileRequest
//
// @return ModifyAudioFileResponse
func (client *Client) ModifyAudioFile(request *ModifyAudioFileRequest) (_result *ModifyAudioFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAudioFileResponse{}
	_body, _err := client.ModifyAudioFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 编辑呼入控制号码
//
// @param request - ModifyCustomCallTaggingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCustomCallTaggingResponse
func (client *Client) ModifyCustomCallTaggingWithOptions(request *ModifyCustomCallTaggingRequest, runtime *util.RuntimeOptions) (_result *ModifyCustomCallTaggingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallTagNameList)) {
		query["CallTagNameList"] = request.CallTagNameList
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Number)) {
		query["Number"] = request.Number
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCustomCallTagging"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCustomCallTaggingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 编辑呼入控制号码
//
// @param request - ModifyCustomCallTaggingRequest
//
// @return ModifyCustomCallTaggingResponse
func (client *Client) ModifyCustomCallTagging(request *ModifyCustomCallTaggingRequest) (_result *ModifyCustomCallTaggingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCustomCallTaggingResponse{}
	_body, _err := client.ModifyCustomCallTaggingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyInstanceResponse
func (client *Client) ModifyInstanceWithOptions(request *ModifyInstanceRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstance"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyInstanceRequest
//
// @return ModifyInstanceResponse
func (client *Client) ModifyInstance(request *ModifyInstanceRequest) (_result *ModifyInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceResponse{}
	_body, _err := client.ModifyInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyPhoneNumberRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyPhoneNumberResponse
func (client *Client) ModifyPhoneNumberWithOptions(request *ModifyPhoneNumberRequest, runtime *util.RuntimeOptions) (_result *ModifyPhoneNumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Number)) {
		query["Number"] = request.Number
	}

	if !tea.BoolValue(util.IsUnset(request.Usage)) {
		query["Usage"] = request.Usage
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyPhoneNumber"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyPhoneNumberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyPhoneNumberRequest
//
// @return ModifyPhoneNumberResponse
func (client *Client) ModifyPhoneNumber(request *ModifyPhoneNumberRequest) (_result *ModifyPhoneNumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPhoneNumberResponse{}
	_body, _err := client.ModifyPhoneNumberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifySkillGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySkillGroupResponse
func (client *Client) ModifySkillGroupWithOptions(request *ModifySkillGroupRequest, runtime *util.RuntimeOptions) (_result *ModifySkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DisplayName)) {
		query["DisplayName"] = request.DisplayName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySkillGroup"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifySkillGroupRequest
//
// @return ModifySkillGroupResponse
func (client *Client) ModifySkillGroup(request *ModifySkillGroupRequest) (_result *ModifySkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySkillGroupResponse{}
	_body, _err := client.ModifySkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifySkillLevelsOfUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySkillLevelsOfUserResponse
func (client *Client) ModifySkillLevelsOfUserWithOptions(request *ModifySkillLevelsOfUserRequest, runtime *util.RuntimeOptions) (_result *ModifySkillLevelsOfUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillLevelList)) {
		query["SkillLevelList"] = request.SkillLevelList
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySkillLevelsOfUser"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySkillLevelsOfUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifySkillLevelsOfUserRequest
//
// @return ModifySkillLevelsOfUserResponse
func (client *Client) ModifySkillLevelsOfUser(request *ModifySkillLevelsOfUserRequest) (_result *ModifySkillLevelsOfUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySkillLevelsOfUserResponse{}
	_body, _err := client.ModifySkillLevelsOfUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyUserResponse
func (client *Client) ModifyUserWithOptions(request *ModifyUserRequest, runtime *util.RuntimeOptions) (_result *ModifyUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvatarUrl)) {
		query["AvatarUrl"] = request.AvatarUrl
	}

	if !tea.BoolValue(util.IsUnset(request.DisplayId)) {
		query["DisplayId"] = request.DisplayId
	}

	if !tea.BoolValue(util.IsUnset(request.DisplayName)) {
		query["DisplayName"] = request.DisplayName
	}

	if !tea.BoolValue(util.IsUnset(request.Force)) {
		query["Force"] = request.Force
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Mobile)) {
		query["Mobile"] = request.Mobile
	}

	if !tea.BoolValue(util.IsUnset(request.Nickname)) {
		query["Nickname"] = request.Nickname
	}

	if !tea.BoolValue(util.IsUnset(request.RoleId)) {
		query["RoleId"] = request.RoleId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkMode)) {
		query["WorkMode"] = request.WorkMode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyUser"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyUserRequest
//
// @return ModifyUserResponse
func (client *Client) ModifyUser(request *ModifyUserRequest) (_result *ModifyUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyUserResponse{}
	_body, _err := client.ModifyUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyUserLevelsOfSkillGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyUserLevelsOfSkillGroupResponse
func (client *Client) ModifyUserLevelsOfSkillGroupWithOptions(request *ModifyUserLevelsOfSkillGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyUserLevelsOfSkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserLevelList)) {
		query["UserLevelList"] = request.UserLevelList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyUserLevelsOfSkillGroup"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyUserLevelsOfSkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyUserLevelsOfSkillGroupRequest
//
// @return ModifyUserLevelsOfSkillGroupResponse
func (client *Client) ModifyUserLevelsOfSkillGroup(request *ModifyUserLevelsOfSkillGroupRequest) (_result *ModifyUserLevelsOfSkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyUserLevelsOfSkillGroupResponse{}
	_body, _err := client.ModifyUserLevelsOfSkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - MonitorCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MonitorCallResponse
func (client *Client) MonitorCallWithOptions(request *MonitorCallRequest, runtime *util.RuntimeOptions) (_result *MonitorCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MonitoredUserId)) {
		query["MonitoredUserId"] = request.MonitoredUserId
	}

	if !tea.BoolValue(util.IsUnset(request.TimeoutSeconds)) {
		query["TimeoutSeconds"] = request.TimeoutSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("MonitorCall"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &MonitorCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - MonitorCallRequest
//
// @return MonitorCallResponse
func (client *Client) MonitorCall(request *MonitorCallRequest) (_result *MonitorCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MonitorCallResponse{}
	_body, _err := client.MonitorCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - MuteCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MuteCallResponse
func (client *Client) MuteCallWithOptions(request *MuteCallRequest, runtime *util.RuntimeOptions) (_result *MuteCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("MuteCall"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &MuteCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - MuteCallRequest
//
// @return MuteCallResponse
func (client *Client) MuteCall(request *MuteCallRequest) (_result *MuteCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MuteCallResponse{}
	_body, _err := client.MuteCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 暂停预测式外呼活动
//
// @param request - PauseCampaignRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PauseCampaignResponse
func (client *Client) PauseCampaignWithOptions(request *PauseCampaignRequest, runtime *util.RuntimeOptions) (_result *PauseCampaignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CampaignId)) {
		query["CampaignId"] = request.CampaignId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PauseCampaign"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PauseCampaignResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 暂停预测式外呼活动
//
// @param request - PauseCampaignRequest
//
// @return PauseCampaignResponse
func (client *Client) PauseCampaign(request *PauseCampaignRequest) (_result *PauseCampaignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PauseCampaignResponse{}
	_body, _err := client.PauseCampaignWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - PickOutboundNumbersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PickOutboundNumbersResponse
func (client *Client) PickOutboundNumbersWithOptions(request *PickOutboundNumbersRequest, runtime *util.RuntimeOptions) (_result *PickOutboundNumbersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalledNumber)) {
		query["CalledNumber"] = request.CalledNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Count)) {
		query["Count"] = request.Count
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupIdList)) {
		query["SkillGroupIdList"] = request.SkillGroupIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PickOutboundNumbers"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PickOutboundNumbersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - PickOutboundNumbersRequest
//
// @return PickOutboundNumbersResponse
func (client *Client) PickOutboundNumbers(request *PickOutboundNumbersRequest) (_result *PickOutboundNumbersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PickOutboundNumbersResponse{}
	_body, _err := client.PickOutboundNumbersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - PollUserStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PollUserStatusResponse
func (client *Client) PollUserStatusWithOptions(request *PollUserStatusRequest, runtime *util.RuntimeOptions) (_result *PollUserStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PollUserStatus"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PollUserStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - PollUserStatusRequest
//
// @return PollUserStatusResponse
func (client *Client) PollUserStatus(request *PollUserStatusRequest) (_result *PollUserStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PollUserStatusResponse{}
	_body, _err := client.PollUserStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// ProcessAliMeCallbackOfStaging
//
// @param request - ProcessAliMeCallbackOfStagingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ProcessAliMeCallbackOfStagingResponse
func (client *Client) ProcessAliMeCallbackOfStagingWithOptions(request *ProcessAliMeCallbackOfStagingRequest, runtime *util.RuntimeOptions) (_result *ProcessAliMeCallbackOfStagingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Data)) {
		query["Data"] = request.Data
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ProcessAliMeCallbackOfStaging"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ProcessAliMeCallbackOfStagingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// ProcessAliMeCallbackOfStaging
//
// @param request - ProcessAliMeCallbackOfStagingRequest
//
// @return ProcessAliMeCallbackOfStagingResponse
func (client *Client) ProcessAliMeCallbackOfStaging(request *ProcessAliMeCallbackOfStagingRequest) (_result *ProcessAliMeCallbackOfStagingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ProcessAliMeCallbackOfStagingResponse{}
	_body, _err := client.ProcessAliMeCallbackOfStagingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - PublishContactFlowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PublishContactFlowResponse
func (client *Client) PublishContactFlowWithOptions(request *PublishContactFlowRequest, runtime *util.RuntimeOptions) (_result *PublishContactFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.DraftId)) {
		query["DraftId"] = request.DraftId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PublishContactFlow"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PublishContactFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - PublishContactFlowRequest
//
// @return PublishContactFlowResponse
func (client *Client) PublishContactFlow(request *PublishContactFlowRequest) (_result *PublishContactFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PublishContactFlowResponse{}
	_body, _err := client.PublishContactFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ReadyForServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReadyForServiceResponse
func (client *Client) ReadyForServiceWithOptions(request *ReadyForServiceRequest, runtime *util.RuntimeOptions) (_result *ReadyForServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OutboundScenario)) {
		query["OutboundScenario"] = request.OutboundScenario
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReadyForService"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReadyForServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ReadyForServiceRequest
//
// @return ReadyForServiceResponse
func (client *Client) ReadyForService(request *ReadyForServiceRequest) (_result *ReadyForServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReadyForServiceResponse{}
	_body, _err := client.ReadyForServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RedialCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RedialCallResponse
func (client *Client) RedialCallWithOptions(request *RedialCallRequest, runtime *util.RuntimeOptions) (_result *RedialCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Callee)) {
		query["Callee"] = request.Callee
	}

	if !tea.BoolValue(util.IsUnset(request.Caller)) {
		query["Caller"] = request.Caller
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.TimeoutSeconds)) {
		query["TimeoutSeconds"] = request.TimeoutSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RedialCall"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RedialCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RedialCallRequest
//
// @return RedialCallResponse
func (client *Client) RedialCall(request *RedialCallRequest) (_result *RedialCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RedialCallResponse{}
	_body, _err := client.RedialCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RegisterDeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RegisterDeviceResponse
func (client *Client) RegisterDeviceWithOptions(request *RegisterDeviceRequest, runtime *util.RuntimeOptions) (_result *RegisterDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RegisterDevice"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RegisterDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RegisterDeviceRequest
//
// @return RegisterDeviceResponse
func (client *Client) RegisterDevice(request *RegisterDeviceRequest) (_result *RegisterDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RegisterDeviceResponse{}
	_body, _err := client.RegisterDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RegisterDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RegisterDevicesResponse
func (client *Client) RegisterDevicesWithOptions(request *RegisterDevicesRequest, runtime *util.RuntimeOptions) (_result *RegisterDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.UserIdListJson)) {
		query["UserIdListJson"] = request.UserIdListJson
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RegisterDevices"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RegisterDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RegisterDevicesRequest
//
// @return RegisterDevicesResponse
func (client *Client) RegisterDevices(request *RegisterDevicesRequest) (_result *RegisterDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RegisterDevicesResponse{}
	_body, _err := client.RegisterDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RejectChatRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RejectChatResponse
func (client *Client) RejectChatWithOptions(request *RejectChatRequest, runtime *util.RuntimeOptions) (_result *RejectChatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RejectChat"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RejectChatResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RejectChatRequest
//
// @return RejectChatResponse
func (client *Client) RejectChat(request *RejectChatRequest) (_result *RejectChatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RejectChatResponse{}
	_body, _err := client.RejectChatWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RejectTicketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RejectTicketResponse
func (client *Client) RejectTicketWithOptions(request *RejectTicketRequest, runtime *util.RuntimeOptions) (_result *RejectTicketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TicketId)) {
		query["TicketId"] = request.TicketId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RejectTicket"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RejectTicketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RejectTicketRequest
//
// @return RejectTicketResponse
func (client *Client) RejectTicket(request *RejectTicketRequest) (_result *RejectTicketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RejectTicketResponse{}
	_body, _err := client.RejectTicketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ReleaseCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReleaseCallResponse
func (client *Client) ReleaseCallWithOptions(request *ReleaseCallRequest, runtime *util.RuntimeOptions) (_result *ReleaseCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseCall"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReleaseCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ReleaseCallRequest
//
// @return ReleaseCallResponse
func (client *Client) ReleaseCall(request *ReleaseCallRequest) (_result *ReleaseCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseCallResponse{}
	_body, _err := client.ReleaseCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ReleaseChatRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReleaseChatResponse
func (client *Client) ReleaseChatWithOptions(request *ReleaseChatRequest, runtime *util.RuntimeOptions) (_result *ReleaseChatResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.UserType)) {
		query["UserType"] = request.UserType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseChat"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReleaseChatResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ReleaseChatRequest
//
// @return ReleaseChatResponse
func (client *Client) ReleaseChat(request *ReleaseChatRequest) (_result *ReleaseChatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseChatResponse{}
	_body, _err := client.ReleaseChatWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 编辑呼入控制号码
//
// @param request - RemoveBlacklistCallTaggingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveBlacklistCallTaggingResponse
func (client *Client) RemoveBlacklistCallTaggingWithOptions(request *RemoveBlacklistCallTaggingRequest, runtime *util.RuntimeOptions) (_result *RemoveBlacklistCallTaggingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Number)) {
		query["Number"] = request.Number
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveBlacklistCallTagging"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveBlacklistCallTaggingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 编辑呼入控制号码
//
// @param request - RemoveBlacklistCallTaggingRequest
//
// @return RemoveBlacklistCallTaggingResponse
func (client *Client) RemoveBlacklistCallTagging(request *RemoveBlacklistCallTaggingRequest) (_result *RemoveBlacklistCallTaggingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveBlacklistCallTaggingResponse{}
	_body, _err := client.RemoveBlacklistCallTaggingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除黑名单号码
//
// @param request - RemoveDoNotCallNumbersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveDoNotCallNumbersResponse
func (client *Client) RemoveDoNotCallNumbersWithOptions(request *RemoveDoNotCallNumbersRequest, runtime *util.RuntimeOptions) (_result *RemoveDoNotCallNumbersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NumberList)) {
		query["NumberList"] = request.NumberList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveDoNotCallNumbers"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveDoNotCallNumbersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除黑名单号码
//
// @param request - RemoveDoNotCallNumbersRequest
//
// @return RemoveDoNotCallNumbersResponse
func (client *Client) RemoveDoNotCallNumbers(request *RemoveDoNotCallNumbersRequest) (_result *RemoveDoNotCallNumbersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveDoNotCallNumbersResponse{}
	_body, _err := client.RemoveDoNotCallNumbersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RemovePersonalNumbersFromUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemovePersonalNumbersFromUserResponse
func (client *Client) RemovePersonalNumbersFromUserWithOptions(request *RemovePersonalNumbersFromUserRequest, runtime *util.RuntimeOptions) (_result *RemovePersonalNumbersFromUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NumberList)) {
		query["NumberList"] = request.NumberList
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemovePersonalNumbersFromUser"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemovePersonalNumbersFromUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RemovePersonalNumbersFromUserRequest
//
// @return RemovePersonalNumbersFromUserResponse
func (client *Client) RemovePersonalNumbersFromUser(request *RemovePersonalNumbersFromUserRequest) (_result *RemovePersonalNumbersFromUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemovePersonalNumbersFromUserResponse{}
	_body, _err := client.RemovePersonalNumbersFromUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RemovePhoneNumberFromSkillGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemovePhoneNumberFromSkillGroupsResponse
func (client *Client) RemovePhoneNumberFromSkillGroupsWithOptions(request *RemovePhoneNumberFromSkillGroupsRequest, runtime *util.RuntimeOptions) (_result *RemovePhoneNumberFromSkillGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Number)) {
		query["Number"] = request.Number
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupIdList)) {
		query["SkillGroupIdList"] = request.SkillGroupIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemovePhoneNumberFromSkillGroups"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemovePhoneNumberFromSkillGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RemovePhoneNumberFromSkillGroupsRequest
//
// @return RemovePhoneNumberFromSkillGroupsResponse
func (client *Client) RemovePhoneNumberFromSkillGroups(request *RemovePhoneNumberFromSkillGroupsRequest) (_result *RemovePhoneNumberFromSkillGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemovePhoneNumberFromSkillGroupsResponse{}
	_body, _err := client.RemovePhoneNumberFromSkillGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RemovePhoneNumbersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemovePhoneNumbersResponse
func (client *Client) RemovePhoneNumbersWithOptions(request *RemovePhoneNumbersRequest, runtime *util.RuntimeOptions) (_result *RemovePhoneNumbersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Force)) {
		query["Force"] = request.Force
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NumberList)) {
		query["NumberList"] = request.NumberList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemovePhoneNumbers"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemovePhoneNumbersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RemovePhoneNumbersRequest
//
// @return RemovePhoneNumbersResponse
func (client *Client) RemovePhoneNumbers(request *RemovePhoneNumbersRequest) (_result *RemovePhoneNumbersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemovePhoneNumbersResponse{}
	_body, _err := client.RemovePhoneNumbersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RemovePhoneNumbersFromSkillGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemovePhoneNumbersFromSkillGroupResponse
func (client *Client) RemovePhoneNumbersFromSkillGroupWithOptions(request *RemovePhoneNumbersFromSkillGroupRequest, runtime *util.RuntimeOptions) (_result *RemovePhoneNumbersFromSkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NumberList)) {
		query["NumberList"] = request.NumberList
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemovePhoneNumbersFromSkillGroup"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemovePhoneNumbersFromSkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RemovePhoneNumbersFromSkillGroupRequest
//
// @return RemovePhoneNumbersFromSkillGroupResponse
func (client *Client) RemovePhoneNumbersFromSkillGroup(request *RemovePhoneNumbersFromSkillGroupRequest) (_result *RemovePhoneNumbersFromSkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemovePhoneNumbersFromSkillGroupResponse{}
	_body, _err := client.RemovePhoneNumbersFromSkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RemoveSkillGroupsFromUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveSkillGroupsFromUserResponse
func (client *Client) RemoveSkillGroupsFromUserWithOptions(request *RemoveSkillGroupsFromUserRequest, runtime *util.RuntimeOptions) (_result *RemoveSkillGroupsFromUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupIdList)) {
		query["SkillGroupIdList"] = request.SkillGroupIdList
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveSkillGroupsFromUser"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveSkillGroupsFromUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RemoveSkillGroupsFromUserRequest
//
// @return RemoveSkillGroupsFromUserResponse
func (client *Client) RemoveSkillGroupsFromUser(request *RemoveSkillGroupsFromUserRequest) (_result *RemoveSkillGroupsFromUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveSkillGroupsFromUserResponse{}
	_body, _err := client.RemoveSkillGroupsFromUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RemoveUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveUsersResponse
func (client *Client) RemoveUsersWithOptions(request *RemoveUsersRequest, runtime *util.RuntimeOptions) (_result *RemoveUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		query["FilePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.Force)) {
		query["Force"] = request.Force
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NotificationEmail)) {
		query["NotificationEmail"] = request.NotificationEmail
	}

	if !tea.BoolValue(util.IsUnset(request.UserIdList)) {
		query["UserIdList"] = request.UserIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveUsers"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RemoveUsersRequest
//
// @return RemoveUsersResponse
func (client *Client) RemoveUsers(request *RemoveUsersRequest) (_result *RemoveUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveUsersResponse{}
	_body, _err := client.RemoveUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RemoveUsersFromSkillGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveUsersFromSkillGroupResponse
func (client *Client) RemoveUsersFromSkillGroupWithOptions(request *RemoveUsersFromSkillGroupRequest, runtime *util.RuntimeOptions) (_result *RemoveUsersFromSkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserIdList)) {
		query["UserIdList"] = request.UserIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveUsersFromSkillGroup"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveUsersFromSkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RemoveUsersFromSkillGroupRequest
//
// @return RemoveUsersFromSkillGroupResponse
func (client *Client) RemoveUsersFromSkillGroup(request *RemoveUsersFromSkillGroupRequest) (_result *RemoveUsersFromSkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveUsersFromSkillGroupResponse{}
	_body, _err := client.RemoveUsersFromSkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ResetAgentStateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetAgentStateResponse
func (client *Client) ResetAgentStateWithOptions(request *ResetAgentStateRequest, runtime *util.RuntimeOptions) (_result *ResetAgentStateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetAgentState"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetAgentStateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ResetAgentStateRequest
//
// @return ResetAgentStateResponse
func (client *Client) ResetAgentState(request *ResetAgentStateRequest) (_result *ResetAgentStateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetAgentStateResponse{}
	_body, _err := client.ResetAgentStateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ResetUserPasswordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetUserPasswordResponse
func (client *Client) ResetUserPasswordWithOptions(request *ResetUserPasswordRequest, runtime *util.RuntimeOptions) (_result *ResetUserPasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetUserPassword"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetUserPasswordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ResetUserPasswordRequest
//
// @return ResetUserPasswordResponse
func (client *Client) ResetUserPassword(request *ResetUserPasswordRequest) (_result *ResetUserPasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetUserPasswordResponse{}
	_body, _err := client.ResetUserPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 录音解冻
//
// @param request - RestoreArchivedRecordingsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RestoreArchivedRecordingsResponse
func (client *Client) RestoreArchivedRecordingsWithOptions(request *RestoreArchivedRecordingsRequest, runtime *util.RuntimeOptions) (_result *RestoreArchivedRecordingsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactIds)) {
		query["ContactIds"] = request.ContactIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RestoreArchivedRecordings"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RestoreArchivedRecordingsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 录音解冻
//
// @param request - RestoreArchivedRecordingsRequest
//
// @return RestoreArchivedRecordingsResponse
func (client *Client) RestoreArchivedRecordings(request *RestoreArchivedRecordingsRequest) (_result *RestoreArchivedRecordingsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestoreArchivedRecordingsResponse{}
	_body, _err := client.RestoreArchivedRecordingsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ResubmitTicketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResubmitTicketResponse
func (client *Client) ResubmitTicketWithOptions(request *ResubmitTicketRequest, runtime *util.RuntimeOptions) (_result *ResubmitTicketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TicketId)) {
		query["TicketId"] = request.TicketId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResubmitTicket"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResubmitTicketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ResubmitTicketRequest
//
// @return ResubmitTicketResponse
func (client *Client) ResubmitTicket(request *ResubmitTicketRequest) (_result *ResubmitTicketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResubmitTicketResponse{}
	_body, _err := client.ResubmitTicketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 恢复预测式外呼活动
//
// @param request - ResumeCampaignRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResumeCampaignResponse
func (client *Client) ResumeCampaignWithOptions(request *ResumeCampaignRequest, runtime *util.RuntimeOptions) (_result *ResumeCampaignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CampaignId)) {
		query["CampaignId"] = request.CampaignId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResumeCampaign"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResumeCampaignResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 恢复预测式外呼活动
//
// @param request - ResumeCampaignRequest
//
// @return ResumeCampaignResponse
func (client *Client) ResumeCampaign(request *ResumeCampaignRequest) (_result *ResumeCampaignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResumeCampaignResponse{}
	_body, _err := client.ResumeCampaignWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RetrieveCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RetrieveCallResponse
func (client *Client) RetrieveCallWithOptions(request *RetrieveCallRequest, runtime *util.RuntimeOptions) (_result *RetrieveCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RetrieveCall"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RetrieveCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RetrieveCallRequest
//
// @return RetrieveCallResponse
func (client *Client) RetrieveCall(request *RetrieveCallRequest) (_result *RetrieveCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RetrieveCallResponse{}
	_body, _err := client.RetrieveCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SaveDocumentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveDocumentResponse
func (client *Client) SaveDocumentWithOptions(request *SaveDocumentRequest, runtime *util.RuntimeOptions) (_result *SaveDocumentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocumentId)) {
		body["DocumentId"] = request.DocumentId
	}

	if !tea.BoolValue(util.IsUnset(request.DocumentJson)) {
		body["DocumentJson"] = request.DocumentJson
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		body["RequestId"] = request.RequestId
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveDocument"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveDocumentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SaveDocumentRequest
//
// @return SaveDocumentResponse
func (client *Client) SaveDocument(request *SaveDocumentRequest) (_result *SaveDocumentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveDocumentResponse{}
	_body, _err := client.SaveDocumentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SaveRTCStatsV2Request
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveRTCStatsV2Response
func (client *Client) SaveRTCStatsV2WithOptions(request *SaveRTCStatsV2Request, runtime *util.RuntimeOptions) (_result *SaveRTCStatsV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallId)) {
		query["CallId"] = request.CallId
	}

	if !tea.BoolValue(util.IsUnset(request.GeneralInfo)) {
		query["GeneralInfo"] = request.GeneralInfo
	}

	if !tea.BoolValue(util.IsUnset(request.GoogAddress)) {
		query["GoogAddress"] = request.GoogAddress
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverReport)) {
		query["ReceiverReport"] = request.ReceiverReport
	}

	if !tea.BoolValue(util.IsUnset(request.SenderReport)) {
		query["SenderReport"] = request.SenderReport
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveRTCStatsV2"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveRTCStatsV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SaveRTCStatsV2Request
//
// @return SaveRTCStatsV2Response
func (client *Client) SaveRTCStatsV2(request *SaveRTCStatsV2Request) (_result *SaveRTCStatsV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveRTCStatsV2Response{}
	_body, _err := client.SaveRTCStatsV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SaveTerminalLogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveTerminalLogResponse
func (client *Client) SaveTerminalLogWithOptions(request *SaveTerminalLogRequest, runtime *util.RuntimeOptions) (_result *SaveTerminalLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.CallId)) {
		query["CallId"] = request.CallId
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.DataType)) {
		query["DataType"] = request.DataType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.MethodName)) {
		query["MethodName"] = request.MethodName
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.UniqueRequestId)) {
		query["UniqueRequestId"] = request.UniqueRequestId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveTerminalLog"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveTerminalLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SaveTerminalLogRequest
//
// @return SaveTerminalLogResponse
func (client *Client) SaveTerminalLog(request *SaveTerminalLogRequest) (_result *SaveTerminalLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveTerminalLogResponse{}
	_body, _err := client.SaveTerminalLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SaveWebRTCStatsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveWebRTCStatsResponse
func (client *Client) SaveWebRTCStatsWithOptions(request *SaveWebRTCStatsRequest, runtime *util.RuntimeOptions) (_result *SaveWebRTCStatsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallId)) {
		query["CallId"] = request.CallId
	}

	if !tea.BoolValue(util.IsUnset(request.GeneralInfo)) {
		query["GeneralInfo"] = request.GeneralInfo
	}

	if !tea.BoolValue(util.IsUnset(request.GoogAddress)) {
		query["GoogAddress"] = request.GoogAddress
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverReport)) {
		query["ReceiverReport"] = request.ReceiverReport
	}

	if !tea.BoolValue(util.IsUnset(request.SenderReport)) {
		query["SenderReport"] = request.SenderReport
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveWebRTCStats"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveWebRTCStatsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SaveWebRTCStatsRequest
//
// @return SaveWebRTCStatsResponse
func (client *Client) SaveWebRTCStats(request *SaveWebRTCStatsRequest) (_result *SaveWebRTCStatsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveWebRTCStatsResponse{}
	_body, _err := client.SaveWebRTCStatsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SaveWebRtcInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveWebRtcInfoResponse
func (client *Client) SaveWebRtcInfoWithOptions(request *SaveWebRtcInfoRequest, runtime *util.RuntimeOptions) (_result *SaveWebRtcInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallId)) {
		query["CallId"] = request.CallId
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.ContentType)) {
		query["ContentType"] = request.ContentType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveWebRtcInfo"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveWebRtcInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SaveWebRtcInfoRequest
//
// @return SaveWebRtcInfoResponse
func (client *Client) SaveWebRtcInfo(request *SaveWebRtcInfoRequest) (_result *SaveWebRtcInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveWebRtcInfoResponse{}
	_body, _err := client.SaveWebRtcInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SendDtmfSignalingRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendDtmfSignalingResponse
func (client *Client) SendDtmfSignalingWithOptions(request *SendDtmfSignalingRequest, runtime *util.RuntimeOptions) (_result *SendDtmfSignalingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.Dtmf)) {
		query["Dtmf"] = request.Dtmf
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendDtmfSignaling"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendDtmfSignalingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SendDtmfSignalingRequest
//
// @return SendDtmfSignalingResponse
func (client *Client) SendDtmfSignaling(request *SendDtmfSignalingRequest) (_result *SendDtmfSignalingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendDtmfSignalingResponse{}
	_body, _err := client.SendDtmfSignalingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SignInGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SignInGroupResponse
func (client *Client) SignInGroupWithOptions(request *SignInGroupRequest, runtime *util.RuntimeOptions) (_result *SignInGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Additivity)) {
		query["Additivity"] = request.Additivity
	}

	if !tea.BoolValue(util.IsUnset(request.ChatDeviceId)) {
		query["ChatDeviceId"] = request.ChatDeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SignedSkillGroupIdList)) {
		query["SignedSkillGroupIdList"] = request.SignedSkillGroupIdList
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SignInGroup"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SignInGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SignInGroupRequest
//
// @return SignInGroupResponse
func (client *Client) SignInGroup(request *SignInGroupRequest) (_result *SignInGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SignInGroupResponse{}
	_body, _err := client.SignInGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SignOutGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SignOutGroupResponse
func (client *Client) SignOutGroupWithOptions(request *SignOutGroupRequest, runtime *util.RuntimeOptions) (_result *SignOutGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SignOutGroup"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SignOutGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SignOutGroupRequest
//
// @return SignOutGroupResponse
func (client *Client) SignOutGroup(request *SignOutGroupRequest) (_result *SignOutGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SignOutGroupResponse{}
	_body, _err := client.SignOutGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StartBack2BackCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartBack2BackCallResponse
func (client *Client) StartBack2BackCallWithOptions(request *StartBack2BackCallRequest, runtime *util.RuntimeOptions) (_result *StartBack2BackCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdditionalBroker)) {
		query["AdditionalBroker"] = request.AdditionalBroker
	}

	if !tea.BoolValue(util.IsUnset(request.Broker)) {
		query["Broker"] = request.Broker
	}

	if !tea.BoolValue(util.IsUnset(request.Callee)) {
		query["Callee"] = request.Callee
	}

	if !tea.BoolValue(util.IsUnset(request.Caller)) {
		query["Caller"] = request.Caller
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.TimeoutSeconds)) {
		query["TimeoutSeconds"] = request.TimeoutSeconds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartBack2BackCall"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartBack2BackCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StartBack2BackCallRequest
//
// @return StartBack2BackCallResponse
func (client *Client) StartBack2BackCall(request *StartBack2BackCallRequest) (_result *StartBack2BackCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartBack2BackCallResponse{}
	_body, _err := client.StartBack2BackCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - StartChatRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartChatResponse
func (client *Client) StartChatWithOptions(tmpReq *StartChatRequest, runtime *util.RuntimeOptions) (_result *StartChatResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StartChatShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.UserList)) {
		request.UserListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UserList, tea.String("UserList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessChannelId)) {
		query["AccessChannelId"] = request.AccessChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	if !tea.BoolValue(util.IsUnset(request.UserListShrink)) {
		query["UserList"] = request.UserListShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartChat"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartChatResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StartChatRequest
//
// @return StartChatResponse
func (client *Client) StartChat(request *StartChatRequest) (_result *StartChatResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartChatResponse{}
	_body, _err := client.StartChatWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StartConferenceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartConferenceResponse
func (client *Client) StartConferenceWithOptions(request *StartConferenceRequest, runtime *util.RuntimeOptions) (_result *StartConferenceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ParticipantListJson)) {
		query["ParticipantListJson"] = request.ParticipantListJson
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.TimeoutSeconds)) {
		query["TimeoutSeconds"] = request.TimeoutSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartConference"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartConferenceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StartConferenceRequest
//
// @return StartConferenceResponse
func (client *Client) StartConference(request *StartConferenceRequest) (_result *StartConferenceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartConferenceResponse{}
	_body, _err := client.StartConferenceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StartEditContactFlowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartEditContactFlowResponse
func (client *Client) StartEditContactFlowWithOptions(request *StartEditContactFlowRequest, runtime *util.RuntimeOptions) (_result *StartEditContactFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartEditContactFlow"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartEditContactFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StartEditContactFlowRequest
//
// @return StartEditContactFlowResponse
func (client *Client) StartEditContactFlow(request *StartEditContactFlowRequest) (_result *StartEditContactFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartEditContactFlowResponse{}
	_body, _err := client.StartEditContactFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StartPredictiveCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartPredictiveCallResponse
func (client *Client) StartPredictiveCallWithOptions(request *StartPredictiveCallRequest, runtime *util.RuntimeOptions) (_result *StartPredictiveCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Callee)) {
		query["Callee"] = request.Callee
	}

	if !tea.BoolValue(util.IsUnset(request.Caller)) {
		query["Caller"] = request.Caller
	}

	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactFlowVariables)) {
		query["ContactFlowVariables"] = request.ContactFlowVariables
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MaskedCallee)) {
		query["MaskedCallee"] = request.MaskedCallee
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.TimeoutSeconds)) {
		query["TimeoutSeconds"] = request.TimeoutSeconds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartPredictiveCall"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartPredictiveCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StartPredictiveCallRequest
//
// @return StartPredictiveCallResponse
func (client *Client) StartPredictiveCall(request *StartPredictiveCallRequest) (_result *StartPredictiveCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartPredictiveCallResponse{}
	_body, _err := client.StartPredictiveCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 发起隐私呼叫
//
// @param request - StartPrivacyCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartPrivacyCallResponse
func (client *Client) StartPrivacyCallWithOptions(request *StartPrivacyCallRequest, runtime *util.RuntimeOptions) (_result *StartPrivacyCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Callee)) {
		query["Callee"] = request.Callee
	}

	if !tea.BoolValue(util.IsUnset(request.Caller)) {
		query["Caller"] = request.Caller
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartPrivacyCall"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartPrivacyCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 发起隐私呼叫
//
// @param request - StartPrivacyCallRequest
//
// @return StartPrivacyCallResponse
func (client *Client) StartPrivacyCall(request *StartPrivacyCallRequest) (_result *StartPrivacyCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartPrivacyCallResponse{}
	_body, _err := client.StartPrivacyCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交预测式外呼活动
//
// @param request - SubmitCampaignRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitCampaignResponse
func (client *Client) SubmitCampaignWithOptions(request *SubmitCampaignRequest, runtime *util.RuntimeOptions) (_result *SubmitCampaignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CampaignId)) {
		query["CampaignId"] = request.CampaignId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitCampaign"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitCampaignResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交预测式外呼活动
//
// @param request - SubmitCampaignRequest
//
// @return SubmitCampaignResponse
func (client *Client) SubmitCampaign(request *SubmitCampaignRequest) (_result *SubmitCampaignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitCampaignResponse{}
	_body, _err := client.SubmitCampaignWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SwitchToConferenceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SwitchToConferenceResponse
func (client *Client) SwitchToConferenceWithOptions(request *SwitchToConferenceRequest, runtime *util.RuntimeOptions) (_result *SwitchToConferenceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SwitchToConference"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SwitchToConferenceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SwitchToConferenceRequest
//
// @return SwitchToConferenceResponse
func (client *Client) SwitchToConference(request *SwitchToConferenceRequest) (_result *SwitchToConferenceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchToConferenceResponse{}
	_body, _err := client.SwitchToConferenceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - TakeBreakRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TakeBreakResponse
func (client *Client) TakeBreakWithOptions(request *TakeBreakRequest, runtime *util.RuntimeOptions) (_result *TakeBreakResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Code)) {
		query["Code"] = request.Code
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TakeBreak"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TakeBreakResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - TakeBreakRequest
//
// @return TakeBreakResponse
func (client *Client) TakeBreak(request *TakeBreakRequest) (_result *TakeBreakResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TakeBreakResponse{}
	_body, _err := client.TakeBreakWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - TerminateTicketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TerminateTicketResponse
func (client *Client) TerminateTicketWithOptions(request *TerminateTicketRequest, runtime *util.RuntimeOptions) (_result *TerminateTicketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TicketId)) {
		query["TicketId"] = request.TicketId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TerminateTicket"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TerminateTicketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - TerminateTicketRequest
//
// @return TerminateTicketResponse
func (client *Client) TerminateTicket(request *TerminateTicketRequest) (_result *TerminateTicketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TerminateTicketResponse{}
	_body, _err := client.TerminateTicketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - TransferTicketTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TransferTicketTaskResponse
func (client *Client) TransferTicketTaskWithOptions(request *TransferTicketTaskRequest, runtime *util.RuntimeOptions) (_result *TransferTicketTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Assignee)) {
		query["Assignee"] = request.Assignee
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TicketId)) {
		query["TicketId"] = request.TicketId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TransferTicketTask"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TransferTicketTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - TransferTicketTaskRequest
//
// @return TransferTicketTaskResponse
func (client *Client) TransferTicketTask(request *TransferTicketTaskRequest) (_result *TransferTicketTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TransferTicketTaskResponse{}
	_body, _err := client.TransferTicketTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UnmuteCallRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnmuteCallResponse
func (client *Client) UnmuteCallWithOptions(request *UnmuteCallRequest, runtime *util.RuntimeOptions) (_result *UnmuteCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnmuteCall"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnmuteCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UnmuteCallRequest
//
// @return UnmuteCallResponse
func (client *Client) UnmuteCall(request *UnmuteCallRequest) (_result *UnmuteCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnmuteCallResponse{}
	_body, _err := client.UnmuteCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除注册设备
//
// @param request - UnregisterDeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnregisterDeviceResponse
func (client *Client) UnregisterDeviceWithOptions(request *UnregisterDeviceRequest, runtime *util.RuntimeOptions) (_result *UnregisterDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnregisterDevice"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnregisterDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除注册设备
//
// @param request - UnregisterDeviceRequest
//
// @return UnregisterDeviceResponse
func (client *Client) UnregisterDevice(request *UnregisterDeviceRequest) (_result *UnregisterDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnregisterDeviceResponse{}
	_body, _err := client.UnregisterDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Update campaign
//
// @param request - UpdateCampaignRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCampaignResponse
func (client *Client) UpdateCampaignWithOptions(request *UpdateCampaignRequest, runtime *util.RuntimeOptions) (_result *UpdateCampaignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallableTime)) {
		query["CallableTime"] = request.CallableTime
	}

	if !tea.BoolValue(util.IsUnset(request.CampaignId)) {
		query["CampaignId"] = request.CampaignId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyParameters)) {
		query["StrategyParameters"] = request.StrategyParameters
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCampaign"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateCampaignResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Update campaign
//
// @param request - UpdateCampaignRequest
//
// @return UpdateCampaignResponse
func (client *Client) UpdateCampaign(request *UpdateCampaignRequest) (_result *UpdateCampaignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCampaignResponse{}
	_body, _err := client.UpdateCampaignWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateConfigItemsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateConfigItemsResponse
func (client *Client) UpdateConfigItemsWithOptions(request *UpdateConfigItemsRequest, runtime *util.RuntimeOptions) (_result *UpdateConfigItemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigItems)) {
		query["ConfigItems"] = request.ConfigItems
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ObjectId)) {
		query["ObjectId"] = request.ObjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ObjectType)) {
		query["ObjectType"] = request.ObjectType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateConfigItems"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateConfigItemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateConfigItemsRequest
//
// @return UpdateConfigItemsResponse
func (client *Client) UpdateConfigItems(request *UpdateConfigItemsRequest) (_result *UpdateConfigItemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateConfigItemsResponse{}
	_body, _err := client.UpdateConfigItemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - UpdateSchemaPropertyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateSchemaPropertyResponse
func (client *Client) UpdateSchemaPropertyWithOptions(tmpReq *UpdateSchemaPropertyRequest, runtime *util.RuntimeOptions) (_result *UpdateSchemaPropertyResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateSchemaPropertyShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Property)) {
		request.PropertyShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Property, tea.String("Property"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PropertyShrink)) {
		body["Property"] = request.PropertyShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		body["RequestId"] = request.RequestId
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSchemaProperty"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSchemaPropertyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateSchemaPropertyRequest
//
// @return UpdateSchemaPropertyResponse
func (client *Client) UpdateSchemaProperty(request *UpdateSchemaPropertyRequest) (_result *UpdateSchemaPropertyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSchemaPropertyResponse{}
	_body, _err := client.UpdateSchemaPropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateTicketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateTicketResponse
func (client *Client) UpdateTicketWithOptions(request *UpdateTicketRequest, runtime *util.RuntimeOptions) (_result *UpdateTicketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Context)) {
		query["Context"] = request.Context
	}

	if !tea.BoolValue(util.IsUnset(request.CustomerId)) {
		query["CustomerId"] = request.CustomerId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TicketId)) {
		query["TicketId"] = request.TicketId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTicket"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTicketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateTicketRequest
//
// @return UpdateTicketResponse
func (client *Client) UpdateTicket(request *UpdateTicketRequest) (_result *UpdateTicketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTicketResponse{}
	_body, _err := client.UpdateTicketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - WithdrawTicketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return WithdrawTicketResponse
func (client *Client) WithdrawTicketWithOptions(request *WithdrawTicketRequest, runtime *util.RuntimeOptions) (_result *WithdrawTicketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TicketId)) {
		query["TicketId"] = request.TicketId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("WithdrawTicket"),
		Version:     tea.String("2020-07-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &WithdrawTicketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - WithdrawTicketRequest
//
// @return WithdrawTicketResponse
func (client *Client) WithdrawTicket(request *WithdrawTicketRequest) (_result *WithdrawTicketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &WithdrawTicketResponse{}
	_body, _err := client.WithdrawTicketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
