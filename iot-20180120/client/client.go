// This file is auto-generated, don't edit it. Thanks.
package client

import (
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	rpcutil "github.com/alibabacloud-go/tea-rpc-utils/service"
	rpc "github.com/alibabacloud-go/tea-rpc/client"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
)

type ListAnalyticsDataRequest struct {
	IotInstanceId *string                              `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty" require:"true"`
	IsoId         *string                              `json:"IsoId,omitempty" xml:"IsoId,omitempty"`
	ApiPath       *string                              `json:"ApiPath,omitempty" xml:"ApiPath,omitempty" require:"true"`
	PageSize      *int                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Condition     []*ListAnalyticsDataRequestCondition `json:"Condition,omitempty" xml:"Condition,omitempty" type:"Repeated"`
	PageNum       *int                                 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
}

func (s ListAnalyticsDataRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAnalyticsDataRequest) GoString() string {
	return s.String()
}

func (s *ListAnalyticsDataRequest) SetIotInstanceId(v string) *ListAnalyticsDataRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListAnalyticsDataRequest) SetIsoId(v string) *ListAnalyticsDataRequest {
	s.IsoId = &v
	return s
}

func (s *ListAnalyticsDataRequest) SetApiPath(v string) *ListAnalyticsDataRequest {
	s.ApiPath = &v
	return s
}

func (s *ListAnalyticsDataRequest) SetPageSize(v int) *ListAnalyticsDataRequest {
	s.PageSize = &v
	return s
}

func (s *ListAnalyticsDataRequest) SetCondition(v []*ListAnalyticsDataRequestCondition) *ListAnalyticsDataRequest {
	s.Condition = v
	return s
}

func (s *ListAnalyticsDataRequest) SetPageNum(v int) *ListAnalyticsDataRequest {
	s.PageNum = &v
	return s
}

type ListAnalyticsDataRequestCondition struct {
	FieldName    *string `json:"FieldName,omitempty" xml:"FieldName,omitempty" require:"true"`
	Operate      *string `json:"Operate,omitempty" xml:"Operate,omitempty" require:"true"`
	Value        *string `json:"Value,omitempty" xml:"Value,omitempty"`
	BetweenStart *string `json:"BetweenStart,omitempty" xml:"BetweenStart,omitempty"`
	BetweenEnd   *string `json:"BetweenEnd,omitempty" xml:"BetweenEnd,omitempty"`
}

func (s ListAnalyticsDataRequestCondition) String() string {
	return tea.Prettify(s)
}

func (s ListAnalyticsDataRequestCondition) GoString() string {
	return s.String()
}

func (s *ListAnalyticsDataRequestCondition) SetFieldName(v string) *ListAnalyticsDataRequestCondition {
	s.FieldName = &v
	return s
}

func (s *ListAnalyticsDataRequestCondition) SetOperate(v string) *ListAnalyticsDataRequestCondition {
	s.Operate = &v
	return s
}

func (s *ListAnalyticsDataRequestCondition) SetValue(v string) *ListAnalyticsDataRequestCondition {
	s.Value = &v
	return s
}

func (s *ListAnalyticsDataRequestCondition) SetBetweenStart(v string) *ListAnalyticsDataRequestCondition {
	s.BetweenStart = &v
	return s
}

func (s *ListAnalyticsDataRequestCondition) SetBetweenEnd(v string) *ListAnalyticsDataRequestCondition {
	s.BetweenEnd = &v
	return s
}

type ListAnalyticsDataResponse struct {
	RequestId    *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                          `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *ListAnalyticsDataResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListAnalyticsDataResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAnalyticsDataResponse) GoString() string {
	return s.String()
}

func (s *ListAnalyticsDataResponse) SetRequestId(v string) *ListAnalyticsDataResponse {
	s.RequestId = &v
	return s
}

func (s *ListAnalyticsDataResponse) SetSuccess(v bool) *ListAnalyticsDataResponse {
	s.Success = &v
	return s
}

func (s *ListAnalyticsDataResponse) SetCode(v string) *ListAnalyticsDataResponse {
	s.Code = &v
	return s
}

func (s *ListAnalyticsDataResponse) SetErrorMessage(v string) *ListAnalyticsDataResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListAnalyticsDataResponse) SetData(v *ListAnalyticsDataResponseData) *ListAnalyticsDataResponse {
	s.Data = v
	return s
}

type ListAnalyticsDataResponseData struct {
	HasNext    *bool   `json:"HasNext,omitempty" xml:"HasNext,omitempty" require:"true"`
	ResultJson *string `json:"ResultJson,omitempty" xml:"ResultJson,omitempty" require:"true"`
	Count      *int64  `json:"Count,omitempty" xml:"Count,omitempty" require:"true"`
	PageNum    *int    `json:"PageNum,omitempty" xml:"PageNum,omitempty" require:"true"`
	PageSize   *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
}

func (s ListAnalyticsDataResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListAnalyticsDataResponseData) GoString() string {
	return s.String()
}

func (s *ListAnalyticsDataResponseData) SetHasNext(v bool) *ListAnalyticsDataResponseData {
	s.HasNext = &v
	return s
}

func (s *ListAnalyticsDataResponseData) SetResultJson(v string) *ListAnalyticsDataResponseData {
	s.ResultJson = &v
	return s
}

func (s *ListAnalyticsDataResponseData) SetCount(v int64) *ListAnalyticsDataResponseData {
	s.Count = &v
	return s
}

func (s *ListAnalyticsDataResponseData) SetPageNum(v int) *ListAnalyticsDataResponseData {
	s.PageNum = &v
	return s
}

func (s *ListAnalyticsDataResponseData) SetPageSize(v int) *ListAnalyticsDataResponseData {
	s.PageSize = &v
	return s
}

type BatchBindDevicesIntoProjectRequest struct {
	IotInstanceId *string                                      `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Devices       []*BatchBindDevicesIntoProjectRequestDevices `json:"Devices,omitempty" xml:"Devices,omitempty" require:"true" type:"Repeated"`
	ProjectId     *string                                      `json:"ProjectId,omitempty" xml:"ProjectId,omitempty" require:"true"`
}

func (s BatchBindDevicesIntoProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchBindDevicesIntoProjectRequest) GoString() string {
	return s.String()
}

func (s *BatchBindDevicesIntoProjectRequest) SetIotInstanceId(v string) *BatchBindDevicesIntoProjectRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchBindDevicesIntoProjectRequest) SetDevices(v []*BatchBindDevicesIntoProjectRequestDevices) *BatchBindDevicesIntoProjectRequest {
	s.Devices = v
	return s
}

func (s *BatchBindDevicesIntoProjectRequest) SetProjectId(v string) *BatchBindDevicesIntoProjectRequest {
	s.ProjectId = &v
	return s
}

type BatchBindDevicesIntoProjectRequestDevices struct {
	ProductKey *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
}

func (s BatchBindDevicesIntoProjectRequestDevices) String() string {
	return tea.Prettify(s)
}

func (s BatchBindDevicesIntoProjectRequestDevices) GoString() string {
	return s.String()
}

func (s *BatchBindDevicesIntoProjectRequestDevices) SetProductKey(v string) *BatchBindDevicesIntoProjectRequestDevices {
	s.ProductKey = &v
	return s
}

func (s *BatchBindDevicesIntoProjectRequestDevices) SetDeviceName(v string) *BatchBindDevicesIntoProjectRequestDevices {
	s.DeviceName = &v
	return s
}

type BatchBindDevicesIntoProjectResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *bool   `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
}

func (s BatchBindDevicesIntoProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchBindDevicesIntoProjectResponse) GoString() string {
	return s.String()
}

func (s *BatchBindDevicesIntoProjectResponse) SetRequestId(v string) *BatchBindDevicesIntoProjectResponse {
	s.RequestId = &v
	return s
}

func (s *BatchBindDevicesIntoProjectResponse) SetSuccess(v bool) *BatchBindDevicesIntoProjectResponse {
	s.Success = &v
	return s
}

func (s *BatchBindDevicesIntoProjectResponse) SetCode(v string) *BatchBindDevicesIntoProjectResponse {
	s.Code = &v
	return s
}

func (s *BatchBindDevicesIntoProjectResponse) SetErrorMessage(v string) *BatchBindDevicesIntoProjectResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchBindDevicesIntoProjectResponse) SetData(v bool) *BatchBindDevicesIntoProjectResponse {
	s.Data = &v
	return s
}

type BatchBindProductsIntoProjectRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKeys   []*string `json:"ProductKeys,omitempty" xml:"ProductKeys,omitempty" require:"true" type:"Repeated"`
	ProjectId     *string   `json:"ProjectId,omitempty" xml:"ProjectId,omitempty" require:"true"`
}

func (s BatchBindProductsIntoProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchBindProductsIntoProjectRequest) GoString() string {
	return s.String()
}

func (s *BatchBindProductsIntoProjectRequest) SetIotInstanceId(v string) *BatchBindProductsIntoProjectRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchBindProductsIntoProjectRequest) SetProductKeys(v []*string) *BatchBindProductsIntoProjectRequest {
	s.ProductKeys = v
	return s
}

func (s *BatchBindProductsIntoProjectRequest) SetProjectId(v string) *BatchBindProductsIntoProjectRequest {
	s.ProjectId = &v
	return s
}

type BatchBindProductsIntoProjectResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *bool   `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
}

func (s BatchBindProductsIntoProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchBindProductsIntoProjectResponse) GoString() string {
	return s.String()
}

func (s *BatchBindProductsIntoProjectResponse) SetRequestId(v string) *BatchBindProductsIntoProjectResponse {
	s.RequestId = &v
	return s
}

func (s *BatchBindProductsIntoProjectResponse) SetSuccess(v bool) *BatchBindProductsIntoProjectResponse {
	s.Success = &v
	return s
}

func (s *BatchBindProductsIntoProjectResponse) SetCode(v string) *BatchBindProductsIntoProjectResponse {
	s.Code = &v
	return s
}

func (s *BatchBindProductsIntoProjectResponse) SetErrorMessage(v string) *BatchBindProductsIntoProjectResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchBindProductsIntoProjectResponse) SetData(v bool) *BatchBindProductsIntoProjectResponse {
	s.Data = &v
	return s
}

type BatchUnbindProjectDevicesRequest struct {
	Devices       []*BatchUnbindProjectDevicesRequestDevices `json:"Devices,omitempty" xml:"Devices,omitempty" require:"true" type:"Repeated"`
	IotInstanceId *string                                    `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProjectId     *string                                    `json:"ProjectId,omitempty" xml:"ProjectId,omitempty" require:"true"`
}

func (s BatchUnbindProjectDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindProjectDevicesRequest) GoString() string {
	return s.String()
}

func (s *BatchUnbindProjectDevicesRequest) SetDevices(v []*BatchUnbindProjectDevicesRequestDevices) *BatchUnbindProjectDevicesRequest {
	s.Devices = v
	return s
}

func (s *BatchUnbindProjectDevicesRequest) SetIotInstanceId(v string) *BatchUnbindProjectDevicesRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchUnbindProjectDevicesRequest) SetProjectId(v string) *BatchUnbindProjectDevicesRequest {
	s.ProjectId = &v
	return s
}

type BatchUnbindProjectDevicesRequestDevices struct {
	ProductKey *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
}

func (s BatchUnbindProjectDevicesRequestDevices) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindProjectDevicesRequestDevices) GoString() string {
	return s.String()
}

func (s *BatchUnbindProjectDevicesRequestDevices) SetProductKey(v string) *BatchUnbindProjectDevicesRequestDevices {
	s.ProductKey = &v
	return s
}

func (s *BatchUnbindProjectDevicesRequestDevices) SetDeviceName(v string) *BatchUnbindProjectDevicesRequestDevices {
	s.DeviceName = &v
	return s
}

type BatchUnbindProjectDevicesResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *bool   `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
}

func (s BatchUnbindProjectDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindProjectDevicesResponse) GoString() string {
	return s.String()
}

func (s *BatchUnbindProjectDevicesResponse) SetRequestId(v string) *BatchUnbindProjectDevicesResponse {
	s.RequestId = &v
	return s
}

func (s *BatchUnbindProjectDevicesResponse) SetSuccess(v bool) *BatchUnbindProjectDevicesResponse {
	s.Success = &v
	return s
}

func (s *BatchUnbindProjectDevicesResponse) SetCode(v string) *BatchUnbindProjectDevicesResponse {
	s.Code = &v
	return s
}

func (s *BatchUnbindProjectDevicesResponse) SetErrorMessage(v string) *BatchUnbindProjectDevicesResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchUnbindProjectDevicesResponse) SetData(v bool) *BatchUnbindProjectDevicesResponse {
	s.Data = &v
	return s
}

type BatchUnbindProjectProductsRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKeys   []*string `json:"ProductKeys,omitempty" xml:"ProductKeys,omitempty" require:"true" type:"Repeated"`
	ProjectId     *string   `json:"ProjectId,omitempty" xml:"ProjectId,omitempty" require:"true"`
}

func (s BatchUnbindProjectProductsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindProjectProductsRequest) GoString() string {
	return s.String()
}

func (s *BatchUnbindProjectProductsRequest) SetIotInstanceId(v string) *BatchUnbindProjectProductsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchUnbindProjectProductsRequest) SetProductKeys(v []*string) *BatchUnbindProjectProductsRequest {
	s.ProductKeys = v
	return s
}

func (s *BatchUnbindProjectProductsRequest) SetProjectId(v string) *BatchUnbindProjectProductsRequest {
	s.ProjectId = &v
	return s
}

type BatchUnbindProjectProductsResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *bool   `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
}

func (s BatchUnbindProjectProductsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindProjectProductsResponse) GoString() string {
	return s.String()
}

func (s *BatchUnbindProjectProductsResponse) SetRequestId(v string) *BatchUnbindProjectProductsResponse {
	s.RequestId = &v
	return s
}

func (s *BatchUnbindProjectProductsResponse) SetSuccess(v bool) *BatchUnbindProjectProductsResponse {
	s.Success = &v
	return s
}

func (s *BatchUnbindProjectProductsResponse) SetCode(v string) *BatchUnbindProjectProductsResponse {
	s.Code = &v
	return s
}

func (s *BatchUnbindProjectProductsResponse) SetErrorMessage(v string) *BatchUnbindProjectProductsResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchUnbindProjectProductsResponse) SetData(v bool) *BatchUnbindProjectProductsResponse {
	s.Data = &v
	return s
}

type SyncSpeechByCombinationRequest struct {
	CombinationList []*string `json:"CombinationList,omitempty" xml:"CombinationList,omitempty" require:"true" type:"Repeated"`
	IotId           *string   `json:"IotId,omitempty" xml:"IotId,omitempty"`
	ProductKey      *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName      *string   `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotInstanceId   *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
}

func (s SyncSpeechByCombinationRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncSpeechByCombinationRequest) GoString() string {
	return s.String()
}

func (s *SyncSpeechByCombinationRequest) SetCombinationList(v []*string) *SyncSpeechByCombinationRequest {
	s.CombinationList = v
	return s
}

func (s *SyncSpeechByCombinationRequest) SetIotId(v string) *SyncSpeechByCombinationRequest {
	s.IotId = &v
	return s
}

func (s *SyncSpeechByCombinationRequest) SetProductKey(v string) *SyncSpeechByCombinationRequest {
	s.ProductKey = &v
	return s
}

func (s *SyncSpeechByCombinationRequest) SetDeviceName(v string) *SyncSpeechByCombinationRequest {
	s.DeviceName = &v
	return s
}

func (s *SyncSpeechByCombinationRequest) SetIotInstanceId(v string) *SyncSpeechByCombinationRequest {
	s.IotInstanceId = &v
	return s
}

type SyncSpeechByCombinationResponse struct {
	RequestId    *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *SyncSpeechByCombinationResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s SyncSpeechByCombinationResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncSpeechByCombinationResponse) GoString() string {
	return s.String()
}

func (s *SyncSpeechByCombinationResponse) SetRequestId(v string) *SyncSpeechByCombinationResponse {
	s.RequestId = &v
	return s
}

func (s *SyncSpeechByCombinationResponse) SetSuccess(v bool) *SyncSpeechByCombinationResponse {
	s.Success = &v
	return s
}

func (s *SyncSpeechByCombinationResponse) SetCode(v string) *SyncSpeechByCombinationResponse {
	s.Code = &v
	return s
}

func (s *SyncSpeechByCombinationResponse) SetErrorMessage(v string) *SyncSpeechByCombinationResponse {
	s.ErrorMessage = &v
	return s
}

func (s *SyncSpeechByCombinationResponse) SetData(v *SyncSpeechByCombinationResponseData) *SyncSpeechByCombinationResponse {
	s.Data = v
	return s
}

type SyncSpeechByCombinationResponseData struct {
	Id         *string `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	RetryCount *int    `json:"RetryCount,omitempty" xml:"RetryCount,omitempty" require:"true"`
}

func (s SyncSpeechByCombinationResponseData) String() string {
	return tea.Prettify(s)
}

func (s SyncSpeechByCombinationResponseData) GoString() string {
	return s.String()
}

func (s *SyncSpeechByCombinationResponseData) SetId(v string) *SyncSpeechByCombinationResponseData {
	s.Id = &v
	return s
}

func (s *SyncSpeechByCombinationResponseData) SetRetryCount(v int) *SyncSpeechByCombinationResponseData {
	s.RetryCount = &v
	return s
}

type OpenIotServiceRequest struct {
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s OpenIotServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenIotServiceRequest) GoString() string {
	return s.String()
}

func (s *OpenIotServiceRequest) SetOwnerId(v int64) *OpenIotServiceRequest {
	s.OwnerId = &v
	return s
}

type OpenIotServiceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	OrderId   *string `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
}

func (s OpenIotServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenIotServiceResponse) GoString() string {
	return s.String()
}

func (s *OpenIotServiceResponse) SetRequestId(v string) *OpenIotServiceResponse {
	s.RequestId = &v
	return s
}

func (s *OpenIotServiceResponse) SetOrderId(v string) *OpenIotServiceResponse {
	s.OrderId = &v
	return s
}

type CreateRulengDistributeJobRequest struct {
	ProductKey       *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty" require:"true"`
	TargetInstanceId *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty" require:"true"`
}

func (s CreateRulengDistributeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRulengDistributeJobRequest) GoString() string {
	return s.String()
}

func (s *CreateRulengDistributeJobRequest) SetProductKey(v string) *CreateRulengDistributeJobRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateRulengDistributeJobRequest) SetSourceInstanceId(v string) *CreateRulengDistributeJobRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *CreateRulengDistributeJobRequest) SetTargetInstanceId(v string) *CreateRulengDistributeJobRequest {
	s.TargetInstanceId = &v
	return s
}

type CreateRulengDistributeJobResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s CreateRulengDistributeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRulengDistributeJobResponse) GoString() string {
	return s.String()
}

func (s *CreateRulengDistributeJobResponse) SetRequestId(v string) *CreateRulengDistributeJobResponse {
	s.RequestId = &v
	return s
}

func (s *CreateRulengDistributeJobResponse) SetSuccess(v bool) *CreateRulengDistributeJobResponse {
	s.Success = &v
	return s
}

func (s *CreateRulengDistributeJobResponse) SetCode(v string) *CreateRulengDistributeJobResponse {
	s.Code = &v
	return s
}

func (s *CreateRulengDistributeJobResponse) SetErrorMessage(v string) *CreateRulengDistributeJobResponse {
	s.ErrorMessage = &v
	return s
}

type ListTaskByPageRequest struct {
	IotInstanceId *string                `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *string                `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageNo        *string                `json:"PageNo,omitempty" xml:"PageNo,omitempty" require:"true"`
	JobId         *string                `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Device        map[string]interface{} `json:"Device,omitempty" xml:"Device,omitempty"`
	Status        *string                `json:"Status,omitempty" xml:"Status,omitempty"`
	DeviceName    *string                `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	JobName       *string                `json:"JobName,omitempty" xml:"JobName,omitempty"`
}

func (s ListTaskByPageRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTaskByPageRequest) GoString() string {
	return s.String()
}

func (s *ListTaskByPageRequest) SetIotInstanceId(v string) *ListTaskByPageRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListTaskByPageRequest) SetPageSize(v string) *ListTaskByPageRequest {
	s.PageSize = &v
	return s
}

func (s *ListTaskByPageRequest) SetPageNo(v string) *ListTaskByPageRequest {
	s.PageNo = &v
	return s
}

func (s *ListTaskByPageRequest) SetJobId(v string) *ListTaskByPageRequest {
	s.JobId = &v
	return s
}

func (s *ListTaskByPageRequest) SetDevice(v map[string]interface{}) *ListTaskByPageRequest {
	s.Device = v
	return s
}

func (s *ListTaskByPageRequest) SetStatus(v string) *ListTaskByPageRequest {
	s.Status = &v
	return s
}

func (s *ListTaskByPageRequest) SetDeviceName(v string) *ListTaskByPageRequest {
	s.DeviceName = &v
	return s
}

func (s *ListTaskByPageRequest) SetJobName(v string) *ListTaskByPageRequest {
	s.JobName = &v
	return s
}

type ListTaskByPageShrinkRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *string `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageNo        *string `json:"PageNo,omitempty" xml:"PageNo,omitempty" require:"true"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	DeviceShrink  *string `json:"Device,omitempty" xml:"Device,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	JobName       *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
}

func (s ListTaskByPageShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTaskByPageShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListTaskByPageShrinkRequest) SetIotInstanceId(v string) *ListTaskByPageShrinkRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListTaskByPageShrinkRequest) SetPageSize(v string) *ListTaskByPageShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *ListTaskByPageShrinkRequest) SetPageNo(v string) *ListTaskByPageShrinkRequest {
	s.PageNo = &v
	return s
}

func (s *ListTaskByPageShrinkRequest) SetJobId(v string) *ListTaskByPageShrinkRequest {
	s.JobId = &v
	return s
}

func (s *ListTaskByPageShrinkRequest) SetDeviceShrink(v string) *ListTaskByPageShrinkRequest {
	s.DeviceShrink = &v
	return s
}

func (s *ListTaskByPageShrinkRequest) SetStatus(v string) *ListTaskByPageShrinkRequest {
	s.Status = &v
	return s
}

func (s *ListTaskByPageShrinkRequest) SetDeviceName(v string) *ListTaskByPageShrinkRequest {
	s.DeviceName = &v
	return s
}

func (s *ListTaskByPageShrinkRequest) SetJobName(v string) *ListTaskByPageShrinkRequest {
	s.JobName = &v
	return s
}

type ListTaskByPageResponse struct {
	RequestId    *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                       `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Total        *int                        `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize     *int                        `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageCount    *int                        `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	Page         *int                        `json:"Page,omitempty" xml:"Page,omitempty" require:"true"`
	Data         *ListTaskByPageResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListTaskByPageResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTaskByPageResponse) GoString() string {
	return s.String()
}

func (s *ListTaskByPageResponse) SetRequestId(v string) *ListTaskByPageResponse {
	s.RequestId = &v
	return s
}

func (s *ListTaskByPageResponse) SetSuccess(v bool) *ListTaskByPageResponse {
	s.Success = &v
	return s
}

func (s *ListTaskByPageResponse) SetCode(v string) *ListTaskByPageResponse {
	s.Code = &v
	return s
}

func (s *ListTaskByPageResponse) SetErrorMessage(v string) *ListTaskByPageResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListTaskByPageResponse) SetTotal(v int) *ListTaskByPageResponse {
	s.Total = &v
	return s
}

func (s *ListTaskByPageResponse) SetPageSize(v int) *ListTaskByPageResponse {
	s.PageSize = &v
	return s
}

func (s *ListTaskByPageResponse) SetPageCount(v int) *ListTaskByPageResponse {
	s.PageCount = &v
	return s
}

func (s *ListTaskByPageResponse) SetPage(v int) *ListTaskByPageResponse {
	s.Page = &v
	return s
}

func (s *ListTaskByPageResponse) SetData(v *ListTaskByPageResponseData) *ListTaskByPageResponse {
	s.Data = v
	return s
}

type ListTaskByPageResponseData struct {
	Data []*ListTaskByPageResponseDataData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListTaskByPageResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListTaskByPageResponseData) GoString() string {
	return s.String()
}

func (s *ListTaskByPageResponseData) SetData(v []*ListTaskByPageResponseDataData) *ListTaskByPageResponseData {
	s.Data = v
	return s
}

type ListTaskByPageResponseDataData struct {
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
	JobName      *string `json:"JobName,omitempty" xml:"JobName,omitempty" require:"true"`
	TaskId       *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	IotId        *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	Progress     *int    `json:"Progress,omitempty" xml:"Progress,omitempty" require:"true"`
	UtcQueueTime *string `json:"UtcQueueTime,omitempty" xml:"UtcQueueTime,omitempty" require:"true"`
	UtcModified  *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty" require:"true"`
	StatusDetail *string `json:"StatusDetail,omitempty" xml:"StatusDetail,omitempty" require:"true"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	ProductName  *string `json:"ProductName,omitempty" xml:"ProductName,omitempty" require:"true"`
}

func (s ListTaskByPageResponseDataData) String() string {
	return tea.Prettify(s)
}

func (s ListTaskByPageResponseDataData) GoString() string {
	return s.String()
}

func (s *ListTaskByPageResponseDataData) SetJobId(v string) *ListTaskByPageResponseDataData {
	s.JobId = &v
	return s
}

func (s *ListTaskByPageResponseDataData) SetJobName(v string) *ListTaskByPageResponseDataData {
	s.JobName = &v
	return s
}

func (s *ListTaskByPageResponseDataData) SetTaskId(v string) *ListTaskByPageResponseDataData {
	s.TaskId = &v
	return s
}

func (s *ListTaskByPageResponseDataData) SetProductKey(v string) *ListTaskByPageResponseDataData {
	s.ProductKey = &v
	return s
}

func (s *ListTaskByPageResponseDataData) SetDeviceName(v string) *ListTaskByPageResponseDataData {
	s.DeviceName = &v
	return s
}

func (s *ListTaskByPageResponseDataData) SetIotId(v string) *ListTaskByPageResponseDataData {
	s.IotId = &v
	return s
}

func (s *ListTaskByPageResponseDataData) SetProgress(v int) *ListTaskByPageResponseDataData {
	s.Progress = &v
	return s
}

func (s *ListTaskByPageResponseDataData) SetUtcQueueTime(v string) *ListTaskByPageResponseDataData {
	s.UtcQueueTime = &v
	return s
}

func (s *ListTaskByPageResponseDataData) SetUtcModified(v string) *ListTaskByPageResponseDataData {
	s.UtcModified = &v
	return s
}

func (s *ListTaskByPageResponseDataData) SetStatusDetail(v string) *ListTaskByPageResponseDataData {
	s.StatusDetail = &v
	return s
}

func (s *ListTaskByPageResponseDataData) SetStatus(v string) *ListTaskByPageResponseDataData {
	s.Status = &v
	return s
}

func (s *ListTaskByPageResponseDataData) SetProductName(v string) *ListTaskByPageResponseDataData {
	s.ProductName = &v
	return s
}

type ListTaskRequest struct {
	IotInstanceId *string                `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Limit         *int                   `json:"Limit,omitempty" xml:"Limit,omitempty" require:"true"`
	JobId         *string                `json:"JobId,omitempty" xml:"JobId,omitempty"`
	NextToken     *string                `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	Device        map[string]interface{} `json:"Device,omitempty" xml:"Device,omitempty"`
	Status        *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTaskRequest) GoString() string {
	return s.String()
}

func (s *ListTaskRequest) SetIotInstanceId(v string) *ListTaskRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListTaskRequest) SetLimit(v int) *ListTaskRequest {
	s.Limit = &v
	return s
}

func (s *ListTaskRequest) SetJobId(v string) *ListTaskRequest {
	s.JobId = &v
	return s
}

func (s *ListTaskRequest) SetNextToken(v string) *ListTaskRequest {
	s.NextToken = &v
	return s
}

func (s *ListTaskRequest) SetDevice(v map[string]interface{}) *ListTaskRequest {
	s.Device = v
	return s
}

func (s *ListTaskRequest) SetStatus(v string) *ListTaskRequest {
	s.Status = &v
	return s
}

type ListTaskShrinkRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Limit         *int    `json:"Limit,omitempty" xml:"Limit,omitempty" require:"true"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	NextToken     *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	DeviceShrink  *string `json:"Device,omitempty" xml:"Device,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListTaskShrinkRequest) SetIotInstanceId(v string) *ListTaskShrinkRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListTaskShrinkRequest) SetLimit(v int) *ListTaskShrinkRequest {
	s.Limit = &v
	return s
}

func (s *ListTaskShrinkRequest) SetJobId(v string) *ListTaskShrinkRequest {
	s.JobId = &v
	return s
}

func (s *ListTaskShrinkRequest) SetNextToken(v string) *ListTaskShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *ListTaskShrinkRequest) SetDeviceShrink(v string) *ListTaskShrinkRequest {
	s.DeviceShrink = &v
	return s
}

func (s *ListTaskShrinkRequest) SetStatus(v string) *ListTaskShrinkRequest {
	s.Status = &v
	return s
}

type ListTaskResponse struct {
	RequestId    *string               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                 `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string               `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	NextToken    *string               `json:"NextToken,omitempty" xml:"NextToken,omitempty" require:"true"`
	Data         *ListTaskResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTaskResponse) GoString() string {
	return s.String()
}

func (s *ListTaskResponse) SetRequestId(v string) *ListTaskResponse {
	s.RequestId = &v
	return s
}

func (s *ListTaskResponse) SetSuccess(v bool) *ListTaskResponse {
	s.Success = &v
	return s
}

func (s *ListTaskResponse) SetCode(v string) *ListTaskResponse {
	s.Code = &v
	return s
}

func (s *ListTaskResponse) SetErrorMessage(v string) *ListTaskResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListTaskResponse) SetNextToken(v string) *ListTaskResponse {
	s.NextToken = &v
	return s
}

func (s *ListTaskResponse) SetData(v *ListTaskResponseData) *ListTaskResponse {
	s.Data = v
	return s
}

type ListTaskResponseData struct {
	Data []*ListTaskResponseDataData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListTaskResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListTaskResponseData) GoString() string {
	return s.String()
}

func (s *ListTaskResponseData) SetData(v []*ListTaskResponseDataData) *ListTaskResponseData {
	s.Data = v
	return s
}

type ListTaskResponseDataData struct {
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
	JobName      *string `json:"JobName,omitempty" xml:"JobName,omitempty" require:"true"`
	TaskId       *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	IotId        *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty" require:"true"`
	UtcQueueTime *string `json:"UtcQueueTime,omitempty" xml:"UtcQueueTime,omitempty" require:"true"`
	UtcModified  *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty" require:"true"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s ListTaskResponseDataData) String() string {
	return tea.Prettify(s)
}

func (s ListTaskResponseDataData) GoString() string {
	return s.String()
}

func (s *ListTaskResponseDataData) SetJobId(v string) *ListTaskResponseDataData {
	s.JobId = &v
	return s
}

func (s *ListTaskResponseDataData) SetJobName(v string) *ListTaskResponseDataData {
	s.JobName = &v
	return s
}

func (s *ListTaskResponseDataData) SetTaskId(v string) *ListTaskResponseDataData {
	s.TaskId = &v
	return s
}

func (s *ListTaskResponseDataData) SetProductKey(v string) *ListTaskResponseDataData {
	s.ProductKey = &v
	return s
}

func (s *ListTaskResponseDataData) SetDeviceName(v string) *ListTaskResponseDataData {
	s.DeviceName = &v
	return s
}

func (s *ListTaskResponseDataData) SetIotId(v string) *ListTaskResponseDataData {
	s.IotId = &v
	return s
}

func (s *ListTaskResponseDataData) SetProgress(v string) *ListTaskResponseDataData {
	s.Progress = &v
	return s
}

func (s *ListTaskResponseDataData) SetUtcQueueTime(v string) *ListTaskResponseDataData {
	s.UtcQueueTime = &v
	return s
}

func (s *ListTaskResponseDataData) SetUtcModified(v string) *ListTaskResponseDataData {
	s.UtcModified = &v
	return s
}

func (s *ListTaskResponseDataData) SetStatus(v string) *ListTaskResponseDataData {
	s.Status = &v
	return s
}

type QueryJobStatisticsRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
}

func (s QueryJobStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryJobStatisticsRequest) GoString() string {
	return s.String()
}

func (s *QueryJobStatisticsRequest) SetIotInstanceId(v string) *QueryJobStatisticsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryJobStatisticsRequest) SetJobId(v string) *QueryJobStatisticsRequest {
	s.JobId = &v
	return s
}

type QueryJobStatisticsResponse struct {
	RequestId    *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                           `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                         `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryJobStatisticsResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryJobStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryJobStatisticsResponse) GoString() string {
	return s.String()
}

func (s *QueryJobStatisticsResponse) SetRequestId(v string) *QueryJobStatisticsResponse {
	s.RequestId = &v
	return s
}

func (s *QueryJobStatisticsResponse) SetSuccess(v bool) *QueryJobStatisticsResponse {
	s.Success = &v
	return s
}

func (s *QueryJobStatisticsResponse) SetCode(v string) *QueryJobStatisticsResponse {
	s.Code = &v
	return s
}

func (s *QueryJobStatisticsResponse) SetErrorMessage(v string) *QueryJobStatisticsResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryJobStatisticsResponse) SetData(v *QueryJobStatisticsResponseData) *QueryJobStatisticsResponse {
	s.Data = v
	return s
}

type QueryJobStatisticsResponseData struct {
	Total      *int `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	Queued     *int `json:"Queued,omitempty" xml:"Queued,omitempty" require:"true"`
	Sent       *int `json:"Sent,omitempty" xml:"Sent,omitempty" require:"true"`
	InProgress *int `json:"InProgress,omitempty" xml:"InProgress,omitempty" require:"true"`
	Succeeded  *int `json:"Succeeded,omitempty" xml:"Succeeded,omitempty" require:"true"`
	Failed     *int `json:"Failed,omitempty" xml:"Failed,omitempty" require:"true"`
	Rejected   *int `json:"Rejected,omitempty" xml:"Rejected,omitempty" require:"true"`
	TimeOut    *int `json:"TimeOut,omitempty" xml:"TimeOut,omitempty" require:"true"`
	Cancelled  *int `json:"Cancelled,omitempty" xml:"Cancelled,omitempty" require:"true"`
}

func (s QueryJobStatisticsResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryJobStatisticsResponseData) GoString() string {
	return s.String()
}

func (s *QueryJobStatisticsResponseData) SetTotal(v int) *QueryJobStatisticsResponseData {
	s.Total = &v
	return s
}

func (s *QueryJobStatisticsResponseData) SetQueued(v int) *QueryJobStatisticsResponseData {
	s.Queued = &v
	return s
}

func (s *QueryJobStatisticsResponseData) SetSent(v int) *QueryJobStatisticsResponseData {
	s.Sent = &v
	return s
}

func (s *QueryJobStatisticsResponseData) SetInProgress(v int) *QueryJobStatisticsResponseData {
	s.InProgress = &v
	return s
}

func (s *QueryJobStatisticsResponseData) SetSucceeded(v int) *QueryJobStatisticsResponseData {
	s.Succeeded = &v
	return s
}

func (s *QueryJobStatisticsResponseData) SetFailed(v int) *QueryJobStatisticsResponseData {
	s.Failed = &v
	return s
}

func (s *QueryJobStatisticsResponseData) SetRejected(v int) *QueryJobStatisticsResponseData {
	s.Rejected = &v
	return s
}

func (s *QueryJobStatisticsResponseData) SetTimeOut(v int) *QueryJobStatisticsResponseData {
	s.TimeOut = &v
	return s
}

func (s *QueryJobStatisticsResponseData) SetCancelled(v int) *QueryJobStatisticsResponseData {
	s.Cancelled = &v
	return s
}

type DeleteJobRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
}

func (s DeleteJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteJobRequest) SetIotInstanceId(v string) *DeleteJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteJobRequest) SetJobId(v string) *DeleteJobRequest {
	s.JobId = &v
	return s
}

type DeleteJobResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteJobResponse) SetRequestId(v string) *DeleteJobResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteJobResponse) SetSuccess(v bool) *DeleteJobResponse {
	s.Success = &v
	return s
}

func (s *DeleteJobResponse) SetCode(v string) *DeleteJobResponse {
	s.Code = &v
	return s
}

func (s *DeleteJobResponse) SetErrorMessage(v string) *DeleteJobResponse {
	s.ErrorMessage = &v
	return s
}

type CancelJobRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
}

func (s CancelJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelJobRequest) GoString() string {
	return s.String()
}

func (s *CancelJobRequest) SetIotInstanceId(v string) *CancelJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CancelJobRequest) SetJobId(v string) *CancelJobRequest {
	s.JobId = &v
	return s
}

type CancelJobResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s CancelJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelJobResponse) GoString() string {
	return s.String()
}

func (s *CancelJobResponse) SetRequestId(v string) *CancelJobResponse {
	s.RequestId = &v
	return s
}

func (s *CancelJobResponse) SetSuccess(v bool) *CancelJobResponse {
	s.Success = &v
	return s
}

func (s *CancelJobResponse) SetCode(v string) *CancelJobResponse {
	s.Code = &v
	return s
}

func (s *CancelJobResponse) SetErrorMessage(v string) *CancelJobResponse {
	s.ErrorMessage = &v
	return s
}

type ListJobRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
}

func (s ListJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ListJobRequest) GoString() string {
	return s.String()
}

func (s *ListJobRequest) SetIotInstanceId(v string) *ListJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListJobRequest) SetStatus(v string) *ListJobRequest {
	s.Status = &v
	return s
}

func (s *ListJobRequest) SetPageSize(v int) *ListJobRequest {
	s.PageSize = &v
	return s
}

func (s *ListJobRequest) SetCurrentPage(v int) *ListJobRequest {
	s.CurrentPage = &v
	return s
}

type ListJobResponse struct {
	RequestId    *string              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Total        *int                 `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize     *int                 `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	Page         *int                 `json:"Page,omitempty" xml:"Page,omitempty" require:"true"`
	Data         *ListJobResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponse) GoString() string {
	return s.String()
}

func (s *ListJobResponse) SetRequestId(v string) *ListJobResponse {
	s.RequestId = &v
	return s
}

func (s *ListJobResponse) SetSuccess(v bool) *ListJobResponse {
	s.Success = &v
	return s
}

func (s *ListJobResponse) SetCode(v string) *ListJobResponse {
	s.Code = &v
	return s
}

func (s *ListJobResponse) SetErrorMessage(v string) *ListJobResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListJobResponse) SetTotal(v int) *ListJobResponse {
	s.Total = &v
	return s
}

func (s *ListJobResponse) SetPageSize(v int) *ListJobResponse {
	s.PageSize = &v
	return s
}

func (s *ListJobResponse) SetPage(v int) *ListJobResponse {
	s.Page = &v
	return s
}

func (s *ListJobResponse) SetData(v *ListJobResponseData) *ListJobResponse {
	s.Data = v
	return s
}

type ListJobResponseData struct {
	Data []*ListJobResponseDataData `json:"data,omitempty" xml:"data,omitempty" require:"true" type:"Repeated"`
}

func (s ListJobResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseData) GoString() string {
	return s.String()
}

func (s *ListJobResponseData) SetData(v []*ListJobResponseDataData) *ListJobResponseData {
	s.Data = v
	return s
}

type ListJobResponseDataData struct {
	JobId       *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
	JobName     *string `json:"JobName,omitempty" xml:"JobName,omitempty" require:"true"`
	UtcCreate   *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	UtcModified *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty" require:"true"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s ListJobResponseDataData) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseDataData) GoString() string {
	return s.String()
}

func (s *ListJobResponseDataData) SetJobId(v string) *ListJobResponseDataData {
	s.JobId = &v
	return s
}

func (s *ListJobResponseDataData) SetJobName(v string) *ListJobResponseDataData {
	s.JobName = &v
	return s
}

func (s *ListJobResponseDataData) SetUtcCreate(v string) *ListJobResponseDataData {
	s.UtcCreate = &v
	return s
}

func (s *ListJobResponseDataData) SetUtcModified(v string) *ListJobResponseDataData {
	s.UtcModified = &v
	return s
}

func (s *ListJobResponseDataData) SetStatus(v string) *ListJobResponseDataData {
	s.Status = &v
	return s
}

func (s *ListJobResponseDataData) SetDescription(v string) *ListJobResponseDataData {
	s.Description = &v
	return s
}

func (s *ListJobResponseDataData) SetType(v string) *ListJobResponseDataData {
	s.Type = &v
	return s
}

type QueryJobRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
}

func (s QueryJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryJobRequest) GoString() string {
	return s.String()
}

func (s *QueryJobRequest) SetIotInstanceId(v string) *QueryJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryJobRequest) SetJobId(v string) *QueryJobRequest {
	s.JobId = &v
	return s
}

type QueryJobResponse struct {
	RequestId    *string               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                 `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string               `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryJobResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponse) GoString() string {
	return s.String()
}

func (s *QueryJobResponse) SetRequestId(v string) *QueryJobResponse {
	s.RequestId = &v
	return s
}

func (s *QueryJobResponse) SetSuccess(v bool) *QueryJobResponse {
	s.Success = &v
	return s
}

func (s *QueryJobResponse) SetCode(v string) *QueryJobResponse {
	s.Code = &v
	return s
}

func (s *QueryJobResponse) SetErrorMessage(v string) *QueryJobResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryJobResponse) SetData(v *QueryJobResponseData) *QueryJobResponse {
	s.Data = v
	return s
}

type QueryJobResponseData struct {
	JobId         *string                            `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
	JobName       *string                            `json:"JobName,omitempty" xml:"JobName,omitempty" require:"true"`
	UtcCreate     *string                            `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	Status        *string                            `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Description   *string                            `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Type          *string                            `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	JobDocument   *string                            `json:"JobDocument,omitempty" xml:"JobDocument,omitempty" require:"true"`
	UtcModified   *string                            `json:"UtcModified,omitempty" xml:"UtcModified,omitempty" require:"true"`
	RolloutConfig *QueryJobResponseDataRolloutConfig `json:"RolloutConfig,omitempty" xml:"RolloutConfig,omitempty" require:"true" type:"Struct"`
	TimeoutConfig *QueryJobResponseDataTimeoutConfig `json:"TimeoutConfig,omitempty" xml:"TimeoutConfig,omitempty" require:"true" type:"Struct"`
	JobFile       *QueryJobResponseDataJobFile       `json:"JobFile,omitempty" xml:"JobFile,omitempty" require:"true" type:"Struct"`
	TargetConfig  *QueryJobResponseDataTargetConfig  `json:"TargetConfig,omitempty" xml:"TargetConfig,omitempty" require:"true" type:"Struct"`
}

func (s QueryJobResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponseData) GoString() string {
	return s.String()
}

func (s *QueryJobResponseData) SetJobId(v string) *QueryJobResponseData {
	s.JobId = &v
	return s
}

func (s *QueryJobResponseData) SetJobName(v string) *QueryJobResponseData {
	s.JobName = &v
	return s
}

func (s *QueryJobResponseData) SetUtcCreate(v string) *QueryJobResponseData {
	s.UtcCreate = &v
	return s
}

func (s *QueryJobResponseData) SetStatus(v string) *QueryJobResponseData {
	s.Status = &v
	return s
}

func (s *QueryJobResponseData) SetDescription(v string) *QueryJobResponseData {
	s.Description = &v
	return s
}

func (s *QueryJobResponseData) SetType(v string) *QueryJobResponseData {
	s.Type = &v
	return s
}

func (s *QueryJobResponseData) SetJobDocument(v string) *QueryJobResponseData {
	s.JobDocument = &v
	return s
}

func (s *QueryJobResponseData) SetUtcModified(v string) *QueryJobResponseData {
	s.UtcModified = &v
	return s
}

func (s *QueryJobResponseData) SetRolloutConfig(v *QueryJobResponseDataRolloutConfig) *QueryJobResponseData {
	s.RolloutConfig = v
	return s
}

func (s *QueryJobResponseData) SetTimeoutConfig(v *QueryJobResponseDataTimeoutConfig) *QueryJobResponseData {
	s.TimeoutConfig = v
	return s
}

func (s *QueryJobResponseData) SetJobFile(v *QueryJobResponseDataJobFile) *QueryJobResponseData {
	s.JobFile = v
	return s
}

func (s *QueryJobResponseData) SetTargetConfig(v *QueryJobResponseDataTargetConfig) *QueryJobResponseData {
	s.TargetConfig = v
	return s
}

type QueryJobResponseDataRolloutConfig struct {
	MaximumPerMinute *int `json:"MaximumPerMinute,omitempty" xml:"MaximumPerMinute,omitempty" require:"true"`
}

func (s QueryJobResponseDataRolloutConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponseDataRolloutConfig) GoString() string {
	return s.String()
}

func (s *QueryJobResponseDataRolloutConfig) SetMaximumPerMinute(v int) *QueryJobResponseDataRolloutConfig {
	s.MaximumPerMinute = &v
	return s
}

type QueryJobResponseDataTimeoutConfig struct {
	InProgressTimeoutInMinutes *int `json:"InProgressTimeoutInMinutes,omitempty" xml:"InProgressTimeoutInMinutes,omitempty" require:"true"`
}

func (s QueryJobResponseDataTimeoutConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponseDataTimeoutConfig) GoString() string {
	return s.String()
}

func (s *QueryJobResponseDataTimeoutConfig) SetInProgressTimeoutInMinutes(v int) *QueryJobResponseDataTimeoutConfig {
	s.InProgressTimeoutInMinutes = &v
	return s
}

type QueryJobResponseDataJobFile struct {
	FileUrl    *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty" require:"true"`
	SignMethod *string `json:"SignMethod,omitempty" xml:"SignMethod,omitempty" require:"true"`
	Sign       *string `json:"Sign,omitempty" xml:"Sign,omitempty" require:"true"`
}

func (s QueryJobResponseDataJobFile) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponseDataJobFile) GoString() string {
	return s.String()
}

func (s *QueryJobResponseDataJobFile) SetFileUrl(v string) *QueryJobResponseDataJobFile {
	s.FileUrl = &v
	return s
}

func (s *QueryJobResponseDataJobFile) SetSignMethod(v string) *QueryJobResponseDataJobFile {
	s.SignMethod = &v
	return s
}

func (s *QueryJobResponseDataJobFile) SetSign(v string) *QueryJobResponseDataJobFile {
	s.Sign = &v
	return s
}

type QueryJobResponseDataTargetConfig struct {
	TargetGroup   *string                                        `json:"TargetGroup,omitempty" xml:"TargetGroup,omitempty" require:"true"`
	TargetProduct *string                                        `json:"TargetProduct,omitempty" xml:"TargetProduct,omitempty" require:"true"`
	TargetType    *string                                        `json:"TargetType,omitempty" xml:"TargetType,omitempty" require:"true"`
	TargetDevices *QueryJobResponseDataTargetConfigTargetDevices `json:"TargetDevices,omitempty" xml:"TargetDevices,omitempty" require:"true" type:"Struct"`
}

func (s QueryJobResponseDataTargetConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponseDataTargetConfig) GoString() string {
	return s.String()
}

func (s *QueryJobResponseDataTargetConfig) SetTargetGroup(v string) *QueryJobResponseDataTargetConfig {
	s.TargetGroup = &v
	return s
}

func (s *QueryJobResponseDataTargetConfig) SetTargetProduct(v string) *QueryJobResponseDataTargetConfig {
	s.TargetProduct = &v
	return s
}

func (s *QueryJobResponseDataTargetConfig) SetTargetType(v string) *QueryJobResponseDataTargetConfig {
	s.TargetType = &v
	return s
}

func (s *QueryJobResponseDataTargetConfig) SetTargetDevices(v *QueryJobResponseDataTargetConfigTargetDevices) *QueryJobResponseDataTargetConfig {
	s.TargetDevices = v
	return s
}

type QueryJobResponseDataTargetConfigTargetDevices struct {
	TargetDevices []*QueryJobResponseDataTargetConfigTargetDevicesTargetDevices `json:"targetDevices,omitempty" xml:"targetDevices,omitempty" require:"true" type:"Repeated"`
}

func (s QueryJobResponseDataTargetConfigTargetDevices) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponseDataTargetConfigTargetDevices) GoString() string {
	return s.String()
}

func (s *QueryJobResponseDataTargetConfigTargetDevices) SetTargetDevices(v []*QueryJobResponseDataTargetConfigTargetDevicesTargetDevices) *QueryJobResponseDataTargetConfigTargetDevices {
	s.TargetDevices = v
	return s
}

type QueryJobResponseDataTargetConfigTargetDevicesTargetDevices struct {
	ProductKey *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
}

func (s QueryJobResponseDataTargetConfigTargetDevicesTargetDevices) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponseDataTargetConfigTargetDevicesTargetDevices) GoString() string {
	return s.String()
}

func (s *QueryJobResponseDataTargetConfigTargetDevicesTargetDevices) SetProductKey(v string) *QueryJobResponseDataTargetConfigTargetDevicesTargetDevices {
	s.ProductKey = &v
	return s
}

func (s *QueryJobResponseDataTargetConfigTargetDevicesTargetDevices) SetDeviceName(v string) *QueryJobResponseDataTargetConfigTargetDevicesTargetDevices {
	s.DeviceName = &v
	return s
}

type UpdateJobRequest struct {
	IotInstanceId *string                `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Description   *string                `json:"Description,omitempty" xml:"Description,omitempty"`
	TimeoutConfig map[string]interface{} `json:"TimeoutConfig,omitempty" xml:"TimeoutConfig,omitempty"`
	RolloutConfig map[string]interface{} `json:"RolloutConfig,omitempty" xml:"RolloutConfig,omitempty"`
	JobId         *string                `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
}

func (s UpdateJobRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateJobRequest) GoString() string {
	return s.String()
}

func (s *UpdateJobRequest) SetIotInstanceId(v string) *UpdateJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateJobRequest) SetDescription(v string) *UpdateJobRequest {
	s.Description = &v
	return s
}

func (s *UpdateJobRequest) SetTimeoutConfig(v map[string]interface{}) *UpdateJobRequest {
	s.TimeoutConfig = v
	return s
}

func (s *UpdateJobRequest) SetRolloutConfig(v map[string]interface{}) *UpdateJobRequest {
	s.RolloutConfig = v
	return s
}

func (s *UpdateJobRequest) SetJobId(v string) *UpdateJobRequest {
	s.JobId = &v
	return s
}

type UpdateJobShrinkRequest struct {
	IotInstanceId       *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	TimeoutConfigShrink *string `json:"TimeoutConfig,omitempty" xml:"TimeoutConfig,omitempty"`
	RolloutConfigShrink *string `json:"RolloutConfig,omitempty" xml:"RolloutConfig,omitempty"`
	JobId               *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
}

func (s UpdateJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateJobShrinkRequest) SetIotInstanceId(v string) *UpdateJobShrinkRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateJobShrinkRequest) SetDescription(v string) *UpdateJobShrinkRequest {
	s.Description = &v
	return s
}

func (s *UpdateJobShrinkRequest) SetTimeoutConfigShrink(v string) *UpdateJobShrinkRequest {
	s.TimeoutConfigShrink = &v
	return s
}

func (s *UpdateJobShrinkRequest) SetRolloutConfigShrink(v string) *UpdateJobShrinkRequest {
	s.RolloutConfigShrink = &v
	return s
}

func (s *UpdateJobShrinkRequest) SetJobId(v string) *UpdateJobShrinkRequest {
	s.JobId = &v
	return s
}

type UpdateJobResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateJobResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateJobResponse) GoString() string {
	return s.String()
}

func (s *UpdateJobResponse) SetRequestId(v string) *UpdateJobResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateJobResponse) SetSuccess(v bool) *UpdateJobResponse {
	s.Success = &v
	return s
}

func (s *UpdateJobResponse) SetCode(v string) *UpdateJobResponse {
	s.Code = &v
	return s
}

func (s *UpdateJobResponse) SetErrorMessage(v string) *UpdateJobResponse {
	s.ErrorMessage = &v
	return s
}

type CreateJobRequest struct {
	IotInstanceId *string                `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Description   *string                `json:"Description,omitempty" xml:"Description,omitempty"`
	JobDocument   *string                `json:"JobDocument,omitempty" xml:"JobDocument,omitempty" require:"true"`
	Type          *string                `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	JobFile       map[string]interface{} `json:"JobFile,omitempty" xml:"JobFile,omitempty"`
	JobName       *string                `json:"JobName,omitempty" xml:"JobName,omitempty" require:"true"`
	TimeoutConfig map[string]interface{} `json:"TimeoutConfig,omitempty" xml:"TimeoutConfig,omitempty"`
	RolloutConfig map[string]interface{} `json:"RolloutConfig,omitempty" xml:"RolloutConfig,omitempty"`
	TargetConfig  map[string]interface{} `json:"TargetConfig,omitempty" xml:"TargetConfig,omitempty" require:"true"`
}

func (s CreateJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJobRequest) GoString() string {
	return s.String()
}

func (s *CreateJobRequest) SetIotInstanceId(v string) *CreateJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateJobRequest) SetDescription(v string) *CreateJobRequest {
	s.Description = &v
	return s
}

func (s *CreateJobRequest) SetJobDocument(v string) *CreateJobRequest {
	s.JobDocument = &v
	return s
}

func (s *CreateJobRequest) SetType(v string) *CreateJobRequest {
	s.Type = &v
	return s
}

func (s *CreateJobRequest) SetJobFile(v map[string]interface{}) *CreateJobRequest {
	s.JobFile = v
	return s
}

func (s *CreateJobRequest) SetJobName(v string) *CreateJobRequest {
	s.JobName = &v
	return s
}

func (s *CreateJobRequest) SetTimeoutConfig(v map[string]interface{}) *CreateJobRequest {
	s.TimeoutConfig = v
	return s
}

func (s *CreateJobRequest) SetRolloutConfig(v map[string]interface{}) *CreateJobRequest {
	s.RolloutConfig = v
	return s
}

func (s *CreateJobRequest) SetTargetConfig(v map[string]interface{}) *CreateJobRequest {
	s.TargetConfig = v
	return s
}

type CreateJobShrinkRequest struct {
	IotInstanceId       *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	JobDocument         *string `json:"JobDocument,omitempty" xml:"JobDocument,omitempty" require:"true"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	JobFileShrink       *string `json:"JobFile,omitempty" xml:"JobFile,omitempty"`
	JobName             *string `json:"JobName,omitempty" xml:"JobName,omitempty" require:"true"`
	TimeoutConfigShrink *string `json:"TimeoutConfig,omitempty" xml:"TimeoutConfig,omitempty"`
	RolloutConfigShrink *string `json:"RolloutConfig,omitempty" xml:"RolloutConfig,omitempty"`
	TargetConfigShrink  *string `json:"TargetConfig,omitempty" xml:"TargetConfig,omitempty" require:"true"`
}

func (s CreateJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateJobShrinkRequest) SetIotInstanceId(v string) *CreateJobShrinkRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateJobShrinkRequest) SetDescription(v string) *CreateJobShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateJobShrinkRequest) SetJobDocument(v string) *CreateJobShrinkRequest {
	s.JobDocument = &v
	return s
}

func (s *CreateJobShrinkRequest) SetType(v string) *CreateJobShrinkRequest {
	s.Type = &v
	return s
}

func (s *CreateJobShrinkRequest) SetJobFileShrink(v string) *CreateJobShrinkRequest {
	s.JobFileShrink = &v
	return s
}

func (s *CreateJobShrinkRequest) SetJobName(v string) *CreateJobShrinkRequest {
	s.JobName = &v
	return s
}

func (s *CreateJobShrinkRequest) SetTimeoutConfigShrink(v string) *CreateJobShrinkRequest {
	s.TimeoutConfigShrink = &v
	return s
}

func (s *CreateJobShrinkRequest) SetRolloutConfigShrink(v string) *CreateJobShrinkRequest {
	s.RolloutConfigShrink = &v
	return s
}

func (s *CreateJobShrinkRequest) SetTargetConfigShrink(v string) *CreateJobShrinkRequest {
	s.TargetConfigShrink = &v
	return s
}

type CreateJobResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
}

func (s CreateJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJobResponse) GoString() string {
	return s.String()
}

func (s *CreateJobResponse) SetRequestId(v string) *CreateJobResponse {
	s.RequestId = &v
	return s
}

func (s *CreateJobResponse) SetSuccess(v bool) *CreateJobResponse {
	s.Success = &v
	return s
}

func (s *CreateJobResponse) SetCode(v string) *CreateJobResponse {
	s.Code = &v
	return s
}

func (s *CreateJobResponse) SetErrorMessage(v string) *CreateJobResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateJobResponse) SetJobId(v string) *CreateJobResponse {
	s.JobId = &v
	return s
}

type GenerateFileUploadURLRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FileSuffix    *string `json:"FileSuffix,omitempty" xml:"FileSuffix,omitempty" require:"true"`
	BizCode       *string `json:"BizCode,omitempty" xml:"BizCode,omitempty" require:"true"`
}

func (s GenerateFileUploadURLRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateFileUploadURLRequest) GoString() string {
	return s.String()
}

func (s *GenerateFileUploadURLRequest) SetIotInstanceId(v string) *GenerateFileUploadURLRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GenerateFileUploadURLRequest) SetFileSuffix(v string) *GenerateFileUploadURLRequest {
	s.FileSuffix = &v
	return s
}

func (s *GenerateFileUploadURLRequest) SetBizCode(v string) *GenerateFileUploadURLRequest {
	s.BizCode = &v
	return s
}

type GenerateFileUploadURLResponse struct {
	RequestId    *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                              `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *GenerateFileUploadURLResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GenerateFileUploadURLResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateFileUploadURLResponse) GoString() string {
	return s.String()
}

func (s *GenerateFileUploadURLResponse) SetRequestId(v string) *GenerateFileUploadURLResponse {
	s.RequestId = &v
	return s
}

func (s *GenerateFileUploadURLResponse) SetSuccess(v bool) *GenerateFileUploadURLResponse {
	s.Success = &v
	return s
}

func (s *GenerateFileUploadURLResponse) SetCode(v string) *GenerateFileUploadURLResponse {
	s.Code = &v
	return s
}

func (s *GenerateFileUploadURLResponse) SetErrorMessage(v string) *GenerateFileUploadURLResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GenerateFileUploadURLResponse) SetData(v *GenerateFileUploadURLResponseData) *GenerateFileUploadURLResponse {
	s.Data = v
	return s
}

type GenerateFileUploadURLResponseData struct {
	Key            *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Host           *string `json:"Host,omitempty" xml:"Host,omitempty" require:"true"`
	Policy         *string `json:"Policy,omitempty" xml:"Policy,omitempty" require:"true"`
	OssAccessKeyId *string `json:"OssAccessKeyId,omitempty" xml:"OssAccessKeyId,omitempty" require:"true"`
	Signature      *string `json:"Signature,omitempty" xml:"Signature,omitempty" require:"true"`
	ObjectStorage  *string `json:"ObjectStorage,omitempty" xml:"ObjectStorage,omitempty" require:"true"`
}

func (s GenerateFileUploadURLResponseData) String() string {
	return tea.Prettify(s)
}

func (s GenerateFileUploadURLResponseData) GoString() string {
	return s.String()
}

func (s *GenerateFileUploadURLResponseData) SetKey(v string) *GenerateFileUploadURLResponseData {
	s.Key = &v
	return s
}

func (s *GenerateFileUploadURLResponseData) SetHost(v string) *GenerateFileUploadURLResponseData {
	s.Host = &v
	return s
}

func (s *GenerateFileUploadURLResponseData) SetPolicy(v string) *GenerateFileUploadURLResponseData {
	s.Policy = &v
	return s
}

func (s *GenerateFileUploadURLResponseData) SetOssAccessKeyId(v string) *GenerateFileUploadURLResponseData {
	s.OssAccessKeyId = &v
	return s
}

func (s *GenerateFileUploadURLResponseData) SetSignature(v string) *GenerateFileUploadURLResponseData {
	s.Signature = &v
	return s
}

func (s *GenerateFileUploadURLResponseData) SetObjectStorage(v string) *GenerateFileUploadURLResponseData {
	s.ObjectStorage = &v
	return s
}

type CreateProductDistributeJobRequest struct {
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty" require:"true"`
	ProductKey       *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	TargetInstanceId *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty" require:"true"`
	TargetUid        *string `json:"TargetUid,omitempty" xml:"TargetUid,omitempty"`
	TargetAliyunId   *string `json:"TargetAliyunId,omitempty" xml:"TargetAliyunId,omitempty"`
}

func (s CreateProductDistributeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProductDistributeJobRequest) GoString() string {
	return s.String()
}

func (s *CreateProductDistributeJobRequest) SetSourceInstanceId(v string) *CreateProductDistributeJobRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *CreateProductDistributeJobRequest) SetProductKey(v string) *CreateProductDistributeJobRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateProductDistributeJobRequest) SetTargetInstanceId(v string) *CreateProductDistributeJobRequest {
	s.TargetInstanceId = &v
	return s
}

func (s *CreateProductDistributeJobRequest) SetTargetUid(v string) *CreateProductDistributeJobRequest {
	s.TargetUid = &v
	return s
}

func (s *CreateProductDistributeJobRequest) SetTargetAliyunId(v string) *CreateProductDistributeJobRequest {
	s.TargetAliyunId = &v
	return s
}

type CreateProductDistributeJobResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
}

func (s CreateProductDistributeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProductDistributeJobResponse) GoString() string {
	return s.String()
}

func (s *CreateProductDistributeJobResponse) SetRequestId(v string) *CreateProductDistributeJobResponse {
	s.RequestId = &v
	return s
}

func (s *CreateProductDistributeJobResponse) SetSuccess(v bool) *CreateProductDistributeJobResponse {
	s.Success = &v
	return s
}

func (s *CreateProductDistributeJobResponse) SetCode(v string) *CreateProductDistributeJobResponse {
	s.Code = &v
	return s
}

func (s *CreateProductDistributeJobResponse) SetErrorMessage(v string) *CreateProductDistributeJobResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateProductDistributeJobResponse) SetJobId(v string) *CreateProductDistributeJobResponse {
	s.JobId = &v
	return s
}

type QueryDeviceOriginalPropertyDataRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	Identifier    *string `json:"Identifier,omitempty" xml:"Identifier,omitempty" require:"true"`
	Asc           *int    `json:"Asc,omitempty" xml:"Asc,omitempty" require:"true"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
}

func (s QueryDeviceOriginalPropertyDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyDataRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetIotInstanceId(v string) *QueryDeviceOriginalPropertyDataRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetPageSize(v int) *QueryDeviceOriginalPropertyDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetProductKey(v string) *QueryDeviceOriginalPropertyDataRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetDeviceName(v string) *QueryDeviceOriginalPropertyDataRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetNextPageToken(v string) *QueryDeviceOriginalPropertyDataRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetStartTime(v int64) *QueryDeviceOriginalPropertyDataRequest {
	s.StartTime = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetIdentifier(v string) *QueryDeviceOriginalPropertyDataRequest {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetAsc(v int) *QueryDeviceOriginalPropertyDataRequest {
	s.Asc = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetIotId(v string) *QueryDeviceOriginalPropertyDataRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetEndTime(v int64) *QueryDeviceOriginalPropertyDataRequest {
	s.EndTime = &v
	return s
}

type QueryDeviceOriginalPropertyDataResponse struct {
	RequestId    *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                        `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryDeviceOriginalPropertyDataResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceOriginalPropertyDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyDataResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyDataResponse) SetRequestId(v string) *QueryDeviceOriginalPropertyDataResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataResponse) SetSuccess(v bool) *QueryDeviceOriginalPropertyDataResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataResponse) SetCode(v string) *QueryDeviceOriginalPropertyDataResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataResponse) SetErrorMessage(v string) *QueryDeviceOriginalPropertyDataResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataResponse) SetData(v *QueryDeviceOriginalPropertyDataResponseData) *QueryDeviceOriginalPropertyDataResponse {
	s.Data = v
	return s
}

type QueryDeviceOriginalPropertyDataResponseData struct {
	NextValid     *bool                                            `json:"NextValid,omitempty" xml:"NextValid,omitempty" require:"true"`
	NextPageToken *string                                          `json:"nextPageToken,omitempty" xml:"nextPageToken,omitempty" require:"true"`
	List          *QueryDeviceOriginalPropertyDataResponseDataList `json:"List,omitempty" xml:"List,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceOriginalPropertyDataResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyDataResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyDataResponseData) SetNextValid(v bool) *QueryDeviceOriginalPropertyDataResponseData {
	s.NextValid = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataResponseData) SetNextPageToken(v string) *QueryDeviceOriginalPropertyDataResponseData {
	s.NextPageToken = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataResponseData) SetList(v *QueryDeviceOriginalPropertyDataResponseDataList) *QueryDeviceOriginalPropertyDataResponseData {
	s.List = v
	return s
}

type QueryDeviceOriginalPropertyDataResponseDataList struct {
	PropertyInfo []*QueryDeviceOriginalPropertyDataResponseDataListPropertyInfo `json:"PropertyInfo,omitempty" xml:"PropertyInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceOriginalPropertyDataResponseDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyDataResponseDataList) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyDataResponseDataList) SetPropertyInfo(v []*QueryDeviceOriginalPropertyDataResponseDataListPropertyInfo) *QueryDeviceOriginalPropertyDataResponseDataList {
	s.PropertyInfo = v
	return s
}

type QueryDeviceOriginalPropertyDataResponseDataListPropertyInfo struct {
	Time  *string `json:"Time,omitempty" xml:"Time,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s QueryDeviceOriginalPropertyDataResponseDataListPropertyInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyDataResponseDataListPropertyInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyDataResponseDataListPropertyInfo) SetTime(v string) *QueryDeviceOriginalPropertyDataResponseDataListPropertyInfo {
	s.Time = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataResponseDataListPropertyInfo) SetValue(v string) *QueryDeviceOriginalPropertyDataResponseDataListPropertyInfo {
	s.Value = &v
	return s
}

type QueryDeviceOriginalEventDataRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	Identifier    *string `json:"Identifier,omitempty" xml:"Identifier,omitempty" require:"true"`
	Asc           *int    `json:"Asc,omitempty" xml:"Asc,omitempty" require:"true"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
}

func (s QueryDeviceOriginalEventDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalEventDataRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalEventDataRequest) SetIotInstanceId(v string) *QueryDeviceOriginalEventDataRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetPageSize(v int) *QueryDeviceOriginalEventDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetProductKey(v string) *QueryDeviceOriginalEventDataRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetDeviceName(v string) *QueryDeviceOriginalEventDataRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetNextPageToken(v string) *QueryDeviceOriginalEventDataRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetStartTime(v int64) *QueryDeviceOriginalEventDataRequest {
	s.StartTime = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetIdentifier(v string) *QueryDeviceOriginalEventDataRequest {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetAsc(v int) *QueryDeviceOriginalEventDataRequest {
	s.Asc = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetIotId(v string) *QueryDeviceOriginalEventDataRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetEndTime(v int64) *QueryDeviceOriginalEventDataRequest {
	s.EndTime = &v
	return s
}

type QueryDeviceOriginalEventDataResponse struct {
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                     `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                   `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryDeviceOriginalEventDataResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceOriginalEventDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalEventDataResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalEventDataResponse) SetRequestId(v string) *QueryDeviceOriginalEventDataResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponse) SetSuccess(v bool) *QueryDeviceOriginalEventDataResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponse) SetCode(v string) *QueryDeviceOriginalEventDataResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponse) SetErrorMessage(v string) *QueryDeviceOriginalEventDataResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponse) SetData(v *QueryDeviceOriginalEventDataResponseData) *QueryDeviceOriginalEventDataResponse {
	s.Data = v
	return s
}

type QueryDeviceOriginalEventDataResponseData struct {
	NextPageToken *string                                       `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty" require:"true"`
	NextValid     *bool                                         `json:"NextValid,omitempty" xml:"NextValid,omitempty" require:"true"`
	List          *QueryDeviceOriginalEventDataResponseDataList `json:"List,omitempty" xml:"List,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceOriginalEventDataResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalEventDataResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalEventDataResponseData) SetNextPageToken(v string) *QueryDeviceOriginalEventDataResponseData {
	s.NextPageToken = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponseData) SetNextValid(v bool) *QueryDeviceOriginalEventDataResponseData {
	s.NextValid = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponseData) SetList(v *QueryDeviceOriginalEventDataResponseDataList) *QueryDeviceOriginalEventDataResponseData {
	s.List = v
	return s
}

type QueryDeviceOriginalEventDataResponseDataList struct {
	EventInfo []*QueryDeviceOriginalEventDataResponseDataListEventInfo `json:"EventInfo,omitempty" xml:"EventInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceOriginalEventDataResponseDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalEventDataResponseDataList) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalEventDataResponseDataList) SetEventInfo(v []*QueryDeviceOriginalEventDataResponseDataListEventInfo) *QueryDeviceOriginalEventDataResponseDataList {
	s.EventInfo = v
	return s
}

type QueryDeviceOriginalEventDataResponseDataListEventInfo struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty" require:"true"`
	Identifier *string `json:"Identifier,omitempty" xml:"Identifier,omitempty" require:"true"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	EventType  *string `json:"EventType,omitempty" xml:"EventType,omitempty" require:"true"`
	OutputData *string `json:"OutputData,omitempty" xml:"OutputData,omitempty" require:"true"`
}

func (s QueryDeviceOriginalEventDataResponseDataListEventInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalEventDataResponseDataListEventInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalEventDataResponseDataListEventInfo) SetTime(v string) *QueryDeviceOriginalEventDataResponseDataListEventInfo {
	s.Time = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponseDataListEventInfo) SetIdentifier(v string) *QueryDeviceOriginalEventDataResponseDataListEventInfo {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponseDataListEventInfo) SetName(v string) *QueryDeviceOriginalEventDataResponseDataListEventInfo {
	s.Name = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponseDataListEventInfo) SetEventType(v string) *QueryDeviceOriginalEventDataResponseDataListEventInfo {
	s.EventType = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponseDataListEventInfo) SetOutputData(v string) *QueryDeviceOriginalEventDataResponseDataListEventInfo {
	s.OutputData = &v
	return s
}

type QueryDeviceOriginalPropertyStatusRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	Asc           *int    `json:"Asc,omitempty" xml:"Asc,omitempty" require:"true"`
}

func (s QueryDeviceOriginalPropertyStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyStatusRequest) SetIotInstanceId(v string) *QueryDeviceOriginalPropertyStatusRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusRequest) SetPageSize(v int) *QueryDeviceOriginalPropertyStatusRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusRequest) SetProductKey(v string) *QueryDeviceOriginalPropertyStatusRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusRequest) SetDeviceName(v string) *QueryDeviceOriginalPropertyStatusRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusRequest) SetNextPageToken(v string) *QueryDeviceOriginalPropertyStatusRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusRequest) SetIotId(v string) *QueryDeviceOriginalPropertyStatusRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusRequest) SetAsc(v int) *QueryDeviceOriginalPropertyStatusRequest {
	s.Asc = &v
	return s
}

type QueryDeviceOriginalPropertyStatusResponse struct {
	RequestId    *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                          `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryDeviceOriginalPropertyStatusResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceOriginalPropertyStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyStatusResponse) SetRequestId(v string) *QueryDeviceOriginalPropertyStatusResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponse) SetSuccess(v bool) *QueryDeviceOriginalPropertyStatusResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponse) SetCode(v string) *QueryDeviceOriginalPropertyStatusResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponse) SetErrorMessage(v string) *QueryDeviceOriginalPropertyStatusResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponse) SetData(v *QueryDeviceOriginalPropertyStatusResponseData) *QueryDeviceOriginalPropertyStatusResponse {
	s.Data = v
	return s
}

type QueryDeviceOriginalPropertyStatusResponseData struct {
	NextValid     *bool                                              `json:"NextValid,omitempty" xml:"NextValid,omitempty" require:"true"`
	NextPageToken *string                                            `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty" require:"true"`
	List          *QueryDeviceOriginalPropertyStatusResponseDataList `json:"List,omitempty" xml:"List,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceOriginalPropertyStatusResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyStatusResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyStatusResponseData) SetNextValid(v bool) *QueryDeviceOriginalPropertyStatusResponseData {
	s.NextValid = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponseData) SetNextPageToken(v string) *QueryDeviceOriginalPropertyStatusResponseData {
	s.NextPageToken = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponseData) SetList(v *QueryDeviceOriginalPropertyStatusResponseDataList) *QueryDeviceOriginalPropertyStatusResponseData {
	s.List = v
	return s
}

type QueryDeviceOriginalPropertyStatusResponseDataList struct {
	PropertyStatusDataInfo []*QueryDeviceOriginalPropertyStatusResponseDataListPropertyStatusDataInfo `json:"PropertyStatusDataInfo,omitempty" xml:"PropertyStatusDataInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceOriginalPropertyStatusResponseDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyStatusResponseDataList) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyStatusResponseDataList) SetPropertyStatusDataInfo(v []*QueryDeviceOriginalPropertyStatusResponseDataListPropertyStatusDataInfo) *QueryDeviceOriginalPropertyStatusResponseDataList {
	s.PropertyStatusDataInfo = v
	return s
}

type QueryDeviceOriginalPropertyStatusResponseDataListPropertyStatusDataInfo struct {
	Identifier *string `json:"Identifier,omitempty" xml:"Identifier,omitempty" require:"true"`
	Value      *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
	Time       *int64  `json:"Time,omitempty" xml:"Time,omitempty" require:"true"`
}

func (s QueryDeviceOriginalPropertyStatusResponseDataListPropertyStatusDataInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyStatusResponseDataListPropertyStatusDataInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyStatusResponseDataListPropertyStatusDataInfo) SetIdentifier(v string) *QueryDeviceOriginalPropertyStatusResponseDataListPropertyStatusDataInfo {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponseDataListPropertyStatusDataInfo) SetValue(v string) *QueryDeviceOriginalPropertyStatusResponseDataListPropertyStatusDataInfo {
	s.Value = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponseDataListPropertyStatusDataInfo) SetTime(v int64) *QueryDeviceOriginalPropertyStatusResponseDataListPropertyStatusDataInfo {
	s.Time = &v
	return s
}

type QueryDeviceOriginalServiceDataRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	Identifier    *string `json:"Identifier,omitempty" xml:"Identifier,omitempty" require:"true"`
	Asc           *int    `json:"Asc,omitempty" xml:"Asc,omitempty" require:"true"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
}

func (s QueryDeviceOriginalServiceDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalServiceDataRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalServiceDataRequest) SetIotInstanceId(v string) *QueryDeviceOriginalServiceDataRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetPageSize(v int) *QueryDeviceOriginalServiceDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetProductKey(v string) *QueryDeviceOriginalServiceDataRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetDeviceName(v string) *QueryDeviceOriginalServiceDataRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetNextPageToken(v string) *QueryDeviceOriginalServiceDataRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetStartTime(v int64) *QueryDeviceOriginalServiceDataRequest {
	s.StartTime = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetIdentifier(v string) *QueryDeviceOriginalServiceDataRequest {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetAsc(v int) *QueryDeviceOriginalServiceDataRequest {
	s.Asc = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetIotId(v string) *QueryDeviceOriginalServiceDataRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetEndTime(v int64) *QueryDeviceOriginalServiceDataRequest {
	s.EndTime = &v
	return s
}

type QueryDeviceOriginalServiceDataResponse struct {
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                       `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryDeviceOriginalServiceDataResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceOriginalServiceDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalServiceDataResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalServiceDataResponse) SetRequestId(v string) *QueryDeviceOriginalServiceDataResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponse) SetSuccess(v bool) *QueryDeviceOriginalServiceDataResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponse) SetCode(v string) *QueryDeviceOriginalServiceDataResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponse) SetErrorMessage(v string) *QueryDeviceOriginalServiceDataResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponse) SetData(v *QueryDeviceOriginalServiceDataResponseData) *QueryDeviceOriginalServiceDataResponse {
	s.Data = v
	return s
}

type QueryDeviceOriginalServiceDataResponseData struct {
	NextPageToken *string                                         `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty" require:"true"`
	NextValid     *bool                                           `json:"NextValid,omitempty" xml:"NextValid,omitempty" require:"true"`
	List          *QueryDeviceOriginalServiceDataResponseDataList `json:"List,omitempty" xml:"List,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceOriginalServiceDataResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalServiceDataResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalServiceDataResponseData) SetNextPageToken(v string) *QueryDeviceOriginalServiceDataResponseData {
	s.NextPageToken = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponseData) SetNextValid(v bool) *QueryDeviceOriginalServiceDataResponseData {
	s.NextValid = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponseData) SetList(v *QueryDeviceOriginalServiceDataResponseDataList) *QueryDeviceOriginalServiceDataResponseData {
	s.List = v
	return s
}

type QueryDeviceOriginalServiceDataResponseDataList struct {
	ServiceInfo []*QueryDeviceOriginalServiceDataResponseDataListServiceInfo `json:"ServiceInfo,omitempty" xml:"ServiceInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceOriginalServiceDataResponseDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalServiceDataResponseDataList) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalServiceDataResponseDataList) SetServiceInfo(v []*QueryDeviceOriginalServiceDataResponseDataListServiceInfo) *QueryDeviceOriginalServiceDataResponseDataList {
	s.ServiceInfo = v
	return s
}

type QueryDeviceOriginalServiceDataResponseDataListServiceInfo struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty" require:"true"`
	Identifier *string `json:"Identifier,omitempty" xml:"Identifier,omitempty" require:"true"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	InputData  *string `json:"InputData,omitempty" xml:"InputData,omitempty" require:"true"`
	OutputData *string `json:"OutputData,omitempty" xml:"OutputData,omitempty" require:"true"`
}

func (s QueryDeviceOriginalServiceDataResponseDataListServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalServiceDataResponseDataListServiceInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalServiceDataResponseDataListServiceInfo) SetTime(v string) *QueryDeviceOriginalServiceDataResponseDataListServiceInfo {
	s.Time = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponseDataListServiceInfo) SetIdentifier(v string) *QueryDeviceOriginalServiceDataResponseDataListServiceInfo {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponseDataListServiceInfo) SetName(v string) *QueryDeviceOriginalServiceDataResponseDataListServiceInfo {
	s.Name = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponseDataListServiceInfo) SetInputData(v string) *QueryDeviceOriginalServiceDataResponseDataListServiceInfo {
	s.InputData = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponseDataListServiceInfo) SetOutputData(v string) *QueryDeviceOriginalServiceDataResponseDataListServiceInfo {
	s.OutputData = &v
	return s
}

type CreateThingScriptRequest struct {
	ScriptContent *string `json:"ScriptContent,omitempty" xml:"ScriptContent,omitempty" require:"true"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ScriptType    *string `json:"ScriptType,omitempty" xml:"ScriptType,omitempty" require:"true"`
}

func (s CreateThingScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateThingScriptRequest) GoString() string {
	return s.String()
}

func (s *CreateThingScriptRequest) SetScriptContent(v string) *CreateThingScriptRequest {
	s.ScriptContent = &v
	return s
}

func (s *CreateThingScriptRequest) SetIotInstanceId(v string) *CreateThingScriptRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateThingScriptRequest) SetProductKey(v string) *CreateThingScriptRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateThingScriptRequest) SetScriptType(v string) *CreateThingScriptRequest {
	s.ScriptType = &v
	return s
}

type CreateThingScriptResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s CreateThingScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateThingScriptResponse) GoString() string {
	return s.String()
}

func (s *CreateThingScriptResponse) SetRequestId(v string) *CreateThingScriptResponse {
	s.RequestId = &v
	return s
}

func (s *CreateThingScriptResponse) SetSuccess(v bool) *CreateThingScriptResponse {
	s.Success = &v
	return s
}

func (s *CreateThingScriptResponse) SetCode(v string) *CreateThingScriptResponse {
	s.Code = &v
	return s
}

func (s *CreateThingScriptResponse) SetErrorMessage(v string) *CreateThingScriptResponse {
	s.ErrorMessage = &v
	return s
}

type UpdateThingScriptRequest struct {
	ScriptContent *string `json:"ScriptContent,omitempty" xml:"ScriptContent,omitempty" require:"true"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ScriptType    *string `json:"ScriptType,omitempty" xml:"ScriptType,omitempty" require:"true"`
}

func (s UpdateThingScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateThingScriptRequest) GoString() string {
	return s.String()
}

func (s *UpdateThingScriptRequest) SetScriptContent(v string) *UpdateThingScriptRequest {
	s.ScriptContent = &v
	return s
}

func (s *UpdateThingScriptRequest) SetIotInstanceId(v string) *UpdateThingScriptRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateThingScriptRequest) SetProductKey(v string) *UpdateThingScriptRequest {
	s.ProductKey = &v
	return s
}

func (s *UpdateThingScriptRequest) SetScriptType(v string) *UpdateThingScriptRequest {
	s.ScriptType = &v
	return s
}

type UpdateThingScriptResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateThingScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateThingScriptResponse) GoString() string {
	return s.String()
}

func (s *UpdateThingScriptResponse) SetRequestId(v string) *UpdateThingScriptResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateThingScriptResponse) SetSuccess(v bool) *UpdateThingScriptResponse {
	s.Success = &v
	return s
}

func (s *UpdateThingScriptResponse) SetCode(v string) *UpdateThingScriptResponse {
	s.Code = &v
	return s
}

func (s *UpdateThingScriptResponse) SetErrorMessage(v string) *UpdateThingScriptResponse {
	s.ErrorMessage = &v
	return s
}

type GetThingScriptRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
}

func (s GetThingScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s GetThingScriptRequest) GoString() string {
	return s.String()
}

func (s *GetThingScriptRequest) SetIotInstanceId(v string) *GetThingScriptRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetThingScriptRequest) SetProductKey(v string) *GetThingScriptRequest {
	s.ProductKey = &v
	return s
}

type GetThingScriptResponse struct {
	RequestId    *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                       `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *GetThingScriptResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetThingScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s GetThingScriptResponse) GoString() string {
	return s.String()
}

func (s *GetThingScriptResponse) SetRequestId(v string) *GetThingScriptResponse {
	s.RequestId = &v
	return s
}

func (s *GetThingScriptResponse) SetSuccess(v bool) *GetThingScriptResponse {
	s.Success = &v
	return s
}

func (s *GetThingScriptResponse) SetCode(v string) *GetThingScriptResponse {
	s.Code = &v
	return s
}

func (s *GetThingScriptResponse) SetErrorMessage(v string) *GetThingScriptResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetThingScriptResponse) SetData(v *GetThingScriptResponseData) *GetThingScriptResponse {
	s.Data = v
	return s
}

type GetThingScriptResponseData struct {
	ScriptType *string `json:"ScriptType,omitempty" xml:"ScriptType,omitempty" require:"true"`
	ScriptUrl  *string `json:"ScriptUrl,omitempty" xml:"ScriptUrl,omitempty" require:"true"`
}

func (s GetThingScriptResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetThingScriptResponseData) GoString() string {
	return s.String()
}

func (s *GetThingScriptResponseData) SetScriptType(v string) *GetThingScriptResponseData {
	s.ScriptType = &v
	return s
}

func (s *GetThingScriptResponseData) SetScriptUrl(v string) *GetThingScriptResponseData {
	s.ScriptUrl = &v
	return s
}

type ListOTAModuleVersionsByDeviceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
}

func (s ListOTAModuleVersionsByDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOTAModuleVersionsByDeviceRequest) GoString() string {
	return s.String()
}

func (s *ListOTAModuleVersionsByDeviceRequest) SetIotInstanceId(v string) *ListOTAModuleVersionsByDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceRequest) SetPageSize(v int) *ListOTAModuleVersionsByDeviceRequest {
	s.PageSize = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceRequest) SetProductKey(v string) *ListOTAModuleVersionsByDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceRequest) SetDeviceName(v string) *ListOTAModuleVersionsByDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceRequest) SetIotId(v string) *ListOTAModuleVersionsByDeviceRequest {
	s.IotId = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceRequest) SetCurrentPage(v int) *ListOTAModuleVersionsByDeviceRequest {
	s.CurrentPage = &v
	return s
}

type ListOTAModuleVersionsByDeviceResponse struct {
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                      `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Total        *int                                       `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize     *int                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageCount    *int                                       `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	CurrentPage  *int                                       `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	Data         *ListOTAModuleVersionsByDeviceResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListOTAModuleVersionsByDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOTAModuleVersionsByDeviceResponse) GoString() string {
	return s.String()
}

func (s *ListOTAModuleVersionsByDeviceResponse) SetRequestId(v string) *ListOTAModuleVersionsByDeviceResponse {
	s.RequestId = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponse) SetSuccess(v bool) *ListOTAModuleVersionsByDeviceResponse {
	s.Success = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponse) SetCode(v string) *ListOTAModuleVersionsByDeviceResponse {
	s.Code = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponse) SetErrorMessage(v string) *ListOTAModuleVersionsByDeviceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponse) SetTotal(v int) *ListOTAModuleVersionsByDeviceResponse {
	s.Total = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponse) SetPageSize(v int) *ListOTAModuleVersionsByDeviceResponse {
	s.PageSize = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponse) SetPageCount(v int) *ListOTAModuleVersionsByDeviceResponse {
	s.PageCount = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponse) SetCurrentPage(v int) *ListOTAModuleVersionsByDeviceResponse {
	s.CurrentPage = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponse) SetData(v *ListOTAModuleVersionsByDeviceResponseData) *ListOTAModuleVersionsByDeviceResponse {
	s.Data = v
	return s
}

type ListOTAModuleVersionsByDeviceResponseData struct {
	SimpleOTAModuleInfo []*ListOTAModuleVersionsByDeviceResponseDataSimpleOTAModuleInfo `json:"SimpleOTAModuleInfo,omitempty" xml:"SimpleOTAModuleInfo,omitempty" require:"true" type:"Repeated"`
}

func (s ListOTAModuleVersionsByDeviceResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListOTAModuleVersionsByDeviceResponseData) GoString() string {
	return s.String()
}

func (s *ListOTAModuleVersionsByDeviceResponseData) SetSimpleOTAModuleInfo(v []*ListOTAModuleVersionsByDeviceResponseDataSimpleOTAModuleInfo) *ListOTAModuleVersionsByDeviceResponseData {
	s.SimpleOTAModuleInfo = v
	return s
}

type ListOTAModuleVersionsByDeviceResponseDataSimpleOTAModuleInfo struct {
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	ModuleVersion *string `json:"ModuleVersion,omitempty" xml:"ModuleVersion,omitempty" require:"true"`
	ModuleName    *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty" require:"true"`
}

func (s ListOTAModuleVersionsByDeviceResponseDataSimpleOTAModuleInfo) String() string {
	return tea.Prettify(s)
}

func (s ListOTAModuleVersionsByDeviceResponseDataSimpleOTAModuleInfo) GoString() string {
	return s.String()
}

func (s *ListOTAModuleVersionsByDeviceResponseDataSimpleOTAModuleInfo) SetProductKey(v string) *ListOTAModuleVersionsByDeviceResponseDataSimpleOTAModuleInfo {
	s.ProductKey = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponseDataSimpleOTAModuleInfo) SetDeviceName(v string) *ListOTAModuleVersionsByDeviceResponseDataSimpleOTAModuleInfo {
	s.DeviceName = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponseDataSimpleOTAModuleInfo) SetIotId(v string) *ListOTAModuleVersionsByDeviceResponseDataSimpleOTAModuleInfo {
	s.IotId = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponseDataSimpleOTAModuleInfo) SetModuleVersion(v string) *ListOTAModuleVersionsByDeviceResponseDataSimpleOTAModuleInfo {
	s.ModuleVersion = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponseDataSimpleOTAModuleInfo) SetModuleName(v string) *ListOTAModuleVersionsByDeviceResponseDataSimpleOTAModuleInfo {
	s.ModuleName = &v
	return s
}

type BatchPubRequest struct {
	IotInstanceId  *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DeviceName     []*string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true" type:"Repeated"`
	ProductKey     *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Qos            *int      `json:"Qos,omitempty" xml:"Qos,omitempty"`
	TopicShortName *string   `json:"TopicShortName,omitempty" xml:"TopicShortName,omitempty" require:"true"`
	MessageContent *string   `json:"MessageContent,omitempty" xml:"MessageContent,omitempty" require:"true"`
}

func (s BatchPubRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchPubRequest) GoString() string {
	return s.String()
}

func (s *BatchPubRequest) SetIotInstanceId(v string) *BatchPubRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchPubRequest) SetDeviceName(v []*string) *BatchPubRequest {
	s.DeviceName = v
	return s
}

func (s *BatchPubRequest) SetProductKey(v string) *BatchPubRequest {
	s.ProductKey = &v
	return s
}

func (s *BatchPubRequest) SetQos(v int) *BatchPubRequest {
	s.Qos = &v
	return s
}

func (s *BatchPubRequest) SetTopicShortName(v string) *BatchPubRequest {
	s.TopicShortName = &v
	return s
}

func (s *BatchPubRequest) SetMessageContent(v string) *BatchPubRequest {
	s.MessageContent = &v
	return s
}

type BatchPubResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s BatchPubResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchPubResponse) GoString() string {
	return s.String()
}

func (s *BatchPubResponse) SetRequestId(v string) *BatchPubResponse {
	s.RequestId = &v
	return s
}

func (s *BatchPubResponse) SetSuccess(v bool) *BatchPubResponse {
	s.Success = &v
	return s
}

func (s *BatchPubResponse) SetCode(v string) *BatchPubResponse {
	s.Code = &v
	return s
}

func (s *BatchPubResponse) SetErrorMessage(v string) *BatchPubResponse {
	s.ErrorMessage = &v
	return s
}

type SpeechByCombinationRequest struct {
	CombinationList []*string `json:"CombinationList,omitempty" xml:"CombinationList,omitempty" require:"true" type:"Repeated"`
	IotId           *string   `json:"IotId,omitempty" xml:"IotId,omitempty"`
	ProductKey      *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName      *string   `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotInstanceId   *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
}

func (s SpeechByCombinationRequest) String() string {
	return tea.Prettify(s)
}

func (s SpeechByCombinationRequest) GoString() string {
	return s.String()
}

func (s *SpeechByCombinationRequest) SetCombinationList(v []*string) *SpeechByCombinationRequest {
	s.CombinationList = v
	return s
}

func (s *SpeechByCombinationRequest) SetIotId(v string) *SpeechByCombinationRequest {
	s.IotId = &v
	return s
}

func (s *SpeechByCombinationRequest) SetProductKey(v string) *SpeechByCombinationRequest {
	s.ProductKey = &v
	return s
}

func (s *SpeechByCombinationRequest) SetDeviceName(v string) *SpeechByCombinationRequest {
	s.DeviceName = &v
	return s
}

func (s *SpeechByCombinationRequest) SetIotInstanceId(v string) *SpeechByCombinationRequest {
	s.IotInstanceId = &v
	return s
}

type SpeechByCombinationResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s SpeechByCombinationResponse) String() string {
	return tea.Prettify(s)
}

func (s SpeechByCombinationResponse) GoString() string {
	return s.String()
}

func (s *SpeechByCombinationResponse) SetRequestId(v string) *SpeechByCombinationResponse {
	s.RequestId = &v
	return s
}

func (s *SpeechByCombinationResponse) SetSuccess(v bool) *SpeechByCombinationResponse {
	s.Success = &v
	return s
}

func (s *SpeechByCombinationResponse) SetCode(v string) *SpeechByCombinationResponse {
	s.Code = &v
	return s
}

func (s *SpeechByCombinationResponse) SetErrorMessage(v string) *SpeechByCombinationResponse {
	s.ErrorMessage = &v
	return s
}

type UpdateThingModelValidationConfigRequest struct {
	ValidateType  *int    `json:"ValidateType,omitempty" xml:"ValidateType,omitempty" require:"true"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
}

func (s UpdateThingModelValidationConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateThingModelValidationConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateThingModelValidationConfigRequest) SetValidateType(v int) *UpdateThingModelValidationConfigRequest {
	s.ValidateType = &v
	return s
}

func (s *UpdateThingModelValidationConfigRequest) SetIotInstanceId(v string) *UpdateThingModelValidationConfigRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateThingModelValidationConfigRequest) SetProductKey(v string) *UpdateThingModelValidationConfigRequest {
	s.ProductKey = &v
	return s
}

type UpdateThingModelValidationConfigResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateThingModelValidationConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateThingModelValidationConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateThingModelValidationConfigResponse) SetRequestId(v string) *UpdateThingModelValidationConfigResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateThingModelValidationConfigResponse) SetSuccess(v bool) *UpdateThingModelValidationConfigResponse {
	s.Success = &v
	return s
}

func (s *UpdateThingModelValidationConfigResponse) SetCode(v string) *UpdateThingModelValidationConfigResponse {
	s.Code = &v
	return s
}

func (s *UpdateThingModelValidationConfigResponse) SetErrorMessage(v string) *UpdateThingModelValidationConfigResponse {
	s.ErrorMessage = &v
	return s
}

type QueryDeviceBySQLRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty" require:"true"`
	SQL           *string `json:"SQL,omitempty" xml:"SQL,omitempty" require:"true"`
}

func (s QueryDeviceBySQLRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceBySQLRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceBySQLRequest) SetIotInstanceId(v string) *QueryDeviceBySQLRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceBySQLRequest) SetSQL(v string) *QueryDeviceBySQLRequest {
	s.SQL = &v
	return s
}

type QueryDeviceBySQLResponse struct {
	RequestId    *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                           `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                         `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	TotalCount   *int64                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	Data         []*QueryDeviceBySQLResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceBySQLResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceBySQLResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceBySQLResponse) SetRequestId(v string) *QueryDeviceBySQLResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceBySQLResponse) SetSuccess(v bool) *QueryDeviceBySQLResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceBySQLResponse) SetCode(v string) *QueryDeviceBySQLResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceBySQLResponse) SetErrorMessage(v string) *QueryDeviceBySQLResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceBySQLResponse) SetTotalCount(v int64) *QueryDeviceBySQLResponse {
	s.TotalCount = &v
	return s
}

func (s *QueryDeviceBySQLResponse) SetData(v []*QueryDeviceBySQLResponseData) *QueryDeviceBySQLResponse {
	s.Data = v
	return s
}

type QueryDeviceBySQLResponseData struct {
	ProductKey  *string                                   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName  *string                                   `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	Nickname    *string                                   `json:"Nickname,omitempty" xml:"Nickname,omitempty" require:"true"`
	Status      *string                                   `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	ActiveTime  *string                                   `json:"ActiveTime,omitempty" xml:"ActiveTime,omitempty" require:"true"`
	IotId       *string                                   `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	GmtCreate   *string                                   `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModified *string                                   `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
	Groups      []*QueryDeviceBySQLResponseDataGroups     `json:"Groups,omitempty" xml:"Groups,omitempty" require:"true" type:"Repeated"`
	Tags        []*QueryDeviceBySQLResponseDataTags       `json:"Tags,omitempty" xml:"Tags,omitempty" require:"true" type:"Repeated"`
	OTAModules  []*QueryDeviceBySQLResponseDataOTAModules `json:"OTAModules,omitempty" xml:"OTAModules,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceBySQLResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceBySQLResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceBySQLResponseData) SetProductKey(v string) *QueryDeviceBySQLResponseData {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceBySQLResponseData) SetDeviceName(v string) *QueryDeviceBySQLResponseData {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceBySQLResponseData) SetNickname(v string) *QueryDeviceBySQLResponseData {
	s.Nickname = &v
	return s
}

func (s *QueryDeviceBySQLResponseData) SetStatus(v string) *QueryDeviceBySQLResponseData {
	s.Status = &v
	return s
}

func (s *QueryDeviceBySQLResponseData) SetActiveTime(v string) *QueryDeviceBySQLResponseData {
	s.ActiveTime = &v
	return s
}

func (s *QueryDeviceBySQLResponseData) SetIotId(v string) *QueryDeviceBySQLResponseData {
	s.IotId = &v
	return s
}

func (s *QueryDeviceBySQLResponseData) SetGmtCreate(v string) *QueryDeviceBySQLResponseData {
	s.GmtCreate = &v
	return s
}

func (s *QueryDeviceBySQLResponseData) SetGmtModified(v string) *QueryDeviceBySQLResponseData {
	s.GmtModified = &v
	return s
}

func (s *QueryDeviceBySQLResponseData) SetGroups(v []*QueryDeviceBySQLResponseDataGroups) *QueryDeviceBySQLResponseData {
	s.Groups = v
	return s
}

func (s *QueryDeviceBySQLResponseData) SetTags(v []*QueryDeviceBySQLResponseDataTags) *QueryDeviceBySQLResponseData {
	s.Tags = v
	return s
}

func (s *QueryDeviceBySQLResponseData) SetOTAModules(v []*QueryDeviceBySQLResponseDataOTAModules) *QueryDeviceBySQLResponseData {
	s.OTAModules = v
	return s
}

type QueryDeviceBySQLResponseDataGroups struct {
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
}

func (s QueryDeviceBySQLResponseDataGroups) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceBySQLResponseDataGroups) GoString() string {
	return s.String()
}

func (s *QueryDeviceBySQLResponseDataGroups) SetGroupId(v string) *QueryDeviceBySQLResponseDataGroups {
	s.GroupId = &v
	return s
}

type QueryDeviceBySQLResponseDataTags struct {
	TagName  *string `json:"TagName,omitempty" xml:"TagName,omitempty" require:"true"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty" require:"true"`
}

func (s QueryDeviceBySQLResponseDataTags) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceBySQLResponseDataTags) GoString() string {
	return s.String()
}

func (s *QueryDeviceBySQLResponseDataTags) SetTagName(v string) *QueryDeviceBySQLResponseDataTags {
	s.TagName = &v
	return s
}

func (s *QueryDeviceBySQLResponseDataTags) SetTagValue(v string) *QueryDeviceBySQLResponseDataTags {
	s.TagValue = &v
	return s
}

type QueryDeviceBySQLResponseDataOTAModules struct {
	ModuleName      *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty" require:"true"`
	FirmwareVersion *string `json:"FirmwareVersion,omitempty" xml:"FirmwareVersion,omitempty" require:"true"`
}

func (s QueryDeviceBySQLResponseDataOTAModules) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceBySQLResponseDataOTAModules) GoString() string {
	return s.String()
}

func (s *QueryDeviceBySQLResponseDataOTAModules) SetModuleName(v string) *QueryDeviceBySQLResponseDataOTAModules {
	s.ModuleName = &v
	return s
}

func (s *QueryDeviceBySQLResponseDataOTAModules) SetFirmwareVersion(v string) *QueryDeviceBySQLResponseDataOTAModules {
	s.FirmwareVersion = &v
	return s
}

type ListOTAModuleByProductRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
}

func (s ListOTAModuleByProductRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOTAModuleByProductRequest) GoString() string {
	return s.String()
}

func (s *ListOTAModuleByProductRequest) SetIotInstanceId(v string) *ListOTAModuleByProductRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListOTAModuleByProductRequest) SetProductKey(v string) *ListOTAModuleByProductRequest {
	s.ProductKey = &v
	return s
}

type ListOTAModuleByProductResponse struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                 `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                               `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         []*ListOTAModuleByProductResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s ListOTAModuleByProductResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOTAModuleByProductResponse) GoString() string {
	return s.String()
}

func (s *ListOTAModuleByProductResponse) SetRequestId(v string) *ListOTAModuleByProductResponse {
	s.RequestId = &v
	return s
}

func (s *ListOTAModuleByProductResponse) SetSuccess(v bool) *ListOTAModuleByProductResponse {
	s.Success = &v
	return s
}

func (s *ListOTAModuleByProductResponse) SetCode(v string) *ListOTAModuleByProductResponse {
	s.Code = &v
	return s
}

func (s *ListOTAModuleByProductResponse) SetErrorMessage(v string) *ListOTAModuleByProductResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListOTAModuleByProductResponse) SetData(v []*ListOTAModuleByProductResponseData) *ListOTAModuleByProductResponse {
	s.Data = v
	return s
}

type ListOTAModuleByProductResponseData struct {
	ProductKey  *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ModuleName  *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty" require:"true"`
	AliasName   *string `json:"AliasName,omitempty" xml:"AliasName,omitempty" require:"true"`
	Desc        *string `json:"Desc,omitempty" xml:"Desc,omitempty" require:"true"`
	GmtCreate   *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
}

func (s ListOTAModuleByProductResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListOTAModuleByProductResponseData) GoString() string {
	return s.String()
}

func (s *ListOTAModuleByProductResponseData) SetProductKey(v string) *ListOTAModuleByProductResponseData {
	s.ProductKey = &v
	return s
}

func (s *ListOTAModuleByProductResponseData) SetModuleName(v string) *ListOTAModuleByProductResponseData {
	s.ModuleName = &v
	return s
}

func (s *ListOTAModuleByProductResponseData) SetAliasName(v string) *ListOTAModuleByProductResponseData {
	s.AliasName = &v
	return s
}

func (s *ListOTAModuleByProductResponseData) SetDesc(v string) *ListOTAModuleByProductResponseData {
	s.Desc = &v
	return s
}

func (s *ListOTAModuleByProductResponseData) SetGmtCreate(v string) *ListOTAModuleByProductResponseData {
	s.GmtCreate = &v
	return s
}

func (s *ListOTAModuleByProductResponseData) SetGmtModified(v string) *ListOTAModuleByProductResponseData {
	s.GmtModified = &v
	return s
}

type DeleteOTAModuleRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ModuleName    *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty" require:"true"`
}

func (s DeleteOTAModuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteOTAModuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteOTAModuleRequest) SetIotInstanceId(v string) *DeleteOTAModuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteOTAModuleRequest) SetProductKey(v string) *DeleteOTAModuleRequest {
	s.ProductKey = &v
	return s
}

func (s *DeleteOTAModuleRequest) SetModuleName(v string) *DeleteOTAModuleRequest {
	s.ModuleName = &v
	return s
}

type DeleteOTAModuleResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteOTAModuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteOTAModuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteOTAModuleResponse) SetRequestId(v string) *DeleteOTAModuleResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteOTAModuleResponse) SetSuccess(v bool) *DeleteOTAModuleResponse {
	s.Success = &v
	return s
}

func (s *DeleteOTAModuleResponse) SetCode(v string) *DeleteOTAModuleResponse {
	s.Code = &v
	return s
}

func (s *DeleteOTAModuleResponse) SetErrorMessage(v string) *DeleteOTAModuleResponse {
	s.ErrorMessage = &v
	return s
}

type GenerateDeviceNameListURLRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
}

func (s GenerateDeviceNameListURLRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateDeviceNameListURLRequest) GoString() string {
	return s.String()
}

func (s *GenerateDeviceNameListURLRequest) SetIotInstanceId(v string) *GenerateDeviceNameListURLRequest {
	s.IotInstanceId = &v
	return s
}

type GenerateDeviceNameListURLResponse struct {
	RequestId    *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                  `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *GenerateDeviceNameListURLResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GenerateDeviceNameListURLResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateDeviceNameListURLResponse) GoString() string {
	return s.String()
}

func (s *GenerateDeviceNameListURLResponse) SetRequestId(v string) *GenerateDeviceNameListURLResponse {
	s.RequestId = &v
	return s
}

func (s *GenerateDeviceNameListURLResponse) SetSuccess(v bool) *GenerateDeviceNameListURLResponse {
	s.Success = &v
	return s
}

func (s *GenerateDeviceNameListURLResponse) SetCode(v string) *GenerateDeviceNameListURLResponse {
	s.Code = &v
	return s
}

func (s *GenerateDeviceNameListURLResponse) SetErrorMessage(v string) *GenerateDeviceNameListURLResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GenerateDeviceNameListURLResponse) SetData(v *GenerateDeviceNameListURLResponseData) *GenerateDeviceNameListURLResponse {
	s.Data = v
	return s
}

type GenerateDeviceNameListURLResponseData struct {
	Key           *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Host          *string `json:"Host,omitempty" xml:"Host,omitempty" require:"true"`
	Policy        *string `json:"Policy,omitempty" xml:"Policy,omitempty" require:"true"`
	AccessKeyId   *string `json:"AccessKeyId,omitempty" xml:"AccessKeyId,omitempty" require:"true"`
	Signature     *string `json:"Signature,omitempty" xml:"Signature,omitempty" require:"true"`
	FileUrl       *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty" require:"true"`
	UtcCreate     *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	ObjectStorage *string `json:"ObjectStorage,omitempty" xml:"ObjectStorage,omitempty" require:"true"`
}

func (s GenerateDeviceNameListURLResponseData) String() string {
	return tea.Prettify(s)
}

func (s GenerateDeviceNameListURLResponseData) GoString() string {
	return s.String()
}

func (s *GenerateDeviceNameListURLResponseData) SetKey(v string) *GenerateDeviceNameListURLResponseData {
	s.Key = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseData) SetHost(v string) *GenerateDeviceNameListURLResponseData {
	s.Host = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseData) SetPolicy(v string) *GenerateDeviceNameListURLResponseData {
	s.Policy = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseData) SetAccessKeyId(v string) *GenerateDeviceNameListURLResponseData {
	s.AccessKeyId = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseData) SetSignature(v string) *GenerateDeviceNameListURLResponseData {
	s.Signature = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseData) SetFileUrl(v string) *GenerateDeviceNameListURLResponseData {
	s.FileUrl = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseData) SetUtcCreate(v string) *GenerateDeviceNameListURLResponseData {
	s.UtcCreate = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseData) SetObjectStorage(v string) *GenerateDeviceNameListURLResponseData {
	s.ObjectStorage = &v
	return s
}

type UpdateOTAModuleRequest struct {
	AliasName     *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ModuleName    *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty" require:"true"`
	Desc          *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
}

func (s UpdateOTAModuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateOTAModuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateOTAModuleRequest) SetAliasName(v string) *UpdateOTAModuleRequest {
	s.AliasName = &v
	return s
}

func (s *UpdateOTAModuleRequest) SetIotInstanceId(v string) *UpdateOTAModuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateOTAModuleRequest) SetModuleName(v string) *UpdateOTAModuleRequest {
	s.ModuleName = &v
	return s
}

func (s *UpdateOTAModuleRequest) SetDesc(v string) *UpdateOTAModuleRequest {
	s.Desc = &v
	return s
}

func (s *UpdateOTAModuleRequest) SetProductKey(v string) *UpdateOTAModuleRequest {
	s.ProductKey = &v
	return s
}

type UpdateOTAModuleResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateOTAModuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateOTAModuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateOTAModuleResponse) SetRequestId(v string) *UpdateOTAModuleResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateOTAModuleResponse) SetSuccess(v bool) *UpdateOTAModuleResponse {
	s.Success = &v
	return s
}

func (s *UpdateOTAModuleResponse) SetCode(v string) *UpdateOTAModuleResponse {
	s.Code = &v
	return s
}

func (s *UpdateOTAModuleResponse) SetErrorMessage(v string) *UpdateOTAModuleResponse {
	s.ErrorMessage = &v
	return s
}

type CreateOTAModuleRequest struct {
	AliasName     *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ModuleName    *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty" require:"true"`
	Desc          *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
}

func (s CreateOTAModuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAModuleRequest) GoString() string {
	return s.String()
}

func (s *CreateOTAModuleRequest) SetAliasName(v string) *CreateOTAModuleRequest {
	s.AliasName = &v
	return s
}

func (s *CreateOTAModuleRequest) SetIotInstanceId(v string) *CreateOTAModuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateOTAModuleRequest) SetModuleName(v string) *CreateOTAModuleRequest {
	s.ModuleName = &v
	return s
}

func (s *CreateOTAModuleRequest) SetDesc(v string) *CreateOTAModuleRequest {
	s.Desc = &v
	return s
}

func (s *CreateOTAModuleRequest) SetProductKey(v string) *CreateOTAModuleRequest {
	s.ProductKey = &v
	return s
}

type CreateOTAModuleResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s CreateOTAModuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAModuleResponse) GoString() string {
	return s.String()
}

func (s *CreateOTAModuleResponse) SetRequestId(v string) *CreateOTAModuleResponse {
	s.RequestId = &v
	return s
}

func (s *CreateOTAModuleResponse) SetSuccess(v bool) *CreateOTAModuleResponse {
	s.Success = &v
	return s
}

func (s *CreateOTAModuleResponse) SetCode(v string) *CreateOTAModuleResponse {
	s.Code = &v
	return s
}

func (s *CreateOTAModuleResponse) SetErrorMessage(v string) *CreateOTAModuleResponse {
	s.ErrorMessage = &v
	return s
}

type QueryThingModelExtendConfigPublishedRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ModelVersion    *string `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty"`
	FunctionBlockId *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
}

func (s QueryThingModelExtendConfigPublishedRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelExtendConfigPublishedRequest) GoString() string {
	return s.String()
}

func (s *QueryThingModelExtendConfigPublishedRequest) SetIotInstanceId(v string) *QueryThingModelExtendConfigPublishedRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedRequest) SetProductKey(v string) *QueryThingModelExtendConfigPublishedRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedRequest) SetModelVersion(v string) *QueryThingModelExtendConfigPublishedRequest {
	s.ModelVersion = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedRequest) SetFunctionBlockId(v string) *QueryThingModelExtendConfigPublishedRequest {
	s.FunctionBlockId = &v
	return s
}

type QueryThingModelExtendConfigPublishedResponse struct {
	RequestId    *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                             `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                           `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryThingModelExtendConfigPublishedResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryThingModelExtendConfigPublishedResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelExtendConfigPublishedResponse) GoString() string {
	return s.String()
}

func (s *QueryThingModelExtendConfigPublishedResponse) SetRequestId(v string) *QueryThingModelExtendConfigPublishedResponse {
	s.RequestId = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedResponse) SetSuccess(v bool) *QueryThingModelExtendConfigPublishedResponse {
	s.Success = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedResponse) SetCode(v string) *QueryThingModelExtendConfigPublishedResponse {
	s.Code = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedResponse) SetErrorMessage(v string) *QueryThingModelExtendConfigPublishedResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedResponse) SetData(v *QueryThingModelExtendConfigPublishedResponseData) *QueryThingModelExtendConfigPublishedResponse {
	s.Data = v
	return s
}

type QueryThingModelExtendConfigPublishedResponseData struct {
	Configuration *string `json:"Configuration,omitempty" xml:"Configuration,omitempty" require:"true"`
}

func (s QueryThingModelExtendConfigPublishedResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelExtendConfigPublishedResponseData) GoString() string {
	return s.String()
}

func (s *QueryThingModelExtendConfigPublishedResponseData) SetConfiguration(v string) *QueryThingModelExtendConfigPublishedResponseData {
	s.Configuration = &v
	return s
}

type GetThingModelTslPublishedRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Simple          *bool   `json:"Simple,omitempty" xml:"Simple,omitempty"`
	ModelVersion    *string `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty"`
	FunctionBlockId *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
}

func (s GetThingModelTslPublishedRequest) String() string {
	return tea.Prettify(s)
}

func (s GetThingModelTslPublishedRequest) GoString() string {
	return s.String()
}

func (s *GetThingModelTslPublishedRequest) SetIotInstanceId(v string) *GetThingModelTslPublishedRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetThingModelTslPublishedRequest) SetProductKey(v string) *GetThingModelTslPublishedRequest {
	s.ProductKey = &v
	return s
}

func (s *GetThingModelTslPublishedRequest) SetResourceGroupId(v string) *GetThingModelTslPublishedRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *GetThingModelTslPublishedRequest) SetSimple(v bool) *GetThingModelTslPublishedRequest {
	s.Simple = &v
	return s
}

func (s *GetThingModelTslPublishedRequest) SetModelVersion(v string) *GetThingModelTslPublishedRequest {
	s.ModelVersion = &v
	return s
}

func (s *GetThingModelTslPublishedRequest) SetFunctionBlockId(v string) *GetThingModelTslPublishedRequest {
	s.FunctionBlockId = &v
	return s
}

type GetThingModelTslPublishedResponse struct {
	RequestId    *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                  `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *GetThingModelTslPublishedResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetThingModelTslPublishedResponse) String() string {
	return tea.Prettify(s)
}

func (s GetThingModelTslPublishedResponse) GoString() string {
	return s.String()
}

func (s *GetThingModelTslPublishedResponse) SetRequestId(v string) *GetThingModelTslPublishedResponse {
	s.RequestId = &v
	return s
}

func (s *GetThingModelTslPublishedResponse) SetSuccess(v bool) *GetThingModelTslPublishedResponse {
	s.Success = &v
	return s
}

func (s *GetThingModelTslPublishedResponse) SetCode(v string) *GetThingModelTslPublishedResponse {
	s.Code = &v
	return s
}

func (s *GetThingModelTslPublishedResponse) SetErrorMessage(v string) *GetThingModelTslPublishedResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetThingModelTslPublishedResponse) SetData(v *GetThingModelTslPublishedResponseData) *GetThingModelTslPublishedResponse {
	s.Data = v
	return s
}

type GetThingModelTslPublishedResponseData struct {
	TslStr *string `json:"TslStr,omitempty" xml:"TslStr,omitempty" require:"true"`
	TslUri *string `json:"TslUri,omitempty" xml:"TslUri,omitempty" require:"true"`
}

func (s GetThingModelTslPublishedResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetThingModelTslPublishedResponseData) GoString() string {
	return s.String()
}

func (s *GetThingModelTslPublishedResponseData) SetTslStr(v string) *GetThingModelTslPublishedResponseData {
	s.TslStr = &v
	return s
}

func (s *GetThingModelTslPublishedResponseData) SetTslUri(v string) *GetThingModelTslPublishedResponseData {
	s.TslUri = &v
	return s
}

type QueryThingModelPublishedRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ModelVersion    *string `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty"`
	FunctionBlockId *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
}

func (s QueryThingModelPublishedRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelPublishedRequest) GoString() string {
	return s.String()
}

func (s *QueryThingModelPublishedRequest) SetIotInstanceId(v string) *QueryThingModelPublishedRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryThingModelPublishedRequest) SetProductKey(v string) *QueryThingModelPublishedRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryThingModelPublishedRequest) SetResourceGroupId(v string) *QueryThingModelPublishedRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *QueryThingModelPublishedRequest) SetModelVersion(v string) *QueryThingModelPublishedRequest {
	s.ModelVersion = &v
	return s
}

func (s *QueryThingModelPublishedRequest) SetFunctionBlockId(v string) *QueryThingModelPublishedRequest {
	s.FunctionBlockId = &v
	return s
}

type QueryThingModelPublishedResponse struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                 `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                               `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	ProductKey   *string                               `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Data         *QueryThingModelPublishedResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryThingModelPublishedResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelPublishedResponse) GoString() string {
	return s.String()
}

func (s *QueryThingModelPublishedResponse) SetRequestId(v string) *QueryThingModelPublishedResponse {
	s.RequestId = &v
	return s
}

func (s *QueryThingModelPublishedResponse) SetSuccess(v bool) *QueryThingModelPublishedResponse {
	s.Success = &v
	return s
}

func (s *QueryThingModelPublishedResponse) SetCode(v string) *QueryThingModelPublishedResponse {
	s.Code = &v
	return s
}

func (s *QueryThingModelPublishedResponse) SetErrorMessage(v string) *QueryThingModelPublishedResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryThingModelPublishedResponse) SetProductKey(v string) *QueryThingModelPublishedResponse {
	s.ProductKey = &v
	return s
}

func (s *QueryThingModelPublishedResponse) SetData(v *QueryThingModelPublishedResponseData) *QueryThingModelPublishedResponse {
	s.Data = v
	return s
}

type QueryThingModelPublishedResponseData struct {
	ThingModelJson *string `json:"ThingModelJson,omitempty" xml:"ThingModelJson,omitempty" require:"true"`
}

func (s QueryThingModelPublishedResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelPublishedResponseData) GoString() string {
	return s.String()
}

func (s *QueryThingModelPublishedResponseData) SetThingModelJson(v string) *QueryThingModelPublishedResponseData {
	s.ThingModelJson = &v
	return s
}

type QueryThingModelExtendConfigRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ModelVersion    *string `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty"`
	FunctionBlockId *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
}

func (s QueryThingModelExtendConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelExtendConfigRequest) GoString() string {
	return s.String()
}

func (s *QueryThingModelExtendConfigRequest) SetIotInstanceId(v string) *QueryThingModelExtendConfigRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryThingModelExtendConfigRequest) SetProductKey(v string) *QueryThingModelExtendConfigRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryThingModelExtendConfigRequest) SetResourceGroupId(v string) *QueryThingModelExtendConfigRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *QueryThingModelExtendConfigRequest) SetModelVersion(v string) *QueryThingModelExtendConfigRequest {
	s.ModelVersion = &v
	return s
}

func (s *QueryThingModelExtendConfigRequest) SetFunctionBlockId(v string) *QueryThingModelExtendConfigRequest {
	s.FunctionBlockId = &v
	return s
}

type QueryThingModelExtendConfigResponse struct {
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                    `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                  `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryThingModelExtendConfigResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryThingModelExtendConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelExtendConfigResponse) GoString() string {
	return s.String()
}

func (s *QueryThingModelExtendConfigResponse) SetRequestId(v string) *QueryThingModelExtendConfigResponse {
	s.RequestId = &v
	return s
}

func (s *QueryThingModelExtendConfigResponse) SetSuccess(v bool) *QueryThingModelExtendConfigResponse {
	s.Success = &v
	return s
}

func (s *QueryThingModelExtendConfigResponse) SetCode(v string) *QueryThingModelExtendConfigResponse {
	s.Code = &v
	return s
}

func (s *QueryThingModelExtendConfigResponse) SetErrorMessage(v string) *QueryThingModelExtendConfigResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryThingModelExtendConfigResponse) SetData(v *QueryThingModelExtendConfigResponseData) *QueryThingModelExtendConfigResponse {
	s.Data = v
	return s
}

type QueryThingModelExtendConfigResponseData struct {
	Configuration *string `json:"Configuration,omitempty" xml:"Configuration,omitempty" require:"true"`
}

func (s QueryThingModelExtendConfigResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelExtendConfigResponseData) GoString() string {
	return s.String()
}

func (s *QueryThingModelExtendConfigResponseData) SetConfiguration(v string) *QueryThingModelExtendConfigResponseData {
	s.Configuration = &v
	return s
}

type ListDistributedDeviceRequest struct {
	PageSize         *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	ProductKey       *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName       *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	CurrentPage      *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	TargetUid        *string `json:"TargetUid,omitempty" xml:"TargetUid,omitempty"`
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
}

func (s ListDistributedDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedDeviceRequest) GoString() string {
	return s.String()
}

func (s *ListDistributedDeviceRequest) SetPageSize(v int) *ListDistributedDeviceRequest {
	s.PageSize = &v
	return s
}

func (s *ListDistributedDeviceRequest) SetProductKey(v string) *ListDistributedDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *ListDistributedDeviceRequest) SetDeviceName(v string) *ListDistributedDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *ListDistributedDeviceRequest) SetCurrentPage(v int) *ListDistributedDeviceRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListDistributedDeviceRequest) SetTargetUid(v string) *ListDistributedDeviceRequest {
	s.TargetUid = &v
	return s
}

func (s *ListDistributedDeviceRequest) SetSourceInstanceId(v string) *ListDistributedDeviceRequest {
	s.SourceInstanceId = &v
	return s
}

type ListDistributedDeviceResponse struct {
	RequestId    *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                              `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *ListDistributedDeviceResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListDistributedDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedDeviceResponse) GoString() string {
	return s.String()
}

func (s *ListDistributedDeviceResponse) SetRequestId(v string) *ListDistributedDeviceResponse {
	s.RequestId = &v
	return s
}

func (s *ListDistributedDeviceResponse) SetSuccess(v bool) *ListDistributedDeviceResponse {
	s.Success = &v
	return s
}

func (s *ListDistributedDeviceResponse) SetCode(v string) *ListDistributedDeviceResponse {
	s.Code = &v
	return s
}

func (s *ListDistributedDeviceResponse) SetErrorMessage(v string) *ListDistributedDeviceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListDistributedDeviceResponse) SetData(v *ListDistributedDeviceResponseData) *ListDistributedDeviceResponse {
	s.Data = v
	return s
}

type ListDistributedDeviceResponseData struct {
	Total *int                                   `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	Info  *ListDistributedDeviceResponseDataInfo `json:"Info,omitempty" xml:"Info,omitempty" require:"true" type:"Struct"`
}

func (s ListDistributedDeviceResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedDeviceResponseData) GoString() string {
	return s.String()
}

func (s *ListDistributedDeviceResponseData) SetTotal(v int) *ListDistributedDeviceResponseData {
	s.Total = &v
	return s
}

func (s *ListDistributedDeviceResponseData) SetInfo(v *ListDistributedDeviceResponseDataInfo) *ListDistributedDeviceResponseData {
	s.Info = v
	return s
}

type ListDistributedDeviceResponseDataInfo struct {
	Items []*ListDistributedDeviceResponseDataInfoItems `json:"items,omitempty" xml:"items,omitempty" require:"true" type:"Repeated"`
}

func (s ListDistributedDeviceResponseDataInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedDeviceResponseDataInfo) GoString() string {
	return s.String()
}

func (s *ListDistributedDeviceResponseDataInfo) SetItems(v []*ListDistributedDeviceResponseDataInfoItems) *ListDistributedDeviceResponseDataInfo {
	s.Items = v
	return s
}

type ListDistributedDeviceResponseDataInfoItems struct {
	SourceUid          *string `json:"SourceUid,omitempty" xml:"SourceUid,omitempty" require:"true"`
	TargetUid          *string `json:"TargetUid,omitempty" xml:"TargetUid,omitempty" require:"true"`
	ProductKey         *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName         *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	SourceInstanceId   *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty" require:"true"`
	TargetInstanceId   *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty" require:"true"`
	GmtCreate          *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	TargetAliyunId     *string `json:"TargetAliyunId,omitempty" xml:"TargetAliyunId,omitempty" require:"true"`
	SourceRegion       *string `json:"SourceRegion,omitempty" xml:"SourceRegion,omitempty" require:"true"`
	TargetRegion       *string `json:"TargetRegion,omitempty" xml:"TargetRegion,omitempty" require:"true"`
	SourceInstanceName *string `json:"SourceInstanceName,omitempty" xml:"SourceInstanceName,omitempty" require:"true"`
	TargetInstanceName *string `json:"TargetInstanceName,omitempty" xml:"TargetInstanceName,omitempty" require:"true"`
	GmtModified        *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
}

func (s ListDistributedDeviceResponseDataInfoItems) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedDeviceResponseDataInfoItems) GoString() string {
	return s.String()
}

func (s *ListDistributedDeviceResponseDataInfoItems) SetSourceUid(v string) *ListDistributedDeviceResponseDataInfoItems {
	s.SourceUid = &v
	return s
}

func (s *ListDistributedDeviceResponseDataInfoItems) SetTargetUid(v string) *ListDistributedDeviceResponseDataInfoItems {
	s.TargetUid = &v
	return s
}

func (s *ListDistributedDeviceResponseDataInfoItems) SetProductKey(v string) *ListDistributedDeviceResponseDataInfoItems {
	s.ProductKey = &v
	return s
}

func (s *ListDistributedDeviceResponseDataInfoItems) SetDeviceName(v string) *ListDistributedDeviceResponseDataInfoItems {
	s.DeviceName = &v
	return s
}

func (s *ListDistributedDeviceResponseDataInfoItems) SetSourceInstanceId(v string) *ListDistributedDeviceResponseDataInfoItems {
	s.SourceInstanceId = &v
	return s
}

func (s *ListDistributedDeviceResponseDataInfoItems) SetTargetInstanceId(v string) *ListDistributedDeviceResponseDataInfoItems {
	s.TargetInstanceId = &v
	return s
}

func (s *ListDistributedDeviceResponseDataInfoItems) SetGmtCreate(v int64) *ListDistributedDeviceResponseDataInfoItems {
	s.GmtCreate = &v
	return s
}

func (s *ListDistributedDeviceResponseDataInfoItems) SetTargetAliyunId(v string) *ListDistributedDeviceResponseDataInfoItems {
	s.TargetAliyunId = &v
	return s
}

func (s *ListDistributedDeviceResponseDataInfoItems) SetSourceRegion(v string) *ListDistributedDeviceResponseDataInfoItems {
	s.SourceRegion = &v
	return s
}

func (s *ListDistributedDeviceResponseDataInfoItems) SetTargetRegion(v string) *ListDistributedDeviceResponseDataInfoItems {
	s.TargetRegion = &v
	return s
}

func (s *ListDistributedDeviceResponseDataInfoItems) SetSourceInstanceName(v string) *ListDistributedDeviceResponseDataInfoItems {
	s.SourceInstanceName = &v
	return s
}

func (s *ListDistributedDeviceResponseDataInfoItems) SetTargetInstanceName(v string) *ListDistributedDeviceResponseDataInfoItems {
	s.TargetInstanceName = &v
	return s
}

func (s *ListDistributedDeviceResponseDataInfoItems) SetGmtModified(v int64) *ListDistributedDeviceResponseDataInfoItems {
	s.GmtModified = &v
	return s
}

type ListDistributedProductRequest struct {
	PageSize         *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	ProductKey       *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	TargetInstanceId *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty"`
	TargetUid        *string `json:"TargetUid,omitempty" xml:"TargetUid,omitempty"`
	CurrentPage      *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
}

func (s ListDistributedProductRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedProductRequest) GoString() string {
	return s.String()
}

func (s *ListDistributedProductRequest) SetPageSize(v int) *ListDistributedProductRequest {
	s.PageSize = &v
	return s
}

func (s *ListDistributedProductRequest) SetSourceInstanceId(v string) *ListDistributedProductRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *ListDistributedProductRequest) SetProductKey(v string) *ListDistributedProductRequest {
	s.ProductKey = &v
	return s
}

func (s *ListDistributedProductRequest) SetTargetInstanceId(v string) *ListDistributedProductRequest {
	s.TargetInstanceId = &v
	return s
}

func (s *ListDistributedProductRequest) SetTargetUid(v string) *ListDistributedProductRequest {
	s.TargetUid = &v
	return s
}

func (s *ListDistributedProductRequest) SetCurrentPage(v int) *ListDistributedProductRequest {
	s.CurrentPage = &v
	return s
}

type ListDistributedProductResponse struct {
	RequestId    *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                               `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                             `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *ListDistributedProductResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListDistributedProductResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedProductResponse) GoString() string {
	return s.String()
}

func (s *ListDistributedProductResponse) SetRequestId(v string) *ListDistributedProductResponse {
	s.RequestId = &v
	return s
}

func (s *ListDistributedProductResponse) SetSuccess(v bool) *ListDistributedProductResponse {
	s.Success = &v
	return s
}

func (s *ListDistributedProductResponse) SetCode(v string) *ListDistributedProductResponse {
	s.Code = &v
	return s
}

func (s *ListDistributedProductResponse) SetErrorMessage(v string) *ListDistributedProductResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListDistributedProductResponse) SetData(v *ListDistributedProductResponseData) *ListDistributedProductResponse {
	s.Data = v
	return s
}

type ListDistributedProductResponseData struct {
	Total *int                                    `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	Info  *ListDistributedProductResponseDataInfo `json:"Info,omitempty" xml:"Info,omitempty" require:"true" type:"Struct"`
}

func (s ListDistributedProductResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedProductResponseData) GoString() string {
	return s.String()
}

func (s *ListDistributedProductResponseData) SetTotal(v int) *ListDistributedProductResponseData {
	s.Total = &v
	return s
}

func (s *ListDistributedProductResponseData) SetInfo(v *ListDistributedProductResponseDataInfo) *ListDistributedProductResponseData {
	s.Info = v
	return s
}

type ListDistributedProductResponseDataInfo struct {
	Items []*ListDistributedProductResponseDataInfoItems `json:"items,omitempty" xml:"items,omitempty" require:"true" type:"Repeated"`
}

func (s ListDistributedProductResponseDataInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedProductResponseDataInfo) GoString() string {
	return s.String()
}

func (s *ListDistributedProductResponseDataInfo) SetItems(v []*ListDistributedProductResponseDataInfoItems) *ListDistributedProductResponseDataInfo {
	s.Items = v
	return s
}

type ListDistributedProductResponseDataInfoItems struct {
	SourceUid          *string `json:"SourceUid,omitempty" xml:"SourceUid,omitempty" require:"true"`
	TargetUid          *string `json:"TargetUid,omitempty" xml:"TargetUid,omitempty" require:"true"`
	ProductKey         *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	SourceInstanceId   *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty" require:"true"`
	TargetInstanceId   *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty" require:"true"`
	GmtCreate          *int    `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	TargetAliyunId     *string `json:"TargetAliyunId,omitempty" xml:"TargetAliyunId,omitempty" require:"true"`
	SourceRegion       *string `json:"SourceRegion,omitempty" xml:"SourceRegion,omitempty" require:"true"`
	TargetRegion       *string `json:"TargetRegion,omitempty" xml:"TargetRegion,omitempty" require:"true"`
	SourceInstanceName *string `json:"SourceInstanceName,omitempty" xml:"SourceInstanceName,omitempty" require:"true"`
	TargetInstanceName *string `json:"TargetInstanceName,omitempty" xml:"TargetInstanceName,omitempty" require:"true"`
}

func (s ListDistributedProductResponseDataInfoItems) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedProductResponseDataInfoItems) GoString() string {
	return s.String()
}

func (s *ListDistributedProductResponseDataInfoItems) SetSourceUid(v string) *ListDistributedProductResponseDataInfoItems {
	s.SourceUid = &v
	return s
}

func (s *ListDistributedProductResponseDataInfoItems) SetTargetUid(v string) *ListDistributedProductResponseDataInfoItems {
	s.TargetUid = &v
	return s
}

func (s *ListDistributedProductResponseDataInfoItems) SetProductKey(v string) *ListDistributedProductResponseDataInfoItems {
	s.ProductKey = &v
	return s
}

func (s *ListDistributedProductResponseDataInfoItems) SetSourceInstanceId(v string) *ListDistributedProductResponseDataInfoItems {
	s.SourceInstanceId = &v
	return s
}

func (s *ListDistributedProductResponseDataInfoItems) SetTargetInstanceId(v string) *ListDistributedProductResponseDataInfoItems {
	s.TargetInstanceId = &v
	return s
}

func (s *ListDistributedProductResponseDataInfoItems) SetGmtCreate(v int) *ListDistributedProductResponseDataInfoItems {
	s.GmtCreate = &v
	return s
}

func (s *ListDistributedProductResponseDataInfoItems) SetTargetAliyunId(v string) *ListDistributedProductResponseDataInfoItems {
	s.TargetAliyunId = &v
	return s
}

func (s *ListDistributedProductResponseDataInfoItems) SetSourceRegion(v string) *ListDistributedProductResponseDataInfoItems {
	s.SourceRegion = &v
	return s
}

func (s *ListDistributedProductResponseDataInfoItems) SetTargetRegion(v string) *ListDistributedProductResponseDataInfoItems {
	s.TargetRegion = &v
	return s
}

func (s *ListDistributedProductResponseDataInfoItems) SetSourceInstanceName(v string) *ListDistributedProductResponseDataInfoItems {
	s.SourceInstanceName = &v
	return s
}

func (s *ListDistributedProductResponseDataInfoItems) SetTargetInstanceName(v string) *ListDistributedProductResponseDataInfoItems {
	s.TargetInstanceName = &v
	return s
}

type QuerySubscribeRelationRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s QuerySubscribeRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySubscribeRelationRequest) GoString() string {
	return s.String()
}

func (s *QuerySubscribeRelationRequest) SetIotInstanceId(v string) *QuerySubscribeRelationRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QuerySubscribeRelationRequest) SetProductKey(v string) *QuerySubscribeRelationRequest {
	s.ProductKey = &v
	return s
}

func (s *QuerySubscribeRelationRequest) SetType(v string) *QuerySubscribeRelationRequest {
	s.Type = &v
	return s
}

type QuerySubscribeRelationResponse struct {
	RequestId               *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success                 *bool     `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code                    *string   `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage            *string   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	ProductKey              *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Type                    *string   `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	DeviceDataFlag          *bool     `json:"DeviceDataFlag,omitempty" xml:"DeviceDataFlag,omitempty" require:"true"`
	DeviceLifeCycleFlag     *bool     `json:"DeviceLifeCycleFlag,omitempty" xml:"DeviceLifeCycleFlag,omitempty" require:"true"`
	DeviceStatusChangeFlag  *bool     `json:"DeviceStatusChangeFlag,omitempty" xml:"DeviceStatusChangeFlag,omitempty" require:"true"`
	DeviceTopoLifeCycleFlag *bool     `json:"DeviceTopoLifeCycleFlag,omitempty" xml:"DeviceTopoLifeCycleFlag,omitempty" require:"true"`
	FoundDeviceListFlag     *bool     `json:"FoundDeviceListFlag,omitempty" xml:"FoundDeviceListFlag,omitempty" require:"true"`
	OtaEventFlag            *bool     `json:"OtaEventFlag,omitempty" xml:"OtaEventFlag,omitempty" require:"true"`
	ThingHistoryFlag        *bool     `json:"ThingHistoryFlag,omitempty" xml:"ThingHistoryFlag,omitempty" require:"true"`
	MnsConfiguration        *string   `json:"MnsConfiguration,omitempty" xml:"MnsConfiguration,omitempty" require:"true"`
	DeviceTagFlag           *bool     `json:"DeviceTagFlag,omitempty" xml:"DeviceTagFlag,omitempty" require:"true"`
	OtaVersionFlag          *bool     `json:"OtaVersionFlag,omitempty" xml:"OtaVersionFlag,omitempty" require:"true"`
	OtaJobFlag              *bool     `json:"OtaJobFlag,omitempty" xml:"OtaJobFlag,omitempty" require:"true"`
	ConsumerGroupIds        []*string `json:"ConsumerGroupIds,omitempty" xml:"ConsumerGroupIds,omitempty" require:"true" type:"Repeated"`
}

func (s QuerySubscribeRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySubscribeRelationResponse) GoString() string {
	return s.String()
}

func (s *QuerySubscribeRelationResponse) SetRequestId(v string) *QuerySubscribeRelationResponse {
	s.RequestId = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetSuccess(v bool) *QuerySubscribeRelationResponse {
	s.Success = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetCode(v string) *QuerySubscribeRelationResponse {
	s.Code = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetErrorMessage(v string) *QuerySubscribeRelationResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetProductKey(v string) *QuerySubscribeRelationResponse {
	s.ProductKey = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetType(v string) *QuerySubscribeRelationResponse {
	s.Type = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetDeviceDataFlag(v bool) *QuerySubscribeRelationResponse {
	s.DeviceDataFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetDeviceLifeCycleFlag(v bool) *QuerySubscribeRelationResponse {
	s.DeviceLifeCycleFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetDeviceStatusChangeFlag(v bool) *QuerySubscribeRelationResponse {
	s.DeviceStatusChangeFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetDeviceTopoLifeCycleFlag(v bool) *QuerySubscribeRelationResponse {
	s.DeviceTopoLifeCycleFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetFoundDeviceListFlag(v bool) *QuerySubscribeRelationResponse {
	s.FoundDeviceListFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetOtaEventFlag(v bool) *QuerySubscribeRelationResponse {
	s.OtaEventFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetThingHistoryFlag(v bool) *QuerySubscribeRelationResponse {
	s.ThingHistoryFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetMnsConfiguration(v string) *QuerySubscribeRelationResponse {
	s.MnsConfiguration = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetDeviceTagFlag(v bool) *QuerySubscribeRelationResponse {
	s.DeviceTagFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetOtaVersionFlag(v bool) *QuerySubscribeRelationResponse {
	s.OtaVersionFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetOtaJobFlag(v bool) *QuerySubscribeRelationResponse {
	s.OtaJobFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponse) SetConsumerGroupIds(v []*string) *QuerySubscribeRelationResponse {
	s.ConsumerGroupIds = v
	return s
}

type CreateConsumerGroupSubscribeRelationRequest struct {
	ConsumerGroupId *string `json:"ConsumerGroupId,omitempty" xml:"ConsumerGroupId,omitempty" require:"true"`
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
}

func (s CreateConsumerGroupSubscribeRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerGroupSubscribeRelationRequest) GoString() string {
	return s.String()
}

func (s *CreateConsumerGroupSubscribeRelationRequest) SetConsumerGroupId(v string) *CreateConsumerGroupSubscribeRelationRequest {
	s.ConsumerGroupId = &v
	return s
}

func (s *CreateConsumerGroupSubscribeRelationRequest) SetIotInstanceId(v string) *CreateConsumerGroupSubscribeRelationRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateConsumerGroupSubscribeRelationRequest) SetProductKey(v string) *CreateConsumerGroupSubscribeRelationRequest {
	s.ProductKey = &v
	return s
}

type CreateConsumerGroupSubscribeRelationResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s CreateConsumerGroupSubscribeRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerGroupSubscribeRelationResponse) GoString() string {
	return s.String()
}

func (s *CreateConsumerGroupSubscribeRelationResponse) SetRequestId(v string) *CreateConsumerGroupSubscribeRelationResponse {
	s.RequestId = &v
	return s
}

func (s *CreateConsumerGroupSubscribeRelationResponse) SetSuccess(v bool) *CreateConsumerGroupSubscribeRelationResponse {
	s.Success = &v
	return s
}

func (s *CreateConsumerGroupSubscribeRelationResponse) SetCode(v string) *CreateConsumerGroupSubscribeRelationResponse {
	s.Code = &v
	return s
}

func (s *CreateConsumerGroupSubscribeRelationResponse) SetErrorMessage(v string) *CreateConsumerGroupSubscribeRelationResponse {
	s.ErrorMessage = &v
	return s
}

type UpdateSubscribeRelationRequest struct {
	DeviceStatusChangeFlag  *bool     `json:"DeviceStatusChangeFlag,omitempty" xml:"DeviceStatusChangeFlag,omitempty"`
	IotInstanceId           *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ThingHistoryFlag        *bool     `json:"ThingHistoryFlag,omitempty" xml:"ThingHistoryFlag,omitempty"`
	ProductKey              *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Type                    *string   `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	DeviceDataFlag          *bool     `json:"DeviceDataFlag,omitempty" xml:"DeviceDataFlag,omitempty"`
	ConsumerGroupIds        []*string `json:"ConsumerGroupIds,omitempty" xml:"ConsumerGroupIds,omitempty" type:"Repeated"`
	DeviceTopoLifeCycleFlag *bool     `json:"DeviceTopoLifeCycleFlag,omitempty" xml:"DeviceTopoLifeCycleFlag,omitempty"`
	FoundDeviceListFlag     *bool     `json:"FoundDeviceListFlag,omitempty" xml:"FoundDeviceListFlag,omitempty"`
	OtaEventFlag            *bool     `json:"OtaEventFlag,omitempty" xml:"OtaEventFlag,omitempty"`
	DeviceLifeCycleFlag     *bool     `json:"DeviceLifeCycleFlag,omitempty" xml:"DeviceLifeCycleFlag,omitempty"`
	MnsConfiguration        *string   `json:"MnsConfiguration,omitempty" xml:"MnsConfiguration,omitempty"`
	DeviceTagFlag           *bool     `json:"DeviceTagFlag,omitempty" xml:"DeviceTagFlag,omitempty"`
	OtaVersionFlag          *bool     `json:"OtaVersionFlag,omitempty" xml:"OtaVersionFlag,omitempty"`
	OtaJobFlag              *bool     `json:"OtaJobFlag,omitempty" xml:"OtaJobFlag,omitempty"`
}

func (s UpdateSubscribeRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSubscribeRelationRequest) GoString() string {
	return s.String()
}

func (s *UpdateSubscribeRelationRequest) SetDeviceStatusChangeFlag(v bool) *UpdateSubscribeRelationRequest {
	s.DeviceStatusChangeFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetIotInstanceId(v string) *UpdateSubscribeRelationRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetThingHistoryFlag(v bool) *UpdateSubscribeRelationRequest {
	s.ThingHistoryFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetProductKey(v string) *UpdateSubscribeRelationRequest {
	s.ProductKey = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetType(v string) *UpdateSubscribeRelationRequest {
	s.Type = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetDeviceDataFlag(v bool) *UpdateSubscribeRelationRequest {
	s.DeviceDataFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetConsumerGroupIds(v []*string) *UpdateSubscribeRelationRequest {
	s.ConsumerGroupIds = v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetDeviceTopoLifeCycleFlag(v bool) *UpdateSubscribeRelationRequest {
	s.DeviceTopoLifeCycleFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetFoundDeviceListFlag(v bool) *UpdateSubscribeRelationRequest {
	s.FoundDeviceListFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetOtaEventFlag(v bool) *UpdateSubscribeRelationRequest {
	s.OtaEventFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetDeviceLifeCycleFlag(v bool) *UpdateSubscribeRelationRequest {
	s.DeviceLifeCycleFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetMnsConfiguration(v string) *UpdateSubscribeRelationRequest {
	s.MnsConfiguration = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetDeviceTagFlag(v bool) *UpdateSubscribeRelationRequest {
	s.DeviceTagFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetOtaVersionFlag(v bool) *UpdateSubscribeRelationRequest {
	s.OtaVersionFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetOtaJobFlag(v bool) *UpdateSubscribeRelationRequest {
	s.OtaJobFlag = &v
	return s
}

type UpdateSubscribeRelationResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateSubscribeRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSubscribeRelationResponse) GoString() string {
	return s.String()
}

func (s *UpdateSubscribeRelationResponse) SetRequestId(v string) *UpdateSubscribeRelationResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateSubscribeRelationResponse) SetSuccess(v bool) *UpdateSubscribeRelationResponse {
	s.Success = &v
	return s
}

func (s *UpdateSubscribeRelationResponse) SetCode(v string) *UpdateSubscribeRelationResponse {
	s.Code = &v
	return s
}

func (s *UpdateSubscribeRelationResponse) SetErrorMessage(v string) *UpdateSubscribeRelationResponse {
	s.ErrorMessage = &v
	return s
}

type DeleteConsumerGroupSubscribeRelationRequest struct {
	ConsumerGroupId *string `json:"ConsumerGroupId,omitempty" xml:"ConsumerGroupId,omitempty" require:"true"`
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
}

func (s DeleteConsumerGroupSubscribeRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerGroupSubscribeRelationRequest) GoString() string {
	return s.String()
}

func (s *DeleteConsumerGroupSubscribeRelationRequest) SetConsumerGroupId(v string) *DeleteConsumerGroupSubscribeRelationRequest {
	s.ConsumerGroupId = &v
	return s
}

func (s *DeleteConsumerGroupSubscribeRelationRequest) SetIotInstanceId(v string) *DeleteConsumerGroupSubscribeRelationRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteConsumerGroupSubscribeRelationRequest) SetProductKey(v string) *DeleteConsumerGroupSubscribeRelationRequest {
	s.ProductKey = &v
	return s
}

type DeleteConsumerGroupSubscribeRelationResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteConsumerGroupSubscribeRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerGroupSubscribeRelationResponse) GoString() string {
	return s.String()
}

func (s *DeleteConsumerGroupSubscribeRelationResponse) SetRequestId(v string) *DeleteConsumerGroupSubscribeRelationResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteConsumerGroupSubscribeRelationResponse) SetSuccess(v bool) *DeleteConsumerGroupSubscribeRelationResponse {
	s.Success = &v
	return s
}

func (s *DeleteConsumerGroupSubscribeRelationResponse) SetCode(v string) *DeleteConsumerGroupSubscribeRelationResponse {
	s.Code = &v
	return s
}

func (s *DeleteConsumerGroupSubscribeRelationResponse) SetErrorMessage(v string) *DeleteConsumerGroupSubscribeRelationResponse {
	s.ErrorMessage = &v
	return s
}

type ResetConsumerGroupPositionRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
}

func (s ResetConsumerGroupPositionRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetConsumerGroupPositionRequest) GoString() string {
	return s.String()
}

func (s *ResetConsumerGroupPositionRequest) SetIotInstanceId(v string) *ResetConsumerGroupPositionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ResetConsumerGroupPositionRequest) SetGroupId(v string) *ResetConsumerGroupPositionRequest {
	s.GroupId = &v
	return s
}

type ResetConsumerGroupPositionResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
}

func (s ResetConsumerGroupPositionResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetConsumerGroupPositionResponse) GoString() string {
	return s.String()
}

func (s *ResetConsumerGroupPositionResponse) SetRequestId(v string) *ResetConsumerGroupPositionResponse {
	s.RequestId = &v
	return s
}

func (s *ResetConsumerGroupPositionResponse) SetSuccess(v bool) *ResetConsumerGroupPositionResponse {
	s.Success = &v
	return s
}

func (s *ResetConsumerGroupPositionResponse) SetErrorMessage(v string) *ResetConsumerGroupPositionResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ResetConsumerGroupPositionResponse) SetCode(v string) *ResetConsumerGroupPositionResponse {
	s.Code = &v
	return s
}

type UpdateConsumerGroupRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	NewGroupName  *string `json:"NewGroupName,omitempty" xml:"NewGroupName,omitempty" require:"true"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
}

func (s UpdateConsumerGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateConsumerGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateConsumerGroupRequest) SetIotInstanceId(v string) *UpdateConsumerGroupRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateConsumerGroupRequest) SetNewGroupName(v string) *UpdateConsumerGroupRequest {
	s.NewGroupName = &v
	return s
}

func (s *UpdateConsumerGroupRequest) SetGroupId(v string) *UpdateConsumerGroupRequest {
	s.GroupId = &v
	return s
}

type UpdateConsumerGroupResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
}

func (s UpdateConsumerGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateConsumerGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateConsumerGroupResponse) SetRequestId(v string) *UpdateConsumerGroupResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateConsumerGroupResponse) SetSuccess(v bool) *UpdateConsumerGroupResponse {
	s.Success = &v
	return s
}

func (s *UpdateConsumerGroupResponse) SetErrorMessage(v string) *UpdateConsumerGroupResponse {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateConsumerGroupResponse) SetCode(v string) *UpdateConsumerGroupResponse {
	s.Code = &v
	return s
}

type BatchDeleteEdgeInstanceChannelRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	DriverId      *string   `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	ChannelIds    []*string `json:"ChannelIds,omitempty" xml:"ChannelIds,omitempty" require:"true" type:"Repeated"`
}

func (s BatchDeleteEdgeInstanceChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteEdgeInstanceChannelRequest) GoString() string {
	return s.String()
}

func (s *BatchDeleteEdgeInstanceChannelRequest) SetIotInstanceId(v string) *BatchDeleteEdgeInstanceChannelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchDeleteEdgeInstanceChannelRequest) SetInstanceId(v string) *BatchDeleteEdgeInstanceChannelRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchDeleteEdgeInstanceChannelRequest) SetDriverId(v string) *BatchDeleteEdgeInstanceChannelRequest {
	s.DriverId = &v
	return s
}

func (s *BatchDeleteEdgeInstanceChannelRequest) SetChannelIds(v []*string) *BatchDeleteEdgeInstanceChannelRequest {
	s.ChannelIds = v
	return s
}

type BatchDeleteEdgeInstanceChannelResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s BatchDeleteEdgeInstanceChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteEdgeInstanceChannelResponse) GoString() string {
	return s.String()
}

func (s *BatchDeleteEdgeInstanceChannelResponse) SetRequestId(v string) *BatchDeleteEdgeInstanceChannelResponse {
	s.RequestId = &v
	return s
}

func (s *BatchDeleteEdgeInstanceChannelResponse) SetSuccess(v bool) *BatchDeleteEdgeInstanceChannelResponse {
	s.Success = &v
	return s
}

func (s *BatchDeleteEdgeInstanceChannelResponse) SetCode(v string) *BatchDeleteEdgeInstanceChannelResponse {
	s.Code = &v
	return s
}

func (s *BatchDeleteEdgeInstanceChannelResponse) SetErrorMessage(v string) *BatchDeleteEdgeInstanceChannelResponse {
	s.ErrorMessage = &v
	return s
}

type BatchSetEdgeInstanceDeviceChannelRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	DriverId      *string   `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	ChannelId     *string   `json:"ChannelId,omitempty" xml:"ChannelId,omitempty" require:"true"`
	IotIds        []*string `json:"IotIds,omitempty" xml:"IotIds,omitempty" require:"true" type:"Repeated"`
}

func (s BatchSetEdgeInstanceDeviceChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchSetEdgeInstanceDeviceChannelRequest) GoString() string {
	return s.String()
}

func (s *BatchSetEdgeInstanceDeviceChannelRequest) SetIotInstanceId(v string) *BatchSetEdgeInstanceDeviceChannelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelRequest) SetInstanceId(v string) *BatchSetEdgeInstanceDeviceChannelRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelRequest) SetDriverId(v string) *BatchSetEdgeInstanceDeviceChannelRequest {
	s.DriverId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelRequest) SetChannelId(v string) *BatchSetEdgeInstanceDeviceChannelRequest {
	s.ChannelId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelRequest) SetIotIds(v []*string) *BatchSetEdgeInstanceDeviceChannelRequest {
	s.IotIds = v
	return s
}

type BatchSetEdgeInstanceDeviceChannelResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s BatchSetEdgeInstanceDeviceChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchSetEdgeInstanceDeviceChannelResponse) GoString() string {
	return s.String()
}

func (s *BatchSetEdgeInstanceDeviceChannelResponse) SetRequestId(v string) *BatchSetEdgeInstanceDeviceChannelResponse {
	s.RequestId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelResponse) SetSuccess(v bool) *BatchSetEdgeInstanceDeviceChannelResponse {
	s.Success = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelResponse) SetCode(v string) *BatchSetEdgeInstanceDeviceChannelResponse {
	s.Code = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelResponse) SetErrorMessage(v string) *BatchSetEdgeInstanceDeviceChannelResponse {
	s.ErrorMessage = &v
	return s
}

type BatchGetEdgeInstanceDeviceDriverRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	IotIds        []*string `json:"IotIds,omitempty" xml:"IotIds,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDeviceDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceDriverRequest) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceDriverRequest) SetIotInstanceId(v string) *BatchGetEdgeInstanceDeviceDriverRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverRequest) SetInstanceId(v string) *BatchGetEdgeInstanceDeviceDriverRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverRequest) SetIotIds(v []*string) *BatchGetEdgeInstanceDeviceDriverRequest {
	s.IotIds = v
	return s
}

type BatchGetEdgeInstanceDeviceDriverResponse struct {
	RequestId        *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success          *bool                                                       `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code             *string                                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage     *string                                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	DeviceDriverList []*BatchGetEdgeInstanceDeviceDriverResponseDeviceDriverList `json:"DeviceDriverList,omitempty" xml:"DeviceDriverList,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDeviceDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceDriverResponse) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceDriverResponse) SetRequestId(v string) *BatchGetEdgeInstanceDeviceDriverResponse {
	s.RequestId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverResponse) SetSuccess(v bool) *BatchGetEdgeInstanceDeviceDriverResponse {
	s.Success = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverResponse) SetCode(v string) *BatchGetEdgeInstanceDeviceDriverResponse {
	s.Code = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverResponse) SetErrorMessage(v string) *BatchGetEdgeInstanceDeviceDriverResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverResponse) SetDeviceDriverList(v []*BatchGetEdgeInstanceDeviceDriverResponseDeviceDriverList) *BatchGetEdgeInstanceDeviceDriverResponse {
	s.DeviceDriverList = v
	return s
}

type BatchGetEdgeInstanceDeviceDriverResponseDeviceDriverList struct {
	DriverId *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	IotId    *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
}

func (s BatchGetEdgeInstanceDeviceDriverResponseDeviceDriverList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceDriverResponseDeviceDriverList) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceDriverResponseDeviceDriverList) SetDriverId(v string) *BatchGetEdgeInstanceDeviceDriverResponseDeviceDriverList {
	s.DriverId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverResponseDeviceDriverList) SetIotId(v string) *BatchGetEdgeInstanceDeviceDriverResponseDeviceDriverList {
	s.IotId = &v
	return s
}

type BatchGetEdgeInstanceDeviceChannelRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	DriverId      *string   `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	IotIds        []*string `json:"IotIds,omitempty" xml:"IotIds,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDeviceChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceChannelRequest) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceChannelRequest) SetIotInstanceId(v string) *BatchGetEdgeInstanceDeviceChannelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelRequest) SetInstanceId(v string) *BatchGetEdgeInstanceDeviceChannelRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelRequest) SetDriverId(v string) *BatchGetEdgeInstanceDeviceChannelRequest {
	s.DriverId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelRequest) SetIotIds(v []*string) *BatchGetEdgeInstanceDeviceChannelRequest {
	s.IotIds = v
	return s
}

type BatchGetEdgeInstanceDeviceChannelResponse struct {
	RequestId         *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success           *bool                                                         `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code              *string                                                       `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage      *string                                                       `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	DeviceChannelList []*BatchGetEdgeInstanceDeviceChannelResponseDeviceChannelList `json:"DeviceChannelList,omitempty" xml:"DeviceChannelList,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDeviceChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceChannelResponse) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceChannelResponse) SetRequestId(v string) *BatchGetEdgeInstanceDeviceChannelResponse {
	s.RequestId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelResponse) SetSuccess(v bool) *BatchGetEdgeInstanceDeviceChannelResponse {
	s.Success = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelResponse) SetCode(v string) *BatchGetEdgeInstanceDeviceChannelResponse {
	s.Code = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelResponse) SetErrorMessage(v string) *BatchGetEdgeInstanceDeviceChannelResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelResponse) SetDeviceChannelList(v []*BatchGetEdgeInstanceDeviceChannelResponseDeviceChannelList) *BatchGetEdgeInstanceDeviceChannelResponse {
	s.DeviceChannelList = v
	return s
}

type BatchGetEdgeInstanceDeviceChannelResponseDeviceChannelList struct {
	ChannelId   *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty" require:"true"`
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty" require:"true"`
	IotId       *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
}

func (s BatchGetEdgeInstanceDeviceChannelResponseDeviceChannelList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceChannelResponseDeviceChannelList) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceChannelResponseDeviceChannelList) SetChannelId(v string) *BatchGetEdgeInstanceDeviceChannelResponseDeviceChannelList {
	s.ChannelId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelResponseDeviceChannelList) SetChannelName(v string) *BatchGetEdgeInstanceDeviceChannelResponseDeviceChannelList {
	s.ChannelName = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelResponseDeviceChannelList) SetIotId(v string) *BatchGetEdgeInstanceDeviceChannelResponseDeviceChannelList {
	s.IotId = &v
	return s
}

type ReleaseEdgeDriverVersionRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	DriverVersion *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty" require:"true"`
}

func (s ReleaseEdgeDriverVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseEdgeDriverVersionRequest) GoString() string {
	return s.String()
}

func (s *ReleaseEdgeDriverVersionRequest) SetIotInstanceId(v string) *ReleaseEdgeDriverVersionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ReleaseEdgeDriverVersionRequest) SetDriverId(v string) *ReleaseEdgeDriverVersionRequest {
	s.DriverId = &v
	return s
}

func (s *ReleaseEdgeDriverVersionRequest) SetDriverVersion(v string) *ReleaseEdgeDriverVersionRequest {
	s.DriverVersion = &v
	return s
}

type ReleaseEdgeDriverVersionResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s ReleaseEdgeDriverVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseEdgeDriverVersionResponse) GoString() string {
	return s.String()
}

func (s *ReleaseEdgeDriverVersionResponse) SetRequestId(v string) *ReleaseEdgeDriverVersionResponse {
	s.RequestId = &v
	return s
}

func (s *ReleaseEdgeDriverVersionResponse) SetSuccess(v bool) *ReleaseEdgeDriverVersionResponse {
	s.Success = &v
	return s
}

func (s *ReleaseEdgeDriverVersionResponse) SetCode(v string) *ReleaseEdgeDriverVersionResponse {
	s.Code = &v
	return s
}

func (s *ReleaseEdgeDriverVersionResponse) SetErrorMessage(v string) *ReleaseEdgeDriverVersionResponse {
	s.ErrorMessage = &v
	return s
}

type QueryEdgeInstanceDeviceByDriverRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	ChannelId     *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
}

func (s QueryEdgeInstanceDeviceByDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceByDriverRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceByDriverRequest) SetIotInstanceId(v string) *QueryEdgeInstanceDeviceByDriverRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverRequest) SetPageSize(v int) *QueryEdgeInstanceDeviceByDriverRequest {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverRequest) SetInstanceId(v string) *QueryEdgeInstanceDeviceByDriverRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverRequest) SetChannelId(v string) *QueryEdgeInstanceDeviceByDriverRequest {
	s.ChannelId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverRequest) SetDriverId(v string) *QueryEdgeInstanceDeviceByDriverRequest {
	s.DriverId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverRequest) SetCurrentPage(v int) *QueryEdgeInstanceDeviceByDriverRequest {
	s.CurrentPage = &v
	return s
}

type QueryEdgeInstanceDeviceByDriverResponse struct {
	RequestId    *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                        `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryEdgeInstanceDeviceByDriverResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryEdgeInstanceDeviceByDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceByDriverResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceByDriverResponse) SetRequestId(v string) *QueryEdgeInstanceDeviceByDriverResponse {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverResponse) SetSuccess(v bool) *QueryEdgeInstanceDeviceByDriverResponse {
	s.Success = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverResponse) SetCode(v string) *QueryEdgeInstanceDeviceByDriverResponse {
	s.Code = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverResponse) SetErrorMessage(v string) *QueryEdgeInstanceDeviceByDriverResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverResponse) SetData(v *QueryEdgeInstanceDeviceByDriverResponseData) *QueryEdgeInstanceDeviceByDriverResponse {
	s.Data = v
	return s
}

type QueryEdgeInstanceDeviceByDriverResponseData struct {
	Total       *int                                                     `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize    *int                                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage *int                                                     `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	DeviceList  []*QueryEdgeInstanceDeviceByDriverResponseDataDeviceList `json:"DeviceList,omitempty" xml:"DeviceList,omitempty" require:"true" type:"Repeated"`
}

func (s QueryEdgeInstanceDeviceByDriverResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceByDriverResponseData) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceByDriverResponseData) SetTotal(v int) *QueryEdgeInstanceDeviceByDriverResponseData {
	s.Total = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverResponseData) SetPageSize(v int) *QueryEdgeInstanceDeviceByDriverResponseData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverResponseData) SetCurrentPage(v int) *QueryEdgeInstanceDeviceByDriverResponseData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverResponseData) SetDeviceList(v []*QueryEdgeInstanceDeviceByDriverResponseDataDeviceList) *QueryEdgeInstanceDeviceByDriverResponseData {
	s.DeviceList = v
	return s
}

type QueryEdgeInstanceDeviceByDriverResponseDataDeviceList struct {
	IotId *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
}

func (s QueryEdgeInstanceDeviceByDriverResponseDataDeviceList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceByDriverResponseDataDeviceList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceByDriverResponseDataDeviceList) SetIotId(v string) *QueryEdgeInstanceDeviceByDriverResponseDataDeviceList {
	s.IotId = &v
	return s
}

type DisableSceneRuleRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s DisableSceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableSceneRuleRequest) GoString() string {
	return s.String()
}

func (s *DisableSceneRuleRequest) SetIotInstanceId(v string) *DisableSceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DisableSceneRuleRequest) SetRuleId(v string) *DisableSceneRuleRequest {
	s.RuleId = &v
	return s
}

type DisableSceneRuleResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
}

func (s DisableSceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableSceneRuleResponse) GoString() string {
	return s.String()
}

func (s *DisableSceneRuleResponse) SetRequestId(v string) *DisableSceneRuleResponse {
	s.RequestId = &v
	return s
}

func (s *DisableSceneRuleResponse) SetSuccess(v bool) *DisableSceneRuleResponse {
	s.Success = &v
	return s
}

func (s *DisableSceneRuleResponse) SetErrorMessage(v string) *DisableSceneRuleResponse {
	s.ErrorMessage = &v
	return s
}

func (s *DisableSceneRuleResponse) SetCode(v string) *DisableSceneRuleResponse {
	s.Code = &v
	return s
}

type TriggerSceneRuleRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s TriggerSceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s TriggerSceneRuleRequest) GoString() string {
	return s.String()
}

func (s *TriggerSceneRuleRequest) SetIotInstanceId(v string) *TriggerSceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *TriggerSceneRuleRequest) SetRuleId(v string) *TriggerSceneRuleRequest {
	s.RuleId = &v
	return s
}

func (s *TriggerSceneRuleRequest) SetInstanceId(v string) *TriggerSceneRuleRequest {
	s.InstanceId = &v
	return s
}

type TriggerSceneRuleResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
}

func (s TriggerSceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s TriggerSceneRuleResponse) GoString() string {
	return s.String()
}

func (s *TriggerSceneRuleResponse) SetRequestId(v string) *TriggerSceneRuleResponse {
	s.RequestId = &v
	return s
}

func (s *TriggerSceneRuleResponse) SetSuccess(v bool) *TriggerSceneRuleResponse {
	s.Success = &v
	return s
}

func (s *TriggerSceneRuleResponse) SetErrorMessage(v string) *TriggerSceneRuleResponse {
	s.ErrorMessage = &v
	return s
}

func (s *TriggerSceneRuleResponse) SetCode(v string) *TriggerSceneRuleResponse {
	s.Code = &v
	return s
}

type UnbindSceneRuleFromEdgeInstanceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s UnbindSceneRuleFromEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindSceneRuleFromEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *UnbindSceneRuleFromEdgeInstanceRequest) SetIotInstanceId(v string) *UnbindSceneRuleFromEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UnbindSceneRuleFromEdgeInstanceRequest) SetInstanceId(v string) *UnbindSceneRuleFromEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *UnbindSceneRuleFromEdgeInstanceRequest) SetRuleId(v string) *UnbindSceneRuleFromEdgeInstanceRequest {
	s.RuleId = &v
	return s
}

type UnbindSceneRuleFromEdgeInstanceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UnbindSceneRuleFromEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindSceneRuleFromEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *UnbindSceneRuleFromEdgeInstanceResponse) SetRequestId(v string) *UnbindSceneRuleFromEdgeInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *UnbindSceneRuleFromEdgeInstanceResponse) SetSuccess(v bool) *UnbindSceneRuleFromEdgeInstanceResponse {
	s.Success = &v
	return s
}

func (s *UnbindSceneRuleFromEdgeInstanceResponse) SetCode(v string) *UnbindSceneRuleFromEdgeInstanceResponse {
	s.Code = &v
	return s
}

func (s *UnbindSceneRuleFromEdgeInstanceResponse) SetErrorMessage(v string) *UnbindSceneRuleFromEdgeInstanceResponse {
	s.ErrorMessage = &v
	return s
}

type QueryEdgeInstanceSceneRuleRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
}

func (s QueryEdgeInstanceSceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceSceneRuleRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceSceneRuleRequest) SetIotInstanceId(v string) *QueryEdgeInstanceSceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleRequest) SetInstanceId(v string) *QueryEdgeInstanceSceneRuleRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleRequest) SetCurrentPage(v int) *QueryEdgeInstanceSceneRuleRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleRequest) SetPageSize(v int) *QueryEdgeInstanceSceneRuleRequest {
	s.PageSize = &v
	return s
}

type QueryEdgeInstanceSceneRuleResponse struct {
	RequestId    *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                 `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                 `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryEdgeInstanceSceneRuleResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryEdgeInstanceSceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceSceneRuleResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceSceneRuleResponse) SetRequestId(v string) *QueryEdgeInstanceSceneRuleResponse {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponse) SetSuccess(v bool) *QueryEdgeInstanceSceneRuleResponse {
	s.Success = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponse) SetCode(v string) *QueryEdgeInstanceSceneRuleResponse {
	s.Code = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponse) SetErrorMessage(v string) *QueryEdgeInstanceSceneRuleResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponse) SetData(v *QueryEdgeInstanceSceneRuleResponseData) *QueryEdgeInstanceSceneRuleResponse {
	s.Data = v
	return s
}

type QueryEdgeInstanceSceneRuleResponseData struct {
	Total       *int                                              `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize    *int                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage *int                                              `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	RuleList    []*QueryEdgeInstanceSceneRuleResponseDataRuleList `json:"RuleList,omitempty" xml:"RuleList,omitempty" require:"true" type:"Repeated"`
}

func (s QueryEdgeInstanceSceneRuleResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceSceneRuleResponseData) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceSceneRuleResponseData) SetTotal(v int) *QueryEdgeInstanceSceneRuleResponseData {
	s.Total = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseData) SetPageSize(v int) *QueryEdgeInstanceSceneRuleResponseData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseData) SetCurrentPage(v int) *QueryEdgeInstanceSceneRuleResponseData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseData) SetRuleList(v []*QueryEdgeInstanceSceneRuleResponseDataRuleList) *QueryEdgeInstanceSceneRuleResponseData {
	s.RuleList = v
	return s
}

type QueryEdgeInstanceSceneRuleResponseDataRuleList struct {
	RuleId    *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
	RuleName  *string `json:"RuleName,omitempty" xml:"RuleName,omitempty" require:"true"`
	GmtCreate *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	Status    *int    `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	IsExisted *int    `json:"IsExisted,omitempty" xml:"IsExisted,omitempty" require:"true"`
}

func (s QueryEdgeInstanceSceneRuleResponseDataRuleList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceSceneRuleResponseDataRuleList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceSceneRuleResponseDataRuleList) SetRuleId(v string) *QueryEdgeInstanceSceneRuleResponseDataRuleList {
	s.RuleId = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseDataRuleList) SetRuleName(v string) *QueryEdgeInstanceSceneRuleResponseDataRuleList {
	s.RuleName = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseDataRuleList) SetGmtCreate(v int64) *QueryEdgeInstanceSceneRuleResponseDataRuleList {
	s.GmtCreate = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseDataRuleList) SetStatus(v int) *QueryEdgeInstanceSceneRuleResponseDataRuleList {
	s.Status = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseDataRuleList) SetIsExisted(v int) *QueryEdgeInstanceSceneRuleResponseDataRuleList {
	s.IsExisted = &v
	return s
}

type CreateSceneRuleRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleName        *string `json:"RuleName,omitempty" xml:"RuleName,omitempty" require:"true"`
	RuleContent     *string `json:"RuleContent,omitempty" xml:"RuleContent,omitempty"`
	RuleDescription *string `json:"RuleDescription,omitempty" xml:"RuleDescription,omitempty"`
}

func (s CreateSceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSceneRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateSceneRuleRequest) SetIotInstanceId(v string) *CreateSceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateSceneRuleRequest) SetRuleName(v string) *CreateSceneRuleRequest {
	s.RuleName = &v
	return s
}

func (s *CreateSceneRuleRequest) SetRuleContent(v string) *CreateSceneRuleRequest {
	s.RuleContent = &v
	return s
}

func (s *CreateSceneRuleRequest) SetRuleDescription(v string) *CreateSceneRuleRequest {
	s.RuleDescription = &v
	return s
}

type CreateSceneRuleResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	RuleId       *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s CreateSceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSceneRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateSceneRuleResponse) SetRequestId(v string) *CreateSceneRuleResponse {
	s.RequestId = &v
	return s
}

func (s *CreateSceneRuleResponse) SetSuccess(v bool) *CreateSceneRuleResponse {
	s.Success = &v
	return s
}

func (s *CreateSceneRuleResponse) SetCode(v string) *CreateSceneRuleResponse {
	s.Code = &v
	return s
}

func (s *CreateSceneRuleResponse) SetErrorMessage(v string) *CreateSceneRuleResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateSceneRuleResponse) SetRuleId(v string) *CreateSceneRuleResponse {
	s.RuleId = &v
	return s
}

type QueryDetailSceneRuleLogRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
	StartTime     *int    `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime       *int    `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	TraceId       *string `json:"TraceId,omitempty" xml:"TraceId,omitempty" require:"true"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
}

func (s QueryDetailSceneRuleLogRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDetailSceneRuleLogRequest) GoString() string {
	return s.String()
}

func (s *QueryDetailSceneRuleLogRequest) SetIotInstanceId(v string) *QueryDetailSceneRuleLogRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDetailSceneRuleLogRequest) SetRuleId(v string) *QueryDetailSceneRuleLogRequest {
	s.RuleId = &v
	return s
}

func (s *QueryDetailSceneRuleLogRequest) SetStartTime(v int) *QueryDetailSceneRuleLogRequest {
	s.StartTime = &v
	return s
}

func (s *QueryDetailSceneRuleLogRequest) SetEndTime(v int) *QueryDetailSceneRuleLogRequest {
	s.EndTime = &v
	return s
}

func (s *QueryDetailSceneRuleLogRequest) SetTraceId(v string) *QueryDetailSceneRuleLogRequest {
	s.TraceId = &v
	return s
}

func (s *QueryDetailSceneRuleLogRequest) SetPageSize(v int) *QueryDetailSceneRuleLogRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDetailSceneRuleLogRequest) SetCurrentPage(v int) *QueryDetailSceneRuleLogRequest {
	s.CurrentPage = &v
	return s
}

type QueryDetailSceneRuleLogResponse struct {
	RequestId    *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string                              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data         *QueryDetailSceneRuleLogResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDetailSceneRuleLogResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDetailSceneRuleLogResponse) GoString() string {
	return s.String()
}

func (s *QueryDetailSceneRuleLogResponse) SetRequestId(v string) *QueryDetailSceneRuleLogResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponse) SetSuccess(v bool) *QueryDetailSceneRuleLogResponse {
	s.Success = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponse) SetErrorMessage(v string) *QueryDetailSceneRuleLogResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponse) SetCode(v string) *QueryDetailSceneRuleLogResponse {
	s.Code = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponse) SetData(v *QueryDetailSceneRuleLogResponseData) *QueryDetailSceneRuleLogResponse {
	s.Data = v
	return s
}

type QueryDetailSceneRuleLogResponseData struct {
	Total       *int                                          `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize    *int                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage *int                                          `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	LogList     []*QueryDetailSceneRuleLogResponseDataLogList `json:"LogList,omitempty" xml:"LogList,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDetailSceneRuleLogResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDetailSceneRuleLogResponseData) GoString() string {
	return s.String()
}

func (s *QueryDetailSceneRuleLogResponseData) SetTotal(v int) *QueryDetailSceneRuleLogResponseData {
	s.Total = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponseData) SetPageSize(v int) *QueryDetailSceneRuleLogResponseData {
	s.PageSize = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponseData) SetCurrentPage(v int) *QueryDetailSceneRuleLogResponseData {
	s.CurrentPage = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponseData) SetLogList(v []*QueryDetailSceneRuleLogResponseDataLogList) *QueryDetailSceneRuleLogResponseData {
	s.LogList = v
	return s
}

type QueryDetailSceneRuleLogResponseDataLogList struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	PkDn    *string `json:"PkDn,omitempty" xml:"PkDn,omitempty" require:"true"`
}

func (s QueryDetailSceneRuleLogResponseDataLogList) String() string {
	return tea.Prettify(s)
}

func (s QueryDetailSceneRuleLogResponseDataLogList) GoString() string {
	return s.String()
}

func (s *QueryDetailSceneRuleLogResponseDataLogList) SetCode(v string) *QueryDetailSceneRuleLogResponseDataLogList {
	s.Code = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponseDataLogList) SetMessage(v string) *QueryDetailSceneRuleLogResponseDataLogList {
	s.Message = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponseDataLogList) SetPkDn(v string) *QueryDetailSceneRuleLogResponseDataLogList {
	s.PkDn = &v
	return s
}

type EnableSceneRuleRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s EnableSceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableSceneRuleRequest) GoString() string {
	return s.String()
}

func (s *EnableSceneRuleRequest) SetIotInstanceId(v string) *EnableSceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *EnableSceneRuleRequest) SetRuleId(v string) *EnableSceneRuleRequest {
	s.RuleId = &v
	return s
}

type EnableSceneRuleResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
}

func (s EnableSceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableSceneRuleResponse) GoString() string {
	return s.String()
}

func (s *EnableSceneRuleResponse) SetRequestId(v string) *EnableSceneRuleResponse {
	s.RequestId = &v
	return s
}

func (s *EnableSceneRuleResponse) SetSuccess(v bool) *EnableSceneRuleResponse {
	s.Success = &v
	return s
}

func (s *EnableSceneRuleResponse) SetErrorMessage(v string) *EnableSceneRuleResponse {
	s.ErrorMessage = &v
	return s
}

func (s *EnableSceneRuleResponse) SetCode(v string) *EnableSceneRuleResponse {
	s.Code = &v
	return s
}

type UpdateSceneRuleRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId          *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
	RuleName        *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleContent     *string `json:"RuleContent,omitempty" xml:"RuleContent,omitempty"`
	RuleDescription *string `json:"RuleDescription,omitempty" xml:"RuleDescription,omitempty"`
}

func (s UpdateSceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateSceneRuleRequest) SetIotInstanceId(v string) *UpdateSceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateSceneRuleRequest) SetRuleId(v string) *UpdateSceneRuleRequest {
	s.RuleId = &v
	return s
}

func (s *UpdateSceneRuleRequest) SetRuleName(v string) *UpdateSceneRuleRequest {
	s.RuleName = &v
	return s
}

func (s *UpdateSceneRuleRequest) SetRuleContent(v string) *UpdateSceneRuleRequest {
	s.RuleContent = &v
	return s
}

func (s *UpdateSceneRuleRequest) SetRuleDescription(v string) *UpdateSceneRuleRequest {
	s.RuleDescription = &v
	return s
}

type UpdateSceneRuleResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateSceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateSceneRuleResponse) SetRequestId(v string) *UpdateSceneRuleResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateSceneRuleResponse) SetSuccess(v bool) *UpdateSceneRuleResponse {
	s.Success = &v
	return s
}

func (s *UpdateSceneRuleResponse) SetCode(v string) *UpdateSceneRuleResponse {
	s.Code = &v
	return s
}

func (s *UpdateSceneRuleResponse) SetErrorMessage(v string) *UpdateSceneRuleResponse {
	s.ErrorMessage = &v
	return s
}

type QuerySceneRuleRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleName      *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
}

func (s QuerySceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySceneRuleRequest) GoString() string {
	return s.String()
}

func (s *QuerySceneRuleRequest) SetIotInstanceId(v string) *QuerySceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QuerySceneRuleRequest) SetRuleName(v string) *QuerySceneRuleRequest {
	s.RuleName = &v
	return s
}

func (s *QuerySceneRuleRequest) SetPageSize(v int) *QuerySceneRuleRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySceneRuleRequest) SetCurrentPage(v int) *QuerySceneRuleRequest {
	s.CurrentPage = &v
	return s
}

type QuerySceneRuleResponse struct {
	RequestId    *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                       `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QuerySceneRuleResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QuerySceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySceneRuleResponse) GoString() string {
	return s.String()
}

func (s *QuerySceneRuleResponse) SetRequestId(v string) *QuerySceneRuleResponse {
	s.RequestId = &v
	return s
}

func (s *QuerySceneRuleResponse) SetSuccess(v bool) *QuerySceneRuleResponse {
	s.Success = &v
	return s
}

func (s *QuerySceneRuleResponse) SetCode(v string) *QuerySceneRuleResponse {
	s.Code = &v
	return s
}

func (s *QuerySceneRuleResponse) SetErrorMessage(v string) *QuerySceneRuleResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QuerySceneRuleResponse) SetData(v *QuerySceneRuleResponseData) *QuerySceneRuleResponse {
	s.Data = v
	return s
}

type QuerySceneRuleResponseData struct {
	Total       *int                                  `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize    *int                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage *int                                  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	RuleList    []*QuerySceneRuleResponseDataRuleList `json:"RuleList,omitempty" xml:"RuleList,omitempty" require:"true" type:"Repeated"`
}

func (s QuerySceneRuleResponseData) String() string {
	return tea.Prettify(s)
}

func (s QuerySceneRuleResponseData) GoString() string {
	return s.String()
}

func (s *QuerySceneRuleResponseData) SetTotal(v int) *QuerySceneRuleResponseData {
	s.Total = &v
	return s
}

func (s *QuerySceneRuleResponseData) SetPageSize(v int) *QuerySceneRuleResponseData {
	s.PageSize = &v
	return s
}

func (s *QuerySceneRuleResponseData) SetCurrentPage(v int) *QuerySceneRuleResponseData {
	s.CurrentPage = &v
	return s
}

func (s *QuerySceneRuleResponseData) SetRuleList(v []*QuerySceneRuleResponseDataRuleList) *QuerySceneRuleResponseData {
	s.RuleList = v
	return s
}

type QuerySceneRuleResponseDataRuleList struct {
	RuleId          *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
	GmtCreate       *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModified     *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
	RuleName        *string `json:"RuleName,omitempty" xml:"RuleName,omitempty" require:"true"`
	RuleDescription *string `json:"RuleDescription,omitempty" xml:"RuleDescription,omitempty" require:"true"`
	RuleStatus      *int    `json:"RuleStatus,omitempty" xml:"RuleStatus,omitempty" require:"true"`
}

func (s QuerySceneRuleResponseDataRuleList) String() string {
	return tea.Prettify(s)
}

func (s QuerySceneRuleResponseDataRuleList) GoString() string {
	return s.String()
}

func (s *QuerySceneRuleResponseDataRuleList) SetRuleId(v string) *QuerySceneRuleResponseDataRuleList {
	s.RuleId = &v
	return s
}

func (s *QuerySceneRuleResponseDataRuleList) SetGmtCreate(v int64) *QuerySceneRuleResponseDataRuleList {
	s.GmtCreate = &v
	return s
}

func (s *QuerySceneRuleResponseDataRuleList) SetGmtModified(v int64) *QuerySceneRuleResponseDataRuleList {
	s.GmtModified = &v
	return s
}

func (s *QuerySceneRuleResponseDataRuleList) SetRuleName(v string) *QuerySceneRuleResponseDataRuleList {
	s.RuleName = &v
	return s
}

func (s *QuerySceneRuleResponseDataRuleList) SetRuleDescription(v string) *QuerySceneRuleResponseDataRuleList {
	s.RuleDescription = &v
	return s
}

func (s *QuerySceneRuleResponseDataRuleList) SetRuleStatus(v int) *QuerySceneRuleResponseDataRuleList {
	s.RuleStatus = &v
	return s
}

type QuerySummarySceneRuleLogRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
	StartTime     *int    `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime       *int    `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
}

func (s QuerySummarySceneRuleLogRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySummarySceneRuleLogRequest) GoString() string {
	return s.String()
}

func (s *QuerySummarySceneRuleLogRequest) SetIotInstanceId(v string) *QuerySummarySceneRuleLogRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QuerySummarySceneRuleLogRequest) SetRuleId(v string) *QuerySummarySceneRuleLogRequest {
	s.RuleId = &v
	return s
}

func (s *QuerySummarySceneRuleLogRequest) SetStartTime(v int) *QuerySummarySceneRuleLogRequest {
	s.StartTime = &v
	return s
}

func (s *QuerySummarySceneRuleLogRequest) SetEndTime(v int) *QuerySummarySceneRuleLogRequest {
	s.EndTime = &v
	return s
}

func (s *QuerySummarySceneRuleLogRequest) SetStatus(v string) *QuerySummarySceneRuleLogRequest {
	s.Status = &v
	return s
}

func (s *QuerySummarySceneRuleLogRequest) SetPageSize(v int) *QuerySummarySceneRuleLogRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySummarySceneRuleLogRequest) SetCurrentPage(v int) *QuerySummarySceneRuleLogRequest {
	s.CurrentPage = &v
	return s
}

type QuerySummarySceneRuleLogResponse struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                 `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string                               `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data         *QuerySummarySceneRuleLogResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QuerySummarySceneRuleLogResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySummarySceneRuleLogResponse) GoString() string {
	return s.String()
}

func (s *QuerySummarySceneRuleLogResponse) SetRequestId(v string) *QuerySummarySceneRuleLogResponse {
	s.RequestId = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponse) SetSuccess(v bool) *QuerySummarySceneRuleLogResponse {
	s.Success = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponse) SetErrorMessage(v string) *QuerySummarySceneRuleLogResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponse) SetCode(v string) *QuerySummarySceneRuleLogResponse {
	s.Code = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponse) SetData(v *QuerySummarySceneRuleLogResponseData) *QuerySummarySceneRuleLogResponse {
	s.Data = v
	return s
}

type QuerySummarySceneRuleLogResponseData struct {
	Total       *int                                         `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize    *int                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage *int                                         `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	LogList     *QuerySummarySceneRuleLogResponseDataLogList `json:"LogList,omitempty" xml:"LogList,omitempty" require:"true" type:"Struct"`
}

func (s QuerySummarySceneRuleLogResponseData) String() string {
	return tea.Prettify(s)
}

func (s QuerySummarySceneRuleLogResponseData) GoString() string {
	return s.String()
}

func (s *QuerySummarySceneRuleLogResponseData) SetTotal(v int) *QuerySummarySceneRuleLogResponseData {
	s.Total = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponseData) SetPageSize(v int) *QuerySummarySceneRuleLogResponseData {
	s.PageSize = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponseData) SetCurrentPage(v int) *QuerySummarySceneRuleLogResponseData {
	s.CurrentPage = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponseData) SetLogList(v *QuerySummarySceneRuleLogResponseDataLogList) *QuerySummarySceneRuleLogResponseData {
	s.LogList = v
	return s
}

type QuerySummarySceneRuleLogResponseDataLogList struct {
	LogInfo []*QuerySummarySceneRuleLogResponseDataLogListLogInfo `json:"LogInfo,omitempty" xml:"LogInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QuerySummarySceneRuleLogResponseDataLogList) String() string {
	return tea.Prettify(s)
}

func (s QuerySummarySceneRuleLogResponseDataLogList) GoString() string {
	return s.String()
}

func (s *QuerySummarySceneRuleLogResponseDataLogList) SetLogInfo(v []*QuerySummarySceneRuleLogResponseDataLogListLogInfo) *QuerySummarySceneRuleLogResponseDataLogList {
	s.LogInfo = v
	return s
}

type QuerySummarySceneRuleLogResponseDataLogListLogInfo struct {
	LogTime *int    `json:"LogTime,omitempty" xml:"LogTime,omitempty" require:"true"`
	Result  *string `json:"Result,omitempty" xml:"Result,omitempty" require:"true"`
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty" require:"true"`
}

func (s QuerySummarySceneRuleLogResponseDataLogListLogInfo) String() string {
	return tea.Prettify(s)
}

func (s QuerySummarySceneRuleLogResponseDataLogListLogInfo) GoString() string {
	return s.String()
}

func (s *QuerySummarySceneRuleLogResponseDataLogListLogInfo) SetLogTime(v int) *QuerySummarySceneRuleLogResponseDataLogListLogInfo {
	s.LogTime = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponseDataLogListLogInfo) SetResult(v string) *QuerySummarySceneRuleLogResponseDataLogListLogInfo {
	s.Result = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponseDataLogListLogInfo) SetTraceId(v string) *QuerySummarySceneRuleLogResponseDataLogListLogInfo {
	s.TraceId = &v
	return s
}

type GetSceneRuleRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s GetSceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSceneRuleRequest) GoString() string {
	return s.String()
}

func (s *GetSceneRuleRequest) SetIotInstanceId(v string) *GetSceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetSceneRuleRequest) SetRuleId(v string) *GetSceneRuleRequest {
	s.RuleId = &v
	return s
}

type GetSceneRuleResponse struct {
	RequestId    *string                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                     `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string                   `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data         *GetSceneRuleResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetSceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSceneRuleResponse) GoString() string {
	return s.String()
}

func (s *GetSceneRuleResponse) SetRequestId(v string) *GetSceneRuleResponse {
	s.RequestId = &v
	return s
}

func (s *GetSceneRuleResponse) SetSuccess(v bool) *GetSceneRuleResponse {
	s.Success = &v
	return s
}

func (s *GetSceneRuleResponse) SetErrorMessage(v string) *GetSceneRuleResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetSceneRuleResponse) SetCode(v string) *GetSceneRuleResponse {
	s.Code = &v
	return s
}

func (s *GetSceneRuleResponse) SetData(v *GetSceneRuleResponseData) *GetSceneRuleResponse {
	s.Data = v
	return s
}

type GetSceneRuleResponseData struct {
	GmtCreate       *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModified     *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
	RuleName        *string `json:"RuleName,omitempty" xml:"RuleName,omitempty" require:"true"`
	RuleContent     *string `json:"RuleContent,omitempty" xml:"RuleContent,omitempty" require:"true"`
	RuleDescription *string `json:"RuleDescription,omitempty" xml:"RuleDescription,omitempty" require:"true"`
	RuleStatus      *int    `json:"RuleStatus,omitempty" xml:"RuleStatus,omitempty" require:"true"`
}

func (s GetSceneRuleResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetSceneRuleResponseData) GoString() string {
	return s.String()
}

func (s *GetSceneRuleResponseData) SetGmtCreate(v int64) *GetSceneRuleResponseData {
	s.GmtCreate = &v
	return s
}

func (s *GetSceneRuleResponseData) SetGmtModified(v int64) *GetSceneRuleResponseData {
	s.GmtModified = &v
	return s
}

func (s *GetSceneRuleResponseData) SetRuleName(v string) *GetSceneRuleResponseData {
	s.RuleName = &v
	return s
}

func (s *GetSceneRuleResponseData) SetRuleContent(v string) *GetSceneRuleResponseData {
	s.RuleContent = &v
	return s
}

func (s *GetSceneRuleResponseData) SetRuleDescription(v string) *GetSceneRuleResponseData {
	s.RuleDescription = &v
	return s
}

func (s *GetSceneRuleResponseData) SetRuleStatus(v int) *GetSceneRuleResponseData {
	s.RuleStatus = &v
	return s
}

type DeleteSceneRuleRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s DeleteSceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSceneRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteSceneRuleRequest) SetIotInstanceId(v string) *DeleteSceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteSceneRuleRequest) SetRuleId(v string) *DeleteSceneRuleRequest {
	s.RuleId = &v
	return s
}

type DeleteSceneRuleResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
}

func (s DeleteSceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSceneRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteSceneRuleResponse) SetRequestId(v string) *DeleteSceneRuleResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteSceneRuleResponse) SetSuccess(v bool) *DeleteSceneRuleResponse {
	s.Success = &v
	return s
}

func (s *DeleteSceneRuleResponse) SetErrorMessage(v string) *DeleteSceneRuleResponse {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteSceneRuleResponse) SetCode(v string) *DeleteSceneRuleResponse {
	s.Code = &v
	return s
}

type BindSceneRuleToEdgeInstanceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s BindSceneRuleToEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s BindSceneRuleToEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *BindSceneRuleToEdgeInstanceRequest) SetIotInstanceId(v string) *BindSceneRuleToEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BindSceneRuleToEdgeInstanceRequest) SetInstanceId(v string) *BindSceneRuleToEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *BindSceneRuleToEdgeInstanceRequest) SetRuleId(v string) *BindSceneRuleToEdgeInstanceRequest {
	s.RuleId = &v
	return s
}

type BindSceneRuleToEdgeInstanceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
}

func (s BindSceneRuleToEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s BindSceneRuleToEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *BindSceneRuleToEdgeInstanceResponse) SetRequestId(v string) *BindSceneRuleToEdgeInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *BindSceneRuleToEdgeInstanceResponse) SetSuccess(v bool) *BindSceneRuleToEdgeInstanceResponse {
	s.Success = &v
	return s
}

func (s *BindSceneRuleToEdgeInstanceResponse) SetErrorMessage(v string) *BindSceneRuleToEdgeInstanceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BindSceneRuleToEdgeInstanceResponse) SetCode(v string) *BindSceneRuleToEdgeInstanceResponse {
	s.Code = &v
	return s
}

type CreateEdgeOssPreSignedAddressRequest struct {
	ResourceId      *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true"`
	FileName        *string `json:"FileName,omitempty" xml:"FileName,omitempty" require:"true"`
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ResourceVersion *string `json:"ResourceVersion,omitempty" xml:"ResourceVersion,omitempty" require:"true"`
}

func (s CreateEdgeOssPreSignedAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeOssPreSignedAddressRequest) GoString() string {
	return s.String()
}

func (s *CreateEdgeOssPreSignedAddressRequest) SetResourceId(v string) *CreateEdgeOssPreSignedAddressRequest {
	s.ResourceId = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressRequest) SetFileName(v string) *CreateEdgeOssPreSignedAddressRequest {
	s.FileName = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressRequest) SetIotInstanceId(v string) *CreateEdgeOssPreSignedAddressRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressRequest) SetType(v string) *CreateEdgeOssPreSignedAddressRequest {
	s.Type = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressRequest) SetInstanceId(v string) *CreateEdgeOssPreSignedAddressRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressRequest) SetResourceVersion(v string) *CreateEdgeOssPreSignedAddressRequest {
	s.ResourceVersion = &v
	return s
}

type CreateEdgeOssPreSignedAddressResponse struct {
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                      `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *CreateEdgeOssPreSignedAddressResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s CreateEdgeOssPreSignedAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeOssPreSignedAddressResponse) GoString() string {
	return s.String()
}

func (s *CreateEdgeOssPreSignedAddressResponse) SetRequestId(v string) *CreateEdgeOssPreSignedAddressResponse {
	s.RequestId = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressResponse) SetSuccess(v bool) *CreateEdgeOssPreSignedAddressResponse {
	s.Success = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressResponse) SetCode(v string) *CreateEdgeOssPreSignedAddressResponse {
	s.Code = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressResponse) SetErrorMessage(v string) *CreateEdgeOssPreSignedAddressResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressResponse) SetData(v *CreateEdgeOssPreSignedAddressResponseData) *CreateEdgeOssPreSignedAddressResponse {
	s.Data = v
	return s
}

type CreateEdgeOssPreSignedAddressResponseData struct {
	OssPreSignedAddress *string `json:"OssPreSignedAddress,omitempty" xml:"OssPreSignedAddress,omitempty" require:"true"`
	OssAddress          *string `json:"OssAddress,omitempty" xml:"OssAddress,omitempty" require:"true"`
}

func (s CreateEdgeOssPreSignedAddressResponseData) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeOssPreSignedAddressResponseData) GoString() string {
	return s.String()
}

func (s *CreateEdgeOssPreSignedAddressResponseData) SetOssPreSignedAddress(v string) *CreateEdgeOssPreSignedAddressResponseData {
	s.OssPreSignedAddress = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressResponseData) SetOssAddress(v string) *CreateEdgeOssPreSignedAddressResponseData {
	s.OssAddress = &v
	return s
}

type UpdateEdgeDriverVersionRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DriverId        *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	DriverVersion   *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty" require:"true"`
	EdgeVersion     *string `json:"EdgeVersion,omitempty" xml:"EdgeVersion,omitempty" require:"true"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SourceConfig    *string `json:"SourceConfig,omitempty" xml:"SourceConfig,omitempty"`
	DriverConfig    *string `json:"DriverConfig,omitempty" xml:"DriverConfig,omitempty"`
	ContainerConfig *string `json:"ContainerConfig,omitempty" xml:"ContainerConfig,omitempty"`
	ConfigCheckRule *string `json:"ConfigCheckRule,omitempty" xml:"ConfigCheckRule,omitempty"`
	Argument        *string `json:"Argument,omitempty" xml:"Argument,omitempty"`
}

func (s UpdateEdgeDriverVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeDriverVersionRequest) GoString() string {
	return s.String()
}

func (s *UpdateEdgeDriverVersionRequest) SetIotInstanceId(v string) *UpdateEdgeDriverVersionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetDriverId(v string) *UpdateEdgeDriverVersionRequest {
	s.DriverId = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetDriverVersion(v string) *UpdateEdgeDriverVersionRequest {
	s.DriverVersion = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetEdgeVersion(v string) *UpdateEdgeDriverVersionRequest {
	s.EdgeVersion = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetDescription(v string) *UpdateEdgeDriverVersionRequest {
	s.Description = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetSourceConfig(v string) *UpdateEdgeDriverVersionRequest {
	s.SourceConfig = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetDriverConfig(v string) *UpdateEdgeDriverVersionRequest {
	s.DriverConfig = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetContainerConfig(v string) *UpdateEdgeDriverVersionRequest {
	s.ContainerConfig = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetConfigCheckRule(v string) *UpdateEdgeDriverVersionRequest {
	s.ConfigCheckRule = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetArgument(v string) *UpdateEdgeDriverVersionRequest {
	s.Argument = &v
	return s
}

type UpdateEdgeDriverVersionResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateEdgeDriverVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeDriverVersionResponse) GoString() string {
	return s.String()
}

func (s *UpdateEdgeDriverVersionResponse) SetRequestId(v string) *UpdateEdgeDriverVersionResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateEdgeDriverVersionResponse) SetSuccess(v bool) *UpdateEdgeDriverVersionResponse {
	s.Success = &v
	return s
}

func (s *UpdateEdgeDriverVersionResponse) SetCode(v string) *UpdateEdgeDriverVersionResponse {
	s.Code = &v
	return s
}

func (s *UpdateEdgeDriverVersionResponse) SetErrorMessage(v string) *UpdateEdgeDriverVersionResponse {
	s.ErrorMessage = &v
	return s
}

type DeleteEdgeDriverVersionRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	DriverVersion *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty" require:"true"`
}

func (s DeleteEdgeDriverVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEdgeDriverVersionRequest) GoString() string {
	return s.String()
}

func (s *DeleteEdgeDriverVersionRequest) SetIotInstanceId(v string) *DeleteEdgeDriverVersionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteEdgeDriverVersionRequest) SetDriverId(v string) *DeleteEdgeDriverVersionRequest {
	s.DriverId = &v
	return s
}

func (s *DeleteEdgeDriverVersionRequest) SetDriverVersion(v string) *DeleteEdgeDriverVersionRequest {
	s.DriverVersion = &v
	return s
}

type DeleteEdgeDriverVersionResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteEdgeDriverVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEdgeDriverVersionResponse) GoString() string {
	return s.String()
}

func (s *DeleteEdgeDriverVersionResponse) SetRequestId(v string) *DeleteEdgeDriverVersionResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteEdgeDriverVersionResponse) SetSuccess(v bool) *DeleteEdgeDriverVersionResponse {
	s.Success = &v
	return s
}

func (s *DeleteEdgeDriverVersionResponse) SetCode(v string) *DeleteEdgeDriverVersionResponse {
	s.Code = &v
	return s
}

func (s *DeleteEdgeDriverVersionResponse) SetErrorMessage(v string) *DeleteEdgeDriverVersionResponse {
	s.ErrorMessage = &v
	return s
}

type CreateEdgeDriverVersionRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DriverId        *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	DriverVersion   *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty" require:"true"`
	EdgeVersion     *string `json:"EdgeVersion,omitempty" xml:"EdgeVersion,omitempty" require:"true"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SourceConfig    *string `json:"SourceConfig,omitempty" xml:"SourceConfig,omitempty"`
	DriverConfig    *string `json:"DriverConfig,omitempty" xml:"DriverConfig,omitempty"`
	ContainerConfig *string `json:"ContainerConfig,omitempty" xml:"ContainerConfig,omitempty"`
	ConfigCheckRule *string `json:"ConfigCheckRule,omitempty" xml:"ConfigCheckRule,omitempty"`
	Argument        *string `json:"Argument,omitempty" xml:"Argument,omitempty"`
}

func (s CreateEdgeDriverVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeDriverVersionRequest) GoString() string {
	return s.String()
}

func (s *CreateEdgeDriverVersionRequest) SetIotInstanceId(v string) *CreateEdgeDriverVersionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetDriverId(v string) *CreateEdgeDriverVersionRequest {
	s.DriverId = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetDriverVersion(v string) *CreateEdgeDriverVersionRequest {
	s.DriverVersion = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetEdgeVersion(v string) *CreateEdgeDriverVersionRequest {
	s.EdgeVersion = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetDescription(v string) *CreateEdgeDriverVersionRequest {
	s.Description = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetSourceConfig(v string) *CreateEdgeDriverVersionRequest {
	s.SourceConfig = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetDriverConfig(v string) *CreateEdgeDriverVersionRequest {
	s.DriverConfig = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetContainerConfig(v string) *CreateEdgeDriverVersionRequest {
	s.ContainerConfig = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetConfigCheckRule(v string) *CreateEdgeDriverVersionRequest {
	s.ConfigCheckRule = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetArgument(v string) *CreateEdgeDriverVersionRequest {
	s.Argument = &v
	return s
}

type CreateEdgeDriverVersionResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s CreateEdgeDriverVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeDriverVersionResponse) GoString() string {
	return s.String()
}

func (s *CreateEdgeDriverVersionResponse) SetRequestId(v string) *CreateEdgeDriverVersionResponse {
	s.RequestId = &v
	return s
}

func (s *CreateEdgeDriverVersionResponse) SetSuccess(v bool) *CreateEdgeDriverVersionResponse {
	s.Success = &v
	return s
}

func (s *CreateEdgeDriverVersionResponse) SetCode(v string) *CreateEdgeDriverVersionResponse {
	s.Code = &v
	return s
}

func (s *CreateEdgeDriverVersionResponse) SetErrorMessage(v string) *CreateEdgeDriverVersionResponse {
	s.ErrorMessage = &v
	return s
}

type DeleteEdgeDriverRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
}

func (s DeleteEdgeDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEdgeDriverRequest) GoString() string {
	return s.String()
}

func (s *DeleteEdgeDriverRequest) SetIotInstanceId(v string) *DeleteEdgeDriverRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteEdgeDriverRequest) SetDriverId(v string) *DeleteEdgeDriverRequest {
	s.DriverId = &v
	return s
}

type DeleteEdgeDriverResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteEdgeDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEdgeDriverResponse) GoString() string {
	return s.String()
}

func (s *DeleteEdgeDriverResponse) SetRequestId(v string) *DeleteEdgeDriverResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteEdgeDriverResponse) SetSuccess(v bool) *DeleteEdgeDriverResponse {
	s.Success = &v
	return s
}

func (s *DeleteEdgeDriverResponse) SetCode(v string) *DeleteEdgeDriverResponse {
	s.Code = &v
	return s
}

func (s *DeleteEdgeDriverResponse) SetErrorMessage(v string) *DeleteEdgeDriverResponse {
	s.ErrorMessage = &v
	return s
}

type QueryEdgeDriverRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	Type          *int    `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	DriverName    *string `json:"DriverName,omitempty" xml:"DriverName,omitempty"`
}

func (s QueryEdgeDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverRequest) SetIotInstanceId(v string) *QueryEdgeDriverRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeDriverRequest) SetPageSize(v int) *QueryEdgeDriverRequest {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeDriverRequest) SetCurrentPage(v int) *QueryEdgeDriverRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeDriverRequest) SetType(v int) *QueryEdgeDriverRequest {
	s.Type = &v
	return s
}

func (s *QueryEdgeDriverRequest) SetDriverName(v string) *QueryEdgeDriverRequest {
	s.DriverName = &v
	return s
}

type QueryEdgeDriverResponse struct {
	RequestId    *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                        `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryEdgeDriverResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryEdgeDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverResponse) SetRequestId(v string) *QueryEdgeDriverResponse {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeDriverResponse) SetSuccess(v bool) *QueryEdgeDriverResponse {
	s.Success = &v
	return s
}

func (s *QueryEdgeDriverResponse) SetCode(v string) *QueryEdgeDriverResponse {
	s.Code = &v
	return s
}

func (s *QueryEdgeDriverResponse) SetErrorMessage(v string) *QueryEdgeDriverResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeDriverResponse) SetData(v *QueryEdgeDriverResponseData) *QueryEdgeDriverResponse {
	s.Data = v
	return s
}

type QueryEdgeDriverResponseData struct {
	Total       *int                                     `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize    *int                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage *int                                     `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	DriverList  []*QueryEdgeDriverResponseDataDriverList `json:"DriverList,omitempty" xml:"DriverList,omitempty" require:"true" type:"Repeated"`
}

func (s QueryEdgeDriverResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverResponseData) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverResponseData) SetTotal(v int) *QueryEdgeDriverResponseData {
	s.Total = &v
	return s
}

func (s *QueryEdgeDriverResponseData) SetPageSize(v int) *QueryEdgeDriverResponseData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeDriverResponseData) SetCurrentPage(v int) *QueryEdgeDriverResponseData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeDriverResponseData) SetDriverList(v []*QueryEdgeDriverResponseDataDriverList) *QueryEdgeDriverResponseData {
	s.DriverList = v
	return s
}

type QueryEdgeDriverResponseDataDriverList struct {
	DriverId             *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	DriverName           *string `json:"DriverName,omitempty" xml:"DriverName,omitempty" require:"true"`
	DriverProtocol       *string `json:"DriverProtocol,omitempty" xml:"DriverProtocol,omitempty" require:"true"`
	Runtime              *string `json:"Runtime,omitempty" xml:"Runtime,omitempty" require:"true"`
	CpuArch              *string `json:"CpuArch,omitempty" xml:"CpuArch,omitempty" require:"true"`
	Type                 *int    `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	IsBuiltIn            *bool   `json:"IsBuiltIn,omitempty" xml:"IsBuiltIn,omitempty" require:"true"`
	GmtCreateTimestamp   *int64  `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty" require:"true"`
	GmtModifiedTimestamp *int64  `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty" require:"true"`
}

func (s QueryEdgeDriverResponseDataDriverList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverResponseDataDriverList) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverResponseDataDriverList) SetDriverId(v string) *QueryEdgeDriverResponseDataDriverList {
	s.DriverId = &v
	return s
}

func (s *QueryEdgeDriverResponseDataDriverList) SetDriverName(v string) *QueryEdgeDriverResponseDataDriverList {
	s.DriverName = &v
	return s
}

func (s *QueryEdgeDriverResponseDataDriverList) SetDriverProtocol(v string) *QueryEdgeDriverResponseDataDriverList {
	s.DriverProtocol = &v
	return s
}

func (s *QueryEdgeDriverResponseDataDriverList) SetRuntime(v string) *QueryEdgeDriverResponseDataDriverList {
	s.Runtime = &v
	return s
}

func (s *QueryEdgeDriverResponseDataDriverList) SetCpuArch(v string) *QueryEdgeDriverResponseDataDriverList {
	s.CpuArch = &v
	return s
}

func (s *QueryEdgeDriverResponseDataDriverList) SetType(v int) *QueryEdgeDriverResponseDataDriverList {
	s.Type = &v
	return s
}

func (s *QueryEdgeDriverResponseDataDriverList) SetIsBuiltIn(v bool) *QueryEdgeDriverResponseDataDriverList {
	s.IsBuiltIn = &v
	return s
}

func (s *QueryEdgeDriverResponseDataDriverList) SetGmtCreateTimestamp(v int64) *QueryEdgeDriverResponseDataDriverList {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *QueryEdgeDriverResponseDataDriverList) SetGmtModifiedTimestamp(v int64) *QueryEdgeDriverResponseDataDriverList {
	s.GmtModifiedTimestamp = &v
	return s
}

type BatchGetEdgeDriverRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DriverIds     []*string `json:"DriverIds,omitempty" xml:"DriverIds,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetEdgeDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeDriverRequest) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeDriverRequest) SetIotInstanceId(v string) *BatchGetEdgeDriverRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchGetEdgeDriverRequest) SetDriverIds(v []*string) *BatchGetEdgeDriverRequest {
	s.DriverIds = v
	return s
}

type BatchGetEdgeDriverResponse struct {
	RequestId    *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                 `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                 `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	DriverList   []*BatchGetEdgeDriverResponseDriverList `json:"DriverList,omitempty" xml:"DriverList,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetEdgeDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeDriverResponse) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeDriverResponse) SetRequestId(v string) *BatchGetEdgeDriverResponse {
	s.RequestId = &v
	return s
}

func (s *BatchGetEdgeDriverResponse) SetSuccess(v bool) *BatchGetEdgeDriverResponse {
	s.Success = &v
	return s
}

func (s *BatchGetEdgeDriverResponse) SetCode(v string) *BatchGetEdgeDriverResponse {
	s.Code = &v
	return s
}

func (s *BatchGetEdgeDriverResponse) SetErrorMessage(v string) *BatchGetEdgeDriverResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchGetEdgeDriverResponse) SetDriverList(v []*BatchGetEdgeDriverResponseDriverList) *BatchGetEdgeDriverResponse {
	s.DriverList = v
	return s
}

type BatchGetEdgeDriverResponseDriverList struct {
	DriverId             *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	DriverName           *string `json:"DriverName,omitempty" xml:"DriverName,omitempty" require:"true"`
	DriverProtocol       *string `json:"DriverProtocol,omitempty" xml:"DriverProtocol,omitempty" require:"true"`
	Runtime              *string `json:"Runtime,omitempty" xml:"Runtime,omitempty" require:"true"`
	CpuArch              *string `json:"CpuArch,omitempty" xml:"CpuArch,omitempty" require:"true"`
	Type                 *int    `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	IsBuiltIn            *bool   `json:"IsBuiltIn,omitempty" xml:"IsBuiltIn,omitempty" require:"true"`
	GmtCreateTimestamp   *int64  `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty" require:"true"`
	GmtModifiedTimestamp *int64  `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty" require:"true"`
}

func (s BatchGetEdgeDriverResponseDriverList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeDriverResponseDriverList) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeDriverResponseDriverList) SetDriverId(v string) *BatchGetEdgeDriverResponseDriverList {
	s.DriverId = &v
	return s
}

func (s *BatchGetEdgeDriverResponseDriverList) SetDriverName(v string) *BatchGetEdgeDriverResponseDriverList {
	s.DriverName = &v
	return s
}

func (s *BatchGetEdgeDriverResponseDriverList) SetDriverProtocol(v string) *BatchGetEdgeDriverResponseDriverList {
	s.DriverProtocol = &v
	return s
}

func (s *BatchGetEdgeDriverResponseDriverList) SetRuntime(v string) *BatchGetEdgeDriverResponseDriverList {
	s.Runtime = &v
	return s
}

func (s *BatchGetEdgeDriverResponseDriverList) SetCpuArch(v string) *BatchGetEdgeDriverResponseDriverList {
	s.CpuArch = &v
	return s
}

func (s *BatchGetEdgeDriverResponseDriverList) SetType(v int) *BatchGetEdgeDriverResponseDriverList {
	s.Type = &v
	return s
}

func (s *BatchGetEdgeDriverResponseDriverList) SetIsBuiltIn(v bool) *BatchGetEdgeDriverResponseDriverList {
	s.IsBuiltIn = &v
	return s
}

func (s *BatchGetEdgeDriverResponseDriverList) SetGmtCreateTimestamp(v int64) *BatchGetEdgeDriverResponseDriverList {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *BatchGetEdgeDriverResponseDriverList) SetGmtModifiedTimestamp(v int64) *BatchGetEdgeDriverResponseDriverList {
	s.GmtModifiedTimestamp = &v
	return s
}

type CreateEdgeDriverRequest struct {
	IotInstanceId  *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DriverName     *string `json:"DriverName,omitempty" xml:"DriverName,omitempty" require:"true"`
	DriverProtocol *string `json:"DriverProtocol,omitempty" xml:"DriverProtocol,omitempty" require:"true"`
	Runtime        *string `json:"Runtime,omitempty" xml:"Runtime,omitempty" require:"true"`
	CpuArch        *string `json:"CpuArch,omitempty" xml:"CpuArch,omitempty"`
	IsBuiltIn      *bool   `json:"IsBuiltIn,omitempty" xml:"IsBuiltIn,omitempty"`
}

func (s CreateEdgeDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeDriverRequest) GoString() string {
	return s.String()
}

func (s *CreateEdgeDriverRequest) SetIotInstanceId(v string) *CreateEdgeDriverRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateEdgeDriverRequest) SetDriverName(v string) *CreateEdgeDriverRequest {
	s.DriverName = &v
	return s
}

func (s *CreateEdgeDriverRequest) SetDriverProtocol(v string) *CreateEdgeDriverRequest {
	s.DriverProtocol = &v
	return s
}

func (s *CreateEdgeDriverRequest) SetRuntime(v string) *CreateEdgeDriverRequest {
	s.Runtime = &v
	return s
}

func (s *CreateEdgeDriverRequest) SetCpuArch(v string) *CreateEdgeDriverRequest {
	s.CpuArch = &v
	return s
}

func (s *CreateEdgeDriverRequest) SetIsBuiltIn(v bool) *CreateEdgeDriverRequest {
	s.IsBuiltIn = &v
	return s
}

type CreateEdgeDriverResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	DriverId     *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
}

func (s CreateEdgeDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeDriverResponse) GoString() string {
	return s.String()
}

func (s *CreateEdgeDriverResponse) SetRequestId(v string) *CreateEdgeDriverResponse {
	s.RequestId = &v
	return s
}

func (s *CreateEdgeDriverResponse) SetSuccess(v bool) *CreateEdgeDriverResponse {
	s.Success = &v
	return s
}

func (s *CreateEdgeDriverResponse) SetCode(v string) *CreateEdgeDriverResponse {
	s.Code = &v
	return s
}

func (s *CreateEdgeDriverResponse) SetErrorMessage(v string) *CreateEdgeDriverResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateEdgeDriverResponse) SetDriverId(v string) *CreateEdgeDriverResponse {
	s.DriverId = &v
	return s
}

type GetEdgeDriverVersionRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	DriverVersion *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty" require:"true"`
}

func (s GetEdgeDriverVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeDriverVersionRequest) GoString() string {
	return s.String()
}

func (s *GetEdgeDriverVersionRequest) SetIotInstanceId(v string) *GetEdgeDriverVersionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetEdgeDriverVersionRequest) SetDriverId(v string) *GetEdgeDriverVersionRequest {
	s.DriverId = &v
	return s
}

func (s *GetEdgeDriverVersionRequest) SetDriverVersion(v string) *GetEdgeDriverVersionRequest {
	s.DriverVersion = &v
	return s
}

type GetEdgeDriverVersionResponse struct {
	RequestId    *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                             `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                           `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *GetEdgeDriverVersionResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetEdgeDriverVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeDriverVersionResponse) GoString() string {
	return s.String()
}

func (s *GetEdgeDriverVersionResponse) SetRequestId(v string) *GetEdgeDriverVersionResponse {
	s.RequestId = &v
	return s
}

func (s *GetEdgeDriverVersionResponse) SetSuccess(v bool) *GetEdgeDriverVersionResponse {
	s.Success = &v
	return s
}

func (s *GetEdgeDriverVersionResponse) SetCode(v string) *GetEdgeDriverVersionResponse {
	s.Code = &v
	return s
}

func (s *GetEdgeDriverVersionResponse) SetErrorMessage(v string) *GetEdgeDriverVersionResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetEdgeDriverVersionResponse) SetData(v *GetEdgeDriverVersionResponseData) *GetEdgeDriverVersionResponse {
	s.Data = v
	return s
}

type GetEdgeDriverVersionResponseData struct {
	DriverId             *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	DriverVersion        *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty" require:"true"`
	VersionState         *string `json:"VersionState,omitempty" xml:"VersionState,omitempty" require:"true"`
	EdgeVersion          *string `json:"EdgeVersion,omitempty" xml:"EdgeVersion,omitempty" require:"true"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	SourceConfig         *string `json:"SourceConfig,omitempty" xml:"SourceConfig,omitempty" require:"true"`
	DriverConfig         *string `json:"DriverConfig,omitempty" xml:"DriverConfig,omitempty" require:"true"`
	ContainerConfig      *string `json:"ContainerConfig,omitempty" xml:"ContainerConfig,omitempty" require:"true"`
	ConfigCheckRule      *string `json:"ConfigCheckRule,omitempty" xml:"ConfigCheckRule,omitempty" require:"true"`
	GmtCreateTimestamp   *int64  `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty" require:"true"`
	GmtModifiedTimestamp *int64  `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty" require:"true"`
	Argument             *string `json:"Argument,omitempty" xml:"Argument,omitempty" require:"true"`
}

func (s GetEdgeDriverVersionResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeDriverVersionResponseData) GoString() string {
	return s.String()
}

func (s *GetEdgeDriverVersionResponseData) SetDriverId(v string) *GetEdgeDriverVersionResponseData {
	s.DriverId = &v
	return s
}

func (s *GetEdgeDriverVersionResponseData) SetDriverVersion(v string) *GetEdgeDriverVersionResponseData {
	s.DriverVersion = &v
	return s
}

func (s *GetEdgeDriverVersionResponseData) SetVersionState(v string) *GetEdgeDriverVersionResponseData {
	s.VersionState = &v
	return s
}

func (s *GetEdgeDriverVersionResponseData) SetEdgeVersion(v string) *GetEdgeDriverVersionResponseData {
	s.EdgeVersion = &v
	return s
}

func (s *GetEdgeDriverVersionResponseData) SetDescription(v string) *GetEdgeDriverVersionResponseData {
	s.Description = &v
	return s
}

func (s *GetEdgeDriverVersionResponseData) SetSourceConfig(v string) *GetEdgeDriverVersionResponseData {
	s.SourceConfig = &v
	return s
}

func (s *GetEdgeDriverVersionResponseData) SetDriverConfig(v string) *GetEdgeDriverVersionResponseData {
	s.DriverConfig = &v
	return s
}

func (s *GetEdgeDriverVersionResponseData) SetContainerConfig(v string) *GetEdgeDriverVersionResponseData {
	s.ContainerConfig = &v
	return s
}

func (s *GetEdgeDriverVersionResponseData) SetConfigCheckRule(v string) *GetEdgeDriverVersionResponseData {
	s.ConfigCheckRule = &v
	return s
}

func (s *GetEdgeDriverVersionResponseData) SetGmtCreateTimestamp(v int64) *GetEdgeDriverVersionResponseData {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *GetEdgeDriverVersionResponseData) SetGmtModifiedTimestamp(v int64) *GetEdgeDriverVersionResponseData {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *GetEdgeDriverVersionResponseData) SetArgument(v string) *GetEdgeDriverVersionResponseData {
	s.Argument = &v
	return s
}

type QueryEdgeDriverVersionRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	DriverVersion *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty"`
	VersionState  *int    `json:"VersionState,omitempty" xml:"VersionState,omitempty"`
}

func (s QueryEdgeDriverVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverVersionRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverVersionRequest) SetIotInstanceId(v string) *QueryEdgeDriverVersionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeDriverVersionRequest) SetPageSize(v int) *QueryEdgeDriverVersionRequest {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeDriverVersionRequest) SetCurrentPage(v int) *QueryEdgeDriverVersionRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeDriverVersionRequest) SetDriverId(v string) *QueryEdgeDriverVersionRequest {
	s.DriverId = &v
	return s
}

func (s *QueryEdgeDriverVersionRequest) SetDriverVersion(v string) *QueryEdgeDriverVersionRequest {
	s.DriverVersion = &v
	return s
}

func (s *QueryEdgeDriverVersionRequest) SetVersionState(v int) *QueryEdgeDriverVersionRequest {
	s.VersionState = &v
	return s
}

type QueryEdgeDriverVersionResponse struct {
	RequestId    *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                               `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                             `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryEdgeDriverVersionResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryEdgeDriverVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverVersionResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverVersionResponse) SetRequestId(v string) *QueryEdgeDriverVersionResponse {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeDriverVersionResponse) SetSuccess(v bool) *QueryEdgeDriverVersionResponse {
	s.Success = &v
	return s
}

func (s *QueryEdgeDriverVersionResponse) SetCode(v string) *QueryEdgeDriverVersionResponse {
	s.Code = &v
	return s
}

func (s *QueryEdgeDriverVersionResponse) SetErrorMessage(v string) *QueryEdgeDriverVersionResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeDriverVersionResponse) SetData(v *QueryEdgeDriverVersionResponseData) *QueryEdgeDriverVersionResponse {
	s.Data = v
	return s
}

type QueryEdgeDriverVersionResponseData struct {
	Total             *int                                                   `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize          *int                                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage       *int                                                   `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	DriverVersionList []*QueryEdgeDriverVersionResponseDataDriverVersionList `json:"DriverVersionList,omitempty" xml:"DriverVersionList,omitempty" require:"true" type:"Repeated"`
}

func (s QueryEdgeDriverVersionResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverVersionResponseData) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverVersionResponseData) SetTotal(v int) *QueryEdgeDriverVersionResponseData {
	s.Total = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseData) SetPageSize(v int) *QueryEdgeDriverVersionResponseData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseData) SetCurrentPage(v int) *QueryEdgeDriverVersionResponseData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseData) SetDriverVersionList(v []*QueryEdgeDriverVersionResponseDataDriverVersionList) *QueryEdgeDriverVersionResponseData {
	s.DriverVersionList = v
	return s
}

type QueryEdgeDriverVersionResponseDataDriverVersionList struct {
	DriverId             *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	DriverVersion        *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty" require:"true"`
	VersionState         *string `json:"VersionState,omitempty" xml:"VersionState,omitempty" require:"true"`
	EdgeVersion          *string `json:"EdgeVersion,omitempty" xml:"EdgeVersion,omitempty" require:"true"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	SourceConfig         *string `json:"SourceConfig,omitempty" xml:"SourceConfig,omitempty" require:"true"`
	DriverConfig         *string `json:"DriverConfig,omitempty" xml:"DriverConfig,omitempty" require:"true"`
	ContainerConfig      *string `json:"ContainerConfig,omitempty" xml:"ContainerConfig,omitempty" require:"true"`
	ConfigCheckRule      *string `json:"ConfigCheckRule,omitempty" xml:"ConfigCheckRule,omitempty" require:"true"`
	GmtCreateTimestamp   *int64  `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty" require:"true"`
	GmtModifiedTimestamp *int64  `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty" require:"true"`
	Argument             *string `json:"Argument,omitempty" xml:"Argument,omitempty" require:"true"`
}

func (s QueryEdgeDriverVersionResponseDataDriverVersionList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverVersionResponseDataDriverVersionList) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverVersionResponseDataDriverVersionList) SetDriverId(v string) *QueryEdgeDriverVersionResponseDataDriverVersionList {
	s.DriverId = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseDataDriverVersionList) SetDriverVersion(v string) *QueryEdgeDriverVersionResponseDataDriverVersionList {
	s.DriverVersion = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseDataDriverVersionList) SetVersionState(v string) *QueryEdgeDriverVersionResponseDataDriverVersionList {
	s.VersionState = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseDataDriverVersionList) SetEdgeVersion(v string) *QueryEdgeDriverVersionResponseDataDriverVersionList {
	s.EdgeVersion = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseDataDriverVersionList) SetDescription(v string) *QueryEdgeDriverVersionResponseDataDriverVersionList {
	s.Description = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseDataDriverVersionList) SetSourceConfig(v string) *QueryEdgeDriverVersionResponseDataDriverVersionList {
	s.SourceConfig = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseDataDriverVersionList) SetDriverConfig(v string) *QueryEdgeDriverVersionResponseDataDriverVersionList {
	s.DriverConfig = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseDataDriverVersionList) SetContainerConfig(v string) *QueryEdgeDriverVersionResponseDataDriverVersionList {
	s.ContainerConfig = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseDataDriverVersionList) SetConfigCheckRule(v string) *QueryEdgeDriverVersionResponseDataDriverVersionList {
	s.ConfigCheckRule = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseDataDriverVersionList) SetGmtCreateTimestamp(v int64) *QueryEdgeDriverVersionResponseDataDriverVersionList {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseDataDriverVersionList) SetGmtModifiedTimestamp(v int64) *QueryEdgeDriverVersionResponseDataDriverVersionList {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseDataDriverVersionList) SetArgument(v string) *QueryEdgeDriverVersionResponseDataDriverVersionList {
	s.Argument = &v
	return s
}

type BatchGetDeviceBindStatusRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	IotIds        []*string `json:"IotIds,omitempty" xml:"IotIds,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetDeviceBindStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetDeviceBindStatusRequest) GoString() string {
	return s.String()
}

func (s *BatchGetDeviceBindStatusRequest) SetIotInstanceId(v string) *BatchGetDeviceBindStatusRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchGetDeviceBindStatusRequest) SetIotIds(v []*string) *BatchGetDeviceBindStatusRequest {
	s.IotIds = v
	return s
}

type BatchGetDeviceBindStatusResponse struct {
	RequestId    *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                 `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                 `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         []*BatchGetDeviceBindStatusResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetDeviceBindStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetDeviceBindStatusResponse) GoString() string {
	return s.String()
}

func (s *BatchGetDeviceBindStatusResponse) SetRequestId(v string) *BatchGetDeviceBindStatusResponse {
	s.RequestId = &v
	return s
}

func (s *BatchGetDeviceBindStatusResponse) SetSuccess(v bool) *BatchGetDeviceBindStatusResponse {
	s.Success = &v
	return s
}

func (s *BatchGetDeviceBindStatusResponse) SetCode(v string) *BatchGetDeviceBindStatusResponse {
	s.Code = &v
	return s
}

func (s *BatchGetDeviceBindStatusResponse) SetErrorMessage(v string) *BatchGetDeviceBindStatusResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchGetDeviceBindStatusResponse) SetData(v []*BatchGetDeviceBindStatusResponseData) *BatchGetDeviceBindStatusResponse {
	s.Data = v
	return s
}

type BatchGetDeviceBindStatusResponseData struct {
	IotId      *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	BindStatus *int    `json:"BindStatus,omitempty" xml:"BindStatus,omitempty" require:"true"`
}

func (s BatchGetDeviceBindStatusResponseData) String() string {
	return tea.Prettify(s)
}

func (s BatchGetDeviceBindStatusResponseData) GoString() string {
	return s.String()
}

func (s *BatchGetDeviceBindStatusResponseData) SetIotId(v string) *BatchGetDeviceBindStatusResponseData {
	s.IotId = &v
	return s
}

func (s *BatchGetDeviceBindStatusResponseData) SetBindStatus(v int) *BatchGetDeviceBindStatusResponseData {
	s.BindStatus = &v
	return s
}

type ListOTAJobByDeviceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareId    *string `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty" require:"true"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
}

func (s ListOTAJobByDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByDeviceRequest) GoString() string {
	return s.String()
}

func (s *ListOTAJobByDeviceRequest) SetIotInstanceId(v string) *ListOTAJobByDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListOTAJobByDeviceRequest) SetFirmwareId(v string) *ListOTAJobByDeviceRequest {
	s.FirmwareId = &v
	return s
}

func (s *ListOTAJobByDeviceRequest) SetPageSize(v int) *ListOTAJobByDeviceRequest {
	s.PageSize = &v
	return s
}

func (s *ListOTAJobByDeviceRequest) SetProductKey(v string) *ListOTAJobByDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *ListOTAJobByDeviceRequest) SetDeviceName(v string) *ListOTAJobByDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *ListOTAJobByDeviceRequest) SetCurrentPage(v int) *ListOTAJobByDeviceRequest {
	s.CurrentPage = &v
	return s
}

type ListOTAJobByDeviceResponse struct {
	RequestId    *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                           `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                         `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Total        *int                            `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize     *int                            `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageCount    *int                            `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	CurrentPage  *int                            `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	Data         *ListOTAJobByDeviceResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListOTAJobByDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByDeviceResponse) GoString() string {
	return s.String()
}

func (s *ListOTAJobByDeviceResponse) SetRequestId(v string) *ListOTAJobByDeviceResponse {
	s.RequestId = &v
	return s
}

func (s *ListOTAJobByDeviceResponse) SetSuccess(v bool) *ListOTAJobByDeviceResponse {
	s.Success = &v
	return s
}

func (s *ListOTAJobByDeviceResponse) SetCode(v string) *ListOTAJobByDeviceResponse {
	s.Code = &v
	return s
}

func (s *ListOTAJobByDeviceResponse) SetErrorMessage(v string) *ListOTAJobByDeviceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListOTAJobByDeviceResponse) SetTotal(v int) *ListOTAJobByDeviceResponse {
	s.Total = &v
	return s
}

func (s *ListOTAJobByDeviceResponse) SetPageSize(v int) *ListOTAJobByDeviceResponse {
	s.PageSize = &v
	return s
}

func (s *ListOTAJobByDeviceResponse) SetPageCount(v int) *ListOTAJobByDeviceResponse {
	s.PageCount = &v
	return s
}

func (s *ListOTAJobByDeviceResponse) SetCurrentPage(v int) *ListOTAJobByDeviceResponse {
	s.CurrentPage = &v
	return s
}

func (s *ListOTAJobByDeviceResponse) SetData(v *ListOTAJobByDeviceResponseData) *ListOTAJobByDeviceResponse {
	s.Data = v
	return s
}

type ListOTAJobByDeviceResponseData struct {
	SimpleOTAJobInfo []*ListOTAJobByDeviceResponseDataSimpleOTAJobInfo `json:"SimpleOTAJobInfo,omitempty" xml:"SimpleOTAJobInfo,omitempty" require:"true" type:"Repeated"`
}

func (s ListOTAJobByDeviceResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByDeviceResponseData) GoString() string {
	return s.String()
}

func (s *ListOTAJobByDeviceResponseData) SetSimpleOTAJobInfo(v []*ListOTAJobByDeviceResponseDataSimpleOTAJobInfo) *ListOTAJobByDeviceResponseData {
	s.SimpleOTAJobInfo = v
	return s
}

type ListOTAJobByDeviceResponseDataSimpleOTAJobInfo struct {
	JobId           *string                                             `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
	UtcCreate       *string                                             `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	UtcModified     *string                                             `json:"UtcModified,omitempty" xml:"UtcModified,omitempty" require:"true"`
	ProductKey      *string                                             `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	FirmwareId      *string                                             `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty" require:"true"`
	UtcStartTime    *string                                             `json:"UtcStartTime,omitempty" xml:"UtcStartTime,omitempty" require:"true"`
	UtcEndTime      *string                                             `json:"UtcEndTime,omitempty" xml:"UtcEndTime,omitempty" require:"true"`
	JobStatus       *string                                             `json:"JobStatus,omitempty" xml:"JobStatus,omitempty" require:"true"`
	JobType         *string                                             `json:"JobType,omitempty" xml:"JobType,omitempty" require:"true"`
	TargetSelection *string                                             `json:"TargetSelection,omitempty" xml:"TargetSelection,omitempty" require:"true"`
	SelectionType   *string                                             `json:"SelectionType,omitempty" xml:"SelectionType,omitempty" require:"true"`
	Tags            *ListOTAJobByDeviceResponseDataSimpleOTAJobInfoTags `json:"Tags,omitempty" xml:"Tags,omitempty" require:"true" type:"Struct"`
}

func (s ListOTAJobByDeviceResponseDataSimpleOTAJobInfo) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByDeviceResponseDataSimpleOTAJobInfo) GoString() string {
	return s.String()
}

func (s *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo) SetJobId(v string) *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo {
	s.JobId = &v
	return s
}

func (s *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo) SetUtcCreate(v string) *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo {
	s.UtcCreate = &v
	return s
}

func (s *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo) SetUtcModified(v string) *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo {
	s.UtcModified = &v
	return s
}

func (s *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo) SetProductKey(v string) *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo {
	s.ProductKey = &v
	return s
}

func (s *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo) SetFirmwareId(v string) *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo {
	s.FirmwareId = &v
	return s
}

func (s *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo) SetUtcStartTime(v string) *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo {
	s.UtcStartTime = &v
	return s
}

func (s *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo) SetUtcEndTime(v string) *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo {
	s.UtcEndTime = &v
	return s
}

func (s *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo) SetJobStatus(v string) *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo {
	s.JobStatus = &v
	return s
}

func (s *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo) SetJobType(v string) *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo {
	s.JobType = &v
	return s
}

func (s *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo) SetTargetSelection(v string) *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo {
	s.TargetSelection = &v
	return s
}

func (s *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo) SetSelectionType(v string) *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo {
	s.SelectionType = &v
	return s
}

func (s *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo) SetTags(v *ListOTAJobByDeviceResponseDataSimpleOTAJobInfoTags) *ListOTAJobByDeviceResponseDataSimpleOTAJobInfo {
	s.Tags = v
	return s
}

type ListOTAJobByDeviceResponseDataSimpleOTAJobInfoTags struct {
	OtaTagDTO []*ListOTAJobByDeviceResponseDataSimpleOTAJobInfoTagsOtaTagDTO `json:"OtaTagDTO,omitempty" xml:"OtaTagDTO,omitempty" require:"true" type:"Repeated"`
}

func (s ListOTAJobByDeviceResponseDataSimpleOTAJobInfoTags) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByDeviceResponseDataSimpleOTAJobInfoTags) GoString() string {
	return s.String()
}

func (s *ListOTAJobByDeviceResponseDataSimpleOTAJobInfoTags) SetOtaTagDTO(v []*ListOTAJobByDeviceResponseDataSimpleOTAJobInfoTagsOtaTagDTO) *ListOTAJobByDeviceResponseDataSimpleOTAJobInfoTags {
	s.OtaTagDTO = v
	return s
}

type ListOTAJobByDeviceResponseDataSimpleOTAJobInfoTagsOtaTagDTO struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s ListOTAJobByDeviceResponseDataSimpleOTAJobInfoTagsOtaTagDTO) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByDeviceResponseDataSimpleOTAJobInfoTagsOtaTagDTO) GoString() string {
	return s.String()
}

func (s *ListOTAJobByDeviceResponseDataSimpleOTAJobInfoTagsOtaTagDTO) SetKey(v string) *ListOTAJobByDeviceResponseDataSimpleOTAJobInfoTagsOtaTagDTO {
	s.Key = &v
	return s
}

func (s *ListOTAJobByDeviceResponseDataSimpleOTAJobInfoTagsOtaTagDTO) SetValue(v string) *ListOTAJobByDeviceResponseDataSimpleOTAJobInfoTagsOtaTagDTO {
	s.Value = &v
	return s
}

type UpdateThingModelRequest struct {
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Identifier        *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	ThingModelJson    *string `json:"ThingModelJson,omitempty" xml:"ThingModelJson,omitempty"`
	FunctionBlockId   *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
	FunctionBlockName *string `json:"FunctionBlockName,omitempty" xml:"FunctionBlockName,omitempty"`
}

func (s UpdateThingModelRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateThingModelRequest) GoString() string {
	return s.String()
}

func (s *UpdateThingModelRequest) SetIotInstanceId(v string) *UpdateThingModelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateThingModelRequest) SetProductKey(v string) *UpdateThingModelRequest {
	s.ProductKey = &v
	return s
}

func (s *UpdateThingModelRequest) SetIdentifier(v string) *UpdateThingModelRequest {
	s.Identifier = &v
	return s
}

func (s *UpdateThingModelRequest) SetThingModelJson(v string) *UpdateThingModelRequest {
	s.ThingModelJson = &v
	return s
}

func (s *UpdateThingModelRequest) SetFunctionBlockId(v string) *UpdateThingModelRequest {
	s.FunctionBlockId = &v
	return s
}

func (s *UpdateThingModelRequest) SetFunctionBlockName(v string) *UpdateThingModelRequest {
	s.FunctionBlockName = &v
	return s
}

type UpdateThingModelResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateThingModelResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateThingModelResponse) GoString() string {
	return s.String()
}

func (s *UpdateThingModelResponse) SetRequestId(v string) *UpdateThingModelResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateThingModelResponse) SetSuccess(v bool) *UpdateThingModelResponse {
	s.Success = &v
	return s
}

func (s *UpdateThingModelResponse) SetCode(v string) *UpdateThingModelResponse {
	s.Code = &v
	return s
}

func (s *UpdateThingModelResponse) SetErrorMessage(v string) *UpdateThingModelResponse {
	s.ErrorMessage = &v
	return s
}

type CreateThingModelRequest struct {
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ThingModelJson    *string `json:"ThingModelJson,omitempty" xml:"ThingModelJson,omitempty"`
	FunctionBlockId   *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
	FunctionBlockName *string `json:"FunctionBlockName,omitempty" xml:"FunctionBlockName,omitempty"`
}

func (s CreateThingModelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateThingModelRequest) GoString() string {
	return s.String()
}

func (s *CreateThingModelRequest) SetIotInstanceId(v string) *CreateThingModelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateThingModelRequest) SetProductKey(v string) *CreateThingModelRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateThingModelRequest) SetThingModelJson(v string) *CreateThingModelRequest {
	s.ThingModelJson = &v
	return s
}

func (s *CreateThingModelRequest) SetFunctionBlockId(v string) *CreateThingModelRequest {
	s.FunctionBlockId = &v
	return s
}

func (s *CreateThingModelRequest) SetFunctionBlockName(v string) *CreateThingModelRequest {
	s.FunctionBlockName = &v
	return s
}

type CreateThingModelResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s CreateThingModelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateThingModelResponse) GoString() string {
	return s.String()
}

func (s *CreateThingModelResponse) SetRequestId(v string) *CreateThingModelResponse {
	s.RequestId = &v
	return s
}

func (s *CreateThingModelResponse) SetSuccess(v bool) *CreateThingModelResponse {
	s.Success = &v
	return s
}

func (s *CreateThingModelResponse) SetCode(v string) *CreateThingModelResponse {
	s.Code = &v
	return s
}

func (s *CreateThingModelResponse) SetErrorMessage(v string) *CreateThingModelResponse {
	s.ErrorMessage = &v
	return s
}

type ListOTATaskByJobRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TaskStatus    *string   `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	JobId         *string   `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
	CurrentPage   *int      `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	DeviceNames   []*string `json:"DeviceNames,omitempty" xml:"DeviceNames,omitempty" type:"Repeated"`
}

func (s ListOTATaskByJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOTATaskByJobRequest) GoString() string {
	return s.String()
}

func (s *ListOTATaskByJobRequest) SetIotInstanceId(v string) *ListOTATaskByJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListOTATaskByJobRequest) SetPageSize(v int) *ListOTATaskByJobRequest {
	s.PageSize = &v
	return s
}

func (s *ListOTATaskByJobRequest) SetTaskStatus(v string) *ListOTATaskByJobRequest {
	s.TaskStatus = &v
	return s
}

func (s *ListOTATaskByJobRequest) SetJobId(v string) *ListOTATaskByJobRequest {
	s.JobId = &v
	return s
}

func (s *ListOTATaskByJobRequest) SetCurrentPage(v int) *ListOTATaskByJobRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListOTATaskByJobRequest) SetDeviceNames(v []*string) *ListOTATaskByJobRequest {
	s.DeviceNames = v
	return s
}

type ListOTATaskByJobResponse struct {
	RequestId    *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                         `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                       `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                       `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Total        *int                          `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize     *int                          `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageCount    *int                          `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	CurrentPage  *int                          `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	Data         *ListOTATaskByJobResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListOTATaskByJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOTATaskByJobResponse) GoString() string {
	return s.String()
}

func (s *ListOTATaskByJobResponse) SetRequestId(v string) *ListOTATaskByJobResponse {
	s.RequestId = &v
	return s
}

func (s *ListOTATaskByJobResponse) SetSuccess(v bool) *ListOTATaskByJobResponse {
	s.Success = &v
	return s
}

func (s *ListOTATaskByJobResponse) SetCode(v string) *ListOTATaskByJobResponse {
	s.Code = &v
	return s
}

func (s *ListOTATaskByJobResponse) SetErrorMessage(v string) *ListOTATaskByJobResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListOTATaskByJobResponse) SetTotal(v int) *ListOTATaskByJobResponse {
	s.Total = &v
	return s
}

func (s *ListOTATaskByJobResponse) SetPageSize(v int) *ListOTATaskByJobResponse {
	s.PageSize = &v
	return s
}

func (s *ListOTATaskByJobResponse) SetPageCount(v int) *ListOTATaskByJobResponse {
	s.PageCount = &v
	return s
}

func (s *ListOTATaskByJobResponse) SetCurrentPage(v int) *ListOTATaskByJobResponse {
	s.CurrentPage = &v
	return s
}

func (s *ListOTATaskByJobResponse) SetData(v *ListOTATaskByJobResponseData) *ListOTATaskByJobResponse {
	s.Data = v
	return s
}

type ListOTATaskByJobResponseData struct {
	SimpleOTATaskInfo []*ListOTATaskByJobResponseDataSimpleOTATaskInfo `json:"SimpleOTATaskInfo,omitempty" xml:"SimpleOTATaskInfo,omitempty" require:"true" type:"Repeated"`
}

func (s ListOTATaskByJobResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListOTATaskByJobResponseData) GoString() string {
	return s.String()
}

func (s *ListOTATaskByJobResponseData) SetSimpleOTATaskInfo(v []*ListOTATaskByJobResponseDataSimpleOTATaskInfo) *ListOTATaskByJobResponseData {
	s.SimpleOTATaskInfo = v
	return s
}

type ListOTATaskByJobResponseDataSimpleOTATaskInfo struct {
	TaskId      *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	UtcModified *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty" require:"true"`
	ProductKey  *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	FirmwareId  *string `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty" require:"true"`
	TaskStatus  *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty" require:"true"`
	JobId       *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty" require:"true"`
	DeviceName  *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	SrcVersion  *string `json:"SrcVersion,omitempty" xml:"SrcVersion,omitempty" require:"true"`
	DestVersion *string `json:"DestVersion,omitempty" xml:"DestVersion,omitempty" require:"true"`
	TaskDesc    *string `json:"TaskDesc,omitempty" xml:"TaskDesc,omitempty" require:"true"`
	Progress    *string `json:"Progress,omitempty" xml:"Progress,omitempty" require:"true"`
	IotId       *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	UtcCreate   *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
}

func (s ListOTATaskByJobResponseDataSimpleOTATaskInfo) String() string {
	return tea.Prettify(s)
}

func (s ListOTATaskByJobResponseDataSimpleOTATaskInfo) GoString() string {
	return s.String()
}

func (s *ListOTATaskByJobResponseDataSimpleOTATaskInfo) SetTaskId(v string) *ListOTATaskByJobResponseDataSimpleOTATaskInfo {
	s.TaskId = &v
	return s
}

func (s *ListOTATaskByJobResponseDataSimpleOTATaskInfo) SetUtcModified(v string) *ListOTATaskByJobResponseDataSimpleOTATaskInfo {
	s.UtcModified = &v
	return s
}

func (s *ListOTATaskByJobResponseDataSimpleOTATaskInfo) SetProductKey(v string) *ListOTATaskByJobResponseDataSimpleOTATaskInfo {
	s.ProductKey = &v
	return s
}

func (s *ListOTATaskByJobResponseDataSimpleOTATaskInfo) SetFirmwareId(v string) *ListOTATaskByJobResponseDataSimpleOTATaskInfo {
	s.FirmwareId = &v
	return s
}

func (s *ListOTATaskByJobResponseDataSimpleOTATaskInfo) SetTaskStatus(v string) *ListOTATaskByJobResponseDataSimpleOTATaskInfo {
	s.TaskStatus = &v
	return s
}

func (s *ListOTATaskByJobResponseDataSimpleOTATaskInfo) SetJobId(v string) *ListOTATaskByJobResponseDataSimpleOTATaskInfo {
	s.JobId = &v
	return s
}

func (s *ListOTATaskByJobResponseDataSimpleOTATaskInfo) SetProductName(v string) *ListOTATaskByJobResponseDataSimpleOTATaskInfo {
	s.ProductName = &v
	return s
}

func (s *ListOTATaskByJobResponseDataSimpleOTATaskInfo) SetDeviceName(v string) *ListOTATaskByJobResponseDataSimpleOTATaskInfo {
	s.DeviceName = &v
	return s
}

func (s *ListOTATaskByJobResponseDataSimpleOTATaskInfo) SetSrcVersion(v string) *ListOTATaskByJobResponseDataSimpleOTATaskInfo {
	s.SrcVersion = &v
	return s
}

func (s *ListOTATaskByJobResponseDataSimpleOTATaskInfo) SetDestVersion(v string) *ListOTATaskByJobResponseDataSimpleOTATaskInfo {
	s.DestVersion = &v
	return s
}

func (s *ListOTATaskByJobResponseDataSimpleOTATaskInfo) SetTaskDesc(v string) *ListOTATaskByJobResponseDataSimpleOTATaskInfo {
	s.TaskDesc = &v
	return s
}

func (s *ListOTATaskByJobResponseDataSimpleOTATaskInfo) SetProgress(v string) *ListOTATaskByJobResponseDataSimpleOTATaskInfo {
	s.Progress = &v
	return s
}

func (s *ListOTATaskByJobResponseDataSimpleOTATaskInfo) SetIotId(v string) *ListOTATaskByJobResponseDataSimpleOTATaskInfo {
	s.IotId = &v
	return s
}

func (s *ListOTATaskByJobResponseDataSimpleOTATaskInfo) SetUtcCreate(v string) *ListOTATaskByJobResponseDataSimpleOTATaskInfo {
	s.UtcCreate = &v
	return s
}

type ListThingTemplatesRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListThingTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListThingTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListThingTemplatesRequest) SetIotInstanceId(v string) *ListThingTemplatesRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListThingTemplatesRequest) SetResourceGroupId(v string) *ListThingTemplatesRequest {
	s.ResourceGroupId = &v
	return s
}

type ListThingTemplatesResponse struct {
	RequestId    *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                             `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                           `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         []*ListThingTemplatesResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s ListThingTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListThingTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListThingTemplatesResponse) SetRequestId(v string) *ListThingTemplatesResponse {
	s.RequestId = &v
	return s
}

func (s *ListThingTemplatesResponse) SetSuccess(v bool) *ListThingTemplatesResponse {
	s.Success = &v
	return s
}

func (s *ListThingTemplatesResponse) SetCode(v string) *ListThingTemplatesResponse {
	s.Code = &v
	return s
}

func (s *ListThingTemplatesResponse) SetErrorMessage(v string) *ListThingTemplatesResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListThingTemplatesResponse) SetData(v []*ListThingTemplatesResponseData) *ListThingTemplatesResponse {
	s.Data = v
	return s
}

type ListThingTemplatesResponseData struct {
	CategoryKey  *string `json:"CategoryKey,omitempty" xml:"CategoryKey,omitempty" require:"true"`
	CategoryName *string `json:"CategoryName,omitempty" xml:"CategoryName,omitempty" require:"true"`
}

func (s ListThingTemplatesResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListThingTemplatesResponseData) GoString() string {
	return s.String()
}

func (s *ListThingTemplatesResponseData) SetCategoryKey(v string) *ListThingTemplatesResponseData {
	s.CategoryKey = &v
	return s
}

func (s *ListThingTemplatesResponseData) SetCategoryName(v string) *ListThingTemplatesResponseData {
	s.CategoryName = &v
	return s
}

type GetThingTemplateRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	CategoryKey     *string `json:"CategoryKey,omitempty" xml:"CategoryKey,omitempty"`
}

func (s GetThingTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetThingTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetThingTemplateRequest) SetIotInstanceId(v string) *GetThingTemplateRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetThingTemplateRequest) SetResourceGroupId(v string) *GetThingTemplateRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *GetThingTemplateRequest) SetCategoryKey(v string) *GetThingTemplateRequest {
	s.CategoryKey = &v
	return s
}

type GetThingTemplateResponse struct {
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	ThingModelJSON *string `json:"ThingModelJSON,omitempty" xml:"ThingModelJSON,omitempty" require:"true"`
}

func (s GetThingTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetThingTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetThingTemplateResponse) SetRequestId(v string) *GetThingTemplateResponse {
	s.RequestId = &v
	return s
}

func (s *GetThingTemplateResponse) SetSuccess(v bool) *GetThingTemplateResponse {
	s.Success = &v
	return s
}

func (s *GetThingTemplateResponse) SetCode(v string) *GetThingTemplateResponse {
	s.Code = &v
	return s
}

func (s *GetThingTemplateResponse) SetErrorMessage(v string) *GetThingTemplateResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetThingTemplateResponse) SetThingModelJSON(v string) *GetThingTemplateResponse {
	s.ThingModelJSON = &v
	return s
}

type ListThingModelVersionRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
}

func (s ListThingModelVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListThingModelVersionRequest) GoString() string {
	return s.String()
}

func (s *ListThingModelVersionRequest) SetIotInstanceId(v string) *ListThingModelVersionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListThingModelVersionRequest) SetResourceGroupId(v string) *ListThingModelVersionRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListThingModelVersionRequest) SetProductKey(v string) *ListThingModelVersionRequest {
	s.ProductKey = &v
	return s
}

type ListThingModelVersionResponse struct {
	RequestId    *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                              `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *ListThingModelVersionResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListThingModelVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListThingModelVersionResponse) GoString() string {
	return s.String()
}

func (s *ListThingModelVersionResponse) SetRequestId(v string) *ListThingModelVersionResponse {
	s.RequestId = &v
	return s
}

func (s *ListThingModelVersionResponse) SetSuccess(v bool) *ListThingModelVersionResponse {
	s.Success = &v
	return s
}

func (s *ListThingModelVersionResponse) SetCode(v string) *ListThingModelVersionResponse {
	s.Code = &v
	return s
}

func (s *ListThingModelVersionResponse) SetErrorMessage(v string) *ListThingModelVersionResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListThingModelVersionResponse) SetData(v *ListThingModelVersionResponseData) *ListThingModelVersionResponse {
	s.Data = v
	return s
}

type ListThingModelVersionResponseData struct {
	ModelVersions []*ListThingModelVersionResponseDataModelVersions `json:"ModelVersions,omitempty" xml:"ModelVersions,omitempty" require:"true" type:"Repeated"`
}

func (s ListThingModelVersionResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListThingModelVersionResponseData) GoString() string {
	return s.String()
}

func (s *ListThingModelVersionResponseData) SetModelVersions(v []*ListThingModelVersionResponseDataModelVersions) *ListThingModelVersionResponseData {
	s.ModelVersions = v
	return s
}

type ListThingModelVersionResponseDataModelVersions struct {
	ModelVersion *string `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty" require:"true"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	GmtCreate    *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
}

func (s ListThingModelVersionResponseDataModelVersions) String() string {
	return tea.Prettify(s)
}

func (s ListThingModelVersionResponseDataModelVersions) GoString() string {
	return s.String()
}

func (s *ListThingModelVersionResponseDataModelVersions) SetModelVersion(v string) *ListThingModelVersionResponseDataModelVersions {
	s.ModelVersion = &v
	return s
}

func (s *ListThingModelVersionResponseDataModelVersions) SetDescription(v string) *ListThingModelVersionResponseDataModelVersions {
	s.Description = &v
	return s
}

func (s *ListThingModelVersionResponseDataModelVersions) SetGmtCreate(v int64) *ListThingModelVersionResponseDataModelVersions {
	s.GmtCreate = &v
	return s
}

type ImportThingModelTslRequest struct {
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	TslStr            *string `json:"TslStr,omitempty" xml:"TslStr,omitempty"`
	TslUrl            *string `json:"TslUrl,omitempty" xml:"TslUrl,omitempty"`
	FunctionBlockId   *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
	FunctionBlockName *string `json:"FunctionBlockName,omitempty" xml:"FunctionBlockName,omitempty"`
}

func (s ImportThingModelTslRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportThingModelTslRequest) GoString() string {
	return s.String()
}

func (s *ImportThingModelTslRequest) SetIotInstanceId(v string) *ImportThingModelTslRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ImportThingModelTslRequest) SetResourceGroupId(v string) *ImportThingModelTslRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ImportThingModelTslRequest) SetProductKey(v string) *ImportThingModelTslRequest {
	s.ProductKey = &v
	return s
}

func (s *ImportThingModelTslRequest) SetTslStr(v string) *ImportThingModelTslRequest {
	s.TslStr = &v
	return s
}

func (s *ImportThingModelTslRequest) SetTslUrl(v string) *ImportThingModelTslRequest {
	s.TslUrl = &v
	return s
}

func (s *ImportThingModelTslRequest) SetFunctionBlockId(v string) *ImportThingModelTslRequest {
	s.FunctionBlockId = &v
	return s
}

func (s *ImportThingModelTslRequest) SetFunctionBlockName(v string) *ImportThingModelTslRequest {
	s.FunctionBlockName = &v
	return s
}

type ImportThingModelTslResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s ImportThingModelTslResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportThingModelTslResponse) GoString() string {
	return s.String()
}

func (s *ImportThingModelTslResponse) SetRequestId(v string) *ImportThingModelTslResponse {
	s.RequestId = &v
	return s
}

func (s *ImportThingModelTslResponse) SetSuccess(v bool) *ImportThingModelTslResponse {
	s.Success = &v
	return s
}

func (s *ImportThingModelTslResponse) SetCode(v string) *ImportThingModelTslResponse {
	s.Code = &v
	return s
}

func (s *ImportThingModelTslResponse) SetErrorMessage(v string) *ImportThingModelTslResponse {
	s.ErrorMessage = &v
	return s
}

type PublishThingModelRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ModelVersion    *string `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s PublishThingModelRequest) String() string {
	return tea.Prettify(s)
}

func (s PublishThingModelRequest) GoString() string {
	return s.String()
}

func (s *PublishThingModelRequest) SetIotInstanceId(v string) *PublishThingModelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *PublishThingModelRequest) SetResourceGroupId(v string) *PublishThingModelRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *PublishThingModelRequest) SetProductKey(v string) *PublishThingModelRequest {
	s.ProductKey = &v
	return s
}

func (s *PublishThingModelRequest) SetModelVersion(v string) *PublishThingModelRequest {
	s.ModelVersion = &v
	return s
}

func (s *PublishThingModelRequest) SetDescription(v string) *PublishThingModelRequest {
	s.Description = &v
	return s
}

type PublishThingModelResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s PublishThingModelResponse) String() string {
	return tea.Prettify(s)
}

func (s PublishThingModelResponse) GoString() string {
	return s.String()
}

func (s *PublishThingModelResponse) SetRequestId(v string) *PublishThingModelResponse {
	s.RequestId = &v
	return s
}

func (s *PublishThingModelResponse) SetSuccess(v bool) *PublishThingModelResponse {
	s.Success = &v
	return s
}

func (s *PublishThingModelResponse) SetCode(v string) *PublishThingModelResponse {
	s.Code = &v
	return s
}

func (s *PublishThingModelResponse) SetErrorMessage(v string) *PublishThingModelResponse {
	s.ErrorMessage = &v
	return s
}

type CopyThingModelRequest struct {
	IotInstanceId      *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId    *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SourceProductKey   *string `json:"SourceProductKey,omitempty" xml:"SourceProductKey,omitempty" require:"true"`
	TargetProductKey   *string `json:"TargetProductKey,omitempty" xml:"TargetProductKey,omitempty" require:"true"`
	SourceModelVersion *string `json:"SourceModelVersion,omitempty" xml:"SourceModelVersion,omitempty"`
}

func (s CopyThingModelRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyThingModelRequest) GoString() string {
	return s.String()
}

func (s *CopyThingModelRequest) SetIotInstanceId(v string) *CopyThingModelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CopyThingModelRequest) SetResourceGroupId(v string) *CopyThingModelRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CopyThingModelRequest) SetSourceProductKey(v string) *CopyThingModelRequest {
	s.SourceProductKey = &v
	return s
}

func (s *CopyThingModelRequest) SetTargetProductKey(v string) *CopyThingModelRequest {
	s.TargetProductKey = &v
	return s
}

func (s *CopyThingModelRequest) SetSourceModelVersion(v string) *CopyThingModelRequest {
	s.SourceModelVersion = &v
	return s
}

type CopyThingModelResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s CopyThingModelResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyThingModelResponse) GoString() string {
	return s.String()
}

func (s *CopyThingModelResponse) SetRequestId(v string) *CopyThingModelResponse {
	s.RequestId = &v
	return s
}

func (s *CopyThingModelResponse) SetSuccess(v bool) *CopyThingModelResponse {
	s.Success = &v
	return s
}

func (s *CopyThingModelResponse) SetCode(v string) *CopyThingModelResponse {
	s.Code = &v
	return s
}

func (s *CopyThingModelResponse) SetErrorMessage(v string) *CopyThingModelResponse {
	s.ErrorMessage = &v
	return s
}

type GetThingModelTslRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ModelVersion    *string `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty"`
	Simple          *bool   `json:"Simple,omitempty" xml:"Simple,omitempty"`
	FunctionBlockId *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
}

func (s GetThingModelTslRequest) String() string {
	return tea.Prettify(s)
}

func (s GetThingModelTslRequest) GoString() string {
	return s.String()
}

func (s *GetThingModelTslRequest) SetIotInstanceId(v string) *GetThingModelTslRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetThingModelTslRequest) SetResourceGroupId(v string) *GetThingModelTslRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *GetThingModelTslRequest) SetProductKey(v string) *GetThingModelTslRequest {
	s.ProductKey = &v
	return s
}

func (s *GetThingModelTslRequest) SetModelVersion(v string) *GetThingModelTslRequest {
	s.ModelVersion = &v
	return s
}

func (s *GetThingModelTslRequest) SetSimple(v bool) *GetThingModelTslRequest {
	s.Simple = &v
	return s
}

func (s *GetThingModelTslRequest) SetFunctionBlockId(v string) *GetThingModelTslRequest {
	s.FunctionBlockId = &v
	return s
}

type GetThingModelTslResponse struct {
	RequestId    *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                         `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                       `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                       `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *GetThingModelTslResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetThingModelTslResponse) String() string {
	return tea.Prettify(s)
}

func (s GetThingModelTslResponse) GoString() string {
	return s.String()
}

func (s *GetThingModelTslResponse) SetRequestId(v string) *GetThingModelTslResponse {
	s.RequestId = &v
	return s
}

func (s *GetThingModelTslResponse) SetSuccess(v bool) *GetThingModelTslResponse {
	s.Success = &v
	return s
}

func (s *GetThingModelTslResponse) SetCode(v string) *GetThingModelTslResponse {
	s.Code = &v
	return s
}

func (s *GetThingModelTslResponse) SetErrorMessage(v string) *GetThingModelTslResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetThingModelTslResponse) SetData(v *GetThingModelTslResponseData) *GetThingModelTslResponse {
	s.Data = v
	return s
}

type GetThingModelTslResponseData struct {
	TslStr *string `json:"TslStr,omitempty" xml:"TslStr,omitempty" require:"true"`
	TslUri *string `json:"TslUri,omitempty" xml:"TslUri,omitempty" require:"true"`
}

func (s GetThingModelTslResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetThingModelTslResponseData) GoString() string {
	return s.String()
}

func (s *GetThingModelTslResponseData) SetTslStr(v string) *GetThingModelTslResponseData {
	s.TslStr = &v
	return s
}

func (s *GetThingModelTslResponseData) SetTslUri(v string) *GetThingModelTslResponseData {
	s.TslUri = &v
	return s
}

type QueryThingModelRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ModelVersion    *string `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty"`
	FunctionBlockId *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
}

func (s QueryThingModelRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelRequest) GoString() string {
	return s.String()
}

func (s *QueryThingModelRequest) SetIotInstanceId(v string) *QueryThingModelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryThingModelRequest) SetResourceGroupId(v string) *QueryThingModelRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *QueryThingModelRequest) SetProductKey(v string) *QueryThingModelRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryThingModelRequest) SetModelVersion(v string) *QueryThingModelRequest {
	s.ModelVersion = &v
	return s
}

func (s *QueryThingModelRequest) SetFunctionBlockId(v string) *QueryThingModelRequest {
	s.FunctionBlockId = &v
	return s
}

type QueryThingModelResponse struct {
	RequestId    *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                        `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	ProductKey   *string                      `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Data         *QueryThingModelResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryThingModelResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelResponse) GoString() string {
	return s.String()
}

func (s *QueryThingModelResponse) SetRequestId(v string) *QueryThingModelResponse {
	s.RequestId = &v
	return s
}

func (s *QueryThingModelResponse) SetSuccess(v bool) *QueryThingModelResponse {
	s.Success = &v
	return s
}

func (s *QueryThingModelResponse) SetCode(v string) *QueryThingModelResponse {
	s.Code = &v
	return s
}

func (s *QueryThingModelResponse) SetErrorMessage(v string) *QueryThingModelResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryThingModelResponse) SetProductKey(v string) *QueryThingModelResponse {
	s.ProductKey = &v
	return s
}

func (s *QueryThingModelResponse) SetData(v *QueryThingModelResponseData) *QueryThingModelResponse {
	s.Data = v
	return s
}

type QueryThingModelResponseData struct {
	ThingModelJson *string `json:"ThingModelJson,omitempty" xml:"ThingModelJson,omitempty" require:"true"`
}

func (s QueryThingModelResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelResponseData) GoString() string {
	return s.String()
}

func (s *QueryThingModelResponseData) SetThingModelJson(v string) *QueryThingModelResponseData {
	s.ThingModelJson = &v
	return s
}

type DeleteThingModelRequest struct {
	IotInstanceId      *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId    *string   `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ProductKey         *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	PropertyIdentifier []*string `json:"PropertyIdentifier,omitempty" xml:"PropertyIdentifier,omitempty" type:"Repeated"`
	ServiceIdentifier  []*string `json:"ServiceIdentifier,omitempty" xml:"ServiceIdentifier,omitempty" type:"Repeated"`
	EventIdentifier    []*string `json:"EventIdentifier,omitempty" xml:"EventIdentifier,omitempty" type:"Repeated"`
	FunctionBlockId    *string   `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
}

func (s DeleteThingModelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteThingModelRequest) GoString() string {
	return s.String()
}

func (s *DeleteThingModelRequest) SetIotInstanceId(v string) *DeleteThingModelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteThingModelRequest) SetResourceGroupId(v string) *DeleteThingModelRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DeleteThingModelRequest) SetProductKey(v string) *DeleteThingModelRequest {
	s.ProductKey = &v
	return s
}

func (s *DeleteThingModelRequest) SetPropertyIdentifier(v []*string) *DeleteThingModelRequest {
	s.PropertyIdentifier = v
	return s
}

func (s *DeleteThingModelRequest) SetServiceIdentifier(v []*string) *DeleteThingModelRequest {
	s.ServiceIdentifier = v
	return s
}

func (s *DeleteThingModelRequest) SetEventIdentifier(v []*string) *DeleteThingModelRequest {
	s.EventIdentifier = v
	return s
}

func (s *DeleteThingModelRequest) SetFunctionBlockId(v string) *DeleteThingModelRequest {
	s.FunctionBlockId = &v
	return s
}

type DeleteThingModelResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteThingModelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteThingModelResponse) GoString() string {
	return s.String()
}

func (s *DeleteThingModelResponse) SetRequestId(v string) *DeleteThingModelResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteThingModelResponse) SetSuccess(v bool) *DeleteThingModelResponse {
	s.Success = &v
	return s
}

func (s *DeleteThingModelResponse) SetCode(v string) *DeleteThingModelResponse {
	s.Code = &v
	return s
}

func (s *DeleteThingModelResponse) SetErrorMessage(v string) *DeleteThingModelResponse {
	s.ErrorMessage = &v
	return s
}

type UpdateProductFilterConfigRequest struct {
	IotInstanceId           *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey              *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	PropertyTimestampFilter *bool   `json:"PropertyTimestampFilter,omitempty" xml:"PropertyTimestampFilter,omitempty" require:"true"`
	PropertyValueFilter     *bool   `json:"PropertyValueFilter,omitempty" xml:"PropertyValueFilter,omitempty" require:"true"`
}

func (s UpdateProductFilterConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductFilterConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateProductFilterConfigRequest) SetIotInstanceId(v string) *UpdateProductFilterConfigRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateProductFilterConfigRequest) SetProductKey(v string) *UpdateProductFilterConfigRequest {
	s.ProductKey = &v
	return s
}

func (s *UpdateProductFilterConfigRequest) SetPropertyTimestampFilter(v bool) *UpdateProductFilterConfigRequest {
	s.PropertyTimestampFilter = &v
	return s
}

func (s *UpdateProductFilterConfigRequest) SetPropertyValueFilter(v bool) *UpdateProductFilterConfigRequest {
	s.PropertyValueFilter = &v
	return s
}

type UpdateProductFilterConfigResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateProductFilterConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductFilterConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateProductFilterConfigResponse) SetRequestId(v string) *UpdateProductFilterConfigResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateProductFilterConfigResponse) SetSuccess(v bool) *UpdateProductFilterConfigResponse {
	s.Success = &v
	return s
}

func (s *UpdateProductFilterConfigResponse) SetCode(v string) *UpdateProductFilterConfigResponse {
	s.Code = &v
	return s
}

func (s *UpdateProductFilterConfigResponse) SetErrorMessage(v string) *UpdateProductFilterConfigResponse {
	s.ErrorMessage = &v
	return s
}

type CancelOTAStrategyByJobRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
}

func (s CancelOTAStrategyByJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelOTAStrategyByJobRequest) GoString() string {
	return s.String()
}

func (s *CancelOTAStrategyByJobRequest) SetIotInstanceId(v string) *CancelOTAStrategyByJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CancelOTAStrategyByJobRequest) SetJobId(v string) *CancelOTAStrategyByJobRequest {
	s.JobId = &v
	return s
}

type CancelOTAStrategyByJobResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s CancelOTAStrategyByJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelOTAStrategyByJobResponse) GoString() string {
	return s.String()
}

func (s *CancelOTAStrategyByJobResponse) SetRequestId(v string) *CancelOTAStrategyByJobResponse {
	s.RequestId = &v
	return s
}

func (s *CancelOTAStrategyByJobResponse) SetSuccess(v bool) *CancelOTAStrategyByJobResponse {
	s.Success = &v
	return s
}

func (s *CancelOTAStrategyByJobResponse) SetCode(v string) *CancelOTAStrategyByJobResponse {
	s.Code = &v
	return s
}

func (s *CancelOTAStrategyByJobResponse) SetErrorMessage(v string) *CancelOTAStrategyByJobResponse {
	s.ErrorMessage = &v
	return s
}

type ListOTAJobByFirmwareRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareId    *string `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty" require:"true"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
}

func (s ListOTAJobByFirmwareRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByFirmwareRequest) GoString() string {
	return s.String()
}

func (s *ListOTAJobByFirmwareRequest) SetIotInstanceId(v string) *ListOTAJobByFirmwareRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListOTAJobByFirmwareRequest) SetFirmwareId(v string) *ListOTAJobByFirmwareRequest {
	s.FirmwareId = &v
	return s
}

func (s *ListOTAJobByFirmwareRequest) SetPageSize(v int) *ListOTAJobByFirmwareRequest {
	s.PageSize = &v
	return s
}

func (s *ListOTAJobByFirmwareRequest) SetCurrentPage(v int) *ListOTAJobByFirmwareRequest {
	s.CurrentPage = &v
	return s
}

type ListOTAJobByFirmwareResponse struct {
	RequestId    *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                             `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                           `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Total        *int                              `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize     *int                              `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageCount    *int                              `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	CurrentPage  *int                              `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	Data         *ListOTAJobByFirmwareResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListOTAJobByFirmwareResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByFirmwareResponse) GoString() string {
	return s.String()
}

func (s *ListOTAJobByFirmwareResponse) SetRequestId(v string) *ListOTAJobByFirmwareResponse {
	s.RequestId = &v
	return s
}

func (s *ListOTAJobByFirmwareResponse) SetSuccess(v bool) *ListOTAJobByFirmwareResponse {
	s.Success = &v
	return s
}

func (s *ListOTAJobByFirmwareResponse) SetCode(v string) *ListOTAJobByFirmwareResponse {
	s.Code = &v
	return s
}

func (s *ListOTAJobByFirmwareResponse) SetErrorMessage(v string) *ListOTAJobByFirmwareResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListOTAJobByFirmwareResponse) SetTotal(v int) *ListOTAJobByFirmwareResponse {
	s.Total = &v
	return s
}

func (s *ListOTAJobByFirmwareResponse) SetPageSize(v int) *ListOTAJobByFirmwareResponse {
	s.PageSize = &v
	return s
}

func (s *ListOTAJobByFirmwareResponse) SetPageCount(v int) *ListOTAJobByFirmwareResponse {
	s.PageCount = &v
	return s
}

func (s *ListOTAJobByFirmwareResponse) SetCurrentPage(v int) *ListOTAJobByFirmwareResponse {
	s.CurrentPage = &v
	return s
}

func (s *ListOTAJobByFirmwareResponse) SetData(v *ListOTAJobByFirmwareResponseData) *ListOTAJobByFirmwareResponse {
	s.Data = v
	return s
}

type ListOTAJobByFirmwareResponseData struct {
	SimpleOTAJobInfo []*ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo `json:"SimpleOTAJobInfo,omitempty" xml:"SimpleOTAJobInfo,omitempty" require:"true" type:"Repeated"`
}

func (s ListOTAJobByFirmwareResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByFirmwareResponseData) GoString() string {
	return s.String()
}

func (s *ListOTAJobByFirmwareResponseData) SetSimpleOTAJobInfo(v []*ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo) *ListOTAJobByFirmwareResponseData {
	s.SimpleOTAJobInfo = v
	return s
}

type ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo struct {
	JobId           *string                                               `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
	UtcCreate       *string                                               `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	UtcModified     *string                                               `json:"UtcModified,omitempty" xml:"UtcModified,omitempty" require:"true"`
	ProductKey      *string                                               `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	FirmwareId      *string                                               `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty" require:"true"`
	UtcStartTime    *string                                               `json:"UtcStartTime,omitempty" xml:"UtcStartTime,omitempty" require:"true"`
	UtcEndTime      *string                                               `json:"UtcEndTime,omitempty" xml:"UtcEndTime,omitempty" require:"true"`
	JobStatus       *string                                               `json:"JobStatus,omitempty" xml:"JobStatus,omitempty" require:"true"`
	JobType         *string                                               `json:"JobType,omitempty" xml:"JobType,omitempty" require:"true"`
	TargetSelection *string                                               `json:"TargetSelection,omitempty" xml:"TargetSelection,omitempty" require:"true"`
	SelectionType   *string                                               `json:"SelectionType,omitempty" xml:"SelectionType,omitempty" require:"true"`
	Tags            *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfoTags `json:"Tags,omitempty" xml:"Tags,omitempty" require:"true" type:"Struct"`
}

func (s ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo) GoString() string {
	return s.String()
}

func (s *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo) SetJobId(v string) *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo {
	s.JobId = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo) SetUtcCreate(v string) *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo {
	s.UtcCreate = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo) SetUtcModified(v string) *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo {
	s.UtcModified = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo) SetProductKey(v string) *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo {
	s.ProductKey = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo) SetFirmwareId(v string) *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo {
	s.FirmwareId = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo) SetUtcStartTime(v string) *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo {
	s.UtcStartTime = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo) SetUtcEndTime(v string) *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo {
	s.UtcEndTime = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo) SetJobStatus(v string) *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo {
	s.JobStatus = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo) SetJobType(v string) *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo {
	s.JobType = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo) SetTargetSelection(v string) *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo {
	s.TargetSelection = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo) SetSelectionType(v string) *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo {
	s.SelectionType = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo) SetTags(v *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfoTags) *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfo {
	s.Tags = v
	return s
}

type ListOTAJobByFirmwareResponseDataSimpleOTAJobInfoTags struct {
	OtaTagDTO []*ListOTAJobByFirmwareResponseDataSimpleOTAJobInfoTagsOtaTagDTO `json:"OtaTagDTO,omitempty" xml:"OtaTagDTO,omitempty" require:"true" type:"Repeated"`
}

func (s ListOTAJobByFirmwareResponseDataSimpleOTAJobInfoTags) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByFirmwareResponseDataSimpleOTAJobInfoTags) GoString() string {
	return s.String()
}

func (s *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfoTags) SetOtaTagDTO(v []*ListOTAJobByFirmwareResponseDataSimpleOTAJobInfoTagsOtaTagDTO) *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfoTags {
	s.OtaTagDTO = v
	return s
}

type ListOTAJobByFirmwareResponseDataSimpleOTAJobInfoTagsOtaTagDTO struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s ListOTAJobByFirmwareResponseDataSimpleOTAJobInfoTagsOtaTagDTO) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByFirmwareResponseDataSimpleOTAJobInfoTagsOtaTagDTO) GoString() string {
	return s.String()
}

func (s *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfoTagsOtaTagDTO) SetKey(v string) *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfoTagsOtaTagDTO {
	s.Key = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfoTagsOtaTagDTO) SetValue(v string) *ListOTAJobByFirmwareResponseDataSimpleOTAJobInfoTagsOtaTagDTO {
	s.Value = &v
	return s
}

type ListOTAFirmwareRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	DestVersion   *string `json:"DestVersion,omitempty" xml:"DestVersion,omitempty"`
}

func (s ListOTAFirmwareRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOTAFirmwareRequest) GoString() string {
	return s.String()
}

func (s *ListOTAFirmwareRequest) SetIotInstanceId(v string) *ListOTAFirmwareRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListOTAFirmwareRequest) SetProductKey(v string) *ListOTAFirmwareRequest {
	s.ProductKey = &v
	return s
}

func (s *ListOTAFirmwareRequest) SetPageSize(v int) *ListOTAFirmwareRequest {
	s.PageSize = &v
	return s
}

func (s *ListOTAFirmwareRequest) SetCurrentPage(v int) *ListOTAFirmwareRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListOTAFirmwareRequest) SetDestVersion(v string) *ListOTAFirmwareRequest {
	s.DestVersion = &v
	return s
}

type ListOTAFirmwareResponse struct {
	RequestId    *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Total        *int                                 `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize     *int                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageCount    *int                                 `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	CurrentPage  *int                                 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	FirmwareInfo *ListOTAFirmwareResponseFirmwareInfo `json:"FirmwareInfo,omitempty" xml:"FirmwareInfo,omitempty" require:"true" type:"Struct"`
}

func (s ListOTAFirmwareResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOTAFirmwareResponse) GoString() string {
	return s.String()
}

func (s *ListOTAFirmwareResponse) SetRequestId(v string) *ListOTAFirmwareResponse {
	s.RequestId = &v
	return s
}

func (s *ListOTAFirmwareResponse) SetSuccess(v bool) *ListOTAFirmwareResponse {
	s.Success = &v
	return s
}

func (s *ListOTAFirmwareResponse) SetCode(v string) *ListOTAFirmwareResponse {
	s.Code = &v
	return s
}

func (s *ListOTAFirmwareResponse) SetErrorMessage(v string) *ListOTAFirmwareResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListOTAFirmwareResponse) SetTotal(v int) *ListOTAFirmwareResponse {
	s.Total = &v
	return s
}

func (s *ListOTAFirmwareResponse) SetPageSize(v int) *ListOTAFirmwareResponse {
	s.PageSize = &v
	return s
}

func (s *ListOTAFirmwareResponse) SetPageCount(v int) *ListOTAFirmwareResponse {
	s.PageCount = &v
	return s
}

func (s *ListOTAFirmwareResponse) SetCurrentPage(v int) *ListOTAFirmwareResponse {
	s.CurrentPage = &v
	return s
}

func (s *ListOTAFirmwareResponse) SetFirmwareInfo(v *ListOTAFirmwareResponseFirmwareInfo) *ListOTAFirmwareResponse {
	s.FirmwareInfo = v
	return s
}

type ListOTAFirmwareResponseFirmwareInfo struct {
	SimpleFirmwareInfo []*ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo `json:"SimpleFirmwareInfo,omitempty" xml:"SimpleFirmwareInfo,omitempty" require:"true" type:"Repeated"`
}

func (s ListOTAFirmwareResponseFirmwareInfo) String() string {
	return tea.Prettify(s)
}

func (s ListOTAFirmwareResponseFirmwareInfo) GoString() string {
	return s.String()
}

func (s *ListOTAFirmwareResponseFirmwareInfo) SetSimpleFirmwareInfo(v []*ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) *ListOTAFirmwareResponseFirmwareInfo {
	s.SimpleFirmwareInfo = v
	return s
}

type ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo struct {
	FirmwareName *string `json:"FirmwareName,omitempty" xml:"FirmwareName,omitempty" require:"true"`
	FirmwareId   *string `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty" require:"true"`
	SrcVersion   *string `json:"SrcVersion,omitempty" xml:"SrcVersion,omitempty" require:"true"`
	DestVersion  *string `json:"DestVersion,omitempty" xml:"DestVersion,omitempty" require:"true"`
	UtcCreate    *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	UtcModified  *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty" require:"true"`
	Status       *int    `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	FirmwareDesc *string `json:"FirmwareDesc,omitempty" xml:"FirmwareDesc,omitempty" require:"true"`
	FirmwareSign *string `json:"FirmwareSign,omitempty" xml:"FirmwareSign,omitempty" require:"true"`
	FirmwareSize *int    `json:"FirmwareSize,omitempty" xml:"FirmwareSize,omitempty" require:"true"`
	FirmwareUrl  *string `json:"FirmwareUrl,omitempty" xml:"FirmwareUrl,omitempty" require:"true"`
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	SignMethod   *string `json:"SignMethod,omitempty" xml:"SignMethod,omitempty" require:"true"`
	ProductName  *string `json:"ProductName,omitempty" xml:"ProductName,omitempty" require:"true"`
	Type         *int    `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	ModuleName   *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty" require:"true"`
}

func (s ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) String() string {
	return tea.Prettify(s)
}

func (s ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) GoString() string {
	return s.String()
}

func (s *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) SetFirmwareName(v string) *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo {
	s.FirmwareName = &v
	return s
}

func (s *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) SetFirmwareId(v string) *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo {
	s.FirmwareId = &v
	return s
}

func (s *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) SetSrcVersion(v string) *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo {
	s.SrcVersion = &v
	return s
}

func (s *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) SetDestVersion(v string) *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo {
	s.DestVersion = &v
	return s
}

func (s *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) SetUtcCreate(v string) *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo {
	s.UtcCreate = &v
	return s
}

func (s *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) SetUtcModified(v string) *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo {
	s.UtcModified = &v
	return s
}

func (s *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) SetStatus(v int) *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo {
	s.Status = &v
	return s
}

func (s *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) SetFirmwareDesc(v string) *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo {
	s.FirmwareDesc = &v
	return s
}

func (s *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) SetFirmwareSign(v string) *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo {
	s.FirmwareSign = &v
	return s
}

func (s *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) SetFirmwareSize(v int) *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo {
	s.FirmwareSize = &v
	return s
}

func (s *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) SetFirmwareUrl(v string) *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo {
	s.FirmwareUrl = &v
	return s
}

func (s *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) SetProductKey(v string) *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo {
	s.ProductKey = &v
	return s
}

func (s *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) SetSignMethod(v string) *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo {
	s.SignMethod = &v
	return s
}

func (s *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) SetProductName(v string) *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo {
	s.ProductName = &v
	return s
}

func (s *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) SetType(v int) *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo {
	s.Type = &v
	return s
}

func (s *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo) SetModuleName(v string) *ListOTAFirmwareResponseFirmwareInfoSimpleFirmwareInfo {
	s.ModuleName = &v
	return s
}

type CancelOTATaskByJobRequest struct {
	IotInstanceId        *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
	CancelScheduledTask  *bool   `json:"CancelScheduledTask,omitempty" xml:"CancelScheduledTask,omitempty"`
	CancelQueuedTask     *bool   `json:"CancelQueuedTask,omitempty" xml:"CancelQueuedTask,omitempty"`
	CancelInProgressTask *bool   `json:"CancelInProgressTask,omitempty" xml:"CancelInProgressTask,omitempty"`
	CancelNotifiedTask   *bool   `json:"CancelNotifiedTask,omitempty" xml:"CancelNotifiedTask,omitempty"`
}

func (s CancelOTATaskByJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelOTATaskByJobRequest) GoString() string {
	return s.String()
}

func (s *CancelOTATaskByJobRequest) SetIotInstanceId(v string) *CancelOTATaskByJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CancelOTATaskByJobRequest) SetJobId(v string) *CancelOTATaskByJobRequest {
	s.JobId = &v
	return s
}

func (s *CancelOTATaskByJobRequest) SetCancelScheduledTask(v bool) *CancelOTATaskByJobRequest {
	s.CancelScheduledTask = &v
	return s
}

func (s *CancelOTATaskByJobRequest) SetCancelQueuedTask(v bool) *CancelOTATaskByJobRequest {
	s.CancelQueuedTask = &v
	return s
}

func (s *CancelOTATaskByJobRequest) SetCancelInProgressTask(v bool) *CancelOTATaskByJobRequest {
	s.CancelInProgressTask = &v
	return s
}

func (s *CancelOTATaskByJobRequest) SetCancelNotifiedTask(v bool) *CancelOTATaskByJobRequest {
	s.CancelNotifiedTask = &v
	return s
}

type CancelOTATaskByJobResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s CancelOTATaskByJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelOTATaskByJobResponse) GoString() string {
	return s.String()
}

func (s *CancelOTATaskByJobResponse) SetRequestId(v string) *CancelOTATaskByJobResponse {
	s.RequestId = &v
	return s
}

func (s *CancelOTATaskByJobResponse) SetSuccess(v bool) *CancelOTATaskByJobResponse {
	s.Success = &v
	return s
}

func (s *CancelOTATaskByJobResponse) SetCode(v string) *CancelOTATaskByJobResponse {
	s.Code = &v
	return s
}

func (s *CancelOTATaskByJobResponse) SetErrorMessage(v string) *CancelOTATaskByJobResponse {
	s.ErrorMessage = &v
	return s
}

type CreateDeviceDistributeJobRequest struct {
	DeviceName           []*string                                               `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true" type:"Repeated"`
	SourceInstanceId     *string                                                 `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty" require:"true"`
	ProductKey           *string                                                 `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	TargetUid            *string                                                 `json:"TargetUid,omitempty" xml:"TargetUid,omitempty"`
	TargetAliyunId       *string                                                 `json:"TargetAliyunId,omitempty" xml:"TargetAliyunId,omitempty"`
	TargetInstanceConfig []*CreateDeviceDistributeJobRequestTargetInstanceConfig `json:"TargetInstanceConfig,omitempty" xml:"TargetInstanceConfig,omitempty" require:"true" type:"Repeated"`
	Strategy             *int                                                    `json:"Strategy,omitempty" xml:"Strategy,omitempty" require:"true"`
}

func (s CreateDeviceDistributeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceDistributeJobRequest) GoString() string {
	return s.String()
}

func (s *CreateDeviceDistributeJobRequest) SetDeviceName(v []*string) *CreateDeviceDistributeJobRequest {
	s.DeviceName = v
	return s
}

func (s *CreateDeviceDistributeJobRequest) SetSourceInstanceId(v string) *CreateDeviceDistributeJobRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *CreateDeviceDistributeJobRequest) SetProductKey(v string) *CreateDeviceDistributeJobRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateDeviceDistributeJobRequest) SetTargetUid(v string) *CreateDeviceDistributeJobRequest {
	s.TargetUid = &v
	return s
}

func (s *CreateDeviceDistributeJobRequest) SetTargetAliyunId(v string) *CreateDeviceDistributeJobRequest {
	s.TargetAliyunId = &v
	return s
}

func (s *CreateDeviceDistributeJobRequest) SetTargetInstanceConfig(v []*CreateDeviceDistributeJobRequestTargetInstanceConfig) *CreateDeviceDistributeJobRequest {
	s.TargetInstanceConfig = v
	return s
}

func (s *CreateDeviceDistributeJobRequest) SetStrategy(v int) *CreateDeviceDistributeJobRequest {
	s.Strategy = &v
	return s
}

type CreateDeviceDistributeJobRequestTargetInstanceConfig struct {
	TargetInstanceId *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty" require:"true"`
}

func (s CreateDeviceDistributeJobRequestTargetInstanceConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceDistributeJobRequestTargetInstanceConfig) GoString() string {
	return s.String()
}

func (s *CreateDeviceDistributeJobRequestTargetInstanceConfig) SetTargetInstanceId(v string) *CreateDeviceDistributeJobRequestTargetInstanceConfig {
	s.TargetInstanceId = &v
	return s
}

type CreateDeviceDistributeJobResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
}

func (s CreateDeviceDistributeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceDistributeJobResponse) GoString() string {
	return s.String()
}

func (s *CreateDeviceDistributeJobResponse) SetRequestId(v string) *CreateDeviceDistributeJobResponse {
	s.RequestId = &v
	return s
}

func (s *CreateDeviceDistributeJobResponse) SetSuccess(v bool) *CreateDeviceDistributeJobResponse {
	s.Success = &v
	return s
}

func (s *CreateDeviceDistributeJobResponse) SetCode(v string) *CreateDeviceDistributeJobResponse {
	s.Code = &v
	return s
}

func (s *CreateDeviceDistributeJobResponse) SetErrorMessage(v string) *CreateDeviceDistributeJobResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateDeviceDistributeJobResponse) SetJobId(v string) *CreateDeviceDistributeJobResponse {
	s.JobId = &v
	return s
}

type QueryDeviceDistributeDetailRequest struct {
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
}

func (s QueryDeviceDistributeDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDistributeDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceDistributeDetailRequest) SetJobId(v string) *QueryDeviceDistributeDetailRequest {
	s.JobId = &v
	return s
}

type QueryDeviceDistributeDetailResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	File         *string `json:"File,omitempty" xml:"File,omitempty" require:"true"`
}

func (s QueryDeviceDistributeDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDistributeDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceDistributeDetailResponse) SetRequestId(v string) *QueryDeviceDistributeDetailResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceDistributeDetailResponse) SetSuccess(v bool) *QueryDeviceDistributeDetailResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceDistributeDetailResponse) SetCode(v string) *QueryDeviceDistributeDetailResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceDistributeDetailResponse) SetErrorMessage(v string) *QueryDeviceDistributeDetailResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceDistributeDetailResponse) SetFile(v string) *QueryDeviceDistributeDetailResponse {
	s.File = &v
	return s
}

type ListDeviceDistributeJobRequest struct {
	TargetUid   *string `json:"TargetUid,omitempty" xml:"TargetUid,omitempty"`
	CurrentPage *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageSize    *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	Status      *int    `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDeviceDistributeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceDistributeJobRequest) GoString() string {
	return s.String()
}

func (s *ListDeviceDistributeJobRequest) SetTargetUid(v string) *ListDeviceDistributeJobRequest {
	s.TargetUid = &v
	return s
}

func (s *ListDeviceDistributeJobRequest) SetCurrentPage(v int) *ListDeviceDistributeJobRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListDeviceDistributeJobRequest) SetPageSize(v int) *ListDeviceDistributeJobRequest {
	s.PageSize = &v
	return s
}

func (s *ListDeviceDistributeJobRequest) SetStatus(v int) *ListDeviceDistributeJobRequest {
	s.Status = &v
	return s
}

type ListDeviceDistributeJobResponse struct {
	RequestId    *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *ListDeviceDistributeJobResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListDeviceDistributeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceDistributeJobResponse) GoString() string {
	return s.String()
}

func (s *ListDeviceDistributeJobResponse) SetRequestId(v string) *ListDeviceDistributeJobResponse {
	s.RequestId = &v
	return s
}

func (s *ListDeviceDistributeJobResponse) SetSuccess(v bool) *ListDeviceDistributeJobResponse {
	s.Success = &v
	return s
}

func (s *ListDeviceDistributeJobResponse) SetCode(v string) *ListDeviceDistributeJobResponse {
	s.Code = &v
	return s
}

func (s *ListDeviceDistributeJobResponse) SetErrorMessage(v string) *ListDeviceDistributeJobResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListDeviceDistributeJobResponse) SetData(v *ListDeviceDistributeJobResponseData) *ListDeviceDistributeJobResponse {
	s.Data = v
	return s
}

type ListDeviceDistributeJobResponseData struct {
	Total   *int                                        `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	JobInfo *ListDeviceDistributeJobResponseDataJobInfo `json:"JobInfo,omitempty" xml:"JobInfo,omitempty" require:"true" type:"Struct"`
}

func (s ListDeviceDistributeJobResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceDistributeJobResponseData) GoString() string {
	return s.String()
}

func (s *ListDeviceDistributeJobResponseData) SetTotal(v int) *ListDeviceDistributeJobResponseData {
	s.Total = &v
	return s
}

func (s *ListDeviceDistributeJobResponseData) SetJobInfo(v *ListDeviceDistributeJobResponseDataJobInfo) *ListDeviceDistributeJobResponseData {
	s.JobInfo = v
	return s
}

type ListDeviceDistributeJobResponseDataJobInfo struct {
	Items []*ListDeviceDistributeJobResponseDataJobInfoItems `json:"items,omitempty" xml:"items,omitempty" require:"true" type:"Repeated"`
}

func (s ListDeviceDistributeJobResponseDataJobInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceDistributeJobResponseDataJobInfo) GoString() string {
	return s.String()
}

func (s *ListDeviceDistributeJobResponseDataJobInfo) SetItems(v []*ListDeviceDistributeJobResponseDataJobInfoItems) *ListDeviceDistributeJobResponseDataJobInfo {
	s.Items = v
	return s
}

type ListDeviceDistributeJobResponseDataJobInfoItems struct {
	GmtCreate             *int64                                                                `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	SourceUid             *string                                                               `json:"SourceUid,omitempty" xml:"SourceUid,omitempty" require:"true"`
	TargetUid             *string                                                               `json:"TargetUid,omitempty" xml:"TargetUid,omitempty" require:"true"`
	JobId                 *string                                                               `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
	SourceInstanceId      *string                                                               `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty" require:"true"`
	ProductKey            *string                                                               `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Total                 *int                                                                  `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	Status                *int                                                                  `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Strategy              *int                                                                  `json:"Strategy,omitempty" xml:"Strategy,omitempty" require:"true"`
	TargetInstanceConfigs *ListDeviceDistributeJobResponseDataJobInfoItemsTargetInstanceConfigs `json:"TargetInstanceConfigs,omitempty" xml:"TargetInstanceConfigs,omitempty" require:"true" type:"Struct"`
}

func (s ListDeviceDistributeJobResponseDataJobInfoItems) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceDistributeJobResponseDataJobInfoItems) GoString() string {
	return s.String()
}

func (s *ListDeviceDistributeJobResponseDataJobInfoItems) SetGmtCreate(v int64) *ListDeviceDistributeJobResponseDataJobInfoItems {
	s.GmtCreate = &v
	return s
}

func (s *ListDeviceDistributeJobResponseDataJobInfoItems) SetSourceUid(v string) *ListDeviceDistributeJobResponseDataJobInfoItems {
	s.SourceUid = &v
	return s
}

func (s *ListDeviceDistributeJobResponseDataJobInfoItems) SetTargetUid(v string) *ListDeviceDistributeJobResponseDataJobInfoItems {
	s.TargetUid = &v
	return s
}

func (s *ListDeviceDistributeJobResponseDataJobInfoItems) SetJobId(v string) *ListDeviceDistributeJobResponseDataJobInfoItems {
	s.JobId = &v
	return s
}

func (s *ListDeviceDistributeJobResponseDataJobInfoItems) SetSourceInstanceId(v string) *ListDeviceDistributeJobResponseDataJobInfoItems {
	s.SourceInstanceId = &v
	return s
}

func (s *ListDeviceDistributeJobResponseDataJobInfoItems) SetProductKey(v string) *ListDeviceDistributeJobResponseDataJobInfoItems {
	s.ProductKey = &v
	return s
}

func (s *ListDeviceDistributeJobResponseDataJobInfoItems) SetTotal(v int) *ListDeviceDistributeJobResponseDataJobInfoItems {
	s.Total = &v
	return s
}

func (s *ListDeviceDistributeJobResponseDataJobInfoItems) SetStatus(v int) *ListDeviceDistributeJobResponseDataJobInfoItems {
	s.Status = &v
	return s
}

func (s *ListDeviceDistributeJobResponseDataJobInfoItems) SetStrategy(v int) *ListDeviceDistributeJobResponseDataJobInfoItems {
	s.Strategy = &v
	return s
}

func (s *ListDeviceDistributeJobResponseDataJobInfoItems) SetTargetInstanceConfigs(v *ListDeviceDistributeJobResponseDataJobInfoItemsTargetInstanceConfigs) *ListDeviceDistributeJobResponseDataJobInfoItems {
	s.TargetInstanceConfigs = v
	return s
}

type ListDeviceDistributeJobResponseDataJobInfoItemsTargetInstanceConfigs struct {
	TargetInstanceConfigs []*ListDeviceDistributeJobResponseDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs `json:"targetInstanceConfigs,omitempty" xml:"targetInstanceConfigs,omitempty" require:"true" type:"Repeated"`
}

func (s ListDeviceDistributeJobResponseDataJobInfoItemsTargetInstanceConfigs) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceDistributeJobResponseDataJobInfoItemsTargetInstanceConfigs) GoString() string {
	return s.String()
}

func (s *ListDeviceDistributeJobResponseDataJobInfoItemsTargetInstanceConfigs) SetTargetInstanceConfigs(v []*ListDeviceDistributeJobResponseDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs) *ListDeviceDistributeJobResponseDataJobInfoItemsTargetInstanceConfigs {
	s.TargetInstanceConfigs = v
	return s
}

type ListDeviceDistributeJobResponseDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs struct {
	TargetInstanceId *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty" require:"true"`
}

func (s ListDeviceDistributeJobResponseDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceDistributeJobResponseDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs) GoString() string {
	return s.String()
}

func (s *ListDeviceDistributeJobResponseDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs) SetTargetInstanceId(v string) *ListDeviceDistributeJobResponseDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs {
	s.TargetInstanceId = &v
	return s
}

type QueryDeviceDistributeJobRequest struct {
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
}

func (s QueryDeviceDistributeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDistributeJobRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceDistributeJobRequest) SetJobId(v string) *QueryDeviceDistributeJobRequest {
	s.JobId = &v
	return s
}

type QueryDeviceDistributeJobResponse struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                 `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                               `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryDeviceDistributeJobResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceDistributeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDistributeJobResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceDistributeJobResponse) SetRequestId(v string) *QueryDeviceDistributeJobResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceDistributeJobResponse) SetSuccess(v bool) *QueryDeviceDistributeJobResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceDistributeJobResponse) SetCode(v string) *QueryDeviceDistributeJobResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceDistributeJobResponse) SetErrorMessage(v string) *QueryDeviceDistributeJobResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceDistributeJobResponse) SetData(v *QueryDeviceDistributeJobResponseData) *QueryDeviceDistributeJobResponse {
	s.Data = v
	return s
}

type QueryDeviceDistributeJobResponseData struct {
	SourceUid             *string                                                    `json:"SourceUid,omitempty" xml:"SourceUid,omitempty" require:"true"`
	TargetUid             *string                                                    `json:"TargetUid,omitempty" xml:"TargetUid,omitempty" require:"true"`
	SourceInstanceId      *string                                                    `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty" require:"true"`
	JobId                 *string                                                    `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
	ProductKey            *string                                                    `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Total                 *int                                                       `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	Status                *int                                                       `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	GmtCreate             *int64                                                     `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	Strategy              *int                                                       `json:"Strategy,omitempty" xml:"Strategy,omitempty" require:"true"`
	TargetInstanceConfigs *QueryDeviceDistributeJobResponseDataTargetInstanceConfigs `json:"TargetInstanceConfigs,omitempty" xml:"TargetInstanceConfigs,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceDistributeJobResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDistributeJobResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceDistributeJobResponseData) SetSourceUid(v string) *QueryDeviceDistributeJobResponseData {
	s.SourceUid = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseData) SetTargetUid(v string) *QueryDeviceDistributeJobResponseData {
	s.TargetUid = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseData) SetSourceInstanceId(v string) *QueryDeviceDistributeJobResponseData {
	s.SourceInstanceId = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseData) SetJobId(v string) *QueryDeviceDistributeJobResponseData {
	s.JobId = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseData) SetProductKey(v string) *QueryDeviceDistributeJobResponseData {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseData) SetTotal(v int) *QueryDeviceDistributeJobResponseData {
	s.Total = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseData) SetStatus(v int) *QueryDeviceDistributeJobResponseData {
	s.Status = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseData) SetGmtCreate(v int64) *QueryDeviceDistributeJobResponseData {
	s.GmtCreate = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseData) SetStrategy(v int) *QueryDeviceDistributeJobResponseData {
	s.Strategy = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseData) SetTargetInstanceConfigs(v *QueryDeviceDistributeJobResponseDataTargetInstanceConfigs) *QueryDeviceDistributeJobResponseData {
	s.TargetInstanceConfigs = v
	return s
}

type QueryDeviceDistributeJobResponseDataTargetInstanceConfigs struct {
	TargetInstanceConfigs []*QueryDeviceDistributeJobResponseDataTargetInstanceConfigsTargetInstanceConfigs `json:"targetInstanceConfigs,omitempty" xml:"targetInstanceConfigs,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceDistributeJobResponseDataTargetInstanceConfigs) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDistributeJobResponseDataTargetInstanceConfigs) GoString() string {
	return s.String()
}

func (s *QueryDeviceDistributeJobResponseDataTargetInstanceConfigs) SetTargetInstanceConfigs(v []*QueryDeviceDistributeJobResponseDataTargetInstanceConfigsTargetInstanceConfigs) *QueryDeviceDistributeJobResponseDataTargetInstanceConfigs {
	s.TargetInstanceConfigs = v
	return s
}

type QueryDeviceDistributeJobResponseDataTargetInstanceConfigsTargetInstanceConfigs struct {
	TargetInstanceId *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty" require:"true"`
}

func (s QueryDeviceDistributeJobResponseDataTargetInstanceConfigsTargetInstanceConfigs) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDistributeJobResponseDataTargetInstanceConfigsTargetInstanceConfigs) GoString() string {
	return s.String()
}

func (s *QueryDeviceDistributeJobResponseDataTargetInstanceConfigsTargetInstanceConfigs) SetTargetInstanceId(v string) *QueryDeviceDistributeJobResponseDataTargetInstanceConfigsTargetInstanceConfigs {
	s.TargetInstanceId = &v
	return s
}

type DeleteDeviceDistributeJobRequest struct {
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
}

func (s DeleteDeviceDistributeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceDistributeJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeviceDistributeJobRequest) SetJobId(v string) *DeleteDeviceDistributeJobRequest {
	s.JobId = &v
	return s
}

type DeleteDeviceDistributeJobResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteDeviceDistributeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceDistributeJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeviceDistributeJobResponse) SetRequestId(v string) *DeleteDeviceDistributeJobResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteDeviceDistributeJobResponse) SetSuccess(v bool) *DeleteDeviceDistributeJobResponse {
	s.Success = &v
	return s
}

func (s *DeleteDeviceDistributeJobResponse) SetCode(v string) *DeleteDeviceDistributeJobResponse {
	s.Code = &v
	return s
}

func (s *DeleteDeviceDistributeJobResponse) SetErrorMessage(v string) *DeleteDeviceDistributeJobResponse {
	s.ErrorMessage = &v
	return s
}

type QueryDeviceByStatusRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Status          *int    `json:"Status,omitempty" xml:"Status,omitempty"`
	CurrentPage     *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize        *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s QueryDeviceByStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceByStatusRequest) SetIotInstanceId(v string) *QueryDeviceByStatusRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceByStatusRequest) SetProductKey(v string) *QueryDeviceByStatusRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceByStatusRequest) SetStatus(v int) *QueryDeviceByStatusRequest {
	s.Status = &v
	return s
}

func (s *QueryDeviceByStatusRequest) SetCurrentPage(v int) *QueryDeviceByStatusRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryDeviceByStatusRequest) SetPageSize(v int) *QueryDeviceByStatusRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceByStatusRequest) SetResourceGroupId(v string) *QueryDeviceByStatusRequest {
	s.ResourceGroupId = &v
	return s
}

type QueryDeviceByStatusResponse struct {
	RequestId    *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                            `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                          `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Page         *int                             `json:"Page,omitempty" xml:"Page,omitempty" require:"true"`
	PageSize     *int                             `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageCount    *int                             `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	Total        *int                             `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	Data         *QueryDeviceByStatusResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceByStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceByStatusResponse) SetRequestId(v string) *QueryDeviceByStatusResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceByStatusResponse) SetSuccess(v bool) *QueryDeviceByStatusResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceByStatusResponse) SetCode(v string) *QueryDeviceByStatusResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceByStatusResponse) SetErrorMessage(v string) *QueryDeviceByStatusResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceByStatusResponse) SetPage(v int) *QueryDeviceByStatusResponse {
	s.Page = &v
	return s
}

func (s *QueryDeviceByStatusResponse) SetPageSize(v int) *QueryDeviceByStatusResponse {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceByStatusResponse) SetPageCount(v int) *QueryDeviceByStatusResponse {
	s.PageCount = &v
	return s
}

func (s *QueryDeviceByStatusResponse) SetTotal(v int) *QueryDeviceByStatusResponse {
	s.Total = &v
	return s
}

func (s *QueryDeviceByStatusResponse) SetData(v *QueryDeviceByStatusResponseData) *QueryDeviceByStatusResponse {
	s.Data = v
	return s
}

type QueryDeviceByStatusResponseData struct {
	SimpleDeviceInfo []*QueryDeviceByStatusResponseDataSimpleDeviceInfo `json:"SimpleDeviceInfo,omitempty" xml:"SimpleDeviceInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceByStatusResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByStatusResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceByStatusResponseData) SetSimpleDeviceInfo(v []*QueryDeviceByStatusResponseDataSimpleDeviceInfo) *QueryDeviceByStatusResponseData {
	s.SimpleDeviceInfo = v
	return s
}

type QueryDeviceByStatusResponseDataSimpleDeviceInfo struct {
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	IotId        *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	Nickname     *string `json:"Nickname,omitempty" xml:"Nickname,omitempty" require:"true"`
	GmtCreate    *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModified  *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
	UtcCreate    *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	UtcModified  *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty" require:"true"`
	DeviceSecret *string `json:"DeviceSecret,omitempty" xml:"DeviceSecret,omitempty" require:"true"`
}

func (s QueryDeviceByStatusResponseDataSimpleDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByStatusResponseDataSimpleDeviceInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceByStatusResponseDataSimpleDeviceInfo) SetProductKey(v string) *QueryDeviceByStatusResponseDataSimpleDeviceInfo {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceByStatusResponseDataSimpleDeviceInfo) SetDeviceName(v string) *QueryDeviceByStatusResponseDataSimpleDeviceInfo {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceByStatusResponseDataSimpleDeviceInfo) SetStatus(v string) *QueryDeviceByStatusResponseDataSimpleDeviceInfo {
	s.Status = &v
	return s
}

func (s *QueryDeviceByStatusResponseDataSimpleDeviceInfo) SetIotId(v string) *QueryDeviceByStatusResponseDataSimpleDeviceInfo {
	s.IotId = &v
	return s
}

func (s *QueryDeviceByStatusResponseDataSimpleDeviceInfo) SetNickname(v string) *QueryDeviceByStatusResponseDataSimpleDeviceInfo {
	s.Nickname = &v
	return s
}

func (s *QueryDeviceByStatusResponseDataSimpleDeviceInfo) SetGmtCreate(v string) *QueryDeviceByStatusResponseDataSimpleDeviceInfo {
	s.GmtCreate = &v
	return s
}

func (s *QueryDeviceByStatusResponseDataSimpleDeviceInfo) SetGmtModified(v string) *QueryDeviceByStatusResponseDataSimpleDeviceInfo {
	s.GmtModified = &v
	return s
}

func (s *QueryDeviceByStatusResponseDataSimpleDeviceInfo) SetUtcCreate(v string) *QueryDeviceByStatusResponseDataSimpleDeviceInfo {
	s.UtcCreate = &v
	return s
}

func (s *QueryDeviceByStatusResponseDataSimpleDeviceInfo) SetUtcModified(v string) *QueryDeviceByStatusResponseDataSimpleDeviceInfo {
	s.UtcModified = &v
	return s
}

func (s *QueryDeviceByStatusResponseDataSimpleDeviceInfo) SetDeviceSecret(v string) *QueryDeviceByStatusResponseDataSimpleDeviceInfo {
	s.DeviceSecret = &v
	return s
}

type GenerateOTAUploadURLRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FileSuffix    *string `json:"FileSuffix,omitempty" xml:"FileSuffix,omitempty"`
}

func (s GenerateOTAUploadURLRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateOTAUploadURLRequest) GoString() string {
	return s.String()
}

func (s *GenerateOTAUploadURLRequest) SetIotInstanceId(v string) *GenerateOTAUploadURLRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GenerateOTAUploadURLRequest) SetFileSuffix(v string) *GenerateOTAUploadURLRequest {
	s.FileSuffix = &v
	return s
}

type GenerateOTAUploadURLResponse struct {
	RequestId    *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                             `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                           `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *GenerateOTAUploadURLResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GenerateOTAUploadURLResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateOTAUploadURLResponse) GoString() string {
	return s.String()
}

func (s *GenerateOTAUploadURLResponse) SetRequestId(v string) *GenerateOTAUploadURLResponse {
	s.RequestId = &v
	return s
}

func (s *GenerateOTAUploadURLResponse) SetSuccess(v bool) *GenerateOTAUploadURLResponse {
	s.Success = &v
	return s
}

func (s *GenerateOTAUploadURLResponse) SetCode(v string) *GenerateOTAUploadURLResponse {
	s.Code = &v
	return s
}

func (s *GenerateOTAUploadURLResponse) SetErrorMessage(v string) *GenerateOTAUploadURLResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GenerateOTAUploadURLResponse) SetData(v *GenerateOTAUploadURLResponseData) *GenerateOTAUploadURLResponse {
	s.Data = v
	return s
}

type GenerateOTAUploadURLResponseData struct {
	Key            *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Host           *string `json:"Host,omitempty" xml:"Host,omitempty" require:"true"`
	Policy         *string `json:"Policy,omitempty" xml:"Policy,omitempty" require:"true"`
	OSSAccessKeyId *string `json:"OSSAccessKeyId,omitempty" xml:"OSSAccessKeyId,omitempty" require:"true"`
	Signature      *string `json:"Signature,omitempty" xml:"Signature,omitempty" require:"true"`
	FirmwareUrl    *string `json:"FirmwareUrl,omitempty" xml:"FirmwareUrl,omitempty" require:"true"`
	UtcCreate      *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	ObjectStorage  *string `json:"ObjectStorage,omitempty" xml:"ObjectStorage,omitempty" require:"true"`
}

func (s GenerateOTAUploadURLResponseData) String() string {
	return tea.Prettify(s)
}

func (s GenerateOTAUploadURLResponseData) GoString() string {
	return s.String()
}

func (s *GenerateOTAUploadURLResponseData) SetKey(v string) *GenerateOTAUploadURLResponseData {
	s.Key = &v
	return s
}

func (s *GenerateOTAUploadURLResponseData) SetHost(v string) *GenerateOTAUploadURLResponseData {
	s.Host = &v
	return s
}

func (s *GenerateOTAUploadURLResponseData) SetPolicy(v string) *GenerateOTAUploadURLResponseData {
	s.Policy = &v
	return s
}

func (s *GenerateOTAUploadURLResponseData) SetOSSAccessKeyId(v string) *GenerateOTAUploadURLResponseData {
	s.OSSAccessKeyId = &v
	return s
}

func (s *GenerateOTAUploadURLResponseData) SetSignature(v string) *GenerateOTAUploadURLResponseData {
	s.Signature = &v
	return s
}

func (s *GenerateOTAUploadURLResponseData) SetFirmwareUrl(v string) *GenerateOTAUploadURLResponseData {
	s.FirmwareUrl = &v
	return s
}

func (s *GenerateOTAUploadURLResponseData) SetUtcCreate(v string) *GenerateOTAUploadURLResponseData {
	s.UtcCreate = &v
	return s
}

func (s *GenerateOTAUploadURLResponseData) SetObjectStorage(v string) *GenerateOTAUploadURLResponseData {
	s.ObjectStorage = &v
	return s
}

type QueryProductCertInfoRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
}

func (s QueryProductCertInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryProductCertInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryProductCertInfoRequest) SetIotInstanceId(v string) *QueryProductCertInfoRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryProductCertInfoRequest) SetProductKey(v string) *QueryProductCertInfoRequest {
	s.ProductKey = &v
	return s
}

type QueryProductCertInfoResponse struct {
	RequestId       *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success         *bool                                        `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code            *string                                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage    *string                                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	ProductCertInfo *QueryProductCertInfoResponseProductCertInfo `json:"ProductCertInfo,omitempty" xml:"ProductCertInfo,omitempty" require:"true" type:"Struct"`
}

func (s QueryProductCertInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryProductCertInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryProductCertInfoResponse) SetRequestId(v string) *QueryProductCertInfoResponse {
	s.RequestId = &v
	return s
}

func (s *QueryProductCertInfoResponse) SetSuccess(v bool) *QueryProductCertInfoResponse {
	s.Success = &v
	return s
}

func (s *QueryProductCertInfoResponse) SetCode(v string) *QueryProductCertInfoResponse {
	s.Code = &v
	return s
}

func (s *QueryProductCertInfoResponse) SetErrorMessage(v string) *QueryProductCertInfoResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryProductCertInfoResponse) SetProductCertInfo(v *QueryProductCertInfoResponseProductCertInfo) *QueryProductCertInfoResponse {
	s.ProductCertInfo = v
	return s
}

type QueryProductCertInfoResponseProductCertInfo struct {
	IssueModel *int `json:"IssueModel,omitempty" xml:"IssueModel,omitempty" require:"true"`
}

func (s QueryProductCertInfoResponseProductCertInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryProductCertInfoResponseProductCertInfo) GoString() string {
	return s.String()
}

func (s *QueryProductCertInfoResponseProductCertInfo) SetIssueModel(v int) *QueryProductCertInfoResponseProductCertInfo {
	s.IssueModel = &v
	return s
}

type SetProductCertInfoRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	IssueModel    *int    `json:"IssueModel,omitempty" xml:"IssueModel,omitempty" require:"true"`
}

func (s SetProductCertInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s SetProductCertInfoRequest) GoString() string {
	return s.String()
}

func (s *SetProductCertInfoRequest) SetIotInstanceId(v string) *SetProductCertInfoRequest {
	s.IotInstanceId = &v
	return s
}

func (s *SetProductCertInfoRequest) SetProductKey(v string) *SetProductCertInfoRequest {
	s.ProductKey = &v
	return s
}

func (s *SetProductCertInfoRequest) SetIssueModel(v int) *SetProductCertInfoRequest {
	s.IssueModel = &v
	return s
}

type SetProductCertInfoResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s SetProductCertInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s SetProductCertInfoResponse) GoString() string {
	return s.String()
}

func (s *SetProductCertInfoResponse) SetRequestId(v string) *SetProductCertInfoResponse {
	s.RequestId = &v
	return s
}

func (s *SetProductCertInfoResponse) SetSuccess(v bool) *SetProductCertInfoResponse {
	s.Success = &v
	return s
}

func (s *SetProductCertInfoResponse) SetCode(v string) *SetProductCertInfoResponse {
	s.Code = &v
	return s
}

func (s *SetProductCertInfoResponse) SetErrorMessage(v string) *SetProductCertInfoResponse {
	s.ErrorMessage = &v
	return s
}

type CreateSubscribeRelationRequest struct {
	IotInstanceId           *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey              *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceDataFlag          *bool     `json:"DeviceDataFlag,omitempty" xml:"DeviceDataFlag,omitempty"`
	DeviceLifeCycleFlag     *bool     `json:"DeviceLifeCycleFlag,omitempty" xml:"DeviceLifeCycleFlag,omitempty"`
	DeviceStatusChangeFlag  *bool     `json:"DeviceStatusChangeFlag,omitempty" xml:"DeviceStatusChangeFlag,omitempty"`
	DeviceTopoLifeCycleFlag *bool     `json:"DeviceTopoLifeCycleFlag,omitempty" xml:"DeviceTopoLifeCycleFlag,omitempty"`
	FoundDeviceListFlag     *bool     `json:"FoundDeviceListFlag,omitempty" xml:"FoundDeviceListFlag,omitempty"`
	MnsConfiguration        *string   `json:"MnsConfiguration,omitempty" xml:"MnsConfiguration,omitempty"`
	Type                    *string   `json:"Type,omitempty" xml:"Type,omitempty"`
	ConsumerGroupIds        []*string `json:"ConsumerGroupIds,omitempty" xml:"ConsumerGroupIds,omitempty" type:"Repeated"`
	OtaEventFlag            *bool     `json:"OtaEventFlag,omitempty" xml:"OtaEventFlag,omitempty"`
	ThingHistoryFlag        *bool     `json:"ThingHistoryFlag,omitempty" xml:"ThingHistoryFlag,omitempty"`
	DeviceTagFlag           *bool     `json:"DeviceTagFlag,omitempty" xml:"DeviceTagFlag,omitempty"`
	OtaVersionFlag          *bool     `json:"OtaVersionFlag,omitempty" xml:"OtaVersionFlag,omitempty"`
	OtaJobFlag              *bool     `json:"OtaJobFlag,omitempty" xml:"OtaJobFlag,omitempty"`
}

func (s CreateSubscribeRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscribeRelationRequest) GoString() string {
	return s.String()
}

func (s *CreateSubscribeRelationRequest) SetIotInstanceId(v string) *CreateSubscribeRelationRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetProductKey(v string) *CreateSubscribeRelationRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetDeviceDataFlag(v bool) *CreateSubscribeRelationRequest {
	s.DeviceDataFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetDeviceLifeCycleFlag(v bool) *CreateSubscribeRelationRequest {
	s.DeviceLifeCycleFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetDeviceStatusChangeFlag(v bool) *CreateSubscribeRelationRequest {
	s.DeviceStatusChangeFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetDeviceTopoLifeCycleFlag(v bool) *CreateSubscribeRelationRequest {
	s.DeviceTopoLifeCycleFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetFoundDeviceListFlag(v bool) *CreateSubscribeRelationRequest {
	s.FoundDeviceListFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetMnsConfiguration(v string) *CreateSubscribeRelationRequest {
	s.MnsConfiguration = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetType(v string) *CreateSubscribeRelationRequest {
	s.Type = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetConsumerGroupIds(v []*string) *CreateSubscribeRelationRequest {
	s.ConsumerGroupIds = v
	return s
}

func (s *CreateSubscribeRelationRequest) SetOtaEventFlag(v bool) *CreateSubscribeRelationRequest {
	s.OtaEventFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetThingHistoryFlag(v bool) *CreateSubscribeRelationRequest {
	s.ThingHistoryFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetDeviceTagFlag(v bool) *CreateSubscribeRelationRequest {
	s.DeviceTagFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetOtaVersionFlag(v bool) *CreateSubscribeRelationRequest {
	s.OtaVersionFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetOtaJobFlag(v bool) *CreateSubscribeRelationRequest {
	s.OtaJobFlag = &v
	return s
}

type CreateSubscribeRelationResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s CreateSubscribeRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscribeRelationResponse) GoString() string {
	return s.String()
}

func (s *CreateSubscribeRelationResponse) SetRequestId(v string) *CreateSubscribeRelationResponse {
	s.RequestId = &v
	return s
}

func (s *CreateSubscribeRelationResponse) SetSuccess(v bool) *CreateSubscribeRelationResponse {
	s.Success = &v
	return s
}

func (s *CreateSubscribeRelationResponse) SetCode(v string) *CreateSubscribeRelationResponse {
	s.Code = &v
	return s
}

func (s *CreateSubscribeRelationResponse) SetErrorMessage(v string) *CreateSubscribeRelationResponse {
	s.ErrorMessage = &v
	return s
}

type DeleteSubscribeRelationRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s DeleteSubscribeRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSubscribeRelationRequest) GoString() string {
	return s.String()
}

func (s *DeleteSubscribeRelationRequest) SetIotInstanceId(v string) *DeleteSubscribeRelationRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteSubscribeRelationRequest) SetProductKey(v string) *DeleteSubscribeRelationRequest {
	s.ProductKey = &v
	return s
}

func (s *DeleteSubscribeRelationRequest) SetType(v string) *DeleteSubscribeRelationRequest {
	s.Type = &v
	return s
}

type DeleteSubscribeRelationResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteSubscribeRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSubscribeRelationResponse) GoString() string {
	return s.String()
}

func (s *DeleteSubscribeRelationResponse) SetRequestId(v string) *DeleteSubscribeRelationResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteSubscribeRelationResponse) SetSuccess(v bool) *DeleteSubscribeRelationResponse {
	s.Success = &v
	return s
}

func (s *DeleteSubscribeRelationResponse) SetCode(v string) *DeleteSubscribeRelationResponse {
	s.Code = &v
	return s
}

func (s *DeleteSubscribeRelationResponse) SetErrorMessage(v string) *DeleteSubscribeRelationResponse {
	s.ErrorMessage = &v
	return s
}

type QueryConsumerGroupStatusRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
}

func (s QueryConsumerGroupStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupStatusRequest) SetIotInstanceId(v string) *QueryConsumerGroupStatusRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryConsumerGroupStatusRequest) SetGroupId(v string) *QueryConsumerGroupStatusRequest {
	s.GroupId = &v
	return s
}

type QueryConsumerGroupStatusResponse struct {
	RequestId                  *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success                    *bool                                                       `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage               *string                                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	AccumulationCount          *int                                                        `json:"AccumulationCount,omitempty" xml:"AccumulationCount,omitempty" require:"true"`
	ConsumerSpeed              *int                                                        `json:"ConsumerSpeed,omitempty" xml:"ConsumerSpeed,omitempty" require:"true"`
	LastConsumerTime           *string                                                     `json:"LastConsumerTime,omitempty" xml:"LastConsumerTime,omitempty" require:"true"`
	Code                       *string                                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ClientConnectionStatusList *QueryConsumerGroupStatusResponseClientConnectionStatusList `json:"ClientConnectionStatusList,omitempty" xml:"ClientConnectionStatusList,omitempty" require:"true" type:"Struct"`
}

func (s QueryConsumerGroupStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupStatusResponse) SetRequestId(v string) *QueryConsumerGroupStatusResponse {
	s.RequestId = &v
	return s
}

func (s *QueryConsumerGroupStatusResponse) SetSuccess(v bool) *QueryConsumerGroupStatusResponse {
	s.Success = &v
	return s
}

func (s *QueryConsumerGroupStatusResponse) SetErrorMessage(v string) *QueryConsumerGroupStatusResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryConsumerGroupStatusResponse) SetAccumulationCount(v int) *QueryConsumerGroupStatusResponse {
	s.AccumulationCount = &v
	return s
}

func (s *QueryConsumerGroupStatusResponse) SetConsumerSpeed(v int) *QueryConsumerGroupStatusResponse {
	s.ConsumerSpeed = &v
	return s
}

func (s *QueryConsumerGroupStatusResponse) SetLastConsumerTime(v string) *QueryConsumerGroupStatusResponse {
	s.LastConsumerTime = &v
	return s
}

func (s *QueryConsumerGroupStatusResponse) SetCode(v string) *QueryConsumerGroupStatusResponse {
	s.Code = &v
	return s
}

func (s *QueryConsumerGroupStatusResponse) SetClientConnectionStatusList(v *QueryConsumerGroupStatusResponseClientConnectionStatusList) *QueryConsumerGroupStatusResponse {
	s.ClientConnectionStatusList = v
	return s
}

type QueryConsumerGroupStatusResponseClientConnectionStatusList struct {
	ConsumerGroupClientConnectionInfo []*QueryConsumerGroupStatusResponseClientConnectionStatusListConsumerGroupClientConnectionInfo `json:"ConsumerGroupClientConnectionInfo,omitempty" xml:"ConsumerGroupClientConnectionInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryConsumerGroupStatusResponseClientConnectionStatusList) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupStatusResponseClientConnectionStatusList) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupStatusResponseClientConnectionStatusList) SetConsumerGroupClientConnectionInfo(v []*QueryConsumerGroupStatusResponseClientConnectionStatusListConsumerGroupClientConnectionInfo) *QueryConsumerGroupStatusResponseClientConnectionStatusList {
	s.ConsumerGroupClientConnectionInfo = v
	return s
}

type QueryConsumerGroupStatusResponseClientConnectionStatusListConsumerGroupClientConnectionInfo struct {
	ClientId     *string `json:"ClientId,omitempty" xml:"ClientId,omitempty" require:"true"`
	ClientIpPort *string `json:"ClientIpPort,omitempty" xml:"ClientIpPort,omitempty" require:"true"`
	OnlineTime   *int64  `json:"OnlineTime,omitempty" xml:"OnlineTime,omitempty" require:"true"`
}

func (s QueryConsumerGroupStatusResponseClientConnectionStatusListConsumerGroupClientConnectionInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupStatusResponseClientConnectionStatusListConsumerGroupClientConnectionInfo) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupStatusResponseClientConnectionStatusListConsumerGroupClientConnectionInfo) SetClientId(v string) *QueryConsumerGroupStatusResponseClientConnectionStatusListConsumerGroupClientConnectionInfo {
	s.ClientId = &v
	return s
}

func (s *QueryConsumerGroupStatusResponseClientConnectionStatusListConsumerGroupClientConnectionInfo) SetClientIpPort(v string) *QueryConsumerGroupStatusResponseClientConnectionStatusListConsumerGroupClientConnectionInfo {
	s.ClientIpPort = &v
	return s
}

func (s *QueryConsumerGroupStatusResponseClientConnectionStatusListConsumerGroupClientConnectionInfo) SetOnlineTime(v int64) *QueryConsumerGroupStatusResponseClientConnectionStatusListConsumerGroupClientConnectionInfo {
	s.OnlineTime = &v
	return s
}

type DeleteConsumerGroupRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
}

func (s DeleteConsumerGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteConsumerGroupRequest) SetIotInstanceId(v string) *DeleteConsumerGroupRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteConsumerGroupRequest) SetGroupId(v string) *DeleteConsumerGroupRequest {
	s.GroupId = &v
	return s
}

type DeleteConsumerGroupResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
}

func (s DeleteConsumerGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteConsumerGroupResponse) SetRequestId(v string) *DeleteConsumerGroupResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteConsumerGroupResponse) SetSuccess(v bool) *DeleteConsumerGroupResponse {
	s.Success = &v
	return s
}

func (s *DeleteConsumerGroupResponse) SetErrorMessage(v string) *DeleteConsumerGroupResponse {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteConsumerGroupResponse) SetCode(v string) *DeleteConsumerGroupResponse {
	s.Code = &v
	return s
}

type QueryConsumerGroupListRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	Fuzzy         *bool   `json:"Fuzzy,omitempty" xml:"Fuzzy,omitempty"`
	GroupName     *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s QueryConsumerGroupListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupListRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupListRequest) SetIotInstanceId(v string) *QueryConsumerGroupListRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryConsumerGroupListRequest) SetPageSize(v int) *QueryConsumerGroupListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryConsumerGroupListRequest) SetCurrentPage(v int) *QueryConsumerGroupListRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryConsumerGroupListRequest) SetFuzzy(v bool) *QueryConsumerGroupListRequest {
	s.Fuzzy = &v
	return s
}

func (s *QueryConsumerGroupListRequest) SetGroupName(v string) *QueryConsumerGroupListRequest {
	s.GroupName = &v
	return s
}

type QueryConsumerGroupListResponse struct {
	RequestId    *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                               `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	PageSize     *int                                `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageCount    *int                                `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	Total        *int                                `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	CurrentPage  *int                                `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	Code         *string                             `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data         *QueryConsumerGroupListResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryConsumerGroupListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupListResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupListResponse) SetRequestId(v string) *QueryConsumerGroupListResponse {
	s.RequestId = &v
	return s
}

func (s *QueryConsumerGroupListResponse) SetSuccess(v bool) *QueryConsumerGroupListResponse {
	s.Success = &v
	return s
}

func (s *QueryConsumerGroupListResponse) SetErrorMessage(v string) *QueryConsumerGroupListResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryConsumerGroupListResponse) SetPageSize(v int) *QueryConsumerGroupListResponse {
	s.PageSize = &v
	return s
}

func (s *QueryConsumerGroupListResponse) SetPageCount(v int) *QueryConsumerGroupListResponse {
	s.PageCount = &v
	return s
}

func (s *QueryConsumerGroupListResponse) SetTotal(v int) *QueryConsumerGroupListResponse {
	s.Total = &v
	return s
}

func (s *QueryConsumerGroupListResponse) SetCurrentPage(v int) *QueryConsumerGroupListResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryConsumerGroupListResponse) SetCode(v string) *QueryConsumerGroupListResponse {
	s.Code = &v
	return s
}

func (s *QueryConsumerGroupListResponse) SetData(v *QueryConsumerGroupListResponseData) *QueryConsumerGroupListResponse {
	s.Data = v
	return s
}

type QueryConsumerGroupListResponseData struct {
	ConsumerGroupDTO []*QueryConsumerGroupListResponseDataConsumerGroupDTO `json:"ConsumerGroupDTO,omitempty" xml:"ConsumerGroupDTO,omitempty" require:"true" type:"Repeated"`
}

func (s QueryConsumerGroupListResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupListResponseData) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupListResponseData) SetConsumerGroupDTO(v []*QueryConsumerGroupListResponseDataConsumerGroupDTO) *QueryConsumerGroupListResponseData {
	s.ConsumerGroupDTO = v
	return s
}

type QueryConsumerGroupListResponseDataConsumerGroupDTO struct {
	GroupId    *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	GroupName  *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
}

func (s QueryConsumerGroupListResponseDataConsumerGroupDTO) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupListResponseDataConsumerGroupDTO) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupListResponseDataConsumerGroupDTO) SetGroupId(v string) *QueryConsumerGroupListResponseDataConsumerGroupDTO {
	s.GroupId = &v
	return s
}

func (s *QueryConsumerGroupListResponseDataConsumerGroupDTO) SetGroupName(v string) *QueryConsumerGroupListResponseDataConsumerGroupDTO {
	s.GroupName = &v
	return s
}

func (s *QueryConsumerGroupListResponseDataConsumerGroupDTO) SetCreateTime(v string) *QueryConsumerGroupListResponseDataConsumerGroupDTO {
	s.CreateTime = &v
	return s
}

type QueryConsumerGroupByGroupIdRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
}

func (s QueryConsumerGroupByGroupIdRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupByGroupIdRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupByGroupIdRequest) SetIotInstanceId(v string) *QueryConsumerGroupByGroupIdRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryConsumerGroupByGroupIdRequest) SetGroupId(v string) *QueryConsumerGroupByGroupIdRequest {
	s.GroupId = &v
	return s
}

type QueryConsumerGroupByGroupIdResponse struct {
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                    `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string                                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string                                  `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data         *QueryConsumerGroupByGroupIdResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryConsumerGroupByGroupIdResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupByGroupIdResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupByGroupIdResponse) SetRequestId(v string) *QueryConsumerGroupByGroupIdResponse {
	s.RequestId = &v
	return s
}

func (s *QueryConsumerGroupByGroupIdResponse) SetSuccess(v bool) *QueryConsumerGroupByGroupIdResponse {
	s.Success = &v
	return s
}

func (s *QueryConsumerGroupByGroupIdResponse) SetErrorMessage(v string) *QueryConsumerGroupByGroupIdResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryConsumerGroupByGroupIdResponse) SetCode(v string) *QueryConsumerGroupByGroupIdResponse {
	s.Code = &v
	return s
}

func (s *QueryConsumerGroupByGroupIdResponse) SetData(v *QueryConsumerGroupByGroupIdResponseData) *QueryConsumerGroupByGroupIdResponse {
	s.Data = v
	return s
}

type QueryConsumerGroupByGroupIdResponseData struct {
	GroupId    *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	GroupName  *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
}

func (s QueryConsumerGroupByGroupIdResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupByGroupIdResponseData) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupByGroupIdResponseData) SetGroupId(v string) *QueryConsumerGroupByGroupIdResponseData {
	s.GroupId = &v
	return s
}

func (s *QueryConsumerGroupByGroupIdResponseData) SetGroupName(v string) *QueryConsumerGroupByGroupIdResponseData {
	s.GroupName = &v
	return s
}

func (s *QueryConsumerGroupByGroupIdResponseData) SetCreateTime(v string) *QueryConsumerGroupByGroupIdResponseData {
	s.CreateTime = &v
	return s
}

type CreateConsumerGroupRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupName     *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
}

func (s CreateConsumerGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateConsumerGroupRequest) SetIotInstanceId(v string) *CreateConsumerGroupRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateConsumerGroupRequest) SetGroupName(v string) *CreateConsumerGroupRequest {
	s.GroupName = &v
	return s
}

type CreateConsumerGroupResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	GroupId      *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
}

func (s CreateConsumerGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateConsumerGroupResponse) SetRequestId(v string) *CreateConsumerGroupResponse {
	s.RequestId = &v
	return s
}

func (s *CreateConsumerGroupResponse) SetSuccess(v bool) *CreateConsumerGroupResponse {
	s.Success = &v
	return s
}

func (s *CreateConsumerGroupResponse) SetErrorMessage(v string) *CreateConsumerGroupResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateConsumerGroupResponse) SetGroupId(v string) *CreateConsumerGroupResponse {
	s.GroupId = &v
	return s
}

func (s *CreateConsumerGroupResponse) SetCode(v string) *CreateConsumerGroupResponse {
	s.Code = &v
	return s
}

type CreateOTADynamicUpgradeJobRequest struct {
	IotInstanceId    *string                                 `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareId       *string                                 `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty" require:"true"`
	ProductKey       *string                                 `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	SrcVersion       []*string                               `json:"SrcVersion,omitempty" xml:"SrcVersion,omitempty" type:"Repeated"`
	RetryInterval    *int                                    `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	RetryCount       *int                                    `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	TimeoutInMinutes *int                                    `json:"TimeoutInMinutes,omitempty" xml:"TimeoutInMinutes,omitempty"`
	MaximumPerMinute *int                                    `json:"MaximumPerMinute,omitempty" xml:"MaximumPerMinute,omitempty"`
	OverwriteMode    *int                                    `json:"OverwriteMode,omitempty" xml:"OverwriteMode,omitempty"`
	DynamicMode      *int                                    `json:"DynamicMode,omitempty" xml:"DynamicMode,omitempty"`
	Tag              []*CreateOTADynamicUpgradeJobRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateOTADynamicUpgradeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOTADynamicUpgradeJobRequest) GoString() string {
	return s.String()
}

func (s *CreateOTADynamicUpgradeJobRequest) SetIotInstanceId(v string) *CreateOTADynamicUpgradeJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetFirmwareId(v string) *CreateOTADynamicUpgradeJobRequest {
	s.FirmwareId = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetProductKey(v string) *CreateOTADynamicUpgradeJobRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetSrcVersion(v []*string) *CreateOTADynamicUpgradeJobRequest {
	s.SrcVersion = v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetRetryInterval(v int) *CreateOTADynamicUpgradeJobRequest {
	s.RetryInterval = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetRetryCount(v int) *CreateOTADynamicUpgradeJobRequest {
	s.RetryCount = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetTimeoutInMinutes(v int) *CreateOTADynamicUpgradeJobRequest {
	s.TimeoutInMinutes = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetMaximumPerMinute(v int) *CreateOTADynamicUpgradeJobRequest {
	s.MaximumPerMinute = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetOverwriteMode(v int) *CreateOTADynamicUpgradeJobRequest {
	s.OverwriteMode = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetDynamicMode(v int) *CreateOTADynamicUpgradeJobRequest {
	s.DynamicMode = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetTag(v []*CreateOTADynamicUpgradeJobRequestTag) *CreateOTADynamicUpgradeJobRequest {
	s.Tag = v
	return s
}

type CreateOTADynamicUpgradeJobRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s CreateOTADynamicUpgradeJobRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateOTADynamicUpgradeJobRequestTag) GoString() string {
	return s.String()
}

func (s *CreateOTADynamicUpgradeJobRequestTag) SetKey(v string) *CreateOTADynamicUpgradeJobRequestTag {
	s.Key = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequestTag) SetValue(v string) *CreateOTADynamicUpgradeJobRequestTag {
	s.Value = &v
	return s
}

type CreateOTADynamicUpgradeJobResponse struct {
	RequestId    *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                 `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                 `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *CreateOTADynamicUpgradeJobResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s CreateOTADynamicUpgradeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOTADynamicUpgradeJobResponse) GoString() string {
	return s.String()
}

func (s *CreateOTADynamicUpgradeJobResponse) SetRequestId(v string) *CreateOTADynamicUpgradeJobResponse {
	s.RequestId = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobResponse) SetSuccess(v bool) *CreateOTADynamicUpgradeJobResponse {
	s.Success = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobResponse) SetCode(v string) *CreateOTADynamicUpgradeJobResponse {
	s.Code = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobResponse) SetErrorMessage(v string) *CreateOTADynamicUpgradeJobResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobResponse) SetData(v *CreateOTADynamicUpgradeJobResponseData) *CreateOTADynamicUpgradeJobResponse {
	s.Data = v
	return s
}

type CreateOTADynamicUpgradeJobResponseData struct {
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
	UtcCreate *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
}

func (s CreateOTADynamicUpgradeJobResponseData) String() string {
	return tea.Prettify(s)
}

func (s CreateOTADynamicUpgradeJobResponseData) GoString() string {
	return s.String()
}

func (s *CreateOTADynamicUpgradeJobResponseData) SetJobId(v string) *CreateOTADynamicUpgradeJobResponseData {
	s.JobId = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobResponseData) SetUtcCreate(v string) *CreateOTADynamicUpgradeJobResponseData {
	s.UtcCreate = &v
	return s
}

type CreateOTAStaticUpgradeJobRequest struct {
	IotInstanceId      *string                                `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareId         *string                                `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty" require:"true"`
	ProductKey         *string                                `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	TargetSelection    *string                                `json:"TargetSelection,omitempty" xml:"TargetSelection,omitempty" require:"true"`
	SrcVersion         []*string                              `json:"SrcVersion,omitempty" xml:"SrcVersion,omitempty" type:"Repeated"`
	ScheduleTime       *int64                                 `json:"ScheduleTime,omitempty" xml:"ScheduleTime,omitempty"`
	RetryInterval      *int                                   `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	RetryCount         *int                                   `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	TimeoutInMinutes   *int                                   `json:"TimeoutInMinutes,omitempty" xml:"TimeoutInMinutes,omitempty"`
	MaximumPerMinute   *int                                   `json:"MaximumPerMinute,omitempty" xml:"MaximumPerMinute,omitempty"`
	GrayPercent        *string                                `json:"GrayPercent,omitempty" xml:"GrayPercent,omitempty"`
	TargetDeviceName   []*string                              `json:"TargetDeviceName,omitempty" xml:"TargetDeviceName,omitempty" type:"Repeated"`
	ScheduleFinishTime *int64                                 `json:"ScheduleFinishTime,omitempty" xml:"ScheduleFinishTime,omitempty"`
	OverwriteMode      *int                                   `json:"OverwriteMode,omitempty" xml:"OverwriteMode,omitempty"`
	Tag                []*CreateOTAStaticUpgradeJobRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	DnListFileUrl      *string                                `json:"DnListFileUrl,omitempty" xml:"DnListFileUrl,omitempty"`
}

func (s CreateOTAStaticUpgradeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAStaticUpgradeJobRequest) GoString() string {
	return s.String()
}

func (s *CreateOTAStaticUpgradeJobRequest) SetIotInstanceId(v string) *CreateOTAStaticUpgradeJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetFirmwareId(v string) *CreateOTAStaticUpgradeJobRequest {
	s.FirmwareId = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetProductKey(v string) *CreateOTAStaticUpgradeJobRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetTargetSelection(v string) *CreateOTAStaticUpgradeJobRequest {
	s.TargetSelection = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetSrcVersion(v []*string) *CreateOTAStaticUpgradeJobRequest {
	s.SrcVersion = v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetScheduleTime(v int64) *CreateOTAStaticUpgradeJobRequest {
	s.ScheduleTime = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetRetryInterval(v int) *CreateOTAStaticUpgradeJobRequest {
	s.RetryInterval = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetRetryCount(v int) *CreateOTAStaticUpgradeJobRequest {
	s.RetryCount = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetTimeoutInMinutes(v int) *CreateOTAStaticUpgradeJobRequest {
	s.TimeoutInMinutes = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetMaximumPerMinute(v int) *CreateOTAStaticUpgradeJobRequest {
	s.MaximumPerMinute = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetGrayPercent(v string) *CreateOTAStaticUpgradeJobRequest {
	s.GrayPercent = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetTargetDeviceName(v []*string) *CreateOTAStaticUpgradeJobRequest {
	s.TargetDeviceName = v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetScheduleFinishTime(v int64) *CreateOTAStaticUpgradeJobRequest {
	s.ScheduleFinishTime = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetOverwriteMode(v int) *CreateOTAStaticUpgradeJobRequest {
	s.OverwriteMode = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetTag(v []*CreateOTAStaticUpgradeJobRequestTag) *CreateOTAStaticUpgradeJobRequest {
	s.Tag = v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetDnListFileUrl(v string) *CreateOTAStaticUpgradeJobRequest {
	s.DnListFileUrl = &v
	return s
}

type CreateOTAStaticUpgradeJobRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s CreateOTAStaticUpgradeJobRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAStaticUpgradeJobRequestTag) GoString() string {
	return s.String()
}

func (s *CreateOTAStaticUpgradeJobRequestTag) SetKey(v string) *CreateOTAStaticUpgradeJobRequestTag {
	s.Key = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequestTag) SetValue(v string) *CreateOTAStaticUpgradeJobRequestTag {
	s.Value = &v
	return s
}

type CreateOTAStaticUpgradeJobResponse struct {
	RequestId    *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                  `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *CreateOTAStaticUpgradeJobResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s CreateOTAStaticUpgradeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAStaticUpgradeJobResponse) GoString() string {
	return s.String()
}

func (s *CreateOTAStaticUpgradeJobResponse) SetRequestId(v string) *CreateOTAStaticUpgradeJobResponse {
	s.RequestId = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobResponse) SetSuccess(v bool) *CreateOTAStaticUpgradeJobResponse {
	s.Success = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobResponse) SetCode(v string) *CreateOTAStaticUpgradeJobResponse {
	s.Code = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobResponse) SetErrorMessage(v string) *CreateOTAStaticUpgradeJobResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobResponse) SetData(v *CreateOTAStaticUpgradeJobResponseData) *CreateOTAStaticUpgradeJobResponse {
	s.Data = v
	return s
}

type CreateOTAStaticUpgradeJobResponseData struct {
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
	UtcCreate *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
}

func (s CreateOTAStaticUpgradeJobResponseData) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAStaticUpgradeJobResponseData) GoString() string {
	return s.String()
}

func (s *CreateOTAStaticUpgradeJobResponseData) SetJobId(v string) *CreateOTAStaticUpgradeJobResponseData {
	s.JobId = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobResponseData) SetUtcCreate(v string) *CreateOTAStaticUpgradeJobResponseData {
	s.UtcCreate = &v
	return s
}

type CreateOTAFirmwareRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareName  *string `json:"FirmwareName,omitempty" xml:"FirmwareName,omitempty" require:"true"`
	DestVersion   *string `json:"DestVersion,omitempty" xml:"DestVersion,omitempty" require:"true"`
	FirmwareUrl   *string `json:"FirmwareUrl,omitempty" xml:"FirmwareUrl,omitempty" require:"true"`
	FirmwareSign  *string `json:"FirmwareSign,omitempty" xml:"FirmwareSign,omitempty"`
	SignMethod    *string `json:"SignMethod,omitempty" xml:"SignMethod,omitempty"`
	FirmwareSize  *int    `json:"FirmwareSize,omitempty" xml:"FirmwareSize,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	FirmwareDesc  *string `json:"FirmwareDesc,omitempty" xml:"FirmwareDesc,omitempty"`
	Type          *int    `json:"Type,omitempty" xml:"Type,omitempty"`
	SrcVersion    *string `json:"SrcVersion,omitempty" xml:"SrcVersion,omitempty"`
	ModuleName    *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
	NeedToVerify  *bool   `json:"NeedToVerify,omitempty" xml:"NeedToVerify,omitempty"`
}

func (s CreateOTAFirmwareRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAFirmwareRequest) GoString() string {
	return s.String()
}

func (s *CreateOTAFirmwareRequest) SetIotInstanceId(v string) *CreateOTAFirmwareRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetFirmwareName(v string) *CreateOTAFirmwareRequest {
	s.FirmwareName = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetDestVersion(v string) *CreateOTAFirmwareRequest {
	s.DestVersion = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetFirmwareUrl(v string) *CreateOTAFirmwareRequest {
	s.FirmwareUrl = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetFirmwareSign(v string) *CreateOTAFirmwareRequest {
	s.FirmwareSign = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetSignMethod(v string) *CreateOTAFirmwareRequest {
	s.SignMethod = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetFirmwareSize(v int) *CreateOTAFirmwareRequest {
	s.FirmwareSize = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetProductKey(v string) *CreateOTAFirmwareRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetFirmwareDesc(v string) *CreateOTAFirmwareRequest {
	s.FirmwareDesc = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetType(v int) *CreateOTAFirmwareRequest {
	s.Type = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetSrcVersion(v string) *CreateOTAFirmwareRequest {
	s.SrcVersion = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetModuleName(v string) *CreateOTAFirmwareRequest {
	s.ModuleName = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetNeedToVerify(v bool) *CreateOTAFirmwareRequest {
	s.NeedToVerify = &v
	return s
}

type CreateOTAFirmwareResponse struct {
	RequestId    *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                          `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *CreateOTAFirmwareResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s CreateOTAFirmwareResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAFirmwareResponse) GoString() string {
	return s.String()
}

func (s *CreateOTAFirmwareResponse) SetRequestId(v string) *CreateOTAFirmwareResponse {
	s.RequestId = &v
	return s
}

func (s *CreateOTAFirmwareResponse) SetSuccess(v bool) *CreateOTAFirmwareResponse {
	s.Success = &v
	return s
}

func (s *CreateOTAFirmwareResponse) SetCode(v string) *CreateOTAFirmwareResponse {
	s.Code = &v
	return s
}

func (s *CreateOTAFirmwareResponse) SetErrorMessage(v string) *CreateOTAFirmwareResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateOTAFirmwareResponse) SetData(v *CreateOTAFirmwareResponseData) *CreateOTAFirmwareResponse {
	s.Data = v
	return s
}

type CreateOTAFirmwareResponseData struct {
	FirmwareId *string `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty" require:"true"`
	UtcCreate  *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
}

func (s CreateOTAFirmwareResponseData) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAFirmwareResponseData) GoString() string {
	return s.String()
}

func (s *CreateOTAFirmwareResponseData) SetFirmwareId(v string) *CreateOTAFirmwareResponseData {
	s.FirmwareId = &v
	return s
}

func (s *CreateOTAFirmwareResponseData) SetUtcCreate(v string) *CreateOTAFirmwareResponseData {
	s.UtcCreate = &v
	return s
}

type CreateOTAVerifyJobRequest struct {
	IotInstanceId    *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareId       *string   `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty" require:"true"`
	TimeoutInMinutes *int      `json:"TimeoutInMinutes,omitempty" xml:"TimeoutInMinutes,omitempty"`
	ProductKey       *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	TargetDeviceName []*string `json:"TargetDeviceName,omitempty" xml:"TargetDeviceName,omitempty" require:"true" type:"Repeated"`
}

func (s CreateOTAVerifyJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAVerifyJobRequest) GoString() string {
	return s.String()
}

func (s *CreateOTAVerifyJobRequest) SetIotInstanceId(v string) *CreateOTAVerifyJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateOTAVerifyJobRequest) SetFirmwareId(v string) *CreateOTAVerifyJobRequest {
	s.FirmwareId = &v
	return s
}

func (s *CreateOTAVerifyJobRequest) SetTimeoutInMinutes(v int) *CreateOTAVerifyJobRequest {
	s.TimeoutInMinutes = &v
	return s
}

func (s *CreateOTAVerifyJobRequest) SetProductKey(v string) *CreateOTAVerifyJobRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateOTAVerifyJobRequest) SetTargetDeviceName(v []*string) *CreateOTAVerifyJobRequest {
	s.TargetDeviceName = v
	return s
}

type CreateOTAVerifyJobResponse struct {
	RequestId    *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                           `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                         `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *CreateOTAVerifyJobResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s CreateOTAVerifyJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAVerifyJobResponse) GoString() string {
	return s.String()
}

func (s *CreateOTAVerifyJobResponse) SetRequestId(v string) *CreateOTAVerifyJobResponse {
	s.RequestId = &v
	return s
}

func (s *CreateOTAVerifyJobResponse) SetSuccess(v bool) *CreateOTAVerifyJobResponse {
	s.Success = &v
	return s
}

func (s *CreateOTAVerifyJobResponse) SetCode(v string) *CreateOTAVerifyJobResponse {
	s.Code = &v
	return s
}

func (s *CreateOTAVerifyJobResponse) SetErrorMessage(v string) *CreateOTAVerifyJobResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateOTAVerifyJobResponse) SetData(v *CreateOTAVerifyJobResponseData) *CreateOTAVerifyJobResponse {
	s.Data = v
	return s
}

type CreateOTAVerifyJobResponseData struct {
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
	UtcCreate *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
}

func (s CreateOTAVerifyJobResponseData) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAVerifyJobResponseData) GoString() string {
	return s.String()
}

func (s *CreateOTAVerifyJobResponseData) SetJobId(v string) *CreateOTAVerifyJobResponseData {
	s.JobId = &v
	return s
}

func (s *CreateOTAVerifyJobResponseData) SetUtcCreate(v string) *CreateOTAVerifyJobResponseData {
	s.UtcCreate = &v
	return s
}

type QueryOTAJobRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
}

func (s QueryOTAJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAJobRequest) GoString() string {
	return s.String()
}

func (s *QueryOTAJobRequest) SetIotInstanceId(v string) *QueryOTAJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryOTAJobRequest) SetJobId(v string) *QueryOTAJobRequest {
	s.JobId = &v
	return s
}

type QueryOTAJobResponse struct {
	RequestId    *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                    `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                  `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryOTAJobResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryOTAJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAJobResponse) GoString() string {
	return s.String()
}

func (s *QueryOTAJobResponse) SetRequestId(v string) *QueryOTAJobResponse {
	s.RequestId = &v
	return s
}

func (s *QueryOTAJobResponse) SetSuccess(v bool) *QueryOTAJobResponse {
	s.Success = &v
	return s
}

func (s *QueryOTAJobResponse) SetCode(v string) *QueryOTAJobResponse {
	s.Code = &v
	return s
}

func (s *QueryOTAJobResponse) SetErrorMessage(v string) *QueryOTAJobResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryOTAJobResponse) SetData(v *QueryOTAJobResponseData) *QueryOTAJobResponse {
	s.Data = v
	return s
}

type QueryOTAJobResponseData struct {
	JobId                 *string                             `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
	UtcCreate             *string                             `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	UtcModified           *string                             `json:"UtcModified,omitempty" xml:"UtcModified,omitempty" require:"true"`
	ProductKey            *string                             `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	FirmwareId            *string                             `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty" require:"true"`
	UtcStartTime          *string                             `json:"UtcStartTime,omitempty" xml:"UtcStartTime,omitempty" require:"true"`
	UtcEndTime            *string                             `json:"UtcEndTime,omitempty" xml:"UtcEndTime,omitempty" require:"true"`
	JobStatus             *string                             `json:"JobStatus,omitempty" xml:"JobStatus,omitempty" require:"true"`
	JobType               *string                             `json:"JobType,omitempty" xml:"JobType,omitempty" require:"true"`
	JobDesc               *string                             `json:"JobDesc,omitempty" xml:"JobDesc,omitempty" require:"true"`
	Name                  *string                             `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	UtcScheduleTime       *string                             `json:"UtcScheduleTime,omitempty" xml:"UtcScheduleTime,omitempty" require:"true"`
	RetryInterval         *int                                `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty" require:"true"`
	RetryCount            *int                                `json:"RetryCount,omitempty" xml:"RetryCount,omitempty" require:"true"`
	TimeoutInMinutes      *int                                `json:"TimeoutInMinutes,omitempty" xml:"TimeoutInMinutes,omitempty" require:"true"`
	TargetSelection       *string                             `json:"TargetSelection,omitempty" xml:"TargetSelection,omitempty" require:"true"`
	SelectionType         *string                             `json:"SelectionType,omitempty" xml:"SelectionType,omitempty" require:"true"`
	GrayPercent           *string                             `json:"GrayPercent,omitempty" xml:"GrayPercent,omitempty" require:"true"`
	MaximumPerMinute      *int                                `json:"MaximumPerMinute,omitempty" xml:"MaximumPerMinute,omitempty" require:"true"`
	DestVersion           *string                             `json:"DestVersion,omitempty" xml:"DestVersion,omitempty" require:"true"`
	UtcScheduleFinishTime *string                             `json:"UtcScheduleFinishTime,omitempty" xml:"UtcScheduleFinishTime,omitempty" require:"true"`
	OverwriteMode         *int                                `json:"OverwriteMode,omitempty" xml:"OverwriteMode,omitempty" require:"true"`
	DynamicMode           *int                                `json:"DynamicMode,omitempty" xml:"DynamicMode,omitempty" require:"true"`
	Tags                  *QueryOTAJobResponseDataTags        `json:"Tags,omitempty" xml:"Tags,omitempty" require:"true" type:"Struct"`
	SrcVersions           *QueryOTAJobResponseDataSrcVersions `json:"SrcVersions,omitempty" xml:"SrcVersions,omitempty" require:"true" type:"Struct"`
}

func (s QueryOTAJobResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAJobResponseData) GoString() string {
	return s.String()
}

func (s *QueryOTAJobResponseData) SetJobId(v string) *QueryOTAJobResponseData {
	s.JobId = &v
	return s
}

func (s *QueryOTAJobResponseData) SetUtcCreate(v string) *QueryOTAJobResponseData {
	s.UtcCreate = &v
	return s
}

func (s *QueryOTAJobResponseData) SetUtcModified(v string) *QueryOTAJobResponseData {
	s.UtcModified = &v
	return s
}

func (s *QueryOTAJobResponseData) SetProductKey(v string) *QueryOTAJobResponseData {
	s.ProductKey = &v
	return s
}

func (s *QueryOTAJobResponseData) SetFirmwareId(v string) *QueryOTAJobResponseData {
	s.FirmwareId = &v
	return s
}

func (s *QueryOTAJobResponseData) SetUtcStartTime(v string) *QueryOTAJobResponseData {
	s.UtcStartTime = &v
	return s
}

func (s *QueryOTAJobResponseData) SetUtcEndTime(v string) *QueryOTAJobResponseData {
	s.UtcEndTime = &v
	return s
}

func (s *QueryOTAJobResponseData) SetJobStatus(v string) *QueryOTAJobResponseData {
	s.JobStatus = &v
	return s
}

func (s *QueryOTAJobResponseData) SetJobType(v string) *QueryOTAJobResponseData {
	s.JobType = &v
	return s
}

func (s *QueryOTAJobResponseData) SetJobDesc(v string) *QueryOTAJobResponseData {
	s.JobDesc = &v
	return s
}

func (s *QueryOTAJobResponseData) SetName(v string) *QueryOTAJobResponseData {
	s.Name = &v
	return s
}

func (s *QueryOTAJobResponseData) SetUtcScheduleTime(v string) *QueryOTAJobResponseData {
	s.UtcScheduleTime = &v
	return s
}

func (s *QueryOTAJobResponseData) SetRetryInterval(v int) *QueryOTAJobResponseData {
	s.RetryInterval = &v
	return s
}

func (s *QueryOTAJobResponseData) SetRetryCount(v int) *QueryOTAJobResponseData {
	s.RetryCount = &v
	return s
}

func (s *QueryOTAJobResponseData) SetTimeoutInMinutes(v int) *QueryOTAJobResponseData {
	s.TimeoutInMinutes = &v
	return s
}

func (s *QueryOTAJobResponseData) SetTargetSelection(v string) *QueryOTAJobResponseData {
	s.TargetSelection = &v
	return s
}

func (s *QueryOTAJobResponseData) SetSelectionType(v string) *QueryOTAJobResponseData {
	s.SelectionType = &v
	return s
}

func (s *QueryOTAJobResponseData) SetGrayPercent(v string) *QueryOTAJobResponseData {
	s.GrayPercent = &v
	return s
}

func (s *QueryOTAJobResponseData) SetMaximumPerMinute(v int) *QueryOTAJobResponseData {
	s.MaximumPerMinute = &v
	return s
}

func (s *QueryOTAJobResponseData) SetDestVersion(v string) *QueryOTAJobResponseData {
	s.DestVersion = &v
	return s
}

func (s *QueryOTAJobResponseData) SetUtcScheduleFinishTime(v string) *QueryOTAJobResponseData {
	s.UtcScheduleFinishTime = &v
	return s
}

func (s *QueryOTAJobResponseData) SetOverwriteMode(v int) *QueryOTAJobResponseData {
	s.OverwriteMode = &v
	return s
}

func (s *QueryOTAJobResponseData) SetDynamicMode(v int) *QueryOTAJobResponseData {
	s.DynamicMode = &v
	return s
}

func (s *QueryOTAJobResponseData) SetTags(v *QueryOTAJobResponseDataTags) *QueryOTAJobResponseData {
	s.Tags = v
	return s
}

func (s *QueryOTAJobResponseData) SetSrcVersions(v *QueryOTAJobResponseDataSrcVersions) *QueryOTAJobResponseData {
	s.SrcVersions = v
	return s
}

type QueryOTAJobResponseDataTags struct {
	OtaTagDTO []*QueryOTAJobResponseDataTagsOtaTagDTO `json:"OtaTagDTO,omitempty" xml:"OtaTagDTO,omitempty" require:"true" type:"Repeated"`
}

func (s QueryOTAJobResponseDataTags) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAJobResponseDataTags) GoString() string {
	return s.String()
}

func (s *QueryOTAJobResponseDataTags) SetOtaTagDTO(v []*QueryOTAJobResponseDataTagsOtaTagDTO) *QueryOTAJobResponseDataTags {
	s.OtaTagDTO = v
	return s
}

type QueryOTAJobResponseDataTagsOtaTagDTO struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s QueryOTAJobResponseDataTagsOtaTagDTO) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAJobResponseDataTagsOtaTagDTO) GoString() string {
	return s.String()
}

func (s *QueryOTAJobResponseDataTagsOtaTagDTO) SetKey(v string) *QueryOTAJobResponseDataTagsOtaTagDTO {
	s.Key = &v
	return s
}

func (s *QueryOTAJobResponseDataTagsOtaTagDTO) SetValue(v string) *QueryOTAJobResponseDataTagsOtaTagDTO {
	s.Value = &v
	return s
}

type QueryOTAJobResponseDataSrcVersions struct {
	// SrcVersion
	SrcVersion []*string `json:"SrcVersion,omitempty" xml:"SrcVersion,omitempty" require:"true" type:"Repeated"`
}

func (s QueryOTAJobResponseDataSrcVersions) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAJobResponseDataSrcVersions) GoString() string {
	return s.String()
}

func (s *QueryOTAJobResponseDataSrcVersions) SetSrcVersion(v []*string) *QueryOTAJobResponseDataSrcVersions {
	s.SrcVersion = v
	return s
}

type CancelOTATaskByDeviceRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareId    *string   `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty" require:"true"`
	ProductKey    *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName    []*string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true" type:"Repeated"`
	JobId         *string   `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s CancelOTATaskByDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelOTATaskByDeviceRequest) GoString() string {
	return s.String()
}

func (s *CancelOTATaskByDeviceRequest) SetIotInstanceId(v string) *CancelOTATaskByDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CancelOTATaskByDeviceRequest) SetFirmwareId(v string) *CancelOTATaskByDeviceRequest {
	s.FirmwareId = &v
	return s
}

func (s *CancelOTATaskByDeviceRequest) SetProductKey(v string) *CancelOTATaskByDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *CancelOTATaskByDeviceRequest) SetDeviceName(v []*string) *CancelOTATaskByDeviceRequest {
	s.DeviceName = v
	return s
}

func (s *CancelOTATaskByDeviceRequest) SetJobId(v string) *CancelOTATaskByDeviceRequest {
	s.JobId = &v
	return s
}

type CancelOTATaskByDeviceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s CancelOTATaskByDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelOTATaskByDeviceResponse) GoString() string {
	return s.String()
}

func (s *CancelOTATaskByDeviceResponse) SetRequestId(v string) *CancelOTATaskByDeviceResponse {
	s.RequestId = &v
	return s
}

func (s *CancelOTATaskByDeviceResponse) SetSuccess(v bool) *CancelOTATaskByDeviceResponse {
	s.Success = &v
	return s
}

func (s *CancelOTATaskByDeviceResponse) SetCode(v string) *CancelOTATaskByDeviceResponse {
	s.Code = &v
	return s
}

func (s *CancelOTATaskByDeviceResponse) SetErrorMessage(v string) *CancelOTATaskByDeviceResponse {
	s.ErrorMessage = &v
	return s
}

type DeleteOTAFirmwareRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareId    *string `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty" require:"true"`
}

func (s DeleteOTAFirmwareRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteOTAFirmwareRequest) GoString() string {
	return s.String()
}

func (s *DeleteOTAFirmwareRequest) SetIotInstanceId(v string) *DeleteOTAFirmwareRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteOTAFirmwareRequest) SetFirmwareId(v string) *DeleteOTAFirmwareRequest {
	s.FirmwareId = &v
	return s
}

type DeleteOTAFirmwareResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteOTAFirmwareResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteOTAFirmwareResponse) GoString() string {
	return s.String()
}

func (s *DeleteOTAFirmwareResponse) SetRequestId(v string) *DeleteOTAFirmwareResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteOTAFirmwareResponse) SetSuccess(v bool) *DeleteOTAFirmwareResponse {
	s.Success = &v
	return s
}

func (s *DeleteOTAFirmwareResponse) SetCode(v string) *DeleteOTAFirmwareResponse {
	s.Code = &v
	return s
}

func (s *DeleteOTAFirmwareResponse) SetErrorMessage(v string) *DeleteOTAFirmwareResponse {
	s.ErrorMessage = &v
	return s
}

type QueryOTAFirmwareRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareId    *string `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty" require:"true"`
}

func (s QueryOTAFirmwareRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAFirmwareRequest) GoString() string {
	return s.String()
}

func (s *QueryOTAFirmwareRequest) SetIotInstanceId(v string) *QueryOTAFirmwareRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryOTAFirmwareRequest) SetFirmwareId(v string) *QueryOTAFirmwareRequest {
	s.FirmwareId = &v
	return s
}

type QueryOTAFirmwareResponse struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                 `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                               `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	FirmwareInfo *QueryOTAFirmwareResponseFirmwareInfo `json:"FirmwareInfo,omitempty" xml:"FirmwareInfo,omitempty" require:"true" type:"Struct"`
}

func (s QueryOTAFirmwareResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAFirmwareResponse) GoString() string {
	return s.String()
}

func (s *QueryOTAFirmwareResponse) SetRequestId(v string) *QueryOTAFirmwareResponse {
	s.RequestId = &v
	return s
}

func (s *QueryOTAFirmwareResponse) SetSuccess(v bool) *QueryOTAFirmwareResponse {
	s.Success = &v
	return s
}

func (s *QueryOTAFirmwareResponse) SetCode(v string) *QueryOTAFirmwareResponse {
	s.Code = &v
	return s
}

func (s *QueryOTAFirmwareResponse) SetErrorMessage(v string) *QueryOTAFirmwareResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryOTAFirmwareResponse) SetFirmwareInfo(v *QueryOTAFirmwareResponseFirmwareInfo) *QueryOTAFirmwareResponse {
	s.FirmwareInfo = v
	return s
}

type QueryOTAFirmwareResponseFirmwareInfo struct {
	FirmwareName   *string `json:"FirmwareName,omitempty" xml:"FirmwareName,omitempty" require:"true"`
	FirmwareId     *string `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty" require:"true"`
	SrcVersion     *string `json:"SrcVersion,omitempty" xml:"SrcVersion,omitempty" require:"true"`
	DestVersion    *string `json:"DestVersion,omitempty" xml:"DestVersion,omitempty" require:"true"`
	UtcCreate      *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	UtcModified    *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty" require:"true"`
	Status         *int    `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	FirmwareDesc   *string `json:"FirmwareDesc,omitempty" xml:"FirmwareDesc,omitempty" require:"true"`
	FirmwareSign   *string `json:"FirmwareSign,omitempty" xml:"FirmwareSign,omitempty" require:"true"`
	FirmwareSize   *int    `json:"FirmwareSize,omitempty" xml:"FirmwareSize,omitempty" require:"true"`
	FirmwareUrl    *string `json:"FirmwareUrl,omitempty" xml:"FirmwareUrl,omitempty" require:"true"`
	ProductKey     *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	SignMethod     *string `json:"SignMethod,omitempty" xml:"SignMethod,omitempty" require:"true"`
	ProductName    *string `json:"ProductName,omitempty" xml:"ProductName,omitempty" require:"true"`
	Type           *int    `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	VerifyProgress *int    `json:"VerifyProgress,omitempty" xml:"VerifyProgress,omitempty" require:"true"`
	ModuleName     *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty" require:"true"`
}

func (s QueryOTAFirmwareResponseFirmwareInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAFirmwareResponseFirmwareInfo) GoString() string {
	return s.String()
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetFirmwareName(v string) *QueryOTAFirmwareResponseFirmwareInfo {
	s.FirmwareName = &v
	return s
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetFirmwareId(v string) *QueryOTAFirmwareResponseFirmwareInfo {
	s.FirmwareId = &v
	return s
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetSrcVersion(v string) *QueryOTAFirmwareResponseFirmwareInfo {
	s.SrcVersion = &v
	return s
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetDestVersion(v string) *QueryOTAFirmwareResponseFirmwareInfo {
	s.DestVersion = &v
	return s
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetUtcCreate(v string) *QueryOTAFirmwareResponseFirmwareInfo {
	s.UtcCreate = &v
	return s
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetUtcModified(v string) *QueryOTAFirmwareResponseFirmwareInfo {
	s.UtcModified = &v
	return s
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetStatus(v int) *QueryOTAFirmwareResponseFirmwareInfo {
	s.Status = &v
	return s
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetFirmwareDesc(v string) *QueryOTAFirmwareResponseFirmwareInfo {
	s.FirmwareDesc = &v
	return s
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetFirmwareSign(v string) *QueryOTAFirmwareResponseFirmwareInfo {
	s.FirmwareSign = &v
	return s
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetFirmwareSize(v int) *QueryOTAFirmwareResponseFirmwareInfo {
	s.FirmwareSize = &v
	return s
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetFirmwareUrl(v string) *QueryOTAFirmwareResponseFirmwareInfo {
	s.FirmwareUrl = &v
	return s
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetProductKey(v string) *QueryOTAFirmwareResponseFirmwareInfo {
	s.ProductKey = &v
	return s
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetSignMethod(v string) *QueryOTAFirmwareResponseFirmwareInfo {
	s.SignMethod = &v
	return s
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetProductName(v string) *QueryOTAFirmwareResponseFirmwareInfo {
	s.ProductName = &v
	return s
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetType(v int) *QueryOTAFirmwareResponseFirmwareInfo {
	s.Type = &v
	return s
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetVerifyProgress(v int) *QueryOTAFirmwareResponseFirmwareInfo {
	s.VerifyProgress = &v
	return s
}

func (s *QueryOTAFirmwareResponseFirmwareInfo) SetModuleName(v string) *QueryOTAFirmwareResponseFirmwareInfo {
	s.ModuleName = &v
	return s
}

type UnbindApplicationFromEdgeInstanceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	ApplicationId *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty" require:"true"`
}

func (s UnbindApplicationFromEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindApplicationFromEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *UnbindApplicationFromEdgeInstanceRequest) SetIotInstanceId(v string) *UnbindApplicationFromEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UnbindApplicationFromEdgeInstanceRequest) SetInstanceId(v string) *UnbindApplicationFromEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *UnbindApplicationFromEdgeInstanceRequest) SetApplicationId(v string) *UnbindApplicationFromEdgeInstanceRequest {
	s.ApplicationId = &v
	return s
}

type UnbindApplicationFromEdgeInstanceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UnbindApplicationFromEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindApplicationFromEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *UnbindApplicationFromEdgeInstanceResponse) SetRequestId(v string) *UnbindApplicationFromEdgeInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *UnbindApplicationFromEdgeInstanceResponse) SetSuccess(v bool) *UnbindApplicationFromEdgeInstanceResponse {
	s.Success = &v
	return s
}

func (s *UnbindApplicationFromEdgeInstanceResponse) SetCode(v string) *UnbindApplicationFromEdgeInstanceResponse {
	s.Code = &v
	return s
}

func (s *UnbindApplicationFromEdgeInstanceResponse) SetErrorMessage(v string) *UnbindApplicationFromEdgeInstanceResponse {
	s.ErrorMessage = &v
	return s
}

type BindApplicationToEdgeInstanceRequest struct {
	IotInstanceId      *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	ApplicationId      *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty" require:"true"`
	ApplicationVersion *string `json:"ApplicationVersion,omitempty" xml:"ApplicationVersion,omitempty" require:"true"`
}

func (s BindApplicationToEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s BindApplicationToEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *BindApplicationToEdgeInstanceRequest) SetIotInstanceId(v string) *BindApplicationToEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BindApplicationToEdgeInstanceRequest) SetInstanceId(v string) *BindApplicationToEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *BindApplicationToEdgeInstanceRequest) SetApplicationId(v string) *BindApplicationToEdgeInstanceRequest {
	s.ApplicationId = &v
	return s
}

func (s *BindApplicationToEdgeInstanceRequest) SetApplicationVersion(v string) *BindApplicationToEdgeInstanceRequest {
	s.ApplicationVersion = &v
	return s
}

type BindApplicationToEdgeInstanceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s BindApplicationToEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s BindApplicationToEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *BindApplicationToEdgeInstanceResponse) SetRequestId(v string) *BindApplicationToEdgeInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *BindApplicationToEdgeInstanceResponse) SetSuccess(v bool) *BindApplicationToEdgeInstanceResponse {
	s.Success = &v
	return s
}

func (s *BindApplicationToEdgeInstanceResponse) SetCode(v string) *BindApplicationToEdgeInstanceResponse {
	s.Code = &v
	return s
}

func (s *BindApplicationToEdgeInstanceResponse) SetErrorMessage(v string) *BindApplicationToEdgeInstanceResponse {
	s.ErrorMessage = &v
	return s
}

type QueryCertUrlByApplyIdRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ApplyId       *int64  `json:"ApplyId,omitempty" xml:"ApplyId,omitempty" require:"true"`
}

func (s QueryCertUrlByApplyIdRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCertUrlByApplyIdRequest) GoString() string {
	return s.String()
}

func (s *QueryCertUrlByApplyIdRequest) SetIotInstanceId(v string) *QueryCertUrlByApplyIdRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryCertUrlByApplyIdRequest) SetApplyId(v int64) *QueryCertUrlByApplyIdRequest {
	s.ApplyId = &v
	return s
}

type QueryCertUrlByApplyIdResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	CertUrl      *string `json:"CertUrl,omitempty" xml:"CertUrl,omitempty" require:"true"`
}

func (s QueryCertUrlByApplyIdResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCertUrlByApplyIdResponse) GoString() string {
	return s.String()
}

func (s *QueryCertUrlByApplyIdResponse) SetRequestId(v string) *QueryCertUrlByApplyIdResponse {
	s.RequestId = &v
	return s
}

func (s *QueryCertUrlByApplyIdResponse) SetSuccess(v bool) *QueryCertUrlByApplyIdResponse {
	s.Success = &v
	return s
}

func (s *QueryCertUrlByApplyIdResponse) SetCode(v string) *QueryCertUrlByApplyIdResponse {
	s.Code = &v
	return s
}

func (s *QueryCertUrlByApplyIdResponse) SetErrorMessage(v string) *QueryCertUrlByApplyIdResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryCertUrlByApplyIdResponse) SetCertUrl(v string) *QueryCertUrlByApplyIdResponse {
	s.CertUrl = &v
	return s
}

type QueryDeviceCertRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
}

func (s QueryDeviceCertRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceCertRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceCertRequest) SetIotInstanceId(v string) *QueryDeviceCertRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceCertRequest) SetProductKey(v string) *QueryDeviceCertRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceCertRequest) SetDeviceName(v string) *QueryDeviceCertRequest {
	s.DeviceName = &v
	return s
}

type QueryDeviceCertResponse struct {
	RequestId      *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success        *bool                                  `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code           *string                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage   *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	DeviceCertInfo *QueryDeviceCertResponseDeviceCertInfo `json:"DeviceCertInfo,omitempty" xml:"DeviceCertInfo,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceCertResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceCertResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceCertResponse) SetRequestId(v string) *QueryDeviceCertResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceCertResponse) SetSuccess(v bool) *QueryDeviceCertResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceCertResponse) SetCode(v string) *QueryDeviceCertResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceCertResponse) SetErrorMessage(v string) *QueryDeviceCertResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceCertResponse) SetDeviceCertInfo(v *QueryDeviceCertResponseDeviceCertInfo) *QueryDeviceCertResponse {
	s.DeviceCertInfo = v
	return s
}

type QueryDeviceCertResponseDeviceCertInfo struct {
	Status      *int    `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Certificate *string `json:"Certificate,omitempty" xml:"Certificate,omitempty" require:"true"`
	PrivateKey  *string `json:"PrivateKey,omitempty" xml:"PrivateKey,omitempty" require:"true"`
	CertSN      *string `json:"CertSN,omitempty" xml:"CertSN,omitempty" require:"true"`
}

func (s QueryDeviceCertResponseDeviceCertInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceCertResponseDeviceCertInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceCertResponseDeviceCertInfo) SetStatus(v int) *QueryDeviceCertResponseDeviceCertInfo {
	s.Status = &v
	return s
}

func (s *QueryDeviceCertResponseDeviceCertInfo) SetCertificate(v string) *QueryDeviceCertResponseDeviceCertInfo {
	s.Certificate = &v
	return s
}

func (s *QueryDeviceCertResponseDeviceCertInfo) SetPrivateKey(v string) *QueryDeviceCertResponseDeviceCertInfo {
	s.PrivateKey = &v
	return s
}

func (s *QueryDeviceCertResponseDeviceCertInfo) SetCertSN(v string) *QueryDeviceCertResponseDeviceCertInfo {
	s.CertSN = &v
	return s
}

type CloseEdgeInstanceDeploymentRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
}

func (s CloseEdgeInstanceDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s CloseEdgeInstanceDeploymentRequest) GoString() string {
	return s.String()
}

func (s *CloseEdgeInstanceDeploymentRequest) SetIotInstanceId(v string) *CloseEdgeInstanceDeploymentRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CloseEdgeInstanceDeploymentRequest) SetInstanceId(v string) *CloseEdgeInstanceDeploymentRequest {
	s.InstanceId = &v
	return s
}

type CloseEdgeInstanceDeploymentResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s CloseEdgeInstanceDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s CloseEdgeInstanceDeploymentResponse) GoString() string {
	return s.String()
}

func (s *CloseEdgeInstanceDeploymentResponse) SetRequestId(v string) *CloseEdgeInstanceDeploymentResponse {
	s.RequestId = &v
	return s
}

func (s *CloseEdgeInstanceDeploymentResponse) SetSuccess(v bool) *CloseEdgeInstanceDeploymentResponse {
	s.Success = &v
	return s
}

func (s *CloseEdgeInstanceDeploymentResponse) SetCode(v string) *CloseEdgeInstanceDeploymentResponse {
	s.Code = &v
	return s
}

func (s *CloseEdgeInstanceDeploymentResponse) SetErrorMessage(v string) *CloseEdgeInstanceDeploymentResponse {
	s.ErrorMessage = &v
	return s
}

type UnbindDriverFromEdgeInstanceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
}

func (s UnbindDriverFromEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindDriverFromEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *UnbindDriverFromEdgeInstanceRequest) SetIotInstanceId(v string) *UnbindDriverFromEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UnbindDriverFromEdgeInstanceRequest) SetInstanceId(v string) *UnbindDriverFromEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *UnbindDriverFromEdgeInstanceRequest) SetDriverId(v string) *UnbindDriverFromEdgeInstanceRequest {
	s.DriverId = &v
	return s
}

type UnbindDriverFromEdgeInstanceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UnbindDriverFromEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindDriverFromEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *UnbindDriverFromEdgeInstanceResponse) SetRequestId(v string) *UnbindDriverFromEdgeInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *UnbindDriverFromEdgeInstanceResponse) SetSuccess(v bool) *UnbindDriverFromEdgeInstanceResponse {
	s.Success = &v
	return s
}

func (s *UnbindDriverFromEdgeInstanceResponse) SetCode(v string) *UnbindDriverFromEdgeInstanceResponse {
	s.Code = &v
	return s
}

func (s *UnbindDriverFromEdgeInstanceResponse) SetErrorMessage(v string) *UnbindDriverFromEdgeInstanceResponse {
	s.ErrorMessage = &v
	return s
}

type ReplaceEdgeInstanceGatewayRequest struct {
	IotInstanceId    *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	CurrentGatewayId *string `json:"CurrentGatewayId,omitempty" xml:"CurrentGatewayId,omitempty" require:"true"`
	NewGatewayId     *string `json:"NewGatewayId,omitempty" xml:"NewGatewayId,omitempty" require:"true"`
}

func (s ReplaceEdgeInstanceGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s ReplaceEdgeInstanceGatewayRequest) GoString() string {
	return s.String()
}

func (s *ReplaceEdgeInstanceGatewayRequest) SetIotInstanceId(v string) *ReplaceEdgeInstanceGatewayRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ReplaceEdgeInstanceGatewayRequest) SetInstanceId(v string) *ReplaceEdgeInstanceGatewayRequest {
	s.InstanceId = &v
	return s
}

func (s *ReplaceEdgeInstanceGatewayRequest) SetCurrentGatewayId(v string) *ReplaceEdgeInstanceGatewayRequest {
	s.CurrentGatewayId = &v
	return s
}

func (s *ReplaceEdgeInstanceGatewayRequest) SetNewGatewayId(v string) *ReplaceEdgeInstanceGatewayRequest {
	s.NewGatewayId = &v
	return s
}

type ReplaceEdgeInstanceGatewayResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s ReplaceEdgeInstanceGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s ReplaceEdgeInstanceGatewayResponse) GoString() string {
	return s.String()
}

func (s *ReplaceEdgeInstanceGatewayResponse) SetRequestId(v string) *ReplaceEdgeInstanceGatewayResponse {
	s.RequestId = &v
	return s
}

func (s *ReplaceEdgeInstanceGatewayResponse) SetSuccess(v bool) *ReplaceEdgeInstanceGatewayResponse {
	s.Success = &v
	return s
}

func (s *ReplaceEdgeInstanceGatewayResponse) SetCode(v string) *ReplaceEdgeInstanceGatewayResponse {
	s.Code = &v
	return s
}

func (s *ReplaceEdgeInstanceGatewayResponse) SetErrorMessage(v string) *ReplaceEdgeInstanceGatewayResponse {
	s.ErrorMessage = &v
	return s
}

type BindDriverToEdgeInstanceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	DriverVersion *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty"`
	OrderId       *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s BindDriverToEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s BindDriverToEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *BindDriverToEdgeInstanceRequest) SetIotInstanceId(v string) *BindDriverToEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BindDriverToEdgeInstanceRequest) SetInstanceId(v string) *BindDriverToEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *BindDriverToEdgeInstanceRequest) SetDriverId(v string) *BindDriverToEdgeInstanceRequest {
	s.DriverId = &v
	return s
}

func (s *BindDriverToEdgeInstanceRequest) SetDriverVersion(v string) *BindDriverToEdgeInstanceRequest {
	s.DriverVersion = &v
	return s
}

func (s *BindDriverToEdgeInstanceRequest) SetOrderId(v string) *BindDriverToEdgeInstanceRequest {
	s.OrderId = &v
	return s
}

type BindDriverToEdgeInstanceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s BindDriverToEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s BindDriverToEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *BindDriverToEdgeInstanceResponse) SetRequestId(v string) *BindDriverToEdgeInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *BindDriverToEdgeInstanceResponse) SetSuccess(v bool) *BindDriverToEdgeInstanceResponse {
	s.Success = &v
	return s
}

func (s *BindDriverToEdgeInstanceResponse) SetCode(v string) *BindDriverToEdgeInstanceResponse {
	s.Code = &v
	return s
}

func (s *BindDriverToEdgeInstanceResponse) SetErrorMessage(v string) *BindDriverToEdgeInstanceResponse {
	s.ErrorMessage = &v
	return s
}

type BatchQueryDeviceDetailRequest struct {
	DeviceName    []*string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true" type:"Repeated"`
	ProductKey    *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
}

func (s BatchQueryDeviceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchQueryDeviceDetailRequest) GoString() string {
	return s.String()
}

func (s *BatchQueryDeviceDetailRequest) SetDeviceName(v []*string) *BatchQueryDeviceDetailRequest {
	s.DeviceName = v
	return s
}

func (s *BatchQueryDeviceDetailRequest) SetProductKey(v string) *BatchQueryDeviceDetailRequest {
	s.ProductKey = &v
	return s
}

func (s *BatchQueryDeviceDetailRequest) SetIotInstanceId(v string) *BatchQueryDeviceDetailRequest {
	s.IotInstanceId = &v
	return s
}

type BatchQueryDeviceDetailResponse struct {
	RequestId    *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                               `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                             `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *BatchQueryDeviceDetailResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s BatchQueryDeviceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchQueryDeviceDetailResponse) GoString() string {
	return s.String()
}

func (s *BatchQueryDeviceDetailResponse) SetRequestId(v string) *BatchQueryDeviceDetailResponse {
	s.RequestId = &v
	return s
}

func (s *BatchQueryDeviceDetailResponse) SetSuccess(v bool) *BatchQueryDeviceDetailResponse {
	s.Success = &v
	return s
}

func (s *BatchQueryDeviceDetailResponse) SetCode(v string) *BatchQueryDeviceDetailResponse {
	s.Code = &v
	return s
}

func (s *BatchQueryDeviceDetailResponse) SetErrorMessage(v string) *BatchQueryDeviceDetailResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchQueryDeviceDetailResponse) SetData(v *BatchQueryDeviceDetailResponseData) *BatchQueryDeviceDetailResponse {
	s.Data = v
	return s
}

type BatchQueryDeviceDetailResponseData struct {
	Data []*BatchQueryDeviceDetailResponseDataData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s BatchQueryDeviceDetailResponseData) String() string {
	return tea.Prettify(s)
}

func (s BatchQueryDeviceDetailResponseData) GoString() string {
	return s.String()
}

func (s *BatchQueryDeviceDetailResponseData) SetData(v []*BatchQueryDeviceDetailResponseDataData) *BatchQueryDeviceDetailResponseData {
	s.Data = v
	return s
}

type BatchQueryDeviceDetailResponseDataData struct {
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ProductName     *string `json:"ProductName,omitempty" xml:"ProductName,omitempty" require:"true"`
	DeviceName      *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	Nickname        *string `json:"Nickname,omitempty" xml:"Nickname,omitempty" require:"true"`
	DeviceSecret    *string `json:"DeviceSecret,omitempty" xml:"DeviceSecret,omitempty" require:"true"`
	IotId           *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	UtcCreate       *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	GmtCreate       *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	UtcActive       *string `json:"UtcActive,omitempty" xml:"UtcActive,omitempty" require:"true"`
	GmtActive       *string `json:"GmtActive,omitempty" xml:"GmtActive,omitempty" require:"true"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	FirmwareVersion *string `json:"FirmwareVersion,omitempty" xml:"FirmwareVersion,omitempty" require:"true"`
	NodeType        *int    `json:"NodeType,omitempty" xml:"NodeType,omitempty" require:"true"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
}

func (s BatchQueryDeviceDetailResponseDataData) String() string {
	return tea.Prettify(s)
}

func (s BatchQueryDeviceDetailResponseDataData) GoString() string {
	return s.String()
}

func (s *BatchQueryDeviceDetailResponseDataData) SetProductKey(v string) *BatchQueryDeviceDetailResponseDataData {
	s.ProductKey = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseDataData) SetProductName(v string) *BatchQueryDeviceDetailResponseDataData {
	s.ProductName = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseDataData) SetDeviceName(v string) *BatchQueryDeviceDetailResponseDataData {
	s.DeviceName = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseDataData) SetNickname(v string) *BatchQueryDeviceDetailResponseDataData {
	s.Nickname = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseDataData) SetDeviceSecret(v string) *BatchQueryDeviceDetailResponseDataData {
	s.DeviceSecret = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseDataData) SetIotId(v string) *BatchQueryDeviceDetailResponseDataData {
	s.IotId = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseDataData) SetUtcCreate(v string) *BatchQueryDeviceDetailResponseDataData {
	s.UtcCreate = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseDataData) SetGmtCreate(v string) *BatchQueryDeviceDetailResponseDataData {
	s.GmtCreate = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseDataData) SetUtcActive(v string) *BatchQueryDeviceDetailResponseDataData {
	s.UtcActive = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseDataData) SetGmtActive(v string) *BatchQueryDeviceDetailResponseDataData {
	s.GmtActive = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseDataData) SetStatus(v string) *BatchQueryDeviceDetailResponseDataData {
	s.Status = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseDataData) SetFirmwareVersion(v string) *BatchQueryDeviceDetailResponseDataData {
	s.FirmwareVersion = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseDataData) SetNodeType(v int) *BatchQueryDeviceDetailResponseDataData {
	s.NodeType = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseDataData) SetRegion(v string) *BatchQueryDeviceDetailResponseDataData {
	s.Region = &v
	return s
}

type GetEdgeInstanceDeploymentRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	DeploymentId  *string `json:"DeploymentId,omitempty" xml:"DeploymentId,omitempty" require:"true"`
}

func (s GetEdgeInstanceDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceDeploymentRequest) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceDeploymentRequest) SetIotInstanceId(v string) *GetEdgeInstanceDeploymentRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetEdgeInstanceDeploymentRequest) SetInstanceId(v string) *GetEdgeInstanceDeploymentRequest {
	s.InstanceId = &v
	return s
}

func (s *GetEdgeInstanceDeploymentRequest) SetDeploymentId(v string) *GetEdgeInstanceDeploymentRequest {
	s.DeploymentId = &v
	return s
}

type GetEdgeInstanceDeploymentResponse struct {
	RequestId    *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                  `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *GetEdgeInstanceDeploymentResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetEdgeInstanceDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceDeploymentResponse) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceDeploymentResponse) SetRequestId(v string) *GetEdgeInstanceDeploymentResponse {
	s.RequestId = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponse) SetSuccess(v bool) *GetEdgeInstanceDeploymentResponse {
	s.Success = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponse) SetCode(v string) *GetEdgeInstanceDeploymentResponse {
	s.Code = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponse) SetErrorMessage(v string) *GetEdgeInstanceDeploymentResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponse) SetData(v *GetEdgeInstanceDeploymentResponseData) *GetEdgeInstanceDeploymentResponse {
	s.Data = v
	return s
}

type GetEdgeInstanceDeploymentResponseData struct {
	GmtCreate             *string                                          `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModified           *string                                          `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
	GmtCompleted          *string                                          `json:"GmtCompleted,omitempty" xml:"GmtCompleted,omitempty" require:"true"`
	DeploymentId          *string                                          `json:"DeploymentId,omitempty" xml:"DeploymentId,omitempty" require:"true"`
	Description           *string                                          `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Status                *int                                             `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Type                  *string                                          `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	GmtCreateTimestamp    *int64                                           `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty" require:"true"`
	GmtModifiedTimestamp  *int64                                           `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty" require:"true"`
	GmtCompletedTimestamp *int64                                           `json:"GmtCompletedTimestamp,omitempty" xml:"GmtCompletedTimestamp,omitempty" require:"true"`
	TaskList              []*GetEdgeInstanceDeploymentResponseDataTaskList `json:"TaskList,omitempty" xml:"TaskList,omitempty" require:"true" type:"Repeated"`
}

func (s GetEdgeInstanceDeploymentResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceDeploymentResponseData) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceDeploymentResponseData) SetGmtCreate(v string) *GetEdgeInstanceDeploymentResponseData {
	s.GmtCreate = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseData) SetGmtModified(v string) *GetEdgeInstanceDeploymentResponseData {
	s.GmtModified = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseData) SetGmtCompleted(v string) *GetEdgeInstanceDeploymentResponseData {
	s.GmtCompleted = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseData) SetDeploymentId(v string) *GetEdgeInstanceDeploymentResponseData {
	s.DeploymentId = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseData) SetDescription(v string) *GetEdgeInstanceDeploymentResponseData {
	s.Description = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseData) SetStatus(v int) *GetEdgeInstanceDeploymentResponseData {
	s.Status = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseData) SetType(v string) *GetEdgeInstanceDeploymentResponseData {
	s.Type = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseData) SetGmtCreateTimestamp(v int64) *GetEdgeInstanceDeploymentResponseData {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseData) SetGmtModifiedTimestamp(v int64) *GetEdgeInstanceDeploymentResponseData {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseData) SetGmtCompletedTimestamp(v int64) *GetEdgeInstanceDeploymentResponseData {
	s.GmtCompletedTimestamp = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseData) SetTaskList(v []*GetEdgeInstanceDeploymentResponseDataTaskList) *GetEdgeInstanceDeploymentResponseData {
	s.TaskList = v
	return s
}

type GetEdgeInstanceDeploymentResponseDataTaskList struct {
	GmtCreate             *string                                                              `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModified           *string                                                              `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
	GmtCompleted          *string                                                              `json:"GmtCompleted,omitempty" xml:"GmtCompleted,omitempty" require:"true"`
	GatewayId             *string                                                              `json:"GatewayId,omitempty" xml:"GatewayId,omitempty" require:"true"`
	TaskId                *string                                                              `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	Stage                 *int                                                                 `json:"Stage,omitempty" xml:"Stage,omitempty" require:"true"`
	Status                *int                                                                 `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	GmtCreateTimestamp    *int64                                                               `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty" require:"true"`
	GmtModifiedTimestamp  *int64                                                               `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty" require:"true"`
	GmtCompletedTimestamp *int64                                                               `json:"GmtCompletedTimestamp,omitempty" xml:"GmtCompletedTimestamp,omitempty" require:"true"`
	ResourceSnapshotList  []*GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList `json:"ResourceSnapshotList,omitempty" xml:"ResourceSnapshotList,omitempty" require:"true" type:"Repeated"`
}

func (s GetEdgeInstanceDeploymentResponseDataTaskList) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceDeploymentResponseDataTaskList) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskList) SetGmtCreate(v string) *GetEdgeInstanceDeploymentResponseDataTaskList {
	s.GmtCreate = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskList) SetGmtModified(v string) *GetEdgeInstanceDeploymentResponseDataTaskList {
	s.GmtModified = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskList) SetGmtCompleted(v string) *GetEdgeInstanceDeploymentResponseDataTaskList {
	s.GmtCompleted = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskList) SetGatewayId(v string) *GetEdgeInstanceDeploymentResponseDataTaskList {
	s.GatewayId = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskList) SetTaskId(v string) *GetEdgeInstanceDeploymentResponseDataTaskList {
	s.TaskId = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskList) SetStage(v int) *GetEdgeInstanceDeploymentResponseDataTaskList {
	s.Stage = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskList) SetStatus(v int) *GetEdgeInstanceDeploymentResponseDataTaskList {
	s.Status = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskList) SetGmtCreateTimestamp(v int64) *GetEdgeInstanceDeploymentResponseDataTaskList {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskList) SetGmtModifiedTimestamp(v int64) *GetEdgeInstanceDeploymentResponseDataTaskList {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskList) SetGmtCompletedTimestamp(v int64) *GetEdgeInstanceDeploymentResponseDataTaskList {
	s.GmtCompletedTimestamp = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskList) SetResourceSnapshotList(v []*GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) *GetEdgeInstanceDeploymentResponseDataTaskList {
	s.ResourceSnapshotList = v
	return s
}

type GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList struct {
	GmtCreate             *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModified           *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
	GmtCompleted          *string `json:"GmtCompleted,omitempty" xml:"GmtCompleted,omitempty" require:"true"`
	SnapshotId            *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty" require:"true"`
	ResourceType          *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	ResourceId            *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true"`
	ResourceName          *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty" require:"true"`
	OperateType           *int    `json:"OperateType,omitempty" xml:"OperateType,omitempty" require:"true"`
	Stage                 *int    `json:"Stage,omitempty" xml:"Stage,omitempty" require:"true"`
	Status                *int    `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Log                   *string `json:"Log,omitempty" xml:"Log,omitempty" require:"true"`
	GmtCreateTimestamp    *int64  `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty" require:"true"`
	GmtModifiedTimestamp  *int64  `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty" require:"true"`
	GmtCompletedTimestamp *int64  `json:"GmtCompletedTimestamp,omitempty" xml:"GmtCompletedTimestamp,omitempty" require:"true"`
}

func (s GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) SetGmtCreate(v string) *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList {
	s.GmtCreate = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) SetGmtModified(v string) *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList {
	s.GmtModified = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) SetGmtCompleted(v string) *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList {
	s.GmtCompleted = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) SetSnapshotId(v string) *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList {
	s.SnapshotId = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) SetResourceType(v string) *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList {
	s.ResourceType = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) SetResourceId(v string) *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList {
	s.ResourceId = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) SetResourceName(v string) *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList {
	s.ResourceName = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) SetOperateType(v int) *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList {
	s.OperateType = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) SetStage(v int) *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList {
	s.Stage = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) SetStatus(v int) *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList {
	s.Status = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) SetLog(v string) *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList {
	s.Log = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) SetGmtCreateTimestamp(v int64) *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) SetGmtModifiedTimestamp(v int64) *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList) SetGmtCompletedTimestamp(v int64) *GetEdgeInstanceDeploymentResponseDataTaskListResourceSnapshotList {
	s.GmtCompletedTimestamp = &v
	return s
}

type QueryTaskRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	TaskId        *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
}

func (s QueryTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTaskRequest) GoString() string {
	return s.String()
}

func (s *QueryTaskRequest) SetIotInstanceId(v string) *QueryTaskRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryTaskRequest) SetTaskId(v string) *QueryTaskRequest {
	s.TaskId = &v
	return s
}

type QueryTaskResponse struct {
	RequestId    *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                  `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryTaskResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTaskResponse) GoString() string {
	return s.String()
}

func (s *QueryTaskResponse) SetRequestId(v string) *QueryTaskResponse {
	s.RequestId = &v
	return s
}

func (s *QueryTaskResponse) SetSuccess(v bool) *QueryTaskResponse {
	s.Success = &v
	return s
}

func (s *QueryTaskResponse) SetCode(v string) *QueryTaskResponse {
	s.Code = &v
	return s
}

func (s *QueryTaskResponse) SetErrorMessage(v string) *QueryTaskResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryTaskResponse) SetData(v *QueryTaskResponseData) *QueryTaskResponse {
	s.Data = v
	return s
}

type QueryTaskResponseData struct {
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty" require:"true"`
	JobName      *string `json:"JobName,omitempty" xml:"JobName,omitempty" require:"true"`
	TaskId       *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	IotId        *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty" require:"true"`
	UtcQueueTime *string `json:"UtcQueueTime,omitempty" xml:"UtcQueueTime,omitempty" require:"true"`
	UtcModified  *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty" require:"true"`
	StatusDetail *string `json:"StatusDetail,omitempty" xml:"StatusDetail,omitempty" require:"true"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Message      *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
}

func (s QueryTaskResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryTaskResponseData) GoString() string {
	return s.String()
}

func (s *QueryTaskResponseData) SetJobId(v string) *QueryTaskResponseData {
	s.JobId = &v
	return s
}

func (s *QueryTaskResponseData) SetJobName(v string) *QueryTaskResponseData {
	s.JobName = &v
	return s
}

func (s *QueryTaskResponseData) SetTaskId(v string) *QueryTaskResponseData {
	s.TaskId = &v
	return s
}

func (s *QueryTaskResponseData) SetProductKey(v string) *QueryTaskResponseData {
	s.ProductKey = &v
	return s
}

func (s *QueryTaskResponseData) SetDeviceName(v string) *QueryTaskResponseData {
	s.DeviceName = &v
	return s
}

func (s *QueryTaskResponseData) SetIotId(v string) *QueryTaskResponseData {
	s.IotId = &v
	return s
}

func (s *QueryTaskResponseData) SetProgress(v string) *QueryTaskResponseData {
	s.Progress = &v
	return s
}

func (s *QueryTaskResponseData) SetUtcQueueTime(v string) *QueryTaskResponseData {
	s.UtcQueueTime = &v
	return s
}

func (s *QueryTaskResponseData) SetUtcModified(v string) *QueryTaskResponseData {
	s.UtcModified = &v
	return s
}

func (s *QueryTaskResponseData) SetStatusDetail(v string) *QueryTaskResponseData {
	s.StatusDetail = &v
	return s
}

func (s *QueryTaskResponseData) SetStatus(v string) *QueryTaskResponseData {
	s.Status = &v
	return s
}

func (s *QueryTaskResponseData) SetMessage(v string) *QueryTaskResponseData {
	s.Message = &v
	return s
}

type CreateDataAPIServiceRequest struct {
	DisplayName   *string                                     `json:"DisplayName,omitempty" xml:"DisplayName,omitempty" require:"true"`
	OriginSql     *string                                     `json:"OriginSql,omitempty" xml:"OriginSql,omitempty" require:"true"`
	RequestParam  []*CreateDataAPIServiceRequestRequestParam  `json:"RequestParam,omitempty" xml:"RequestParam,omitempty" type:"Repeated"`
	Desc          *string                                     `json:"Desc,omitempty" xml:"Desc,omitempty"`
	ResponseParam []*CreateDataAPIServiceRequestResponseParam `json:"ResponseParam,omitempty" xml:"ResponseParam,omitempty" type:"Repeated"`
	TemplateSql   *string                                     `json:"TemplateSql,omitempty" xml:"TemplateSql,omitempty" require:"true"`
	ApiPath       *string                                     `json:"ApiPath,omitempty" xml:"ApiPath,omitempty" require:"true"`
	IotInstanceId *string                                     `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
}

func (s CreateDataAPIServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataAPIServiceRequest) GoString() string {
	return s.String()
}

func (s *CreateDataAPIServiceRequest) SetDisplayName(v string) *CreateDataAPIServiceRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateDataAPIServiceRequest) SetOriginSql(v string) *CreateDataAPIServiceRequest {
	s.OriginSql = &v
	return s
}

func (s *CreateDataAPIServiceRequest) SetRequestParam(v []*CreateDataAPIServiceRequestRequestParam) *CreateDataAPIServiceRequest {
	s.RequestParam = v
	return s
}

func (s *CreateDataAPIServiceRequest) SetDesc(v string) *CreateDataAPIServiceRequest {
	s.Desc = &v
	return s
}

func (s *CreateDataAPIServiceRequest) SetResponseParam(v []*CreateDataAPIServiceRequestResponseParam) *CreateDataAPIServiceRequest {
	s.ResponseParam = v
	return s
}

func (s *CreateDataAPIServiceRequest) SetTemplateSql(v string) *CreateDataAPIServiceRequest {
	s.TemplateSql = &v
	return s
}

func (s *CreateDataAPIServiceRequest) SetApiPath(v string) *CreateDataAPIServiceRequest {
	s.ApiPath = &v
	return s
}

func (s *CreateDataAPIServiceRequest) SetIotInstanceId(v string) *CreateDataAPIServiceRequest {
	s.IotInstanceId = &v
	return s
}

type CreateDataAPIServiceRequestRequestParam struct {
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Desc     *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Example  *string `json:"Example,omitempty" xml:"Example,omitempty"`
	Required *bool   `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s CreateDataAPIServiceRequestRequestParam) String() string {
	return tea.Prettify(s)
}

func (s CreateDataAPIServiceRequestRequestParam) GoString() string {
	return s.String()
}

func (s *CreateDataAPIServiceRequestRequestParam) SetName(v string) *CreateDataAPIServiceRequestRequestParam {
	s.Name = &v
	return s
}

func (s *CreateDataAPIServiceRequestRequestParam) SetType(v string) *CreateDataAPIServiceRequestRequestParam {
	s.Type = &v
	return s
}

func (s *CreateDataAPIServiceRequestRequestParam) SetDesc(v string) *CreateDataAPIServiceRequestRequestParam {
	s.Desc = &v
	return s
}

func (s *CreateDataAPIServiceRequestRequestParam) SetExample(v string) *CreateDataAPIServiceRequestRequestParam {
	s.Example = &v
	return s
}

func (s *CreateDataAPIServiceRequestRequestParam) SetRequired(v bool) *CreateDataAPIServiceRequestRequestParam {
	s.Required = &v
	return s
}

type CreateDataAPIServiceRequestResponseParam struct {
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Desc     *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Example  *string `json:"Example,omitempty" xml:"Example,omitempty"`
	Required *bool   `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s CreateDataAPIServiceRequestResponseParam) String() string {
	return tea.Prettify(s)
}

func (s CreateDataAPIServiceRequestResponseParam) GoString() string {
	return s.String()
}

func (s *CreateDataAPIServiceRequestResponseParam) SetName(v string) *CreateDataAPIServiceRequestResponseParam {
	s.Name = &v
	return s
}

func (s *CreateDataAPIServiceRequestResponseParam) SetType(v string) *CreateDataAPIServiceRequestResponseParam {
	s.Type = &v
	return s
}

func (s *CreateDataAPIServiceRequestResponseParam) SetDesc(v string) *CreateDataAPIServiceRequestResponseParam {
	s.Desc = &v
	return s
}

func (s *CreateDataAPIServiceRequestResponseParam) SetExample(v string) *CreateDataAPIServiceRequestResponseParam {
	s.Example = &v
	return s
}

func (s *CreateDataAPIServiceRequestResponseParam) SetRequired(v bool) *CreateDataAPIServiceRequestResponseParam {
	s.Required = &v
	return s
}

type CreateDataAPIServiceResponse struct {
	RequestId    *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                             `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                           `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *CreateDataAPIServiceResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s CreateDataAPIServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataAPIServiceResponse) GoString() string {
	return s.String()
}

func (s *CreateDataAPIServiceResponse) SetRequestId(v string) *CreateDataAPIServiceResponse {
	s.RequestId = &v
	return s
}

func (s *CreateDataAPIServiceResponse) SetSuccess(v bool) *CreateDataAPIServiceResponse {
	s.Success = &v
	return s
}

func (s *CreateDataAPIServiceResponse) SetCode(v string) *CreateDataAPIServiceResponse {
	s.Code = &v
	return s
}

func (s *CreateDataAPIServiceResponse) SetErrorMessage(v string) *CreateDataAPIServiceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateDataAPIServiceResponse) SetData(v *CreateDataAPIServiceResponseData) *CreateDataAPIServiceResponse {
	s.Data = v
	return s
}

type CreateDataAPIServiceResponseData struct {
	ApiSrn         *string `json:"ApiSrn,omitempty" xml:"ApiSrn,omitempty" require:"true"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	LastUpdateTime *int64  `json:"LastUpdateTime,omitempty" xml:"LastUpdateTime,omitempty" require:"true"`
}

func (s CreateDataAPIServiceResponseData) String() string {
	return tea.Prettify(s)
}

func (s CreateDataAPIServiceResponseData) GoString() string {
	return s.String()
}

func (s *CreateDataAPIServiceResponseData) SetApiSrn(v string) *CreateDataAPIServiceResponseData {
	s.ApiSrn = &v
	return s
}

func (s *CreateDataAPIServiceResponseData) SetCreateTime(v int64) *CreateDataAPIServiceResponseData {
	s.CreateTime = &v
	return s
}

func (s *CreateDataAPIServiceResponseData) SetLastUpdateTime(v int64) *CreateDataAPIServiceResponseData {
	s.LastUpdateTime = &v
	return s
}

type GetDataAPIServiceDetailRequest struct {
	ApiSrn        *string `json:"ApiSrn,omitempty" xml:"ApiSrn,omitempty" require:"true"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
}

func (s GetDataAPIServiceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailRequest) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailRequest) SetApiSrn(v string) *GetDataAPIServiceDetailRequest {
	s.ApiSrn = &v
	return s
}

func (s *GetDataAPIServiceDetailRequest) SetIotInstanceId(v string) *GetDataAPIServiceDetailRequest {
	s.IotInstanceId = &v
	return s
}

type GetDataAPIServiceDetailResponse struct {
	RequestId    *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *GetDataAPIServiceDetailResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetDataAPIServiceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailResponse) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailResponse) SetRequestId(v string) *GetDataAPIServiceDetailResponse {
	s.RequestId = &v
	return s
}

func (s *GetDataAPIServiceDetailResponse) SetSuccess(v bool) *GetDataAPIServiceDetailResponse {
	s.Success = &v
	return s
}

func (s *GetDataAPIServiceDetailResponse) SetCode(v string) *GetDataAPIServiceDetailResponse {
	s.Code = &v
	return s
}

func (s *GetDataAPIServiceDetailResponse) SetErrorMessage(v string) *GetDataAPIServiceDetailResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetDataAPIServiceDetailResponse) SetData(v *GetDataAPIServiceDetailResponseData) *GetDataAPIServiceDetailResponse {
	s.Data = v
	return s
}

type GetDataAPIServiceDetailResponseData struct {
	ApiSrn          *string                                            `json:"ApiSrn,omitempty" xml:"ApiSrn,omitempty" require:"true"`
	Status          *int                                               `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	DisplayName     *string                                            `json:"DisplayName,omitempty" xml:"DisplayName,omitempty" require:"true"`
	ApiPath         *string                                            `json:"ApiPath,omitempty" xml:"ApiPath,omitempty" require:"true"`
	CreateTime      *int64                                             `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	LastUpdateTime  *int64                                             `json:"LastUpdateTime,omitempty" xml:"LastUpdateTime,omitempty" require:"true"`
	DateFormat      *string                                            `json:"DateFormat,omitempty" xml:"DateFormat,omitempty" require:"true"`
	RequestMethod   *string                                            `json:"RequestMethod,omitempty" xml:"RequestMethod,omitempty" require:"true"`
	RequestProtocol *string                                            `json:"RequestProtocol,omitempty" xml:"RequestProtocol,omitempty" require:"true"`
	Description     *string                                            `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	SqlTemplateDTO  *GetDataAPIServiceDetailResponseDataSqlTemplateDTO `json:"SqlTemplateDTO,omitempty" xml:"SqlTemplateDTO,omitempty" require:"true" type:"Struct"`
}

func (s GetDataAPIServiceDetailResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailResponseData) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailResponseData) SetApiSrn(v string) *GetDataAPIServiceDetailResponseData {
	s.ApiSrn = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseData) SetStatus(v int) *GetDataAPIServiceDetailResponseData {
	s.Status = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseData) SetDisplayName(v string) *GetDataAPIServiceDetailResponseData {
	s.DisplayName = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseData) SetApiPath(v string) *GetDataAPIServiceDetailResponseData {
	s.ApiPath = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseData) SetCreateTime(v int64) *GetDataAPIServiceDetailResponseData {
	s.CreateTime = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseData) SetLastUpdateTime(v int64) *GetDataAPIServiceDetailResponseData {
	s.LastUpdateTime = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseData) SetDateFormat(v string) *GetDataAPIServiceDetailResponseData {
	s.DateFormat = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseData) SetRequestMethod(v string) *GetDataAPIServiceDetailResponseData {
	s.RequestMethod = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseData) SetRequestProtocol(v string) *GetDataAPIServiceDetailResponseData {
	s.RequestProtocol = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseData) SetDescription(v string) *GetDataAPIServiceDetailResponseData {
	s.Description = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseData) SetSqlTemplateDTO(v *GetDataAPIServiceDetailResponseDataSqlTemplateDTO) *GetDataAPIServiceDetailResponseData {
	s.SqlTemplateDTO = v
	return s
}

type GetDataAPIServiceDetailResponseDataSqlTemplateDTO struct {
	OriginSql      *string                                                          `json:"OriginSql,omitempty" xml:"OriginSql,omitempty" require:"true"`
	TemplateSql    *string                                                          `json:"TemplateSql,omitempty" xml:"TemplateSql,omitempty" require:"true"`
	RequestParams  *GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParams  `json:"RequestParams,omitempty" xml:"RequestParams,omitempty" require:"true" type:"Struct"`
	ResponseParams *GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParams `json:"ResponseParams,omitempty" xml:"ResponseParams,omitempty" require:"true" type:"Struct"`
}

func (s GetDataAPIServiceDetailResponseDataSqlTemplateDTO) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailResponseDataSqlTemplateDTO) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailResponseDataSqlTemplateDTO) SetOriginSql(v string) *GetDataAPIServiceDetailResponseDataSqlTemplateDTO {
	s.OriginSql = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseDataSqlTemplateDTO) SetTemplateSql(v string) *GetDataAPIServiceDetailResponseDataSqlTemplateDTO {
	s.TemplateSql = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseDataSqlTemplateDTO) SetRequestParams(v *GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParams) *GetDataAPIServiceDetailResponseDataSqlTemplateDTO {
	s.RequestParams = v
	return s
}

func (s *GetDataAPIServiceDetailResponseDataSqlTemplateDTO) SetResponseParams(v *GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParams) *GetDataAPIServiceDetailResponseDataSqlTemplateDTO {
	s.ResponseParams = v
	return s
}

type GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParams struct {
	RequestParams []*GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParamsRequestParams `json:"RequestParams,omitempty" xml:"RequestParams,omitempty" require:"true" type:"Repeated"`
}

func (s GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParams) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParams) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParams) SetRequestParams(v []*GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParamsRequestParams) *GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParams {
	s.RequestParams = v
	return s
}

type GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParamsRequestParams struct {
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Desc     *string `json:"Desc,omitempty" xml:"Desc,omitempty" require:"true"`
	Example  *string `json:"Example,omitempty" xml:"Example,omitempty" require:"true"`
	Required *bool   `json:"Required,omitempty" xml:"Required,omitempty" require:"true"`
}

func (s GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParamsRequestParams) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParamsRequestParams) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParamsRequestParams) SetName(v string) *GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParamsRequestParams {
	s.Name = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParamsRequestParams) SetType(v string) *GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParamsRequestParams {
	s.Type = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParamsRequestParams) SetDesc(v string) *GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParamsRequestParams {
	s.Desc = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParamsRequestParams) SetExample(v string) *GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParamsRequestParams {
	s.Example = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParamsRequestParams) SetRequired(v bool) *GetDataAPIServiceDetailResponseDataSqlTemplateDTORequestParamsRequestParams {
	s.Required = &v
	return s
}

type GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParams struct {
	ResponseParams []*GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParamsResponseParams `json:"ResponseParams,omitempty" xml:"ResponseParams,omitempty" require:"true" type:"Repeated"`
}

func (s GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParams) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParams) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParams) SetResponseParams(v []*GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParamsResponseParams) *GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParams {
	s.ResponseParams = v
	return s
}

type GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParamsResponseParams struct {
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Desc     *string `json:"Desc,omitempty" xml:"Desc,omitempty" require:"true"`
	Example  *string `json:"Example,omitempty" xml:"Example,omitempty" require:"true"`
	Required *bool   `json:"Required,omitempty" xml:"Required,omitempty" require:"true"`
}

func (s GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParamsResponseParams) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParamsResponseParams) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParamsResponseParams) SetName(v string) *GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParamsResponseParams {
	s.Name = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParamsResponseParams) SetType(v string) *GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParamsResponseParams {
	s.Type = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParamsResponseParams) SetDesc(v string) *GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParamsResponseParams {
	s.Desc = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParamsResponseParams) SetExample(v string) *GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParamsResponseParams {
	s.Example = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParamsResponseParams) SetRequired(v bool) *GetDataAPIServiceDetailResponseDataSqlTemplateDTOResponseParamsResponseParams {
	s.Required = &v
	return s
}

type InvokeDataAPIServiceRequest struct {
	ApiSrn        *string                             `json:"ApiSrn,omitempty" xml:"ApiSrn,omitempty" require:"true"`
	Param         []*InvokeDataAPIServiceRequestParam `json:"Param,omitempty" xml:"Param,omitempty" type:"Repeated"`
	IotInstanceId *string                             `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
}

func (s InvokeDataAPIServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s InvokeDataAPIServiceRequest) GoString() string {
	return s.String()
}

func (s *InvokeDataAPIServiceRequest) SetApiSrn(v string) *InvokeDataAPIServiceRequest {
	s.ApiSrn = &v
	return s
}

func (s *InvokeDataAPIServiceRequest) SetParam(v []*InvokeDataAPIServiceRequestParam) *InvokeDataAPIServiceRequest {
	s.Param = v
	return s
}

func (s *InvokeDataAPIServiceRequest) SetIotInstanceId(v string) *InvokeDataAPIServiceRequest {
	s.IotInstanceId = &v
	return s
}

type InvokeDataAPIServiceRequestParam struct {
	ParamType      *string   `json:"ParamType,omitempty" xml:"ParamType,omitempty"`
	ListParamValue []*string `json:"ListParamValue,omitempty" xml:"ListParamValue,omitempty" type:"Repeated"`
	ListParamType  *string   `json:"ListParamType,omitempty" xml:"ListParamType,omitempty"`
	ParamName      *string   `json:"ParamName,omitempty" xml:"ParamName,omitempty"`
	ParamValue     *string   `json:"ParamValue,omitempty" xml:"ParamValue,omitempty"`
}

func (s InvokeDataAPIServiceRequestParam) String() string {
	return tea.Prettify(s)
}

func (s InvokeDataAPIServiceRequestParam) GoString() string {
	return s.String()
}

func (s *InvokeDataAPIServiceRequestParam) SetParamType(v string) *InvokeDataAPIServiceRequestParam {
	s.ParamType = &v
	return s
}

func (s *InvokeDataAPIServiceRequestParam) SetListParamValue(v []*string) *InvokeDataAPIServiceRequestParam {
	s.ListParamValue = v
	return s
}

func (s *InvokeDataAPIServiceRequestParam) SetListParamType(v string) *InvokeDataAPIServiceRequestParam {
	s.ListParamType = &v
	return s
}

func (s *InvokeDataAPIServiceRequestParam) SetParamName(v string) *InvokeDataAPIServiceRequestParam {
	s.ParamName = &v
	return s
}

func (s *InvokeDataAPIServiceRequestParam) SetParamValue(v string) *InvokeDataAPIServiceRequestParam {
	s.ParamValue = &v
	return s
}

type InvokeDataAPIServiceResponse struct {
	RequestId    *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                             `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                           `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *InvokeDataAPIServiceResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s InvokeDataAPIServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s InvokeDataAPIServiceResponse) GoString() string {
	return s.String()
}

func (s *InvokeDataAPIServiceResponse) SetRequestId(v string) *InvokeDataAPIServiceResponse {
	s.RequestId = &v
	return s
}

func (s *InvokeDataAPIServiceResponse) SetSuccess(v bool) *InvokeDataAPIServiceResponse {
	s.Success = &v
	return s
}

func (s *InvokeDataAPIServiceResponse) SetCode(v string) *InvokeDataAPIServiceResponse {
	s.Code = &v
	return s
}

func (s *InvokeDataAPIServiceResponse) SetErrorMessage(v string) *InvokeDataAPIServiceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *InvokeDataAPIServiceResponse) SetData(v *InvokeDataAPIServiceResponseData) *InvokeDataAPIServiceResponse {
	s.Data = v
	return s
}

type InvokeDataAPIServiceResponseData struct {
	PageNo        *int                                           `json:"PageNo,omitempty" xml:"PageNo,omitempty" require:"true"`
	PageSize      *int                                           `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	ApiSrn        *string                                        `json:"ApiSrn,omitempty" xml:"ApiSrn,omitempty" require:"true"`
	FieldNameList *InvokeDataAPIServiceResponseDataFieldNameList `json:"FieldNameList,omitempty" xml:"FieldNameList,omitempty" require:"true" type:"Struct"`
	ResultList    *InvokeDataAPIServiceResponseDataResultList    `json:"ResultList,omitempty" xml:"ResultList,omitempty" require:"true" type:"Struct"`
}

func (s InvokeDataAPIServiceResponseData) String() string {
	return tea.Prettify(s)
}

func (s InvokeDataAPIServiceResponseData) GoString() string {
	return s.String()
}

func (s *InvokeDataAPIServiceResponseData) SetPageNo(v int) *InvokeDataAPIServiceResponseData {
	s.PageNo = &v
	return s
}

func (s *InvokeDataAPIServiceResponseData) SetPageSize(v int) *InvokeDataAPIServiceResponseData {
	s.PageSize = &v
	return s
}

func (s *InvokeDataAPIServiceResponseData) SetApiSrn(v string) *InvokeDataAPIServiceResponseData {
	s.ApiSrn = &v
	return s
}

func (s *InvokeDataAPIServiceResponseData) SetFieldNameList(v *InvokeDataAPIServiceResponseDataFieldNameList) *InvokeDataAPIServiceResponseData {
	s.FieldNameList = v
	return s
}

func (s *InvokeDataAPIServiceResponseData) SetResultList(v *InvokeDataAPIServiceResponseDataResultList) *InvokeDataAPIServiceResponseData {
	s.ResultList = v
	return s
}

type InvokeDataAPIServiceResponseDataFieldNameList struct {
	// FieldNameList
	FieldNameList []*string `json:"FieldNameList,omitempty" xml:"FieldNameList,omitempty" require:"true" type:"Repeated"`
}

func (s InvokeDataAPIServiceResponseDataFieldNameList) String() string {
	return tea.Prettify(s)
}

func (s InvokeDataAPIServiceResponseDataFieldNameList) GoString() string {
	return s.String()
}

func (s *InvokeDataAPIServiceResponseDataFieldNameList) SetFieldNameList(v []*string) *InvokeDataAPIServiceResponseDataFieldNameList {
	s.FieldNameList = v
	return s
}

type InvokeDataAPIServiceResponseDataResultList struct {
	// ResultList
	ResultList []map[string]interface{} `json:"ResultList,omitempty" xml:"ResultList,omitempty" require:"true" type:"Repeated"`
}

func (s InvokeDataAPIServiceResponseDataResultList) String() string {
	return tea.Prettify(s)
}

func (s InvokeDataAPIServiceResponseDataResultList) GoString() string {
	return s.String()
}

func (s *InvokeDataAPIServiceResponseDataResultList) SetResultList(v []map[string]interface{}) *InvokeDataAPIServiceResponseDataResultList {
	s.ResultList = v
	return s
}

type UpdateEdgeInstanceChannelRequest struct {
	IotInstanceId *string                                    `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string                                    `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	DriverId      *string                                    `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	ChannelId     *string                                    `json:"ChannelId,omitempty" xml:"ChannelId,omitempty" require:"true"`
	ChannelName   *string                                    `json:"ChannelName,omitempty" xml:"ChannelName,omitempty" require:"true"`
	Configs       []*UpdateEdgeInstanceChannelRequestConfigs `json:"Configs,omitempty" xml:"Configs,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateEdgeInstanceChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeInstanceChannelRequest) GoString() string {
	return s.String()
}

func (s *UpdateEdgeInstanceChannelRequest) SetIotInstanceId(v string) *UpdateEdgeInstanceChannelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateEdgeInstanceChannelRequest) SetInstanceId(v string) *UpdateEdgeInstanceChannelRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateEdgeInstanceChannelRequest) SetDriverId(v string) *UpdateEdgeInstanceChannelRequest {
	s.DriverId = &v
	return s
}

func (s *UpdateEdgeInstanceChannelRequest) SetChannelId(v string) *UpdateEdgeInstanceChannelRequest {
	s.ChannelId = &v
	return s
}

func (s *UpdateEdgeInstanceChannelRequest) SetChannelName(v string) *UpdateEdgeInstanceChannelRequest {
	s.ChannelName = &v
	return s
}

func (s *UpdateEdgeInstanceChannelRequest) SetConfigs(v []*UpdateEdgeInstanceChannelRequestConfigs) *UpdateEdgeInstanceChannelRequest {
	s.Configs = v
	return s
}

type UpdateEdgeInstanceChannelRequestConfigs struct {
	Format  *string `json:"Format,omitempty" xml:"Format,omitempty" require:"true"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty" require:"true"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s UpdateEdgeInstanceChannelRequestConfigs) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeInstanceChannelRequestConfigs) GoString() string {
	return s.String()
}

func (s *UpdateEdgeInstanceChannelRequestConfigs) SetFormat(v string) *UpdateEdgeInstanceChannelRequestConfigs {
	s.Format = &v
	return s
}

func (s *UpdateEdgeInstanceChannelRequestConfigs) SetContent(v string) *UpdateEdgeInstanceChannelRequestConfigs {
	s.Content = &v
	return s
}

func (s *UpdateEdgeInstanceChannelRequestConfigs) SetKey(v string) *UpdateEdgeInstanceChannelRequestConfigs {
	s.Key = &v
	return s
}

type UpdateEdgeInstanceChannelResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateEdgeInstanceChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeInstanceChannelResponse) GoString() string {
	return s.String()
}

func (s *UpdateEdgeInstanceChannelResponse) SetRequestId(v string) *UpdateEdgeInstanceChannelResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateEdgeInstanceChannelResponse) SetSuccess(v bool) *UpdateEdgeInstanceChannelResponse {
	s.Success = &v
	return s
}

func (s *UpdateEdgeInstanceChannelResponse) SetCode(v string) *UpdateEdgeInstanceChannelResponse {
	s.Code = &v
	return s
}

func (s *UpdateEdgeInstanceChannelResponse) SetErrorMessage(v string) *UpdateEdgeInstanceChannelResponse {
	s.ErrorMessage = &v
	return s
}

type QueryEdgeInstanceChannelRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	ChannelName   *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
}

func (s QueryEdgeInstanceChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceChannelRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceChannelRequest) SetIotInstanceId(v string) *QueryEdgeInstanceChannelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeInstanceChannelRequest) SetInstanceId(v string) *QueryEdgeInstanceChannelRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryEdgeInstanceChannelRequest) SetDriverId(v string) *QueryEdgeInstanceChannelRequest {
	s.DriverId = &v
	return s
}

func (s *QueryEdgeInstanceChannelRequest) SetChannelName(v string) *QueryEdgeInstanceChannelRequest {
	s.ChannelName = &v
	return s
}

func (s *QueryEdgeInstanceChannelRequest) SetCurrentPage(v int) *QueryEdgeInstanceChannelRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceChannelRequest) SetPageSize(v int) *QueryEdgeInstanceChannelRequest {
	s.PageSize = &v
	return s
}

type QueryEdgeInstanceChannelResponse struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                 `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                               `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryEdgeInstanceChannelResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryEdgeInstanceChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceChannelResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceChannelResponse) SetRequestId(v string) *QueryEdgeInstanceChannelResponse {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponse) SetSuccess(v bool) *QueryEdgeInstanceChannelResponse {
	s.Success = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponse) SetCode(v string) *QueryEdgeInstanceChannelResponse {
	s.Code = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponse) SetErrorMessage(v string) *QueryEdgeInstanceChannelResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponse) SetData(v *QueryEdgeInstanceChannelResponseData) *QueryEdgeInstanceChannelResponse {
	s.Data = v
	return s
}

type QueryEdgeInstanceChannelResponseData struct {
	Total       *int                                             `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize    *int                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage *int                                             `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	ChannelList *QueryEdgeInstanceChannelResponseDataChannelList `json:"ChannelList,omitempty" xml:"ChannelList,omitempty" require:"true" type:"Struct"`
}

func (s QueryEdgeInstanceChannelResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceChannelResponseData) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceChannelResponseData) SetTotal(v int) *QueryEdgeInstanceChannelResponseData {
	s.Total = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseData) SetPageSize(v int) *QueryEdgeInstanceChannelResponseData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseData) SetCurrentPage(v int) *QueryEdgeInstanceChannelResponseData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseData) SetChannelList(v *QueryEdgeInstanceChannelResponseDataChannelList) *QueryEdgeInstanceChannelResponseData {
	s.ChannelList = v
	return s
}

type QueryEdgeInstanceChannelResponseDataChannelList struct {
	Channel []*QueryEdgeInstanceChannelResponseDataChannelListChannel `json:"Channel,omitempty" xml:"Channel,omitempty" require:"true" type:"Repeated"`
}

func (s QueryEdgeInstanceChannelResponseDataChannelList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceChannelResponseDataChannelList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceChannelResponseDataChannelList) SetChannel(v []*QueryEdgeInstanceChannelResponseDataChannelListChannel) *QueryEdgeInstanceChannelResponseDataChannelList {
	s.Channel = v
	return s
}

type QueryEdgeInstanceChannelResponseDataChannelListChannel struct {
	ChannelId            *string                                                           `json:"ChannelId,omitempty" xml:"ChannelId,omitempty" require:"true"`
	ChannelName          *string                                                           `json:"ChannelName,omitempty" xml:"ChannelName,omitempty" require:"true"`
	GmtCreate            *string                                                           `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModified          *string                                                           `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
	GmtCreateTimestamp   *int64                                                            `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty" require:"true"`
	GmtModifiedTimestamp *int64                                                            `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty" require:"true"`
	ConfigList           *QueryEdgeInstanceChannelResponseDataChannelListChannelConfigList `json:"ConfigList,omitempty" xml:"ConfigList,omitempty" require:"true" type:"Struct"`
}

func (s QueryEdgeInstanceChannelResponseDataChannelListChannel) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceChannelResponseDataChannelListChannel) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceChannelResponseDataChannelListChannel) SetChannelId(v string) *QueryEdgeInstanceChannelResponseDataChannelListChannel {
	s.ChannelId = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseDataChannelListChannel) SetChannelName(v string) *QueryEdgeInstanceChannelResponseDataChannelListChannel {
	s.ChannelName = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseDataChannelListChannel) SetGmtCreate(v string) *QueryEdgeInstanceChannelResponseDataChannelListChannel {
	s.GmtCreate = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseDataChannelListChannel) SetGmtModified(v string) *QueryEdgeInstanceChannelResponseDataChannelListChannel {
	s.GmtModified = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseDataChannelListChannel) SetGmtCreateTimestamp(v int64) *QueryEdgeInstanceChannelResponseDataChannelListChannel {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseDataChannelListChannel) SetGmtModifiedTimestamp(v int64) *QueryEdgeInstanceChannelResponseDataChannelListChannel {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseDataChannelListChannel) SetConfigList(v *QueryEdgeInstanceChannelResponseDataChannelListChannelConfigList) *QueryEdgeInstanceChannelResponseDataChannelListChannel {
	s.ConfigList = v
	return s
}

type QueryEdgeInstanceChannelResponseDataChannelListChannelConfigList struct {
	Config []*QueryEdgeInstanceChannelResponseDataChannelListChannelConfigListConfig `json:"Config,omitempty" xml:"Config,omitempty" require:"true" type:"Repeated"`
}

func (s QueryEdgeInstanceChannelResponseDataChannelListChannelConfigList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceChannelResponseDataChannelListChannelConfigList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceChannelResponseDataChannelListChannelConfigList) SetConfig(v []*QueryEdgeInstanceChannelResponseDataChannelListChannelConfigListConfig) *QueryEdgeInstanceChannelResponseDataChannelListChannelConfigList {
	s.Config = v
	return s
}

type QueryEdgeInstanceChannelResponseDataChannelListChannelConfigListConfig struct {
	ConfigId *string `json:"ConfigId,omitempty" xml:"ConfigId,omitempty" require:"true"`
	Format   *string `json:"Format,omitempty" xml:"Format,omitempty" require:"true"`
	Content  *string `json:"Content,omitempty" xml:"Content,omitempty" require:"true"`
	Key      *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
}

func (s QueryEdgeInstanceChannelResponseDataChannelListChannelConfigListConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceChannelResponseDataChannelListChannelConfigListConfig) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceChannelResponseDataChannelListChannelConfigListConfig) SetConfigId(v string) *QueryEdgeInstanceChannelResponseDataChannelListChannelConfigListConfig {
	s.ConfigId = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseDataChannelListChannelConfigListConfig) SetFormat(v string) *QueryEdgeInstanceChannelResponseDataChannelListChannelConfigListConfig {
	s.Format = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseDataChannelListChannelConfigListConfig) SetContent(v string) *QueryEdgeInstanceChannelResponseDataChannelListChannelConfigListConfig {
	s.Content = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseDataChannelListChannelConfigListConfig) SetKey(v string) *QueryEdgeInstanceChannelResponseDataChannelListChannelConfigListConfig {
	s.Key = &v
	return s
}

type BatchUnbindDeviceFromEdgeInstanceRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	IotIds        []*string `json:"IotIds,omitempty" xml:"IotIds,omitempty" require:"true" type:"Repeated"`
}

func (s BatchUnbindDeviceFromEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindDeviceFromEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *BatchUnbindDeviceFromEdgeInstanceRequest) SetIotInstanceId(v string) *BatchUnbindDeviceFromEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchUnbindDeviceFromEdgeInstanceRequest) SetInstanceId(v string) *BatchUnbindDeviceFromEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchUnbindDeviceFromEdgeInstanceRequest) SetIotIds(v []*string) *BatchUnbindDeviceFromEdgeInstanceRequest {
	s.IotIds = v
	return s
}

type BatchUnbindDeviceFromEdgeInstanceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s BatchUnbindDeviceFromEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindDeviceFromEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *BatchUnbindDeviceFromEdgeInstanceResponse) SetRequestId(v string) *BatchUnbindDeviceFromEdgeInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *BatchUnbindDeviceFromEdgeInstanceResponse) SetSuccess(v bool) *BatchUnbindDeviceFromEdgeInstanceResponse {
	s.Success = &v
	return s
}

func (s *BatchUnbindDeviceFromEdgeInstanceResponse) SetCode(v string) *BatchUnbindDeviceFromEdgeInstanceResponse {
	s.Code = &v
	return s
}

func (s *BatchUnbindDeviceFromEdgeInstanceResponse) SetErrorMessage(v string) *BatchUnbindDeviceFromEdgeInstanceResponse {
	s.ErrorMessage = &v
	return s
}

type SetEdgeInstanceDriverConfigsRequest struct {
	IotInstanceId *string                                       `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string                                       `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	DriverId      *string                                       `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	Configs       []*SetEdgeInstanceDriverConfigsRequestConfigs `json:"Configs,omitempty" xml:"Configs,omitempty" require:"true" type:"Repeated"`
}

func (s SetEdgeInstanceDriverConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s SetEdgeInstanceDriverConfigsRequest) GoString() string {
	return s.String()
}

func (s *SetEdgeInstanceDriverConfigsRequest) SetIotInstanceId(v string) *SetEdgeInstanceDriverConfigsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsRequest) SetInstanceId(v string) *SetEdgeInstanceDriverConfigsRequest {
	s.InstanceId = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsRequest) SetDriverId(v string) *SetEdgeInstanceDriverConfigsRequest {
	s.DriverId = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsRequest) SetConfigs(v []*SetEdgeInstanceDriverConfigsRequestConfigs) *SetEdgeInstanceDriverConfigsRequest {
	s.Configs = v
	return s
}

type SetEdgeInstanceDriverConfigsRequestConfigs struct {
	Format  *string `json:"Format,omitempty" xml:"Format,omitempty" require:"true"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty" require:"true"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s SetEdgeInstanceDriverConfigsRequestConfigs) String() string {
	return tea.Prettify(s)
}

func (s SetEdgeInstanceDriverConfigsRequestConfigs) GoString() string {
	return s.String()
}

func (s *SetEdgeInstanceDriverConfigsRequestConfigs) SetFormat(v string) *SetEdgeInstanceDriverConfigsRequestConfigs {
	s.Format = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsRequestConfigs) SetContent(v string) *SetEdgeInstanceDriverConfigsRequestConfigs {
	s.Content = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsRequestConfigs) SetKey(v string) *SetEdgeInstanceDriverConfigsRequestConfigs {
	s.Key = &v
	return s
}

type SetEdgeInstanceDriverConfigsResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s SetEdgeInstanceDriverConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s SetEdgeInstanceDriverConfigsResponse) GoString() string {
	return s.String()
}

func (s *SetEdgeInstanceDriverConfigsResponse) SetRequestId(v string) *SetEdgeInstanceDriverConfigsResponse {
	s.RequestId = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsResponse) SetSuccess(v bool) *SetEdgeInstanceDriverConfigsResponse {
	s.Success = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsResponse) SetCode(v string) *SetEdgeInstanceDriverConfigsResponse {
	s.Code = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsResponse) SetErrorMessage(v string) *SetEdgeInstanceDriverConfigsResponse {
	s.ErrorMessage = &v
	return s
}

type CreateEdgeInstanceChannelRequest struct {
	IotInstanceId *string                                    `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string                                    `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	DriverId      *string                                    `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	ChannelName   *string                                    `json:"ChannelName,omitempty" xml:"ChannelName,omitempty" require:"true"`
	Configs       []*CreateEdgeInstanceChannelRequestConfigs `json:"Configs,omitempty" xml:"Configs,omitempty" require:"true" type:"Repeated"`
}

func (s CreateEdgeInstanceChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceChannelRequest) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceChannelRequest) SetIotInstanceId(v string) *CreateEdgeInstanceChannelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateEdgeInstanceChannelRequest) SetInstanceId(v string) *CreateEdgeInstanceChannelRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateEdgeInstanceChannelRequest) SetDriverId(v string) *CreateEdgeInstanceChannelRequest {
	s.DriverId = &v
	return s
}

func (s *CreateEdgeInstanceChannelRequest) SetChannelName(v string) *CreateEdgeInstanceChannelRequest {
	s.ChannelName = &v
	return s
}

func (s *CreateEdgeInstanceChannelRequest) SetConfigs(v []*CreateEdgeInstanceChannelRequestConfigs) *CreateEdgeInstanceChannelRequest {
	s.Configs = v
	return s
}

type CreateEdgeInstanceChannelRequestConfigs struct {
	Format  *string `json:"Format,omitempty" xml:"Format,omitempty" require:"true"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty" require:"true"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s CreateEdgeInstanceChannelRequestConfigs) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceChannelRequestConfigs) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceChannelRequestConfigs) SetFormat(v string) *CreateEdgeInstanceChannelRequestConfigs {
	s.Format = &v
	return s
}

func (s *CreateEdgeInstanceChannelRequestConfigs) SetContent(v string) *CreateEdgeInstanceChannelRequestConfigs {
	s.Content = &v
	return s
}

func (s *CreateEdgeInstanceChannelRequestConfigs) SetKey(v string) *CreateEdgeInstanceChannelRequestConfigs {
	s.Key = &v
	return s
}

type CreateEdgeInstanceChannelResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *string `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
}

func (s CreateEdgeInstanceChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceChannelResponse) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceChannelResponse) SetRequestId(v string) *CreateEdgeInstanceChannelResponse {
	s.RequestId = &v
	return s
}

func (s *CreateEdgeInstanceChannelResponse) SetSuccess(v bool) *CreateEdgeInstanceChannelResponse {
	s.Success = &v
	return s
}

func (s *CreateEdgeInstanceChannelResponse) SetCode(v string) *CreateEdgeInstanceChannelResponse {
	s.Code = &v
	return s
}

func (s *CreateEdgeInstanceChannelResponse) SetErrorMessage(v string) *CreateEdgeInstanceChannelResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateEdgeInstanceChannelResponse) SetData(v string) *CreateEdgeInstanceChannelResponse {
	s.Data = &v
	return s
}

type BatchBindDeviceToEdgeInstanceWithDriverRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	DriverId      *string   `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	IotIds        []*string `json:"IotIds,omitempty" xml:"IotIds,omitempty" require:"true" type:"Repeated"`
}

func (s BatchBindDeviceToEdgeInstanceWithDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchBindDeviceToEdgeInstanceWithDriverRequest) GoString() string {
	return s.String()
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverRequest) SetIotInstanceId(v string) *BatchBindDeviceToEdgeInstanceWithDriverRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverRequest) SetInstanceId(v string) *BatchBindDeviceToEdgeInstanceWithDriverRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverRequest) SetDriverId(v string) *BatchBindDeviceToEdgeInstanceWithDriverRequest {
	s.DriverId = &v
	return s
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverRequest) SetIotIds(v []*string) *BatchBindDeviceToEdgeInstanceWithDriverRequest {
	s.IotIds = v
	return s
}

type BatchBindDeviceToEdgeInstanceWithDriverResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s BatchBindDeviceToEdgeInstanceWithDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchBindDeviceToEdgeInstanceWithDriverResponse) GoString() string {
	return s.String()
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverResponse) SetRequestId(v string) *BatchBindDeviceToEdgeInstanceWithDriverResponse {
	s.RequestId = &v
	return s
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverResponse) SetSuccess(v bool) *BatchBindDeviceToEdgeInstanceWithDriverResponse {
	s.Success = &v
	return s
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverResponse) SetCode(v string) *BatchBindDeviceToEdgeInstanceWithDriverResponse {
	s.Code = &v
	return s
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverResponse) SetErrorMessage(v string) *BatchBindDeviceToEdgeInstanceWithDriverResponse {
	s.ErrorMessage = &v
	return s
}

type BatchGetEdgeInstanceChannelRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	DriverId      *string   `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	ChannelIds    []*string `json:"ChannelIds,omitempty" xml:"ChannelIds,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetEdgeInstanceChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceChannelRequest) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceChannelRequest) SetIotInstanceId(v string) *BatchGetEdgeInstanceChannelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelRequest) SetInstanceId(v string) *BatchGetEdgeInstanceChannelRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelRequest) SetDriverId(v string) *BatchGetEdgeInstanceChannelRequest {
	s.DriverId = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelRequest) SetChannelIds(v []*string) *BatchGetEdgeInstanceChannelRequest {
	s.ChannelIds = v
	return s
}

type BatchGetEdgeInstanceChannelResponse struct {
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                    `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                  `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *BatchGetEdgeInstanceChannelResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s BatchGetEdgeInstanceChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceChannelResponse) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceChannelResponse) SetRequestId(v string) *BatchGetEdgeInstanceChannelResponse {
	s.RequestId = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponse) SetSuccess(v bool) *BatchGetEdgeInstanceChannelResponse {
	s.Success = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponse) SetCode(v string) *BatchGetEdgeInstanceChannelResponse {
	s.Code = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponse) SetErrorMessage(v string) *BatchGetEdgeInstanceChannelResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponse) SetData(v *BatchGetEdgeInstanceChannelResponseData) *BatchGetEdgeInstanceChannelResponse {
	s.Data = v
	return s
}

type BatchGetEdgeInstanceChannelResponseData struct {
	Channel []*BatchGetEdgeInstanceChannelResponseDataChannel `json:"Channel,omitempty" xml:"Channel,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetEdgeInstanceChannelResponseData) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceChannelResponseData) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceChannelResponseData) SetChannel(v []*BatchGetEdgeInstanceChannelResponseDataChannel) *BatchGetEdgeInstanceChannelResponseData {
	s.Channel = v
	return s
}

type BatchGetEdgeInstanceChannelResponseDataChannel struct {
	ChannelId   *string                                                   `json:"ChannelId,omitempty" xml:"ChannelId,omitempty" require:"true"`
	ChannelName *string                                                   `json:"ChannelName,omitempty" xml:"ChannelName,omitempty" require:"true"`
	ConfigList  *BatchGetEdgeInstanceChannelResponseDataChannelConfigList `json:"ConfigList,omitempty" xml:"ConfigList,omitempty" require:"true" type:"Struct"`
}

func (s BatchGetEdgeInstanceChannelResponseDataChannel) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceChannelResponseDataChannel) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceChannelResponseDataChannel) SetChannelId(v string) *BatchGetEdgeInstanceChannelResponseDataChannel {
	s.ChannelId = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponseDataChannel) SetChannelName(v string) *BatchGetEdgeInstanceChannelResponseDataChannel {
	s.ChannelName = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponseDataChannel) SetConfigList(v *BatchGetEdgeInstanceChannelResponseDataChannelConfigList) *BatchGetEdgeInstanceChannelResponseDataChannel {
	s.ConfigList = v
	return s
}

type BatchGetEdgeInstanceChannelResponseDataChannelConfigList struct {
	Config []*BatchGetEdgeInstanceChannelResponseDataChannelConfigListConfig `json:"Config,omitempty" xml:"Config,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetEdgeInstanceChannelResponseDataChannelConfigList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceChannelResponseDataChannelConfigList) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceChannelResponseDataChannelConfigList) SetConfig(v []*BatchGetEdgeInstanceChannelResponseDataChannelConfigListConfig) *BatchGetEdgeInstanceChannelResponseDataChannelConfigList {
	s.Config = v
	return s
}

type BatchGetEdgeInstanceChannelResponseDataChannelConfigListConfig struct {
	ConfigId *string `json:"ConfigId,omitempty" xml:"ConfigId,omitempty" require:"true"`
	Format   *string `json:"Format,omitempty" xml:"Format,omitempty" require:"true"`
	Content  *string `json:"Content,omitempty" xml:"Content,omitempty" require:"true"`
	Key      *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
}

func (s BatchGetEdgeInstanceChannelResponseDataChannelConfigListConfig) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceChannelResponseDataChannelConfigListConfig) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceChannelResponseDataChannelConfigListConfig) SetConfigId(v string) *BatchGetEdgeInstanceChannelResponseDataChannelConfigListConfig {
	s.ConfigId = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponseDataChannelConfigListConfig) SetFormat(v string) *BatchGetEdgeInstanceChannelResponseDataChannelConfigListConfig {
	s.Format = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponseDataChannelConfigListConfig) SetContent(v string) *BatchGetEdgeInstanceChannelResponseDataChannelConfigListConfig {
	s.Content = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponseDataChannelConfigListConfig) SetKey(v string) *BatchGetEdgeInstanceChannelResponseDataChannelConfigListConfig {
	s.Key = &v
	return s
}

type BatchSetEdgeInstanceDeviceConfigRequest struct {
	IotInstanceId *string                                                 `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string                                                 `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	DeviceConfigs []*BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs `json:"DeviceConfigs,omitempty" xml:"DeviceConfigs,omitempty" require:"true" type:"Repeated"`
}

func (s BatchSetEdgeInstanceDeviceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchSetEdgeInstanceDeviceConfigRequest) GoString() string {
	return s.String()
}

func (s *BatchSetEdgeInstanceDeviceConfigRequest) SetIotInstanceId(v string) *BatchSetEdgeInstanceDeviceConfigRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceConfigRequest) SetInstanceId(v string) *BatchSetEdgeInstanceDeviceConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceConfigRequest) SetDeviceConfigs(v []*BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs) *BatchSetEdgeInstanceDeviceConfigRequest {
	s.DeviceConfigs = v
	return s
}

type BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs struct {
	IotId   *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty" require:"true"`
}

func (s BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs) String() string {
	return tea.Prettify(s)
}

func (s BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs) GoString() string {
	return s.String()
}

func (s *BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs) SetIotId(v string) *BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs {
	s.IotId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs) SetContent(v string) *BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs {
	s.Content = &v
	return s
}

type BatchSetEdgeInstanceDeviceConfigResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s BatchSetEdgeInstanceDeviceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchSetEdgeInstanceDeviceConfigResponse) GoString() string {
	return s.String()
}

func (s *BatchSetEdgeInstanceDeviceConfigResponse) SetRequestId(v string) *BatchSetEdgeInstanceDeviceConfigResponse {
	s.RequestId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceConfigResponse) SetSuccess(v bool) *BatchSetEdgeInstanceDeviceConfigResponse {
	s.Success = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceConfigResponse) SetCode(v string) *BatchSetEdgeInstanceDeviceConfigResponse {
	s.Code = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceConfigResponse) SetErrorMessage(v string) *BatchSetEdgeInstanceDeviceConfigResponse {
	s.ErrorMessage = &v
	return s
}

type BatchClearEdgeInstanceDeviceConfigRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	IotIds        []*string `json:"IotIds,omitempty" xml:"IotIds,omitempty" require:"true" type:"Repeated"`
}

func (s BatchClearEdgeInstanceDeviceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchClearEdgeInstanceDeviceConfigRequest) GoString() string {
	return s.String()
}

func (s *BatchClearEdgeInstanceDeviceConfigRequest) SetIotInstanceId(v string) *BatchClearEdgeInstanceDeviceConfigRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchClearEdgeInstanceDeviceConfigRequest) SetInstanceId(v string) *BatchClearEdgeInstanceDeviceConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchClearEdgeInstanceDeviceConfigRequest) SetIotIds(v []*string) *BatchClearEdgeInstanceDeviceConfigRequest {
	s.IotIds = v
	return s
}

type BatchClearEdgeInstanceDeviceConfigResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s BatchClearEdgeInstanceDeviceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchClearEdgeInstanceDeviceConfigResponse) GoString() string {
	return s.String()
}

func (s *BatchClearEdgeInstanceDeviceConfigResponse) SetRequestId(v string) *BatchClearEdgeInstanceDeviceConfigResponse {
	s.RequestId = &v
	return s
}

func (s *BatchClearEdgeInstanceDeviceConfigResponse) SetSuccess(v bool) *BatchClearEdgeInstanceDeviceConfigResponse {
	s.Success = &v
	return s
}

func (s *BatchClearEdgeInstanceDeviceConfigResponse) SetCode(v string) *BatchClearEdgeInstanceDeviceConfigResponse {
	s.Code = &v
	return s
}

func (s *BatchClearEdgeInstanceDeviceConfigResponse) SetErrorMessage(v string) *BatchClearEdgeInstanceDeviceConfigResponse {
	s.ErrorMessage = &v
	return s
}

type BatchGetEdgeInstanceDeviceConfigRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	IotIds        []*string `json:"IotIds,omitempty" xml:"IotIds,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDeviceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceConfigRequest) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceConfigRequest) SetIotInstanceId(v string) *BatchGetEdgeInstanceDeviceConfigRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigRequest) SetInstanceId(v string) *BatchGetEdgeInstanceDeviceConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigRequest) SetIotIds(v []*string) *BatchGetEdgeInstanceDeviceConfigRequest {
	s.IotIds = v
	return s
}

type BatchGetEdgeInstanceDeviceConfigResponse struct {
	RequestId        *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success          *bool                                                       `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code             *string                                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage     *string                                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	DeviceConfigList []*BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigList `json:"DeviceConfigList,omitempty" xml:"DeviceConfigList,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDeviceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceConfigResponse) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceConfigResponse) SetRequestId(v string) *BatchGetEdgeInstanceDeviceConfigResponse {
	s.RequestId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigResponse) SetSuccess(v bool) *BatchGetEdgeInstanceDeviceConfigResponse {
	s.Success = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigResponse) SetCode(v string) *BatchGetEdgeInstanceDeviceConfigResponse {
	s.Code = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigResponse) SetErrorMessage(v string) *BatchGetEdgeInstanceDeviceConfigResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigResponse) SetDeviceConfigList(v []*BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigList) *BatchGetEdgeInstanceDeviceConfigResponse {
	s.DeviceConfigList = v
	return s
}

type BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigList struct {
	IotId  *string                                                         `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	Config *BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigListConfig `json:"Config,omitempty" xml:"Config,omitempty" require:"true" type:"Struct"`
}

func (s BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigList) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigList) SetIotId(v string) *BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigList {
	s.IotId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigList) SetConfig(v *BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigListConfig) *BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigList {
	s.Config = v
	return s
}

type BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigListConfig struct {
	Format  *string `json:"Format,omitempty" xml:"Format,omitempty" require:"true"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty" require:"true"`
}

func (s BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigListConfig) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigListConfig) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigListConfig) SetFormat(v string) *BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigListConfig {
	s.Format = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigListConfig) SetContent(v string) *BatchGetEdgeInstanceDeviceConfigResponseDeviceConfigListConfig {
	s.Content = &v
	return s
}

type BatchGetEdgeInstanceDriverConfigsRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	DriverIds     []*string `json:"DriverIds,omitempty" xml:"DriverIds,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDriverConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDriverConfigsRequest) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDriverConfigsRequest) SetIotInstanceId(v string) *BatchGetEdgeInstanceDriverConfigsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsRequest) SetInstanceId(v string) *BatchGetEdgeInstanceDriverConfigsRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsRequest) SetDriverIds(v []*string) *BatchGetEdgeInstanceDriverConfigsRequest {
	s.DriverIds = v
	return s
}

type BatchGetEdgeInstanceDriverConfigsResponse struct {
	RequestId        *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success          *bool                                                        `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code             *string                                                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage     *string                                                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	DriverConfigList []*BatchGetEdgeInstanceDriverConfigsResponseDriverConfigList `json:"DriverConfigList,omitempty" xml:"DriverConfigList,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDriverConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDriverConfigsResponse) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDriverConfigsResponse) SetRequestId(v string) *BatchGetEdgeInstanceDriverConfigsResponse {
	s.RequestId = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponse) SetSuccess(v bool) *BatchGetEdgeInstanceDriverConfigsResponse {
	s.Success = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponse) SetCode(v string) *BatchGetEdgeInstanceDriverConfigsResponse {
	s.Code = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponse) SetErrorMessage(v string) *BatchGetEdgeInstanceDriverConfigsResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponse) SetDriverConfigList(v []*BatchGetEdgeInstanceDriverConfigsResponseDriverConfigList) *BatchGetEdgeInstanceDriverConfigsResponse {
	s.DriverConfigList = v
	return s
}

type BatchGetEdgeInstanceDriverConfigsResponseDriverConfigList struct {
	DriverId   *string                                                                `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	ConfigList []*BatchGetEdgeInstanceDriverConfigsResponseDriverConfigListConfigList `json:"ConfigList,omitempty" xml:"ConfigList,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDriverConfigsResponseDriverConfigList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDriverConfigsResponseDriverConfigList) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseDriverConfigList) SetDriverId(v string) *BatchGetEdgeInstanceDriverConfigsResponseDriverConfigList {
	s.DriverId = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseDriverConfigList) SetConfigList(v []*BatchGetEdgeInstanceDriverConfigsResponseDriverConfigListConfigList) *BatchGetEdgeInstanceDriverConfigsResponseDriverConfigList {
	s.ConfigList = v
	return s
}

type BatchGetEdgeInstanceDriverConfigsResponseDriverConfigListConfigList struct {
	ConfigId *string `json:"ConfigId,omitempty" xml:"ConfigId,omitempty" require:"true"`
	Format   *string `json:"Format,omitempty" xml:"Format,omitempty" require:"true"`
	Content  *string `json:"Content,omitempty" xml:"Content,omitempty" require:"true"`
	Key      *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
}

func (s BatchGetEdgeInstanceDriverConfigsResponseDriverConfigListConfigList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDriverConfigsResponseDriverConfigListConfigList) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseDriverConfigListConfigList) SetConfigId(v string) *BatchGetEdgeInstanceDriverConfigsResponseDriverConfigListConfigList {
	s.ConfigId = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseDriverConfigListConfigList) SetFormat(v string) *BatchGetEdgeInstanceDriverConfigsResponseDriverConfigListConfigList {
	s.Format = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseDriverConfigListConfigList) SetContent(v string) *BatchGetEdgeInstanceDriverConfigsResponseDriverConfigListConfigList {
	s.Content = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseDriverConfigListConfigList) SetKey(v string) *BatchGetEdgeInstanceDriverConfigsResponseDriverConfigListConfigList {
	s.Key = &v
	return s
}

type ClearEdgeInstanceDriverConfigsRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
}

func (s ClearEdgeInstanceDriverConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s ClearEdgeInstanceDriverConfigsRequest) GoString() string {
	return s.String()
}

func (s *ClearEdgeInstanceDriverConfigsRequest) SetIotInstanceId(v string) *ClearEdgeInstanceDriverConfigsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ClearEdgeInstanceDriverConfigsRequest) SetInstanceId(v string) *ClearEdgeInstanceDriverConfigsRequest {
	s.InstanceId = &v
	return s
}

func (s *ClearEdgeInstanceDriverConfigsRequest) SetDriverId(v string) *ClearEdgeInstanceDriverConfigsRequest {
	s.DriverId = &v
	return s
}

type ClearEdgeInstanceDriverConfigsResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s ClearEdgeInstanceDriverConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s ClearEdgeInstanceDriverConfigsResponse) GoString() string {
	return s.String()
}

func (s *ClearEdgeInstanceDriverConfigsResponse) SetRequestId(v string) *ClearEdgeInstanceDriverConfigsResponse {
	s.RequestId = &v
	return s
}

func (s *ClearEdgeInstanceDriverConfigsResponse) SetSuccess(v bool) *ClearEdgeInstanceDriverConfigsResponse {
	s.Success = &v
	return s
}

func (s *ClearEdgeInstanceDriverConfigsResponse) SetCode(v string) *ClearEdgeInstanceDriverConfigsResponse {
	s.Code = &v
	return s
}

func (s *ClearEdgeInstanceDriverConfigsResponse) SetErrorMessage(v string) *ClearEdgeInstanceDriverConfigsResponse {
	s.ErrorMessage = &v
	return s
}

type CreateLoRaNodesTaskRequest struct {
	IotInstanceId *string                                 `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string                                 `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceInfo    []*CreateLoRaNodesTaskRequestDeviceInfo `json:"DeviceInfo,omitempty" xml:"DeviceInfo,omitempty" require:"true" type:"Repeated"`
}

func (s CreateLoRaNodesTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoRaNodesTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateLoRaNodesTaskRequest) SetIotInstanceId(v string) *CreateLoRaNodesTaskRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateLoRaNodesTaskRequest) SetProductKey(v string) *CreateLoRaNodesTaskRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateLoRaNodesTaskRequest) SetDeviceInfo(v []*CreateLoRaNodesTaskRequestDeviceInfo) *CreateLoRaNodesTaskRequest {
	s.DeviceInfo = v
	return s
}

type CreateLoRaNodesTaskRequestDeviceInfo struct {
	DevEui  *string `json:"DevEui,omitempty" xml:"DevEui,omitempty"`
	PinCode *string `json:"PinCode,omitempty" xml:"PinCode,omitempty"`
}

func (s CreateLoRaNodesTaskRequestDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateLoRaNodesTaskRequestDeviceInfo) GoString() string {
	return s.String()
}

func (s *CreateLoRaNodesTaskRequestDeviceInfo) SetDevEui(v string) *CreateLoRaNodesTaskRequestDeviceInfo {
	s.DevEui = &v
	return s
}

func (s *CreateLoRaNodesTaskRequestDeviceInfo) SetPinCode(v string) *CreateLoRaNodesTaskRequestDeviceInfo {
	s.PinCode = &v
	return s
}

type CreateLoRaNodesTaskResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	TaskId       *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
}

func (s CreateLoRaNodesTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoRaNodesTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateLoRaNodesTaskResponse) SetRequestId(v string) *CreateLoRaNodesTaskResponse {
	s.RequestId = &v
	return s
}

func (s *CreateLoRaNodesTaskResponse) SetSuccess(v bool) *CreateLoRaNodesTaskResponse {
	s.Success = &v
	return s
}

func (s *CreateLoRaNodesTaskResponse) SetCode(v string) *CreateLoRaNodesTaskResponse {
	s.Code = &v
	return s
}

func (s *CreateLoRaNodesTaskResponse) SetErrorMessage(v string) *CreateLoRaNodesTaskResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateLoRaNodesTaskResponse) SetTaskId(v string) *CreateLoRaNodesTaskResponse {
	s.TaskId = &v
	return s
}

type GetLoraNodesTaskRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	TaskId        *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
}

func (s GetLoraNodesTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLoraNodesTaskRequest) GoString() string {
	return s.String()
}

func (s *GetLoraNodesTaskRequest) SetIotInstanceId(v string) *GetLoraNodesTaskRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetLoraNodesTaskRequest) SetTaskId(v string) *GetLoraNodesTaskRequest {
	s.TaskId = &v
	return s
}

type GetLoraNodesTaskResponse struct {
	RequestId      *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success        *bool                                   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code           *string                                 `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage   *string                                 `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	TaskId         *string                                 `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	TaskState      *string                                 `json:"TaskState,omitempty" xml:"TaskState,omitempty" require:"true"`
	TotalCount     *int64                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	SuccessCount   *int64                                  `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty" require:"true"`
	SuccessDevEuis *GetLoraNodesTaskResponseSuccessDevEuis `json:"SuccessDevEuis,omitempty" xml:"SuccessDevEuis,omitempty" require:"true" type:"Struct"`
}

func (s GetLoraNodesTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLoraNodesTaskResponse) GoString() string {
	return s.String()
}

func (s *GetLoraNodesTaskResponse) SetRequestId(v string) *GetLoraNodesTaskResponse {
	s.RequestId = &v
	return s
}

func (s *GetLoraNodesTaskResponse) SetSuccess(v bool) *GetLoraNodesTaskResponse {
	s.Success = &v
	return s
}

func (s *GetLoraNodesTaskResponse) SetCode(v string) *GetLoraNodesTaskResponse {
	s.Code = &v
	return s
}

func (s *GetLoraNodesTaskResponse) SetErrorMessage(v string) *GetLoraNodesTaskResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetLoraNodesTaskResponse) SetTaskId(v string) *GetLoraNodesTaskResponse {
	s.TaskId = &v
	return s
}

func (s *GetLoraNodesTaskResponse) SetTaskState(v string) *GetLoraNodesTaskResponse {
	s.TaskState = &v
	return s
}

func (s *GetLoraNodesTaskResponse) SetTotalCount(v int64) *GetLoraNodesTaskResponse {
	s.TotalCount = &v
	return s
}

func (s *GetLoraNodesTaskResponse) SetSuccessCount(v int64) *GetLoraNodesTaskResponse {
	s.SuccessCount = &v
	return s
}

func (s *GetLoraNodesTaskResponse) SetSuccessDevEuis(v *GetLoraNodesTaskResponseSuccessDevEuis) *GetLoraNodesTaskResponse {
	s.SuccessDevEuis = v
	return s
}

type GetLoraNodesTaskResponseSuccessDevEuis struct {
	SuccessDevEui []*string `json:"SuccessDevEui,omitempty" xml:"SuccessDevEui,omitempty" require:"true" type:"Repeated"`
}

func (s GetLoraNodesTaskResponseSuccessDevEuis) String() string {
	return tea.Prettify(s)
}

func (s GetLoraNodesTaskResponseSuccessDevEuis) GoString() string {
	return s.String()
}

func (s *GetLoraNodesTaskResponseSuccessDevEuis) SetSuccessDevEui(v []*string) *GetLoraNodesTaskResponseSuccessDevEuis {
	s.SuccessDevEui = v
	return s
}

type QueryLoRaJoinPermissionsRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
}

func (s QueryLoRaJoinPermissionsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLoRaJoinPermissionsRequest) GoString() string {
	return s.String()
}

func (s *QueryLoRaJoinPermissionsRequest) SetIotInstanceId(v string) *QueryLoRaJoinPermissionsRequest {
	s.IotInstanceId = &v
	return s
}

type QueryLoRaJoinPermissionsResponse struct {
	RequestId       *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success         *bool                                            `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code            *string                                          `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage    *string                                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	ProductKey      *string                                          `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	JoinPermissions *QueryLoRaJoinPermissionsResponseJoinPermissions `json:"JoinPermissions,omitempty" xml:"JoinPermissions,omitempty" require:"true" type:"Struct"`
}

func (s QueryLoRaJoinPermissionsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLoRaJoinPermissionsResponse) GoString() string {
	return s.String()
}

func (s *QueryLoRaJoinPermissionsResponse) SetRequestId(v string) *QueryLoRaJoinPermissionsResponse {
	s.RequestId = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponse) SetSuccess(v bool) *QueryLoRaJoinPermissionsResponse {
	s.Success = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponse) SetCode(v string) *QueryLoRaJoinPermissionsResponse {
	s.Code = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponse) SetErrorMessage(v string) *QueryLoRaJoinPermissionsResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponse) SetProductKey(v string) *QueryLoRaJoinPermissionsResponse {
	s.ProductKey = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponse) SetJoinPermissions(v *QueryLoRaJoinPermissionsResponseJoinPermissions) *QueryLoRaJoinPermissionsResponse {
	s.JoinPermissions = v
	return s
}

type QueryLoRaJoinPermissionsResponseJoinPermissions struct {
	JoinPermission []*QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission `json:"JoinPermission,omitempty" xml:"JoinPermission,omitempty" require:"true" type:"Repeated"`
}

func (s QueryLoRaJoinPermissionsResponseJoinPermissions) String() string {
	return tea.Prettify(s)
}

func (s QueryLoRaJoinPermissionsResponseJoinPermissions) GoString() string {
	return s.String()
}

func (s *QueryLoRaJoinPermissionsResponseJoinPermissions) SetJoinPermission(v []*QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission) *QueryLoRaJoinPermissionsResponseJoinPermissions {
	s.JoinPermission = v
	return s
}

type QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission struct {
	JoinPermissionId   *string `json:"JoinPermissionId,omitempty" xml:"JoinPermissionId,omitempty" require:"true"`
	JoinPermissionName *string `json:"JoinPermissionName,omitempty" xml:"JoinPermissionName,omitempty" require:"true"`
	JoinPermissionType *string `json:"JoinPermissionType,omitempty" xml:"JoinPermissionType,omitempty" require:"true"`
	OwnerAliyunPk      *string `json:"OwnerAliyunPk,omitempty" xml:"OwnerAliyunPk,omitempty" require:"true"`
	Enabled            *bool   `json:"Enabled,omitempty" xml:"Enabled,omitempty" require:"true"`
	ClassMode          *string `json:"ClassMode,omitempty" xml:"ClassMode,omitempty" require:"true"`
}

func (s QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission) String() string {
	return tea.Prettify(s)
}

func (s QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission) GoString() string {
	return s.String()
}

func (s *QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission) SetJoinPermissionId(v string) *QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission {
	s.JoinPermissionId = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission) SetJoinPermissionName(v string) *QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission {
	s.JoinPermissionName = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission) SetJoinPermissionType(v string) *QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission {
	s.JoinPermissionType = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission) SetOwnerAliyunPk(v string) *QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission {
	s.OwnerAliyunPk = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission) SetEnabled(v bool) *QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission {
	s.Enabled = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission) SetClassMode(v string) *QueryLoRaJoinPermissionsResponseJoinPermissionsJoinPermission {
	s.ClassMode = &v
	return s
}

type QueryEdgeInstanceDriverRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
}

func (s QueryEdgeInstanceDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDriverRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDriverRequest) SetIotInstanceId(v string) *QueryEdgeInstanceDriverRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeInstanceDriverRequest) SetInstanceId(v string) *QueryEdgeInstanceDriverRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryEdgeInstanceDriverRequest) SetCurrentPage(v int) *QueryEdgeInstanceDriverRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceDriverRequest) SetPageSize(v int) *QueryEdgeInstanceDriverRequest {
	s.PageSize = &v
	return s
}

type QueryEdgeInstanceDriverResponse struct {
	RequestId    *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryEdgeInstanceDriverResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryEdgeInstanceDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDriverResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDriverResponse) SetRequestId(v string) *QueryEdgeInstanceDriverResponse {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponse) SetSuccess(v bool) *QueryEdgeInstanceDriverResponse {
	s.Success = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponse) SetCode(v string) *QueryEdgeInstanceDriverResponse {
	s.Code = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponse) SetErrorMessage(v string) *QueryEdgeInstanceDriverResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponse) SetData(v *QueryEdgeInstanceDriverResponseData) *QueryEdgeInstanceDriverResponse {
	s.Data = v
	return s
}

type QueryEdgeInstanceDriverResponseData struct {
	Total       *int                                             `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize    *int                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage *int                                             `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	DriverList  []*QueryEdgeInstanceDriverResponseDataDriverList `json:"DriverList,omitempty" xml:"DriverList,omitempty" require:"true" type:"Repeated"`
}

func (s QueryEdgeInstanceDriverResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDriverResponseData) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDriverResponseData) SetTotal(v int) *QueryEdgeInstanceDriverResponseData {
	s.Total = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseData) SetPageSize(v int) *QueryEdgeInstanceDriverResponseData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseData) SetCurrentPage(v int) *QueryEdgeInstanceDriverResponseData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseData) SetDriverList(v []*QueryEdgeInstanceDriverResponseDataDriverList) *QueryEdgeInstanceDriverResponseData {
	s.DriverList = v
	return s
}

type QueryEdgeInstanceDriverResponseDataDriverList struct {
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
	DriverVersion *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty" require:"true"`
	OrderId       *string `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
	GmtCreate     *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModified   *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
}

func (s QueryEdgeInstanceDriverResponseDataDriverList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDriverResponseDataDriverList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDriverResponseDataDriverList) SetDriverId(v string) *QueryEdgeInstanceDriverResponseDataDriverList {
	s.DriverId = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseDataDriverList) SetDriverVersion(v string) *QueryEdgeInstanceDriverResponseDataDriverList {
	s.DriverVersion = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseDataDriverList) SetOrderId(v string) *QueryEdgeInstanceDriverResponseDataDriverList {
	s.OrderId = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseDataDriverList) SetGmtCreate(v string) *QueryEdgeInstanceDriverResponseDataDriverList {
	s.GmtCreate = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseDataDriverList) SetGmtModified(v string) *QueryEdgeInstanceDriverResponseDataDriverList {
	s.GmtModified = &v
	return s
}

type BatchUpdateDeviceNicknameRequest struct {
	IotInstanceId      *string                                               `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DeviceNicknameInfo []*BatchUpdateDeviceNicknameRequestDeviceNicknameInfo `json:"DeviceNicknameInfo,omitempty" xml:"DeviceNicknameInfo,omitempty" require:"true" type:"Repeated"`
}

func (s BatchUpdateDeviceNicknameRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateDeviceNicknameRequest) GoString() string {
	return s.String()
}

func (s *BatchUpdateDeviceNicknameRequest) SetIotInstanceId(v string) *BatchUpdateDeviceNicknameRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchUpdateDeviceNicknameRequest) SetDeviceNicknameInfo(v []*BatchUpdateDeviceNicknameRequestDeviceNicknameInfo) *BatchUpdateDeviceNicknameRequest {
	s.DeviceNicknameInfo = v
	return s
}

type BatchUpdateDeviceNicknameRequestDeviceNicknameInfo struct {
	ProductKey *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	Nickname   *string `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
	IotId      *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s BatchUpdateDeviceNicknameRequestDeviceNicknameInfo) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateDeviceNicknameRequestDeviceNicknameInfo) GoString() string {
	return s.String()
}

func (s *BatchUpdateDeviceNicknameRequestDeviceNicknameInfo) SetProductKey(v string) *BatchUpdateDeviceNicknameRequestDeviceNicknameInfo {
	s.ProductKey = &v
	return s
}

func (s *BatchUpdateDeviceNicknameRequestDeviceNicknameInfo) SetDeviceName(v string) *BatchUpdateDeviceNicknameRequestDeviceNicknameInfo {
	s.DeviceName = &v
	return s
}

func (s *BatchUpdateDeviceNicknameRequestDeviceNicknameInfo) SetNickname(v string) *BatchUpdateDeviceNicknameRequestDeviceNicknameInfo {
	s.Nickname = &v
	return s
}

func (s *BatchUpdateDeviceNicknameRequestDeviceNicknameInfo) SetIotId(v string) *BatchUpdateDeviceNicknameRequestDeviceNicknameInfo {
	s.IotId = &v
	return s
}

type BatchUpdateDeviceNicknameResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s BatchUpdateDeviceNicknameResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateDeviceNicknameResponse) GoString() string {
	return s.String()
}

func (s *BatchUpdateDeviceNicknameResponse) SetRequestId(v string) *BatchUpdateDeviceNicknameResponse {
	s.RequestId = &v
	return s
}

func (s *BatchUpdateDeviceNicknameResponse) SetSuccess(v bool) *BatchUpdateDeviceNicknameResponse {
	s.Success = &v
	return s
}

func (s *BatchUpdateDeviceNicknameResponse) SetCode(v string) *BatchUpdateDeviceNicknameResponse {
	s.Code = &v
	return s
}

func (s *BatchUpdateDeviceNicknameResponse) SetErrorMessage(v string) *BatchUpdateDeviceNicknameResponse {
	s.ErrorMessage = &v
	return s
}

type QueryDeviceFileRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	FileId        *string `json:"FileId,omitempty" xml:"FileId,omitempty" require:"true"`
}

func (s QueryDeviceFileRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceFileRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceFileRequest) SetIotInstanceId(v string) *QueryDeviceFileRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceFileRequest) SetProductKey(v string) *QueryDeviceFileRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceFileRequest) SetDeviceName(v string) *QueryDeviceFileRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceFileRequest) SetIotId(v string) *QueryDeviceFileRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceFileRequest) SetFileId(v string) *QueryDeviceFileRequest {
	s.FileId = &v
	return s
}

type QueryDeviceFileResponse struct {
	RequestId    *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                        `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryDeviceFileResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceFileResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceFileResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceFileResponse) SetRequestId(v string) *QueryDeviceFileResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceFileResponse) SetSuccess(v bool) *QueryDeviceFileResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceFileResponse) SetCode(v string) *QueryDeviceFileResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceFileResponse) SetErrorMessage(v string) *QueryDeviceFileResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceFileResponse) SetData(v *QueryDeviceFileResponseData) *QueryDeviceFileResponse {
	s.Data = v
	return s
}

type QueryDeviceFileResponseData struct {
	FileId       *string `json:"FileId,omitempty" xml:"FileId,omitempty" require:"true"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Size         *string `json:"Size,omitempty" xml:"Size,omitempty" require:"true"`
	UtcCreatedOn *string `json:"UtcCreatedOn,omitempty" xml:"UtcCreatedOn,omitempty" require:"true"`
	DownloadUrl  *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty" require:"true"`
}

func (s QueryDeviceFileResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceFileResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceFileResponseData) SetFileId(v string) *QueryDeviceFileResponseData {
	s.FileId = &v
	return s
}

func (s *QueryDeviceFileResponseData) SetName(v string) *QueryDeviceFileResponseData {
	s.Name = &v
	return s
}

func (s *QueryDeviceFileResponseData) SetSize(v string) *QueryDeviceFileResponseData {
	s.Size = &v
	return s
}

func (s *QueryDeviceFileResponseData) SetUtcCreatedOn(v string) *QueryDeviceFileResponseData {
	s.UtcCreatedOn = &v
	return s
}

func (s *QueryDeviceFileResponseData) SetDownloadUrl(v string) *QueryDeviceFileResponseData {
	s.DownloadUrl = &v
	return s
}

type QueryDeviceFileListRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s QueryDeviceFileListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceFileListRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceFileListRequest) SetIotInstanceId(v string) *QueryDeviceFileListRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceFileListRequest) SetPageSize(v int) *QueryDeviceFileListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceFileListRequest) SetProductKey(v string) *QueryDeviceFileListRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceFileListRequest) SetDeviceName(v string) *QueryDeviceFileListRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceFileListRequest) SetIotId(v string) *QueryDeviceFileListRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceFileListRequest) SetCurrentPage(v int) *QueryDeviceFileListRequest {
	s.CurrentPage = &v
	return s
}

type QueryDeviceFileListResponse struct {
	RequestId    *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                            `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                          `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	CurrentPage  *int                             `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageCount    *int                             `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	PageSize     *int                             `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	Total        *int                             `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	Data         *QueryDeviceFileListResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceFileListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceFileListResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceFileListResponse) SetRequestId(v string) *QueryDeviceFileListResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceFileListResponse) SetSuccess(v bool) *QueryDeviceFileListResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceFileListResponse) SetCode(v string) *QueryDeviceFileListResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceFileListResponse) SetErrorMessage(v string) *QueryDeviceFileListResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceFileListResponse) SetCurrentPage(v int) *QueryDeviceFileListResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryDeviceFileListResponse) SetPageCount(v int) *QueryDeviceFileListResponse {
	s.PageCount = &v
	return s
}

func (s *QueryDeviceFileListResponse) SetPageSize(v int) *QueryDeviceFileListResponse {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceFileListResponse) SetTotal(v int) *QueryDeviceFileListResponse {
	s.Total = &v
	return s
}

func (s *QueryDeviceFileListResponse) SetData(v *QueryDeviceFileListResponseData) *QueryDeviceFileListResponse {
	s.Data = v
	return s
}

type QueryDeviceFileListResponseData struct {
	FileSummary []*QueryDeviceFileListResponseDataFileSummary `json:"FileSummary,omitempty" xml:"FileSummary,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceFileListResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceFileListResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceFileListResponseData) SetFileSummary(v []*QueryDeviceFileListResponseDataFileSummary) *QueryDeviceFileListResponseData {
	s.FileSummary = v
	return s
}

type QueryDeviceFileListResponseDataFileSummary struct {
	FileId       *string `json:"FileId,omitempty" xml:"FileId,omitempty" require:"true"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Size         *string `json:"Size,omitempty" xml:"Size,omitempty" require:"true"`
	UtcCreatedOn *string `json:"UtcCreatedOn,omitempty" xml:"UtcCreatedOn,omitempty" require:"true"`
}

func (s QueryDeviceFileListResponseDataFileSummary) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceFileListResponseDataFileSummary) GoString() string {
	return s.String()
}

func (s *QueryDeviceFileListResponseDataFileSummary) SetFileId(v string) *QueryDeviceFileListResponseDataFileSummary {
	s.FileId = &v
	return s
}

func (s *QueryDeviceFileListResponseDataFileSummary) SetName(v string) *QueryDeviceFileListResponseDataFileSummary {
	s.Name = &v
	return s
}

func (s *QueryDeviceFileListResponseDataFileSummary) SetSize(v string) *QueryDeviceFileListResponseDataFileSummary {
	s.Size = &v
	return s
}

func (s *QueryDeviceFileListResponseDataFileSummary) SetUtcCreatedOn(v string) *QueryDeviceFileListResponseDataFileSummary {
	s.UtcCreatedOn = &v
	return s
}

type DeleteDeviceFileRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	FileId        *string `json:"FileId,omitempty" xml:"FileId,omitempty" require:"true"`
}

func (s DeleteDeviceFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceFileRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeviceFileRequest) SetIotInstanceId(v string) *DeleteDeviceFileRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteDeviceFileRequest) SetProductKey(v string) *DeleteDeviceFileRequest {
	s.ProductKey = &v
	return s
}

func (s *DeleteDeviceFileRequest) SetDeviceName(v string) *DeleteDeviceFileRequest {
	s.DeviceName = &v
	return s
}

func (s *DeleteDeviceFileRequest) SetIotId(v string) *DeleteDeviceFileRequest {
	s.IotId = &v
	return s
}

func (s *DeleteDeviceFileRequest) SetFileId(v string) *DeleteDeviceFileRequest {
	s.FileId = &v
	return s
}

type DeleteDeviceFileResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteDeviceFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceFileResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeviceFileResponse) SetRequestId(v string) *DeleteDeviceFileResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteDeviceFileResponse) SetSuccess(v bool) *DeleteDeviceFileResponse {
	s.Success = &v
	return s
}

func (s *DeleteDeviceFileResponse) SetCode(v string) *DeleteDeviceFileResponse {
	s.Code = &v
	return s
}

func (s *DeleteDeviceFileResponse) SetErrorMessage(v string) *DeleteDeviceFileResponse {
	s.ErrorMessage = &v
	return s
}

type GetNodesAddingTaskRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	TaskId        *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
}

func (s GetNodesAddingTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNodesAddingTaskRequest) GoString() string {
	return s.String()
}

func (s *GetNodesAddingTaskRequest) SetIotInstanceId(v string) *GetNodesAddingTaskRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetNodesAddingTaskRequest) SetTaskId(v string) *GetNodesAddingTaskRequest {
	s.TaskId = &v
	return s
}

type GetNodesAddingTaskResponse struct {
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success        *bool                                     `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code           *string                                   `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage   *string                                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	TaskId         *string                                   `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	TaskState      *string                                   `json:"TaskState,omitempty" xml:"TaskState,omitempty" require:"true"`
	TotalCount     *int64                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	SuccessCount   *int64                                    `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty" require:"true"`
	SuccessDevEuis *GetNodesAddingTaskResponseSuccessDevEuis `json:"SuccessDevEuis,omitempty" xml:"SuccessDevEuis,omitempty" require:"true" type:"Struct"`
}

func (s GetNodesAddingTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNodesAddingTaskResponse) GoString() string {
	return s.String()
}

func (s *GetNodesAddingTaskResponse) SetRequestId(v string) *GetNodesAddingTaskResponse {
	s.RequestId = &v
	return s
}

func (s *GetNodesAddingTaskResponse) SetSuccess(v bool) *GetNodesAddingTaskResponse {
	s.Success = &v
	return s
}

func (s *GetNodesAddingTaskResponse) SetCode(v string) *GetNodesAddingTaskResponse {
	s.Code = &v
	return s
}

func (s *GetNodesAddingTaskResponse) SetErrorMessage(v string) *GetNodesAddingTaskResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetNodesAddingTaskResponse) SetTaskId(v string) *GetNodesAddingTaskResponse {
	s.TaskId = &v
	return s
}

func (s *GetNodesAddingTaskResponse) SetTaskState(v string) *GetNodesAddingTaskResponse {
	s.TaskState = &v
	return s
}

func (s *GetNodesAddingTaskResponse) SetTotalCount(v int64) *GetNodesAddingTaskResponse {
	s.TotalCount = &v
	return s
}

func (s *GetNodesAddingTaskResponse) SetSuccessCount(v int64) *GetNodesAddingTaskResponse {
	s.SuccessCount = &v
	return s
}

func (s *GetNodesAddingTaskResponse) SetSuccessDevEuis(v *GetNodesAddingTaskResponseSuccessDevEuis) *GetNodesAddingTaskResponse {
	s.SuccessDevEuis = v
	return s
}

type GetNodesAddingTaskResponseSuccessDevEuis struct {
	SuccessDevEui []*string `json:"SuccessDevEui,omitempty" xml:"SuccessDevEui,omitempty" require:"true" type:"Repeated"`
}

func (s GetNodesAddingTaskResponseSuccessDevEuis) String() string {
	return tea.Prettify(s)
}

func (s GetNodesAddingTaskResponseSuccessDevEuis) GoString() string {
	return s.String()
}

func (s *GetNodesAddingTaskResponseSuccessDevEuis) SetSuccessDevEui(v []*string) *GetNodesAddingTaskResponseSuccessDevEuis {
	s.SuccessDevEui = v
	return s
}

type SetDeviceDesiredPropertyRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Items         *string `json:"Items,omitempty" xml:"Items,omitempty" require:"true"`
	Versions      *string `json:"Versions,omitempty" xml:"Versions,omitempty" require:"true"`
}

func (s SetDeviceDesiredPropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDeviceDesiredPropertyRequest) GoString() string {
	return s.String()
}

func (s *SetDeviceDesiredPropertyRequest) SetIotInstanceId(v string) *SetDeviceDesiredPropertyRequest {
	s.IotInstanceId = &v
	return s
}

func (s *SetDeviceDesiredPropertyRequest) SetIotId(v string) *SetDeviceDesiredPropertyRequest {
	s.IotId = &v
	return s
}

func (s *SetDeviceDesiredPropertyRequest) SetDeviceName(v string) *SetDeviceDesiredPropertyRequest {
	s.DeviceName = &v
	return s
}

func (s *SetDeviceDesiredPropertyRequest) SetProductKey(v string) *SetDeviceDesiredPropertyRequest {
	s.ProductKey = &v
	return s
}

func (s *SetDeviceDesiredPropertyRequest) SetItems(v string) *SetDeviceDesiredPropertyRequest {
	s.Items = &v
	return s
}

func (s *SetDeviceDesiredPropertyRequest) SetVersions(v string) *SetDeviceDesiredPropertyRequest {
	s.Versions = &v
	return s
}

type SetDeviceDesiredPropertyResponse struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                 `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string                               `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data         *SetDeviceDesiredPropertyResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s SetDeviceDesiredPropertyResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDeviceDesiredPropertyResponse) GoString() string {
	return s.String()
}

func (s *SetDeviceDesiredPropertyResponse) SetRequestId(v string) *SetDeviceDesiredPropertyResponse {
	s.RequestId = &v
	return s
}

func (s *SetDeviceDesiredPropertyResponse) SetSuccess(v bool) *SetDeviceDesiredPropertyResponse {
	s.Success = &v
	return s
}

func (s *SetDeviceDesiredPropertyResponse) SetErrorMessage(v string) *SetDeviceDesiredPropertyResponse {
	s.ErrorMessage = &v
	return s
}

func (s *SetDeviceDesiredPropertyResponse) SetCode(v string) *SetDeviceDesiredPropertyResponse {
	s.Code = &v
	return s
}

func (s *SetDeviceDesiredPropertyResponse) SetData(v *SetDeviceDesiredPropertyResponseData) *SetDeviceDesiredPropertyResponse {
	s.Data = v
	return s
}

type SetDeviceDesiredPropertyResponseData struct {
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty" require:"true"`
	Versions  *string `json:"Versions,omitempty" xml:"Versions,omitempty" require:"true"`
}

func (s SetDeviceDesiredPropertyResponseData) String() string {
	return tea.Prettify(s)
}

func (s SetDeviceDesiredPropertyResponseData) GoString() string {
	return s.String()
}

func (s *SetDeviceDesiredPropertyResponseData) SetMessageId(v string) *SetDeviceDesiredPropertyResponseData {
	s.MessageId = &v
	return s
}

func (s *SetDeviceDesiredPropertyResponseData) SetVersions(v string) *SetDeviceDesiredPropertyResponseData {
	s.Versions = &v
	return s
}

type QueryDeviceDesiredPropertyRequest struct {
	IotInstanceId   *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey      *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName      *string   `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	Identifier      []*string `json:"Identifier,omitempty" xml:"Identifier,omitempty" type:"Repeated"`
	IotId           *string   `json:"IotId,omitempty" xml:"IotId,omitempty"`
	FunctionBlockId *string   `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
}

func (s QueryDeviceDesiredPropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDesiredPropertyRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceDesiredPropertyRequest) SetIotInstanceId(v string) *QueryDeviceDesiredPropertyRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceDesiredPropertyRequest) SetProductKey(v string) *QueryDeviceDesiredPropertyRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceDesiredPropertyRequest) SetDeviceName(v string) *QueryDeviceDesiredPropertyRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceDesiredPropertyRequest) SetIdentifier(v []*string) *QueryDeviceDesiredPropertyRequest {
	s.Identifier = v
	return s
}

func (s *QueryDeviceDesiredPropertyRequest) SetIotId(v string) *QueryDeviceDesiredPropertyRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceDesiredPropertyRequest) SetFunctionBlockId(v string) *QueryDeviceDesiredPropertyRequest {
	s.FunctionBlockId = &v
	return s
}

type QueryDeviceDesiredPropertyResponse struct {
	RequestId    *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                 `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                 `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryDeviceDesiredPropertyResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceDesiredPropertyResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDesiredPropertyResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceDesiredPropertyResponse) SetRequestId(v string) *QueryDeviceDesiredPropertyResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponse) SetSuccess(v bool) *QueryDeviceDesiredPropertyResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponse) SetCode(v string) *QueryDeviceDesiredPropertyResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponse) SetErrorMessage(v string) *QueryDeviceDesiredPropertyResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponse) SetData(v *QueryDeviceDesiredPropertyResponseData) *QueryDeviceDesiredPropertyResponse {
	s.Data = v
	return s
}

type QueryDeviceDesiredPropertyResponseData struct {
	List *QueryDeviceDesiredPropertyResponseDataList `json:"List,omitempty" xml:"List,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceDesiredPropertyResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDesiredPropertyResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceDesiredPropertyResponseData) SetList(v *QueryDeviceDesiredPropertyResponseDataList) *QueryDeviceDesiredPropertyResponseData {
	s.List = v
	return s
}

type QueryDeviceDesiredPropertyResponseDataList struct {
	DesiredPropertyInfo []*QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo `json:"DesiredPropertyInfo,omitempty" xml:"DesiredPropertyInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceDesiredPropertyResponseDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDesiredPropertyResponseDataList) GoString() string {
	return s.String()
}

func (s *QueryDeviceDesiredPropertyResponseDataList) SetDesiredPropertyInfo(v []*QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo) *QueryDeviceDesiredPropertyResponseDataList {
	s.DesiredPropertyInfo = v
	return s
}

type QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo struct {
	Unit       *string `json:"Unit,omitempty" xml:"Unit,omitempty" require:"true"`
	Identifier *string `json:"Identifier,omitempty" xml:"Identifier,omitempty" require:"true"`
	DataType   *string `json:"DataType,omitempty" xml:"DataType,omitempty" require:"true"`
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty" require:"true"`
	Value      *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Version    *int64  `json:"Version,omitempty" xml:"Version,omitempty" require:"true"`
}

func (s QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo) SetUnit(v string) *QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo {
	s.Unit = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo) SetIdentifier(v string) *QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo) SetDataType(v string) *QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo {
	s.DataType = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo) SetTime(v string) *QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo {
	s.Time = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo) SetValue(v string) *QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo {
	s.Value = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo) SetName(v string) *QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo {
	s.Name = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo) SetVersion(v int64) *QueryDeviceDesiredPropertyResponseDataListDesiredPropertyInfo {
	s.Version = &v
	return s
}

type QueryEdgeInstanceHistoricDeploymentRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s QueryEdgeInstanceHistoricDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceHistoricDeploymentRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceHistoricDeploymentRequest) SetIotInstanceId(v string) *QueryEdgeInstanceHistoricDeploymentRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentRequest) SetInstanceId(v string) *QueryEdgeInstanceHistoricDeploymentRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentRequest) SetCurrentPage(v int) *QueryEdgeInstanceHistoricDeploymentRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentRequest) SetPageSize(v int) *QueryEdgeInstanceHistoricDeploymentRequest {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentRequest) SetStartTime(v int64) *QueryEdgeInstanceHistoricDeploymentRequest {
	s.StartTime = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentRequest) SetEndTime(v int64) *QueryEdgeInstanceHistoricDeploymentRequest {
	s.EndTime = &v
	return s
}

type QueryEdgeInstanceHistoricDeploymentResponse struct {
	RequestId    *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                            `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                          `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryEdgeInstanceHistoricDeploymentResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryEdgeInstanceHistoricDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceHistoricDeploymentResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceHistoricDeploymentResponse) SetRequestId(v string) *QueryEdgeInstanceHistoricDeploymentResponse {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponse) SetSuccess(v bool) *QueryEdgeInstanceHistoricDeploymentResponse {
	s.Success = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponse) SetCode(v string) *QueryEdgeInstanceHistoricDeploymentResponse {
	s.Code = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponse) SetErrorMessage(v string) *QueryEdgeInstanceHistoricDeploymentResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponse) SetData(v *QueryEdgeInstanceHistoricDeploymentResponseData) *QueryEdgeInstanceHistoricDeploymentResponse {
	s.Data = v
	return s
}

type QueryEdgeInstanceHistoricDeploymentResponseData struct {
	Total          *int                                                             `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize       *int                                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage    *int                                                             `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	DeploymentList []*QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList `json:"DeploymentList,omitempty" xml:"DeploymentList,omitempty" require:"true" type:"Repeated"`
}

func (s QueryEdgeInstanceHistoricDeploymentResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceHistoricDeploymentResponseData) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseData) SetTotal(v int) *QueryEdgeInstanceHistoricDeploymentResponseData {
	s.Total = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseData) SetPageSize(v int) *QueryEdgeInstanceHistoricDeploymentResponseData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseData) SetCurrentPage(v int) *QueryEdgeInstanceHistoricDeploymentResponseData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseData) SetDeploymentList(v []*QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList) *QueryEdgeInstanceHistoricDeploymentResponseData {
	s.DeploymentList = v
	return s
}

type QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList struct {
	GmtCreate             *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModified           *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
	GmtCompleted          *string `json:"GmtCompleted,omitempty" xml:"GmtCompleted,omitempty" require:"true"`
	DeploymentId          *string `json:"DeploymentId,omitempty" xml:"DeploymentId,omitempty" require:"true"`
	Description           *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Status                *int    `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Type                  *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	GmtCreateTimestamp    *int64  `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty" require:"true"`
	GmtModifiedTimestamp  *int64  `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty" require:"true"`
	GmtCompletedTimestamp *int64  `json:"GmtCompletedTimestamp,omitempty" xml:"GmtCompletedTimestamp,omitempty" require:"true"`
}

func (s QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList) SetGmtCreate(v string) *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList {
	s.GmtCreate = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList) SetGmtModified(v string) *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList {
	s.GmtModified = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList) SetGmtCompleted(v string) *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList {
	s.GmtCompleted = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList) SetDeploymentId(v string) *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList {
	s.DeploymentId = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList) SetDescription(v string) *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList {
	s.Description = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList) SetStatus(v int) *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList {
	s.Status = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList) SetType(v string) *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList {
	s.Type = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList) SetGmtCreateTimestamp(v int64) *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList) SetGmtModifiedTimestamp(v int64) *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList) SetGmtCompletedTimestamp(v int64) *QueryEdgeInstanceHistoricDeploymentResponseDataDeploymentList {
	s.GmtCompletedTimestamp = &v
	return s
}

type CreateProductTagsRequest struct {
	IotInstanceId *string                               `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string                               `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ProductTag    []*CreateProductTagsRequestProductTag `json:"ProductTag,omitempty" xml:"ProductTag,omitempty" require:"true" type:"Repeated"`
}

func (s CreateProductTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProductTagsRequest) GoString() string {
	return s.String()
}

func (s *CreateProductTagsRequest) SetIotInstanceId(v string) *CreateProductTagsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateProductTagsRequest) SetProductKey(v string) *CreateProductTagsRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateProductTagsRequest) SetProductTag(v []*CreateProductTagsRequestProductTag) *CreateProductTagsRequest {
	s.ProductTag = v
	return s
}

type CreateProductTagsRequestProductTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s CreateProductTagsRequestProductTag) String() string {
	return tea.Prettify(s)
}

func (s CreateProductTagsRequestProductTag) GoString() string {
	return s.String()
}

func (s *CreateProductTagsRequestProductTag) SetTagKey(v string) *CreateProductTagsRequestProductTag {
	s.TagKey = &v
	return s
}

func (s *CreateProductTagsRequestProductTag) SetTagValue(v string) *CreateProductTagsRequestProductTag {
	s.TagValue = &v
	return s
}

type CreateProductTagsResponse struct {
	RequestId          *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success            *bool                                        `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage       *string                                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code               *string                                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	InvalidProductTags *CreateProductTagsResponseInvalidProductTags `json:"InvalidProductTags,omitempty" xml:"InvalidProductTags,omitempty" require:"true" type:"Struct"`
}

func (s CreateProductTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProductTagsResponse) GoString() string {
	return s.String()
}

func (s *CreateProductTagsResponse) SetRequestId(v string) *CreateProductTagsResponse {
	s.RequestId = &v
	return s
}

func (s *CreateProductTagsResponse) SetSuccess(v bool) *CreateProductTagsResponse {
	s.Success = &v
	return s
}

func (s *CreateProductTagsResponse) SetErrorMessage(v string) *CreateProductTagsResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateProductTagsResponse) SetCode(v string) *CreateProductTagsResponse {
	s.Code = &v
	return s
}

func (s *CreateProductTagsResponse) SetInvalidProductTags(v *CreateProductTagsResponseInvalidProductTags) *CreateProductTagsResponse {
	s.InvalidProductTags = v
	return s
}

type CreateProductTagsResponseInvalidProductTags struct {
	ProductTag []*CreateProductTagsResponseInvalidProductTagsProductTag `json:"ProductTag,omitempty" xml:"ProductTag,omitempty" require:"true" type:"Repeated"`
}

func (s CreateProductTagsResponseInvalidProductTags) String() string {
	return tea.Prettify(s)
}

func (s CreateProductTagsResponseInvalidProductTags) GoString() string {
	return s.String()
}

func (s *CreateProductTagsResponseInvalidProductTags) SetProductTag(v []*CreateProductTagsResponseInvalidProductTagsProductTag) *CreateProductTagsResponseInvalidProductTags {
	s.ProductTag = v
	return s
}

type CreateProductTagsResponseInvalidProductTagsProductTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty" require:"true"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty" require:"true"`
}

func (s CreateProductTagsResponseInvalidProductTagsProductTag) String() string {
	return tea.Prettify(s)
}

func (s CreateProductTagsResponseInvalidProductTagsProductTag) GoString() string {
	return s.String()
}

func (s *CreateProductTagsResponseInvalidProductTagsProductTag) SetTagKey(v string) *CreateProductTagsResponseInvalidProductTagsProductTag {
	s.TagKey = &v
	return s
}

func (s *CreateProductTagsResponseInvalidProductTagsProductTag) SetTagValue(v string) *CreateProductTagsResponseInvalidProductTagsProductTag {
	s.TagValue = &v
	return s
}

type UpdateProductTagsRequest struct {
	IotInstanceId *string                               `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string                               `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ProductTag    []*UpdateProductTagsRequestProductTag `json:"ProductTag,omitempty" xml:"ProductTag,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateProductTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductTagsRequest) GoString() string {
	return s.String()
}

func (s *UpdateProductTagsRequest) SetIotInstanceId(v string) *UpdateProductTagsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateProductTagsRequest) SetProductKey(v string) *UpdateProductTagsRequest {
	s.ProductKey = &v
	return s
}

func (s *UpdateProductTagsRequest) SetProductTag(v []*UpdateProductTagsRequestProductTag) *UpdateProductTagsRequest {
	s.ProductTag = v
	return s
}

type UpdateProductTagsRequestProductTag struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s UpdateProductTagsRequestProductTag) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductTagsRequestProductTag) GoString() string {
	return s.String()
}

func (s *UpdateProductTagsRequestProductTag) SetTagValue(v string) *UpdateProductTagsRequestProductTag {
	s.TagValue = &v
	return s
}

func (s *UpdateProductTagsRequestProductTag) SetTagKey(v string) *UpdateProductTagsRequestProductTag {
	s.TagKey = &v
	return s
}

type UpdateProductTagsResponse struct {
	RequestId          *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success            *bool                                        `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage       *string                                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code               *string                                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	InvalidProductTags *UpdateProductTagsResponseInvalidProductTags `json:"InvalidProductTags,omitempty" xml:"InvalidProductTags,omitempty" require:"true" type:"Struct"`
}

func (s UpdateProductTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductTagsResponse) GoString() string {
	return s.String()
}

func (s *UpdateProductTagsResponse) SetRequestId(v string) *UpdateProductTagsResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateProductTagsResponse) SetSuccess(v bool) *UpdateProductTagsResponse {
	s.Success = &v
	return s
}

func (s *UpdateProductTagsResponse) SetErrorMessage(v string) *UpdateProductTagsResponse {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateProductTagsResponse) SetCode(v string) *UpdateProductTagsResponse {
	s.Code = &v
	return s
}

func (s *UpdateProductTagsResponse) SetInvalidProductTags(v *UpdateProductTagsResponseInvalidProductTags) *UpdateProductTagsResponse {
	s.InvalidProductTags = v
	return s
}

type UpdateProductTagsResponseInvalidProductTags struct {
	ProductTag []*UpdateProductTagsResponseInvalidProductTagsProductTag `json:"ProductTag,omitempty" xml:"ProductTag,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateProductTagsResponseInvalidProductTags) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductTagsResponseInvalidProductTags) GoString() string {
	return s.String()
}

func (s *UpdateProductTagsResponseInvalidProductTags) SetProductTag(v []*UpdateProductTagsResponseInvalidProductTagsProductTag) *UpdateProductTagsResponseInvalidProductTags {
	s.ProductTag = v
	return s
}

type UpdateProductTagsResponseInvalidProductTagsProductTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty" require:"true"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty" require:"true"`
}

func (s UpdateProductTagsResponseInvalidProductTagsProductTag) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductTagsResponseInvalidProductTagsProductTag) GoString() string {
	return s.String()
}

func (s *UpdateProductTagsResponseInvalidProductTagsProductTag) SetTagKey(v string) *UpdateProductTagsResponseInvalidProductTagsProductTag {
	s.TagKey = &v
	return s
}

func (s *UpdateProductTagsResponseInvalidProductTagsProductTag) SetTagValue(v string) *UpdateProductTagsResponseInvalidProductTagsProductTag {
	s.TagValue = &v
	return s
}

type DeleteProductTagsRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductTagKey []*string `json:"ProductTagKey,omitempty" xml:"ProductTagKey,omitempty" require:"true" type:"Repeated"`
	ProductKey    *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
}

func (s DeleteProductTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProductTagsRequest) GoString() string {
	return s.String()
}

func (s *DeleteProductTagsRequest) SetIotInstanceId(v string) *DeleteProductTagsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteProductTagsRequest) SetProductTagKey(v []*string) *DeleteProductTagsRequest {
	s.ProductTagKey = v
	return s
}

func (s *DeleteProductTagsRequest) SetProductKey(v string) *DeleteProductTagsRequest {
	s.ProductKey = &v
	return s
}

type DeleteProductTagsResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
}

func (s DeleteProductTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProductTagsResponse) GoString() string {
	return s.String()
}

func (s *DeleteProductTagsResponse) SetRequestId(v string) *DeleteProductTagsResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteProductTagsResponse) SetSuccess(v bool) *DeleteProductTagsResponse {
	s.Success = &v
	return s
}

func (s *DeleteProductTagsResponse) SetErrorMessage(v string) *DeleteProductTagsResponse {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteProductTagsResponse) SetCode(v string) *DeleteProductTagsResponse {
	s.Code = &v
	return s
}

type ListProductTagsRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
}

func (s ListProductTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProductTagsRequest) GoString() string {
	return s.String()
}

func (s *ListProductTagsRequest) SetIotInstanceId(v string) *ListProductTagsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListProductTagsRequest) SetProductKey(v string) *ListProductTagsRequest {
	s.ProductKey = &v
	return s
}

type ListProductTagsResponse struct {
	RequestId    *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                        `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data         *ListProductTagsResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListProductTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProductTagsResponse) GoString() string {
	return s.String()
}

func (s *ListProductTagsResponse) SetRequestId(v string) *ListProductTagsResponse {
	s.RequestId = &v
	return s
}

func (s *ListProductTagsResponse) SetSuccess(v bool) *ListProductTagsResponse {
	s.Success = &v
	return s
}

func (s *ListProductTagsResponse) SetErrorMessage(v string) *ListProductTagsResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListProductTagsResponse) SetCode(v string) *ListProductTagsResponse {
	s.Code = &v
	return s
}

func (s *ListProductTagsResponse) SetData(v *ListProductTagsResponseData) *ListProductTagsResponse {
	s.Data = v
	return s
}

type ListProductTagsResponseData struct {
	ProductTag []*ListProductTagsResponseDataProductTag `json:"ProductTag,omitempty" xml:"ProductTag,omitempty" require:"true" type:"Repeated"`
}

func (s ListProductTagsResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListProductTagsResponseData) GoString() string {
	return s.String()
}

func (s *ListProductTagsResponseData) SetProductTag(v []*ListProductTagsResponseDataProductTag) *ListProductTagsResponseData {
	s.ProductTag = v
	return s
}

type ListProductTagsResponseDataProductTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty" require:"true"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty" require:"true"`
}

func (s ListProductTagsResponseDataProductTag) String() string {
	return tea.Prettify(s)
}

func (s ListProductTagsResponseDataProductTag) GoString() string {
	return s.String()
}

func (s *ListProductTagsResponseDataProductTag) SetTagKey(v string) *ListProductTagsResponseDataProductTag {
	s.TagKey = &v
	return s
}

func (s *ListProductTagsResponseDataProductTag) SetTagValue(v string) *ListProductTagsResponseDataProductTag {
	s.TagValue = &v
	return s
}

type ListProductByTagsRequest struct {
	IotInstanceId *string                               `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	CurrentPage   *int                                  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize      *int                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductTag    []*ListProductByTagsRequestProductTag `json:"ProductTag,omitempty" xml:"ProductTag,omitempty" require:"true" type:"Repeated"`
}

func (s ListProductByTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProductByTagsRequest) GoString() string {
	return s.String()
}

func (s *ListProductByTagsRequest) SetIotInstanceId(v string) *ListProductByTagsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListProductByTagsRequest) SetCurrentPage(v int) *ListProductByTagsRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListProductByTagsRequest) SetPageSize(v int) *ListProductByTagsRequest {
	s.PageSize = &v
	return s
}

func (s *ListProductByTagsRequest) SetProductTag(v []*ListProductByTagsRequestProductTag) *ListProductByTagsRequest {
	s.ProductTag = v
	return s
}

type ListProductByTagsRequestProductTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty" require:"true"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListProductByTagsRequestProductTag) String() string {
	return tea.Prettify(s)
}

func (s ListProductByTagsRequestProductTag) GoString() string {
	return s.String()
}

func (s *ListProductByTagsRequestProductTag) SetTagKey(v string) *ListProductByTagsRequestProductTag {
	s.TagKey = &v
	return s
}

func (s *ListProductByTagsRequestProductTag) SetTagValue(v string) *ListProductByTagsRequestProductTag {
	s.TagValue = &v
	return s
}

type ListProductByTagsResponse struct {
	RequestId    *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                  `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ProductInfos *ListProductByTagsResponseProductInfos `json:"ProductInfos,omitempty" xml:"ProductInfos,omitempty" require:"true" type:"Struct"`
}

func (s ListProductByTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProductByTagsResponse) GoString() string {
	return s.String()
}

func (s *ListProductByTagsResponse) SetRequestId(v string) *ListProductByTagsResponse {
	s.RequestId = &v
	return s
}

func (s *ListProductByTagsResponse) SetSuccess(v bool) *ListProductByTagsResponse {
	s.Success = &v
	return s
}

func (s *ListProductByTagsResponse) SetErrorMessage(v string) *ListProductByTagsResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListProductByTagsResponse) SetCode(v string) *ListProductByTagsResponse {
	s.Code = &v
	return s
}

func (s *ListProductByTagsResponse) SetProductInfos(v *ListProductByTagsResponseProductInfos) *ListProductByTagsResponse {
	s.ProductInfos = v
	return s
}

type ListProductByTagsResponseProductInfos struct {
	ProductInfo []*ListProductByTagsResponseProductInfosProductInfo `json:"ProductInfo,omitempty" xml:"ProductInfo,omitempty" require:"true" type:"Repeated"`
}

func (s ListProductByTagsResponseProductInfos) String() string {
	return tea.Prettify(s)
}

func (s ListProductByTagsResponseProductInfos) GoString() string {
	return s.String()
}

func (s *ListProductByTagsResponseProductInfos) SetProductInfo(v []*ListProductByTagsResponseProductInfosProductInfo) *ListProductByTagsResponseProductInfos {
	s.ProductInfo = v
	return s
}

type ListProductByTagsResponseProductInfosProductInfo struct {
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty" require:"true"`
	ProductKey  *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	NodeType    *int    `json:"NodeType,omitempty" xml:"NodeType,omitempty" require:"true"`
}

func (s ListProductByTagsResponseProductInfosProductInfo) String() string {
	return tea.Prettify(s)
}

func (s ListProductByTagsResponseProductInfosProductInfo) GoString() string {
	return s.String()
}

func (s *ListProductByTagsResponseProductInfosProductInfo) SetProductName(v string) *ListProductByTagsResponseProductInfosProductInfo {
	s.ProductName = &v
	return s
}

func (s *ListProductByTagsResponseProductInfosProductInfo) SetProductKey(v string) *ListProductByTagsResponseProductInfosProductInfo {
	s.ProductKey = &v
	return s
}

func (s *ListProductByTagsResponseProductInfosProductInfo) SetCreateTime(v int64) *ListProductByTagsResponseProductInfosProductInfo {
	s.CreateTime = &v
	return s
}

func (s *ListProductByTagsResponseProductInfosProductInfo) SetDescription(v string) *ListProductByTagsResponseProductInfosProductInfo {
	s.Description = &v
	return s
}

func (s *ListProductByTagsResponseProductInfosProductInfo) SetNodeType(v int) *ListProductByTagsResponseProductInfosProductInfo {
	s.NodeType = &v
	return s
}

type QueryDeviceGroupByTagsRequest struct {
	IotInstanceId *string                             `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Tag           []*QueryDeviceGroupByTagsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	CurrentPage   *int                                `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize      *int                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s QueryDeviceGroupByTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByTagsRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByTagsRequest) SetIotInstanceId(v string) *QueryDeviceGroupByTagsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceGroupByTagsRequest) SetTag(v []*QueryDeviceGroupByTagsRequestTag) *QueryDeviceGroupByTagsRequest {
	s.Tag = v
	return s
}

func (s *QueryDeviceGroupByTagsRequest) SetCurrentPage(v int) *QueryDeviceGroupByTagsRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryDeviceGroupByTagsRequest) SetPageSize(v int) *QueryDeviceGroupByTagsRequest {
	s.PageSize = &v
	return s
}

type QueryDeviceGroupByTagsRequestTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty" require:"true"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty" require:"true"`
}

func (s QueryDeviceGroupByTagsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByTagsRequestTag) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByTagsRequestTag) SetTagKey(v string) *QueryDeviceGroupByTagsRequestTag {
	s.TagKey = &v
	return s
}

func (s *QueryDeviceGroupByTagsRequestTag) SetTagValue(v string) *QueryDeviceGroupByTagsRequestTag {
	s.TagValue = &v
	return s
}

type QueryDeviceGroupByTagsResponse struct {
	RequestId    *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                               `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                             `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Page         *int                                `json:"Page,omitempty" xml:"Page,omitempty" require:"true"`
	PageSize     *int                                `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageCount    *int                                `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	Total        *int                                `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	Data         *QueryDeviceGroupByTagsResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceGroupByTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByTagsResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByTagsResponse) SetRequestId(v string) *QueryDeviceGroupByTagsResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponse) SetSuccess(v bool) *QueryDeviceGroupByTagsResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponse) SetCode(v string) *QueryDeviceGroupByTagsResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponse) SetErrorMessage(v string) *QueryDeviceGroupByTagsResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponse) SetPage(v int) *QueryDeviceGroupByTagsResponse {
	s.Page = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponse) SetPageSize(v int) *QueryDeviceGroupByTagsResponse {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponse) SetPageCount(v int) *QueryDeviceGroupByTagsResponse {
	s.PageCount = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponse) SetTotal(v int) *QueryDeviceGroupByTagsResponse {
	s.Total = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponse) SetData(v *QueryDeviceGroupByTagsResponseData) *QueryDeviceGroupByTagsResponse {
	s.Data = v
	return s
}

type QueryDeviceGroupByTagsResponseData struct {
	DeviceGroup []*QueryDeviceGroupByTagsResponseDataDeviceGroup `json:"DeviceGroup,omitempty" xml:"DeviceGroup,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceGroupByTagsResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByTagsResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByTagsResponseData) SetDeviceGroup(v []*QueryDeviceGroupByTagsResponseDataDeviceGroup) *QueryDeviceGroupByTagsResponseData {
	s.DeviceGroup = v
	return s
}

type QueryDeviceGroupByTagsResponseDataDeviceGroup struct {
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
}

func (s QueryDeviceGroupByTagsResponseDataDeviceGroup) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByTagsResponseDataDeviceGroup) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByTagsResponseDataDeviceGroup) SetGroupId(v string) *QueryDeviceGroupByTagsResponseDataDeviceGroup {
	s.GroupId = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponseDataDeviceGroup) SetGroupName(v string) *QueryDeviceGroupByTagsResponseDataDeviceGroup {
	s.GroupName = &v
	return s
}

type BatchAddThingTopoRequest struct {
	IotInstanceId *string                                `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	TopoAddItem   []*BatchAddThingTopoRequestTopoAddItem `json:"TopoAddItem,omitempty" xml:"TopoAddItem,omitempty" require:"true" type:"Repeated"`
	GwProductKey  *string                                `json:"GwProductKey,omitempty" xml:"GwProductKey,omitempty" require:"true"`
	GwDeviceName  *string                                `json:"GwDeviceName,omitempty" xml:"GwDeviceName,omitempty" require:"true"`
}

func (s BatchAddThingTopoRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchAddThingTopoRequest) GoString() string {
	return s.String()
}

func (s *BatchAddThingTopoRequest) SetIotInstanceId(v string) *BatchAddThingTopoRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchAddThingTopoRequest) SetTopoAddItem(v []*BatchAddThingTopoRequestTopoAddItem) *BatchAddThingTopoRequest {
	s.TopoAddItem = v
	return s
}

func (s *BatchAddThingTopoRequest) SetGwProductKey(v string) *BatchAddThingTopoRequest {
	s.GwProductKey = &v
	return s
}

func (s *BatchAddThingTopoRequest) SetGwDeviceName(v string) *BatchAddThingTopoRequest {
	s.GwDeviceName = &v
	return s
}

type BatchAddThingTopoRequestTopoAddItem struct {
	ProductKey *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	Sign       *string `json:"Sign,omitempty" xml:"Sign,omitempty" require:"true"`
	SignMethod *string `json:"SignMethod,omitempty" xml:"SignMethod,omitempty" require:"true"`
	Timestamp  *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	ClientId   *string `json:"ClientId,omitempty" xml:"ClientId,omitempty"`
}

func (s BatchAddThingTopoRequestTopoAddItem) String() string {
	return tea.Prettify(s)
}

func (s BatchAddThingTopoRequestTopoAddItem) GoString() string {
	return s.String()
}

func (s *BatchAddThingTopoRequestTopoAddItem) SetProductKey(v string) *BatchAddThingTopoRequestTopoAddItem {
	s.ProductKey = &v
	return s
}

func (s *BatchAddThingTopoRequestTopoAddItem) SetDeviceName(v string) *BatchAddThingTopoRequestTopoAddItem {
	s.DeviceName = &v
	return s
}

func (s *BatchAddThingTopoRequestTopoAddItem) SetSign(v string) *BatchAddThingTopoRequestTopoAddItem {
	s.Sign = &v
	return s
}

func (s *BatchAddThingTopoRequestTopoAddItem) SetSignMethod(v string) *BatchAddThingTopoRequestTopoAddItem {
	s.SignMethod = &v
	return s
}

func (s *BatchAddThingTopoRequestTopoAddItem) SetTimestamp(v string) *BatchAddThingTopoRequestTopoAddItem {
	s.Timestamp = &v
	return s
}

func (s *BatchAddThingTopoRequestTopoAddItem) SetClientId(v string) *BatchAddThingTopoRequestTopoAddItem {
	s.ClientId = &v
	return s
}

type BatchAddThingTopoResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s BatchAddThingTopoResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchAddThingTopoResponse) GoString() string {
	return s.String()
}

func (s *BatchAddThingTopoResponse) SetRequestId(v string) *BatchAddThingTopoResponse {
	s.RequestId = &v
	return s
}

func (s *BatchAddThingTopoResponse) SetSuccess(v bool) *BatchAddThingTopoResponse {
	s.Success = &v
	return s
}

func (s *BatchAddThingTopoResponse) SetCode(v string) *BatchAddThingTopoResponse {
	s.Code = &v
	return s
}

func (s *BatchAddThingTopoResponse) SetErrorMessage(v string) *BatchAddThingTopoResponse {
	s.ErrorMessage = &v
	return s
}

type QueryDeviceListByDeviceGroupRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s QueryDeviceListByDeviceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceListByDeviceGroupRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceListByDeviceGroupRequest) SetIotInstanceId(v string) *QueryDeviceListByDeviceGroupRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupRequest) SetGroupId(v string) *QueryDeviceListByDeviceGroupRequest {
	s.GroupId = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupRequest) SetPageSize(v int) *QueryDeviceListByDeviceGroupRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupRequest) SetCurrentPage(v int) *QueryDeviceListByDeviceGroupRequest {
	s.CurrentPage = &v
	return s
}

type QueryDeviceListByDeviceGroupResponse struct {
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                     `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                   `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Page         *int                                      `json:"Page,omitempty" xml:"Page,omitempty" require:"true"`
	PageSize     *int                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageCount    *int                                      `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	Total        *int                                      `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	Data         *QueryDeviceListByDeviceGroupResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceListByDeviceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceListByDeviceGroupResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceListByDeviceGroupResponse) SetRequestId(v string) *QueryDeviceListByDeviceGroupResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponse) SetSuccess(v bool) *QueryDeviceListByDeviceGroupResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponse) SetCode(v string) *QueryDeviceListByDeviceGroupResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponse) SetErrorMessage(v string) *QueryDeviceListByDeviceGroupResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponse) SetPage(v int) *QueryDeviceListByDeviceGroupResponse {
	s.Page = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponse) SetPageSize(v int) *QueryDeviceListByDeviceGroupResponse {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponse) SetPageCount(v int) *QueryDeviceListByDeviceGroupResponse {
	s.PageCount = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponse) SetTotal(v int) *QueryDeviceListByDeviceGroupResponse {
	s.Total = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponse) SetData(v *QueryDeviceListByDeviceGroupResponseData) *QueryDeviceListByDeviceGroupResponse {
	s.Data = v
	return s
}

type QueryDeviceListByDeviceGroupResponseData struct {
	SimpleDeviceInfo []*QueryDeviceListByDeviceGroupResponseDataSimpleDeviceInfo `json:"SimpleDeviceInfo,omitempty" xml:"SimpleDeviceInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceListByDeviceGroupResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceListByDeviceGroupResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceListByDeviceGroupResponseData) SetSimpleDeviceInfo(v []*QueryDeviceListByDeviceGroupResponseDataSimpleDeviceInfo) *QueryDeviceListByDeviceGroupResponseData {
	s.SimpleDeviceInfo = v
	return s
}

type QueryDeviceListByDeviceGroupResponseDataSimpleDeviceInfo struct {
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty" require:"true"`
	ProductKey  *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName  *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	IotId       *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
}

func (s QueryDeviceListByDeviceGroupResponseDataSimpleDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceListByDeviceGroupResponseDataSimpleDeviceInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceListByDeviceGroupResponseDataSimpleDeviceInfo) SetProductName(v string) *QueryDeviceListByDeviceGroupResponseDataSimpleDeviceInfo {
	s.ProductName = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponseDataSimpleDeviceInfo) SetProductKey(v string) *QueryDeviceListByDeviceGroupResponseDataSimpleDeviceInfo {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponseDataSimpleDeviceInfo) SetDeviceName(v string) *QueryDeviceListByDeviceGroupResponseDataSimpleDeviceInfo {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponseDataSimpleDeviceInfo) SetIotId(v string) *QueryDeviceListByDeviceGroupResponseDataSimpleDeviceInfo {
	s.IotId = &v
	return s
}

type QueryDevicePropertiesDataRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int      `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	ProductKey    *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName    *string   `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	StartTime     *int64    `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	Identifier    []*string `json:"Identifier,omitempty" xml:"Identifier,omitempty" require:"true" type:"Repeated"`
	Asc           *int      `json:"Asc,omitempty" xml:"Asc,omitempty" require:"true"`
	IotId         *string   `json:"IotId,omitempty" xml:"IotId,omitempty"`
	EndTime       *int64    `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
}

func (s QueryDevicePropertiesDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertiesDataRequest) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertiesDataRequest) SetIotInstanceId(v string) *QueryDevicePropertiesDataRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetPageSize(v int) *QueryDevicePropertiesDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetProductKey(v string) *QueryDevicePropertiesDataRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetDeviceName(v string) *QueryDevicePropertiesDataRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetStartTime(v int64) *QueryDevicePropertiesDataRequest {
	s.StartTime = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetIdentifier(v []*string) *QueryDevicePropertiesDataRequest {
	s.Identifier = v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetAsc(v int) *QueryDevicePropertiesDataRequest {
	s.Asc = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetIotId(v string) *QueryDevicePropertiesDataRequest {
	s.IotId = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetEndTime(v int64) *QueryDevicePropertiesDataRequest {
	s.EndTime = &v
	return s
}

type QueryDevicePropertiesDataResponse struct {
	RequestId         *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success           *bool                                               `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code              *string                                             `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage      *string                                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	NextValid         *bool                                               `json:"NextValid,omitempty" xml:"NextValid,omitempty" require:"true"`
	NextTime          *int64                                              `json:"NextTime,omitempty" xml:"NextTime,omitempty" require:"true"`
	PropertyDataInfos *QueryDevicePropertiesDataResponsePropertyDataInfos `json:"PropertyDataInfos,omitempty" xml:"PropertyDataInfos,omitempty" require:"true" type:"Struct"`
}

func (s QueryDevicePropertiesDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertiesDataResponse) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertiesDataResponse) SetRequestId(v string) *QueryDevicePropertiesDataResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDevicePropertiesDataResponse) SetSuccess(v bool) *QueryDevicePropertiesDataResponse {
	s.Success = &v
	return s
}

func (s *QueryDevicePropertiesDataResponse) SetCode(v string) *QueryDevicePropertiesDataResponse {
	s.Code = &v
	return s
}

func (s *QueryDevicePropertiesDataResponse) SetErrorMessage(v string) *QueryDevicePropertiesDataResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDevicePropertiesDataResponse) SetNextValid(v bool) *QueryDevicePropertiesDataResponse {
	s.NextValid = &v
	return s
}

func (s *QueryDevicePropertiesDataResponse) SetNextTime(v int64) *QueryDevicePropertiesDataResponse {
	s.NextTime = &v
	return s
}

func (s *QueryDevicePropertiesDataResponse) SetPropertyDataInfos(v *QueryDevicePropertiesDataResponsePropertyDataInfos) *QueryDevicePropertiesDataResponse {
	s.PropertyDataInfos = v
	return s
}

type QueryDevicePropertiesDataResponsePropertyDataInfos struct {
	PropertyDataInfo []*QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfo `json:"PropertyDataInfo,omitempty" xml:"PropertyDataInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDevicePropertiesDataResponsePropertyDataInfos) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertiesDataResponsePropertyDataInfos) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertiesDataResponsePropertyDataInfos) SetPropertyDataInfo(v []*QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfo) *QueryDevicePropertiesDataResponsePropertyDataInfos {
	s.PropertyDataInfo = v
	return s
}

type QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfo struct {
	Identifier *string                                                                 `json:"Identifier,omitempty" xml:"Identifier,omitempty" require:"true"`
	List       *QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfoList `json:"List,omitempty" xml:"List,omitempty" require:"true" type:"Struct"`
}

func (s QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfo) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfo) SetIdentifier(v string) *QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfo {
	s.Identifier = &v
	return s
}

func (s *QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfo) SetList(v *QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfoList) *QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfo {
	s.List = v
	return s
}

type QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfoList struct {
	PropertyInfo []*QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfoListPropertyInfo `json:"PropertyInfo,omitempty" xml:"PropertyInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfoList) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfoList) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfoList) SetPropertyInfo(v []*QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfoListPropertyInfo) *QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfoList {
	s.PropertyInfo = v
	return s
}

type QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfoListPropertyInfo struct {
	Time  *int64  `json:"Time,omitempty" xml:"Time,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfoListPropertyInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfoListPropertyInfo) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfoListPropertyInfo) SetTime(v int64) *QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfoListPropertyInfo {
	s.Time = &v
	return s
}

func (s *QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfoListPropertyInfo) SetValue(v string) *QueryDevicePropertiesDataResponsePropertyDataInfosPropertyDataInfoListPropertyInfo {
	s.Value = &v
	return s
}

type UnbindRoleFromEdgeInstanceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
}

func (s UnbindRoleFromEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindRoleFromEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *UnbindRoleFromEdgeInstanceRequest) SetIotInstanceId(v string) *UnbindRoleFromEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UnbindRoleFromEdgeInstanceRequest) SetInstanceId(v string) *UnbindRoleFromEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

type UnbindRoleFromEdgeInstanceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UnbindRoleFromEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindRoleFromEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *UnbindRoleFromEdgeInstanceResponse) SetRequestId(v string) *UnbindRoleFromEdgeInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *UnbindRoleFromEdgeInstanceResponse) SetSuccess(v bool) *UnbindRoleFromEdgeInstanceResponse {
	s.Success = &v
	return s
}

func (s *UnbindRoleFromEdgeInstanceResponse) SetCode(v string) *UnbindRoleFromEdgeInstanceResponse {
	s.Code = &v
	return s
}

func (s *UnbindRoleFromEdgeInstanceResponse) SetErrorMessage(v string) *UnbindRoleFromEdgeInstanceResponse {
	s.ErrorMessage = &v
	return s
}

type UpdateEdgeInstanceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Tags          *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	Spec          *int    `json:"Spec,omitempty" xml:"Spec,omitempty"`
	BizEnable     *bool   `json:"BizEnable,omitempty" xml:"BizEnable,omitempty"`
}

func (s UpdateEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *UpdateEdgeInstanceRequest) SetIotInstanceId(v string) *UpdateEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateEdgeInstanceRequest) SetInstanceId(v string) *UpdateEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateEdgeInstanceRequest) SetName(v string) *UpdateEdgeInstanceRequest {
	s.Name = &v
	return s
}

func (s *UpdateEdgeInstanceRequest) SetTags(v string) *UpdateEdgeInstanceRequest {
	s.Tags = &v
	return s
}

func (s *UpdateEdgeInstanceRequest) SetSpec(v int) *UpdateEdgeInstanceRequest {
	s.Spec = &v
	return s
}

func (s *UpdateEdgeInstanceRequest) SetBizEnable(v bool) *UpdateEdgeInstanceRequest {
	s.BizEnable = &v
	return s
}

type UpdateEdgeInstanceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *UpdateEdgeInstanceResponse) SetRequestId(v string) *UpdateEdgeInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateEdgeInstanceResponse) SetSuccess(v bool) *UpdateEdgeInstanceResponse {
	s.Success = &v
	return s
}

func (s *UpdateEdgeInstanceResponse) SetCode(v string) *UpdateEdgeInstanceResponse {
	s.Code = &v
	return s
}

func (s *UpdateEdgeInstanceResponse) SetErrorMessage(v string) *UpdateEdgeInstanceResponse {
	s.ErrorMessage = &v
	return s
}

type GetEdgeInstanceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
}

func (s GetEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceRequest) SetIotInstanceId(v string) *GetEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetEdgeInstanceRequest) SetInstanceId(v string) *GetEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

type GetEdgeInstanceResponse struct {
	RequestId    *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                        `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *GetEdgeInstanceResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceResponse) SetRequestId(v string) *GetEdgeInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *GetEdgeInstanceResponse) SetSuccess(v bool) *GetEdgeInstanceResponse {
	s.Success = &v
	return s
}

func (s *GetEdgeInstanceResponse) SetCode(v string) *GetEdgeInstanceResponse {
	s.Code = &v
	return s
}

func (s *GetEdgeInstanceResponse) SetErrorMessage(v string) *GetEdgeInstanceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetEdgeInstanceResponse) SetData(v *GetEdgeInstanceResponseData) *GetEdgeInstanceResponse {
	s.Data = v
	return s
}

type GetEdgeInstanceResponseData struct {
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	Name                   *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Tags                   *string `json:"Tags,omitempty" xml:"Tags,omitempty" require:"true"`
	Type                   *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Spec                   *int    `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	BizEnable              *bool   `json:"BizEnable,omitempty" xml:"BizEnable,omitempty" require:"true"`
	GmtCreate              *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModified            *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
	RoleArn                *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty" require:"true"`
	RoleName               *string `json:"RoleName,omitempty" xml:"RoleName,omitempty" require:"true"`
	RoleAttachTime         *string `json:"RoleAttachTime,omitempty" xml:"RoleAttachTime,omitempty" require:"true"`
	LatestDeploymentStatus *int    `json:"LatestDeploymentStatus,omitempty" xml:"LatestDeploymentStatus,omitempty" require:"true"`
	LatestDeploymentType   *string `json:"LatestDeploymentType,omitempty" xml:"LatestDeploymentType,omitempty" require:"true"`
	GmtCreateTimestamp     *int64  `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty" require:"true"`
	GmtModifiedTimestamp   *int64  `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty" require:"true"`
	RoleAttachTimestamp    *int64  `json:"RoleAttachTimestamp,omitempty" xml:"RoleAttachTimestamp,omitempty" require:"true"`
}

func (s GetEdgeInstanceResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceResponseData) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceResponseData) SetInstanceId(v string) *GetEdgeInstanceResponseData {
	s.InstanceId = &v
	return s
}

func (s *GetEdgeInstanceResponseData) SetName(v string) *GetEdgeInstanceResponseData {
	s.Name = &v
	return s
}

func (s *GetEdgeInstanceResponseData) SetTags(v string) *GetEdgeInstanceResponseData {
	s.Tags = &v
	return s
}

func (s *GetEdgeInstanceResponseData) SetType(v string) *GetEdgeInstanceResponseData {
	s.Type = &v
	return s
}

func (s *GetEdgeInstanceResponseData) SetSpec(v int) *GetEdgeInstanceResponseData {
	s.Spec = &v
	return s
}

func (s *GetEdgeInstanceResponseData) SetBizEnable(v bool) *GetEdgeInstanceResponseData {
	s.BizEnable = &v
	return s
}

func (s *GetEdgeInstanceResponseData) SetGmtCreate(v string) *GetEdgeInstanceResponseData {
	s.GmtCreate = &v
	return s
}

func (s *GetEdgeInstanceResponseData) SetGmtModified(v string) *GetEdgeInstanceResponseData {
	s.GmtModified = &v
	return s
}

func (s *GetEdgeInstanceResponseData) SetRoleArn(v string) *GetEdgeInstanceResponseData {
	s.RoleArn = &v
	return s
}

func (s *GetEdgeInstanceResponseData) SetRoleName(v string) *GetEdgeInstanceResponseData {
	s.RoleName = &v
	return s
}

func (s *GetEdgeInstanceResponseData) SetRoleAttachTime(v string) *GetEdgeInstanceResponseData {
	s.RoleAttachTime = &v
	return s
}

func (s *GetEdgeInstanceResponseData) SetLatestDeploymentStatus(v int) *GetEdgeInstanceResponseData {
	s.LatestDeploymentStatus = &v
	return s
}

func (s *GetEdgeInstanceResponseData) SetLatestDeploymentType(v string) *GetEdgeInstanceResponseData {
	s.LatestDeploymentType = &v
	return s
}

func (s *GetEdgeInstanceResponseData) SetGmtCreateTimestamp(v int64) *GetEdgeInstanceResponseData {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *GetEdgeInstanceResponseData) SetGmtModifiedTimestamp(v int64) *GetEdgeInstanceResponseData {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *GetEdgeInstanceResponseData) SetRoleAttachTimestamp(v int64) *GetEdgeInstanceResponseData {
	s.RoleAttachTimestamp = &v
	return s
}

type DeleteEdgeInstanceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
}

func (s DeleteEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteEdgeInstanceRequest) SetIotInstanceId(v string) *DeleteEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteEdgeInstanceRequest) SetInstanceId(v string) *DeleteEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

type DeleteEdgeInstanceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteEdgeInstanceResponse) SetRequestId(v string) *DeleteEdgeInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteEdgeInstanceResponse) SetSuccess(v bool) *DeleteEdgeInstanceResponse {
	s.Success = &v
	return s
}

func (s *DeleteEdgeInstanceResponse) SetCode(v string) *DeleteEdgeInstanceResponse {
	s.Code = &v
	return s
}

func (s *DeleteEdgeInstanceResponse) SetErrorMessage(v string) *DeleteEdgeInstanceResponse {
	s.ErrorMessage = &v
	return s
}

type CreateEdgeInstanceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Tags          *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	Spec          *int    `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s CreateEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceRequest) SetIotInstanceId(v string) *CreateEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateEdgeInstanceRequest) SetName(v string) *CreateEdgeInstanceRequest {
	s.Name = &v
	return s
}

func (s *CreateEdgeInstanceRequest) SetTags(v string) *CreateEdgeInstanceRequest {
	s.Tags = &v
	return s
}

func (s *CreateEdgeInstanceRequest) SetSpec(v int) *CreateEdgeInstanceRequest {
	s.Spec = &v
	return s
}

type CreateEdgeInstanceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
}

func (s CreateEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceResponse) SetRequestId(v string) *CreateEdgeInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *CreateEdgeInstanceResponse) SetSuccess(v bool) *CreateEdgeInstanceResponse {
	s.Success = &v
	return s
}

func (s *CreateEdgeInstanceResponse) SetErrorMessage(v string) *CreateEdgeInstanceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateEdgeInstanceResponse) SetCode(v string) *CreateEdgeInstanceResponse {
	s.Code = &v
	return s
}

func (s *CreateEdgeInstanceResponse) SetInstanceId(v string) *CreateEdgeInstanceResponse {
	s.InstanceId = &v
	return s
}

type QueryEdgeInstanceGatewayRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
}

func (s QueryEdgeInstanceGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceGatewayRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceGatewayRequest) SetIotInstanceId(v string) *QueryEdgeInstanceGatewayRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeInstanceGatewayRequest) SetInstanceId(v string) *QueryEdgeInstanceGatewayRequest {
	s.InstanceId = &v
	return s
}

type QueryEdgeInstanceGatewayResponse struct {
	RequestId    *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                          `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	GatewayList  []*QueryEdgeInstanceGatewayResponseGatewayList `json:"GatewayList,omitempty" xml:"GatewayList,omitempty" require:"true" type:"Repeated"`
}

func (s QueryEdgeInstanceGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceGatewayResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceGatewayResponse) SetRequestId(v string) *QueryEdgeInstanceGatewayResponse {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeInstanceGatewayResponse) SetSuccess(v bool) *QueryEdgeInstanceGatewayResponse {
	s.Success = &v
	return s
}

func (s *QueryEdgeInstanceGatewayResponse) SetCode(v string) *QueryEdgeInstanceGatewayResponse {
	s.Code = &v
	return s
}

func (s *QueryEdgeInstanceGatewayResponse) SetErrorMessage(v string) *QueryEdgeInstanceGatewayResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeInstanceGatewayResponse) SetGatewayList(v []*QueryEdgeInstanceGatewayResponseGatewayList) *QueryEdgeInstanceGatewayResponse {
	s.GatewayList = v
	return s
}

type QueryEdgeInstanceGatewayResponseGatewayList struct {
	ProductKey  *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName  *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	IotId       *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	EdgeVersion *string `json:"EdgeVersion,omitempty" xml:"EdgeVersion,omitempty" require:"true"`
}

func (s QueryEdgeInstanceGatewayResponseGatewayList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceGatewayResponseGatewayList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceGatewayResponseGatewayList) SetProductKey(v string) *QueryEdgeInstanceGatewayResponseGatewayList {
	s.ProductKey = &v
	return s
}

func (s *QueryEdgeInstanceGatewayResponseGatewayList) SetDeviceName(v string) *QueryEdgeInstanceGatewayResponseGatewayList {
	s.DeviceName = &v
	return s
}

func (s *QueryEdgeInstanceGatewayResponseGatewayList) SetIotId(v string) *QueryEdgeInstanceGatewayResponseGatewayList {
	s.IotId = &v
	return s
}

func (s *QueryEdgeInstanceGatewayResponseGatewayList) SetEdgeVersion(v string) *QueryEdgeInstanceGatewayResponseGatewayList {
	s.EdgeVersion = &v
	return s
}

type QueryEdgeInstanceDeviceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
}

func (s QueryEdgeInstanceDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceRequest) SetIotInstanceId(v string) *QueryEdgeInstanceDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceRequest) SetInstanceId(v string) *QueryEdgeInstanceDeviceRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceRequest) SetCurrentPage(v int) *QueryEdgeInstanceDeviceRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceDeviceRequest) SetPageSize(v int) *QueryEdgeInstanceDeviceRequest {
	s.PageSize = &v
	return s
}

type QueryEdgeInstanceDeviceResponse struct {
	RequestId    *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryEdgeInstanceDeviceResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryEdgeInstanceDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceResponse) SetRequestId(v string) *QueryEdgeInstanceDeviceResponse {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponse) SetSuccess(v bool) *QueryEdgeInstanceDeviceResponse {
	s.Success = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponse) SetCode(v string) *QueryEdgeInstanceDeviceResponse {
	s.Code = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponse) SetErrorMessage(v string) *QueryEdgeInstanceDeviceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponse) SetData(v *QueryEdgeInstanceDeviceResponseData) *QueryEdgeInstanceDeviceResponse {
	s.Data = v
	return s
}

type QueryEdgeInstanceDeviceResponseData struct {
	Total       *int                                             `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize    *int                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage *int                                             `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	DeviceList  []*QueryEdgeInstanceDeviceResponseDataDeviceList `json:"DeviceList,omitempty" xml:"DeviceList,omitempty" require:"true" type:"Repeated"`
}

func (s QueryEdgeInstanceDeviceResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceResponseData) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceResponseData) SetTotal(v int) *QueryEdgeInstanceDeviceResponseData {
	s.Total = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponseData) SetPageSize(v int) *QueryEdgeInstanceDeviceResponseData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponseData) SetCurrentPage(v int) *QueryEdgeInstanceDeviceResponseData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponseData) SetDeviceList(v []*QueryEdgeInstanceDeviceResponseDataDeviceList) *QueryEdgeInstanceDeviceResponseData {
	s.DeviceList = v
	return s
}

type QueryEdgeInstanceDeviceResponseDataDeviceList struct {
	IotId      *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	ProductKey *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	DriverId   *string `json:"DriverId,omitempty" xml:"DriverId,omitempty" require:"true"`
}

func (s QueryEdgeInstanceDeviceResponseDataDeviceList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceResponseDataDeviceList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceResponseDataDeviceList) SetIotId(v string) *QueryEdgeInstanceDeviceResponseDataDeviceList {
	s.IotId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponseDataDeviceList) SetProductKey(v string) *QueryEdgeInstanceDeviceResponseDataDeviceList {
	s.ProductKey = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponseDataDeviceList) SetDeviceName(v string) *QueryEdgeInstanceDeviceResponseDataDeviceList {
	s.DeviceName = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponseDataDeviceList) SetDriverId(v string) *QueryEdgeInstanceDeviceResponseDataDeviceList {
	s.DriverId = &v
	return s
}

type BindGatewayToEdgeInstanceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s BindGatewayToEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s BindGatewayToEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *BindGatewayToEdgeInstanceRequest) SetIotInstanceId(v string) *BindGatewayToEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BindGatewayToEdgeInstanceRequest) SetInstanceId(v string) *BindGatewayToEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *BindGatewayToEdgeInstanceRequest) SetProductKey(v string) *BindGatewayToEdgeInstanceRequest {
	s.ProductKey = &v
	return s
}

func (s *BindGatewayToEdgeInstanceRequest) SetDeviceName(v string) *BindGatewayToEdgeInstanceRequest {
	s.DeviceName = &v
	return s
}

func (s *BindGatewayToEdgeInstanceRequest) SetIotId(v string) *BindGatewayToEdgeInstanceRequest {
	s.IotId = &v
	return s
}

type BindGatewayToEdgeInstanceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s BindGatewayToEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s BindGatewayToEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *BindGatewayToEdgeInstanceResponse) SetRequestId(v string) *BindGatewayToEdgeInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *BindGatewayToEdgeInstanceResponse) SetSuccess(v bool) *BindGatewayToEdgeInstanceResponse {
	s.Success = &v
	return s
}

func (s *BindGatewayToEdgeInstanceResponse) SetCode(v string) *BindGatewayToEdgeInstanceResponse {
	s.Code = &v
	return s
}

func (s *BindGatewayToEdgeInstanceResponse) SetErrorMessage(v string) *BindGatewayToEdgeInstanceResponse {
	s.ErrorMessage = &v
	return s
}

type QueryEdgeInstanceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s QueryEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceRequest) SetIotInstanceId(v string) *QueryEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeInstanceRequest) SetPageSize(v int) *QueryEdgeInstanceRequest {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceRequest) SetCurrentPage(v int) *QueryEdgeInstanceRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceRequest) SetName(v string) *QueryEdgeInstanceRequest {
	s.Name = &v
	return s
}

type QueryEdgeInstanceResponse struct {
	RequestId    *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                          `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryEdgeInstanceResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceResponse) SetRequestId(v string) *QueryEdgeInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeInstanceResponse) SetSuccess(v bool) *QueryEdgeInstanceResponse {
	s.Success = &v
	return s
}

func (s *QueryEdgeInstanceResponse) SetCode(v string) *QueryEdgeInstanceResponse {
	s.Code = &v
	return s
}

func (s *QueryEdgeInstanceResponse) SetErrorMessage(v string) *QueryEdgeInstanceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeInstanceResponse) SetData(v *QueryEdgeInstanceResponseData) *QueryEdgeInstanceResponse {
	s.Data = v
	return s
}

type QueryEdgeInstanceResponseData struct {
	Total        *int                                         `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize     *int                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	CurrentPage  *int                                         `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	InstanceList []*QueryEdgeInstanceResponseDataInstanceList `json:"InstanceList,omitempty" xml:"InstanceList,omitempty" require:"true" type:"Repeated"`
}

func (s QueryEdgeInstanceResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceResponseData) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceResponseData) SetTotal(v int) *QueryEdgeInstanceResponseData {
	s.Total = &v
	return s
}

func (s *QueryEdgeInstanceResponseData) SetPageSize(v int) *QueryEdgeInstanceResponseData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceResponseData) SetCurrentPage(v int) *QueryEdgeInstanceResponseData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceResponseData) SetInstanceList(v []*QueryEdgeInstanceResponseDataInstanceList) *QueryEdgeInstanceResponseData {
	s.InstanceList = v
	return s
}

type QueryEdgeInstanceResponseDataInstanceList struct {
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	Name                   *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Tags                   *string `json:"Tags,omitempty" xml:"Tags,omitempty" require:"true"`
	Type                   *int    `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	GmtCreate              *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModified            *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
	RoleArn                *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty" require:"true"`
	RoleName               *string `json:"RoleName,omitempty" xml:"RoleName,omitempty" require:"true"`
	RoleAttachTime         *string `json:"RoleAttachTime,omitempty" xml:"RoleAttachTime,omitempty" require:"true"`
	Spec                   *int    `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true"`
	BizEnable              *bool   `json:"BizEnable,omitempty" xml:"BizEnable,omitempty" require:"true"`
	LatestDeploymentStatus *int    `json:"LatestDeploymentStatus,omitempty" xml:"LatestDeploymentStatus,omitempty" require:"true"`
	LatestDeploymentType   *string `json:"LatestDeploymentType,omitempty" xml:"LatestDeploymentType,omitempty" require:"true"`
	GmtCreateTimestamp     *int64  `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty" require:"true"`
	GmtModifiedTimestamp   *int64  `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty" require:"true"`
	RoleAttachTimestamp    *int64  `json:"RoleAttachTimestamp,omitempty" xml:"RoleAttachTimestamp,omitempty" require:"true"`
}

func (s QueryEdgeInstanceResponseDataInstanceList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceResponseDataInstanceList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceResponseDataInstanceList) SetInstanceId(v string) *QueryEdgeInstanceResponseDataInstanceList {
	s.InstanceId = &v
	return s
}

func (s *QueryEdgeInstanceResponseDataInstanceList) SetName(v string) *QueryEdgeInstanceResponseDataInstanceList {
	s.Name = &v
	return s
}

func (s *QueryEdgeInstanceResponseDataInstanceList) SetTags(v string) *QueryEdgeInstanceResponseDataInstanceList {
	s.Tags = &v
	return s
}

func (s *QueryEdgeInstanceResponseDataInstanceList) SetType(v int) *QueryEdgeInstanceResponseDataInstanceList {
	s.Type = &v
	return s
}

func (s *QueryEdgeInstanceResponseDataInstanceList) SetGmtCreate(v string) *QueryEdgeInstanceResponseDataInstanceList {
	s.GmtCreate = &v
	return s
}

func (s *QueryEdgeInstanceResponseDataInstanceList) SetGmtModified(v string) *QueryEdgeInstanceResponseDataInstanceList {
	s.GmtModified = &v
	return s
}

func (s *QueryEdgeInstanceResponseDataInstanceList) SetRoleArn(v string) *QueryEdgeInstanceResponseDataInstanceList {
	s.RoleArn = &v
	return s
}

func (s *QueryEdgeInstanceResponseDataInstanceList) SetRoleName(v string) *QueryEdgeInstanceResponseDataInstanceList {
	s.RoleName = &v
	return s
}

func (s *QueryEdgeInstanceResponseDataInstanceList) SetRoleAttachTime(v string) *QueryEdgeInstanceResponseDataInstanceList {
	s.RoleAttachTime = &v
	return s
}

func (s *QueryEdgeInstanceResponseDataInstanceList) SetSpec(v int) *QueryEdgeInstanceResponseDataInstanceList {
	s.Spec = &v
	return s
}

func (s *QueryEdgeInstanceResponseDataInstanceList) SetBizEnable(v bool) *QueryEdgeInstanceResponseDataInstanceList {
	s.BizEnable = &v
	return s
}

func (s *QueryEdgeInstanceResponseDataInstanceList) SetLatestDeploymentStatus(v int) *QueryEdgeInstanceResponseDataInstanceList {
	s.LatestDeploymentStatus = &v
	return s
}

func (s *QueryEdgeInstanceResponseDataInstanceList) SetLatestDeploymentType(v string) *QueryEdgeInstanceResponseDataInstanceList {
	s.LatestDeploymentType = &v
	return s
}

func (s *QueryEdgeInstanceResponseDataInstanceList) SetGmtCreateTimestamp(v int64) *QueryEdgeInstanceResponseDataInstanceList {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *QueryEdgeInstanceResponseDataInstanceList) SetGmtModifiedTimestamp(v int64) *QueryEdgeInstanceResponseDataInstanceList {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *QueryEdgeInstanceResponseDataInstanceList) SetRoleAttachTimestamp(v int64) *QueryEdgeInstanceResponseDataInstanceList {
	s.RoleAttachTimestamp = &v
	return s
}

type CreateEdgeInstanceDeploymentRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s CreateEdgeInstanceDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceDeploymentRequest) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceDeploymentRequest) SetIotInstanceId(v string) *CreateEdgeInstanceDeploymentRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateEdgeInstanceDeploymentRequest) SetInstanceId(v string) *CreateEdgeInstanceDeploymentRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateEdgeInstanceDeploymentRequest) SetType(v string) *CreateEdgeInstanceDeploymentRequest {
	s.Type = &v
	return s
}

type CreateEdgeInstanceDeploymentResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	DeploymentId *string `json:"DeploymentId,omitempty" xml:"DeploymentId,omitempty" require:"true"`
}

func (s CreateEdgeInstanceDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceDeploymentResponse) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceDeploymentResponse) SetRequestId(v string) *CreateEdgeInstanceDeploymentResponse {
	s.RequestId = &v
	return s
}

func (s *CreateEdgeInstanceDeploymentResponse) SetSuccess(v bool) *CreateEdgeInstanceDeploymentResponse {
	s.Success = &v
	return s
}

func (s *CreateEdgeInstanceDeploymentResponse) SetCode(v string) *CreateEdgeInstanceDeploymentResponse {
	s.Code = &v
	return s
}

func (s *CreateEdgeInstanceDeploymentResponse) SetErrorMessage(v string) *CreateEdgeInstanceDeploymentResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateEdgeInstanceDeploymentResponse) SetDeploymentId(v string) *CreateEdgeInstanceDeploymentResponse {
	s.DeploymentId = &v
	return s
}

type BindRoleToEdgeInstanceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	RoleArn       *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty" require:"true"`
	RoleName      *string `json:"RoleName,omitempty" xml:"RoleName,omitempty" require:"true"`
}

func (s BindRoleToEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s BindRoleToEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *BindRoleToEdgeInstanceRequest) SetIotInstanceId(v string) *BindRoleToEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BindRoleToEdgeInstanceRequest) SetInstanceId(v string) *BindRoleToEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *BindRoleToEdgeInstanceRequest) SetRoleArn(v string) *BindRoleToEdgeInstanceRequest {
	s.RoleArn = &v
	return s
}

func (s *BindRoleToEdgeInstanceRequest) SetRoleName(v string) *BindRoleToEdgeInstanceRequest {
	s.RoleName = &v
	return s
}

type BindRoleToEdgeInstanceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s BindRoleToEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s BindRoleToEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *BindRoleToEdgeInstanceResponse) SetRequestId(v string) *BindRoleToEdgeInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *BindRoleToEdgeInstanceResponse) SetSuccess(v bool) *BindRoleToEdgeInstanceResponse {
	s.Success = &v
	return s
}

func (s *BindRoleToEdgeInstanceResponse) SetCode(v string) *BindRoleToEdgeInstanceResponse {
	s.Code = &v
	return s
}

func (s *BindRoleToEdgeInstanceResponse) SetErrorMessage(v string) *BindRoleToEdgeInstanceResponse {
	s.ErrorMessage = &v
	return s
}

type QuerySuperDeviceGroupRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
}

func (s QuerySuperDeviceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySuperDeviceGroupRequest) GoString() string {
	return s.String()
}

func (s *QuerySuperDeviceGroupRequest) SetIotInstanceId(v string) *QuerySuperDeviceGroupRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QuerySuperDeviceGroupRequest) SetGroupId(v string) *QuerySuperDeviceGroupRequest {
	s.GroupId = &v
	return s
}

type QuerySuperDeviceGroupResponse struct {
	RequestId    *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                              `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QuerySuperDeviceGroupResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QuerySuperDeviceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySuperDeviceGroupResponse) GoString() string {
	return s.String()
}

func (s *QuerySuperDeviceGroupResponse) SetRequestId(v string) *QuerySuperDeviceGroupResponse {
	s.RequestId = &v
	return s
}

func (s *QuerySuperDeviceGroupResponse) SetSuccess(v bool) *QuerySuperDeviceGroupResponse {
	s.Success = &v
	return s
}

func (s *QuerySuperDeviceGroupResponse) SetCode(v string) *QuerySuperDeviceGroupResponse {
	s.Code = &v
	return s
}

func (s *QuerySuperDeviceGroupResponse) SetErrorMessage(v string) *QuerySuperDeviceGroupResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QuerySuperDeviceGroupResponse) SetData(v *QuerySuperDeviceGroupResponseData) *QuerySuperDeviceGroupResponse {
	s.Data = v
	return s
}

type QuerySuperDeviceGroupResponseData struct {
	GroupInfo []*QuerySuperDeviceGroupResponseDataGroupInfo `json:"GroupInfo,omitempty" xml:"GroupInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QuerySuperDeviceGroupResponseData) String() string {
	return tea.Prettify(s)
}

func (s QuerySuperDeviceGroupResponseData) GoString() string {
	return s.String()
}

func (s *QuerySuperDeviceGroupResponseData) SetGroupInfo(v []*QuerySuperDeviceGroupResponseDataGroupInfo) *QuerySuperDeviceGroupResponseData {
	s.GroupInfo = v
	return s
}

type QuerySuperDeviceGroupResponseDataGroupInfo struct {
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
	GroupDesc *string `json:"GroupDesc,omitempty" xml:"GroupDesc,omitempty" require:"true"`
}

func (s QuerySuperDeviceGroupResponseDataGroupInfo) String() string {
	return tea.Prettify(s)
}

func (s QuerySuperDeviceGroupResponseDataGroupInfo) GoString() string {
	return s.String()
}

func (s *QuerySuperDeviceGroupResponseDataGroupInfo) SetGroupId(v string) *QuerySuperDeviceGroupResponseDataGroupInfo {
	s.GroupId = &v
	return s
}

func (s *QuerySuperDeviceGroupResponseDataGroupInfo) SetGroupName(v string) *QuerySuperDeviceGroupResponseDataGroupInfo {
	s.GroupName = &v
	return s
}

func (s *QuerySuperDeviceGroupResponseDataGroupInfo) SetGroupDesc(v string) *QuerySuperDeviceGroupResponseDataGroupInfo {
	s.GroupDesc = &v
	return s
}

type QueryDeviceByTagsRequest struct {
	IotInstanceId *string                        `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Tag           []*QueryDeviceByTagsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	CurrentPage   *int                           `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize      *int                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s QueryDeviceByTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByTagsRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceByTagsRequest) SetIotInstanceId(v string) *QueryDeviceByTagsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceByTagsRequest) SetTag(v []*QueryDeviceByTagsRequestTag) *QueryDeviceByTagsRequest {
	s.Tag = v
	return s
}

func (s *QueryDeviceByTagsRequest) SetCurrentPage(v int) *QueryDeviceByTagsRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryDeviceByTagsRequest) SetPageSize(v int) *QueryDeviceByTagsRequest {
	s.PageSize = &v
	return s
}

type QueryDeviceByTagsRequestTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty" require:"true"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty" require:"true"`
}

func (s QueryDeviceByTagsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByTagsRequestTag) GoString() string {
	return s.String()
}

func (s *QueryDeviceByTagsRequestTag) SetTagKey(v string) *QueryDeviceByTagsRequestTag {
	s.TagKey = &v
	return s
}

func (s *QueryDeviceByTagsRequestTag) SetTagValue(v string) *QueryDeviceByTagsRequestTag {
	s.TagValue = &v
	return s
}

type QueryDeviceByTagsResponse struct {
	RequestId    *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                          `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Page         *int                           `json:"Page,omitempty" xml:"Page,omitempty" require:"true"`
	PageSize     *int                           `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageCount    *int                           `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	Total        *int                           `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	Data         *QueryDeviceByTagsResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceByTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByTagsResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceByTagsResponse) SetRequestId(v string) *QueryDeviceByTagsResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceByTagsResponse) SetSuccess(v bool) *QueryDeviceByTagsResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceByTagsResponse) SetCode(v string) *QueryDeviceByTagsResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceByTagsResponse) SetErrorMessage(v string) *QueryDeviceByTagsResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceByTagsResponse) SetPage(v int) *QueryDeviceByTagsResponse {
	s.Page = &v
	return s
}

func (s *QueryDeviceByTagsResponse) SetPageSize(v int) *QueryDeviceByTagsResponse {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceByTagsResponse) SetPageCount(v int) *QueryDeviceByTagsResponse {
	s.PageCount = &v
	return s
}

func (s *QueryDeviceByTagsResponse) SetTotal(v int) *QueryDeviceByTagsResponse {
	s.Total = &v
	return s
}

func (s *QueryDeviceByTagsResponse) SetData(v *QueryDeviceByTagsResponseData) *QueryDeviceByTagsResponse {
	s.Data = v
	return s
}

type QueryDeviceByTagsResponseData struct {
	SimpleDeviceInfo []*QueryDeviceByTagsResponseDataSimpleDeviceInfo `json:"SimpleDeviceInfo,omitempty" xml:"SimpleDeviceInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceByTagsResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByTagsResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceByTagsResponseData) SetSimpleDeviceInfo(v []*QueryDeviceByTagsResponseDataSimpleDeviceInfo) *QueryDeviceByTagsResponseData {
	s.SimpleDeviceInfo = v
	return s
}

type QueryDeviceByTagsResponseDataSimpleDeviceInfo struct {
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty" require:"true"`
	ProductKey  *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName  *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	IotId       *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
}

func (s QueryDeviceByTagsResponseDataSimpleDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByTagsResponseDataSimpleDeviceInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceByTagsResponseDataSimpleDeviceInfo) SetProductName(v string) *QueryDeviceByTagsResponseDataSimpleDeviceInfo {
	s.ProductName = &v
	return s
}

func (s *QueryDeviceByTagsResponseDataSimpleDeviceInfo) SetProductKey(v string) *QueryDeviceByTagsResponseDataSimpleDeviceInfo {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceByTagsResponseDataSimpleDeviceInfo) SetDeviceName(v string) *QueryDeviceByTagsResponseDataSimpleDeviceInfo {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceByTagsResponseDataSimpleDeviceInfo) SetIotId(v string) *QueryDeviceByTagsResponseDataSimpleDeviceInfo {
	s.IotId = &v
	return s
}

type SetDevicesPropertyRequest struct {
	DeviceName    []*string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true" type:"Repeated"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Items         *string   `json:"Items,omitempty" xml:"Items,omitempty" require:"true"`
}

func (s SetDevicesPropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDevicesPropertyRequest) GoString() string {
	return s.String()
}

func (s *SetDevicesPropertyRequest) SetDeviceName(v []*string) *SetDevicesPropertyRequest {
	s.DeviceName = v
	return s
}

func (s *SetDevicesPropertyRequest) SetIotInstanceId(v string) *SetDevicesPropertyRequest {
	s.IotInstanceId = &v
	return s
}

func (s *SetDevicesPropertyRequest) SetProductKey(v string) *SetDevicesPropertyRequest {
	s.ProductKey = &v
	return s
}

func (s *SetDevicesPropertyRequest) SetItems(v string) *SetDevicesPropertyRequest {
	s.Items = &v
	return s
}

type SetDevicesPropertyResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
}

func (s SetDevicesPropertyResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDevicesPropertyResponse) GoString() string {
	return s.String()
}

func (s *SetDevicesPropertyResponse) SetRequestId(v string) *SetDevicesPropertyResponse {
	s.RequestId = &v
	return s
}

func (s *SetDevicesPropertyResponse) SetSuccess(v bool) *SetDevicesPropertyResponse {
	s.Success = &v
	return s
}

func (s *SetDevicesPropertyResponse) SetErrorMessage(v string) *SetDevicesPropertyResponse {
	s.ErrorMessage = &v
	return s
}

func (s *SetDevicesPropertyResponse) SetCode(v string) *SetDevicesPropertyResponse {
	s.Code = &v
	return s
}

type InvokeThingsServiceRequest struct {
	DeviceName    []*string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true" type:"Repeated"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Identifier    *string   `json:"Identifier,omitempty" xml:"Identifier,omitempty" require:"true"`
	Args          *string   `json:"Args,omitempty" xml:"Args,omitempty" require:"true"`
}

func (s InvokeThingsServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s InvokeThingsServiceRequest) GoString() string {
	return s.String()
}

func (s *InvokeThingsServiceRequest) SetDeviceName(v []*string) *InvokeThingsServiceRequest {
	s.DeviceName = v
	return s
}

func (s *InvokeThingsServiceRequest) SetIotInstanceId(v string) *InvokeThingsServiceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *InvokeThingsServiceRequest) SetProductKey(v string) *InvokeThingsServiceRequest {
	s.ProductKey = &v
	return s
}

func (s *InvokeThingsServiceRequest) SetIdentifier(v string) *InvokeThingsServiceRequest {
	s.Identifier = &v
	return s
}

func (s *InvokeThingsServiceRequest) SetArgs(v string) *InvokeThingsServiceRequest {
	s.Args = &v
	return s
}

type InvokeThingsServiceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
}

func (s InvokeThingsServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s InvokeThingsServiceResponse) GoString() string {
	return s.String()
}

func (s *InvokeThingsServiceResponse) SetRequestId(v string) *InvokeThingsServiceResponse {
	s.RequestId = &v
	return s
}

func (s *InvokeThingsServiceResponse) SetSuccess(v bool) *InvokeThingsServiceResponse {
	s.Success = &v
	return s
}

func (s *InvokeThingsServiceResponse) SetErrorMessage(v string) *InvokeThingsServiceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *InvokeThingsServiceResponse) SetCode(v string) *InvokeThingsServiceResponse {
	s.Code = &v
	return s
}

type SetDeviceGroupTagsRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	TagString     *string `json:"TagString,omitempty" xml:"TagString,omitempty"`
}

func (s SetDeviceGroupTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDeviceGroupTagsRequest) GoString() string {
	return s.String()
}

func (s *SetDeviceGroupTagsRequest) SetIotInstanceId(v string) *SetDeviceGroupTagsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *SetDeviceGroupTagsRequest) SetGroupId(v string) *SetDeviceGroupTagsRequest {
	s.GroupId = &v
	return s
}

func (s *SetDeviceGroupTagsRequest) SetTagString(v string) *SetDeviceGroupTagsRequest {
	s.TagString = &v
	return s
}

type SetDeviceGroupTagsResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s SetDeviceGroupTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDeviceGroupTagsResponse) GoString() string {
	return s.String()
}

func (s *SetDeviceGroupTagsResponse) SetRequestId(v string) *SetDeviceGroupTagsResponse {
	s.RequestId = &v
	return s
}

func (s *SetDeviceGroupTagsResponse) SetSuccess(v bool) *SetDeviceGroupTagsResponse {
	s.Success = &v
	return s
}

func (s *SetDeviceGroupTagsResponse) SetCode(v string) *SetDeviceGroupTagsResponse {
	s.Code = &v
	return s
}

func (s *SetDeviceGroupTagsResponse) SetErrorMessage(v string) *SetDeviceGroupTagsResponse {
	s.ErrorMessage = &v
	return s
}

type QueryAppDeviceListRequest struct {
	IotInstanceId   *string                             `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize        *int                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKeyList  []*string                           `json:"ProductKeyList,omitempty" xml:"ProductKeyList,omitempty" type:"Repeated"`
	CategoryKeyList []*string                           `json:"CategoryKeyList,omitempty" xml:"CategoryKeyList,omitempty" type:"Repeated"`
	AppKey          *string                             `json:"AppKey,omitempty" xml:"AppKey,omitempty"`
	TagList         []*QueryAppDeviceListRequestTagList `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
	CurrentPage     *int                                `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s QueryAppDeviceListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppDeviceListRequest) GoString() string {
	return s.String()
}

func (s *QueryAppDeviceListRequest) SetIotInstanceId(v string) *QueryAppDeviceListRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryAppDeviceListRequest) SetPageSize(v int) *QueryAppDeviceListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAppDeviceListRequest) SetProductKeyList(v []*string) *QueryAppDeviceListRequest {
	s.ProductKeyList = v
	return s
}

func (s *QueryAppDeviceListRequest) SetCategoryKeyList(v []*string) *QueryAppDeviceListRequest {
	s.CategoryKeyList = v
	return s
}

func (s *QueryAppDeviceListRequest) SetAppKey(v string) *QueryAppDeviceListRequest {
	s.AppKey = &v
	return s
}

func (s *QueryAppDeviceListRequest) SetTagList(v []*QueryAppDeviceListRequestTagList) *QueryAppDeviceListRequest {
	s.TagList = v
	return s
}

func (s *QueryAppDeviceListRequest) SetCurrentPage(v int) *QueryAppDeviceListRequest {
	s.CurrentPage = &v
	return s
}

type QueryAppDeviceListRequestTagList struct {
	TagName  *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s QueryAppDeviceListRequestTagList) String() string {
	return tea.Prettify(s)
}

func (s QueryAppDeviceListRequestTagList) GoString() string {
	return s.String()
}

func (s *QueryAppDeviceListRequestTagList) SetTagName(v string) *QueryAppDeviceListRequestTagList {
	s.TagName = &v
	return s
}

func (s *QueryAppDeviceListRequestTagList) SetTagValue(v string) *QueryAppDeviceListRequestTagList {
	s.TagValue = &v
	return s
}

type QueryAppDeviceListResponse struct {
	RequestId    *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                           `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string                         `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Page         *int                            `json:"Page,omitempty" xml:"Page,omitempty" require:"true"`
	PageSize     *int                            `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageCount    *int                            `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	Total        *int                            `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	Data         *QueryAppDeviceListResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryAppDeviceListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppDeviceListResponse) GoString() string {
	return s.String()
}

func (s *QueryAppDeviceListResponse) SetRequestId(v string) *QueryAppDeviceListResponse {
	s.RequestId = &v
	return s
}

func (s *QueryAppDeviceListResponse) SetSuccess(v bool) *QueryAppDeviceListResponse {
	s.Success = &v
	return s
}

func (s *QueryAppDeviceListResponse) SetErrorMessage(v string) *QueryAppDeviceListResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryAppDeviceListResponse) SetCode(v string) *QueryAppDeviceListResponse {
	s.Code = &v
	return s
}

func (s *QueryAppDeviceListResponse) SetPage(v int) *QueryAppDeviceListResponse {
	s.Page = &v
	return s
}

func (s *QueryAppDeviceListResponse) SetPageSize(v int) *QueryAppDeviceListResponse {
	s.PageSize = &v
	return s
}

func (s *QueryAppDeviceListResponse) SetPageCount(v int) *QueryAppDeviceListResponse {
	s.PageCount = &v
	return s
}

func (s *QueryAppDeviceListResponse) SetTotal(v int) *QueryAppDeviceListResponse {
	s.Total = &v
	return s
}

func (s *QueryAppDeviceListResponse) SetData(v *QueryAppDeviceListResponseData) *QueryAppDeviceListResponse {
	s.Data = v
	return s
}

type QueryAppDeviceListResponseData struct {
	Data []*QueryAppDeviceListResponseDataData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s QueryAppDeviceListResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryAppDeviceListResponseData) GoString() string {
	return s.String()
}

func (s *QueryAppDeviceListResponseData) SetData(v []*QueryAppDeviceListResponseDataData) *QueryAppDeviceListResponseData {
	s.Data = v
	return s
}

type QueryAppDeviceListResponseDataData struct {
	ProductName       *string `json:"ProductName,omitempty" xml:"ProductName,omitempty" require:"true"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	NodeType          *int    `json:"NodeType,omitempty" xml:"NodeType,omitempty" require:"true"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	ActiveTime        *string `json:"ActiveTime,omitempty" xml:"ActiveTime,omitempty" require:"true"`
	LastOnlineTime    *string `json:"LastOnlineTime,omitempty" xml:"LastOnlineTime,omitempty" require:"true"`
	CreateTime        *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	ChildDeviceCount  *int64  `json:"ChildDeviceCount,omitempty" xml:"ChildDeviceCount,omitempty" require:"true"`
	UtcActiveTime     *string `json:"UtcActiveTime,omitempty" xml:"UtcActiveTime,omitempty" require:"true"`
	UtcLastOnlineTime *string `json:"UtcLastOnlineTime,omitempty" xml:"UtcLastOnlineTime,omitempty" require:"true"`
	UtcCreateTime     *string `json:"UtcCreateTime,omitempty" xml:"UtcCreateTime,omitempty" require:"true"`
}

func (s QueryAppDeviceListResponseDataData) String() string {
	return tea.Prettify(s)
}

func (s QueryAppDeviceListResponseDataData) GoString() string {
	return s.String()
}

func (s *QueryAppDeviceListResponseDataData) SetProductName(v string) *QueryAppDeviceListResponseDataData {
	s.ProductName = &v
	return s
}

func (s *QueryAppDeviceListResponseDataData) SetProductKey(v string) *QueryAppDeviceListResponseDataData {
	s.ProductKey = &v
	return s
}

func (s *QueryAppDeviceListResponseDataData) SetDeviceName(v string) *QueryAppDeviceListResponseDataData {
	s.DeviceName = &v
	return s
}

func (s *QueryAppDeviceListResponseDataData) SetNodeType(v int) *QueryAppDeviceListResponseDataData {
	s.NodeType = &v
	return s
}

func (s *QueryAppDeviceListResponseDataData) SetStatus(v string) *QueryAppDeviceListResponseDataData {
	s.Status = &v
	return s
}

func (s *QueryAppDeviceListResponseDataData) SetActiveTime(v string) *QueryAppDeviceListResponseDataData {
	s.ActiveTime = &v
	return s
}

func (s *QueryAppDeviceListResponseDataData) SetLastOnlineTime(v string) *QueryAppDeviceListResponseDataData {
	s.LastOnlineTime = &v
	return s
}

func (s *QueryAppDeviceListResponseDataData) SetCreateTime(v string) *QueryAppDeviceListResponseDataData {
	s.CreateTime = &v
	return s
}

func (s *QueryAppDeviceListResponseDataData) SetChildDeviceCount(v int64) *QueryAppDeviceListResponseDataData {
	s.ChildDeviceCount = &v
	return s
}

func (s *QueryAppDeviceListResponseDataData) SetUtcActiveTime(v string) *QueryAppDeviceListResponseDataData {
	s.UtcActiveTime = &v
	return s
}

func (s *QueryAppDeviceListResponseDataData) SetUtcLastOnlineTime(v string) *QueryAppDeviceListResponseDataData {
	s.UtcLastOnlineTime = &v
	return s
}

func (s *QueryAppDeviceListResponseDataData) SetUtcCreateTime(v string) *QueryAppDeviceListResponseDataData {
	s.UtcCreateTime = &v
	return s
}

type UpdateDeviceGroupRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	GroupDesc     *string `json:"GroupDesc,omitempty" xml:"GroupDesc,omitempty"`
}

func (s UpdateDeviceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeviceGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateDeviceGroupRequest) SetIotInstanceId(v string) *UpdateDeviceGroupRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateDeviceGroupRequest) SetGroupId(v string) *UpdateDeviceGroupRequest {
	s.GroupId = &v
	return s
}

func (s *UpdateDeviceGroupRequest) SetGroupDesc(v string) *UpdateDeviceGroupRequest {
	s.GroupDesc = &v
	return s
}

type UpdateDeviceGroupResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateDeviceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeviceGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateDeviceGroupResponse) SetRequestId(v string) *UpdateDeviceGroupResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateDeviceGroupResponse) SetSuccess(v bool) *UpdateDeviceGroupResponse {
	s.Success = &v
	return s
}

func (s *UpdateDeviceGroupResponse) SetCode(v string) *UpdateDeviceGroupResponse {
	s.Code = &v
	return s
}

func (s *UpdateDeviceGroupResponse) SetErrorMessage(v string) *UpdateDeviceGroupResponse {
	s.ErrorMessage = &v
	return s
}

type QueryDeviceGroupTagListRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
}

func (s QueryDeviceGroupTagListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupTagListRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupTagListRequest) SetIotInstanceId(v string) *QueryDeviceGroupTagListRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceGroupTagListRequest) SetGroupId(v string) *QueryDeviceGroupTagListRequest {
	s.GroupId = &v
	return s
}

type QueryDeviceGroupTagListResponse struct {
	RequestId    *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryDeviceGroupTagListResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceGroupTagListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupTagListResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupTagListResponse) SetRequestId(v string) *QueryDeviceGroupTagListResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceGroupTagListResponse) SetSuccess(v bool) *QueryDeviceGroupTagListResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceGroupTagListResponse) SetCode(v string) *QueryDeviceGroupTagListResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceGroupTagListResponse) SetErrorMessage(v string) *QueryDeviceGroupTagListResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceGroupTagListResponse) SetData(v *QueryDeviceGroupTagListResponseData) *QueryDeviceGroupTagListResponse {
	s.Data = v
	return s
}

type QueryDeviceGroupTagListResponseData struct {
	GroupTagInfo []*QueryDeviceGroupTagListResponseDataGroupTagInfo `json:"GroupTagInfo,omitempty" xml:"GroupTagInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceGroupTagListResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupTagListResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupTagListResponseData) SetGroupTagInfo(v []*QueryDeviceGroupTagListResponseDataGroupTagInfo) *QueryDeviceGroupTagListResponseData {
	s.GroupTagInfo = v
	return s
}

type QueryDeviceGroupTagListResponseDataGroupTagInfo struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty" require:"true"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty" require:"true"`
}

func (s QueryDeviceGroupTagListResponseDataGroupTagInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupTagListResponseDataGroupTagInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupTagListResponseDataGroupTagInfo) SetTagKey(v string) *QueryDeviceGroupTagListResponseDataGroupTagInfo {
	s.TagKey = &v
	return s
}

func (s *QueryDeviceGroupTagListResponseDataGroupTagInfo) SetTagValue(v string) *QueryDeviceGroupTagListResponseDataGroupTagInfo {
	s.TagValue = &v
	return s
}

type QueryDeviceGroupListRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SuperGroupId  *string `json:"SuperGroupId,omitempty" xml:"SuperGroupId,omitempty"`
	GroupName     *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s QueryDeviceGroupListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupListRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupListRequest) SetIotInstanceId(v string) *QueryDeviceGroupListRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceGroupListRequest) SetPageSize(v int) *QueryDeviceGroupListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceGroupListRequest) SetSuperGroupId(v string) *QueryDeviceGroupListRequest {
	s.SuperGroupId = &v
	return s
}

func (s *QueryDeviceGroupListRequest) SetGroupName(v string) *QueryDeviceGroupListRequest {
	s.GroupName = &v
	return s
}

func (s *QueryDeviceGroupListRequest) SetCurrentPage(v int) *QueryDeviceGroupListRequest {
	s.CurrentPage = &v
	return s
}

type QueryDeviceGroupListResponse struct {
	RequestId    *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                             `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                           `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	CurrentPage  *int                              `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageCount    *int                              `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	PageSize     *int                              `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	Total        *int                              `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	Data         *QueryDeviceGroupListResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceGroupListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupListResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupListResponse) SetRequestId(v string) *QueryDeviceGroupListResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceGroupListResponse) SetSuccess(v bool) *QueryDeviceGroupListResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceGroupListResponse) SetCode(v string) *QueryDeviceGroupListResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceGroupListResponse) SetErrorMessage(v string) *QueryDeviceGroupListResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceGroupListResponse) SetCurrentPage(v int) *QueryDeviceGroupListResponse {
	s.CurrentPage = &v
	return s
}

func (s *QueryDeviceGroupListResponse) SetPageCount(v int) *QueryDeviceGroupListResponse {
	s.PageCount = &v
	return s
}

func (s *QueryDeviceGroupListResponse) SetPageSize(v int) *QueryDeviceGroupListResponse {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceGroupListResponse) SetTotal(v int) *QueryDeviceGroupListResponse {
	s.Total = &v
	return s
}

func (s *QueryDeviceGroupListResponse) SetData(v *QueryDeviceGroupListResponseData) *QueryDeviceGroupListResponse {
	s.Data = v
	return s
}

type QueryDeviceGroupListResponseData struct {
	GroupInfo []*QueryDeviceGroupListResponseDataGroupInfo `json:"GroupInfo,omitempty" xml:"GroupInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceGroupListResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupListResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupListResponseData) SetGroupInfo(v []*QueryDeviceGroupListResponseDataGroupInfo) *QueryDeviceGroupListResponseData {
	s.GroupInfo = v
	return s
}

type QueryDeviceGroupListResponseDataGroupInfo struct {
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	UtcCreate *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
	GroupDesc *string `json:"GroupDesc,omitempty" xml:"GroupDesc,omitempty" require:"true"`
}

func (s QueryDeviceGroupListResponseDataGroupInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupListResponseDataGroupInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupListResponseDataGroupInfo) SetGroupId(v string) *QueryDeviceGroupListResponseDataGroupInfo {
	s.GroupId = &v
	return s
}

func (s *QueryDeviceGroupListResponseDataGroupInfo) SetUtcCreate(v string) *QueryDeviceGroupListResponseDataGroupInfo {
	s.UtcCreate = &v
	return s
}

func (s *QueryDeviceGroupListResponseDataGroupInfo) SetGroupName(v string) *QueryDeviceGroupListResponseDataGroupInfo {
	s.GroupName = &v
	return s
}

func (s *QueryDeviceGroupListResponseDataGroupInfo) SetGroupDesc(v string) *QueryDeviceGroupListResponseDataGroupInfo {
	s.GroupDesc = &v
	return s
}

type QueryDeviceGroupInfoRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
}

func (s QueryDeviceGroupInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupInfoRequest) SetIotInstanceId(v string) *QueryDeviceGroupInfoRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceGroupInfoRequest) SetGroupId(v string) *QueryDeviceGroupInfoRequest {
	s.GroupId = &v
	return s
}

type QueryDeviceGroupInfoResponse struct {
	RequestId    *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                             `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                           `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryDeviceGroupInfoResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceGroupInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupInfoResponse) SetRequestId(v string) *QueryDeviceGroupInfoResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceGroupInfoResponse) SetSuccess(v bool) *QueryDeviceGroupInfoResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceGroupInfoResponse) SetCode(v string) *QueryDeviceGroupInfoResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceGroupInfoResponse) SetErrorMessage(v string) *QueryDeviceGroupInfoResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceGroupInfoResponse) SetData(v *QueryDeviceGroupInfoResponseData) *QueryDeviceGroupInfoResponse {
	s.Data = v
	return s
}

type QueryDeviceGroupInfoResponseData struct {
	GroupId      *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	UtcCreate    *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	GroupName    *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
	GroupDesc    *string `json:"GroupDesc,omitempty" xml:"GroupDesc,omitempty" require:"true"`
	DeviceCount  *int    `json:"DeviceCount,omitempty" xml:"DeviceCount,omitempty" require:"true"`
	DeviceActive *int    `json:"DeviceActive,omitempty" xml:"DeviceActive,omitempty" require:"true"`
	DeviceOnline *int    `json:"DeviceOnline,omitempty" xml:"DeviceOnline,omitempty" require:"true"`
}

func (s QueryDeviceGroupInfoResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupInfoResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupInfoResponseData) SetGroupId(v string) *QueryDeviceGroupInfoResponseData {
	s.GroupId = &v
	return s
}

func (s *QueryDeviceGroupInfoResponseData) SetUtcCreate(v string) *QueryDeviceGroupInfoResponseData {
	s.UtcCreate = &v
	return s
}

func (s *QueryDeviceGroupInfoResponseData) SetGroupName(v string) *QueryDeviceGroupInfoResponseData {
	s.GroupName = &v
	return s
}

func (s *QueryDeviceGroupInfoResponseData) SetGroupDesc(v string) *QueryDeviceGroupInfoResponseData {
	s.GroupDesc = &v
	return s
}

func (s *QueryDeviceGroupInfoResponseData) SetDeviceCount(v int) *QueryDeviceGroupInfoResponseData {
	s.DeviceCount = &v
	return s
}

func (s *QueryDeviceGroupInfoResponseData) SetDeviceActive(v int) *QueryDeviceGroupInfoResponseData {
	s.DeviceActive = &v
	return s
}

func (s *QueryDeviceGroupInfoResponseData) SetDeviceOnline(v int) *QueryDeviceGroupInfoResponseData {
	s.DeviceOnline = &v
	return s
}

type QueryDeviceGroupByDeviceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
}

func (s QueryDeviceGroupByDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByDeviceRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByDeviceRequest) SetIotInstanceId(v string) *QueryDeviceGroupByDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceGroupByDeviceRequest) SetProductKey(v string) *QueryDeviceGroupByDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceGroupByDeviceRequest) SetDeviceName(v string) *QueryDeviceGroupByDeviceRequest {
	s.DeviceName = &v
	return s
}

type QueryDeviceGroupByDeviceResponse struct {
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                       `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	GroupInfos   *QueryDeviceGroupByDeviceResponseGroupInfos `json:"GroupInfos,omitempty" xml:"GroupInfos,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceGroupByDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByDeviceResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByDeviceResponse) SetRequestId(v string) *QueryDeviceGroupByDeviceResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceGroupByDeviceResponse) SetSuccess(v bool) *QueryDeviceGroupByDeviceResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceGroupByDeviceResponse) SetCode(v string) *QueryDeviceGroupByDeviceResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceGroupByDeviceResponse) SetErrorMessage(v string) *QueryDeviceGroupByDeviceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceGroupByDeviceResponse) SetGroupInfos(v *QueryDeviceGroupByDeviceResponseGroupInfos) *QueryDeviceGroupByDeviceResponse {
	s.GroupInfos = v
	return s
}

type QueryDeviceGroupByDeviceResponseGroupInfos struct {
	GroupInfo []*QueryDeviceGroupByDeviceResponseGroupInfosGroupInfo `json:"GroupInfo,omitempty" xml:"GroupInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceGroupByDeviceResponseGroupInfos) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByDeviceResponseGroupInfos) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByDeviceResponseGroupInfos) SetGroupInfo(v []*QueryDeviceGroupByDeviceResponseGroupInfosGroupInfo) *QueryDeviceGroupByDeviceResponseGroupInfos {
	s.GroupInfo = v
	return s
}

type QueryDeviceGroupByDeviceResponseGroupInfosGroupInfo struct {
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
	UtcCreate *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	GroupDesc *string `json:"GroupDesc,omitempty" xml:"GroupDesc,omitempty" require:"true"`
}

func (s QueryDeviceGroupByDeviceResponseGroupInfosGroupInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByDeviceResponseGroupInfosGroupInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByDeviceResponseGroupInfosGroupInfo) SetGroupId(v string) *QueryDeviceGroupByDeviceResponseGroupInfosGroupInfo {
	s.GroupId = &v
	return s
}

func (s *QueryDeviceGroupByDeviceResponseGroupInfosGroupInfo) SetGroupName(v string) *QueryDeviceGroupByDeviceResponseGroupInfosGroupInfo {
	s.GroupName = &v
	return s
}

func (s *QueryDeviceGroupByDeviceResponseGroupInfosGroupInfo) SetUtcCreate(v string) *QueryDeviceGroupByDeviceResponseGroupInfosGroupInfo {
	s.UtcCreate = &v
	return s
}

func (s *QueryDeviceGroupByDeviceResponseGroupInfosGroupInfo) SetGroupDesc(v string) *QueryDeviceGroupByDeviceResponseGroupInfosGroupInfo {
	s.GroupDesc = &v
	return s
}

type DeleteDeviceGroupRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
}

func (s DeleteDeviceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeviceGroupRequest) SetIotInstanceId(v string) *DeleteDeviceGroupRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteDeviceGroupRequest) SetGroupId(v string) *DeleteDeviceGroupRequest {
	s.GroupId = &v
	return s
}

type DeleteDeviceGroupResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteDeviceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeviceGroupResponse) SetRequestId(v string) *DeleteDeviceGroupResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteDeviceGroupResponse) SetSuccess(v bool) *DeleteDeviceGroupResponse {
	s.Success = &v
	return s
}

func (s *DeleteDeviceGroupResponse) SetCode(v string) *DeleteDeviceGroupResponse {
	s.Code = &v
	return s
}

func (s *DeleteDeviceGroupResponse) SetErrorMessage(v string) *DeleteDeviceGroupResponse {
	s.ErrorMessage = &v
	return s
}

type CreateDeviceGroupRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	SuperGroupId  *string `json:"SuperGroupId,omitempty" xml:"SuperGroupId,omitempty"`
	GroupDesc     *string `json:"GroupDesc,omitempty" xml:"GroupDesc,omitempty"`
	GroupName     *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
}

func (s CreateDeviceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateDeviceGroupRequest) SetIotInstanceId(v string) *CreateDeviceGroupRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateDeviceGroupRequest) SetSuperGroupId(v string) *CreateDeviceGroupRequest {
	s.SuperGroupId = &v
	return s
}

func (s *CreateDeviceGroupRequest) SetGroupDesc(v string) *CreateDeviceGroupRequest {
	s.GroupDesc = &v
	return s
}

func (s *CreateDeviceGroupRequest) SetGroupName(v string) *CreateDeviceGroupRequest {
	s.GroupName = &v
	return s
}

type CreateDeviceGroupResponse struct {
	RequestId    *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                          `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *CreateDeviceGroupResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s CreateDeviceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateDeviceGroupResponse) SetRequestId(v string) *CreateDeviceGroupResponse {
	s.RequestId = &v
	return s
}

func (s *CreateDeviceGroupResponse) SetSuccess(v bool) *CreateDeviceGroupResponse {
	s.Success = &v
	return s
}

func (s *CreateDeviceGroupResponse) SetCode(v string) *CreateDeviceGroupResponse {
	s.Code = &v
	return s
}

func (s *CreateDeviceGroupResponse) SetErrorMessage(v string) *CreateDeviceGroupResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateDeviceGroupResponse) SetData(v *CreateDeviceGroupResponseData) *CreateDeviceGroupResponse {
	s.Data = v
	return s
}

type CreateDeviceGroupResponseData struct {
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	UtcCreate *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
	GroupDesc *string `json:"GroupDesc,omitempty" xml:"GroupDesc,omitempty" require:"true"`
}

func (s CreateDeviceGroupResponseData) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceGroupResponseData) GoString() string {
	return s.String()
}

func (s *CreateDeviceGroupResponseData) SetGroupId(v string) *CreateDeviceGroupResponseData {
	s.GroupId = &v
	return s
}

func (s *CreateDeviceGroupResponseData) SetUtcCreate(v string) *CreateDeviceGroupResponseData {
	s.UtcCreate = &v
	return s
}

func (s *CreateDeviceGroupResponseData) SetGroupName(v string) *CreateDeviceGroupResponseData {
	s.GroupName = &v
	return s
}

func (s *CreateDeviceGroupResponseData) SetGroupDesc(v string) *CreateDeviceGroupResponseData {
	s.GroupDesc = &v
	return s
}

type BatchDeleteDeviceGroupRelationsRequest struct {
	IotInstanceId *string                                         `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string                                         `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	Device        []*BatchDeleteDeviceGroupRelationsRequestDevice `json:"Device,omitempty" xml:"Device,omitempty" type:"Repeated"`
}

func (s BatchDeleteDeviceGroupRelationsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteDeviceGroupRelationsRequest) GoString() string {
	return s.String()
}

func (s *BatchDeleteDeviceGroupRelationsRequest) SetIotInstanceId(v string) *BatchDeleteDeviceGroupRelationsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsRequest) SetGroupId(v string) *BatchDeleteDeviceGroupRelationsRequest {
	s.GroupId = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsRequest) SetDevice(v []*BatchDeleteDeviceGroupRelationsRequestDevice) *BatchDeleteDeviceGroupRelationsRequest {
	s.Device = v
	return s
}

type BatchDeleteDeviceGroupRelationsRequestDevice struct {
	ProductKey *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
}

func (s BatchDeleteDeviceGroupRelationsRequestDevice) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteDeviceGroupRelationsRequestDevice) GoString() string {
	return s.String()
}

func (s *BatchDeleteDeviceGroupRelationsRequestDevice) SetProductKey(v string) *BatchDeleteDeviceGroupRelationsRequestDevice {
	s.ProductKey = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsRequestDevice) SetDeviceName(v string) *BatchDeleteDeviceGroupRelationsRequestDevice {
	s.DeviceName = &v
	return s
}

type BatchDeleteDeviceGroupRelationsResponse struct {
	RequestId                      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success                        *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code                           *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage                   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	ValidDeviceCount               *int    `json:"ValidDeviceCount,omitempty" xml:"ValidDeviceCount,omitempty" require:"true"`
	AlreadyRelatedGroupDeviceCount *int    `json:"AlreadyRelatedGroupDeviceCount,omitempty" xml:"AlreadyRelatedGroupDeviceCount,omitempty" require:"true"`
	SuccessDeviceCount             *int    `json:"SuccessDeviceCount,omitempty" xml:"SuccessDeviceCount,omitempty" require:"true"`
}

func (s BatchDeleteDeviceGroupRelationsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteDeviceGroupRelationsResponse) GoString() string {
	return s.String()
}

func (s *BatchDeleteDeviceGroupRelationsResponse) SetRequestId(v string) *BatchDeleteDeviceGroupRelationsResponse {
	s.RequestId = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsResponse) SetSuccess(v bool) *BatchDeleteDeviceGroupRelationsResponse {
	s.Success = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsResponse) SetCode(v string) *BatchDeleteDeviceGroupRelationsResponse {
	s.Code = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsResponse) SetErrorMessage(v string) *BatchDeleteDeviceGroupRelationsResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsResponse) SetValidDeviceCount(v int) *BatchDeleteDeviceGroupRelationsResponse {
	s.ValidDeviceCount = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsResponse) SetAlreadyRelatedGroupDeviceCount(v int) *BatchDeleteDeviceGroupRelationsResponse {
	s.AlreadyRelatedGroupDeviceCount = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsResponse) SetSuccessDeviceCount(v int) *BatchDeleteDeviceGroupRelationsResponse {
	s.SuccessDeviceCount = &v
	return s
}

type BatchAddDeviceGroupRelationsRequest struct {
	IotInstanceId *string                                      `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string                                      `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	Device        []*BatchAddDeviceGroupRelationsRequestDevice `json:"Device,omitempty" xml:"Device,omitempty" type:"Repeated"`
}

func (s BatchAddDeviceGroupRelationsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchAddDeviceGroupRelationsRequest) GoString() string {
	return s.String()
}

func (s *BatchAddDeviceGroupRelationsRequest) SetIotInstanceId(v string) *BatchAddDeviceGroupRelationsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsRequest) SetGroupId(v string) *BatchAddDeviceGroupRelationsRequest {
	s.GroupId = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsRequest) SetDevice(v []*BatchAddDeviceGroupRelationsRequestDevice) *BatchAddDeviceGroupRelationsRequest {
	s.Device = v
	return s
}

type BatchAddDeviceGroupRelationsRequestDevice struct {
	ProductKey *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
}

func (s BatchAddDeviceGroupRelationsRequestDevice) String() string {
	return tea.Prettify(s)
}

func (s BatchAddDeviceGroupRelationsRequestDevice) GoString() string {
	return s.String()
}

func (s *BatchAddDeviceGroupRelationsRequestDevice) SetProductKey(v string) *BatchAddDeviceGroupRelationsRequestDevice {
	s.ProductKey = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsRequestDevice) SetDeviceName(v string) *BatchAddDeviceGroupRelationsRequestDevice {
	s.DeviceName = &v
	return s
}

type BatchAddDeviceGroupRelationsResponse struct {
	RequestId                      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success                        *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code                           *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ValidDeviceCount               *int    `json:"ValidDeviceCount,omitempty" xml:"ValidDeviceCount,omitempty" require:"true"`
	ExceedTenGroupDeviceCount      *int    `json:"ExceedTenGroupDeviceCount,omitempty" xml:"ExceedTenGroupDeviceCount,omitempty" require:"true"`
	AlreadyRelatedGroupDeviceCount *int    `json:"AlreadyRelatedGroupDeviceCount,omitempty" xml:"AlreadyRelatedGroupDeviceCount,omitempty" require:"true"`
	SuccessAddedDeviceCount        *int    `json:"SuccessAddedDeviceCount,omitempty" xml:"SuccessAddedDeviceCount,omitempty" require:"true"`
	ErrorMessage                   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s BatchAddDeviceGroupRelationsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchAddDeviceGroupRelationsResponse) GoString() string {
	return s.String()
}

func (s *BatchAddDeviceGroupRelationsResponse) SetRequestId(v string) *BatchAddDeviceGroupRelationsResponse {
	s.RequestId = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsResponse) SetSuccess(v bool) *BatchAddDeviceGroupRelationsResponse {
	s.Success = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsResponse) SetCode(v string) *BatchAddDeviceGroupRelationsResponse {
	s.Code = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsResponse) SetValidDeviceCount(v int) *BatchAddDeviceGroupRelationsResponse {
	s.ValidDeviceCount = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsResponse) SetExceedTenGroupDeviceCount(v int) *BatchAddDeviceGroupRelationsResponse {
	s.ExceedTenGroupDeviceCount = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsResponse) SetAlreadyRelatedGroupDeviceCount(v int) *BatchAddDeviceGroupRelationsResponse {
	s.AlreadyRelatedGroupDeviceCount = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsResponse) SetSuccessAddedDeviceCount(v int) *BatchAddDeviceGroupRelationsResponse {
	s.SuccessAddedDeviceCount = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsResponse) SetErrorMessage(v string) *BatchAddDeviceGroupRelationsResponse {
	s.ErrorMessage = &v
	return s
}

type RRpcRequest struct {
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	Timeout           *int    `json:"Timeout,omitempty" xml:"Timeout,omitempty" require:"true"`
	RequestBase64Byte *string `json:"RequestBase64Byte,omitempty" xml:"RequestBase64Byte,omitempty" require:"true"`
	Topic             *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s RRpcRequest) String() string {
	return tea.Prettify(s)
}

func (s RRpcRequest) GoString() string {
	return s.String()
}

func (s *RRpcRequest) SetIotInstanceId(v string) *RRpcRequest {
	s.IotInstanceId = &v
	return s
}

func (s *RRpcRequest) SetProductKey(v string) *RRpcRequest {
	s.ProductKey = &v
	return s
}

func (s *RRpcRequest) SetDeviceName(v string) *RRpcRequest {
	s.DeviceName = &v
	return s
}

func (s *RRpcRequest) SetTimeout(v int) *RRpcRequest {
	s.Timeout = &v
	return s
}

func (s *RRpcRequest) SetRequestBase64Byte(v string) *RRpcRequest {
	s.RequestBase64Byte = &v
	return s
}

func (s *RRpcRequest) SetTopic(v string) *RRpcRequest {
	s.Topic = &v
	return s
}

type RRpcResponse struct {
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success           *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code              *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage      *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	RrpcCode          *string `json:"RrpcCode,omitempty" xml:"RrpcCode,omitempty" require:"true"`
	PayloadBase64Byte *string `json:"PayloadBase64Byte,omitempty" xml:"PayloadBase64Byte,omitempty" require:"true"`
	MessageId         *int64  `json:"MessageId,omitempty" xml:"MessageId,omitempty" require:"true"`
}

func (s RRpcResponse) String() string {
	return tea.Prettify(s)
}

func (s RRpcResponse) GoString() string {
	return s.String()
}

func (s *RRpcResponse) SetRequestId(v string) *RRpcResponse {
	s.RequestId = &v
	return s
}

func (s *RRpcResponse) SetSuccess(v bool) *RRpcResponse {
	s.Success = &v
	return s
}

func (s *RRpcResponse) SetCode(v string) *RRpcResponse {
	s.Code = &v
	return s
}

func (s *RRpcResponse) SetErrorMessage(v string) *RRpcResponse {
	s.ErrorMessage = &v
	return s
}

func (s *RRpcResponse) SetRrpcCode(v string) *RRpcResponse {
	s.RrpcCode = &v
	return s
}

func (s *RRpcResponse) SetPayloadBase64Byte(v string) *RRpcResponse {
	s.PayloadBase64Byte = &v
	return s
}

func (s *RRpcResponse) SetMessageId(v int64) *RRpcResponse {
	s.MessageId = &v
	return s
}

type QueryPageByApplyIdRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ApplyId       *int64  `json:"ApplyId,omitempty" xml:"ApplyId,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s QueryPageByApplyIdRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPageByApplyIdRequest) GoString() string {
	return s.String()
}

func (s *QueryPageByApplyIdRequest) SetIotInstanceId(v string) *QueryPageByApplyIdRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryPageByApplyIdRequest) SetPageSize(v int) *QueryPageByApplyIdRequest {
	s.PageSize = &v
	return s
}

func (s *QueryPageByApplyIdRequest) SetApplyId(v int64) *QueryPageByApplyIdRequest {
	s.ApplyId = &v
	return s
}

func (s *QueryPageByApplyIdRequest) SetCurrentPage(v int) *QueryPageByApplyIdRequest {
	s.CurrentPage = &v
	return s
}

type QueryPageByApplyIdResponse struct {
	RequestId       *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success         *bool                                      `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code            *string                                    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage    *string                                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	PageSize        *int                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	Page            *int                                       `json:"Page,omitempty" xml:"Page,omitempty" require:"true"`
	PageCount       *int                                       `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	Total           *int                                       `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	ApplyDeviceList *QueryPageByApplyIdResponseApplyDeviceList `json:"ApplyDeviceList,omitempty" xml:"ApplyDeviceList,omitempty" require:"true" type:"Struct"`
}

func (s QueryPageByApplyIdResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPageByApplyIdResponse) GoString() string {
	return s.String()
}

func (s *QueryPageByApplyIdResponse) SetRequestId(v string) *QueryPageByApplyIdResponse {
	s.RequestId = &v
	return s
}

func (s *QueryPageByApplyIdResponse) SetSuccess(v bool) *QueryPageByApplyIdResponse {
	s.Success = &v
	return s
}

func (s *QueryPageByApplyIdResponse) SetCode(v string) *QueryPageByApplyIdResponse {
	s.Code = &v
	return s
}

func (s *QueryPageByApplyIdResponse) SetErrorMessage(v string) *QueryPageByApplyIdResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryPageByApplyIdResponse) SetPageSize(v int) *QueryPageByApplyIdResponse {
	s.PageSize = &v
	return s
}

func (s *QueryPageByApplyIdResponse) SetPage(v int) *QueryPageByApplyIdResponse {
	s.Page = &v
	return s
}

func (s *QueryPageByApplyIdResponse) SetPageCount(v int) *QueryPageByApplyIdResponse {
	s.PageCount = &v
	return s
}

func (s *QueryPageByApplyIdResponse) SetTotal(v int) *QueryPageByApplyIdResponse {
	s.Total = &v
	return s
}

func (s *QueryPageByApplyIdResponse) SetApplyDeviceList(v *QueryPageByApplyIdResponseApplyDeviceList) *QueryPageByApplyIdResponse {
	s.ApplyDeviceList = v
	return s
}

type QueryPageByApplyIdResponseApplyDeviceList struct {
	ApplyDeviceInfo []*QueryPageByApplyIdResponseApplyDeviceListApplyDeviceInfo `json:"ApplyDeviceInfo,omitempty" xml:"ApplyDeviceInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryPageByApplyIdResponseApplyDeviceList) String() string {
	return tea.Prettify(s)
}

func (s QueryPageByApplyIdResponseApplyDeviceList) GoString() string {
	return s.String()
}

func (s *QueryPageByApplyIdResponseApplyDeviceList) SetApplyDeviceInfo(v []*QueryPageByApplyIdResponseApplyDeviceListApplyDeviceInfo) *QueryPageByApplyIdResponseApplyDeviceList {
	s.ApplyDeviceInfo = v
	return s
}

type QueryPageByApplyIdResponseApplyDeviceListApplyDeviceInfo struct {
	DeviceId     *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty" require:"true"`
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	DeviceSecret *string `json:"DeviceSecret,omitempty" xml:"DeviceSecret,omitempty" require:"true"`
	IotId        *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
}

func (s QueryPageByApplyIdResponseApplyDeviceListApplyDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryPageByApplyIdResponseApplyDeviceListApplyDeviceInfo) GoString() string {
	return s.String()
}

func (s *QueryPageByApplyIdResponseApplyDeviceListApplyDeviceInfo) SetDeviceId(v string) *QueryPageByApplyIdResponseApplyDeviceListApplyDeviceInfo {
	s.DeviceId = &v
	return s
}

func (s *QueryPageByApplyIdResponseApplyDeviceListApplyDeviceInfo) SetDeviceName(v string) *QueryPageByApplyIdResponseApplyDeviceListApplyDeviceInfo {
	s.DeviceName = &v
	return s
}

func (s *QueryPageByApplyIdResponseApplyDeviceListApplyDeviceInfo) SetDeviceSecret(v string) *QueryPageByApplyIdResponseApplyDeviceListApplyDeviceInfo {
	s.DeviceSecret = &v
	return s
}

func (s *QueryPageByApplyIdResponseApplyDeviceListApplyDeviceInfo) SetIotId(v string) *QueryPageByApplyIdResponseApplyDeviceListApplyDeviceInfo {
	s.IotId = &v
	return s
}

type QueryDeviceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	CurrentPage   *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s QueryDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceRequest) SetIotInstanceId(v string) *QueryDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceRequest) SetPageSize(v int) *QueryDeviceRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceRequest) SetProductKey(v string) *QueryDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceRequest) SetCurrentPage(v int) *QueryDeviceRequest {
	s.CurrentPage = &v
	return s
}

type QueryDeviceResponse struct {
	RequestId    *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                    `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                  `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Total        *int                     `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize     *int                     `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageCount    *int                     `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	Page         *int                     `json:"Page,omitempty" xml:"Page,omitempty" require:"true"`
	Data         *QueryDeviceResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceResponse) SetRequestId(v string) *QueryDeviceResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceResponse) SetSuccess(v bool) *QueryDeviceResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceResponse) SetCode(v string) *QueryDeviceResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceResponse) SetErrorMessage(v string) *QueryDeviceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceResponse) SetTotal(v int) *QueryDeviceResponse {
	s.Total = &v
	return s
}

func (s *QueryDeviceResponse) SetPageSize(v int) *QueryDeviceResponse {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceResponse) SetPageCount(v int) *QueryDeviceResponse {
	s.PageCount = &v
	return s
}

func (s *QueryDeviceResponse) SetPage(v int) *QueryDeviceResponse {
	s.Page = &v
	return s
}

func (s *QueryDeviceResponse) SetData(v *QueryDeviceResponseData) *QueryDeviceResponse {
	s.Data = v
	return s
}

type QueryDeviceResponseData struct {
	DeviceInfo []*QueryDeviceResponseDataDeviceInfo `json:"DeviceInfo,omitempty" xml:"DeviceInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceResponseData) SetDeviceInfo(v []*QueryDeviceResponseDataDeviceInfo) *QueryDeviceResponseData {
	s.DeviceInfo = v
	return s
}

type QueryDeviceResponseDataDeviceInfo struct {
	DeviceId     *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty" require:"true"`
	DeviceSecret *string `json:"DeviceSecret,omitempty" xml:"DeviceSecret,omitempty" require:"true"`
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceStatus *string `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty" require:"true"`
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	DeviceType   *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty" require:"true"`
	GmtCreate    *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModified  *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
	UtcCreate    *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	UtcModified  *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty" require:"true"`
	IotId        *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	Nickname     *string `json:"Nickname,omitempty" xml:"Nickname,omitempty" require:"true"`
}

func (s QueryDeviceResponseDataDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceResponseDataDeviceInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceResponseDataDeviceInfo) SetDeviceId(v string) *QueryDeviceResponseDataDeviceInfo {
	s.DeviceId = &v
	return s
}

func (s *QueryDeviceResponseDataDeviceInfo) SetDeviceSecret(v string) *QueryDeviceResponseDataDeviceInfo {
	s.DeviceSecret = &v
	return s
}

func (s *QueryDeviceResponseDataDeviceInfo) SetProductKey(v string) *QueryDeviceResponseDataDeviceInfo {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceResponseDataDeviceInfo) SetDeviceStatus(v string) *QueryDeviceResponseDataDeviceInfo {
	s.DeviceStatus = &v
	return s
}

func (s *QueryDeviceResponseDataDeviceInfo) SetDeviceName(v string) *QueryDeviceResponseDataDeviceInfo {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceResponseDataDeviceInfo) SetDeviceType(v string) *QueryDeviceResponseDataDeviceInfo {
	s.DeviceType = &v
	return s
}

func (s *QueryDeviceResponseDataDeviceInfo) SetGmtCreate(v string) *QueryDeviceResponseDataDeviceInfo {
	s.GmtCreate = &v
	return s
}

func (s *QueryDeviceResponseDataDeviceInfo) SetGmtModified(v string) *QueryDeviceResponseDataDeviceInfo {
	s.GmtModified = &v
	return s
}

func (s *QueryDeviceResponseDataDeviceInfo) SetUtcCreate(v string) *QueryDeviceResponseDataDeviceInfo {
	s.UtcCreate = &v
	return s
}

func (s *QueryDeviceResponseDataDeviceInfo) SetUtcModified(v string) *QueryDeviceResponseDataDeviceInfo {
	s.UtcModified = &v
	return s
}

func (s *QueryDeviceResponseDataDeviceInfo) SetIotId(v string) *QueryDeviceResponseDataDeviceInfo {
	s.IotId = &v
	return s
}

func (s *QueryDeviceResponseDataDeviceInfo) SetNickname(v string) *QueryDeviceResponseDataDeviceInfo {
	s.Nickname = &v
	return s
}

type SaveDevicePropRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	Props         *string `json:"Props,omitempty" xml:"Props,omitempty" require:"true"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s SaveDevicePropRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveDevicePropRequest) GoString() string {
	return s.String()
}

func (s *SaveDevicePropRequest) SetIotInstanceId(v string) *SaveDevicePropRequest {
	s.IotInstanceId = &v
	return s
}

func (s *SaveDevicePropRequest) SetProductKey(v string) *SaveDevicePropRequest {
	s.ProductKey = &v
	return s
}

func (s *SaveDevicePropRequest) SetDeviceName(v string) *SaveDevicePropRequest {
	s.DeviceName = &v
	return s
}

func (s *SaveDevicePropRequest) SetProps(v string) *SaveDevicePropRequest {
	s.Props = &v
	return s
}

func (s *SaveDevicePropRequest) SetIotId(v string) *SaveDevicePropRequest {
	s.IotId = &v
	return s
}

type SaveDevicePropResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s SaveDevicePropResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveDevicePropResponse) GoString() string {
	return s.String()
}

func (s *SaveDevicePropResponse) SetRequestId(v string) *SaveDevicePropResponse {
	s.RequestId = &v
	return s
}

func (s *SaveDevicePropResponse) SetSuccess(v bool) *SaveDevicePropResponse {
	s.Success = &v
	return s
}

func (s *SaveDevicePropResponse) SetCode(v string) *SaveDevicePropResponse {
	s.Code = &v
	return s
}

func (s *SaveDevicePropResponse) SetErrorMessage(v string) *SaveDevicePropResponse {
	s.ErrorMessage = &v
	return s
}

type QueryTopicRouteTableRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Topic         *string `json:"Topic,omitempty" xml:"Topic,omitempty" require:"true"`
}

func (s QueryTopicRouteTableRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTopicRouteTableRequest) GoString() string {
	return s.String()
}

func (s *QueryTopicRouteTableRequest) SetIotInstanceId(v string) *QueryTopicRouteTableRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryTopicRouteTableRequest) SetTopic(v string) *QueryTopicRouteTableRequest {
	s.Topic = &v
	return s
}

type QueryTopicRouteTableResponse struct {
	RequestId    *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                  `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	DstTopics    *QueryTopicRouteTableResponseDstTopics `json:"DstTopics,omitempty" xml:"DstTopics,omitempty" require:"true" type:"Struct"`
}

func (s QueryTopicRouteTableResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTopicRouteTableResponse) GoString() string {
	return s.String()
}

func (s *QueryTopicRouteTableResponse) SetRequestId(v string) *QueryTopicRouteTableResponse {
	s.RequestId = &v
	return s
}

func (s *QueryTopicRouteTableResponse) SetSuccess(v bool) *QueryTopicRouteTableResponse {
	s.Success = &v
	return s
}

func (s *QueryTopicRouteTableResponse) SetCode(v string) *QueryTopicRouteTableResponse {
	s.Code = &v
	return s
}

func (s *QueryTopicRouteTableResponse) SetErrorMessage(v string) *QueryTopicRouteTableResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryTopicRouteTableResponse) SetDstTopics(v *QueryTopicRouteTableResponseDstTopics) *QueryTopicRouteTableResponse {
	s.DstTopics = v
	return s
}

type QueryTopicRouteTableResponseDstTopics struct {
	Topic []map[string]interface{} `json:"Topic,omitempty" xml:"Topic,omitempty" require:"true" type:"Repeated"`
}

func (s QueryTopicRouteTableResponseDstTopics) String() string {
	return tea.Prettify(s)
}

func (s QueryTopicRouteTableResponseDstTopics) GoString() string {
	return s.String()
}

func (s *QueryTopicRouteTableResponseDstTopics) SetTopic(v []map[string]interface{}) *QueryTopicRouteTableResponseDstTopics {
	s.Topic = v
	return s
}

type QueryTopicReverseRouteTableRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Topic         *string `json:"Topic,omitempty" xml:"Topic,omitempty" require:"true"`
}

func (s QueryTopicReverseRouteTableRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTopicReverseRouteTableRequest) GoString() string {
	return s.String()
}

func (s *QueryTopicReverseRouteTableRequest) SetIotInstanceId(v string) *QueryTopicReverseRouteTableRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryTopicReverseRouteTableRequest) SetRegionId(v string) *QueryTopicReverseRouteTableRequest {
	s.RegionId = &v
	return s
}

func (s *QueryTopicReverseRouteTableRequest) SetTopic(v string) *QueryTopicReverseRouteTableRequest {
	s.Topic = &v
	return s
}

type QueryTopicReverseRouteTableResponse struct {
	RequestId    *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                         `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                       `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                       `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	SrcTopics    *QueryTopicReverseRouteTableResponseSrcTopics `json:"SrcTopics,omitempty" xml:"SrcTopics,omitempty" require:"true" type:"Struct"`
}

func (s QueryTopicReverseRouteTableResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTopicReverseRouteTableResponse) GoString() string {
	return s.String()
}

func (s *QueryTopicReverseRouteTableResponse) SetRequestId(v string) *QueryTopicReverseRouteTableResponse {
	s.RequestId = &v
	return s
}

func (s *QueryTopicReverseRouteTableResponse) SetSuccess(v bool) *QueryTopicReverseRouteTableResponse {
	s.Success = &v
	return s
}

func (s *QueryTopicReverseRouteTableResponse) SetCode(v string) *QueryTopicReverseRouteTableResponse {
	s.Code = &v
	return s
}

func (s *QueryTopicReverseRouteTableResponse) SetErrorMessage(v string) *QueryTopicReverseRouteTableResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryTopicReverseRouteTableResponse) SetSrcTopics(v *QueryTopicReverseRouteTableResponseSrcTopics) *QueryTopicReverseRouteTableResponse {
	s.SrcTopics = v
	return s
}

type QueryTopicReverseRouteTableResponseSrcTopics struct {
	Topic []map[string]interface{} `json:"Topic,omitempty" xml:"Topic,omitempty" require:"true" type:"Repeated"`
}

func (s QueryTopicReverseRouteTableResponseSrcTopics) String() string {
	return tea.Prettify(s)
}

func (s QueryTopicReverseRouteTableResponseSrcTopics) GoString() string {
	return s.String()
}

func (s *QueryTopicReverseRouteTableResponseSrcTopics) SetTopic(v []map[string]interface{}) *QueryTopicReverseRouteTableResponseSrcTopics {
	s.Topic = v
	return s
}

type PubBroadcastRequest struct {
	IotInstanceId  *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey     *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	TopicFullName  *string `json:"TopicFullName,omitempty" xml:"TopicFullName,omitempty"`
	MessageContent *string `json:"MessageContent,omitempty" xml:"MessageContent,omitempty" require:"true"`
}

func (s PubBroadcastRequest) String() string {
	return tea.Prettify(s)
}

func (s PubBroadcastRequest) GoString() string {
	return s.String()
}

func (s *PubBroadcastRequest) SetIotInstanceId(v string) *PubBroadcastRequest {
	s.IotInstanceId = &v
	return s
}

func (s *PubBroadcastRequest) SetProductKey(v string) *PubBroadcastRequest {
	s.ProductKey = &v
	return s
}

func (s *PubBroadcastRequest) SetTopicFullName(v string) *PubBroadcastRequest {
	s.TopicFullName = &v
	return s
}

func (s *PubBroadcastRequest) SetMessageContent(v string) *PubBroadcastRequest {
	s.MessageContent = &v
	return s
}

type PubBroadcastResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	MessageId    *int64  `json:"MessageId,omitempty" xml:"MessageId,omitempty" require:"true"`
}

func (s PubBroadcastResponse) String() string {
	return tea.Prettify(s)
}

func (s PubBroadcastResponse) GoString() string {
	return s.String()
}

func (s *PubBroadcastResponse) SetRequestId(v string) *PubBroadcastResponse {
	s.RequestId = &v
	return s
}

func (s *PubBroadcastResponse) SetSuccess(v bool) *PubBroadcastResponse {
	s.Success = &v
	return s
}

func (s *PubBroadcastResponse) SetCode(v string) *PubBroadcastResponse {
	s.Code = &v
	return s
}

func (s *PubBroadcastResponse) SetErrorMessage(v string) *PubBroadcastResponse {
	s.ErrorMessage = &v
	return s
}

func (s *PubBroadcastResponse) SetMessageId(v int64) *PubBroadcastResponse {
	s.MessageId = &v
	return s
}

type DeleteTopicRouteTableRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DstTopic      []*string `json:"DstTopic,omitempty" xml:"DstTopic,omitempty" require:"true" type:"Repeated"`
	SrcTopic      *string   `json:"SrcTopic,omitempty" xml:"SrcTopic,omitempty" require:"true"`
}

func (s DeleteTopicRouteTableRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTopicRouteTableRequest) GoString() string {
	return s.String()
}

func (s *DeleteTopicRouteTableRequest) SetIotInstanceId(v string) *DeleteTopicRouteTableRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteTopicRouteTableRequest) SetDstTopic(v []*string) *DeleteTopicRouteTableRequest {
	s.DstTopic = v
	return s
}

func (s *DeleteTopicRouteTableRequest) SetSrcTopic(v string) *DeleteTopicRouteTableRequest {
	s.SrcTopic = &v
	return s
}

type DeleteTopicRouteTableResponse struct {
	RequestId     *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success       *bool                                       `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code          *string                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	IsAllSucceed  *bool                                       `json:"IsAllSucceed,omitempty" xml:"IsAllSucceed,omitempty" require:"true"`
	ErrorMessage  *string                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	FailureTopics *DeleteTopicRouteTableResponseFailureTopics `json:"FailureTopics,omitempty" xml:"FailureTopics,omitempty" require:"true" type:"Struct"`
}

func (s DeleteTopicRouteTableResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTopicRouteTableResponse) GoString() string {
	return s.String()
}

func (s *DeleteTopicRouteTableResponse) SetRequestId(v string) *DeleteTopicRouteTableResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteTopicRouteTableResponse) SetSuccess(v bool) *DeleteTopicRouteTableResponse {
	s.Success = &v
	return s
}

func (s *DeleteTopicRouteTableResponse) SetCode(v string) *DeleteTopicRouteTableResponse {
	s.Code = &v
	return s
}

func (s *DeleteTopicRouteTableResponse) SetIsAllSucceed(v bool) *DeleteTopicRouteTableResponse {
	s.IsAllSucceed = &v
	return s
}

func (s *DeleteTopicRouteTableResponse) SetErrorMessage(v string) *DeleteTopicRouteTableResponse {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteTopicRouteTableResponse) SetFailureTopics(v *DeleteTopicRouteTableResponseFailureTopics) *DeleteTopicRouteTableResponse {
	s.FailureTopics = v
	return s
}

type DeleteTopicRouteTableResponseFailureTopics struct {
	Topic []map[string]interface{} `json:"Topic,omitempty" xml:"Topic,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteTopicRouteTableResponseFailureTopics) String() string {
	return tea.Prettify(s)
}

func (s DeleteTopicRouteTableResponseFailureTopics) GoString() string {
	return s.String()
}

func (s *DeleteTopicRouteTableResponseFailureTopics) SetTopic(v []map[string]interface{}) *DeleteTopicRouteTableResponseFailureTopics {
	s.Topic = v
	return s
}

type DeleteDevicePropRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	PropKey       *string `json:"PropKey,omitempty" xml:"PropKey,omitempty" require:"true"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s DeleteDevicePropRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDevicePropRequest) GoString() string {
	return s.String()
}

func (s *DeleteDevicePropRequest) SetIotInstanceId(v string) *DeleteDevicePropRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteDevicePropRequest) SetProductKey(v string) *DeleteDevicePropRequest {
	s.ProductKey = &v
	return s
}

func (s *DeleteDevicePropRequest) SetDeviceName(v string) *DeleteDevicePropRequest {
	s.DeviceName = &v
	return s
}

func (s *DeleteDevicePropRequest) SetPropKey(v string) *DeleteDevicePropRequest {
	s.PropKey = &v
	return s
}

func (s *DeleteDevicePropRequest) SetIotId(v string) *DeleteDevicePropRequest {
	s.IotId = &v
	return s
}

type DeleteDevicePropResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteDevicePropResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDevicePropResponse) GoString() string {
	return s.String()
}

func (s *DeleteDevicePropResponse) SetRequestId(v string) *DeleteDevicePropResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteDevicePropResponse) SetSuccess(v bool) *DeleteDevicePropResponse {
	s.Success = &v
	return s
}

func (s *DeleteDevicePropResponse) SetCode(v string) *DeleteDevicePropResponse {
	s.Code = &v
	return s
}

func (s *DeleteDevicePropResponse) SetErrorMessage(v string) *DeleteDevicePropResponse {
	s.ErrorMessage = &v
	return s
}

type CreateTopicRouteTableRequest struct {
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DstTopic      []*string `json:"DstTopic,omitempty" xml:"DstTopic,omitempty" require:"true" type:"Repeated"`
	SrcTopic      *string   `json:"SrcTopic,omitempty" xml:"SrcTopic,omitempty" require:"true"`
}

func (s CreateTopicRouteTableRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTopicRouteTableRequest) GoString() string {
	return s.String()
}

func (s *CreateTopicRouteTableRequest) SetIotInstanceId(v string) *CreateTopicRouteTableRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateTopicRouteTableRequest) SetDstTopic(v []*string) *CreateTopicRouteTableRequest {
	s.DstTopic = v
	return s
}

func (s *CreateTopicRouteTableRequest) SetSrcTopic(v string) *CreateTopicRouteTableRequest {
	s.SrcTopic = &v
	return s
}

type CreateTopicRouteTableResponse struct {
	RequestId     *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success       *bool                                       `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code          *string                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	IsAllSucceed  *bool                                       `json:"IsAllSucceed,omitempty" xml:"IsAllSucceed,omitempty" require:"true"`
	ErrorMessage  *string                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	FailureTopics *CreateTopicRouteTableResponseFailureTopics `json:"FailureTopics,omitempty" xml:"FailureTopics,omitempty" require:"true" type:"Struct"`
}

func (s CreateTopicRouteTableResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTopicRouteTableResponse) GoString() string {
	return s.String()
}

func (s *CreateTopicRouteTableResponse) SetRequestId(v string) *CreateTopicRouteTableResponse {
	s.RequestId = &v
	return s
}

func (s *CreateTopicRouteTableResponse) SetSuccess(v bool) *CreateTopicRouteTableResponse {
	s.Success = &v
	return s
}

func (s *CreateTopicRouteTableResponse) SetCode(v string) *CreateTopicRouteTableResponse {
	s.Code = &v
	return s
}

func (s *CreateTopicRouteTableResponse) SetIsAllSucceed(v bool) *CreateTopicRouteTableResponse {
	s.IsAllSucceed = &v
	return s
}

func (s *CreateTopicRouteTableResponse) SetErrorMessage(v string) *CreateTopicRouteTableResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateTopicRouteTableResponse) SetFailureTopics(v *CreateTopicRouteTableResponseFailureTopics) *CreateTopicRouteTableResponse {
	s.FailureTopics = v
	return s
}

type CreateTopicRouteTableResponseFailureTopics struct {
	Topic []map[string]interface{} `json:"Topic,omitempty" xml:"Topic,omitempty" require:"true" type:"Repeated"`
}

func (s CreateTopicRouteTableResponseFailureTopics) String() string {
	return tea.Prettify(s)
}

func (s CreateTopicRouteTableResponseFailureTopics) GoString() string {
	return s.String()
}

func (s *CreateTopicRouteTableResponseFailureTopics) SetTopic(v []map[string]interface{}) *CreateTopicRouteTableResponseFailureTopics {
	s.Topic = v
	return s
}

type BatchGetDeviceStateRequest struct {
	DeviceName    []*string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" type:"Repeated"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	IotId         []*string `json:"IotId,omitempty" xml:"IotId,omitempty" type:"Repeated"`
}

func (s BatchGetDeviceStateRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetDeviceStateRequest) GoString() string {
	return s.String()
}

func (s *BatchGetDeviceStateRequest) SetDeviceName(v []*string) *BatchGetDeviceStateRequest {
	s.DeviceName = v
	return s
}

func (s *BatchGetDeviceStateRequest) SetIotInstanceId(v string) *BatchGetDeviceStateRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchGetDeviceStateRequest) SetProductKey(v string) *BatchGetDeviceStateRequest {
	s.ProductKey = &v
	return s
}

func (s *BatchGetDeviceStateRequest) SetIotId(v []*string) *BatchGetDeviceStateRequest {
	s.IotId = v
	return s
}

type BatchGetDeviceStateResponse struct {
	RequestId        *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success          *bool                                        `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code             *string                                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage     *string                                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	DeviceStatusList *BatchGetDeviceStateResponseDeviceStatusList `json:"DeviceStatusList,omitempty" xml:"DeviceStatusList,omitempty" require:"true" type:"Struct"`
}

func (s BatchGetDeviceStateResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetDeviceStateResponse) GoString() string {
	return s.String()
}

func (s *BatchGetDeviceStateResponse) SetRequestId(v string) *BatchGetDeviceStateResponse {
	s.RequestId = &v
	return s
}

func (s *BatchGetDeviceStateResponse) SetSuccess(v bool) *BatchGetDeviceStateResponse {
	s.Success = &v
	return s
}

func (s *BatchGetDeviceStateResponse) SetCode(v string) *BatchGetDeviceStateResponse {
	s.Code = &v
	return s
}

func (s *BatchGetDeviceStateResponse) SetErrorMessage(v string) *BatchGetDeviceStateResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchGetDeviceStateResponse) SetDeviceStatusList(v *BatchGetDeviceStateResponseDeviceStatusList) *BatchGetDeviceStateResponse {
	s.DeviceStatusList = v
	return s
}

type BatchGetDeviceStateResponseDeviceStatusList struct {
	DeviceStatus []*BatchGetDeviceStateResponseDeviceStatusListDeviceStatus `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty" require:"true" type:"Repeated"`
}

func (s BatchGetDeviceStateResponseDeviceStatusList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetDeviceStateResponseDeviceStatusList) GoString() string {
	return s.String()
}

func (s *BatchGetDeviceStateResponseDeviceStatusList) SetDeviceStatus(v []*BatchGetDeviceStateResponseDeviceStatusListDeviceStatus) *BatchGetDeviceStateResponseDeviceStatusList {
	s.DeviceStatus = v
	return s
}

type BatchGetDeviceStateResponseDeviceStatusListDeviceStatus struct {
	DeviceId       *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty" require:"true"`
	DeviceName     *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	AsAddress      *string `json:"AsAddress,omitempty" xml:"AsAddress,omitempty" require:"true"`
	LastOnlineTime *string `json:"LastOnlineTime,omitempty" xml:"LastOnlineTime,omitempty" require:"true"`
	IotId          *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
}

func (s BatchGetDeviceStateResponseDeviceStatusListDeviceStatus) String() string {
	return tea.Prettify(s)
}

func (s BatchGetDeviceStateResponseDeviceStatusListDeviceStatus) GoString() string {
	return s.String()
}

func (s *BatchGetDeviceStateResponseDeviceStatusListDeviceStatus) SetDeviceId(v string) *BatchGetDeviceStateResponseDeviceStatusListDeviceStatus {
	s.DeviceId = &v
	return s
}

func (s *BatchGetDeviceStateResponseDeviceStatusListDeviceStatus) SetDeviceName(v string) *BatchGetDeviceStateResponseDeviceStatusListDeviceStatus {
	s.DeviceName = &v
	return s
}

func (s *BatchGetDeviceStateResponseDeviceStatusListDeviceStatus) SetStatus(v string) *BatchGetDeviceStateResponseDeviceStatusListDeviceStatus {
	s.Status = &v
	return s
}

func (s *BatchGetDeviceStateResponseDeviceStatusListDeviceStatus) SetAsAddress(v string) *BatchGetDeviceStateResponseDeviceStatusListDeviceStatus {
	s.AsAddress = &v
	return s
}

func (s *BatchGetDeviceStateResponseDeviceStatusListDeviceStatus) SetLastOnlineTime(v string) *BatchGetDeviceStateResponseDeviceStatusListDeviceStatus {
	s.LastOnlineTime = &v
	return s
}

func (s *BatchGetDeviceStateResponseDeviceStatusListDeviceStatus) SetIotId(v string) *BatchGetDeviceStateResponseDeviceStatusListDeviceStatus {
	s.IotId = &v
	return s
}

type UpdateRuleActionRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ActionId      *int64  `json:"ActionId,omitempty" xml:"ActionId,omitempty" require:"true"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Configuration *string `json:"Configuration,omitempty" xml:"Configuration,omitempty" require:"true"`
}

func (s UpdateRuleActionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleActionRequest) GoString() string {
	return s.String()
}

func (s *UpdateRuleActionRequest) SetIotInstanceId(v string) *UpdateRuleActionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateRuleActionRequest) SetActionId(v int64) *UpdateRuleActionRequest {
	s.ActionId = &v
	return s
}

func (s *UpdateRuleActionRequest) SetType(v string) *UpdateRuleActionRequest {
	s.Type = &v
	return s
}

func (s *UpdateRuleActionRequest) SetConfiguration(v string) *UpdateRuleActionRequest {
	s.Configuration = &v
	return s
}

type UpdateRuleActionResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateRuleActionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleActionResponse) GoString() string {
	return s.String()
}

func (s *UpdateRuleActionResponse) SetRequestId(v string) *UpdateRuleActionResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateRuleActionResponse) SetCode(v string) *UpdateRuleActionResponse {
	s.Code = &v
	return s
}

func (s *UpdateRuleActionResponse) SetSuccess(v bool) *UpdateRuleActionResponse {
	s.Success = &v
	return s
}

func (s *UpdateRuleActionResponse) SetErrorMessage(v string) *UpdateRuleActionResponse {
	s.ErrorMessage = &v
	return s
}

type UpdateRuleRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
	Select        *string `json:"Select,omitempty" xml:"Select,omitempty"`
	ShortTopic    *string `json:"ShortTopic,omitempty" xml:"ShortTopic,omitempty"`
	Where         *string `json:"Where,omitempty" xml:"Where,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RuleDesc      *string `json:"RuleDesc,omitempty" xml:"RuleDesc,omitempty"`
	TopicType     *int    `json:"TopicType,omitempty" xml:"TopicType,omitempty"`
	Topic         *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s UpdateRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateRuleRequest) SetIotInstanceId(v string) *UpdateRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateRuleRequest) SetRuleId(v int64) *UpdateRuleRequest {
	s.RuleId = &v
	return s
}

func (s *UpdateRuleRequest) SetSelect(v string) *UpdateRuleRequest {
	s.Select = &v
	return s
}

func (s *UpdateRuleRequest) SetShortTopic(v string) *UpdateRuleRequest {
	s.ShortTopic = &v
	return s
}

func (s *UpdateRuleRequest) SetWhere(v string) *UpdateRuleRequest {
	s.Where = &v
	return s
}

func (s *UpdateRuleRequest) SetProductKey(v string) *UpdateRuleRequest {
	s.ProductKey = &v
	return s
}

func (s *UpdateRuleRequest) SetName(v string) *UpdateRuleRequest {
	s.Name = &v
	return s
}

func (s *UpdateRuleRequest) SetRuleDesc(v string) *UpdateRuleRequest {
	s.RuleDesc = &v
	return s
}

func (s *UpdateRuleRequest) SetTopicType(v int) *UpdateRuleRequest {
	s.TopicType = &v
	return s
}

func (s *UpdateRuleRequest) SetTopic(v string) *UpdateRuleRequest {
	s.Topic = &v
	return s
}

type UpdateRuleResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateRuleResponse) SetRequestId(v string) *UpdateRuleResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateRuleResponse) SetSuccess(v bool) *UpdateRuleResponse {
	s.Success = &v
	return s
}

func (s *UpdateRuleResponse) SetCode(v string) *UpdateRuleResponse {
	s.Code = &v
	return s
}

func (s *UpdateRuleResponse) SetErrorMessage(v string) *UpdateRuleResponse {
	s.ErrorMessage = &v
	return s
}

type UpdateProductTopicRequest struct {
	IotInstanceId  *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Desc           *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Operation      *string `json:"Operation,omitempty" xml:"Operation,omitempty" require:"true"`
	TopicShortName *string `json:"TopicShortName,omitempty" xml:"TopicShortName,omitempty" require:"true"`
	TopicId        *string `json:"TopicId,omitempty" xml:"TopicId,omitempty" require:"true"`
}

func (s UpdateProductTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductTopicRequest) GoString() string {
	return s.String()
}

func (s *UpdateProductTopicRequest) SetIotInstanceId(v string) *UpdateProductTopicRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateProductTopicRequest) SetDesc(v string) *UpdateProductTopicRequest {
	s.Desc = &v
	return s
}

func (s *UpdateProductTopicRequest) SetOperation(v string) *UpdateProductTopicRequest {
	s.Operation = &v
	return s
}

func (s *UpdateProductTopicRequest) SetTopicShortName(v string) *UpdateProductTopicRequest {
	s.TopicShortName = &v
	return s
}

func (s *UpdateProductTopicRequest) SetTopicId(v string) *UpdateProductTopicRequest {
	s.TopicId = &v
	return s
}

type UpdateProductTopicResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateProductTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductTopicResponse) GoString() string {
	return s.String()
}

func (s *UpdateProductTopicResponse) SetRequestId(v string) *UpdateProductTopicResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateProductTopicResponse) SetSuccess(v bool) *UpdateProductTopicResponse {
	s.Success = &v
	return s
}

func (s *UpdateProductTopicResponse) SetCode(v string) *UpdateProductTopicResponse {
	s.Code = &v
	return s
}

func (s *UpdateProductTopicResponse) SetErrorMessage(v string) *UpdateProductTopicResponse {
	s.ErrorMessage = &v
	return s
}

type UpdateDeviceShadowRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	ShadowMessage *string `json:"ShadowMessage,omitempty" xml:"ShadowMessage,omitempty" require:"true"`
	DeltaUpdate   *bool   `json:"DeltaUpdate,omitempty" xml:"DeltaUpdate,omitempty"`
}

func (s UpdateDeviceShadowRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeviceShadowRequest) GoString() string {
	return s.String()
}

func (s *UpdateDeviceShadowRequest) SetIotInstanceId(v string) *UpdateDeviceShadowRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateDeviceShadowRequest) SetProductKey(v string) *UpdateDeviceShadowRequest {
	s.ProductKey = &v
	return s
}

func (s *UpdateDeviceShadowRequest) SetDeviceName(v string) *UpdateDeviceShadowRequest {
	s.DeviceName = &v
	return s
}

func (s *UpdateDeviceShadowRequest) SetShadowMessage(v string) *UpdateDeviceShadowRequest {
	s.ShadowMessage = &v
	return s
}

func (s *UpdateDeviceShadowRequest) SetDeltaUpdate(v bool) *UpdateDeviceShadowRequest {
	s.DeltaUpdate = &v
	return s
}

type UpdateDeviceShadowResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateDeviceShadowResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeviceShadowResponse) GoString() string {
	return s.String()
}

func (s *UpdateDeviceShadowResponse) SetRequestId(v string) *UpdateDeviceShadowResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateDeviceShadowResponse) SetSuccess(v bool) *UpdateDeviceShadowResponse {
	s.Success = &v
	return s
}

func (s *UpdateDeviceShadowResponse) SetCode(v string) *UpdateDeviceShadowResponse {
	s.Code = &v
	return s
}

func (s *UpdateDeviceShadowResponse) SetErrorMessage(v string) *UpdateDeviceShadowResponse {
	s.ErrorMessage = &v
	return s
}

type StopRuleRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s StopRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s StopRuleRequest) GoString() string {
	return s.String()
}

func (s *StopRuleRequest) SetIotInstanceId(v string) *StopRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *StopRuleRequest) SetRuleId(v int64) *StopRuleRequest {
	s.RuleId = &v
	return s
}

type StopRuleResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s StopRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s StopRuleResponse) GoString() string {
	return s.String()
}

func (s *StopRuleResponse) SetRequestId(v string) *StopRuleResponse {
	s.RequestId = &v
	return s
}

func (s *StopRuleResponse) SetSuccess(v bool) *StopRuleResponse {
	s.Success = &v
	return s
}

func (s *StopRuleResponse) SetCode(v string) *StopRuleResponse {
	s.Code = &v
	return s
}

func (s *StopRuleResponse) SetErrorMessage(v string) *StopRuleResponse {
	s.ErrorMessage = &v
	return s
}

type StartRuleRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s StartRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s StartRuleRequest) GoString() string {
	return s.String()
}

func (s *StartRuleRequest) SetIotInstanceId(v string) *StartRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *StartRuleRequest) SetRuleId(v int64) *StartRuleRequest {
	s.RuleId = &v
	return s
}

type StartRuleResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s StartRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s StartRuleResponse) GoString() string {
	return s.String()
}

func (s *StartRuleResponse) SetRequestId(v string) *StartRuleResponse {
	s.RequestId = &v
	return s
}

func (s *StartRuleResponse) SetSuccess(v bool) *StartRuleResponse {
	s.Success = &v
	return s
}

func (s *StartRuleResponse) SetCode(v string) *StartRuleResponse {
	s.Code = &v
	return s
}

func (s *StartRuleResponse) SetErrorMessage(v string) *StartRuleResponse {
	s.ErrorMessage = &v
	return s
}

type QueryProductTopicRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
}

func (s QueryProductTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryProductTopicRequest) GoString() string {
	return s.String()
}

func (s *QueryProductTopicRequest) SetIotInstanceId(v string) *QueryProductTopicRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryProductTopicRequest) SetProductKey(v string) *QueryProductTopicRequest {
	s.ProductKey = &v
	return s
}

type QueryProductTopicResponse struct {
	RequestId    *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                          `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryProductTopicResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryProductTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryProductTopicResponse) GoString() string {
	return s.String()
}

func (s *QueryProductTopicResponse) SetRequestId(v string) *QueryProductTopicResponse {
	s.RequestId = &v
	return s
}

func (s *QueryProductTopicResponse) SetSuccess(v bool) *QueryProductTopicResponse {
	s.Success = &v
	return s
}

func (s *QueryProductTopicResponse) SetCode(v string) *QueryProductTopicResponse {
	s.Code = &v
	return s
}

func (s *QueryProductTopicResponse) SetErrorMessage(v string) *QueryProductTopicResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryProductTopicResponse) SetData(v *QueryProductTopicResponseData) *QueryProductTopicResponse {
	s.Data = v
	return s
}

type QueryProductTopicResponseData struct {
	ProductTopicInfo []*QueryProductTopicResponseDataProductTopicInfo `json:"ProductTopicInfo,omitempty" xml:"ProductTopicInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryProductTopicResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryProductTopicResponseData) GoString() string {
	return s.String()
}

func (s *QueryProductTopicResponseData) SetProductTopicInfo(v []*QueryProductTopicResponseDataProductTopicInfo) *QueryProductTopicResponseData {
	s.ProductTopicInfo = v
	return s
}

type QueryProductTopicResponseDataProductTopicInfo struct {
	ProductKey     *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	TopicShortName *string `json:"TopicShortName,omitempty" xml:"TopicShortName,omitempty" require:"true"`
	Operation      *string `json:"Operation,omitempty" xml:"Operation,omitempty" require:"true"`
	Desc           *string `json:"Desc,omitempty" xml:"Desc,omitempty" require:"true"`
	Id             *string `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
}

func (s QueryProductTopicResponseDataProductTopicInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryProductTopicResponseDataProductTopicInfo) GoString() string {
	return s.String()
}

func (s *QueryProductTopicResponseDataProductTopicInfo) SetProductKey(v string) *QueryProductTopicResponseDataProductTopicInfo {
	s.ProductKey = &v
	return s
}

func (s *QueryProductTopicResponseDataProductTopicInfo) SetTopicShortName(v string) *QueryProductTopicResponseDataProductTopicInfo {
	s.TopicShortName = &v
	return s
}

func (s *QueryProductTopicResponseDataProductTopicInfo) SetOperation(v string) *QueryProductTopicResponseDataProductTopicInfo {
	s.Operation = &v
	return s
}

func (s *QueryProductTopicResponseDataProductTopicInfo) SetDesc(v string) *QueryProductTopicResponseDataProductTopicInfo {
	s.Desc = &v
	return s
}

func (s *QueryProductTopicResponseDataProductTopicInfo) SetId(v string) *QueryProductTopicResponseDataProductTopicInfo {
	s.Id = &v
	return s
}

type QueryDevicePropRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s QueryDevicePropRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropRequest) GoString() string {
	return s.String()
}

func (s *QueryDevicePropRequest) SetIotInstanceId(v string) *QueryDevicePropRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDevicePropRequest) SetProductKey(v string) *QueryDevicePropRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDevicePropRequest) SetDeviceName(v string) *QueryDevicePropRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDevicePropRequest) SetIotId(v string) *QueryDevicePropRequest {
	s.IotId = &v
	return s
}

type QueryDevicePropResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Props        *string `json:"Props,omitempty" xml:"Props,omitempty" require:"true"`
}

func (s QueryDevicePropResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropResponse) GoString() string {
	return s.String()
}

func (s *QueryDevicePropResponse) SetRequestId(v string) *QueryDevicePropResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDevicePropResponse) SetSuccess(v bool) *QueryDevicePropResponse {
	s.Success = &v
	return s
}

func (s *QueryDevicePropResponse) SetCode(v string) *QueryDevicePropResponse {
	s.Code = &v
	return s
}

func (s *QueryDevicePropResponse) SetErrorMessage(v string) *QueryDevicePropResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDevicePropResponse) SetProps(v string) *QueryDevicePropResponse {
	s.Props = &v
	return s
}

type PubRequest struct {
	IotInstanceId   *string               `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey      *string               `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Qos             *int                  `json:"Qos,omitempty" xml:"Qos,omitempty"`
	TopicFullName   *string               `json:"TopicFullName,omitempty" xml:"TopicFullName,omitempty" require:"true"`
	MessageContent  *string               `json:"MessageContent,omitempty" xml:"MessageContent,omitempty" require:"true"`
	ResponseTopic   *string               `json:"ResponseTopic,omitempty" xml:"ResponseTopic,omitempty"`
	CorrelationData *string               `json:"CorrelationData,omitempty" xml:"CorrelationData,omitempty"`
	UserProp        []*PubRequestUserProp `json:"UserProp,omitempty" xml:"UserProp,omitempty" type:"Repeated"`
}

func (s PubRequest) String() string {
	return tea.Prettify(s)
}

func (s PubRequest) GoString() string {
	return s.String()
}

func (s *PubRequest) SetIotInstanceId(v string) *PubRequest {
	s.IotInstanceId = &v
	return s
}

func (s *PubRequest) SetProductKey(v string) *PubRequest {
	s.ProductKey = &v
	return s
}

func (s *PubRequest) SetQos(v int) *PubRequest {
	s.Qos = &v
	return s
}

func (s *PubRequest) SetTopicFullName(v string) *PubRequest {
	s.TopicFullName = &v
	return s
}

func (s *PubRequest) SetMessageContent(v string) *PubRequest {
	s.MessageContent = &v
	return s
}

func (s *PubRequest) SetResponseTopic(v string) *PubRequest {
	s.ResponseTopic = &v
	return s
}

func (s *PubRequest) SetCorrelationData(v string) *PubRequest {
	s.CorrelationData = &v
	return s
}

func (s *PubRequest) SetUserProp(v []*PubRequestUserProp) *PubRequest {
	s.UserProp = v
	return s
}

type PubRequestUserProp struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s PubRequestUserProp) String() string {
	return tea.Prettify(s)
}

func (s PubRequestUserProp) GoString() string {
	return s.String()
}

func (s *PubRequestUserProp) SetKey(v string) *PubRequestUserProp {
	s.Key = &v
	return s
}

func (s *PubRequestUserProp) SetValue(v string) *PubRequestUserProp {
	s.Value = &v
	return s
}

type PubResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty" require:"true"`
}

func (s PubResponse) String() string {
	return tea.Prettify(s)
}

func (s PubResponse) GoString() string {
	return s.String()
}

func (s *PubResponse) SetRequestId(v string) *PubResponse {
	s.RequestId = &v
	return s
}

func (s *PubResponse) SetSuccess(v bool) *PubResponse {
	s.Success = &v
	return s
}

func (s *PubResponse) SetCode(v string) *PubResponse {
	s.Code = &v
	return s
}

func (s *PubResponse) SetErrorMessage(v string) *PubResponse {
	s.ErrorMessage = &v
	return s
}

func (s *PubResponse) SetMessageId(v string) *PubResponse {
	s.MessageId = &v
	return s
}

type ListRuleActionsRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s ListRuleActionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRuleActionsRequest) GoString() string {
	return s.String()
}

func (s *ListRuleActionsRequest) SetIotInstanceId(v string) *ListRuleActionsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListRuleActionsRequest) SetRuleId(v int64) *ListRuleActionsRequest {
	s.RuleId = &v
	return s
}

type ListRuleActionsResponse struct {
	RequestId      *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success        *bool                                  `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code           *string                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage   *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	RuleActionList *ListRuleActionsResponseRuleActionList `json:"RuleActionList,omitempty" xml:"RuleActionList,omitempty" require:"true" type:"Struct"`
}

func (s ListRuleActionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRuleActionsResponse) GoString() string {
	return s.String()
}

func (s *ListRuleActionsResponse) SetRequestId(v string) *ListRuleActionsResponse {
	s.RequestId = &v
	return s
}

func (s *ListRuleActionsResponse) SetSuccess(v bool) *ListRuleActionsResponse {
	s.Success = &v
	return s
}

func (s *ListRuleActionsResponse) SetCode(v string) *ListRuleActionsResponse {
	s.Code = &v
	return s
}

func (s *ListRuleActionsResponse) SetErrorMessage(v string) *ListRuleActionsResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListRuleActionsResponse) SetRuleActionList(v *ListRuleActionsResponseRuleActionList) *ListRuleActionsResponse {
	s.RuleActionList = v
	return s
}

type ListRuleActionsResponseRuleActionList struct {
	RuleActionInfo []*ListRuleActionsResponseRuleActionListRuleActionInfo `json:"RuleActionInfo,omitempty" xml:"RuleActionInfo,omitempty" require:"true" type:"Repeated"`
}

func (s ListRuleActionsResponseRuleActionList) String() string {
	return tea.Prettify(s)
}

func (s ListRuleActionsResponseRuleActionList) GoString() string {
	return s.String()
}

func (s *ListRuleActionsResponseRuleActionList) SetRuleActionInfo(v []*ListRuleActionsResponseRuleActionListRuleActionInfo) *ListRuleActionsResponseRuleActionList {
	s.RuleActionInfo = v
	return s
}

type ListRuleActionsResponseRuleActionListRuleActionInfo struct {
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	RuleId          *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Configuration   *string `json:"Configuration,omitempty" xml:"Configuration,omitempty" require:"true"`
	ErrorActionFlag *bool   `json:"ErrorActionFlag,omitempty" xml:"ErrorActionFlag,omitempty" require:"true"`
}

func (s ListRuleActionsResponseRuleActionListRuleActionInfo) String() string {
	return tea.Prettify(s)
}

func (s ListRuleActionsResponseRuleActionListRuleActionInfo) GoString() string {
	return s.String()
}

func (s *ListRuleActionsResponseRuleActionListRuleActionInfo) SetId(v int64) *ListRuleActionsResponseRuleActionListRuleActionInfo {
	s.Id = &v
	return s
}

func (s *ListRuleActionsResponseRuleActionListRuleActionInfo) SetRuleId(v int64) *ListRuleActionsResponseRuleActionListRuleActionInfo {
	s.RuleId = &v
	return s
}

func (s *ListRuleActionsResponseRuleActionListRuleActionInfo) SetType(v string) *ListRuleActionsResponseRuleActionListRuleActionInfo {
	s.Type = &v
	return s
}

func (s *ListRuleActionsResponseRuleActionListRuleActionInfo) SetConfiguration(v string) *ListRuleActionsResponseRuleActionListRuleActionInfo {
	s.Configuration = &v
	return s
}

func (s *ListRuleActionsResponseRuleActionListRuleActionInfo) SetErrorActionFlag(v bool) *ListRuleActionsResponseRuleActionListRuleActionInfo {
	s.ErrorActionFlag = &v
	return s
}

type ListRuleRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	CurrentPage     *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageSize        *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRuleRequest) GoString() string {
	return s.String()
}

func (s *ListRuleRequest) SetIotInstanceId(v string) *ListRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListRuleRequest) SetCurrentPage(v int) *ListRuleRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListRuleRequest) SetPageSize(v int) *ListRuleRequest {
	s.PageSize = &v
	return s
}

func (s *ListRuleRequest) SetResourceGroupId(v string) *ListRuleRequest {
	s.ResourceGroupId = &v
	return s
}

type ListRuleResponse struct {
	RequestId    *string               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                 `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string               `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Page         *int                  `json:"Page,omitempty" xml:"Page,omitempty" require:"true"`
	Total        *int                  `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	PageSize     *int                  `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	Data         *ListRuleResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRuleResponse) GoString() string {
	return s.String()
}

func (s *ListRuleResponse) SetRequestId(v string) *ListRuleResponse {
	s.RequestId = &v
	return s
}

func (s *ListRuleResponse) SetSuccess(v bool) *ListRuleResponse {
	s.Success = &v
	return s
}

func (s *ListRuleResponse) SetCode(v string) *ListRuleResponse {
	s.Code = &v
	return s
}

func (s *ListRuleResponse) SetErrorMessage(v string) *ListRuleResponse {
	s.ErrorMessage = &v
	return s
}

func (s *ListRuleResponse) SetPage(v int) *ListRuleResponse {
	s.Page = &v
	return s
}

func (s *ListRuleResponse) SetTotal(v int) *ListRuleResponse {
	s.Total = &v
	return s
}

func (s *ListRuleResponse) SetPageSize(v int) *ListRuleResponse {
	s.PageSize = &v
	return s
}

func (s *ListRuleResponse) SetData(v *ListRuleResponseData) *ListRuleResponse {
	s.Data = v
	return s
}

type ListRuleResponseData struct {
	RuleInfo []*ListRuleResponseDataRuleInfo `json:"RuleInfo,omitempty" xml:"RuleInfo,omitempty" require:"true" type:"Repeated"`
}

func (s ListRuleResponseData) String() string {
	return tea.Prettify(s)
}

func (s ListRuleResponseData) GoString() string {
	return s.String()
}

func (s *ListRuleResponseData) SetRuleInfo(v []*ListRuleResponseDataRuleInfo) *ListRuleResponseData {
	s.RuleInfo = v
	return s
}

type ListRuleResponseDataRuleInfo struct {
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Select       *string `json:"Select,omitempty" xml:"Select,omitempty" require:"true"`
	Topic        *string `json:"Topic,omitempty" xml:"Topic,omitempty" require:"true"`
	ShortTopic   *string `json:"ShortTopic,omitempty" xml:"ShortTopic,omitempty" require:"true"`
	Where        *string `json:"Where,omitempty" xml:"Where,omitempty" require:"true"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	CreateUserId *int64  `json:"CreateUserId,omitempty" xml:"CreateUserId,omitempty" require:"true"`
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	DataType     *string `json:"DataType,omitempty" xml:"DataType,omitempty" require:"true"`
	RuleDesc     *string `json:"RuleDesc,omitempty" xml:"RuleDesc,omitempty" require:"true"`
	Created      *string `json:"Created,omitempty" xml:"Created,omitempty" require:"true"`
	UtcCreated   *string `json:"UtcCreated,omitempty" xml:"UtcCreated,omitempty" require:"true"`
	Modified     *string `json:"Modified,omitempty" xml:"Modified,omitempty" require:"true"`
	UtcModified  *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty" require:"true"`
}

func (s ListRuleResponseDataRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s ListRuleResponseDataRuleInfo) GoString() string {
	return s.String()
}

func (s *ListRuleResponseDataRuleInfo) SetId(v int64) *ListRuleResponseDataRuleInfo {
	s.Id = &v
	return s
}

func (s *ListRuleResponseDataRuleInfo) SetSelect(v string) *ListRuleResponseDataRuleInfo {
	s.Select = &v
	return s
}

func (s *ListRuleResponseDataRuleInfo) SetTopic(v string) *ListRuleResponseDataRuleInfo {
	s.Topic = &v
	return s
}

func (s *ListRuleResponseDataRuleInfo) SetShortTopic(v string) *ListRuleResponseDataRuleInfo {
	s.ShortTopic = &v
	return s
}

func (s *ListRuleResponseDataRuleInfo) SetWhere(v string) *ListRuleResponseDataRuleInfo {
	s.Where = &v
	return s
}

func (s *ListRuleResponseDataRuleInfo) SetStatus(v string) *ListRuleResponseDataRuleInfo {
	s.Status = &v
	return s
}

func (s *ListRuleResponseDataRuleInfo) SetCreateUserId(v int64) *ListRuleResponseDataRuleInfo {
	s.CreateUserId = &v
	return s
}

func (s *ListRuleResponseDataRuleInfo) SetProductKey(v string) *ListRuleResponseDataRuleInfo {
	s.ProductKey = &v
	return s
}

func (s *ListRuleResponseDataRuleInfo) SetName(v string) *ListRuleResponseDataRuleInfo {
	s.Name = &v
	return s
}

func (s *ListRuleResponseDataRuleInfo) SetDataType(v string) *ListRuleResponseDataRuleInfo {
	s.DataType = &v
	return s
}

func (s *ListRuleResponseDataRuleInfo) SetRuleDesc(v string) *ListRuleResponseDataRuleInfo {
	s.RuleDesc = &v
	return s
}

func (s *ListRuleResponseDataRuleInfo) SetCreated(v string) *ListRuleResponseDataRuleInfo {
	s.Created = &v
	return s
}

func (s *ListRuleResponseDataRuleInfo) SetUtcCreated(v string) *ListRuleResponseDataRuleInfo {
	s.UtcCreated = &v
	return s
}

func (s *ListRuleResponseDataRuleInfo) SetModified(v string) *ListRuleResponseDataRuleInfo {
	s.Modified = &v
	return s
}

func (s *ListRuleResponseDataRuleInfo) SetUtcModified(v string) *ListRuleResponseDataRuleInfo {
	s.UtcModified = &v
	return s
}

type GetRuleActionRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ActionId      *int64  `json:"ActionId,omitempty" xml:"ActionId,omitempty" require:"true"`
}

func (s GetRuleActionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRuleActionRequest) GoString() string {
	return s.String()
}

func (s *GetRuleActionRequest) SetIotInstanceId(v string) *GetRuleActionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetRuleActionRequest) SetActionId(v int64) *GetRuleActionRequest {
	s.ActionId = &v
	return s
}

type GetRuleActionResponse struct {
	RequestId      *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success        *bool                                `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code           *string                              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage   *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	RuleActionInfo *GetRuleActionResponseRuleActionInfo `json:"RuleActionInfo,omitempty" xml:"RuleActionInfo,omitempty" require:"true" type:"Struct"`
}

func (s GetRuleActionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRuleActionResponse) GoString() string {
	return s.String()
}

func (s *GetRuleActionResponse) SetRequestId(v string) *GetRuleActionResponse {
	s.RequestId = &v
	return s
}

func (s *GetRuleActionResponse) SetSuccess(v bool) *GetRuleActionResponse {
	s.Success = &v
	return s
}

func (s *GetRuleActionResponse) SetCode(v string) *GetRuleActionResponse {
	s.Code = &v
	return s
}

func (s *GetRuleActionResponse) SetErrorMessage(v string) *GetRuleActionResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetRuleActionResponse) SetRuleActionInfo(v *GetRuleActionResponseRuleActionInfo) *GetRuleActionResponse {
	s.RuleActionInfo = v
	return s
}

type GetRuleActionResponseRuleActionInfo struct {
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	RuleId          *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Configuration   *string `json:"Configuration,omitempty" xml:"Configuration,omitempty" require:"true"`
	ErrorActionFlag *bool   `json:"ErrorActionFlag,omitempty" xml:"ErrorActionFlag,omitempty" require:"true"`
}

func (s GetRuleActionResponseRuleActionInfo) String() string {
	return tea.Prettify(s)
}

func (s GetRuleActionResponseRuleActionInfo) GoString() string {
	return s.String()
}

func (s *GetRuleActionResponseRuleActionInfo) SetId(v int64) *GetRuleActionResponseRuleActionInfo {
	s.Id = &v
	return s
}

func (s *GetRuleActionResponseRuleActionInfo) SetRuleId(v int64) *GetRuleActionResponseRuleActionInfo {
	s.RuleId = &v
	return s
}

func (s *GetRuleActionResponseRuleActionInfo) SetType(v string) *GetRuleActionResponseRuleActionInfo {
	s.Type = &v
	return s
}

func (s *GetRuleActionResponseRuleActionInfo) SetConfiguration(v string) *GetRuleActionResponseRuleActionInfo {
	s.Configuration = &v
	return s
}

func (s *GetRuleActionResponseRuleActionInfo) SetErrorActionFlag(v bool) *GetRuleActionResponseRuleActionInfo {
	s.ErrorActionFlag = &v
	return s
}

type GetRuleRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s GetRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRuleRequest) GoString() string {
	return s.String()
}

func (s *GetRuleRequest) SetIotInstanceId(v string) *GetRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetRuleRequest) SetRuleId(v int64) *GetRuleRequest {
	s.RuleId = &v
	return s
}

type GetRuleResponse struct {
	RequestId    *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                    `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                  `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	RuleInfo     *GetRuleResponseRuleInfo `json:"RuleInfo,omitempty" xml:"RuleInfo,omitempty" require:"true" type:"Struct"`
}

func (s GetRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRuleResponse) GoString() string {
	return s.String()
}

func (s *GetRuleResponse) SetRequestId(v string) *GetRuleResponse {
	s.RequestId = &v
	return s
}

func (s *GetRuleResponse) SetSuccess(v bool) *GetRuleResponse {
	s.Success = &v
	return s
}

func (s *GetRuleResponse) SetCode(v string) *GetRuleResponse {
	s.Code = &v
	return s
}

func (s *GetRuleResponse) SetErrorMessage(v string) *GetRuleResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetRuleResponse) SetRuleInfo(v *GetRuleResponseRuleInfo) *GetRuleResponse {
	s.RuleInfo = v
	return s
}

type GetRuleResponseRuleInfo struct {
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Select       *string `json:"Select,omitempty" xml:"Select,omitempty" require:"true"`
	Topic        *string `json:"Topic,omitempty" xml:"Topic,omitempty" require:"true"`
	ShortTopic   *string `json:"ShortTopic,omitempty" xml:"ShortTopic,omitempty" require:"true"`
	Where        *string `json:"Where,omitempty" xml:"Where,omitempty" require:"true"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	CreateUserId *int64  `json:"CreateUserId,omitempty" xml:"CreateUserId,omitempty" require:"true"`
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	RuleDesc     *string `json:"RuleDesc,omitempty" xml:"RuleDesc,omitempty" require:"true"`
	DataType     *string `json:"DataType,omitempty" xml:"DataType,omitempty" require:"true"`
	Created      *string `json:"Created,omitempty" xml:"Created,omitempty" require:"true"`
	UtcCreated   *string `json:"UtcCreated,omitempty" xml:"UtcCreated,omitempty" require:"true"`
	Modified     *string `json:"Modified,omitempty" xml:"Modified,omitempty" require:"true"`
	UtcModified  *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty" require:"true"`
	TopicType    *int    `json:"TopicType,omitempty" xml:"TopicType,omitempty" require:"true"`
}

func (s GetRuleResponseRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s GetRuleResponseRuleInfo) GoString() string {
	return s.String()
}

func (s *GetRuleResponseRuleInfo) SetId(v int64) *GetRuleResponseRuleInfo {
	s.Id = &v
	return s
}

func (s *GetRuleResponseRuleInfo) SetSelect(v string) *GetRuleResponseRuleInfo {
	s.Select = &v
	return s
}

func (s *GetRuleResponseRuleInfo) SetTopic(v string) *GetRuleResponseRuleInfo {
	s.Topic = &v
	return s
}

func (s *GetRuleResponseRuleInfo) SetShortTopic(v string) *GetRuleResponseRuleInfo {
	s.ShortTopic = &v
	return s
}

func (s *GetRuleResponseRuleInfo) SetWhere(v string) *GetRuleResponseRuleInfo {
	s.Where = &v
	return s
}

func (s *GetRuleResponseRuleInfo) SetStatus(v string) *GetRuleResponseRuleInfo {
	s.Status = &v
	return s
}

func (s *GetRuleResponseRuleInfo) SetCreateUserId(v int64) *GetRuleResponseRuleInfo {
	s.CreateUserId = &v
	return s
}

func (s *GetRuleResponseRuleInfo) SetProductKey(v string) *GetRuleResponseRuleInfo {
	s.ProductKey = &v
	return s
}

func (s *GetRuleResponseRuleInfo) SetName(v string) *GetRuleResponseRuleInfo {
	s.Name = &v
	return s
}

func (s *GetRuleResponseRuleInfo) SetRuleDesc(v string) *GetRuleResponseRuleInfo {
	s.RuleDesc = &v
	return s
}

func (s *GetRuleResponseRuleInfo) SetDataType(v string) *GetRuleResponseRuleInfo {
	s.DataType = &v
	return s
}

func (s *GetRuleResponseRuleInfo) SetCreated(v string) *GetRuleResponseRuleInfo {
	s.Created = &v
	return s
}

func (s *GetRuleResponseRuleInfo) SetUtcCreated(v string) *GetRuleResponseRuleInfo {
	s.UtcCreated = &v
	return s
}

func (s *GetRuleResponseRuleInfo) SetModified(v string) *GetRuleResponseRuleInfo {
	s.Modified = &v
	return s
}

func (s *GetRuleResponseRuleInfo) SetUtcModified(v string) *GetRuleResponseRuleInfo {
	s.UtcModified = &v
	return s
}

func (s *GetRuleResponseRuleInfo) SetTopicType(v int) *GetRuleResponseRuleInfo {
	s.TopicType = &v
	return s
}

type GetDeviceShadowRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
}

func (s GetDeviceShadowRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceShadowRequest) GoString() string {
	return s.String()
}

func (s *GetDeviceShadowRequest) SetIotInstanceId(v string) *GetDeviceShadowRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetDeviceShadowRequest) SetProductKey(v string) *GetDeviceShadowRequest {
	s.ProductKey = &v
	return s
}

func (s *GetDeviceShadowRequest) SetDeviceName(v string) *GetDeviceShadowRequest {
	s.DeviceName = &v
	return s
}

type GetDeviceShadowResponse struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success       *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code          *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage  *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	ShadowMessage *string `json:"ShadowMessage,omitempty" xml:"ShadowMessage,omitempty" require:"true"`
}

func (s GetDeviceShadowResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceShadowResponse) GoString() string {
	return s.String()
}

func (s *GetDeviceShadowResponse) SetRequestId(v string) *GetDeviceShadowResponse {
	s.RequestId = &v
	return s
}

func (s *GetDeviceShadowResponse) SetSuccess(v bool) *GetDeviceShadowResponse {
	s.Success = &v
	return s
}

func (s *GetDeviceShadowResponse) SetCode(v string) *GetDeviceShadowResponse {
	s.Code = &v
	return s
}

func (s *GetDeviceShadowResponse) SetErrorMessage(v string) *GetDeviceShadowResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetDeviceShadowResponse) SetShadowMessage(v string) *GetDeviceShadowResponse {
	s.ShadowMessage = &v
	return s
}

type DeleteRuleActionRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ActionId      *int64  `json:"ActionId,omitempty" xml:"ActionId,omitempty" require:"true"`
}

func (s DeleteRuleActionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleActionRequest) GoString() string {
	return s.String()
}

func (s *DeleteRuleActionRequest) SetIotInstanceId(v string) *DeleteRuleActionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteRuleActionRequest) SetActionId(v int64) *DeleteRuleActionRequest {
	s.ActionId = &v
	return s
}

type DeleteRuleActionResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteRuleActionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleActionResponse) GoString() string {
	return s.String()
}

func (s *DeleteRuleActionResponse) SetRequestId(v string) *DeleteRuleActionResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteRuleActionResponse) SetSuccess(v bool) *DeleteRuleActionResponse {
	s.Success = &v
	return s
}

func (s *DeleteRuleActionResponse) SetCode(v string) *DeleteRuleActionResponse {
	s.Code = &v
	return s
}

func (s *DeleteRuleActionResponse) SetErrorMessage(v string) *DeleteRuleActionResponse {
	s.ErrorMessage = &v
	return s
}

type DeleteRuleRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s DeleteRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteRuleRequest) SetIotInstanceId(v string) *DeleteRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteRuleRequest) SetRuleId(v int64) *DeleteRuleRequest {
	s.RuleId = &v
	return s
}

type DeleteRuleResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteRuleResponse) SetRequestId(v string) *DeleteRuleResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteRuleResponse) SetSuccess(v bool) *DeleteRuleResponse {
	s.Success = &v
	return s
}

func (s *DeleteRuleResponse) SetCode(v string) *DeleteRuleResponse {
	s.Code = &v
	return s
}

func (s *DeleteRuleResponse) SetErrorMessage(v string) *DeleteRuleResponse {
	s.ErrorMessage = &v
	return s
}

type DeleteProductTopicRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	TopicId       *string `json:"TopicId,omitempty" xml:"TopicId,omitempty" require:"true"`
}

func (s DeleteProductTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProductTopicRequest) GoString() string {
	return s.String()
}

func (s *DeleteProductTopicRequest) SetIotInstanceId(v string) *DeleteProductTopicRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteProductTopicRequest) SetTopicId(v string) *DeleteProductTopicRequest {
	s.TopicId = &v
	return s
}

type DeleteProductTopicResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteProductTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProductTopicResponse) GoString() string {
	return s.String()
}

func (s *DeleteProductTopicResponse) SetRequestId(v string) *DeleteProductTopicResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteProductTopicResponse) SetSuccess(v bool) *DeleteProductTopicResponse {
	s.Success = &v
	return s
}

func (s *DeleteProductTopicResponse) SetCode(v string) *DeleteProductTopicResponse {
	s.Code = &v
	return s
}

func (s *DeleteProductTopicResponse) SetErrorMessage(v string) *DeleteProductTopicResponse {
	s.ErrorMessage = &v
	return s
}

type CreateRuleActionRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId          *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Configuration   *string `json:"Configuration,omitempty" xml:"Configuration,omitempty" require:"true"`
	ErrorActionFlag *bool   `json:"ErrorActionFlag,omitempty" xml:"ErrorActionFlag,omitempty"`
}

func (s CreateRuleActionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleActionRequest) GoString() string {
	return s.String()
}

func (s *CreateRuleActionRequest) SetIotInstanceId(v string) *CreateRuleActionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateRuleActionRequest) SetRuleId(v int64) *CreateRuleActionRequest {
	s.RuleId = &v
	return s
}

func (s *CreateRuleActionRequest) SetType(v string) *CreateRuleActionRequest {
	s.Type = &v
	return s
}

func (s *CreateRuleActionRequest) SetConfiguration(v string) *CreateRuleActionRequest {
	s.Configuration = &v
	return s
}

func (s *CreateRuleActionRequest) SetErrorActionFlag(v bool) *CreateRuleActionRequest {
	s.ErrorActionFlag = &v
	return s
}

type CreateRuleActionResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	ActionId     *int64  `json:"ActionId,omitempty" xml:"ActionId,omitempty" require:"true"`
}

func (s CreateRuleActionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleActionResponse) GoString() string {
	return s.String()
}

func (s *CreateRuleActionResponse) SetRequestId(v string) *CreateRuleActionResponse {
	s.RequestId = &v
	return s
}

func (s *CreateRuleActionResponse) SetCode(v string) *CreateRuleActionResponse {
	s.Code = &v
	return s
}

func (s *CreateRuleActionResponse) SetSuccess(v bool) *CreateRuleActionResponse {
	s.Success = &v
	return s
}

func (s *CreateRuleActionResponse) SetErrorMessage(v string) *CreateRuleActionResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateRuleActionResponse) SetActionId(v int64) *CreateRuleActionResponse {
	s.ActionId = &v
	return s
}

type CreateRuleRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Select          *string `json:"Select,omitempty" xml:"Select,omitempty"`
	ShortTopic      *string `json:"ShortTopic,omitempty" xml:"ShortTopic,omitempty"`
	Where           *string `json:"Where,omitempty" xml:"Where,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	RuleDesc        *string `json:"RuleDesc,omitempty" xml:"RuleDesc,omitempty"`
	DataType        *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	TopicType       *int    `json:"TopicType,omitempty" xml:"TopicType,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Topic           *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s CreateRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateRuleRequest) SetIotInstanceId(v string) *CreateRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateRuleRequest) SetSelect(v string) *CreateRuleRequest {
	s.Select = &v
	return s
}

func (s *CreateRuleRequest) SetShortTopic(v string) *CreateRuleRequest {
	s.ShortTopic = &v
	return s
}

func (s *CreateRuleRequest) SetWhere(v string) *CreateRuleRequest {
	s.Where = &v
	return s
}

func (s *CreateRuleRequest) SetProductKey(v string) *CreateRuleRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateRuleRequest) SetName(v string) *CreateRuleRequest {
	s.Name = &v
	return s
}

func (s *CreateRuleRequest) SetRuleDesc(v string) *CreateRuleRequest {
	s.RuleDesc = &v
	return s
}

func (s *CreateRuleRequest) SetDataType(v string) *CreateRuleRequest {
	s.DataType = &v
	return s
}

func (s *CreateRuleRequest) SetTopicType(v int) *CreateRuleRequest {
	s.TopicType = &v
	return s
}

func (s *CreateRuleRequest) SetResourceGroupId(v string) *CreateRuleRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateRuleRequest) SetTopic(v string) *CreateRuleRequest {
	s.Topic = &v
	return s
}

type CreateRuleResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	RuleId       *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s CreateRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateRuleResponse) SetRequestId(v string) *CreateRuleResponse {
	s.RequestId = &v
	return s
}

func (s *CreateRuleResponse) SetSuccess(v bool) *CreateRuleResponse {
	s.Success = &v
	return s
}

func (s *CreateRuleResponse) SetCode(v string) *CreateRuleResponse {
	s.Code = &v
	return s
}

func (s *CreateRuleResponse) SetErrorMessage(v string) *CreateRuleResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateRuleResponse) SetRuleId(v int64) *CreateRuleResponse {
	s.RuleId = &v
	return s
}

type CreateProductTopicRequest struct {
	IotInstanceId  *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey     *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	TopicShortName *string `json:"TopicShortName,omitempty" xml:"TopicShortName,omitempty" require:"true"`
	Operation      *string `json:"Operation,omitempty" xml:"Operation,omitempty" require:"true"`
	Desc           *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
}

func (s CreateProductTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProductTopicRequest) GoString() string {
	return s.String()
}

func (s *CreateProductTopicRequest) SetIotInstanceId(v string) *CreateProductTopicRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateProductTopicRequest) SetProductKey(v string) *CreateProductTopicRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateProductTopicRequest) SetTopicShortName(v string) *CreateProductTopicRequest {
	s.TopicShortName = &v
	return s
}

func (s *CreateProductTopicRequest) SetOperation(v string) *CreateProductTopicRequest {
	s.Operation = &v
	return s
}

func (s *CreateProductTopicRequest) SetDesc(v string) *CreateProductTopicRequest {
	s.Desc = &v
	return s
}

type CreateProductTopicResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	TopicId      *int64  `json:"TopicId,omitempty" xml:"TopicId,omitempty" require:"true"`
}

func (s CreateProductTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProductTopicResponse) GoString() string {
	return s.String()
}

func (s *CreateProductTopicResponse) SetRequestId(v string) *CreateProductTopicResponse {
	s.RequestId = &v
	return s
}

func (s *CreateProductTopicResponse) SetSuccess(v bool) *CreateProductTopicResponse {
	s.Success = &v
	return s
}

func (s *CreateProductTopicResponse) SetCode(v string) *CreateProductTopicResponse {
	s.Code = &v
	return s
}

func (s *CreateProductTopicResponse) SetErrorMessage(v string) *CreateProductTopicResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateProductTopicResponse) SetTopicId(v int64) *CreateProductTopicResponse {
	s.TopicId = &v
	return s
}

type QueryBatchRegisterDeviceStatusRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ApplyId       *int64  `json:"ApplyId,omitempty" xml:"ApplyId,omitempty" require:"true"`
}

func (s QueryBatchRegisterDeviceStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBatchRegisterDeviceStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryBatchRegisterDeviceStatusRequest) SetIotInstanceId(v string) *QueryBatchRegisterDeviceStatusRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusRequest) SetProductKey(v string) *QueryBatchRegisterDeviceStatusRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusRequest) SetApplyId(v int64) *QueryBatchRegisterDeviceStatusRequest {
	s.ApplyId = &v
	return s
}

type QueryBatchRegisterDeviceStatusResponse struct {
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                       `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryBatchRegisterDeviceStatusResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryBatchRegisterDeviceStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBatchRegisterDeviceStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryBatchRegisterDeviceStatusResponse) SetRequestId(v string) *QueryBatchRegisterDeviceStatusResponse {
	s.RequestId = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusResponse) SetSuccess(v bool) *QueryBatchRegisterDeviceStatusResponse {
	s.Success = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusResponse) SetCode(v string) *QueryBatchRegisterDeviceStatusResponse {
	s.Code = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusResponse) SetErrorMessage(v string) *QueryBatchRegisterDeviceStatusResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusResponse) SetData(v *QueryBatchRegisterDeviceStatusResponseData) *QueryBatchRegisterDeviceStatusResponse {
	s.Data = v
	return s
}

type QueryBatchRegisterDeviceStatusResponseData struct {
	Status      *string                                                `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	ValidList   *QueryBatchRegisterDeviceStatusResponseDataValidList   `json:"ValidList,omitempty" xml:"ValidList,omitempty" require:"true" type:"Struct"`
	InvalidList *QueryBatchRegisterDeviceStatusResponseDataInvalidList `json:"InvalidList,omitempty" xml:"InvalidList,omitempty" require:"true" type:"Struct"`
}

func (s QueryBatchRegisterDeviceStatusResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryBatchRegisterDeviceStatusResponseData) GoString() string {
	return s.String()
}

func (s *QueryBatchRegisterDeviceStatusResponseData) SetStatus(v string) *QueryBatchRegisterDeviceStatusResponseData {
	s.Status = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusResponseData) SetValidList(v *QueryBatchRegisterDeviceStatusResponseDataValidList) *QueryBatchRegisterDeviceStatusResponseData {
	s.ValidList = v
	return s
}

func (s *QueryBatchRegisterDeviceStatusResponseData) SetInvalidList(v *QueryBatchRegisterDeviceStatusResponseDataInvalidList) *QueryBatchRegisterDeviceStatusResponseData {
	s.InvalidList = v
	return s
}

type QueryBatchRegisterDeviceStatusResponseDataValidList struct {
	// Name
	Name []*string `json:"Name,omitempty" xml:"Name,omitempty" require:"true" type:"Repeated"`
}

func (s QueryBatchRegisterDeviceStatusResponseDataValidList) String() string {
	return tea.Prettify(s)
}

func (s QueryBatchRegisterDeviceStatusResponseDataValidList) GoString() string {
	return s.String()
}

func (s *QueryBatchRegisterDeviceStatusResponseDataValidList) SetName(v []*string) *QueryBatchRegisterDeviceStatusResponseDataValidList {
	s.Name = v
	return s
}

type QueryBatchRegisterDeviceStatusResponseDataInvalidList struct {
	// Name
	Name []*string `json:"Name,omitempty" xml:"Name,omitempty" require:"true" type:"Repeated"`
}

func (s QueryBatchRegisterDeviceStatusResponseDataInvalidList) String() string {
	return tea.Prettify(s)
}

func (s QueryBatchRegisterDeviceStatusResponseDataInvalidList) GoString() string {
	return s.String()
}

func (s *QueryBatchRegisterDeviceStatusResponseDataInvalidList) SetName(v []*string) *QueryBatchRegisterDeviceStatusResponseDataInvalidList {
	s.Name = v
	return s
}

type GetGatewayBySubDeviceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s GetGatewayBySubDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetGatewayBySubDeviceRequest) GoString() string {
	return s.String()
}

func (s *GetGatewayBySubDeviceRequest) SetIotInstanceId(v string) *GetGatewayBySubDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetGatewayBySubDeviceRequest) SetProductKey(v string) *GetGatewayBySubDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *GetGatewayBySubDeviceRequest) SetDeviceName(v string) *GetGatewayBySubDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *GetGatewayBySubDeviceRequest) SetIotId(v string) *GetGatewayBySubDeviceRequest {
	s.IotId = &v
	return s
}

type GetGatewayBySubDeviceResponse struct {
	RequestId    *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                              `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *GetGatewayBySubDeviceResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetGatewayBySubDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetGatewayBySubDeviceResponse) GoString() string {
	return s.String()
}

func (s *GetGatewayBySubDeviceResponse) SetRequestId(v string) *GetGatewayBySubDeviceResponse {
	s.RequestId = &v
	return s
}

func (s *GetGatewayBySubDeviceResponse) SetSuccess(v bool) *GetGatewayBySubDeviceResponse {
	s.Success = &v
	return s
}

func (s *GetGatewayBySubDeviceResponse) SetCode(v string) *GetGatewayBySubDeviceResponse {
	s.Code = &v
	return s
}

func (s *GetGatewayBySubDeviceResponse) SetErrorMessage(v string) *GetGatewayBySubDeviceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetGatewayBySubDeviceResponse) SetData(v *GetGatewayBySubDeviceResponseData) *GetGatewayBySubDeviceResponse {
	s.Data = v
	return s
}

type GetGatewayBySubDeviceResponseData struct {
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ProductName     *string `json:"ProductName,omitempty" xml:"ProductName,omitempty" require:"true"`
	DeviceSecret    *string `json:"DeviceSecret,omitempty" xml:"DeviceSecret,omitempty" require:"true"`
	DeviceName      *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	FirmwareVersion *string `json:"FirmwareVersion,omitempty" xml:"FirmwareVersion,omitempty" require:"true"`
	GmtCreate       *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	UtcCreate       *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	GmtActive       *string `json:"GmtActive,omitempty" xml:"GmtActive,omitempty" require:"true"`
	UtcActive       *string `json:"UtcActive,omitempty" xml:"UtcActive,omitempty" require:"true"`
	GmtOnline       *string `json:"GmtOnline,omitempty" xml:"GmtOnline,omitempty" require:"true"`
	UtcOnline       *string `json:"UtcOnline,omitempty" xml:"UtcOnline,omitempty" require:"true"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	IpAddress       *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
	NodeType        *string `json:"NodeType,omitempty" xml:"NodeType,omitempty" require:"true"`
	Region          *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	IotId           *string `json:"iotId,omitempty" xml:"iotId,omitempty" require:"true"`
}

func (s GetGatewayBySubDeviceResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetGatewayBySubDeviceResponseData) GoString() string {
	return s.String()
}

func (s *GetGatewayBySubDeviceResponseData) SetProductKey(v string) *GetGatewayBySubDeviceResponseData {
	s.ProductKey = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseData) SetProductName(v string) *GetGatewayBySubDeviceResponseData {
	s.ProductName = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseData) SetDeviceSecret(v string) *GetGatewayBySubDeviceResponseData {
	s.DeviceSecret = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseData) SetDeviceName(v string) *GetGatewayBySubDeviceResponseData {
	s.DeviceName = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseData) SetFirmwareVersion(v string) *GetGatewayBySubDeviceResponseData {
	s.FirmwareVersion = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseData) SetGmtCreate(v string) *GetGatewayBySubDeviceResponseData {
	s.GmtCreate = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseData) SetUtcCreate(v string) *GetGatewayBySubDeviceResponseData {
	s.UtcCreate = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseData) SetGmtActive(v string) *GetGatewayBySubDeviceResponseData {
	s.GmtActive = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseData) SetUtcActive(v string) *GetGatewayBySubDeviceResponseData {
	s.UtcActive = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseData) SetGmtOnline(v string) *GetGatewayBySubDeviceResponseData {
	s.GmtOnline = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseData) SetUtcOnline(v string) *GetGatewayBySubDeviceResponseData {
	s.UtcOnline = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseData) SetStatus(v string) *GetGatewayBySubDeviceResponseData {
	s.Status = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseData) SetIpAddress(v string) *GetGatewayBySubDeviceResponseData {
	s.IpAddress = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseData) SetNodeType(v string) *GetGatewayBySubDeviceResponseData {
	s.NodeType = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseData) SetRegion(v string) *GetGatewayBySubDeviceResponseData {
	s.Region = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseData) SetIotId(v string) *GetGatewayBySubDeviceResponseData {
	s.IotId = &v
	return s
}

type ResetThingRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s ResetThingRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetThingRequest) GoString() string {
	return s.String()
}

func (s *ResetThingRequest) SetIotInstanceId(v string) *ResetThingRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ResetThingRequest) SetProductKey(v string) *ResetThingRequest {
	s.ProductKey = &v
	return s
}

func (s *ResetThingRequest) SetDeviceName(v string) *ResetThingRequest {
	s.DeviceName = &v
	return s
}

func (s *ResetThingRequest) SetIotId(v string) *ResetThingRequest {
	s.IotId = &v
	return s
}

type ResetThingResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s ResetThingResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetThingResponse) GoString() string {
	return s.String()
}

func (s *ResetThingResponse) SetRequestId(v string) *ResetThingResponse {
	s.RequestId = &v
	return s
}

func (s *ResetThingResponse) SetSuccess(v bool) *ResetThingResponse {
	s.Success = &v
	return s
}

func (s *ResetThingResponse) SetCode(v string) *ResetThingResponse {
	s.Code = &v
	return s
}

func (s *ResetThingResponse) SetErrorMessage(v string) *ResetThingResponse {
	s.ErrorMessage = &v
	return s
}

type RemoveThingTopoRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s RemoveThingTopoRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveThingTopoRequest) GoString() string {
	return s.String()
}

func (s *RemoveThingTopoRequest) SetIotInstanceId(v string) *RemoveThingTopoRequest {
	s.IotInstanceId = &v
	return s
}

func (s *RemoveThingTopoRequest) SetProductKey(v string) *RemoveThingTopoRequest {
	s.ProductKey = &v
	return s
}

func (s *RemoveThingTopoRequest) SetDeviceName(v string) *RemoveThingTopoRequest {
	s.DeviceName = &v
	return s
}

func (s *RemoveThingTopoRequest) SetIotId(v string) *RemoveThingTopoRequest {
	s.IotId = &v
	return s
}

type RemoveThingTopoResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *bool   `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
}

func (s RemoveThingTopoResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveThingTopoResponse) GoString() string {
	return s.String()
}

func (s *RemoveThingTopoResponse) SetRequestId(v string) *RemoveThingTopoResponse {
	s.RequestId = &v
	return s
}

func (s *RemoveThingTopoResponse) SetSuccess(v bool) *RemoveThingTopoResponse {
	s.Success = &v
	return s
}

func (s *RemoveThingTopoResponse) SetCode(v string) *RemoveThingTopoResponse {
	s.Code = &v
	return s
}

func (s *RemoveThingTopoResponse) SetErrorMessage(v string) *RemoveThingTopoResponse {
	s.ErrorMessage = &v
	return s
}

func (s *RemoveThingTopoResponse) SetData(v bool) *RemoveThingTopoResponse {
	s.Data = &v
	return s
}

type NotifyAddThingTopoRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DeviceListStr *string `json:"DeviceListStr,omitempty" xml:"DeviceListStr,omitempty"`
	GwIotId       *string `json:"GwIotId,omitempty" xml:"GwIotId,omitempty"`
	GwProductKey  *string `json:"GwProductKey,omitempty" xml:"GwProductKey,omitempty"`
	GwDeviceName  *string `json:"GwDeviceName,omitempty" xml:"GwDeviceName,omitempty"`
}

func (s NotifyAddThingTopoRequest) String() string {
	return tea.Prettify(s)
}

func (s NotifyAddThingTopoRequest) GoString() string {
	return s.String()
}

func (s *NotifyAddThingTopoRequest) SetIotInstanceId(v string) *NotifyAddThingTopoRequest {
	s.IotInstanceId = &v
	return s
}

func (s *NotifyAddThingTopoRequest) SetDeviceListStr(v string) *NotifyAddThingTopoRequest {
	s.DeviceListStr = &v
	return s
}

func (s *NotifyAddThingTopoRequest) SetGwIotId(v string) *NotifyAddThingTopoRequest {
	s.GwIotId = &v
	return s
}

func (s *NotifyAddThingTopoRequest) SetGwProductKey(v string) *NotifyAddThingTopoRequest {
	s.GwProductKey = &v
	return s
}

func (s *NotifyAddThingTopoRequest) SetGwDeviceName(v string) *NotifyAddThingTopoRequest {
	s.GwDeviceName = &v
	return s
}

type NotifyAddThingTopoResponse struct {
	RequestId    *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                           `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string                         `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data         *NotifyAddThingTopoResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s NotifyAddThingTopoResponse) String() string {
	return tea.Prettify(s)
}

func (s NotifyAddThingTopoResponse) GoString() string {
	return s.String()
}

func (s *NotifyAddThingTopoResponse) SetRequestId(v string) *NotifyAddThingTopoResponse {
	s.RequestId = &v
	return s
}

func (s *NotifyAddThingTopoResponse) SetSuccess(v bool) *NotifyAddThingTopoResponse {
	s.Success = &v
	return s
}

func (s *NotifyAddThingTopoResponse) SetErrorMessage(v string) *NotifyAddThingTopoResponse {
	s.ErrorMessage = &v
	return s
}

func (s *NotifyAddThingTopoResponse) SetCode(v string) *NotifyAddThingTopoResponse {
	s.Code = &v
	return s
}

func (s *NotifyAddThingTopoResponse) SetData(v *NotifyAddThingTopoResponseData) *NotifyAddThingTopoResponse {
	s.Data = v
	return s
}

type NotifyAddThingTopoResponseData struct {
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty" require:"true"`
}

func (s NotifyAddThingTopoResponseData) String() string {
	return tea.Prettify(s)
}

func (s NotifyAddThingTopoResponseData) GoString() string {
	return s.String()
}

func (s *NotifyAddThingTopoResponseData) SetMessageId(v string) *NotifyAddThingTopoResponseData {
	s.MessageId = &v
	return s
}

type GetThingTopoRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	PageNo        *int    `json:"PageNo,omitempty" xml:"PageNo,omitempty" require:"true"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s GetThingTopoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetThingTopoRequest) GoString() string {
	return s.String()
}

func (s *GetThingTopoRequest) SetIotInstanceId(v string) *GetThingTopoRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetThingTopoRequest) SetPageSize(v int) *GetThingTopoRequest {
	s.PageSize = &v
	return s
}

func (s *GetThingTopoRequest) SetProductKey(v string) *GetThingTopoRequest {
	s.ProductKey = &v
	return s
}

func (s *GetThingTopoRequest) SetDeviceName(v string) *GetThingTopoRequest {
	s.DeviceName = &v
	return s
}

func (s *GetThingTopoRequest) SetPageNo(v int) *GetThingTopoRequest {
	s.PageNo = &v
	return s
}

func (s *GetThingTopoRequest) SetIotId(v string) *GetThingTopoRequest {
	s.IotId = &v
	return s
}

type GetThingTopoResponse struct {
	RequestId    *string                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                     `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                   `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *GetThingTopoResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetThingTopoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetThingTopoResponse) GoString() string {
	return s.String()
}

func (s *GetThingTopoResponse) SetRequestId(v string) *GetThingTopoResponse {
	s.RequestId = &v
	return s
}

func (s *GetThingTopoResponse) SetSuccess(v bool) *GetThingTopoResponse {
	s.Success = &v
	return s
}

func (s *GetThingTopoResponse) SetCode(v string) *GetThingTopoResponse {
	s.Code = &v
	return s
}

func (s *GetThingTopoResponse) SetErrorMessage(v string) *GetThingTopoResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetThingTopoResponse) SetData(v *GetThingTopoResponseData) *GetThingTopoResponse {
	s.Data = v
	return s
}

type GetThingTopoResponseData struct {
	Total       *int64                        `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	CurrentPage *int                          `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageSize    *int                          `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageCount   *int64                        `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	List        *GetThingTopoResponseDataList `json:"List,omitempty" xml:"List,omitempty" require:"true" type:"Struct"`
}

func (s GetThingTopoResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetThingTopoResponseData) GoString() string {
	return s.String()
}

func (s *GetThingTopoResponseData) SetTotal(v int64) *GetThingTopoResponseData {
	s.Total = &v
	return s
}

func (s *GetThingTopoResponseData) SetCurrentPage(v int) *GetThingTopoResponseData {
	s.CurrentPage = &v
	return s
}

func (s *GetThingTopoResponseData) SetPageSize(v int) *GetThingTopoResponseData {
	s.PageSize = &v
	return s
}

func (s *GetThingTopoResponseData) SetPageCount(v int64) *GetThingTopoResponseData {
	s.PageCount = &v
	return s
}

func (s *GetThingTopoResponseData) SetList(v *GetThingTopoResponseDataList) *GetThingTopoResponseData {
	s.List = v
	return s
}

type GetThingTopoResponseDataList struct {
	DeviceInfo []*GetThingTopoResponseDataListDeviceInfo `json:"deviceInfo,omitempty" xml:"deviceInfo,omitempty" require:"true" type:"Repeated"`
}

func (s GetThingTopoResponseDataList) String() string {
	return tea.Prettify(s)
}

func (s GetThingTopoResponseDataList) GoString() string {
	return s.String()
}

func (s *GetThingTopoResponseDataList) SetDeviceInfo(v []*GetThingTopoResponseDataListDeviceInfo) *GetThingTopoResponseDataList {
	s.DeviceInfo = v
	return s
}

type GetThingTopoResponseDataListDeviceInfo struct {
	IotId      *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	ProductKey *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
}

func (s GetThingTopoResponseDataListDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s GetThingTopoResponseDataListDeviceInfo) GoString() string {
	return s.String()
}

func (s *GetThingTopoResponseDataListDeviceInfo) SetIotId(v string) *GetThingTopoResponseDataListDeviceInfo {
	s.IotId = &v
	return s
}

func (s *GetThingTopoResponseDataListDeviceInfo) SetProductKey(v string) *GetThingTopoResponseDataListDeviceInfo {
	s.ProductKey = &v
	return s
}

func (s *GetThingTopoResponseDataListDeviceInfo) SetDeviceName(v string) *GetThingTopoResponseDataListDeviceInfo {
	s.DeviceName = &v
	return s
}

type QueryDevicePropertyStatusRequest struct {
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName      *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId           *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	FunctionBlockId *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
}

func (s QueryDevicePropertyStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyStatusRequest) SetIotInstanceId(v string) *QueryDevicePropertyStatusRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDevicePropertyStatusRequest) SetProductKey(v string) *QueryDevicePropertyStatusRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDevicePropertyStatusRequest) SetDeviceName(v string) *QueryDevicePropertyStatusRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDevicePropertyStatusRequest) SetIotId(v string) *QueryDevicePropertyStatusRequest {
	s.IotId = &v
	return s
}

func (s *QueryDevicePropertyStatusRequest) SetFunctionBlockId(v string) *QueryDevicePropertyStatusRequest {
	s.FunctionBlockId = &v
	return s
}

type QueryDevicePropertyStatusResponse struct {
	RequestId    *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                  `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryDevicePropertyStatusResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDevicePropertyStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyStatusResponse) SetRequestId(v string) *QueryDevicePropertyStatusResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDevicePropertyStatusResponse) SetSuccess(v bool) *QueryDevicePropertyStatusResponse {
	s.Success = &v
	return s
}

func (s *QueryDevicePropertyStatusResponse) SetCode(v string) *QueryDevicePropertyStatusResponse {
	s.Code = &v
	return s
}

func (s *QueryDevicePropertyStatusResponse) SetErrorMessage(v string) *QueryDevicePropertyStatusResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDevicePropertyStatusResponse) SetData(v *QueryDevicePropertyStatusResponseData) *QueryDevicePropertyStatusResponse {
	s.Data = v
	return s
}

type QueryDevicePropertyStatusResponseData struct {
	List *QueryDevicePropertyStatusResponseDataList `json:"List,omitempty" xml:"List,omitempty" require:"true" type:"Struct"`
}

func (s QueryDevicePropertyStatusResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyStatusResponseData) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyStatusResponseData) SetList(v *QueryDevicePropertyStatusResponseDataList) *QueryDevicePropertyStatusResponseData {
	s.List = v
	return s
}

type QueryDevicePropertyStatusResponseDataList struct {
	PropertyStatusInfo []*QueryDevicePropertyStatusResponseDataListPropertyStatusInfo `json:"PropertyStatusInfo,omitempty" xml:"PropertyStatusInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDevicePropertyStatusResponseDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyStatusResponseDataList) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyStatusResponseDataList) SetPropertyStatusInfo(v []*QueryDevicePropertyStatusResponseDataListPropertyStatusInfo) *QueryDevicePropertyStatusResponseDataList {
	s.PropertyStatusInfo = v
	return s
}

type QueryDevicePropertyStatusResponseDataListPropertyStatusInfo struct {
	Unit       *string `json:"Unit,omitempty" xml:"Unit,omitempty" require:"true"`
	Identifier *string `json:"Identifier,omitempty" xml:"Identifier,omitempty" require:"true"`
	DataType   *string `json:"DataType,omitempty" xml:"DataType,omitempty" require:"true"`
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty" require:"true"`
	Value      *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
}

func (s QueryDevicePropertyStatusResponseDataListPropertyStatusInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyStatusResponseDataListPropertyStatusInfo) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyStatusResponseDataListPropertyStatusInfo) SetUnit(v string) *QueryDevicePropertyStatusResponseDataListPropertyStatusInfo {
	s.Unit = &v
	return s
}

func (s *QueryDevicePropertyStatusResponseDataListPropertyStatusInfo) SetIdentifier(v string) *QueryDevicePropertyStatusResponseDataListPropertyStatusInfo {
	s.Identifier = &v
	return s
}

func (s *QueryDevicePropertyStatusResponseDataListPropertyStatusInfo) SetDataType(v string) *QueryDevicePropertyStatusResponseDataListPropertyStatusInfo {
	s.DataType = &v
	return s
}

func (s *QueryDevicePropertyStatusResponseDataListPropertyStatusInfo) SetTime(v string) *QueryDevicePropertyStatusResponseDataListPropertyStatusInfo {
	s.Time = &v
	return s
}

func (s *QueryDevicePropertyStatusResponseDataListPropertyStatusInfo) SetValue(v string) *QueryDevicePropertyStatusResponseDataListPropertyStatusInfo {
	s.Value = &v
	return s
}

func (s *QueryDevicePropertyStatusResponseDataListPropertyStatusInfo) SetName(v string) *QueryDevicePropertyStatusResponseDataListPropertyStatusInfo {
	s.Name = &v
	return s
}

type QueryDevicePropertyDataRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	Identifier    *string `json:"Identifier,omitempty" xml:"Identifier,omitempty" require:"true"`
	Asc           *int    `json:"Asc,omitempty" xml:"Asc,omitempty" require:"true"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
}

func (s QueryDevicePropertyDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyDataRequest) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyDataRequest) SetIotInstanceId(v string) *QueryDevicePropertyDataRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetPageSize(v int) *QueryDevicePropertyDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetProductKey(v string) *QueryDevicePropertyDataRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetDeviceName(v string) *QueryDevicePropertyDataRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetStartTime(v int64) *QueryDevicePropertyDataRequest {
	s.StartTime = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetIdentifier(v string) *QueryDevicePropertyDataRequest {
	s.Identifier = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetAsc(v int) *QueryDevicePropertyDataRequest {
	s.Asc = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetIotId(v string) *QueryDevicePropertyDataRequest {
	s.IotId = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetEndTime(v int64) *QueryDevicePropertyDataRequest {
	s.EndTime = &v
	return s
}

type QueryDevicePropertyDataResponse struct {
	RequestId    *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryDevicePropertyDataResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDevicePropertyDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyDataResponse) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyDataResponse) SetRequestId(v string) *QueryDevicePropertyDataResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDevicePropertyDataResponse) SetSuccess(v bool) *QueryDevicePropertyDataResponse {
	s.Success = &v
	return s
}

func (s *QueryDevicePropertyDataResponse) SetCode(v string) *QueryDevicePropertyDataResponse {
	s.Code = &v
	return s
}

func (s *QueryDevicePropertyDataResponse) SetErrorMessage(v string) *QueryDevicePropertyDataResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDevicePropertyDataResponse) SetData(v *QueryDevicePropertyDataResponseData) *QueryDevicePropertyDataResponse {
	s.Data = v
	return s
}

type QueryDevicePropertyDataResponseData struct {
	NextValid *bool                                    `json:"NextValid,omitempty" xml:"NextValid,omitempty" require:"true"`
	NextTime  *int64                                   `json:"NextTime,omitempty" xml:"NextTime,omitempty" require:"true"`
	List      *QueryDevicePropertyDataResponseDataList `json:"List,omitempty" xml:"List,omitempty" require:"true" type:"Struct"`
}

func (s QueryDevicePropertyDataResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyDataResponseData) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyDataResponseData) SetNextValid(v bool) *QueryDevicePropertyDataResponseData {
	s.NextValid = &v
	return s
}

func (s *QueryDevicePropertyDataResponseData) SetNextTime(v int64) *QueryDevicePropertyDataResponseData {
	s.NextTime = &v
	return s
}

func (s *QueryDevicePropertyDataResponseData) SetList(v *QueryDevicePropertyDataResponseDataList) *QueryDevicePropertyDataResponseData {
	s.List = v
	return s
}

type QueryDevicePropertyDataResponseDataList struct {
	PropertyInfo []*QueryDevicePropertyDataResponseDataListPropertyInfo `json:"PropertyInfo,omitempty" xml:"PropertyInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDevicePropertyDataResponseDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyDataResponseDataList) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyDataResponseDataList) SetPropertyInfo(v []*QueryDevicePropertyDataResponseDataListPropertyInfo) *QueryDevicePropertyDataResponseDataList {
	s.PropertyInfo = v
	return s
}

type QueryDevicePropertyDataResponseDataListPropertyInfo struct {
	Time  *string `json:"Time,omitempty" xml:"Time,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s QueryDevicePropertyDataResponseDataListPropertyInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyDataResponseDataListPropertyInfo) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyDataResponseDataListPropertyInfo) SetTime(v string) *QueryDevicePropertyDataResponseDataListPropertyInfo {
	s.Time = &v
	return s
}

func (s *QueryDevicePropertyDataResponseDataListPropertyInfo) SetValue(v string) *QueryDevicePropertyDataResponseDataListPropertyInfo {
	s.Value = &v
	return s
}

type BatchRegisterDeviceWithApplyIdRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ApplyId       *int64  `json:"ApplyId,omitempty" xml:"ApplyId,omitempty" require:"true"`
}

func (s BatchRegisterDeviceWithApplyIdRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchRegisterDeviceWithApplyIdRequest) GoString() string {
	return s.String()
}

func (s *BatchRegisterDeviceWithApplyIdRequest) SetIotInstanceId(v string) *BatchRegisterDeviceWithApplyIdRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdRequest) SetProductKey(v string) *BatchRegisterDeviceWithApplyIdRequest {
	s.ProductKey = &v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdRequest) SetApplyId(v int64) *BatchRegisterDeviceWithApplyIdRequest {
	s.ApplyId = &v
	return s
}

type BatchRegisterDeviceWithApplyIdResponse struct {
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                                       `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *BatchRegisterDeviceWithApplyIdResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s BatchRegisterDeviceWithApplyIdResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchRegisterDeviceWithApplyIdResponse) GoString() string {
	return s.String()
}

func (s *BatchRegisterDeviceWithApplyIdResponse) SetRequestId(v string) *BatchRegisterDeviceWithApplyIdResponse {
	s.RequestId = &v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdResponse) SetSuccess(v bool) *BatchRegisterDeviceWithApplyIdResponse {
	s.Success = &v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdResponse) SetCode(v string) *BatchRegisterDeviceWithApplyIdResponse {
	s.Code = &v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdResponse) SetErrorMessage(v string) *BatchRegisterDeviceWithApplyIdResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdResponse) SetData(v *BatchRegisterDeviceWithApplyIdResponseData) *BatchRegisterDeviceWithApplyIdResponse {
	s.Data = v
	return s
}

type BatchRegisterDeviceWithApplyIdResponseData struct {
	ApplyId *int64 `json:"ApplyId,omitempty" xml:"ApplyId,omitempty" require:"true"`
}

func (s BatchRegisterDeviceWithApplyIdResponseData) String() string {
	return tea.Prettify(s)
}

func (s BatchRegisterDeviceWithApplyIdResponseData) GoString() string {
	return s.String()
}

func (s *BatchRegisterDeviceWithApplyIdResponseData) SetApplyId(v int64) *BatchRegisterDeviceWithApplyIdResponseData {
	s.ApplyId = &v
	return s
}

type BatchRegisterDeviceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Count         *int    `json:"Count,omitempty" xml:"Count,omitempty" require:"true"`
}

func (s BatchRegisterDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchRegisterDeviceRequest) GoString() string {
	return s.String()
}

func (s *BatchRegisterDeviceRequest) SetIotInstanceId(v string) *BatchRegisterDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchRegisterDeviceRequest) SetProductKey(v string) *BatchRegisterDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *BatchRegisterDeviceRequest) SetCount(v int) *BatchRegisterDeviceRequest {
	s.Count = &v
	return s
}

type BatchRegisterDeviceResponse struct {
	RequestId    *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                            `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                          `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *BatchRegisterDeviceResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s BatchRegisterDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchRegisterDeviceResponse) GoString() string {
	return s.String()
}

func (s *BatchRegisterDeviceResponse) SetRequestId(v string) *BatchRegisterDeviceResponse {
	s.RequestId = &v
	return s
}

func (s *BatchRegisterDeviceResponse) SetSuccess(v bool) *BatchRegisterDeviceResponse {
	s.Success = &v
	return s
}

func (s *BatchRegisterDeviceResponse) SetCode(v string) *BatchRegisterDeviceResponse {
	s.Code = &v
	return s
}

func (s *BatchRegisterDeviceResponse) SetErrorMessage(v string) *BatchRegisterDeviceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchRegisterDeviceResponse) SetData(v *BatchRegisterDeviceResponseData) *BatchRegisterDeviceResponse {
	s.Data = v
	return s
}

type BatchRegisterDeviceResponseData struct {
	ApplyId *int64 `json:"ApplyId,omitempty" xml:"ApplyId,omitempty" require:"true"`
}

func (s BatchRegisterDeviceResponseData) String() string {
	return tea.Prettify(s)
}

func (s BatchRegisterDeviceResponseData) GoString() string {
	return s.String()
}

func (s *BatchRegisterDeviceResponseData) SetApplyId(v int64) *BatchRegisterDeviceResponseData {
	s.ApplyId = &v
	return s
}

type BatchCheckDeviceNamesRequest struct {
	IotInstanceId  *string                                       `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey     *string                                       `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName     []*string                                     `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" type:"Repeated"`
	DeviceNameList []*BatchCheckDeviceNamesRequestDeviceNameList `json:"DeviceNameList,omitempty" xml:"DeviceNameList,omitempty" type:"Repeated"`
}

func (s BatchCheckDeviceNamesRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchCheckDeviceNamesRequest) GoString() string {
	return s.String()
}

func (s *BatchCheckDeviceNamesRequest) SetIotInstanceId(v string) *BatchCheckDeviceNamesRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchCheckDeviceNamesRequest) SetProductKey(v string) *BatchCheckDeviceNamesRequest {
	s.ProductKey = &v
	return s
}

func (s *BatchCheckDeviceNamesRequest) SetDeviceName(v []*string) *BatchCheckDeviceNamesRequest {
	s.DeviceName = v
	return s
}

func (s *BatchCheckDeviceNamesRequest) SetDeviceNameList(v []*BatchCheckDeviceNamesRequestDeviceNameList) *BatchCheckDeviceNamesRequest {
	s.DeviceNameList = v
	return s
}

type BatchCheckDeviceNamesRequestDeviceNameList struct {
	DeviceName     *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceNickname *string `json:"DeviceNickname,omitempty" xml:"DeviceNickname,omitempty"`
}

func (s BatchCheckDeviceNamesRequestDeviceNameList) String() string {
	return tea.Prettify(s)
}

func (s BatchCheckDeviceNamesRequestDeviceNameList) GoString() string {
	return s.String()
}

func (s *BatchCheckDeviceNamesRequestDeviceNameList) SetDeviceName(v string) *BatchCheckDeviceNamesRequestDeviceNameList {
	s.DeviceName = &v
	return s
}

func (s *BatchCheckDeviceNamesRequestDeviceNameList) SetDeviceNickname(v string) *BatchCheckDeviceNamesRequestDeviceNameList {
	s.DeviceNickname = &v
	return s
}

type BatchCheckDeviceNamesResponse struct {
	RequestId    *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                              `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *BatchCheckDeviceNamesResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s BatchCheckDeviceNamesResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchCheckDeviceNamesResponse) GoString() string {
	return s.String()
}

func (s *BatchCheckDeviceNamesResponse) SetRequestId(v string) *BatchCheckDeviceNamesResponse {
	s.RequestId = &v
	return s
}

func (s *BatchCheckDeviceNamesResponse) SetSuccess(v bool) *BatchCheckDeviceNamesResponse {
	s.Success = &v
	return s
}

func (s *BatchCheckDeviceNamesResponse) SetCode(v string) *BatchCheckDeviceNamesResponse {
	s.Code = &v
	return s
}

func (s *BatchCheckDeviceNamesResponse) SetErrorMessage(v string) *BatchCheckDeviceNamesResponse {
	s.ErrorMessage = &v
	return s
}

func (s *BatchCheckDeviceNamesResponse) SetData(v *BatchCheckDeviceNamesResponseData) *BatchCheckDeviceNamesResponse {
	s.Data = v
	return s
}

type BatchCheckDeviceNamesResponseData struct {
	ApplyId                   *int64                                                      `json:"ApplyId,omitempty" xml:"ApplyId,omitempty" require:"true"`
	InvalidDeviceNameList     *BatchCheckDeviceNamesResponseDataInvalidDeviceNameList     `json:"InvalidDeviceNameList,omitempty" xml:"InvalidDeviceNameList,omitempty" require:"true" type:"Struct"`
	InvalidDeviceNicknameList *BatchCheckDeviceNamesResponseDataInvalidDeviceNicknameList `json:"InvalidDeviceNicknameList,omitempty" xml:"InvalidDeviceNicknameList,omitempty" require:"true" type:"Struct"`
}

func (s BatchCheckDeviceNamesResponseData) String() string {
	return tea.Prettify(s)
}

func (s BatchCheckDeviceNamesResponseData) GoString() string {
	return s.String()
}

func (s *BatchCheckDeviceNamesResponseData) SetApplyId(v int64) *BatchCheckDeviceNamesResponseData {
	s.ApplyId = &v
	return s
}

func (s *BatchCheckDeviceNamesResponseData) SetInvalidDeviceNameList(v *BatchCheckDeviceNamesResponseDataInvalidDeviceNameList) *BatchCheckDeviceNamesResponseData {
	s.InvalidDeviceNameList = v
	return s
}

func (s *BatchCheckDeviceNamesResponseData) SetInvalidDeviceNicknameList(v *BatchCheckDeviceNamesResponseDataInvalidDeviceNicknameList) *BatchCheckDeviceNamesResponseData {
	s.InvalidDeviceNicknameList = v
	return s
}

type BatchCheckDeviceNamesResponseDataInvalidDeviceNameList struct {
	// InvalidDeviceName
	InvalidDeviceName []*string `json:"InvalidDeviceName,omitempty" xml:"InvalidDeviceName,omitempty" require:"true" type:"Repeated"`
}

func (s BatchCheckDeviceNamesResponseDataInvalidDeviceNameList) String() string {
	return tea.Prettify(s)
}

func (s BatchCheckDeviceNamesResponseDataInvalidDeviceNameList) GoString() string {
	return s.String()
}

func (s *BatchCheckDeviceNamesResponseDataInvalidDeviceNameList) SetInvalidDeviceName(v []*string) *BatchCheckDeviceNamesResponseDataInvalidDeviceNameList {
	s.InvalidDeviceName = v
	return s
}

type BatchCheckDeviceNamesResponseDataInvalidDeviceNicknameList struct {
	// InvalidDeviceNickname
	InvalidDeviceNickname []*string `json:"InvalidDeviceNickname,omitempty" xml:"InvalidDeviceNickname,omitempty" require:"true" type:"Repeated"`
}

func (s BatchCheckDeviceNamesResponseDataInvalidDeviceNicknameList) String() string {
	return tea.Prettify(s)
}

func (s BatchCheckDeviceNamesResponseDataInvalidDeviceNicknameList) GoString() string {
	return s.String()
}

func (s *BatchCheckDeviceNamesResponseDataInvalidDeviceNicknameList) SetInvalidDeviceNickname(v []*string) *BatchCheckDeviceNamesResponseDataInvalidDeviceNicknameList {
	s.InvalidDeviceNickname = v
	return s
}

type UpdateProductRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ProductName   *string `json:"ProductName,omitempty" xml:"ProductName,omitempty" require:"true"`
}

func (s UpdateProductRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductRequest) GoString() string {
	return s.String()
}

func (s *UpdateProductRequest) SetIotInstanceId(v string) *UpdateProductRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateProductRequest) SetDescription(v string) *UpdateProductRequest {
	s.Description = &v
	return s
}

func (s *UpdateProductRequest) SetProductKey(v string) *UpdateProductRequest {
	s.ProductKey = &v
	return s
}

func (s *UpdateProductRequest) SetProductName(v string) *UpdateProductRequest {
	s.ProductName = &v
	return s
}

type UpdateProductResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s UpdateProductResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductResponse) GoString() string {
	return s.String()
}

func (s *UpdateProductResponse) SetRequestId(v string) *UpdateProductResponse {
	s.RequestId = &v
	return s
}

func (s *UpdateProductResponse) SetSuccess(v bool) *UpdateProductResponse {
	s.Success = &v
	return s
}

func (s *UpdateProductResponse) SetCode(v string) *UpdateProductResponse {
	s.Code = &v
	return s
}

func (s *UpdateProductResponse) SetErrorMessage(v string) *UpdateProductResponse {
	s.ErrorMessage = &v
	return s
}

type SetDevicePropertyRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	Items         *string `json:"Items,omitempty" xml:"Items,omitempty" require:"true"`
}

func (s SetDevicePropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDevicePropertyRequest) GoString() string {
	return s.String()
}

func (s *SetDevicePropertyRequest) SetIotInstanceId(v string) *SetDevicePropertyRequest {
	s.IotInstanceId = &v
	return s
}

func (s *SetDevicePropertyRequest) SetProductKey(v string) *SetDevicePropertyRequest {
	s.ProductKey = &v
	return s
}

func (s *SetDevicePropertyRequest) SetDeviceName(v string) *SetDevicePropertyRequest {
	s.DeviceName = &v
	return s
}

func (s *SetDevicePropertyRequest) SetIotId(v string) *SetDevicePropertyRequest {
	s.IotId = &v
	return s
}

func (s *SetDevicePropertyRequest) SetItems(v string) *SetDevicePropertyRequest {
	s.Items = &v
	return s
}

type SetDevicePropertyResponse struct {
	RequestId    *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                          `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data         *SetDevicePropertyResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s SetDevicePropertyResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDevicePropertyResponse) GoString() string {
	return s.String()
}

func (s *SetDevicePropertyResponse) SetRequestId(v string) *SetDevicePropertyResponse {
	s.RequestId = &v
	return s
}

func (s *SetDevicePropertyResponse) SetSuccess(v bool) *SetDevicePropertyResponse {
	s.Success = &v
	return s
}

func (s *SetDevicePropertyResponse) SetErrorMessage(v string) *SetDevicePropertyResponse {
	s.ErrorMessage = &v
	return s
}

func (s *SetDevicePropertyResponse) SetCode(v string) *SetDevicePropertyResponse {
	s.Code = &v
	return s
}

func (s *SetDevicePropertyResponse) SetData(v *SetDevicePropertyResponseData) *SetDevicePropertyResponse {
	s.Data = v
	return s
}

type SetDevicePropertyResponseData struct {
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty" require:"true"`
}

func (s SetDevicePropertyResponseData) String() string {
	return tea.Prettify(s)
}

func (s SetDevicePropertyResponseData) GoString() string {
	return s.String()
}

func (s *SetDevicePropertyResponseData) SetMessageId(v string) *SetDevicePropertyResponseData {
	s.MessageId = &v
	return s
}

type RegisterDeviceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DevEui        *string `json:"DevEui,omitempty" xml:"DevEui,omitempty"`
	Nickname      *string `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
	PinCode       *string `json:"PinCode,omitempty" xml:"PinCode,omitempty"`
	JoinEui       *string `json:"JoinEui,omitempty" xml:"JoinEui,omitempty"`
	AppKey        *string `json:"AppKey,omitempty" xml:"AppKey,omitempty"`
	LoraNodeType  *string `json:"LoraNodeType,omitempty" xml:"LoraNodeType,omitempty"`
}

func (s RegisterDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s RegisterDeviceRequest) GoString() string {
	return s.String()
}

func (s *RegisterDeviceRequest) SetIotInstanceId(v string) *RegisterDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *RegisterDeviceRequest) SetProductKey(v string) *RegisterDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *RegisterDeviceRequest) SetDeviceName(v string) *RegisterDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *RegisterDeviceRequest) SetDevEui(v string) *RegisterDeviceRequest {
	s.DevEui = &v
	return s
}

func (s *RegisterDeviceRequest) SetNickname(v string) *RegisterDeviceRequest {
	s.Nickname = &v
	return s
}

func (s *RegisterDeviceRequest) SetPinCode(v string) *RegisterDeviceRequest {
	s.PinCode = &v
	return s
}

func (s *RegisterDeviceRequest) SetJoinEui(v string) *RegisterDeviceRequest {
	s.JoinEui = &v
	return s
}

func (s *RegisterDeviceRequest) SetAppKey(v string) *RegisterDeviceRequest {
	s.AppKey = &v
	return s
}

func (s *RegisterDeviceRequest) SetLoraNodeType(v string) *RegisterDeviceRequest {
	s.LoraNodeType = &v
	return s
}

type RegisterDeviceResponse struct {
	RequestId    *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                       `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *RegisterDeviceResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s RegisterDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s RegisterDeviceResponse) GoString() string {
	return s.String()
}

func (s *RegisterDeviceResponse) SetRequestId(v string) *RegisterDeviceResponse {
	s.RequestId = &v
	return s
}

func (s *RegisterDeviceResponse) SetSuccess(v bool) *RegisterDeviceResponse {
	s.Success = &v
	return s
}

func (s *RegisterDeviceResponse) SetCode(v string) *RegisterDeviceResponse {
	s.Code = &v
	return s
}

func (s *RegisterDeviceResponse) SetErrorMessage(v string) *RegisterDeviceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *RegisterDeviceResponse) SetData(v *RegisterDeviceResponseData) *RegisterDeviceResponse {
	s.Data = v
	return s
}

type RegisterDeviceResponseData struct {
	IotId        *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	DeviceSecret *string `json:"DeviceSecret,omitempty" xml:"DeviceSecret,omitempty" require:"true"`
	DevEui       *string `json:"DevEui,omitempty" xml:"DevEui,omitempty" require:"true"`
	JoinEui      *string `json:"JoinEui,omitempty" xml:"JoinEui,omitempty" require:"true"`
	Nickname     *string `json:"Nickname,omitempty" xml:"Nickname,omitempty" require:"true"`
}

func (s RegisterDeviceResponseData) String() string {
	return tea.Prettify(s)
}

func (s RegisterDeviceResponseData) GoString() string {
	return s.String()
}

func (s *RegisterDeviceResponseData) SetIotId(v string) *RegisterDeviceResponseData {
	s.IotId = &v
	return s
}

func (s *RegisterDeviceResponseData) SetProductKey(v string) *RegisterDeviceResponseData {
	s.ProductKey = &v
	return s
}

func (s *RegisterDeviceResponseData) SetDeviceName(v string) *RegisterDeviceResponseData {
	s.DeviceName = &v
	return s
}

func (s *RegisterDeviceResponseData) SetDeviceSecret(v string) *RegisterDeviceResponseData {
	s.DeviceSecret = &v
	return s
}

func (s *RegisterDeviceResponseData) SetDevEui(v string) *RegisterDeviceResponseData {
	s.DevEui = &v
	return s
}

func (s *RegisterDeviceResponseData) SetJoinEui(v string) *RegisterDeviceResponseData {
	s.JoinEui = &v
	return s
}

func (s *RegisterDeviceResponseData) SetNickname(v string) *RegisterDeviceResponseData {
	s.Nickname = &v
	return s
}

type QueryProductListRequest struct {
	IotInstanceId       *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize            *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	ResourceGroupId     *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	AliyunCommodityCode *string `json:"AliyunCommodityCode,omitempty" xml:"AliyunCommodityCode,omitempty"`
	CurrentPage         *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
}

func (s QueryProductListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListRequest) GoString() string {
	return s.String()
}

func (s *QueryProductListRequest) SetIotInstanceId(v string) *QueryProductListRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryProductListRequest) SetPageSize(v int) *QueryProductListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryProductListRequest) SetResourceGroupId(v string) *QueryProductListRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *QueryProductListRequest) SetAliyunCommodityCode(v string) *QueryProductListRequest {
	s.AliyunCommodityCode = &v
	return s
}

func (s *QueryProductListRequest) SetCurrentPage(v int) *QueryProductListRequest {
	s.CurrentPage = &v
	return s
}

type QueryProductListResponse struct {
	RequestId    *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                         `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                       `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                       `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryProductListResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryProductListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListResponse) GoString() string {
	return s.String()
}

func (s *QueryProductListResponse) SetRequestId(v string) *QueryProductListResponse {
	s.RequestId = &v
	return s
}

func (s *QueryProductListResponse) SetSuccess(v bool) *QueryProductListResponse {
	s.Success = &v
	return s
}

func (s *QueryProductListResponse) SetCode(v string) *QueryProductListResponse {
	s.Code = &v
	return s
}

func (s *QueryProductListResponse) SetErrorMessage(v string) *QueryProductListResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryProductListResponse) SetData(v *QueryProductListResponseData) *QueryProductListResponse {
	s.Data = v
	return s
}

type QueryProductListResponseData struct {
	CurrentPage *int                              `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageCount   *int                              `json:"PageCount,omitempty" xml:"PageCount,omitempty" require:"true"`
	PageSize    *int                              `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	Total       *int                              `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	List        *QueryProductListResponseDataList `json:"List,omitempty" xml:"List,omitempty" require:"true" type:"Struct"`
}

func (s QueryProductListResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListResponseData) GoString() string {
	return s.String()
}

func (s *QueryProductListResponseData) SetCurrentPage(v int) *QueryProductListResponseData {
	s.CurrentPage = &v
	return s
}

func (s *QueryProductListResponseData) SetPageCount(v int) *QueryProductListResponseData {
	s.PageCount = &v
	return s
}

func (s *QueryProductListResponseData) SetPageSize(v int) *QueryProductListResponseData {
	s.PageSize = &v
	return s
}

func (s *QueryProductListResponseData) SetTotal(v int) *QueryProductListResponseData {
	s.Total = &v
	return s
}

func (s *QueryProductListResponseData) SetList(v *QueryProductListResponseDataList) *QueryProductListResponseData {
	s.List = v
	return s
}

type QueryProductListResponseDataList struct {
	ProductInfo []*QueryProductListResponseDataListProductInfo `json:"ProductInfo,omitempty" xml:"ProductInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryProductListResponseDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListResponseDataList) GoString() string {
	return s.String()
}

func (s *QueryProductListResponseDataList) SetProductInfo(v []*QueryProductListResponseDataListProductInfo) *QueryProductListResponseDataList {
	s.ProductInfo = v
	return s
}

type QueryProductListResponseDataListProductInfo struct {
	GmtCreate   *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	DataFormat  *int    `json:"DataFormat,omitempty" xml:"DataFormat,omitempty" require:"true"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	DeviceCount *int    `json:"DeviceCount,omitempty" xml:"DeviceCount,omitempty" require:"true"`
	NodeType    *int    `json:"NodeType,omitempty" xml:"NodeType,omitempty" require:"true"`
	ProductKey  *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty" require:"true"`
	AuthType    *string `json:"AuthType,omitempty" xml:"AuthType,omitempty" require:"true"`
}

func (s QueryProductListResponseDataListProductInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListResponseDataListProductInfo) GoString() string {
	return s.String()
}

func (s *QueryProductListResponseDataListProductInfo) SetGmtCreate(v int64) *QueryProductListResponseDataListProductInfo {
	s.GmtCreate = &v
	return s
}

func (s *QueryProductListResponseDataListProductInfo) SetDataFormat(v int) *QueryProductListResponseDataListProductInfo {
	s.DataFormat = &v
	return s
}

func (s *QueryProductListResponseDataListProductInfo) SetDescription(v string) *QueryProductListResponseDataListProductInfo {
	s.Description = &v
	return s
}

func (s *QueryProductListResponseDataListProductInfo) SetDeviceCount(v int) *QueryProductListResponseDataListProductInfo {
	s.DeviceCount = &v
	return s
}

func (s *QueryProductListResponseDataListProductInfo) SetNodeType(v int) *QueryProductListResponseDataListProductInfo {
	s.NodeType = &v
	return s
}

func (s *QueryProductListResponseDataListProductInfo) SetProductKey(v string) *QueryProductListResponseDataListProductInfo {
	s.ProductKey = &v
	return s
}

func (s *QueryProductListResponseDataListProductInfo) SetProductName(v string) *QueryProductListResponseDataListProductInfo {
	s.ProductName = &v
	return s
}

func (s *QueryProductListResponseDataListProductInfo) SetAuthType(v string) *QueryProductListResponseDataListProductInfo {
	s.AuthType = &v
	return s
}

type QueryProductRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
}

func (s QueryProductRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryProductRequest) GoString() string {
	return s.String()
}

func (s *QueryProductRequest) SetIotInstanceId(v string) *QueryProductRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryProductRequest) SetProductKey(v string) *QueryProductRequest {
	s.ProductKey = &v
	return s
}

type QueryProductResponse struct {
	RequestId    *string                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                     `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                   `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryProductResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryProductResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryProductResponse) GoString() string {
	return s.String()
}

func (s *QueryProductResponse) SetRequestId(v string) *QueryProductResponse {
	s.RequestId = &v
	return s
}

func (s *QueryProductResponse) SetSuccess(v bool) *QueryProductResponse {
	s.Success = &v
	return s
}

func (s *QueryProductResponse) SetCode(v string) *QueryProductResponse {
	s.Code = &v
	return s
}

func (s *QueryProductResponse) SetErrorMessage(v string) *QueryProductResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryProductResponse) SetData(v *QueryProductResponseData) *QueryProductResponse {
	s.Data = v
	return s
}

type QueryProductResponseData struct {
	GmtCreate           *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	DataFormat          *int    `json:"DataFormat,omitempty" xml:"DataFormat,omitempty" require:"true"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	DeviceCount         *int    `json:"DeviceCount,omitempty" xml:"DeviceCount,omitempty" require:"true"`
	NodeType            *int    `json:"NodeType,omitempty" xml:"NodeType,omitempty" require:"true"`
	ProductKey          *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ProductName         *string `json:"ProductName,omitempty" xml:"ProductName,omitempty" require:"true"`
	ProductSecret       *string `json:"ProductSecret,omitempty" xml:"ProductSecret,omitempty" require:"true"`
	CategoryName        *string `json:"CategoryName,omitempty" xml:"CategoryName,omitempty" require:"true"`
	CategoryKey         *string `json:"CategoryKey,omitempty" xml:"CategoryKey,omitempty" require:"true"`
	AliyunCommodityCode *string `json:"AliyunCommodityCode,omitempty" xml:"AliyunCommodityCode,omitempty" require:"true"`
	Id2                 *bool   `json:"Id2,omitempty" xml:"Id2,omitempty" require:"true"`
	ProtocolType        *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty" require:"true"`
	ProductStatus       *string `json:"ProductStatus,omitempty" xml:"ProductStatus,omitempty" require:"true"`
	Owner               *bool   `json:"Owner,omitempty" xml:"Owner,omitempty" require:"true"`
	NetType             *int    `json:"NetType,omitempty" xml:"NetType,omitempty" require:"true"`
	AuthType            *string `json:"AuthType,omitempty" xml:"AuthType,omitempty" require:"true"`
	ValidateType        *int    `json:"ValidateType,omitempty" xml:"ValidateType,omitempty" require:"true"`
}

func (s QueryProductResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryProductResponseData) GoString() string {
	return s.String()
}

func (s *QueryProductResponseData) SetGmtCreate(v int64) *QueryProductResponseData {
	s.GmtCreate = &v
	return s
}

func (s *QueryProductResponseData) SetDataFormat(v int) *QueryProductResponseData {
	s.DataFormat = &v
	return s
}

func (s *QueryProductResponseData) SetDescription(v string) *QueryProductResponseData {
	s.Description = &v
	return s
}

func (s *QueryProductResponseData) SetDeviceCount(v int) *QueryProductResponseData {
	s.DeviceCount = &v
	return s
}

func (s *QueryProductResponseData) SetNodeType(v int) *QueryProductResponseData {
	s.NodeType = &v
	return s
}

func (s *QueryProductResponseData) SetProductKey(v string) *QueryProductResponseData {
	s.ProductKey = &v
	return s
}

func (s *QueryProductResponseData) SetProductName(v string) *QueryProductResponseData {
	s.ProductName = &v
	return s
}

func (s *QueryProductResponseData) SetProductSecret(v string) *QueryProductResponseData {
	s.ProductSecret = &v
	return s
}

func (s *QueryProductResponseData) SetCategoryName(v string) *QueryProductResponseData {
	s.CategoryName = &v
	return s
}

func (s *QueryProductResponseData) SetCategoryKey(v string) *QueryProductResponseData {
	s.CategoryKey = &v
	return s
}

func (s *QueryProductResponseData) SetAliyunCommodityCode(v string) *QueryProductResponseData {
	s.AliyunCommodityCode = &v
	return s
}

func (s *QueryProductResponseData) SetId2(v bool) *QueryProductResponseData {
	s.Id2 = &v
	return s
}

func (s *QueryProductResponseData) SetProtocolType(v string) *QueryProductResponseData {
	s.ProtocolType = &v
	return s
}

func (s *QueryProductResponseData) SetProductStatus(v string) *QueryProductResponseData {
	s.ProductStatus = &v
	return s
}

func (s *QueryProductResponseData) SetOwner(v bool) *QueryProductResponseData {
	s.Owner = &v
	return s
}

func (s *QueryProductResponseData) SetNetType(v int) *QueryProductResponseData {
	s.NetType = &v
	return s
}

func (s *QueryProductResponseData) SetAuthType(v string) *QueryProductResponseData {
	s.AuthType = &v
	return s
}

func (s *QueryProductResponseData) SetValidateType(v int) *QueryProductResponseData {
	s.ValidateType = &v
	return s
}

type QueryDeviceStatisticsRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s QueryDeviceStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceStatisticsRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceStatisticsRequest) SetIotInstanceId(v string) *QueryDeviceStatisticsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceStatisticsRequest) SetProductKey(v string) *QueryDeviceStatisticsRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceStatisticsRequest) SetGroupId(v string) *QueryDeviceStatisticsRequest {
	s.GroupId = &v
	return s
}

type QueryDeviceStatisticsResponse struct {
	RequestId    *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                              `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryDeviceStatisticsResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceStatisticsResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceStatisticsResponse) SetRequestId(v string) *QueryDeviceStatisticsResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceStatisticsResponse) SetSuccess(v bool) *QueryDeviceStatisticsResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceStatisticsResponse) SetCode(v string) *QueryDeviceStatisticsResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceStatisticsResponse) SetErrorMessage(v string) *QueryDeviceStatisticsResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceStatisticsResponse) SetData(v *QueryDeviceStatisticsResponseData) *QueryDeviceStatisticsResponse {
	s.Data = v
	return s
}

type QueryDeviceStatisticsResponseData struct {
	DeviceCount *int64 `json:"deviceCount,omitempty" xml:"deviceCount,omitempty" require:"true"`
	OnlineCount *int64 `json:"onlineCount,omitempty" xml:"onlineCount,omitempty" require:"true"`
	ActiveCount *int64 `json:"activeCount,omitempty" xml:"activeCount,omitempty" require:"true"`
}

func (s QueryDeviceStatisticsResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceStatisticsResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceStatisticsResponseData) SetDeviceCount(v int64) *QueryDeviceStatisticsResponseData {
	s.DeviceCount = &v
	return s
}

func (s *QueryDeviceStatisticsResponseData) SetOnlineCount(v int64) *QueryDeviceStatisticsResponseData {
	s.OnlineCount = &v
	return s
}

func (s *QueryDeviceStatisticsResponseData) SetActiveCount(v int64) *QueryDeviceStatisticsResponseData {
	s.ActiveCount = &v
	return s
}

type QueryDeviceServiceDataRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	Identifier    *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	Asc           *int    `json:"Asc,omitempty" xml:"Asc,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
}

func (s QueryDeviceServiceDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceServiceDataRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceServiceDataRequest) SetIotInstanceId(v string) *QueryDeviceServiceDataRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetPageSize(v int) *QueryDeviceServiceDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetProductKey(v string) *QueryDeviceServiceDataRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetDeviceName(v string) *QueryDeviceServiceDataRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetStartTime(v int64) *QueryDeviceServiceDataRequest {
	s.StartTime = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetIdentifier(v string) *QueryDeviceServiceDataRequest {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetAsc(v int) *QueryDeviceServiceDataRequest {
	s.Asc = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetIotId(v string) *QueryDeviceServiceDataRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetEndTime(v int64) *QueryDeviceServiceDataRequest {
	s.EndTime = &v
	return s
}

type QueryDeviceServiceDataResponse struct {
	RequestId    *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                               `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                             `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryDeviceServiceDataResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceServiceDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceServiceDataResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceServiceDataResponse) SetRequestId(v string) *QueryDeviceServiceDataResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceServiceDataResponse) SetSuccess(v bool) *QueryDeviceServiceDataResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceServiceDataResponse) SetCode(v string) *QueryDeviceServiceDataResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceServiceDataResponse) SetErrorMessage(v string) *QueryDeviceServiceDataResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceServiceDataResponse) SetData(v *QueryDeviceServiceDataResponseData) *QueryDeviceServiceDataResponse {
	s.Data = v
	return s
}

type QueryDeviceServiceDataResponseData struct {
	NextTime  *int64                                  `json:"NextTime,omitempty" xml:"NextTime,omitempty" require:"true"`
	NextValid *bool                                   `json:"NextValid,omitempty" xml:"NextValid,omitempty" require:"true"`
	List      *QueryDeviceServiceDataResponseDataList `json:"List,omitempty" xml:"List,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceServiceDataResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceServiceDataResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceServiceDataResponseData) SetNextTime(v int64) *QueryDeviceServiceDataResponseData {
	s.NextTime = &v
	return s
}

func (s *QueryDeviceServiceDataResponseData) SetNextValid(v bool) *QueryDeviceServiceDataResponseData {
	s.NextValid = &v
	return s
}

func (s *QueryDeviceServiceDataResponseData) SetList(v *QueryDeviceServiceDataResponseDataList) *QueryDeviceServiceDataResponseData {
	s.List = v
	return s
}

type QueryDeviceServiceDataResponseDataList struct {
	ServiceInfo []*QueryDeviceServiceDataResponseDataListServiceInfo `json:"ServiceInfo,omitempty" xml:"ServiceInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceServiceDataResponseDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceServiceDataResponseDataList) GoString() string {
	return s.String()
}

func (s *QueryDeviceServiceDataResponseDataList) SetServiceInfo(v []*QueryDeviceServiceDataResponseDataListServiceInfo) *QueryDeviceServiceDataResponseDataList {
	s.ServiceInfo = v
	return s
}

type QueryDeviceServiceDataResponseDataListServiceInfo struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty" require:"true"`
	Identifier *string `json:"Identifier,omitempty" xml:"Identifier,omitempty" require:"true"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	InputData  *string `json:"InputData,omitempty" xml:"InputData,omitempty" require:"true"`
	OutputData *string `json:"OutputData,omitempty" xml:"OutputData,omitempty" require:"true"`
}

func (s QueryDeviceServiceDataResponseDataListServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceServiceDataResponseDataListServiceInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceServiceDataResponseDataListServiceInfo) SetTime(v string) *QueryDeviceServiceDataResponseDataListServiceInfo {
	s.Time = &v
	return s
}

func (s *QueryDeviceServiceDataResponseDataListServiceInfo) SetIdentifier(v string) *QueryDeviceServiceDataResponseDataListServiceInfo {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceServiceDataResponseDataListServiceInfo) SetName(v string) *QueryDeviceServiceDataResponseDataListServiceInfo {
	s.Name = &v
	return s
}

func (s *QueryDeviceServiceDataResponseDataListServiceInfo) SetInputData(v string) *QueryDeviceServiceDataResponseDataListServiceInfo {
	s.InputData = &v
	return s
}

func (s *QueryDeviceServiceDataResponseDataListServiceInfo) SetOutputData(v string) *QueryDeviceServiceDataResponseDataListServiceInfo {
	s.OutputData = &v
	return s
}

type QueryDeviceEventDataRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	Identifier    *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	EventType     *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	Asc           *int    `json:"Asc,omitempty" xml:"Asc,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
}

func (s QueryDeviceEventDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceEventDataRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceEventDataRequest) SetIotInstanceId(v string) *QueryDeviceEventDataRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetPageSize(v int) *QueryDeviceEventDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetProductKey(v string) *QueryDeviceEventDataRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetDeviceName(v string) *QueryDeviceEventDataRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetStartTime(v int64) *QueryDeviceEventDataRequest {
	s.StartTime = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetIdentifier(v string) *QueryDeviceEventDataRequest {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetEventType(v string) *QueryDeviceEventDataRequest {
	s.EventType = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetAsc(v int) *QueryDeviceEventDataRequest {
	s.Asc = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetIotId(v string) *QueryDeviceEventDataRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetEndTime(v int64) *QueryDeviceEventDataRequest {
	s.EndTime = &v
	return s
}

type QueryDeviceEventDataResponse struct {
	RequestId    *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                             `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                           `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryDeviceEventDataResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceEventDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceEventDataResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceEventDataResponse) SetRequestId(v string) *QueryDeviceEventDataResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceEventDataResponse) SetSuccess(v bool) *QueryDeviceEventDataResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceEventDataResponse) SetCode(v string) *QueryDeviceEventDataResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceEventDataResponse) SetErrorMessage(v string) *QueryDeviceEventDataResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceEventDataResponse) SetData(v *QueryDeviceEventDataResponseData) *QueryDeviceEventDataResponse {
	s.Data = v
	return s
}

type QueryDeviceEventDataResponseData struct {
	NextTime  *int64                                `json:"NextTime,omitempty" xml:"NextTime,omitempty" require:"true"`
	NextValid *bool                                 `json:"NextValid,omitempty" xml:"NextValid,omitempty" require:"true"`
	List      *QueryDeviceEventDataResponseDataList `json:"List,omitempty" xml:"List,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceEventDataResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceEventDataResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceEventDataResponseData) SetNextTime(v int64) *QueryDeviceEventDataResponseData {
	s.NextTime = &v
	return s
}

func (s *QueryDeviceEventDataResponseData) SetNextValid(v bool) *QueryDeviceEventDataResponseData {
	s.NextValid = &v
	return s
}

func (s *QueryDeviceEventDataResponseData) SetList(v *QueryDeviceEventDataResponseDataList) *QueryDeviceEventDataResponseData {
	s.List = v
	return s
}

type QueryDeviceEventDataResponseDataList struct {
	EventInfo []*QueryDeviceEventDataResponseDataListEventInfo `json:"EventInfo,omitempty" xml:"EventInfo,omitempty" require:"true" type:"Repeated"`
}

func (s QueryDeviceEventDataResponseDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceEventDataResponseDataList) GoString() string {
	return s.String()
}

func (s *QueryDeviceEventDataResponseDataList) SetEventInfo(v []*QueryDeviceEventDataResponseDataListEventInfo) *QueryDeviceEventDataResponseDataList {
	s.EventInfo = v
	return s
}

type QueryDeviceEventDataResponseDataListEventInfo struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty" require:"true"`
	Identifier *string `json:"Identifier,omitempty" xml:"Identifier,omitempty" require:"true"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	EventType  *string `json:"EventType,omitempty" xml:"EventType,omitempty" require:"true"`
	OutputData *string `json:"OutputData,omitempty" xml:"OutputData,omitempty" require:"true"`
}

func (s QueryDeviceEventDataResponseDataListEventInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceEventDataResponseDataListEventInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceEventDataResponseDataListEventInfo) SetTime(v string) *QueryDeviceEventDataResponseDataListEventInfo {
	s.Time = &v
	return s
}

func (s *QueryDeviceEventDataResponseDataListEventInfo) SetIdentifier(v string) *QueryDeviceEventDataResponseDataListEventInfo {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceEventDataResponseDataListEventInfo) SetName(v string) *QueryDeviceEventDataResponseDataListEventInfo {
	s.Name = &v
	return s
}

func (s *QueryDeviceEventDataResponseDataListEventInfo) SetEventType(v string) *QueryDeviceEventDataResponseDataListEventInfo {
	s.EventType = &v
	return s
}

func (s *QueryDeviceEventDataResponseDataListEventInfo) SetOutputData(v string) *QueryDeviceEventDataResponseDataListEventInfo {
	s.OutputData = &v
	return s
}

type QueryDeviceDetailRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s QueryDeviceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceDetailRequest) SetIotInstanceId(v string) *QueryDeviceDetailRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceDetailRequest) SetProductKey(v string) *QueryDeviceDetailRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceDetailRequest) SetDeviceName(v string) *QueryDeviceDetailRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceDetailRequest) SetIotId(v string) *QueryDeviceDetailRequest {
	s.IotId = &v
	return s
}

type QueryDeviceDetailResponse struct {
	RequestId    *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                          `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *QueryDeviceDetailResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryDeviceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceDetailResponse) SetRequestId(v string) *QueryDeviceDetailResponse {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceDetailResponse) SetSuccess(v bool) *QueryDeviceDetailResponse {
	s.Success = &v
	return s
}

func (s *QueryDeviceDetailResponse) SetCode(v string) *QueryDeviceDetailResponse {
	s.Code = &v
	return s
}

func (s *QueryDeviceDetailResponse) SetErrorMessage(v string) *QueryDeviceDetailResponse {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceDetailResponse) SetData(v *QueryDeviceDetailResponseData) *QueryDeviceDetailResponse {
	s.Data = v
	return s
}

type QueryDeviceDetailResponseData struct {
	IotId           *string `json:"IotId,omitempty" xml:"IotId,omitempty" require:"true"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ProductName     *string `json:"ProductName,omitempty" xml:"ProductName,omitempty" require:"true"`
	DeviceName      *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" require:"true"`
	DeviceSecret    *string `json:"DeviceSecret,omitempty" xml:"DeviceSecret,omitempty" require:"true"`
	FirmwareVersion *string `json:"FirmwareVersion,omitempty" xml:"FirmwareVersion,omitempty" require:"true"`
	GmtCreate       *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	UtcCreate       *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty" require:"true"`
	GmtActive       *string `json:"GmtActive,omitempty" xml:"GmtActive,omitempty" require:"true"`
	UtcActive       *string `json:"UtcActive,omitempty" xml:"UtcActive,omitempty" require:"true"`
	GmtOnline       *string `json:"GmtOnline,omitempty" xml:"GmtOnline,omitempty" require:"true"`
	UtcOnline       *string `json:"UtcOnline,omitempty" xml:"UtcOnline,omitempty" require:"true"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	IpAddress       *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" require:"true"`
	NodeType        *int    `json:"NodeType,omitempty" xml:"NodeType,omitempty" require:"true"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	Owner           *bool   `json:"Owner,omitempty" xml:"Owner,omitempty" require:"true"`
	Nickname        *string `json:"Nickname,omitempty" xml:"Nickname,omitempty" require:"true"`
}

func (s QueryDeviceDetailResponseData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDetailResponseData) GoString() string {
	return s.String()
}

func (s *QueryDeviceDetailResponseData) SetIotId(v string) *QueryDeviceDetailResponseData {
	s.IotId = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetProductKey(v string) *QueryDeviceDetailResponseData {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetProductName(v string) *QueryDeviceDetailResponseData {
	s.ProductName = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetDeviceName(v string) *QueryDeviceDetailResponseData {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetDeviceSecret(v string) *QueryDeviceDetailResponseData {
	s.DeviceSecret = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetFirmwareVersion(v string) *QueryDeviceDetailResponseData {
	s.FirmwareVersion = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetGmtCreate(v string) *QueryDeviceDetailResponseData {
	s.GmtCreate = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetUtcCreate(v string) *QueryDeviceDetailResponseData {
	s.UtcCreate = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetGmtActive(v string) *QueryDeviceDetailResponseData {
	s.GmtActive = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetUtcActive(v string) *QueryDeviceDetailResponseData {
	s.UtcActive = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetGmtOnline(v string) *QueryDeviceDetailResponseData {
	s.GmtOnline = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetUtcOnline(v string) *QueryDeviceDetailResponseData {
	s.UtcOnline = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetStatus(v string) *QueryDeviceDetailResponseData {
	s.Status = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetIpAddress(v string) *QueryDeviceDetailResponseData {
	s.IpAddress = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetNodeType(v int) *QueryDeviceDetailResponseData {
	s.NodeType = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetRegion(v string) *QueryDeviceDetailResponseData {
	s.Region = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetOwner(v bool) *QueryDeviceDetailResponseData {
	s.Owner = &v
	return s
}

func (s *QueryDeviceDetailResponseData) SetNickname(v string) *QueryDeviceDetailResponseData {
	s.Nickname = &v
	return s
}

type InvokeThingServiceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	Identifier    *string `json:"Identifier,omitempty" xml:"Identifier,omitempty" require:"true"`
	Args          *string `json:"Args,omitempty" xml:"Args,omitempty" require:"true"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s InvokeThingServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s InvokeThingServiceRequest) GoString() string {
	return s.String()
}

func (s *InvokeThingServiceRequest) SetIotInstanceId(v string) *InvokeThingServiceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *InvokeThingServiceRequest) SetProductKey(v string) *InvokeThingServiceRequest {
	s.ProductKey = &v
	return s
}

func (s *InvokeThingServiceRequest) SetDeviceName(v string) *InvokeThingServiceRequest {
	s.DeviceName = &v
	return s
}

func (s *InvokeThingServiceRequest) SetIdentifier(v string) *InvokeThingServiceRequest {
	s.Identifier = &v
	return s
}

func (s *InvokeThingServiceRequest) SetArgs(v string) *InvokeThingServiceRequest {
	s.Args = &v
	return s
}

func (s *InvokeThingServiceRequest) SetIotId(v string) *InvokeThingServiceRequest {
	s.IotId = &v
	return s
}

type InvokeThingServiceResponse struct {
	RequestId    *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                           `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	ErrorMessage *string                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Code         *string                         `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data         *InvokeThingServiceResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s InvokeThingServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s InvokeThingServiceResponse) GoString() string {
	return s.String()
}

func (s *InvokeThingServiceResponse) SetRequestId(v string) *InvokeThingServiceResponse {
	s.RequestId = &v
	return s
}

func (s *InvokeThingServiceResponse) SetSuccess(v bool) *InvokeThingServiceResponse {
	s.Success = &v
	return s
}

func (s *InvokeThingServiceResponse) SetErrorMessage(v string) *InvokeThingServiceResponse {
	s.ErrorMessage = &v
	return s
}

func (s *InvokeThingServiceResponse) SetCode(v string) *InvokeThingServiceResponse {
	s.Code = &v
	return s
}

func (s *InvokeThingServiceResponse) SetData(v *InvokeThingServiceResponseData) *InvokeThingServiceResponse {
	s.Data = v
	return s
}

type InvokeThingServiceResponseData struct {
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty" require:"true"`
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty" require:"true"`
}

func (s InvokeThingServiceResponseData) String() string {
	return tea.Prettify(s)
}

func (s InvokeThingServiceResponseData) GoString() string {
	return s.String()
}

func (s *InvokeThingServiceResponseData) SetResult(v string) *InvokeThingServiceResponseData {
	s.Result = &v
	return s
}

func (s *InvokeThingServiceResponseData) SetMessageId(v string) *InvokeThingServiceResponseData {
	s.MessageId = &v
	return s
}

type GetDeviceStatusRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s GetDeviceStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceStatusRequest) GoString() string {
	return s.String()
}

func (s *GetDeviceStatusRequest) SetIotInstanceId(v string) *GetDeviceStatusRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetDeviceStatusRequest) SetProductKey(v string) *GetDeviceStatusRequest {
	s.ProductKey = &v
	return s
}

func (s *GetDeviceStatusRequest) SetDeviceName(v string) *GetDeviceStatusRequest {
	s.DeviceName = &v
	return s
}

func (s *GetDeviceStatusRequest) SetIotId(v string) *GetDeviceStatusRequest {
	s.IotId = &v
	return s
}

type GetDeviceStatusResponse struct {
	RequestId    *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                        `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	Data         *GetDeviceStatusResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetDeviceStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceStatusResponse) GoString() string {
	return s.String()
}

func (s *GetDeviceStatusResponse) SetRequestId(v string) *GetDeviceStatusResponse {
	s.RequestId = &v
	return s
}

func (s *GetDeviceStatusResponse) SetSuccess(v bool) *GetDeviceStatusResponse {
	s.Success = &v
	return s
}

func (s *GetDeviceStatusResponse) SetCode(v string) *GetDeviceStatusResponse {
	s.Code = &v
	return s
}

func (s *GetDeviceStatusResponse) SetErrorMessage(v string) *GetDeviceStatusResponse {
	s.ErrorMessage = &v
	return s
}

func (s *GetDeviceStatusResponse) SetData(v *GetDeviceStatusResponseData) *GetDeviceStatusResponse {
	s.Data = v
	return s
}

type GetDeviceStatusResponseData struct {
	Status *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s GetDeviceStatusResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceStatusResponseData) GoString() string {
	return s.String()
}

func (s *GetDeviceStatusResponseData) SetStatus(v string) *GetDeviceStatusResponseData {
	s.Status = &v
	return s
}

type EnableThingRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s EnableThingRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableThingRequest) GoString() string {
	return s.String()
}

func (s *EnableThingRequest) SetIotInstanceId(v string) *EnableThingRequest {
	s.IotInstanceId = &v
	return s
}

func (s *EnableThingRequest) SetProductKey(v string) *EnableThingRequest {
	s.ProductKey = &v
	return s
}

func (s *EnableThingRequest) SetDeviceName(v string) *EnableThingRequest {
	s.DeviceName = &v
	return s
}

func (s *EnableThingRequest) SetIotId(v string) *EnableThingRequest {
	s.IotId = &v
	return s
}

type EnableThingResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s EnableThingResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableThingResponse) GoString() string {
	return s.String()
}

func (s *EnableThingResponse) SetRequestId(v string) *EnableThingResponse {
	s.RequestId = &v
	return s
}

func (s *EnableThingResponse) SetSuccess(v bool) *EnableThingResponse {
	s.Success = &v
	return s
}

func (s *EnableThingResponse) SetCode(v string) *EnableThingResponse {
	s.Code = &v
	return s
}

func (s *EnableThingResponse) SetErrorMessage(v string) *EnableThingResponse {
	s.ErrorMessage = &v
	return s
}

type DisableThingRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s DisableThingRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableThingRequest) GoString() string {
	return s.String()
}

func (s *DisableThingRequest) SetIotInstanceId(v string) *DisableThingRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DisableThingRequest) SetProductKey(v string) *DisableThingRequest {
	s.ProductKey = &v
	return s
}

func (s *DisableThingRequest) SetDeviceName(v string) *DisableThingRequest {
	s.DeviceName = &v
	return s
}

func (s *DisableThingRequest) SetIotId(v string) *DisableThingRequest {
	s.IotId = &v
	return s
}

type DisableThingResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DisableThingResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableThingResponse) GoString() string {
	return s.String()
}

func (s *DisableThingResponse) SetRequestId(v string) *DisableThingResponse {
	s.RequestId = &v
	return s
}

func (s *DisableThingResponse) SetSuccess(v bool) *DisableThingResponse {
	s.Success = &v
	return s
}

func (s *DisableThingResponse) SetCode(v string) *DisableThingResponse {
	s.Code = &v
	return s
}

func (s *DisableThingResponse) SetErrorMessage(v string) *DisableThingResponse {
	s.ErrorMessage = &v
	return s
}

type DeleteProductRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
}

func (s DeleteProductRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProductRequest) GoString() string {
	return s.String()
}

func (s *DeleteProductRequest) SetIotInstanceId(v string) *DeleteProductRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteProductRequest) SetProductKey(v string) *DeleteProductRequest {
	s.ProductKey = &v
	return s
}

type DeleteProductResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteProductResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProductResponse) GoString() string {
	return s.String()
}

func (s *DeleteProductResponse) SetRequestId(v string) *DeleteProductResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteProductResponse) SetSuccess(v bool) *DeleteProductResponse {
	s.Success = &v
	return s
}

func (s *DeleteProductResponse) SetCode(v string) *DeleteProductResponse {
	s.Code = &v
	return s
}

func (s *DeleteProductResponse) SetErrorMessage(v string) *DeleteProductResponse {
	s.ErrorMessage = &v
	return s
}

type DeleteDeviceRequest struct {
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s DeleteDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeviceRequest) SetIotInstanceId(v string) *DeleteDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteDeviceRequest) SetProductKey(v string) *DeleteDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *DeleteDeviceRequest) SetDeviceName(v string) *DeleteDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *DeleteDeviceRequest) SetIotId(v string) *DeleteDeviceRequest {
	s.IotId = &v
	return s
}

type DeleteDeviceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
}

func (s DeleteDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeviceResponse) SetRequestId(v string) *DeleteDeviceResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteDeviceResponse) SetSuccess(v bool) *DeleteDeviceResponse {
	s.Success = &v
	return s
}

func (s *DeleteDeviceResponse) SetCode(v string) *DeleteDeviceResponse {
	s.Code = &v
	return s
}

func (s *DeleteDeviceResponse) SetErrorMessage(v string) *DeleteDeviceResponse {
	s.ErrorMessage = &v
	return s
}

type CreateProductRequest struct {
	IotInstanceId       *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductName         *string `json:"ProductName,omitempty" xml:"ProductName,omitempty" require:"true"`
	NodeType            *int    `json:"NodeType,omitempty" xml:"NodeType,omitempty" require:"true"`
	DataFormat          *int    `json:"DataFormat,omitempty" xml:"DataFormat,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	AliyunCommodityCode *string `json:"AliyunCommodityCode,omitempty" xml:"AliyunCommodityCode,omitempty"`
	Id2                 *bool   `json:"Id2,omitempty" xml:"Id2,omitempty"`
	CategoryId          *int64  `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	ProtocolType        *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	NetType             *string `json:"NetType,omitempty" xml:"NetType,omitempty"`
	JoinPermissionId    *string `json:"JoinPermissionId,omitempty" xml:"JoinPermissionId,omitempty"`
	ResourceGroupId     *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	AuthType            *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	CategoryKey         *string `json:"CategoryKey,omitempty" xml:"CategoryKey,omitempty"`
	PublishAuto         *bool   `json:"PublishAuto,omitempty" xml:"PublishAuto,omitempty"`
	ValidateType        *int    `json:"ValidateType,omitempty" xml:"ValidateType,omitempty"`
}

func (s CreateProductRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProductRequest) GoString() string {
	return s.String()
}

func (s *CreateProductRequest) SetIotInstanceId(v string) *CreateProductRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateProductRequest) SetProductName(v string) *CreateProductRequest {
	s.ProductName = &v
	return s
}

func (s *CreateProductRequest) SetNodeType(v int) *CreateProductRequest {
	s.NodeType = &v
	return s
}

func (s *CreateProductRequest) SetDataFormat(v int) *CreateProductRequest {
	s.DataFormat = &v
	return s
}

func (s *CreateProductRequest) SetDescription(v string) *CreateProductRequest {
	s.Description = &v
	return s
}

func (s *CreateProductRequest) SetAliyunCommodityCode(v string) *CreateProductRequest {
	s.AliyunCommodityCode = &v
	return s
}

func (s *CreateProductRequest) SetId2(v bool) *CreateProductRequest {
	s.Id2 = &v
	return s
}

func (s *CreateProductRequest) SetCategoryId(v int64) *CreateProductRequest {
	s.CategoryId = &v
	return s
}

func (s *CreateProductRequest) SetProtocolType(v string) *CreateProductRequest {
	s.ProtocolType = &v
	return s
}

func (s *CreateProductRequest) SetNetType(v string) *CreateProductRequest {
	s.NetType = &v
	return s
}

func (s *CreateProductRequest) SetJoinPermissionId(v string) *CreateProductRequest {
	s.JoinPermissionId = &v
	return s
}

func (s *CreateProductRequest) SetResourceGroupId(v string) *CreateProductRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateProductRequest) SetAuthType(v string) *CreateProductRequest {
	s.AuthType = &v
	return s
}

func (s *CreateProductRequest) SetCategoryKey(v string) *CreateProductRequest {
	s.CategoryKey = &v
	return s
}

func (s *CreateProductRequest) SetPublishAuto(v bool) *CreateProductRequest {
	s.PublishAuto = &v
	return s
}

func (s *CreateProductRequest) SetValidateType(v int) *CreateProductRequest {
	s.ValidateType = &v
	return s
}

type CreateProductResponse struct {
	RequestId    *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success      *bool                      `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Code         *string                    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorMessage *string                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty" require:"true"`
	ProductKey   *string                    `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	Data         *CreateProductResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s CreateProductResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProductResponse) GoString() string {
	return s.String()
}

func (s *CreateProductResponse) SetRequestId(v string) *CreateProductResponse {
	s.RequestId = &v
	return s
}

func (s *CreateProductResponse) SetSuccess(v bool) *CreateProductResponse {
	s.Success = &v
	return s
}

func (s *CreateProductResponse) SetCode(v string) *CreateProductResponse {
	s.Code = &v
	return s
}

func (s *CreateProductResponse) SetErrorMessage(v string) *CreateProductResponse {
	s.ErrorMessage = &v
	return s
}

func (s *CreateProductResponse) SetProductKey(v string) *CreateProductResponse {
	s.ProductKey = &v
	return s
}

func (s *CreateProductResponse) SetData(v *CreateProductResponseData) *CreateProductResponse {
	s.Data = v
	return s
}

type CreateProductResponseData struct {
	DataFormat          *int    `json:"DataFormat,omitempty" xml:"DataFormat,omitempty" require:"true"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	NodeType            *int    `json:"NodeType,omitempty" xml:"NodeType,omitempty" require:"true"`
	ProductKey          *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty" require:"true"`
	ProductName         *string `json:"ProductName,omitempty" xml:"ProductName,omitempty" require:"true"`
	AliyunCommodityCode *string `json:"AliyunCommodityCode,omitempty" xml:"AliyunCommodityCode,omitempty" require:"true"`
	Id2                 *bool   `json:"Id2,omitempty" xml:"Id2,omitempty" require:"true"`
	ProtocolType        *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty" require:"true"`
	AuthType            *string `json:"AuthType,omitempty" xml:"AuthType,omitempty" require:"true"`
	ProductSecret       *string `json:"ProductSecret,omitempty" xml:"ProductSecret,omitempty" require:"true"`
}

func (s CreateProductResponseData) String() string {
	return tea.Prettify(s)
}

func (s CreateProductResponseData) GoString() string {
	return s.String()
}

func (s *CreateProductResponseData) SetDataFormat(v int) *CreateProductResponseData {
	s.DataFormat = &v
	return s
}

func (s *CreateProductResponseData) SetDescription(v string) *CreateProductResponseData {
	s.Description = &v
	return s
}

func (s *CreateProductResponseData) SetNodeType(v int) *CreateProductResponseData {
	s.NodeType = &v
	return s
}

func (s *CreateProductResponseData) SetProductKey(v string) *CreateProductResponseData {
	s.ProductKey = &v
	return s
}

func (s *CreateProductResponseData) SetProductName(v string) *CreateProductResponseData {
	s.ProductName = &v
	return s
}

func (s *CreateProductResponseData) SetAliyunCommodityCode(v string) *CreateProductResponseData {
	s.AliyunCommodityCode = &v
	return s
}

func (s *CreateProductResponseData) SetId2(v bool) *CreateProductResponseData {
	s.Id2 = &v
	return s
}

func (s *CreateProductResponseData) SetProtocolType(v string) *CreateProductResponseData {
	s.ProtocolType = &v
	return s
}

func (s *CreateProductResponseData) SetAuthType(v string) *CreateProductResponseData {
	s.AuthType = &v
	return s
}

func (s *CreateProductResponseData) SetProductSecret(v string) *CreateProductResponseData {
	s.ProductSecret = &v
	return s
}

type Client struct {
	rpc.Client
}

func NewClient(config *rpc.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *rpc.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"ap-northeast-2-pop":          tea.String("iot.ap-northeast-1.aliyuncs.com"),
		"ap-south-1":                  tea.String("iot.ap-northeast-1.aliyuncs.com"),
		"ap-southeast-2":              tea.String("iot.ap-northeast-1.aliyuncs.com"),
		"ap-southeast-3":              tea.String("iot.ap-northeast-1.aliyuncs.com"),
		"ap-southeast-5":              tea.String("iot.ap-northeast-1.aliyuncs.com"),
		"cn-beijing":                  tea.String("iot.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("iot.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("iot.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("iot.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("iot.aliyuncs.com"),
		"cn-chengdu":                  tea.String("iot.aliyuncs.com"),
		"cn-edge-1":                   tea.String("iot.aliyuncs.com"),
		"cn-fujian":                   tea.String("iot.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("iot.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("iot.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("iot.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("iot.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("iot.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("iot.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("iot.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("iot.aliyuncs.com"),
		"cn-hongkong":                 tea.String("iot.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("iot.aliyuncs.com"),
		"cn-huhehaote":                tea.String("iot.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("iot.aliyuncs.com"),
		"cn-qingdao":                  tea.String("iot.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("iot.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("iot.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("iot.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("iot.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("iot.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("iot.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("iot.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("iot.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("iot.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("iot.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("iot.aliyuncs.com"),
		"cn-wuhan":                    tea.String("iot.aliyuncs.com"),
		"cn-yushanfang":               tea.String("iot.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("iot.aliyuncs.com"),
		"cn-zhangjiakou":              tea.String("iot.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("iot.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("iot.aliyuncs.com"),
		"eu-west-1":                   tea.String("iot.ap-northeast-1.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("iot.ap-northeast-1.aliyuncs.com"),
		"me-east-1":                   tea.String("iot.ap-northeast-1.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("iot.ap-northeast-1.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("iot"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) ListAnalyticsDataWithOptions(request *ListAnalyticsDataRequest, runtime *util.RuntimeOptions) (_result *ListAnalyticsDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAnalyticsDataResponse{}
	_body, _err := client.DoRequest(tea.String("ListAnalyticsData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAnalyticsData(request *ListAnalyticsDataRequest) (_result *ListAnalyticsDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAnalyticsDataResponse{}
	_body, _err := client.ListAnalyticsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchBindDevicesIntoProjectWithOptions(request *BatchBindDevicesIntoProjectRequest, runtime *util.RuntimeOptions) (_result *BatchBindDevicesIntoProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchBindDevicesIntoProjectResponse{}
	_body, _err := client.DoRequest(tea.String("BatchBindDevicesIntoProject"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchBindDevicesIntoProject(request *BatchBindDevicesIntoProjectRequest) (_result *BatchBindDevicesIntoProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchBindDevicesIntoProjectResponse{}
	_body, _err := client.BatchBindDevicesIntoProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchBindProductsIntoProjectWithOptions(request *BatchBindProductsIntoProjectRequest, runtime *util.RuntimeOptions) (_result *BatchBindProductsIntoProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchBindProductsIntoProjectResponse{}
	_body, _err := client.DoRequest(tea.String("BatchBindProductsIntoProject"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchBindProductsIntoProject(request *BatchBindProductsIntoProjectRequest) (_result *BatchBindProductsIntoProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchBindProductsIntoProjectResponse{}
	_body, _err := client.BatchBindProductsIntoProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchUnbindProjectDevicesWithOptions(request *BatchUnbindProjectDevicesRequest, runtime *util.RuntimeOptions) (_result *BatchUnbindProjectDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchUnbindProjectDevicesResponse{}
	_body, _err := client.DoRequest(tea.String("BatchUnbindProjectDevices"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchUnbindProjectDevices(request *BatchUnbindProjectDevicesRequest) (_result *BatchUnbindProjectDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchUnbindProjectDevicesResponse{}
	_body, _err := client.BatchUnbindProjectDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchUnbindProjectProductsWithOptions(request *BatchUnbindProjectProductsRequest, runtime *util.RuntimeOptions) (_result *BatchUnbindProjectProductsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchUnbindProjectProductsResponse{}
	_body, _err := client.DoRequest(tea.String("BatchUnbindProjectProducts"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchUnbindProjectProducts(request *BatchUnbindProjectProductsRequest) (_result *BatchUnbindProjectProductsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchUnbindProjectProductsResponse{}
	_body, _err := client.BatchUnbindProjectProductsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SyncSpeechByCombinationWithOptions(request *SyncSpeechByCombinationRequest, runtime *util.RuntimeOptions) (_result *SyncSpeechByCombinationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SyncSpeechByCombinationResponse{}
	_body, _err := client.DoRequest(tea.String("SyncSpeechByCombination"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SyncSpeechByCombination(request *SyncSpeechByCombinationRequest) (_result *SyncSpeechByCombinationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SyncSpeechByCombinationResponse{}
	_body, _err := client.SyncSpeechByCombinationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenIotServiceWithOptions(request *OpenIotServiceRequest, runtime *util.RuntimeOptions) (_result *OpenIotServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &OpenIotServiceResponse{}
	_body, _err := client.DoRequest(tea.String("OpenIotService"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK,APP,PrivateKey,BearerToken"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenIotService(request *OpenIotServiceRequest) (_result *OpenIotServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenIotServiceResponse{}
	_body, _err := client.OpenIotServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRulengDistributeJobWithOptions(request *CreateRulengDistributeJobRequest, runtime *util.RuntimeOptions) (_result *CreateRulengDistributeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateRulengDistributeJobResponse{}
	_body, _err := client.DoRequest(tea.String("CreateRulengDistributeJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRulengDistributeJob(request *CreateRulengDistributeJobRequest) (_result *CreateRulengDistributeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRulengDistributeJobResponse{}
	_body, _err := client.CreateRulengDistributeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTaskByPageWithOptions(tmp *ListTaskByPageRequest, runtime *util.RuntimeOptions) (_result *ListTaskByPageResponse, _err error) {
	_err = util.ValidateModel(tmp)
	if _err != nil {
		return _result, _err
	}
	request := &ListTaskByPageShrinkRequest{}
	rpcutil.Convert(tmp, request)
	if !tea.BoolValue(util.IsUnset(tmp.Device)) {
		request.DeviceShrink = util.ToJSONString(tmp.Device)
	}

	_result = &ListTaskByPageResponse{}
	_body, _err := client.DoRequest(tea.String("ListTaskByPage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTaskByPage(request *ListTaskByPageRequest) (_result *ListTaskByPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTaskByPageResponse{}
	_body, _err := client.ListTaskByPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTaskWithOptions(tmp *ListTaskRequest, runtime *util.RuntimeOptions) (_result *ListTaskResponse, _err error) {
	_err = util.ValidateModel(tmp)
	if _err != nil {
		return _result, _err
	}
	request := &ListTaskShrinkRequest{}
	rpcutil.Convert(tmp, request)
	if !tea.BoolValue(util.IsUnset(tmp.Device)) {
		request.DeviceShrink = util.ToJSONString(tmp.Device)
	}

	_result = &ListTaskResponse{}
	_body, _err := client.DoRequest(tea.String("ListTask"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTask(request *ListTaskRequest) (_result *ListTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTaskResponse{}
	_body, _err := client.ListTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryJobStatisticsWithOptions(request *QueryJobStatisticsRequest, runtime *util.RuntimeOptions) (_result *QueryJobStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryJobStatisticsResponse{}
	_body, _err := client.DoRequest(tea.String("QueryJobStatistics"), tea.String("HTTPS"), tea.String("GET"), tea.String("2018-01-20"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryJobStatistics(request *QueryJobStatisticsRequest) (_result *QueryJobStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryJobStatisticsResponse{}
	_body, _err := client.QueryJobStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteJobWithOptions(request *DeleteJobRequest, runtime *util.RuntimeOptions) (_result *DeleteJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteJobResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteJob(request *DeleteJobRequest) (_result *DeleteJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteJobResponse{}
	_body, _err := client.DeleteJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelJobWithOptions(request *CancelJobRequest, runtime *util.RuntimeOptions) (_result *CancelJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelJobResponse{}
	_body, _err := client.DoRequest(tea.String("CancelJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelJob(request *CancelJobRequest) (_result *CancelJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelJobResponse{}
	_body, _err := client.CancelJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListJobWithOptions(request *ListJobRequest, runtime *util.RuntimeOptions) (_result *ListJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListJobResponse{}
	_body, _err := client.DoRequest(tea.String("ListJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListJob(request *ListJobRequest) (_result *ListJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListJobResponse{}
	_body, _err := client.ListJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryJobWithOptions(request *QueryJobRequest, runtime *util.RuntimeOptions) (_result *QueryJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryJobResponse{}
	_body, _err := client.DoRequest(tea.String("QueryJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryJob(request *QueryJobRequest) (_result *QueryJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryJobResponse{}
	_body, _err := client.QueryJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateJobWithOptions(tmp *UpdateJobRequest, runtime *util.RuntimeOptions) (_result *UpdateJobResponse, _err error) {
	_err = util.ValidateModel(tmp)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateJobShrinkRequest{}
	rpcutil.Convert(tmp, request)
	if !tea.BoolValue(util.IsUnset(tmp.TimeoutConfig)) {
		request.TimeoutConfigShrink = util.ToJSONString(tmp.TimeoutConfig)
	}

	if !tea.BoolValue(util.IsUnset(tmp.RolloutConfig)) {
		request.RolloutConfigShrink = util.ToJSONString(tmp.RolloutConfig)
	}

	_result = &UpdateJobResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateJob(request *UpdateJobRequest) (_result *UpdateJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateJobResponse{}
	_body, _err := client.UpdateJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateJobWithOptions(tmp *CreateJobRequest, runtime *util.RuntimeOptions) (_result *CreateJobResponse, _err error) {
	_err = util.ValidateModel(tmp)
	if _err != nil {
		return _result, _err
	}
	request := &CreateJobShrinkRequest{}
	rpcutil.Convert(tmp, request)
	if !tea.BoolValue(util.IsUnset(tmp.JobFile)) {
		request.JobFileShrink = util.ToJSONString(tmp.JobFile)
	}

	if !tea.BoolValue(util.IsUnset(tmp.TimeoutConfig)) {
		request.TimeoutConfigShrink = util.ToJSONString(tmp.TimeoutConfig)
	}

	if !tea.BoolValue(util.IsUnset(tmp.RolloutConfig)) {
		request.RolloutConfigShrink = util.ToJSONString(tmp.RolloutConfig)
	}

	if !tea.BoolValue(util.IsUnset(tmp.TargetConfig)) {
		request.TargetConfigShrink = util.ToJSONString(tmp.TargetConfig)
	}

	_result = &CreateJobResponse{}
	_body, _err := client.DoRequest(tea.String("CreateJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateJob(request *CreateJobRequest) (_result *CreateJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateJobResponse{}
	_body, _err := client.CreateJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GenerateFileUploadURLWithOptions(request *GenerateFileUploadURLRequest, runtime *util.RuntimeOptions) (_result *GenerateFileUploadURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GenerateFileUploadURLResponse{}
	_body, _err := client.DoRequest(tea.String("GenerateFileUploadURL"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GenerateFileUploadURL(request *GenerateFileUploadURLRequest) (_result *GenerateFileUploadURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateFileUploadURLResponse{}
	_body, _err := client.GenerateFileUploadURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateProductDistributeJobWithOptions(request *CreateProductDistributeJobRequest, runtime *util.RuntimeOptions) (_result *CreateProductDistributeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateProductDistributeJobResponse{}
	_body, _err := client.DoRequest(tea.String("CreateProductDistributeJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateProductDistributeJob(request *CreateProductDistributeJobRequest) (_result *CreateProductDistributeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProductDistributeJobResponse{}
	_body, _err := client.CreateProductDistributeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceOriginalPropertyDataWithOptions(request *QueryDeviceOriginalPropertyDataRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceOriginalPropertyDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceOriginalPropertyDataResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceOriginalPropertyData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceOriginalPropertyData(request *QueryDeviceOriginalPropertyDataRequest) (_result *QueryDeviceOriginalPropertyDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceOriginalPropertyDataResponse{}
	_body, _err := client.QueryDeviceOriginalPropertyDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceOriginalEventDataWithOptions(request *QueryDeviceOriginalEventDataRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceOriginalEventDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceOriginalEventDataResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceOriginalEventData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceOriginalEventData(request *QueryDeviceOriginalEventDataRequest) (_result *QueryDeviceOriginalEventDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceOriginalEventDataResponse{}
	_body, _err := client.QueryDeviceOriginalEventDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceOriginalPropertyStatusWithOptions(request *QueryDeviceOriginalPropertyStatusRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceOriginalPropertyStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceOriginalPropertyStatusResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceOriginalPropertyStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceOriginalPropertyStatus(request *QueryDeviceOriginalPropertyStatusRequest) (_result *QueryDeviceOriginalPropertyStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceOriginalPropertyStatusResponse{}
	_body, _err := client.QueryDeviceOriginalPropertyStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceOriginalServiceDataWithOptions(request *QueryDeviceOriginalServiceDataRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceOriginalServiceDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceOriginalServiceDataResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceOriginalServiceData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceOriginalServiceData(request *QueryDeviceOriginalServiceDataRequest) (_result *QueryDeviceOriginalServiceDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceOriginalServiceDataResponse{}
	_body, _err := client.QueryDeviceOriginalServiceDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateThingScriptWithOptions(request *CreateThingScriptRequest, runtime *util.RuntimeOptions) (_result *CreateThingScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateThingScriptResponse{}
	_body, _err := client.DoRequest(tea.String("CreateThingScript"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateThingScript(request *CreateThingScriptRequest) (_result *CreateThingScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateThingScriptResponse{}
	_body, _err := client.CreateThingScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateThingScriptWithOptions(request *UpdateThingScriptRequest, runtime *util.RuntimeOptions) (_result *UpdateThingScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateThingScriptResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateThingScript"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateThingScript(request *UpdateThingScriptRequest) (_result *UpdateThingScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateThingScriptResponse{}
	_body, _err := client.UpdateThingScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetThingScriptWithOptions(request *GetThingScriptRequest, runtime *util.RuntimeOptions) (_result *GetThingScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetThingScriptResponse{}
	_body, _err := client.DoRequest(tea.String("GetThingScript"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetThingScript(request *GetThingScriptRequest) (_result *GetThingScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetThingScriptResponse{}
	_body, _err := client.GetThingScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListOTAModuleVersionsByDeviceWithOptions(request *ListOTAModuleVersionsByDeviceRequest, runtime *util.RuntimeOptions) (_result *ListOTAModuleVersionsByDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListOTAModuleVersionsByDeviceResponse{}
	_body, _err := client.DoRequest(tea.String("ListOTAModuleVersionsByDevice"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListOTAModuleVersionsByDevice(request *ListOTAModuleVersionsByDeviceRequest) (_result *ListOTAModuleVersionsByDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOTAModuleVersionsByDeviceResponse{}
	_body, _err := client.ListOTAModuleVersionsByDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchPubWithOptions(request *BatchPubRequest, runtime *util.RuntimeOptions) (_result *BatchPubResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchPubResponse{}
	_body, _err := client.DoRequest(tea.String("BatchPub"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchPub(request *BatchPubRequest) (_result *BatchPubResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchPubResponse{}
	_body, _err := client.BatchPubWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SpeechByCombinationWithOptions(request *SpeechByCombinationRequest, runtime *util.RuntimeOptions) (_result *SpeechByCombinationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SpeechByCombinationResponse{}
	_body, _err := client.DoRequest(tea.String("SpeechByCombination"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SpeechByCombination(request *SpeechByCombinationRequest) (_result *SpeechByCombinationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SpeechByCombinationResponse{}
	_body, _err := client.SpeechByCombinationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateThingModelValidationConfigWithOptions(request *UpdateThingModelValidationConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateThingModelValidationConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateThingModelValidationConfigResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateThingModelValidationConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateThingModelValidationConfig(request *UpdateThingModelValidationConfigRequest) (_result *UpdateThingModelValidationConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateThingModelValidationConfigResponse{}
	_body, _err := client.UpdateThingModelValidationConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceBySQLWithOptions(request *QueryDeviceBySQLRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceBySQLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceBySQLResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceBySQL"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceBySQL(request *QueryDeviceBySQLRequest) (_result *QueryDeviceBySQLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceBySQLResponse{}
	_body, _err := client.QueryDeviceBySQLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListOTAModuleByProductWithOptions(request *ListOTAModuleByProductRequest, runtime *util.RuntimeOptions) (_result *ListOTAModuleByProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListOTAModuleByProductResponse{}
	_body, _err := client.DoRequest(tea.String("ListOTAModuleByProduct"), tea.String("HTTPS"), tea.String("GET"), tea.String("2018-01-20"), tea.String("AK"), tea.ToMap(request), nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListOTAModuleByProduct(request *ListOTAModuleByProductRequest) (_result *ListOTAModuleByProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOTAModuleByProductResponse{}
	_body, _err := client.ListOTAModuleByProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteOTAModuleWithOptions(request *DeleteOTAModuleRequest, runtime *util.RuntimeOptions) (_result *DeleteOTAModuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteOTAModuleResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteOTAModule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteOTAModule(request *DeleteOTAModuleRequest) (_result *DeleteOTAModuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteOTAModuleResponse{}
	_body, _err := client.DeleteOTAModuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GenerateDeviceNameListURLWithOptions(request *GenerateDeviceNameListURLRequest, runtime *util.RuntimeOptions) (_result *GenerateDeviceNameListURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GenerateDeviceNameListURLResponse{}
	_body, _err := client.DoRequest(tea.String("GenerateDeviceNameListURL"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GenerateDeviceNameListURL(request *GenerateDeviceNameListURLRequest) (_result *GenerateDeviceNameListURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateDeviceNameListURLResponse{}
	_body, _err := client.GenerateDeviceNameListURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateOTAModuleWithOptions(request *UpdateOTAModuleRequest, runtime *util.RuntimeOptions) (_result *UpdateOTAModuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateOTAModuleResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateOTAModule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateOTAModule(request *UpdateOTAModuleRequest) (_result *UpdateOTAModuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateOTAModuleResponse{}
	_body, _err := client.UpdateOTAModuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOTAModuleWithOptions(request *CreateOTAModuleRequest, runtime *util.RuntimeOptions) (_result *CreateOTAModuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateOTAModuleResponse{}
	_body, _err := client.DoRequest(tea.String("CreateOTAModule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOTAModule(request *CreateOTAModuleRequest) (_result *CreateOTAModuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOTAModuleResponse{}
	_body, _err := client.CreateOTAModuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryThingModelExtendConfigPublishedWithOptions(request *QueryThingModelExtendConfigPublishedRequest, runtime *util.RuntimeOptions) (_result *QueryThingModelExtendConfigPublishedResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryThingModelExtendConfigPublishedResponse{}
	_body, _err := client.DoRequest(tea.String("QueryThingModelExtendConfigPublished"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryThingModelExtendConfigPublished(request *QueryThingModelExtendConfigPublishedRequest) (_result *QueryThingModelExtendConfigPublishedResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryThingModelExtendConfigPublishedResponse{}
	_body, _err := client.QueryThingModelExtendConfigPublishedWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetThingModelTslPublishedWithOptions(request *GetThingModelTslPublishedRequest, runtime *util.RuntimeOptions) (_result *GetThingModelTslPublishedResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetThingModelTslPublishedResponse{}
	_body, _err := client.DoRequest(tea.String("GetThingModelTslPublished"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetThingModelTslPublished(request *GetThingModelTslPublishedRequest) (_result *GetThingModelTslPublishedResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetThingModelTslPublishedResponse{}
	_body, _err := client.GetThingModelTslPublishedWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryThingModelPublishedWithOptions(request *QueryThingModelPublishedRequest, runtime *util.RuntimeOptions) (_result *QueryThingModelPublishedResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryThingModelPublishedResponse{}
	_body, _err := client.DoRequest(tea.String("QueryThingModelPublished"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryThingModelPublished(request *QueryThingModelPublishedRequest) (_result *QueryThingModelPublishedResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryThingModelPublishedResponse{}
	_body, _err := client.QueryThingModelPublishedWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryThingModelExtendConfigWithOptions(request *QueryThingModelExtendConfigRequest, runtime *util.RuntimeOptions) (_result *QueryThingModelExtendConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryThingModelExtendConfigResponse{}
	_body, _err := client.DoRequest(tea.String("QueryThingModelExtendConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryThingModelExtendConfig(request *QueryThingModelExtendConfigRequest) (_result *QueryThingModelExtendConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryThingModelExtendConfigResponse{}
	_body, _err := client.QueryThingModelExtendConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDistributedDeviceWithOptions(request *ListDistributedDeviceRequest, runtime *util.RuntimeOptions) (_result *ListDistributedDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDistributedDeviceResponse{}
	_body, _err := client.DoRequest(tea.String("ListDistributedDevice"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDistributedDevice(request *ListDistributedDeviceRequest) (_result *ListDistributedDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDistributedDeviceResponse{}
	_body, _err := client.ListDistributedDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDistributedProductWithOptions(request *ListDistributedProductRequest, runtime *util.RuntimeOptions) (_result *ListDistributedProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDistributedProductResponse{}
	_body, _err := client.DoRequest(tea.String("ListDistributedProduct"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDistributedProduct(request *ListDistributedProductRequest) (_result *ListDistributedProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDistributedProductResponse{}
	_body, _err := client.ListDistributedProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySubscribeRelationWithOptions(request *QuerySubscribeRelationRequest, runtime *util.RuntimeOptions) (_result *QuerySubscribeRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySubscribeRelationResponse{}
	_body, _err := client.DoRequest(tea.String("QuerySubscribeRelation"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySubscribeRelation(request *QuerySubscribeRelationRequest) (_result *QuerySubscribeRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySubscribeRelationResponse{}
	_body, _err := client.QuerySubscribeRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateConsumerGroupSubscribeRelationWithOptions(request *CreateConsumerGroupSubscribeRelationRequest, runtime *util.RuntimeOptions) (_result *CreateConsumerGroupSubscribeRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateConsumerGroupSubscribeRelationResponse{}
	_body, _err := client.DoRequest(tea.String("CreateConsumerGroupSubscribeRelation"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateConsumerGroupSubscribeRelation(request *CreateConsumerGroupSubscribeRelationRequest) (_result *CreateConsumerGroupSubscribeRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateConsumerGroupSubscribeRelationResponse{}
	_body, _err := client.CreateConsumerGroupSubscribeRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSubscribeRelationWithOptions(request *UpdateSubscribeRelationRequest, runtime *util.RuntimeOptions) (_result *UpdateSubscribeRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSubscribeRelationResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateSubscribeRelation"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSubscribeRelation(request *UpdateSubscribeRelationRequest) (_result *UpdateSubscribeRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSubscribeRelationResponse{}
	_body, _err := client.UpdateSubscribeRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteConsumerGroupSubscribeRelationWithOptions(request *DeleteConsumerGroupSubscribeRelationRequest, runtime *util.RuntimeOptions) (_result *DeleteConsumerGroupSubscribeRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteConsumerGroupSubscribeRelationResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteConsumerGroupSubscribeRelation"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteConsumerGroupSubscribeRelation(request *DeleteConsumerGroupSubscribeRelationRequest) (_result *DeleteConsumerGroupSubscribeRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteConsumerGroupSubscribeRelationResponse{}
	_body, _err := client.DeleteConsumerGroupSubscribeRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetConsumerGroupPositionWithOptions(request *ResetConsumerGroupPositionRequest, runtime *util.RuntimeOptions) (_result *ResetConsumerGroupPositionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ResetConsumerGroupPositionResponse{}
	_body, _err := client.DoRequest(tea.String("ResetConsumerGroupPosition"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetConsumerGroupPosition(request *ResetConsumerGroupPositionRequest) (_result *ResetConsumerGroupPositionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetConsumerGroupPositionResponse{}
	_body, _err := client.ResetConsumerGroupPositionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateConsumerGroupWithOptions(request *UpdateConsumerGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateConsumerGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateConsumerGroupResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateConsumerGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateConsumerGroup(request *UpdateConsumerGroupRequest) (_result *UpdateConsumerGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateConsumerGroupResponse{}
	_body, _err := client.UpdateConsumerGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchDeleteEdgeInstanceChannelWithOptions(request *BatchDeleteEdgeInstanceChannelRequest, runtime *util.RuntimeOptions) (_result *BatchDeleteEdgeInstanceChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchDeleteEdgeInstanceChannelResponse{}
	_body, _err := client.DoRequest(tea.String("BatchDeleteEdgeInstanceChannel"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchDeleteEdgeInstanceChannel(request *BatchDeleteEdgeInstanceChannelRequest) (_result *BatchDeleteEdgeInstanceChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchDeleteEdgeInstanceChannelResponse{}
	_body, _err := client.BatchDeleteEdgeInstanceChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchSetEdgeInstanceDeviceChannelWithOptions(request *BatchSetEdgeInstanceDeviceChannelRequest, runtime *util.RuntimeOptions) (_result *BatchSetEdgeInstanceDeviceChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchSetEdgeInstanceDeviceChannelResponse{}
	_body, _err := client.DoRequest(tea.String("BatchSetEdgeInstanceDeviceChannel"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchSetEdgeInstanceDeviceChannel(request *BatchSetEdgeInstanceDeviceChannelRequest) (_result *BatchSetEdgeInstanceDeviceChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchSetEdgeInstanceDeviceChannelResponse{}
	_body, _err := client.BatchSetEdgeInstanceDeviceChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceDeviceDriverWithOptions(request *BatchGetEdgeInstanceDeviceDriverRequest, runtime *util.RuntimeOptions) (_result *BatchGetEdgeInstanceDeviceDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchGetEdgeInstanceDeviceDriverResponse{}
	_body, _err := client.DoRequest(tea.String("BatchGetEdgeInstanceDeviceDriver"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceDeviceDriver(request *BatchGetEdgeInstanceDeviceDriverRequest) (_result *BatchGetEdgeInstanceDeviceDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetEdgeInstanceDeviceDriverResponse{}
	_body, _err := client.BatchGetEdgeInstanceDeviceDriverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceDeviceChannelWithOptions(request *BatchGetEdgeInstanceDeviceChannelRequest, runtime *util.RuntimeOptions) (_result *BatchGetEdgeInstanceDeviceChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchGetEdgeInstanceDeviceChannelResponse{}
	_body, _err := client.DoRequest(tea.String("BatchGetEdgeInstanceDeviceChannel"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceDeviceChannel(request *BatchGetEdgeInstanceDeviceChannelRequest) (_result *BatchGetEdgeInstanceDeviceChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetEdgeInstanceDeviceChannelResponse{}
	_body, _err := client.BatchGetEdgeInstanceDeviceChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseEdgeDriverVersionWithOptions(request *ReleaseEdgeDriverVersionRequest, runtime *util.RuntimeOptions) (_result *ReleaseEdgeDriverVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReleaseEdgeDriverVersionResponse{}
	_body, _err := client.DoRequest(tea.String("ReleaseEdgeDriverVersion"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseEdgeDriverVersion(request *ReleaseEdgeDriverVersionRequest) (_result *ReleaseEdgeDriverVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseEdgeDriverVersionResponse{}
	_body, _err := client.ReleaseEdgeDriverVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeInstanceDeviceByDriverWithOptions(request *QueryEdgeInstanceDeviceByDriverRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeInstanceDeviceByDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryEdgeInstanceDeviceByDriverResponse{}
	_body, _err := client.DoRequest(tea.String("QueryEdgeInstanceDeviceByDriver"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeInstanceDeviceByDriver(request *QueryEdgeInstanceDeviceByDriverRequest) (_result *QueryEdgeInstanceDeviceByDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeInstanceDeviceByDriverResponse{}
	_body, _err := client.QueryEdgeInstanceDeviceByDriverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableSceneRuleWithOptions(request *DisableSceneRuleRequest, runtime *util.RuntimeOptions) (_result *DisableSceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DisableSceneRuleResponse{}
	_body, _err := client.DoRequest(tea.String("DisableSceneRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableSceneRule(request *DisableSceneRuleRequest) (_result *DisableSceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableSceneRuleResponse{}
	_body, _err := client.DisableSceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TriggerSceneRuleWithOptions(request *TriggerSceneRuleRequest, runtime *util.RuntimeOptions) (_result *TriggerSceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &TriggerSceneRuleResponse{}
	_body, _err := client.DoRequest(tea.String("TriggerSceneRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TriggerSceneRule(request *TriggerSceneRuleRequest) (_result *TriggerSceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TriggerSceneRuleResponse{}
	_body, _err := client.TriggerSceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindSceneRuleFromEdgeInstanceWithOptions(request *UnbindSceneRuleFromEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *UnbindSceneRuleFromEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnbindSceneRuleFromEdgeInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("UnbindSceneRuleFromEdgeInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindSceneRuleFromEdgeInstance(request *UnbindSceneRuleFromEdgeInstanceRequest) (_result *UnbindSceneRuleFromEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindSceneRuleFromEdgeInstanceResponse{}
	_body, _err := client.UnbindSceneRuleFromEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeInstanceSceneRuleWithOptions(request *QueryEdgeInstanceSceneRuleRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeInstanceSceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryEdgeInstanceSceneRuleResponse{}
	_body, _err := client.DoRequest(tea.String("QueryEdgeInstanceSceneRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeInstanceSceneRule(request *QueryEdgeInstanceSceneRuleRequest) (_result *QueryEdgeInstanceSceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeInstanceSceneRuleResponse{}
	_body, _err := client.QueryEdgeInstanceSceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSceneRuleWithOptions(request *CreateSceneRuleRequest, runtime *util.RuntimeOptions) (_result *CreateSceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSceneRuleResponse{}
	_body, _err := client.DoRequest(tea.String("CreateSceneRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSceneRule(request *CreateSceneRuleRequest) (_result *CreateSceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSceneRuleResponse{}
	_body, _err := client.CreateSceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDetailSceneRuleLogWithOptions(request *QueryDetailSceneRuleLogRequest, runtime *util.RuntimeOptions) (_result *QueryDetailSceneRuleLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDetailSceneRuleLogResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDetailSceneRuleLog"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDetailSceneRuleLog(request *QueryDetailSceneRuleLogRequest) (_result *QueryDetailSceneRuleLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDetailSceneRuleLogResponse{}
	_body, _err := client.QueryDetailSceneRuleLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableSceneRuleWithOptions(request *EnableSceneRuleRequest, runtime *util.RuntimeOptions) (_result *EnableSceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnableSceneRuleResponse{}
	_body, _err := client.DoRequest(tea.String("EnableSceneRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableSceneRule(request *EnableSceneRuleRequest) (_result *EnableSceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableSceneRuleResponse{}
	_body, _err := client.EnableSceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSceneRuleWithOptions(request *UpdateSceneRuleRequest, runtime *util.RuntimeOptions) (_result *UpdateSceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSceneRuleResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateSceneRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSceneRule(request *UpdateSceneRuleRequest) (_result *UpdateSceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSceneRuleResponse{}
	_body, _err := client.UpdateSceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySceneRuleWithOptions(request *QuerySceneRuleRequest, runtime *util.RuntimeOptions) (_result *QuerySceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySceneRuleResponse{}
	_body, _err := client.DoRequest(tea.String("QuerySceneRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySceneRule(request *QuerySceneRuleRequest) (_result *QuerySceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySceneRuleResponse{}
	_body, _err := client.QuerySceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySummarySceneRuleLogWithOptions(request *QuerySummarySceneRuleLogRequest, runtime *util.RuntimeOptions) (_result *QuerySummarySceneRuleLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySummarySceneRuleLogResponse{}
	_body, _err := client.DoRequest(tea.String("QuerySummarySceneRuleLog"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySummarySceneRuleLog(request *QuerySummarySceneRuleLogRequest) (_result *QuerySummarySceneRuleLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySummarySceneRuleLogResponse{}
	_body, _err := client.QuerySummarySceneRuleLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSceneRuleWithOptions(request *GetSceneRuleRequest, runtime *util.RuntimeOptions) (_result *GetSceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSceneRuleResponse{}
	_body, _err := client.DoRequest(tea.String("GetSceneRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSceneRule(request *GetSceneRuleRequest) (_result *GetSceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSceneRuleResponse{}
	_body, _err := client.GetSceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSceneRuleWithOptions(request *DeleteSceneRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteSceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSceneRuleResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteSceneRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSceneRule(request *DeleteSceneRuleRequest) (_result *DeleteSceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSceneRuleResponse{}
	_body, _err := client.DeleteSceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindSceneRuleToEdgeInstanceWithOptions(request *BindSceneRuleToEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *BindSceneRuleToEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BindSceneRuleToEdgeInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("BindSceneRuleToEdgeInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindSceneRuleToEdgeInstance(request *BindSceneRuleToEdgeInstanceRequest) (_result *BindSceneRuleToEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindSceneRuleToEdgeInstanceResponse{}
	_body, _err := client.BindSceneRuleToEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEdgeOssPreSignedAddressWithOptions(request *CreateEdgeOssPreSignedAddressRequest, runtime *util.RuntimeOptions) (_result *CreateEdgeOssPreSignedAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateEdgeOssPreSignedAddressResponse{}
	_body, _err := client.DoRequest(tea.String("CreateEdgeOssPreSignedAddress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEdgeOssPreSignedAddress(request *CreateEdgeOssPreSignedAddressRequest) (_result *CreateEdgeOssPreSignedAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEdgeOssPreSignedAddressResponse{}
	_body, _err := client.CreateEdgeOssPreSignedAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateEdgeDriverVersionWithOptions(request *UpdateEdgeDriverVersionRequest, runtime *util.RuntimeOptions) (_result *UpdateEdgeDriverVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateEdgeDriverVersionResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateEdgeDriverVersion"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateEdgeDriverVersion(request *UpdateEdgeDriverVersionRequest) (_result *UpdateEdgeDriverVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEdgeDriverVersionResponse{}
	_body, _err := client.UpdateEdgeDriverVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEdgeDriverVersionWithOptions(request *DeleteEdgeDriverVersionRequest, runtime *util.RuntimeOptions) (_result *DeleteEdgeDriverVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteEdgeDriverVersionResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteEdgeDriverVersion"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEdgeDriverVersion(request *DeleteEdgeDriverVersionRequest) (_result *DeleteEdgeDriverVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEdgeDriverVersionResponse{}
	_body, _err := client.DeleteEdgeDriverVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEdgeDriverVersionWithOptions(request *CreateEdgeDriverVersionRequest, runtime *util.RuntimeOptions) (_result *CreateEdgeDriverVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateEdgeDriverVersionResponse{}
	_body, _err := client.DoRequest(tea.String("CreateEdgeDriverVersion"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEdgeDriverVersion(request *CreateEdgeDriverVersionRequest) (_result *CreateEdgeDriverVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEdgeDriverVersionResponse{}
	_body, _err := client.CreateEdgeDriverVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEdgeDriverWithOptions(request *DeleteEdgeDriverRequest, runtime *util.RuntimeOptions) (_result *DeleteEdgeDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteEdgeDriverResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteEdgeDriver"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEdgeDriver(request *DeleteEdgeDriverRequest) (_result *DeleteEdgeDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEdgeDriverResponse{}
	_body, _err := client.DeleteEdgeDriverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeDriverWithOptions(request *QueryEdgeDriverRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryEdgeDriverResponse{}
	_body, _err := client.DoRequest(tea.String("QueryEdgeDriver"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeDriver(request *QueryEdgeDriverRequest) (_result *QueryEdgeDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeDriverResponse{}
	_body, _err := client.QueryEdgeDriverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetEdgeDriverWithOptions(request *BatchGetEdgeDriverRequest, runtime *util.RuntimeOptions) (_result *BatchGetEdgeDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchGetEdgeDriverResponse{}
	_body, _err := client.DoRequest(tea.String("BatchGetEdgeDriver"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetEdgeDriver(request *BatchGetEdgeDriverRequest) (_result *BatchGetEdgeDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetEdgeDriverResponse{}
	_body, _err := client.BatchGetEdgeDriverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEdgeDriverWithOptions(request *CreateEdgeDriverRequest, runtime *util.RuntimeOptions) (_result *CreateEdgeDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateEdgeDriverResponse{}
	_body, _err := client.DoRequest(tea.String("CreateEdgeDriver"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEdgeDriver(request *CreateEdgeDriverRequest) (_result *CreateEdgeDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEdgeDriverResponse{}
	_body, _err := client.CreateEdgeDriverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEdgeDriverVersionWithOptions(request *GetEdgeDriverVersionRequest, runtime *util.RuntimeOptions) (_result *GetEdgeDriverVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetEdgeDriverVersionResponse{}
	_body, _err := client.DoRequest(tea.String("GetEdgeDriverVersion"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEdgeDriverVersion(request *GetEdgeDriverVersionRequest) (_result *GetEdgeDriverVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEdgeDriverVersionResponse{}
	_body, _err := client.GetEdgeDriverVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeDriverVersionWithOptions(request *QueryEdgeDriverVersionRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeDriverVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryEdgeDriverVersionResponse{}
	_body, _err := client.DoRequest(tea.String("QueryEdgeDriverVersion"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeDriverVersion(request *QueryEdgeDriverVersionRequest) (_result *QueryEdgeDriverVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeDriverVersionResponse{}
	_body, _err := client.QueryEdgeDriverVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetDeviceBindStatusWithOptions(request *BatchGetDeviceBindStatusRequest, runtime *util.RuntimeOptions) (_result *BatchGetDeviceBindStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchGetDeviceBindStatusResponse{}
	_body, _err := client.DoRequest(tea.String("BatchGetDeviceBindStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetDeviceBindStatus(request *BatchGetDeviceBindStatusRequest) (_result *BatchGetDeviceBindStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetDeviceBindStatusResponse{}
	_body, _err := client.BatchGetDeviceBindStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListOTAJobByDeviceWithOptions(request *ListOTAJobByDeviceRequest, runtime *util.RuntimeOptions) (_result *ListOTAJobByDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListOTAJobByDeviceResponse{}
	_body, _err := client.DoRequest(tea.String("ListOTAJobByDevice"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListOTAJobByDevice(request *ListOTAJobByDeviceRequest) (_result *ListOTAJobByDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOTAJobByDeviceResponse{}
	_body, _err := client.ListOTAJobByDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateThingModelWithOptions(request *UpdateThingModelRequest, runtime *util.RuntimeOptions) (_result *UpdateThingModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateThingModelResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateThingModel"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateThingModel(request *UpdateThingModelRequest) (_result *UpdateThingModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateThingModelResponse{}
	_body, _err := client.UpdateThingModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateThingModelWithOptions(request *CreateThingModelRequest, runtime *util.RuntimeOptions) (_result *CreateThingModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateThingModelResponse{}
	_body, _err := client.DoRequest(tea.String("CreateThingModel"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateThingModel(request *CreateThingModelRequest) (_result *CreateThingModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateThingModelResponse{}
	_body, _err := client.CreateThingModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListOTATaskByJobWithOptions(request *ListOTATaskByJobRequest, runtime *util.RuntimeOptions) (_result *ListOTATaskByJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListOTATaskByJobResponse{}
	_body, _err := client.DoRequest(tea.String("ListOTATaskByJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListOTATaskByJob(request *ListOTATaskByJobRequest) (_result *ListOTATaskByJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOTATaskByJobResponse{}
	_body, _err := client.ListOTATaskByJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListThingTemplatesWithOptions(request *ListThingTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListThingTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListThingTemplatesResponse{}
	_body, _err := client.DoRequest(tea.String("ListThingTemplates"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListThingTemplates(request *ListThingTemplatesRequest) (_result *ListThingTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListThingTemplatesResponse{}
	_body, _err := client.ListThingTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetThingTemplateWithOptions(request *GetThingTemplateRequest, runtime *util.RuntimeOptions) (_result *GetThingTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetThingTemplateResponse{}
	_body, _err := client.DoRequest(tea.String("GetThingTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetThingTemplate(request *GetThingTemplateRequest) (_result *GetThingTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetThingTemplateResponse{}
	_body, _err := client.GetThingTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListThingModelVersionWithOptions(request *ListThingModelVersionRequest, runtime *util.RuntimeOptions) (_result *ListThingModelVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListThingModelVersionResponse{}
	_body, _err := client.DoRequest(tea.String("ListThingModelVersion"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListThingModelVersion(request *ListThingModelVersionRequest) (_result *ListThingModelVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListThingModelVersionResponse{}
	_body, _err := client.ListThingModelVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportThingModelTslWithOptions(request *ImportThingModelTslRequest, runtime *util.RuntimeOptions) (_result *ImportThingModelTslResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportThingModelTslResponse{}
	_body, _err := client.DoRequest(tea.String("ImportThingModelTsl"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportThingModelTsl(request *ImportThingModelTslRequest) (_result *ImportThingModelTslResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportThingModelTslResponse{}
	_body, _err := client.ImportThingModelTslWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PublishThingModelWithOptions(request *PublishThingModelRequest, runtime *util.RuntimeOptions) (_result *PublishThingModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PublishThingModelResponse{}
	_body, _err := client.DoRequest(tea.String("PublishThingModel"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PublishThingModel(request *PublishThingModelRequest) (_result *PublishThingModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PublishThingModelResponse{}
	_body, _err := client.PublishThingModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopyThingModelWithOptions(request *CopyThingModelRequest, runtime *util.RuntimeOptions) (_result *CopyThingModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CopyThingModelResponse{}
	_body, _err := client.DoRequest(tea.String("CopyThingModel"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopyThingModel(request *CopyThingModelRequest) (_result *CopyThingModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyThingModelResponse{}
	_body, _err := client.CopyThingModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetThingModelTslWithOptions(request *GetThingModelTslRequest, runtime *util.RuntimeOptions) (_result *GetThingModelTslResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetThingModelTslResponse{}
	_body, _err := client.DoRequest(tea.String("GetThingModelTsl"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetThingModelTsl(request *GetThingModelTslRequest) (_result *GetThingModelTslResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetThingModelTslResponse{}
	_body, _err := client.GetThingModelTslWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryThingModelWithOptions(request *QueryThingModelRequest, runtime *util.RuntimeOptions) (_result *QueryThingModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryThingModelResponse{}
	_body, _err := client.DoRequest(tea.String("QueryThingModel"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryThingModel(request *QueryThingModelRequest) (_result *QueryThingModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryThingModelResponse{}
	_body, _err := client.QueryThingModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteThingModelWithOptions(request *DeleteThingModelRequest, runtime *util.RuntimeOptions) (_result *DeleteThingModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteThingModelResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteThingModel"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteThingModel(request *DeleteThingModelRequest) (_result *DeleteThingModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteThingModelResponse{}
	_body, _err := client.DeleteThingModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateProductFilterConfigWithOptions(request *UpdateProductFilterConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateProductFilterConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateProductFilterConfigResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateProductFilterConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateProductFilterConfig(request *UpdateProductFilterConfigRequest) (_result *UpdateProductFilterConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateProductFilterConfigResponse{}
	_body, _err := client.UpdateProductFilterConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelOTAStrategyByJobWithOptions(request *CancelOTAStrategyByJobRequest, runtime *util.RuntimeOptions) (_result *CancelOTAStrategyByJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelOTAStrategyByJobResponse{}
	_body, _err := client.DoRequest(tea.String("CancelOTAStrategyByJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelOTAStrategyByJob(request *CancelOTAStrategyByJobRequest) (_result *CancelOTAStrategyByJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelOTAStrategyByJobResponse{}
	_body, _err := client.CancelOTAStrategyByJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListOTAJobByFirmwareWithOptions(request *ListOTAJobByFirmwareRequest, runtime *util.RuntimeOptions) (_result *ListOTAJobByFirmwareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListOTAJobByFirmwareResponse{}
	_body, _err := client.DoRequest(tea.String("ListOTAJobByFirmware"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListOTAJobByFirmware(request *ListOTAJobByFirmwareRequest) (_result *ListOTAJobByFirmwareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOTAJobByFirmwareResponse{}
	_body, _err := client.ListOTAJobByFirmwareWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListOTAFirmwareWithOptions(request *ListOTAFirmwareRequest, runtime *util.RuntimeOptions) (_result *ListOTAFirmwareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListOTAFirmwareResponse{}
	_body, _err := client.DoRequest(tea.String("ListOTAFirmware"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListOTAFirmware(request *ListOTAFirmwareRequest) (_result *ListOTAFirmwareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOTAFirmwareResponse{}
	_body, _err := client.ListOTAFirmwareWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelOTATaskByJobWithOptions(request *CancelOTATaskByJobRequest, runtime *util.RuntimeOptions) (_result *CancelOTATaskByJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelOTATaskByJobResponse{}
	_body, _err := client.DoRequest(tea.String("CancelOTATaskByJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelOTATaskByJob(request *CancelOTATaskByJobRequest) (_result *CancelOTATaskByJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelOTATaskByJobResponse{}
	_body, _err := client.CancelOTATaskByJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDeviceDistributeJobWithOptions(request *CreateDeviceDistributeJobRequest, runtime *util.RuntimeOptions) (_result *CreateDeviceDistributeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDeviceDistributeJobResponse{}
	_body, _err := client.DoRequest(tea.String("CreateDeviceDistributeJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDeviceDistributeJob(request *CreateDeviceDistributeJobRequest) (_result *CreateDeviceDistributeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDeviceDistributeJobResponse{}
	_body, _err := client.CreateDeviceDistributeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceDistributeDetailWithOptions(request *QueryDeviceDistributeDetailRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceDistributeDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceDistributeDetailResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceDistributeDetail"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceDistributeDetail(request *QueryDeviceDistributeDetailRequest) (_result *QueryDeviceDistributeDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceDistributeDetailResponse{}
	_body, _err := client.QueryDeviceDistributeDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDeviceDistributeJobWithOptions(request *ListDeviceDistributeJobRequest, runtime *util.RuntimeOptions) (_result *ListDeviceDistributeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDeviceDistributeJobResponse{}
	_body, _err := client.DoRequest(tea.String("ListDeviceDistributeJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDeviceDistributeJob(request *ListDeviceDistributeJobRequest) (_result *ListDeviceDistributeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDeviceDistributeJobResponse{}
	_body, _err := client.ListDeviceDistributeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceDistributeJobWithOptions(request *QueryDeviceDistributeJobRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceDistributeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceDistributeJobResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceDistributeJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceDistributeJob(request *QueryDeviceDistributeJobRequest) (_result *QueryDeviceDistributeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceDistributeJobResponse{}
	_body, _err := client.QueryDeviceDistributeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDeviceDistributeJobWithOptions(request *DeleteDeviceDistributeJobRequest, runtime *util.RuntimeOptions) (_result *DeleteDeviceDistributeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDeviceDistributeJobResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteDeviceDistributeJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDeviceDistributeJob(request *DeleteDeviceDistributeJobRequest) (_result *DeleteDeviceDistributeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDeviceDistributeJobResponse{}
	_body, _err := client.DeleteDeviceDistributeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceByStatusWithOptions(request *QueryDeviceByStatusRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceByStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceByStatusResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceByStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceByStatus(request *QueryDeviceByStatusRequest) (_result *QueryDeviceByStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceByStatusResponse{}
	_body, _err := client.QueryDeviceByStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GenerateOTAUploadURLWithOptions(request *GenerateOTAUploadURLRequest, runtime *util.RuntimeOptions) (_result *GenerateOTAUploadURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GenerateOTAUploadURLResponse{}
	_body, _err := client.DoRequest(tea.String("GenerateOTAUploadURL"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GenerateOTAUploadURL(request *GenerateOTAUploadURLRequest) (_result *GenerateOTAUploadURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateOTAUploadURLResponse{}
	_body, _err := client.GenerateOTAUploadURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryProductCertInfoWithOptions(request *QueryProductCertInfoRequest, runtime *util.RuntimeOptions) (_result *QueryProductCertInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryProductCertInfoResponse{}
	_body, _err := client.DoRequest(tea.String("QueryProductCertInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryProductCertInfo(request *QueryProductCertInfoRequest) (_result *QueryProductCertInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryProductCertInfoResponse{}
	_body, _err := client.QueryProductCertInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetProductCertInfoWithOptions(request *SetProductCertInfoRequest, runtime *util.RuntimeOptions) (_result *SetProductCertInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetProductCertInfoResponse{}
	_body, _err := client.DoRequest(tea.String("SetProductCertInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetProductCertInfo(request *SetProductCertInfoRequest) (_result *SetProductCertInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetProductCertInfoResponse{}
	_body, _err := client.SetProductCertInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSubscribeRelationWithOptions(request *CreateSubscribeRelationRequest, runtime *util.RuntimeOptions) (_result *CreateSubscribeRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateSubscribeRelationResponse{}
	_body, _err := client.DoRequest(tea.String("CreateSubscribeRelation"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSubscribeRelation(request *CreateSubscribeRelationRequest) (_result *CreateSubscribeRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSubscribeRelationResponse{}
	_body, _err := client.CreateSubscribeRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSubscribeRelationWithOptions(request *DeleteSubscribeRelationRequest, runtime *util.RuntimeOptions) (_result *DeleteSubscribeRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSubscribeRelationResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteSubscribeRelation"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSubscribeRelation(request *DeleteSubscribeRelationRequest) (_result *DeleteSubscribeRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSubscribeRelationResponse{}
	_body, _err := client.DeleteSubscribeRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryConsumerGroupStatusWithOptions(request *QueryConsumerGroupStatusRequest, runtime *util.RuntimeOptions) (_result *QueryConsumerGroupStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumerGroupStatusResponse{}
	_body, _err := client.DoRequest(tea.String("QueryConsumerGroupStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryConsumerGroupStatus(request *QueryConsumerGroupStatusRequest) (_result *QueryConsumerGroupStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryConsumerGroupStatusResponse{}
	_body, _err := client.QueryConsumerGroupStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteConsumerGroupWithOptions(request *DeleteConsumerGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteConsumerGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteConsumerGroupResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteConsumerGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteConsumerGroup(request *DeleteConsumerGroupRequest) (_result *DeleteConsumerGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteConsumerGroupResponse{}
	_body, _err := client.DeleteConsumerGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryConsumerGroupListWithOptions(request *QueryConsumerGroupListRequest, runtime *util.RuntimeOptions) (_result *QueryConsumerGroupListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumerGroupListResponse{}
	_body, _err := client.DoRequest(tea.String("QueryConsumerGroupList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryConsumerGroupList(request *QueryConsumerGroupListRequest) (_result *QueryConsumerGroupListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryConsumerGroupListResponse{}
	_body, _err := client.QueryConsumerGroupListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryConsumerGroupByGroupIdWithOptions(request *QueryConsumerGroupByGroupIdRequest, runtime *util.RuntimeOptions) (_result *QueryConsumerGroupByGroupIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConsumerGroupByGroupIdResponse{}
	_body, _err := client.DoRequest(tea.String("QueryConsumerGroupByGroupId"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryConsumerGroupByGroupId(request *QueryConsumerGroupByGroupIdRequest) (_result *QueryConsumerGroupByGroupIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryConsumerGroupByGroupIdResponse{}
	_body, _err := client.QueryConsumerGroupByGroupIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateConsumerGroupWithOptions(request *CreateConsumerGroupRequest, runtime *util.RuntimeOptions) (_result *CreateConsumerGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateConsumerGroupResponse{}
	_body, _err := client.DoRequest(tea.String("CreateConsumerGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateConsumerGroup(request *CreateConsumerGroupRequest) (_result *CreateConsumerGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateConsumerGroupResponse{}
	_body, _err := client.CreateConsumerGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOTADynamicUpgradeJobWithOptions(request *CreateOTADynamicUpgradeJobRequest, runtime *util.RuntimeOptions) (_result *CreateOTADynamicUpgradeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateOTADynamicUpgradeJobResponse{}
	_body, _err := client.DoRequest(tea.String("CreateOTADynamicUpgradeJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOTADynamicUpgradeJob(request *CreateOTADynamicUpgradeJobRequest) (_result *CreateOTADynamicUpgradeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOTADynamicUpgradeJobResponse{}
	_body, _err := client.CreateOTADynamicUpgradeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOTAStaticUpgradeJobWithOptions(request *CreateOTAStaticUpgradeJobRequest, runtime *util.RuntimeOptions) (_result *CreateOTAStaticUpgradeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateOTAStaticUpgradeJobResponse{}
	_body, _err := client.DoRequest(tea.String("CreateOTAStaticUpgradeJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOTAStaticUpgradeJob(request *CreateOTAStaticUpgradeJobRequest) (_result *CreateOTAStaticUpgradeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOTAStaticUpgradeJobResponse{}
	_body, _err := client.CreateOTAStaticUpgradeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOTAFirmwareWithOptions(request *CreateOTAFirmwareRequest, runtime *util.RuntimeOptions) (_result *CreateOTAFirmwareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateOTAFirmwareResponse{}
	_body, _err := client.DoRequest(tea.String("CreateOTAFirmware"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOTAFirmware(request *CreateOTAFirmwareRequest) (_result *CreateOTAFirmwareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOTAFirmwareResponse{}
	_body, _err := client.CreateOTAFirmwareWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOTAVerifyJobWithOptions(request *CreateOTAVerifyJobRequest, runtime *util.RuntimeOptions) (_result *CreateOTAVerifyJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateOTAVerifyJobResponse{}
	_body, _err := client.DoRequest(tea.String("CreateOTAVerifyJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOTAVerifyJob(request *CreateOTAVerifyJobRequest) (_result *CreateOTAVerifyJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOTAVerifyJobResponse{}
	_body, _err := client.CreateOTAVerifyJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryOTAJobWithOptions(request *QueryOTAJobRequest, runtime *util.RuntimeOptions) (_result *QueryOTAJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOTAJobResponse{}
	_body, _err := client.DoRequest(tea.String("QueryOTAJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryOTAJob(request *QueryOTAJobRequest) (_result *QueryOTAJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryOTAJobResponse{}
	_body, _err := client.QueryOTAJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelOTATaskByDeviceWithOptions(request *CancelOTATaskByDeviceRequest, runtime *util.RuntimeOptions) (_result *CancelOTATaskByDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelOTATaskByDeviceResponse{}
	_body, _err := client.DoRequest(tea.String("CancelOTATaskByDevice"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelOTATaskByDevice(request *CancelOTATaskByDeviceRequest) (_result *CancelOTATaskByDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelOTATaskByDeviceResponse{}
	_body, _err := client.CancelOTATaskByDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteOTAFirmwareWithOptions(request *DeleteOTAFirmwareRequest, runtime *util.RuntimeOptions) (_result *DeleteOTAFirmwareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteOTAFirmwareResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteOTAFirmware"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteOTAFirmware(request *DeleteOTAFirmwareRequest) (_result *DeleteOTAFirmwareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteOTAFirmwareResponse{}
	_body, _err := client.DeleteOTAFirmwareWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryOTAFirmwareWithOptions(request *QueryOTAFirmwareRequest, runtime *util.RuntimeOptions) (_result *QueryOTAFirmwareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryOTAFirmwareResponse{}
	_body, _err := client.DoRequest(tea.String("QueryOTAFirmware"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryOTAFirmware(request *QueryOTAFirmwareRequest) (_result *QueryOTAFirmwareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryOTAFirmwareResponse{}
	_body, _err := client.QueryOTAFirmwareWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindApplicationFromEdgeInstanceWithOptions(request *UnbindApplicationFromEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *UnbindApplicationFromEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnbindApplicationFromEdgeInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("UnbindApplicationFromEdgeInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindApplicationFromEdgeInstance(request *UnbindApplicationFromEdgeInstanceRequest) (_result *UnbindApplicationFromEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindApplicationFromEdgeInstanceResponse{}
	_body, _err := client.UnbindApplicationFromEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindApplicationToEdgeInstanceWithOptions(request *BindApplicationToEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *BindApplicationToEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BindApplicationToEdgeInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("BindApplicationToEdgeInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindApplicationToEdgeInstance(request *BindApplicationToEdgeInstanceRequest) (_result *BindApplicationToEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindApplicationToEdgeInstanceResponse{}
	_body, _err := client.BindApplicationToEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryCertUrlByApplyIdWithOptions(request *QueryCertUrlByApplyIdRequest, runtime *util.RuntimeOptions) (_result *QueryCertUrlByApplyIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryCertUrlByApplyIdResponse{}
	_body, _err := client.DoRequest(tea.String("QueryCertUrlByApplyId"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryCertUrlByApplyId(request *QueryCertUrlByApplyIdRequest) (_result *QueryCertUrlByApplyIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCertUrlByApplyIdResponse{}
	_body, _err := client.QueryCertUrlByApplyIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceCertWithOptions(request *QueryDeviceCertRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceCertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceCertResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceCert"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceCert(request *QueryDeviceCertRequest) (_result *QueryDeviceCertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceCertResponse{}
	_body, _err := client.QueryDeviceCertWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CloseEdgeInstanceDeploymentWithOptions(request *CloseEdgeInstanceDeploymentRequest, runtime *util.RuntimeOptions) (_result *CloseEdgeInstanceDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CloseEdgeInstanceDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("CloseEdgeInstanceDeployment"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CloseEdgeInstanceDeployment(request *CloseEdgeInstanceDeploymentRequest) (_result *CloseEdgeInstanceDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CloseEdgeInstanceDeploymentResponse{}
	_body, _err := client.CloseEdgeInstanceDeploymentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindDriverFromEdgeInstanceWithOptions(request *UnbindDriverFromEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *UnbindDriverFromEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnbindDriverFromEdgeInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("UnbindDriverFromEdgeInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindDriverFromEdgeInstance(request *UnbindDriverFromEdgeInstanceRequest) (_result *UnbindDriverFromEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindDriverFromEdgeInstanceResponse{}
	_body, _err := client.UnbindDriverFromEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReplaceEdgeInstanceGatewayWithOptions(request *ReplaceEdgeInstanceGatewayRequest, runtime *util.RuntimeOptions) (_result *ReplaceEdgeInstanceGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReplaceEdgeInstanceGatewayResponse{}
	_body, _err := client.DoRequest(tea.String("ReplaceEdgeInstanceGateway"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReplaceEdgeInstanceGateway(request *ReplaceEdgeInstanceGatewayRequest) (_result *ReplaceEdgeInstanceGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReplaceEdgeInstanceGatewayResponse{}
	_body, _err := client.ReplaceEdgeInstanceGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindDriverToEdgeInstanceWithOptions(request *BindDriverToEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *BindDriverToEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BindDriverToEdgeInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("BindDriverToEdgeInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindDriverToEdgeInstance(request *BindDriverToEdgeInstanceRequest) (_result *BindDriverToEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindDriverToEdgeInstanceResponse{}
	_body, _err := client.BindDriverToEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchQueryDeviceDetailWithOptions(request *BatchQueryDeviceDetailRequest, runtime *util.RuntimeOptions) (_result *BatchQueryDeviceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchQueryDeviceDetailResponse{}
	_body, _err := client.DoRequest(tea.String("BatchQueryDeviceDetail"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchQueryDeviceDetail(request *BatchQueryDeviceDetailRequest) (_result *BatchQueryDeviceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchQueryDeviceDetailResponse{}
	_body, _err := client.BatchQueryDeviceDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEdgeInstanceDeploymentWithOptions(request *GetEdgeInstanceDeploymentRequest, runtime *util.RuntimeOptions) (_result *GetEdgeInstanceDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetEdgeInstanceDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("GetEdgeInstanceDeployment"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEdgeInstanceDeployment(request *GetEdgeInstanceDeploymentRequest) (_result *GetEdgeInstanceDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEdgeInstanceDeploymentResponse{}
	_body, _err := client.GetEdgeInstanceDeploymentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTaskWithOptions(request *QueryTaskRequest, runtime *util.RuntimeOptions) (_result *QueryTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTaskResponse{}
	_body, _err := client.DoRequest(tea.String("QueryTask"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTask(request *QueryTaskRequest) (_result *QueryTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTaskResponse{}
	_body, _err := client.QueryTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDataAPIServiceWithOptions(request *CreateDataAPIServiceRequest, runtime *util.RuntimeOptions) (_result *CreateDataAPIServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDataAPIServiceResponse{}
	_body, _err := client.DoRequest(tea.String("CreateDataAPIService"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDataAPIService(request *CreateDataAPIServiceRequest) (_result *CreateDataAPIServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDataAPIServiceResponse{}
	_body, _err := client.CreateDataAPIServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDataAPIServiceDetailWithOptions(request *GetDataAPIServiceDetailRequest, runtime *util.RuntimeOptions) (_result *GetDataAPIServiceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDataAPIServiceDetailResponse{}
	_body, _err := client.DoRequest(tea.String("GetDataAPIServiceDetail"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDataAPIServiceDetail(request *GetDataAPIServiceDetailRequest) (_result *GetDataAPIServiceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataAPIServiceDetailResponse{}
	_body, _err := client.GetDataAPIServiceDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InvokeDataAPIServiceWithOptions(request *InvokeDataAPIServiceRequest, runtime *util.RuntimeOptions) (_result *InvokeDataAPIServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InvokeDataAPIServiceResponse{}
	_body, _err := client.DoRequest(tea.String("InvokeDataAPIService"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InvokeDataAPIService(request *InvokeDataAPIServiceRequest) (_result *InvokeDataAPIServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InvokeDataAPIServiceResponse{}
	_body, _err := client.InvokeDataAPIServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateEdgeInstanceChannelWithOptions(request *UpdateEdgeInstanceChannelRequest, runtime *util.RuntimeOptions) (_result *UpdateEdgeInstanceChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateEdgeInstanceChannelResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateEdgeInstanceChannel"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateEdgeInstanceChannel(request *UpdateEdgeInstanceChannelRequest) (_result *UpdateEdgeInstanceChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEdgeInstanceChannelResponse{}
	_body, _err := client.UpdateEdgeInstanceChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeInstanceChannelWithOptions(request *QueryEdgeInstanceChannelRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeInstanceChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryEdgeInstanceChannelResponse{}
	_body, _err := client.DoRequest(tea.String("QueryEdgeInstanceChannel"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeInstanceChannel(request *QueryEdgeInstanceChannelRequest) (_result *QueryEdgeInstanceChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeInstanceChannelResponse{}
	_body, _err := client.QueryEdgeInstanceChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchUnbindDeviceFromEdgeInstanceWithOptions(request *BatchUnbindDeviceFromEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *BatchUnbindDeviceFromEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchUnbindDeviceFromEdgeInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("BatchUnbindDeviceFromEdgeInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchUnbindDeviceFromEdgeInstance(request *BatchUnbindDeviceFromEdgeInstanceRequest) (_result *BatchUnbindDeviceFromEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchUnbindDeviceFromEdgeInstanceResponse{}
	_body, _err := client.BatchUnbindDeviceFromEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetEdgeInstanceDriverConfigsWithOptions(request *SetEdgeInstanceDriverConfigsRequest, runtime *util.RuntimeOptions) (_result *SetEdgeInstanceDriverConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetEdgeInstanceDriverConfigsResponse{}
	_body, _err := client.DoRequest(tea.String("SetEdgeInstanceDriverConfigs"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetEdgeInstanceDriverConfigs(request *SetEdgeInstanceDriverConfigsRequest) (_result *SetEdgeInstanceDriverConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetEdgeInstanceDriverConfigsResponse{}
	_body, _err := client.SetEdgeInstanceDriverConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEdgeInstanceChannelWithOptions(request *CreateEdgeInstanceChannelRequest, runtime *util.RuntimeOptions) (_result *CreateEdgeInstanceChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateEdgeInstanceChannelResponse{}
	_body, _err := client.DoRequest(tea.String("CreateEdgeInstanceChannel"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEdgeInstanceChannel(request *CreateEdgeInstanceChannelRequest) (_result *CreateEdgeInstanceChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEdgeInstanceChannelResponse{}
	_body, _err := client.CreateEdgeInstanceChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchBindDeviceToEdgeInstanceWithDriverWithOptions(request *BatchBindDeviceToEdgeInstanceWithDriverRequest, runtime *util.RuntimeOptions) (_result *BatchBindDeviceToEdgeInstanceWithDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchBindDeviceToEdgeInstanceWithDriverResponse{}
	_body, _err := client.DoRequest(tea.String("BatchBindDeviceToEdgeInstanceWithDriver"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchBindDeviceToEdgeInstanceWithDriver(request *BatchBindDeviceToEdgeInstanceWithDriverRequest) (_result *BatchBindDeviceToEdgeInstanceWithDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchBindDeviceToEdgeInstanceWithDriverResponse{}
	_body, _err := client.BatchBindDeviceToEdgeInstanceWithDriverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceChannelWithOptions(request *BatchGetEdgeInstanceChannelRequest, runtime *util.RuntimeOptions) (_result *BatchGetEdgeInstanceChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchGetEdgeInstanceChannelResponse{}
	_body, _err := client.DoRequest(tea.String("BatchGetEdgeInstanceChannel"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceChannel(request *BatchGetEdgeInstanceChannelRequest) (_result *BatchGetEdgeInstanceChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetEdgeInstanceChannelResponse{}
	_body, _err := client.BatchGetEdgeInstanceChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchSetEdgeInstanceDeviceConfigWithOptions(request *BatchSetEdgeInstanceDeviceConfigRequest, runtime *util.RuntimeOptions) (_result *BatchSetEdgeInstanceDeviceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchSetEdgeInstanceDeviceConfigResponse{}
	_body, _err := client.DoRequest(tea.String("BatchSetEdgeInstanceDeviceConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchSetEdgeInstanceDeviceConfig(request *BatchSetEdgeInstanceDeviceConfigRequest) (_result *BatchSetEdgeInstanceDeviceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchSetEdgeInstanceDeviceConfigResponse{}
	_body, _err := client.BatchSetEdgeInstanceDeviceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchClearEdgeInstanceDeviceConfigWithOptions(request *BatchClearEdgeInstanceDeviceConfigRequest, runtime *util.RuntimeOptions) (_result *BatchClearEdgeInstanceDeviceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchClearEdgeInstanceDeviceConfigResponse{}
	_body, _err := client.DoRequest(tea.String("BatchClearEdgeInstanceDeviceConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchClearEdgeInstanceDeviceConfig(request *BatchClearEdgeInstanceDeviceConfigRequest) (_result *BatchClearEdgeInstanceDeviceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchClearEdgeInstanceDeviceConfigResponse{}
	_body, _err := client.BatchClearEdgeInstanceDeviceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceDeviceConfigWithOptions(request *BatchGetEdgeInstanceDeviceConfigRequest, runtime *util.RuntimeOptions) (_result *BatchGetEdgeInstanceDeviceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchGetEdgeInstanceDeviceConfigResponse{}
	_body, _err := client.DoRequest(tea.String("BatchGetEdgeInstanceDeviceConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceDeviceConfig(request *BatchGetEdgeInstanceDeviceConfigRequest) (_result *BatchGetEdgeInstanceDeviceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetEdgeInstanceDeviceConfigResponse{}
	_body, _err := client.BatchGetEdgeInstanceDeviceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceDriverConfigsWithOptions(request *BatchGetEdgeInstanceDriverConfigsRequest, runtime *util.RuntimeOptions) (_result *BatchGetEdgeInstanceDriverConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchGetEdgeInstanceDriverConfigsResponse{}
	_body, _err := client.DoRequest(tea.String("BatchGetEdgeInstanceDriverConfigs"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceDriverConfigs(request *BatchGetEdgeInstanceDriverConfigsRequest) (_result *BatchGetEdgeInstanceDriverConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetEdgeInstanceDriverConfigsResponse{}
	_body, _err := client.BatchGetEdgeInstanceDriverConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ClearEdgeInstanceDriverConfigsWithOptions(request *ClearEdgeInstanceDriverConfigsRequest, runtime *util.RuntimeOptions) (_result *ClearEdgeInstanceDriverConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ClearEdgeInstanceDriverConfigsResponse{}
	_body, _err := client.DoRequest(tea.String("ClearEdgeInstanceDriverConfigs"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ClearEdgeInstanceDriverConfigs(request *ClearEdgeInstanceDriverConfigsRequest) (_result *ClearEdgeInstanceDriverConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ClearEdgeInstanceDriverConfigsResponse{}
	_body, _err := client.ClearEdgeInstanceDriverConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLoRaNodesTaskWithOptions(request *CreateLoRaNodesTaskRequest, runtime *util.RuntimeOptions) (_result *CreateLoRaNodesTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateLoRaNodesTaskResponse{}
	_body, _err := client.DoRequest(tea.String("CreateLoRaNodesTask"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLoRaNodesTask(request *CreateLoRaNodesTaskRequest) (_result *CreateLoRaNodesTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLoRaNodesTaskResponse{}
	_body, _err := client.CreateLoRaNodesTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetLoraNodesTaskWithOptions(request *GetLoraNodesTaskRequest, runtime *util.RuntimeOptions) (_result *GetLoraNodesTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetLoraNodesTaskResponse{}
	_body, _err := client.DoRequest(tea.String("GetLoraNodesTask"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetLoraNodesTask(request *GetLoraNodesTaskRequest) (_result *GetLoraNodesTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLoraNodesTaskResponse{}
	_body, _err := client.GetLoraNodesTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryLoRaJoinPermissionsWithOptions(request *QueryLoRaJoinPermissionsRequest, runtime *util.RuntimeOptions) (_result *QueryLoRaJoinPermissionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryLoRaJoinPermissionsResponse{}
	_body, _err := client.DoRequest(tea.String("QueryLoRaJoinPermissions"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryLoRaJoinPermissions(request *QueryLoRaJoinPermissionsRequest) (_result *QueryLoRaJoinPermissionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryLoRaJoinPermissionsResponse{}
	_body, _err := client.QueryLoRaJoinPermissionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeInstanceDriverWithOptions(request *QueryEdgeInstanceDriverRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeInstanceDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryEdgeInstanceDriverResponse{}
	_body, _err := client.DoRequest(tea.String("QueryEdgeInstanceDriver"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeInstanceDriver(request *QueryEdgeInstanceDriverRequest) (_result *QueryEdgeInstanceDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeInstanceDriverResponse{}
	_body, _err := client.QueryEdgeInstanceDriverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchUpdateDeviceNicknameWithOptions(request *BatchUpdateDeviceNicknameRequest, runtime *util.RuntimeOptions) (_result *BatchUpdateDeviceNicknameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchUpdateDeviceNicknameResponse{}
	_body, _err := client.DoRequest(tea.String("BatchUpdateDeviceNickname"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchUpdateDeviceNickname(request *BatchUpdateDeviceNicknameRequest) (_result *BatchUpdateDeviceNicknameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchUpdateDeviceNicknameResponse{}
	_body, _err := client.BatchUpdateDeviceNicknameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceFileWithOptions(request *QueryDeviceFileRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceFileResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceFile"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceFile(request *QueryDeviceFileRequest) (_result *QueryDeviceFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceFileResponse{}
	_body, _err := client.QueryDeviceFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceFileListWithOptions(request *QueryDeviceFileListRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceFileListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceFileListResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceFileList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceFileList(request *QueryDeviceFileListRequest) (_result *QueryDeviceFileListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceFileListResponse{}
	_body, _err := client.QueryDeviceFileListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDeviceFileWithOptions(request *DeleteDeviceFileRequest, runtime *util.RuntimeOptions) (_result *DeleteDeviceFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDeviceFileResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteDeviceFile"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDeviceFile(request *DeleteDeviceFileRequest) (_result *DeleteDeviceFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDeviceFileResponse{}
	_body, _err := client.DeleteDeviceFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetNodesAddingTaskWithOptions(request *GetNodesAddingTaskRequest, runtime *util.RuntimeOptions) (_result *GetNodesAddingTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetNodesAddingTaskResponse{}
	_body, _err := client.DoRequest(tea.String("GetNodesAddingTask"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetNodesAddingTask(request *GetNodesAddingTaskRequest) (_result *GetNodesAddingTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetNodesAddingTaskResponse{}
	_body, _err := client.GetNodesAddingTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetDeviceDesiredPropertyWithOptions(request *SetDeviceDesiredPropertyRequest, runtime *util.RuntimeOptions) (_result *SetDeviceDesiredPropertyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetDeviceDesiredPropertyResponse{}
	_body, _err := client.DoRequest(tea.String("SetDeviceDesiredProperty"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetDeviceDesiredProperty(request *SetDeviceDesiredPropertyRequest) (_result *SetDeviceDesiredPropertyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDeviceDesiredPropertyResponse{}
	_body, _err := client.SetDeviceDesiredPropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceDesiredPropertyWithOptions(request *QueryDeviceDesiredPropertyRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceDesiredPropertyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceDesiredPropertyResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceDesiredProperty"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceDesiredProperty(request *QueryDeviceDesiredPropertyRequest) (_result *QueryDeviceDesiredPropertyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceDesiredPropertyResponse{}
	_body, _err := client.QueryDeviceDesiredPropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeInstanceHistoricDeploymentWithOptions(request *QueryEdgeInstanceHistoricDeploymentRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeInstanceHistoricDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryEdgeInstanceHistoricDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("QueryEdgeInstanceHistoricDeployment"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeInstanceHistoricDeployment(request *QueryEdgeInstanceHistoricDeploymentRequest) (_result *QueryEdgeInstanceHistoricDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeInstanceHistoricDeploymentResponse{}
	_body, _err := client.QueryEdgeInstanceHistoricDeploymentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateProductTagsWithOptions(request *CreateProductTagsRequest, runtime *util.RuntimeOptions) (_result *CreateProductTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateProductTagsResponse{}
	_body, _err := client.DoRequest(tea.String("CreateProductTags"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateProductTags(request *CreateProductTagsRequest) (_result *CreateProductTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProductTagsResponse{}
	_body, _err := client.CreateProductTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateProductTagsWithOptions(request *UpdateProductTagsRequest, runtime *util.RuntimeOptions) (_result *UpdateProductTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateProductTagsResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateProductTags"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateProductTags(request *UpdateProductTagsRequest) (_result *UpdateProductTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateProductTagsResponse{}
	_body, _err := client.UpdateProductTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteProductTagsWithOptions(request *DeleteProductTagsRequest, runtime *util.RuntimeOptions) (_result *DeleteProductTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteProductTagsResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteProductTags"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteProductTags(request *DeleteProductTagsRequest) (_result *DeleteProductTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteProductTagsResponse{}
	_body, _err := client.DeleteProductTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListProductTagsWithOptions(request *ListProductTagsRequest, runtime *util.RuntimeOptions) (_result *ListProductTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListProductTagsResponse{}
	_body, _err := client.DoRequest(tea.String("ListProductTags"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListProductTags(request *ListProductTagsRequest) (_result *ListProductTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProductTagsResponse{}
	_body, _err := client.ListProductTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListProductByTagsWithOptions(request *ListProductByTagsRequest, runtime *util.RuntimeOptions) (_result *ListProductByTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListProductByTagsResponse{}
	_body, _err := client.DoRequest(tea.String("ListProductByTags"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListProductByTags(request *ListProductByTagsRequest) (_result *ListProductByTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProductByTagsResponse{}
	_body, _err := client.ListProductByTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceGroupByTagsWithOptions(request *QueryDeviceGroupByTagsRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceGroupByTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceGroupByTagsResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceGroupByTags"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceGroupByTags(request *QueryDeviceGroupByTagsRequest) (_result *QueryDeviceGroupByTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceGroupByTagsResponse{}
	_body, _err := client.QueryDeviceGroupByTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchAddThingTopoWithOptions(request *BatchAddThingTopoRequest, runtime *util.RuntimeOptions) (_result *BatchAddThingTopoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchAddThingTopoResponse{}
	_body, _err := client.DoRequest(tea.String("BatchAddThingTopo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchAddThingTopo(request *BatchAddThingTopoRequest) (_result *BatchAddThingTopoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchAddThingTopoResponse{}
	_body, _err := client.BatchAddThingTopoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceListByDeviceGroupWithOptions(request *QueryDeviceListByDeviceGroupRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceListByDeviceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceListByDeviceGroupResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceListByDeviceGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceListByDeviceGroup(request *QueryDeviceListByDeviceGroupRequest) (_result *QueryDeviceListByDeviceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceListByDeviceGroupResponse{}
	_body, _err := client.QueryDeviceListByDeviceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDevicePropertiesDataWithOptions(request *QueryDevicePropertiesDataRequest, runtime *util.RuntimeOptions) (_result *QueryDevicePropertiesDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDevicePropertiesDataResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDevicePropertiesData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDevicePropertiesData(request *QueryDevicePropertiesDataRequest) (_result *QueryDevicePropertiesDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDevicePropertiesDataResponse{}
	_body, _err := client.QueryDevicePropertiesDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindRoleFromEdgeInstanceWithOptions(request *UnbindRoleFromEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *UnbindRoleFromEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnbindRoleFromEdgeInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("UnbindRoleFromEdgeInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindRoleFromEdgeInstance(request *UnbindRoleFromEdgeInstanceRequest) (_result *UnbindRoleFromEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindRoleFromEdgeInstanceResponse{}
	_body, _err := client.UnbindRoleFromEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateEdgeInstanceWithOptions(request *UpdateEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *UpdateEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateEdgeInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateEdgeInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateEdgeInstance(request *UpdateEdgeInstanceRequest) (_result *UpdateEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEdgeInstanceResponse{}
	_body, _err := client.UpdateEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEdgeInstanceWithOptions(request *GetEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *GetEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetEdgeInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("GetEdgeInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEdgeInstance(request *GetEdgeInstanceRequest) (_result *GetEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEdgeInstanceResponse{}
	_body, _err := client.GetEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEdgeInstanceWithOptions(request *DeleteEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteEdgeInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteEdgeInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEdgeInstance(request *DeleteEdgeInstanceRequest) (_result *DeleteEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEdgeInstanceResponse{}
	_body, _err := client.DeleteEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEdgeInstanceWithOptions(request *CreateEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateEdgeInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("CreateEdgeInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEdgeInstance(request *CreateEdgeInstanceRequest) (_result *CreateEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEdgeInstanceResponse{}
	_body, _err := client.CreateEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeInstanceGatewayWithOptions(request *QueryEdgeInstanceGatewayRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeInstanceGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryEdgeInstanceGatewayResponse{}
	_body, _err := client.DoRequest(tea.String("QueryEdgeInstanceGateway"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeInstanceGateway(request *QueryEdgeInstanceGatewayRequest) (_result *QueryEdgeInstanceGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeInstanceGatewayResponse{}
	_body, _err := client.QueryEdgeInstanceGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeInstanceDeviceWithOptions(request *QueryEdgeInstanceDeviceRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeInstanceDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryEdgeInstanceDeviceResponse{}
	_body, _err := client.DoRequest(tea.String("QueryEdgeInstanceDevice"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeInstanceDevice(request *QueryEdgeInstanceDeviceRequest) (_result *QueryEdgeInstanceDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeInstanceDeviceResponse{}
	_body, _err := client.QueryEdgeInstanceDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindGatewayToEdgeInstanceWithOptions(request *BindGatewayToEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *BindGatewayToEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BindGatewayToEdgeInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("BindGatewayToEdgeInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindGatewayToEdgeInstance(request *BindGatewayToEdgeInstanceRequest) (_result *BindGatewayToEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindGatewayToEdgeInstanceResponse{}
	_body, _err := client.BindGatewayToEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeInstanceWithOptions(request *QueryEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryEdgeInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("QueryEdgeInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeInstance(request *QueryEdgeInstanceRequest) (_result *QueryEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeInstanceResponse{}
	_body, _err := client.QueryEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEdgeInstanceDeploymentWithOptions(request *CreateEdgeInstanceDeploymentRequest, runtime *util.RuntimeOptions) (_result *CreateEdgeInstanceDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateEdgeInstanceDeploymentResponse{}
	_body, _err := client.DoRequest(tea.String("CreateEdgeInstanceDeployment"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEdgeInstanceDeployment(request *CreateEdgeInstanceDeploymentRequest) (_result *CreateEdgeInstanceDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEdgeInstanceDeploymentResponse{}
	_body, _err := client.CreateEdgeInstanceDeploymentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindRoleToEdgeInstanceWithOptions(request *BindRoleToEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *BindRoleToEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BindRoleToEdgeInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("BindRoleToEdgeInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindRoleToEdgeInstance(request *BindRoleToEdgeInstanceRequest) (_result *BindRoleToEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindRoleToEdgeInstanceResponse{}
	_body, _err := client.BindRoleToEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySuperDeviceGroupWithOptions(request *QuerySuperDeviceGroupRequest, runtime *util.RuntimeOptions) (_result *QuerySuperDeviceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySuperDeviceGroupResponse{}
	_body, _err := client.DoRequest(tea.String("QuerySuperDeviceGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySuperDeviceGroup(request *QuerySuperDeviceGroupRequest) (_result *QuerySuperDeviceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySuperDeviceGroupResponse{}
	_body, _err := client.QuerySuperDeviceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceByTagsWithOptions(request *QueryDeviceByTagsRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceByTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceByTagsResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceByTags"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceByTags(request *QueryDeviceByTagsRequest) (_result *QueryDeviceByTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceByTagsResponse{}
	_body, _err := client.QueryDeviceByTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetDevicesPropertyWithOptions(request *SetDevicesPropertyRequest, runtime *util.RuntimeOptions) (_result *SetDevicesPropertyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetDevicesPropertyResponse{}
	_body, _err := client.DoRequest(tea.String("SetDevicesProperty"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetDevicesProperty(request *SetDevicesPropertyRequest) (_result *SetDevicesPropertyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDevicesPropertyResponse{}
	_body, _err := client.SetDevicesPropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InvokeThingsServiceWithOptions(request *InvokeThingsServiceRequest, runtime *util.RuntimeOptions) (_result *InvokeThingsServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InvokeThingsServiceResponse{}
	_body, _err := client.DoRequest(tea.String("InvokeThingsService"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InvokeThingsService(request *InvokeThingsServiceRequest) (_result *InvokeThingsServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InvokeThingsServiceResponse{}
	_body, _err := client.InvokeThingsServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetDeviceGroupTagsWithOptions(request *SetDeviceGroupTagsRequest, runtime *util.RuntimeOptions) (_result *SetDeviceGroupTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetDeviceGroupTagsResponse{}
	_body, _err := client.DoRequest(tea.String("SetDeviceGroupTags"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetDeviceGroupTags(request *SetDeviceGroupTagsRequest) (_result *SetDeviceGroupTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDeviceGroupTagsResponse{}
	_body, _err := client.SetDeviceGroupTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryAppDeviceListWithOptions(request *QueryAppDeviceListRequest, runtime *util.RuntimeOptions) (_result *QueryAppDeviceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryAppDeviceListResponse{}
	_body, _err := client.DoRequest(tea.String("QueryAppDeviceList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryAppDeviceList(request *QueryAppDeviceListRequest) (_result *QueryAppDeviceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAppDeviceListResponse{}
	_body, _err := client.QueryAppDeviceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDeviceGroupWithOptions(request *UpdateDeviceGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateDeviceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDeviceGroupResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateDeviceGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDeviceGroup(request *UpdateDeviceGroupRequest) (_result *UpdateDeviceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDeviceGroupResponse{}
	_body, _err := client.UpdateDeviceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceGroupTagListWithOptions(request *QueryDeviceGroupTagListRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceGroupTagListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceGroupTagListResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceGroupTagList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceGroupTagList(request *QueryDeviceGroupTagListRequest) (_result *QueryDeviceGroupTagListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceGroupTagListResponse{}
	_body, _err := client.QueryDeviceGroupTagListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceGroupListWithOptions(request *QueryDeviceGroupListRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceGroupListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceGroupListResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceGroupList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceGroupList(request *QueryDeviceGroupListRequest) (_result *QueryDeviceGroupListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceGroupListResponse{}
	_body, _err := client.QueryDeviceGroupListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceGroupInfoWithOptions(request *QueryDeviceGroupInfoRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceGroupInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceGroupInfoResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceGroupInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceGroupInfo(request *QueryDeviceGroupInfoRequest) (_result *QueryDeviceGroupInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceGroupInfoResponse{}
	_body, _err := client.QueryDeviceGroupInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceGroupByDeviceWithOptions(request *QueryDeviceGroupByDeviceRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceGroupByDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceGroupByDeviceResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceGroupByDevice"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceGroupByDevice(request *QueryDeviceGroupByDeviceRequest) (_result *QueryDeviceGroupByDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceGroupByDeviceResponse{}
	_body, _err := client.QueryDeviceGroupByDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDeviceGroupWithOptions(request *DeleteDeviceGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteDeviceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDeviceGroupResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteDeviceGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDeviceGroup(request *DeleteDeviceGroupRequest) (_result *DeleteDeviceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDeviceGroupResponse{}
	_body, _err := client.DeleteDeviceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDeviceGroupWithOptions(request *CreateDeviceGroupRequest, runtime *util.RuntimeOptions) (_result *CreateDeviceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDeviceGroupResponse{}
	_body, _err := client.DoRequest(tea.String("CreateDeviceGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDeviceGroup(request *CreateDeviceGroupRequest) (_result *CreateDeviceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDeviceGroupResponse{}
	_body, _err := client.CreateDeviceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchDeleteDeviceGroupRelationsWithOptions(request *BatchDeleteDeviceGroupRelationsRequest, runtime *util.RuntimeOptions) (_result *BatchDeleteDeviceGroupRelationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchDeleteDeviceGroupRelationsResponse{}
	_body, _err := client.DoRequest(tea.String("BatchDeleteDeviceGroupRelations"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchDeleteDeviceGroupRelations(request *BatchDeleteDeviceGroupRelationsRequest) (_result *BatchDeleteDeviceGroupRelationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchDeleteDeviceGroupRelationsResponse{}
	_body, _err := client.BatchDeleteDeviceGroupRelationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchAddDeviceGroupRelationsWithOptions(request *BatchAddDeviceGroupRelationsRequest, runtime *util.RuntimeOptions) (_result *BatchAddDeviceGroupRelationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchAddDeviceGroupRelationsResponse{}
	_body, _err := client.DoRequest(tea.String("BatchAddDeviceGroupRelations"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchAddDeviceGroupRelations(request *BatchAddDeviceGroupRelationsRequest) (_result *BatchAddDeviceGroupRelationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchAddDeviceGroupRelationsResponse{}
	_body, _err := client.BatchAddDeviceGroupRelationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RRpcWithOptions(request *RRpcRequest, runtime *util.RuntimeOptions) (_result *RRpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RRpcResponse{}
	_body, _err := client.DoRequest(tea.String("RRpc"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RRpc(request *RRpcRequest) (_result *RRpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RRpcResponse{}
	_body, _err := client.RRpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryPageByApplyIdWithOptions(request *QueryPageByApplyIdRequest, runtime *util.RuntimeOptions) (_result *QueryPageByApplyIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryPageByApplyIdResponse{}
	_body, _err := client.DoRequest(tea.String("QueryPageByApplyId"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryPageByApplyId(request *QueryPageByApplyIdRequest) (_result *QueryPageByApplyIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPageByApplyIdResponse{}
	_body, _err := client.QueryPageByApplyIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceWithOptions(request *QueryDeviceRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDevice"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDevice(request *QueryDeviceRequest) (_result *QueryDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceResponse{}
	_body, _err := client.QueryDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveDevicePropWithOptions(request *SaveDevicePropRequest, runtime *util.RuntimeOptions) (_result *SaveDevicePropResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SaveDevicePropResponse{}
	_body, _err := client.DoRequest(tea.String("SaveDeviceProp"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveDeviceProp(request *SaveDevicePropRequest) (_result *SaveDevicePropResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveDevicePropResponse{}
	_body, _err := client.SaveDevicePropWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTopicRouteTableWithOptions(request *QueryTopicRouteTableRequest, runtime *util.RuntimeOptions) (_result *QueryTopicRouteTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTopicRouteTableResponse{}
	_body, _err := client.DoRequest(tea.String("QueryTopicRouteTable"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTopicRouteTable(request *QueryTopicRouteTableRequest) (_result *QueryTopicRouteTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTopicRouteTableResponse{}
	_body, _err := client.QueryTopicRouteTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTopicReverseRouteTableWithOptions(request *QueryTopicReverseRouteTableRequest, runtime *util.RuntimeOptions) (_result *QueryTopicReverseRouteTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryTopicReverseRouteTableResponse{}
	_body, _err := client.DoRequest(tea.String("QueryTopicReverseRouteTable"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTopicReverseRouteTable(request *QueryTopicReverseRouteTableRequest) (_result *QueryTopicReverseRouteTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTopicReverseRouteTableResponse{}
	_body, _err := client.QueryTopicReverseRouteTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PubBroadcastWithOptions(request *PubBroadcastRequest, runtime *util.RuntimeOptions) (_result *PubBroadcastResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PubBroadcastResponse{}
	_body, _err := client.DoRequest(tea.String("PubBroadcast"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PubBroadcast(request *PubBroadcastRequest) (_result *PubBroadcastResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PubBroadcastResponse{}
	_body, _err := client.PubBroadcastWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteTopicRouteTableWithOptions(request *DeleteTopicRouteTableRequest, runtime *util.RuntimeOptions) (_result *DeleteTopicRouteTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteTopicRouteTableResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteTopicRouteTable"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteTopicRouteTable(request *DeleteTopicRouteTableRequest) (_result *DeleteTopicRouteTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTopicRouteTableResponse{}
	_body, _err := client.DeleteTopicRouteTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDevicePropWithOptions(request *DeleteDevicePropRequest, runtime *util.RuntimeOptions) (_result *DeleteDevicePropResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDevicePropResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteDeviceProp"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDeviceProp(request *DeleteDevicePropRequest) (_result *DeleteDevicePropResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDevicePropResponse{}
	_body, _err := client.DeleteDevicePropWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateTopicRouteTableWithOptions(request *CreateTopicRouteTableRequest, runtime *util.RuntimeOptions) (_result *CreateTopicRouteTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateTopicRouteTableResponse{}
	_body, _err := client.DoRequest(tea.String("CreateTopicRouteTable"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateTopicRouteTable(request *CreateTopicRouteTableRequest) (_result *CreateTopicRouteTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTopicRouteTableResponse{}
	_body, _err := client.CreateTopicRouteTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetDeviceStateWithOptions(request *BatchGetDeviceStateRequest, runtime *util.RuntimeOptions) (_result *BatchGetDeviceStateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchGetDeviceStateResponse{}
	_body, _err := client.DoRequest(tea.String("BatchGetDeviceState"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetDeviceState(request *BatchGetDeviceStateRequest) (_result *BatchGetDeviceStateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetDeviceStateResponse{}
	_body, _err := client.BatchGetDeviceStateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateRuleActionWithOptions(request *UpdateRuleActionRequest, runtime *util.RuntimeOptions) (_result *UpdateRuleActionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateRuleActionResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateRuleAction"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateRuleAction(request *UpdateRuleActionRequest) (_result *UpdateRuleActionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateRuleActionResponse{}
	_body, _err := client.UpdateRuleActionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateRuleWithOptions(request *UpdateRuleRequest, runtime *util.RuntimeOptions) (_result *UpdateRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateRuleResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateRule(request *UpdateRuleRequest) (_result *UpdateRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateRuleResponse{}
	_body, _err := client.UpdateRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateProductTopicWithOptions(request *UpdateProductTopicRequest, runtime *util.RuntimeOptions) (_result *UpdateProductTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateProductTopicResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateProductTopic"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateProductTopic(request *UpdateProductTopicRequest) (_result *UpdateProductTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateProductTopicResponse{}
	_body, _err := client.UpdateProductTopicWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDeviceShadowWithOptions(request *UpdateDeviceShadowRequest, runtime *util.RuntimeOptions) (_result *UpdateDeviceShadowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDeviceShadowResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateDeviceShadow"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDeviceShadow(request *UpdateDeviceShadowRequest) (_result *UpdateDeviceShadowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDeviceShadowResponse{}
	_body, _err := client.UpdateDeviceShadowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopRuleWithOptions(request *StopRuleRequest, runtime *util.RuntimeOptions) (_result *StopRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StopRuleResponse{}
	_body, _err := client.DoRequest(tea.String("StopRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopRule(request *StopRuleRequest) (_result *StopRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopRuleResponse{}
	_body, _err := client.StopRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartRuleWithOptions(request *StartRuleRequest, runtime *util.RuntimeOptions) (_result *StartRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartRuleResponse{}
	_body, _err := client.DoRequest(tea.String("StartRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartRule(request *StartRuleRequest) (_result *StartRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartRuleResponse{}
	_body, _err := client.StartRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryProductTopicWithOptions(request *QueryProductTopicRequest, runtime *util.RuntimeOptions) (_result *QueryProductTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryProductTopicResponse{}
	_body, _err := client.DoRequest(tea.String("QueryProductTopic"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryProductTopic(request *QueryProductTopicRequest) (_result *QueryProductTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryProductTopicResponse{}
	_body, _err := client.QueryProductTopicWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDevicePropWithOptions(request *QueryDevicePropRequest, runtime *util.RuntimeOptions) (_result *QueryDevicePropResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDevicePropResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceProp"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceProp(request *QueryDevicePropRequest) (_result *QueryDevicePropResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDevicePropResponse{}
	_body, _err := client.QueryDevicePropWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PubWithOptions(request *PubRequest, runtime *util.RuntimeOptions) (_result *PubResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PubResponse{}
	_body, _err := client.DoRequest(tea.String("Pub"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) Pub(request *PubRequest) (_result *PubResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PubResponse{}
	_body, _err := client.PubWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRuleActionsWithOptions(request *ListRuleActionsRequest, runtime *util.RuntimeOptions) (_result *ListRuleActionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListRuleActionsResponse{}
	_body, _err := client.DoRequest(tea.String("ListRuleActions"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRuleActions(request *ListRuleActionsRequest) (_result *ListRuleActionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRuleActionsResponse{}
	_body, _err := client.ListRuleActionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRuleWithOptions(request *ListRuleRequest, runtime *util.RuntimeOptions) (_result *ListRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListRuleResponse{}
	_body, _err := client.DoRequest(tea.String("ListRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRule(request *ListRuleRequest) (_result *ListRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRuleResponse{}
	_body, _err := client.ListRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRuleActionWithOptions(request *GetRuleActionRequest, runtime *util.RuntimeOptions) (_result *GetRuleActionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetRuleActionResponse{}
	_body, _err := client.DoRequest(tea.String("GetRuleAction"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRuleAction(request *GetRuleActionRequest) (_result *GetRuleActionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRuleActionResponse{}
	_body, _err := client.GetRuleActionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRuleWithOptions(request *GetRuleRequest, runtime *util.RuntimeOptions) (_result *GetRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetRuleResponse{}
	_body, _err := client.DoRequest(tea.String("GetRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRule(request *GetRuleRequest) (_result *GetRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRuleResponse{}
	_body, _err := client.GetRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDeviceShadowWithOptions(request *GetDeviceShadowRequest, runtime *util.RuntimeOptions) (_result *GetDeviceShadowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDeviceShadowResponse{}
	_body, _err := client.DoRequest(tea.String("GetDeviceShadow"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDeviceShadow(request *GetDeviceShadowRequest) (_result *GetDeviceShadowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDeviceShadowResponse{}
	_body, _err := client.GetDeviceShadowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRuleActionWithOptions(request *DeleteRuleActionRequest, runtime *util.RuntimeOptions) (_result *DeleteRuleActionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteRuleActionResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteRuleAction"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRuleAction(request *DeleteRuleActionRequest) (_result *DeleteRuleActionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRuleActionResponse{}
	_body, _err := client.DeleteRuleActionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRuleWithOptions(request *DeleteRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteRuleResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRule(request *DeleteRuleRequest) (_result *DeleteRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRuleResponse{}
	_body, _err := client.DeleteRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteProductTopicWithOptions(request *DeleteProductTopicRequest, runtime *util.RuntimeOptions) (_result *DeleteProductTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteProductTopicResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteProductTopic"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteProductTopic(request *DeleteProductTopicRequest) (_result *DeleteProductTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteProductTopicResponse{}
	_body, _err := client.DeleteProductTopicWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRuleActionWithOptions(request *CreateRuleActionRequest, runtime *util.RuntimeOptions) (_result *CreateRuleActionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateRuleActionResponse{}
	_body, _err := client.DoRequest(tea.String("CreateRuleAction"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRuleAction(request *CreateRuleActionRequest) (_result *CreateRuleActionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRuleActionResponse{}
	_body, _err := client.CreateRuleActionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRuleWithOptions(request *CreateRuleRequest, runtime *util.RuntimeOptions) (_result *CreateRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateRuleResponse{}
	_body, _err := client.DoRequest(tea.String("CreateRule"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRule(request *CreateRuleRequest) (_result *CreateRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRuleResponse{}
	_body, _err := client.CreateRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateProductTopicWithOptions(request *CreateProductTopicRequest, runtime *util.RuntimeOptions) (_result *CreateProductTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateProductTopicResponse{}
	_body, _err := client.DoRequest(tea.String("CreateProductTopic"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateProductTopic(request *CreateProductTopicRequest) (_result *CreateProductTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProductTopicResponse{}
	_body, _err := client.CreateProductTopicWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryBatchRegisterDeviceStatusWithOptions(request *QueryBatchRegisterDeviceStatusRequest, runtime *util.RuntimeOptions) (_result *QueryBatchRegisterDeviceStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryBatchRegisterDeviceStatusResponse{}
	_body, _err := client.DoRequest(tea.String("QueryBatchRegisterDeviceStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryBatchRegisterDeviceStatus(request *QueryBatchRegisterDeviceStatusRequest) (_result *QueryBatchRegisterDeviceStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryBatchRegisterDeviceStatusResponse{}
	_body, _err := client.QueryBatchRegisterDeviceStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetGatewayBySubDeviceWithOptions(request *GetGatewayBySubDeviceRequest, runtime *util.RuntimeOptions) (_result *GetGatewayBySubDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetGatewayBySubDeviceResponse{}
	_body, _err := client.DoRequest(tea.String("GetGatewayBySubDevice"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetGatewayBySubDevice(request *GetGatewayBySubDeviceRequest) (_result *GetGatewayBySubDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetGatewayBySubDeviceResponse{}
	_body, _err := client.GetGatewayBySubDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetThingWithOptions(request *ResetThingRequest, runtime *util.RuntimeOptions) (_result *ResetThingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ResetThingResponse{}
	_body, _err := client.DoRequest(tea.String("ResetThing"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetThing(request *ResetThingRequest) (_result *ResetThingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetThingResponse{}
	_body, _err := client.ResetThingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveThingTopoWithOptions(request *RemoveThingTopoRequest, runtime *util.RuntimeOptions) (_result *RemoveThingTopoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveThingTopoResponse{}
	_body, _err := client.DoRequest(tea.String("RemoveThingTopo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveThingTopo(request *RemoveThingTopoRequest) (_result *RemoveThingTopoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveThingTopoResponse{}
	_body, _err := client.RemoveThingTopoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) NotifyAddThingTopoWithOptions(request *NotifyAddThingTopoRequest, runtime *util.RuntimeOptions) (_result *NotifyAddThingTopoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &NotifyAddThingTopoResponse{}
	_body, _err := client.DoRequest(tea.String("NotifyAddThingTopo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) NotifyAddThingTopo(request *NotifyAddThingTopoRequest) (_result *NotifyAddThingTopoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &NotifyAddThingTopoResponse{}
	_body, _err := client.NotifyAddThingTopoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetThingTopoWithOptions(request *GetThingTopoRequest, runtime *util.RuntimeOptions) (_result *GetThingTopoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetThingTopoResponse{}
	_body, _err := client.DoRequest(tea.String("GetThingTopo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetThingTopo(request *GetThingTopoRequest) (_result *GetThingTopoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetThingTopoResponse{}
	_body, _err := client.GetThingTopoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDevicePropertyStatusWithOptions(request *QueryDevicePropertyStatusRequest, runtime *util.RuntimeOptions) (_result *QueryDevicePropertyStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDevicePropertyStatusResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDevicePropertyStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDevicePropertyStatus(request *QueryDevicePropertyStatusRequest) (_result *QueryDevicePropertyStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDevicePropertyStatusResponse{}
	_body, _err := client.QueryDevicePropertyStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDevicePropertyDataWithOptions(request *QueryDevicePropertyDataRequest, runtime *util.RuntimeOptions) (_result *QueryDevicePropertyDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDevicePropertyDataResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDevicePropertyData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDevicePropertyData(request *QueryDevicePropertyDataRequest) (_result *QueryDevicePropertyDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDevicePropertyDataResponse{}
	_body, _err := client.QueryDevicePropertyDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchRegisterDeviceWithApplyIdWithOptions(request *BatchRegisterDeviceWithApplyIdRequest, runtime *util.RuntimeOptions) (_result *BatchRegisterDeviceWithApplyIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchRegisterDeviceWithApplyIdResponse{}
	_body, _err := client.DoRequest(tea.String("BatchRegisterDeviceWithApplyId"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchRegisterDeviceWithApplyId(request *BatchRegisterDeviceWithApplyIdRequest) (_result *BatchRegisterDeviceWithApplyIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchRegisterDeviceWithApplyIdResponse{}
	_body, _err := client.BatchRegisterDeviceWithApplyIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchRegisterDeviceWithOptions(request *BatchRegisterDeviceRequest, runtime *util.RuntimeOptions) (_result *BatchRegisterDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchRegisterDeviceResponse{}
	_body, _err := client.DoRequest(tea.String("BatchRegisterDevice"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchRegisterDevice(request *BatchRegisterDeviceRequest) (_result *BatchRegisterDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchRegisterDeviceResponse{}
	_body, _err := client.BatchRegisterDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchCheckDeviceNamesWithOptions(request *BatchCheckDeviceNamesRequest, runtime *util.RuntimeOptions) (_result *BatchCheckDeviceNamesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BatchCheckDeviceNamesResponse{}
	_body, _err := client.DoRequest(tea.String("BatchCheckDeviceNames"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchCheckDeviceNames(request *BatchCheckDeviceNamesRequest) (_result *BatchCheckDeviceNamesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchCheckDeviceNamesResponse{}
	_body, _err := client.BatchCheckDeviceNamesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateProductWithOptions(request *UpdateProductRequest, runtime *util.RuntimeOptions) (_result *UpdateProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateProductResponse{}
	_body, _err := client.DoRequest(tea.String("UpdateProduct"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateProduct(request *UpdateProductRequest) (_result *UpdateProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateProductResponse{}
	_body, _err := client.UpdateProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetDevicePropertyWithOptions(request *SetDevicePropertyRequest, runtime *util.RuntimeOptions) (_result *SetDevicePropertyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SetDevicePropertyResponse{}
	_body, _err := client.DoRequest(tea.String("SetDeviceProperty"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetDeviceProperty(request *SetDevicePropertyRequest) (_result *SetDevicePropertyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDevicePropertyResponse{}
	_body, _err := client.SetDevicePropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RegisterDeviceWithOptions(request *RegisterDeviceRequest, runtime *util.RuntimeOptions) (_result *RegisterDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RegisterDeviceResponse{}
	_body, _err := client.DoRequest(tea.String("RegisterDevice"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RegisterDevice(request *RegisterDeviceRequest) (_result *RegisterDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RegisterDeviceResponse{}
	_body, _err := client.RegisterDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryProductListWithOptions(request *QueryProductListRequest, runtime *util.RuntimeOptions) (_result *QueryProductListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryProductListResponse{}
	_body, _err := client.DoRequest(tea.String("QueryProductList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryProductList(request *QueryProductListRequest) (_result *QueryProductListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryProductListResponse{}
	_body, _err := client.QueryProductListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryProductWithOptions(request *QueryProductRequest, runtime *util.RuntimeOptions) (_result *QueryProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryProductResponse{}
	_body, _err := client.DoRequest(tea.String("QueryProduct"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryProduct(request *QueryProductRequest) (_result *QueryProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryProductResponse{}
	_body, _err := client.QueryProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceStatisticsWithOptions(request *QueryDeviceStatisticsRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceStatisticsResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceStatistics"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceStatistics(request *QueryDeviceStatisticsRequest) (_result *QueryDeviceStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceStatisticsResponse{}
	_body, _err := client.QueryDeviceStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceServiceDataWithOptions(request *QueryDeviceServiceDataRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceServiceDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceServiceDataResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceServiceData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceServiceData(request *QueryDeviceServiceDataRequest) (_result *QueryDeviceServiceDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceServiceDataResponse{}
	_body, _err := client.QueryDeviceServiceDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceEventDataWithOptions(request *QueryDeviceEventDataRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceEventDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceEventDataResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceEventData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceEventData(request *QueryDeviceEventDataRequest) (_result *QueryDeviceEventDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceEventDataResponse{}
	_body, _err := client.QueryDeviceEventDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceDetailWithOptions(request *QueryDeviceDetailRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryDeviceDetailResponse{}
	_body, _err := client.DoRequest(tea.String("QueryDeviceDetail"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceDetail(request *QueryDeviceDetailRequest) (_result *QueryDeviceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceDetailResponse{}
	_body, _err := client.QueryDeviceDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InvokeThingServiceWithOptions(request *InvokeThingServiceRequest, runtime *util.RuntimeOptions) (_result *InvokeThingServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InvokeThingServiceResponse{}
	_body, _err := client.DoRequest(tea.String("InvokeThingService"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InvokeThingService(request *InvokeThingServiceRequest) (_result *InvokeThingServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InvokeThingServiceResponse{}
	_body, _err := client.InvokeThingServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDeviceStatusWithOptions(request *GetDeviceStatusRequest, runtime *util.RuntimeOptions) (_result *GetDeviceStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDeviceStatusResponse{}
	_body, _err := client.DoRequest(tea.String("GetDeviceStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDeviceStatus(request *GetDeviceStatusRequest) (_result *GetDeviceStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDeviceStatusResponse{}
	_body, _err := client.GetDeviceStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableThingWithOptions(request *EnableThingRequest, runtime *util.RuntimeOptions) (_result *EnableThingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnableThingResponse{}
	_body, _err := client.DoRequest(tea.String("EnableThing"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableThing(request *EnableThingRequest) (_result *EnableThingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableThingResponse{}
	_body, _err := client.EnableThingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableThingWithOptions(request *DisableThingRequest, runtime *util.RuntimeOptions) (_result *DisableThingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DisableThingResponse{}
	_body, _err := client.DoRequest(tea.String("DisableThing"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableThing(request *DisableThingRequest) (_result *DisableThingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableThingResponse{}
	_body, _err := client.DisableThingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteProductWithOptions(request *DeleteProductRequest, runtime *util.RuntimeOptions) (_result *DeleteProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteProductResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteProduct"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteProduct(request *DeleteProductRequest) (_result *DeleteProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteProductResponse{}
	_body, _err := client.DeleteProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDeviceWithOptions(request *DeleteDeviceRequest, runtime *util.RuntimeOptions) (_result *DeleteDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDeviceResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteDevice"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDevice(request *DeleteDeviceRequest) (_result *DeleteDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDeviceResponse{}
	_body, _err := client.DeleteDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateProductWithOptions(request *CreateProductRequest, runtime *util.RuntimeOptions) (_result *CreateProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateProductResponse{}
	_body, _err := client.DoRequest(tea.String("CreateProduct"), tea.String("HTTPS"), tea.String("POST"), tea.String("2018-01-20"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateProduct(request *CreateProductRequest) (_result *CreateProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProductResponse{}
	_body, _err := client.CreateProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
