// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
)

type BatchAddDeviceGroupRelationsRequest struct {
	ApiProduct        *string                                      `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string                                      `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string                                      `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId           *string                                      `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Device            []*BatchAddDeviceGroupRelationsRequestDevice `json:"Device,omitempty" xml:"Device,omitempty" type:"Repeated"`
	RealTenantId      *string                                      `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string                                      `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s BatchAddDeviceGroupRelationsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchAddDeviceGroupRelationsRequest) GoString() string {
	return s.String()
}

func (s *BatchAddDeviceGroupRelationsRequest) SetApiProduct(v string) *BatchAddDeviceGroupRelationsRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsRequest) SetApiRevision(v string) *BatchAddDeviceGroupRelationsRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsRequest) SetIotInstanceId(v string) *BatchAddDeviceGroupRelationsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsRequest) SetGroupId(v string) *BatchAddDeviceGroupRelationsRequest {
	s.GroupId = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsRequest) SetDevice(v []*BatchAddDeviceGroupRelationsRequestDevice) *BatchAddDeviceGroupRelationsRequest {
	s.Device = v
	return s
}

func (s *BatchAddDeviceGroupRelationsRequest) SetRealTenantId(v string) *BatchAddDeviceGroupRelationsRequest {
	s.RealTenantId = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsRequest) SetRealTripartiteKey(v string) *BatchAddDeviceGroupRelationsRequest {
	s.RealTripartiteKey = &v
	return s
}

type BatchAddDeviceGroupRelationsRequestDevice struct {
	ProductKey *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
}

func (s BatchAddDeviceGroupRelationsRequestDevice) String() string {
	return tea.Prettify(s)
}

func (s BatchAddDeviceGroupRelationsRequestDevice) GoString() string {
	return s.String()
}

func (s *BatchAddDeviceGroupRelationsRequestDevice) SetProductKey(v string) *BatchAddDeviceGroupRelationsRequestDevice {
	s.ProductKey = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsRequestDevice) SetDeviceName(v string) *BatchAddDeviceGroupRelationsRequestDevice {
	s.DeviceName = &v
	return s
}

type BatchAddDeviceGroupRelationsResponseBody struct {
	RequestId                      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code                           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ValidDeviceCount               *int32  `json:"ValidDeviceCount,omitempty" xml:"ValidDeviceCount,omitempty"`
	ExceedTenGroupDeviceCount      *int32  `json:"ExceedTenGroupDeviceCount,omitempty" xml:"ExceedTenGroupDeviceCount,omitempty"`
	AlreadyRelatedGroupDeviceCount *int32  `json:"AlreadyRelatedGroupDeviceCount,omitempty" xml:"AlreadyRelatedGroupDeviceCount,omitempty"`
	SuccessAddedDeviceCount        *int32  `json:"SuccessAddedDeviceCount,omitempty" xml:"SuccessAddedDeviceCount,omitempty"`
	ErrorMessage                   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s BatchAddDeviceGroupRelationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchAddDeviceGroupRelationsResponseBody) GoString() string {
	return s.String()
}

func (s *BatchAddDeviceGroupRelationsResponseBody) SetRequestId(v string) *BatchAddDeviceGroupRelationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsResponseBody) SetSuccess(v bool) *BatchAddDeviceGroupRelationsResponseBody {
	s.Success = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsResponseBody) SetCode(v string) *BatchAddDeviceGroupRelationsResponseBody {
	s.Code = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsResponseBody) SetValidDeviceCount(v int32) *BatchAddDeviceGroupRelationsResponseBody {
	s.ValidDeviceCount = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsResponseBody) SetExceedTenGroupDeviceCount(v int32) *BatchAddDeviceGroupRelationsResponseBody {
	s.ExceedTenGroupDeviceCount = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsResponseBody) SetAlreadyRelatedGroupDeviceCount(v int32) *BatchAddDeviceGroupRelationsResponseBody {
	s.AlreadyRelatedGroupDeviceCount = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsResponseBody) SetSuccessAddedDeviceCount(v int32) *BatchAddDeviceGroupRelationsResponseBody {
	s.SuccessAddedDeviceCount = &v
	return s
}

func (s *BatchAddDeviceGroupRelationsResponseBody) SetErrorMessage(v string) *BatchAddDeviceGroupRelationsResponseBody {
	s.ErrorMessage = &v
	return s
}

type BatchAddDeviceGroupRelationsResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchAddDeviceGroupRelationsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchAddDeviceGroupRelationsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchAddDeviceGroupRelationsResponse) GoString() string {
	return s.String()
}

func (s *BatchAddDeviceGroupRelationsResponse) SetHeaders(v map[string]*string) *BatchAddDeviceGroupRelationsResponse {
	s.Headers = v
	return s
}

func (s *BatchAddDeviceGroupRelationsResponse) SetBody(v *BatchAddDeviceGroupRelationsResponseBody) *BatchAddDeviceGroupRelationsResponse {
	s.Body = v
	return s
}

type BatchAddThingTopoRequest struct {
	ApiProduct    *string                                `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string                                `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string                                `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	TopoAddItem   []*BatchAddThingTopoRequestTopoAddItem `json:"TopoAddItem,omitempty" xml:"TopoAddItem,omitempty" type:"Repeated"`
	GwProductKey  *string                                `json:"GwProductKey,omitempty" xml:"GwProductKey,omitempty"`
	Ext           *string                                `json:"Ext,omitempty" xml:"Ext,omitempty"`
	GwDeviceName  *string                                `json:"GwDeviceName,omitempty" xml:"GwDeviceName,omitempty"`
}

func (s BatchAddThingTopoRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchAddThingTopoRequest) GoString() string {
	return s.String()
}

func (s *BatchAddThingTopoRequest) SetApiProduct(v string) *BatchAddThingTopoRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchAddThingTopoRequest) SetApiRevision(v string) *BatchAddThingTopoRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchAddThingTopoRequest) SetIotInstanceId(v string) *BatchAddThingTopoRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchAddThingTopoRequest) SetTopoAddItem(v []*BatchAddThingTopoRequestTopoAddItem) *BatchAddThingTopoRequest {
	s.TopoAddItem = v
	return s
}

func (s *BatchAddThingTopoRequest) SetGwProductKey(v string) *BatchAddThingTopoRequest {
	s.GwProductKey = &v
	return s
}

func (s *BatchAddThingTopoRequest) SetExt(v string) *BatchAddThingTopoRequest {
	s.Ext = &v
	return s
}

func (s *BatchAddThingTopoRequest) SetGwDeviceName(v string) *BatchAddThingTopoRequest {
	s.GwDeviceName = &v
	return s
}

type BatchAddThingTopoRequestTopoAddItem struct {
	ProductKey *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	Sign       *string `json:"Sign,omitempty" xml:"Sign,omitempty"`
	SignMethod *string `json:"SignMethod,omitempty" xml:"SignMethod,omitempty"`
	Timestamp  *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	ClientId   *string `json:"ClientId,omitempty" xml:"ClientId,omitempty"`
}

func (s BatchAddThingTopoRequestTopoAddItem) String() string {
	return tea.Prettify(s)
}

func (s BatchAddThingTopoRequestTopoAddItem) GoString() string {
	return s.String()
}

func (s *BatchAddThingTopoRequestTopoAddItem) SetProductKey(v string) *BatchAddThingTopoRequestTopoAddItem {
	s.ProductKey = &v
	return s
}

func (s *BatchAddThingTopoRequestTopoAddItem) SetDeviceName(v string) *BatchAddThingTopoRequestTopoAddItem {
	s.DeviceName = &v
	return s
}

func (s *BatchAddThingTopoRequestTopoAddItem) SetSign(v string) *BatchAddThingTopoRequestTopoAddItem {
	s.Sign = &v
	return s
}

func (s *BatchAddThingTopoRequestTopoAddItem) SetSignMethod(v string) *BatchAddThingTopoRequestTopoAddItem {
	s.SignMethod = &v
	return s
}

func (s *BatchAddThingTopoRequestTopoAddItem) SetTimestamp(v string) *BatchAddThingTopoRequestTopoAddItem {
	s.Timestamp = &v
	return s
}

func (s *BatchAddThingTopoRequestTopoAddItem) SetClientId(v string) *BatchAddThingTopoRequestTopoAddItem {
	s.ClientId = &v
	return s
}

type BatchAddThingTopoResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s BatchAddThingTopoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchAddThingTopoResponseBody) GoString() string {
	return s.String()
}

func (s *BatchAddThingTopoResponseBody) SetRequestId(v string) *BatchAddThingTopoResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchAddThingTopoResponseBody) SetSuccess(v bool) *BatchAddThingTopoResponseBody {
	s.Success = &v
	return s
}

func (s *BatchAddThingTopoResponseBody) SetCode(v string) *BatchAddThingTopoResponseBody {
	s.Code = &v
	return s
}

func (s *BatchAddThingTopoResponseBody) SetErrorMessage(v string) *BatchAddThingTopoResponseBody {
	s.ErrorMessage = &v
	return s
}

type BatchAddThingTopoResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchAddThingTopoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchAddThingTopoResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchAddThingTopoResponse) GoString() string {
	return s.String()
}

func (s *BatchAddThingTopoResponse) SetHeaders(v map[string]*string) *BatchAddThingTopoResponse {
	s.Headers = v
	return s
}

func (s *BatchAddThingTopoResponse) SetBody(v *BatchAddThingTopoResponseBody) *BatchAddThingTopoResponse {
	s.Body = v
	return s
}

type BatchBindDeviceToEdgeInstanceWithDriverRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DriverId      *string   `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	IotIds        []*string `json:"IotIds,omitempty" xml:"IotIds,omitempty" type:"Repeated"`
}

func (s BatchBindDeviceToEdgeInstanceWithDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchBindDeviceToEdgeInstanceWithDriverRequest) GoString() string {
	return s.String()
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverRequest) SetApiProduct(v string) *BatchBindDeviceToEdgeInstanceWithDriverRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverRequest) SetApiRevision(v string) *BatchBindDeviceToEdgeInstanceWithDriverRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverRequest) SetIotInstanceId(v string) *BatchBindDeviceToEdgeInstanceWithDriverRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverRequest) SetInstanceId(v string) *BatchBindDeviceToEdgeInstanceWithDriverRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverRequest) SetDriverId(v string) *BatchBindDeviceToEdgeInstanceWithDriverRequest {
	s.DriverId = &v
	return s
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverRequest) SetIotIds(v []*string) *BatchBindDeviceToEdgeInstanceWithDriverRequest {
	s.IotIds = v
	return s
}

type BatchBindDeviceToEdgeInstanceWithDriverResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s BatchBindDeviceToEdgeInstanceWithDriverResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchBindDeviceToEdgeInstanceWithDriverResponseBody) GoString() string {
	return s.String()
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverResponseBody) SetRequestId(v string) *BatchBindDeviceToEdgeInstanceWithDriverResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverResponseBody) SetSuccess(v bool) *BatchBindDeviceToEdgeInstanceWithDriverResponseBody {
	s.Success = &v
	return s
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverResponseBody) SetCode(v string) *BatchBindDeviceToEdgeInstanceWithDriverResponseBody {
	s.Code = &v
	return s
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverResponseBody) SetErrorMessage(v string) *BatchBindDeviceToEdgeInstanceWithDriverResponseBody {
	s.ErrorMessage = &v
	return s
}

type BatchBindDeviceToEdgeInstanceWithDriverResponse struct {
	Headers map[string]*string                                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchBindDeviceToEdgeInstanceWithDriverResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchBindDeviceToEdgeInstanceWithDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchBindDeviceToEdgeInstanceWithDriverResponse) GoString() string {
	return s.String()
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverResponse) SetHeaders(v map[string]*string) *BatchBindDeviceToEdgeInstanceWithDriverResponse {
	s.Headers = v
	return s
}

func (s *BatchBindDeviceToEdgeInstanceWithDriverResponse) SetBody(v *BatchBindDeviceToEdgeInstanceWithDriverResponseBody) *BatchBindDeviceToEdgeInstanceWithDriverResponse {
	s.Body = v
	return s
}

type BatchCheckDeviceNamesRequest struct {
	ApiProduct        *string                                       `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string                                       `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string                                       `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string                                       `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        []*string                                     `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" type:"Repeated"`
	DeviceNameList    []*BatchCheckDeviceNamesRequestDeviceNameList `json:"DeviceNameList,omitempty" xml:"DeviceNameList,omitempty" type:"Repeated"`
	RealTenantId      *string                                       `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string                                       `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s BatchCheckDeviceNamesRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchCheckDeviceNamesRequest) GoString() string {
	return s.String()
}

func (s *BatchCheckDeviceNamesRequest) SetApiProduct(v string) *BatchCheckDeviceNamesRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchCheckDeviceNamesRequest) SetApiRevision(v string) *BatchCheckDeviceNamesRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchCheckDeviceNamesRequest) SetIotInstanceId(v string) *BatchCheckDeviceNamesRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchCheckDeviceNamesRequest) SetProductKey(v string) *BatchCheckDeviceNamesRequest {
	s.ProductKey = &v
	return s
}

func (s *BatchCheckDeviceNamesRequest) SetDeviceName(v []*string) *BatchCheckDeviceNamesRequest {
	s.DeviceName = v
	return s
}

func (s *BatchCheckDeviceNamesRequest) SetDeviceNameList(v []*BatchCheckDeviceNamesRequestDeviceNameList) *BatchCheckDeviceNamesRequest {
	s.DeviceNameList = v
	return s
}

func (s *BatchCheckDeviceNamesRequest) SetRealTenantId(v string) *BatchCheckDeviceNamesRequest {
	s.RealTenantId = &v
	return s
}

func (s *BatchCheckDeviceNamesRequest) SetRealTripartiteKey(v string) *BatchCheckDeviceNamesRequest {
	s.RealTripartiteKey = &v
	return s
}

type BatchCheckDeviceNamesRequestDeviceNameList struct {
	DeviceName     *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceNickname *string `json:"DeviceNickname,omitempty" xml:"DeviceNickname,omitempty"`
}

func (s BatchCheckDeviceNamesRequestDeviceNameList) String() string {
	return tea.Prettify(s)
}

func (s BatchCheckDeviceNamesRequestDeviceNameList) GoString() string {
	return s.String()
}

func (s *BatchCheckDeviceNamesRequestDeviceNameList) SetDeviceName(v string) *BatchCheckDeviceNamesRequestDeviceNameList {
	s.DeviceName = &v
	return s
}

func (s *BatchCheckDeviceNamesRequestDeviceNameList) SetDeviceNickname(v string) *BatchCheckDeviceNamesRequestDeviceNameList {
	s.DeviceNickname = &v
	return s
}

type BatchCheckDeviceNamesResponseBody struct {
	RequestId    *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *BatchCheckDeviceNamesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s BatchCheckDeviceNamesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchCheckDeviceNamesResponseBody) GoString() string {
	return s.String()
}

func (s *BatchCheckDeviceNamesResponseBody) SetRequestId(v string) *BatchCheckDeviceNamesResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchCheckDeviceNamesResponseBody) SetSuccess(v bool) *BatchCheckDeviceNamesResponseBody {
	s.Success = &v
	return s
}

func (s *BatchCheckDeviceNamesResponseBody) SetCode(v string) *BatchCheckDeviceNamesResponseBody {
	s.Code = &v
	return s
}

func (s *BatchCheckDeviceNamesResponseBody) SetErrorMessage(v string) *BatchCheckDeviceNamesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *BatchCheckDeviceNamesResponseBody) SetData(v *BatchCheckDeviceNamesResponseBodyData) *BatchCheckDeviceNamesResponseBody {
	s.Data = v
	return s
}

type BatchCheckDeviceNamesResponseBodyData struct {
	ApplyId                   *int64                                                          `json:"ApplyId,omitempty" xml:"ApplyId,omitempty"`
	InvalidDeviceNameList     *BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNameList     `json:"InvalidDeviceNameList,omitempty" xml:"InvalidDeviceNameList,omitempty" type:"Struct"`
	InvalidDeviceNicknameList *BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNicknameList `json:"InvalidDeviceNicknameList,omitempty" xml:"InvalidDeviceNicknameList,omitempty" type:"Struct"`
}

func (s BatchCheckDeviceNamesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BatchCheckDeviceNamesResponseBodyData) GoString() string {
	return s.String()
}

func (s *BatchCheckDeviceNamesResponseBodyData) SetApplyId(v int64) *BatchCheckDeviceNamesResponseBodyData {
	s.ApplyId = &v
	return s
}

func (s *BatchCheckDeviceNamesResponseBodyData) SetInvalidDeviceNameList(v *BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNameList) *BatchCheckDeviceNamesResponseBodyData {
	s.InvalidDeviceNameList = v
	return s
}

func (s *BatchCheckDeviceNamesResponseBodyData) SetInvalidDeviceNicknameList(v *BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNicknameList) *BatchCheckDeviceNamesResponseBodyData {
	s.InvalidDeviceNicknameList = v
	return s
}

type BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNameList struct {
	InvalidDeviceName []*string `json:"InvalidDeviceName,omitempty" xml:"InvalidDeviceName,omitempty" type:"Repeated"`
}

func (s BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNameList) String() string {
	return tea.Prettify(s)
}

func (s BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNameList) GoString() string {
	return s.String()
}

func (s *BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNameList) SetInvalidDeviceName(v []*string) *BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNameList {
	s.InvalidDeviceName = v
	return s
}

type BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNicknameList struct {
	InvalidDeviceNickname []*string `json:"InvalidDeviceNickname,omitempty" xml:"InvalidDeviceNickname,omitempty" type:"Repeated"`
}

func (s BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNicknameList) String() string {
	return tea.Prettify(s)
}

func (s BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNicknameList) GoString() string {
	return s.String()
}

func (s *BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNicknameList) SetInvalidDeviceNickname(v []*string) *BatchCheckDeviceNamesResponseBodyDataInvalidDeviceNicknameList {
	s.InvalidDeviceNickname = v
	return s
}

type BatchCheckDeviceNamesResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchCheckDeviceNamesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchCheckDeviceNamesResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchCheckDeviceNamesResponse) GoString() string {
	return s.String()
}

func (s *BatchCheckDeviceNamesResponse) SetHeaders(v map[string]*string) *BatchCheckDeviceNamesResponse {
	s.Headers = v
	return s
}

func (s *BatchCheckDeviceNamesResponse) SetBody(v *BatchCheckDeviceNamesResponseBody) *BatchCheckDeviceNamesResponse {
	s.Body = v
	return s
}

type BatchClearEdgeInstanceDeviceConfigRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IotIds        []*string `json:"IotIds,omitempty" xml:"IotIds,omitempty" type:"Repeated"`
}

func (s BatchClearEdgeInstanceDeviceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchClearEdgeInstanceDeviceConfigRequest) GoString() string {
	return s.String()
}

func (s *BatchClearEdgeInstanceDeviceConfigRequest) SetApiProduct(v string) *BatchClearEdgeInstanceDeviceConfigRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchClearEdgeInstanceDeviceConfigRequest) SetApiRevision(v string) *BatchClearEdgeInstanceDeviceConfigRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchClearEdgeInstanceDeviceConfigRequest) SetIotInstanceId(v string) *BatchClearEdgeInstanceDeviceConfigRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchClearEdgeInstanceDeviceConfigRequest) SetInstanceId(v string) *BatchClearEdgeInstanceDeviceConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchClearEdgeInstanceDeviceConfigRequest) SetIotIds(v []*string) *BatchClearEdgeInstanceDeviceConfigRequest {
	s.IotIds = v
	return s
}

type BatchClearEdgeInstanceDeviceConfigResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s BatchClearEdgeInstanceDeviceConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchClearEdgeInstanceDeviceConfigResponseBody) GoString() string {
	return s.String()
}

func (s *BatchClearEdgeInstanceDeviceConfigResponseBody) SetRequestId(v string) *BatchClearEdgeInstanceDeviceConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchClearEdgeInstanceDeviceConfigResponseBody) SetSuccess(v bool) *BatchClearEdgeInstanceDeviceConfigResponseBody {
	s.Success = &v
	return s
}

func (s *BatchClearEdgeInstanceDeviceConfigResponseBody) SetCode(v string) *BatchClearEdgeInstanceDeviceConfigResponseBody {
	s.Code = &v
	return s
}

func (s *BatchClearEdgeInstanceDeviceConfigResponseBody) SetErrorMessage(v string) *BatchClearEdgeInstanceDeviceConfigResponseBody {
	s.ErrorMessage = &v
	return s
}

type BatchClearEdgeInstanceDeviceConfigResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchClearEdgeInstanceDeviceConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchClearEdgeInstanceDeviceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchClearEdgeInstanceDeviceConfigResponse) GoString() string {
	return s.String()
}

func (s *BatchClearEdgeInstanceDeviceConfigResponse) SetHeaders(v map[string]*string) *BatchClearEdgeInstanceDeviceConfigResponse {
	s.Headers = v
	return s
}

func (s *BatchClearEdgeInstanceDeviceConfigResponse) SetBody(v *BatchClearEdgeInstanceDeviceConfigResponseBody) *BatchClearEdgeInstanceDeviceConfigResponse {
	s.Body = v
	return s
}

type BatchDeleteDeviceGroupRelationsRequest struct {
	ApiProduct        *string                                         `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string                                         `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string                                         `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId           *string                                         `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Device            []*BatchDeleteDeviceGroupRelationsRequestDevice `json:"Device,omitempty" xml:"Device,omitempty" type:"Repeated"`
	RealTenantId      *string                                         `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string                                         `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s BatchDeleteDeviceGroupRelationsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteDeviceGroupRelationsRequest) GoString() string {
	return s.String()
}

func (s *BatchDeleteDeviceGroupRelationsRequest) SetApiProduct(v string) *BatchDeleteDeviceGroupRelationsRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsRequest) SetApiRevision(v string) *BatchDeleteDeviceGroupRelationsRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsRequest) SetIotInstanceId(v string) *BatchDeleteDeviceGroupRelationsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsRequest) SetGroupId(v string) *BatchDeleteDeviceGroupRelationsRequest {
	s.GroupId = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsRequest) SetDevice(v []*BatchDeleteDeviceGroupRelationsRequestDevice) *BatchDeleteDeviceGroupRelationsRequest {
	s.Device = v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsRequest) SetRealTenantId(v string) *BatchDeleteDeviceGroupRelationsRequest {
	s.RealTenantId = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsRequest) SetRealTripartiteKey(v string) *BatchDeleteDeviceGroupRelationsRequest {
	s.RealTripartiteKey = &v
	return s
}

type BatchDeleteDeviceGroupRelationsRequestDevice struct {
	ProductKey *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
}

func (s BatchDeleteDeviceGroupRelationsRequestDevice) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteDeviceGroupRelationsRequestDevice) GoString() string {
	return s.String()
}

func (s *BatchDeleteDeviceGroupRelationsRequestDevice) SetProductKey(v string) *BatchDeleteDeviceGroupRelationsRequestDevice {
	s.ProductKey = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsRequestDevice) SetDeviceName(v string) *BatchDeleteDeviceGroupRelationsRequestDevice {
	s.DeviceName = &v
	return s
}

type BatchDeleteDeviceGroupRelationsResponseBody struct {
	RequestId                      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code                           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage                   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ValidDeviceCount               *int32  `json:"ValidDeviceCount,omitempty" xml:"ValidDeviceCount,omitempty"`
	AlreadyRelatedGroupDeviceCount *int32  `json:"AlreadyRelatedGroupDeviceCount,omitempty" xml:"AlreadyRelatedGroupDeviceCount,omitempty"`
	SuccessDeviceCount             *int32  `json:"SuccessDeviceCount,omitempty" xml:"SuccessDeviceCount,omitempty"`
}

func (s BatchDeleteDeviceGroupRelationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteDeviceGroupRelationsResponseBody) GoString() string {
	return s.String()
}

func (s *BatchDeleteDeviceGroupRelationsResponseBody) SetRequestId(v string) *BatchDeleteDeviceGroupRelationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsResponseBody) SetSuccess(v bool) *BatchDeleteDeviceGroupRelationsResponseBody {
	s.Success = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsResponseBody) SetCode(v string) *BatchDeleteDeviceGroupRelationsResponseBody {
	s.Code = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsResponseBody) SetErrorMessage(v string) *BatchDeleteDeviceGroupRelationsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsResponseBody) SetValidDeviceCount(v int32) *BatchDeleteDeviceGroupRelationsResponseBody {
	s.ValidDeviceCount = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsResponseBody) SetAlreadyRelatedGroupDeviceCount(v int32) *BatchDeleteDeviceGroupRelationsResponseBody {
	s.AlreadyRelatedGroupDeviceCount = &v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsResponseBody) SetSuccessDeviceCount(v int32) *BatchDeleteDeviceGroupRelationsResponseBody {
	s.SuccessDeviceCount = &v
	return s
}

type BatchDeleteDeviceGroupRelationsResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchDeleteDeviceGroupRelationsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchDeleteDeviceGroupRelationsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteDeviceGroupRelationsResponse) GoString() string {
	return s.String()
}

func (s *BatchDeleteDeviceGroupRelationsResponse) SetHeaders(v map[string]*string) *BatchDeleteDeviceGroupRelationsResponse {
	s.Headers = v
	return s
}

func (s *BatchDeleteDeviceGroupRelationsResponse) SetBody(v *BatchDeleteDeviceGroupRelationsResponseBody) *BatchDeleteDeviceGroupRelationsResponse {
	s.Body = v
	return s
}

type BatchDeleteEdgeInstanceChannelRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DriverId      *string   `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	ChannelIds    []*string `json:"ChannelIds,omitempty" xml:"ChannelIds,omitempty" type:"Repeated"`
}

func (s BatchDeleteEdgeInstanceChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteEdgeInstanceChannelRequest) GoString() string {
	return s.String()
}

func (s *BatchDeleteEdgeInstanceChannelRequest) SetApiProduct(v string) *BatchDeleteEdgeInstanceChannelRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchDeleteEdgeInstanceChannelRequest) SetApiRevision(v string) *BatchDeleteEdgeInstanceChannelRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchDeleteEdgeInstanceChannelRequest) SetIotInstanceId(v string) *BatchDeleteEdgeInstanceChannelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchDeleteEdgeInstanceChannelRequest) SetInstanceId(v string) *BatchDeleteEdgeInstanceChannelRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchDeleteEdgeInstanceChannelRequest) SetDriverId(v string) *BatchDeleteEdgeInstanceChannelRequest {
	s.DriverId = &v
	return s
}

func (s *BatchDeleteEdgeInstanceChannelRequest) SetChannelIds(v []*string) *BatchDeleteEdgeInstanceChannelRequest {
	s.ChannelIds = v
	return s
}

type BatchDeleteEdgeInstanceChannelResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s BatchDeleteEdgeInstanceChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteEdgeInstanceChannelResponseBody) GoString() string {
	return s.String()
}

func (s *BatchDeleteEdgeInstanceChannelResponseBody) SetRequestId(v string) *BatchDeleteEdgeInstanceChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchDeleteEdgeInstanceChannelResponseBody) SetSuccess(v bool) *BatchDeleteEdgeInstanceChannelResponseBody {
	s.Success = &v
	return s
}

func (s *BatchDeleteEdgeInstanceChannelResponseBody) SetCode(v string) *BatchDeleteEdgeInstanceChannelResponseBody {
	s.Code = &v
	return s
}

func (s *BatchDeleteEdgeInstanceChannelResponseBody) SetErrorMessage(v string) *BatchDeleteEdgeInstanceChannelResponseBody {
	s.ErrorMessage = &v
	return s
}

type BatchDeleteEdgeInstanceChannelResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchDeleteEdgeInstanceChannelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchDeleteEdgeInstanceChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteEdgeInstanceChannelResponse) GoString() string {
	return s.String()
}

func (s *BatchDeleteEdgeInstanceChannelResponse) SetHeaders(v map[string]*string) *BatchDeleteEdgeInstanceChannelResponse {
	s.Headers = v
	return s
}

func (s *BatchDeleteEdgeInstanceChannelResponse) SetBody(v *BatchDeleteEdgeInstanceChannelResponseBody) *BatchDeleteEdgeInstanceChannelResponse {
	s.Body = v
	return s
}

type BatchGetDeviceBindStatusRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	IotIds        []*string `json:"IotIds,omitempty" xml:"IotIds,omitempty" type:"Repeated"`
}

func (s BatchGetDeviceBindStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetDeviceBindStatusRequest) GoString() string {
	return s.String()
}

func (s *BatchGetDeviceBindStatusRequest) SetApiProduct(v string) *BatchGetDeviceBindStatusRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchGetDeviceBindStatusRequest) SetApiRevision(v string) *BatchGetDeviceBindStatusRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchGetDeviceBindStatusRequest) SetIotInstanceId(v string) *BatchGetDeviceBindStatusRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchGetDeviceBindStatusRequest) SetIotIds(v []*string) *BatchGetDeviceBindStatusRequest {
	s.IotIds = v
	return s
}

type BatchGetDeviceBindStatusResponseBody struct {
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         []*BatchGetDeviceBindStatusResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
}

func (s BatchGetDeviceBindStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchGetDeviceBindStatusResponseBody) GoString() string {
	return s.String()
}

func (s *BatchGetDeviceBindStatusResponseBody) SetRequestId(v string) *BatchGetDeviceBindStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchGetDeviceBindStatusResponseBody) SetSuccess(v bool) *BatchGetDeviceBindStatusResponseBody {
	s.Success = &v
	return s
}

func (s *BatchGetDeviceBindStatusResponseBody) SetCode(v string) *BatchGetDeviceBindStatusResponseBody {
	s.Code = &v
	return s
}

func (s *BatchGetDeviceBindStatusResponseBody) SetErrorMessage(v string) *BatchGetDeviceBindStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *BatchGetDeviceBindStatusResponseBody) SetData(v []*BatchGetDeviceBindStatusResponseBodyData) *BatchGetDeviceBindStatusResponseBody {
	s.Data = v
	return s
}

type BatchGetDeviceBindStatusResponseBodyData struct {
	IotId      *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	BindStatus *int32  `json:"BindStatus,omitempty" xml:"BindStatus,omitempty"`
}

func (s BatchGetDeviceBindStatusResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BatchGetDeviceBindStatusResponseBodyData) GoString() string {
	return s.String()
}

func (s *BatchGetDeviceBindStatusResponseBodyData) SetIotId(v string) *BatchGetDeviceBindStatusResponseBodyData {
	s.IotId = &v
	return s
}

func (s *BatchGetDeviceBindStatusResponseBodyData) SetBindStatus(v int32) *BatchGetDeviceBindStatusResponseBodyData {
	s.BindStatus = &v
	return s
}

type BatchGetDeviceBindStatusResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchGetDeviceBindStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchGetDeviceBindStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetDeviceBindStatusResponse) GoString() string {
	return s.String()
}

func (s *BatchGetDeviceBindStatusResponse) SetHeaders(v map[string]*string) *BatchGetDeviceBindStatusResponse {
	s.Headers = v
	return s
}

func (s *BatchGetDeviceBindStatusResponse) SetBody(v *BatchGetDeviceBindStatusResponseBody) *BatchGetDeviceBindStatusResponse {
	s.Body = v
	return s
}

type BatchGetDeviceStateRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	DeviceName    []*string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" type:"Repeated"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	IotId         []*string `json:"IotId,omitempty" xml:"IotId,omitempty" type:"Repeated"`
}

func (s BatchGetDeviceStateRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetDeviceStateRequest) GoString() string {
	return s.String()
}

func (s *BatchGetDeviceStateRequest) SetApiProduct(v string) *BatchGetDeviceStateRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchGetDeviceStateRequest) SetApiRevision(v string) *BatchGetDeviceStateRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchGetDeviceStateRequest) SetDeviceName(v []*string) *BatchGetDeviceStateRequest {
	s.DeviceName = v
	return s
}

func (s *BatchGetDeviceStateRequest) SetIotInstanceId(v string) *BatchGetDeviceStateRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchGetDeviceStateRequest) SetProductKey(v string) *BatchGetDeviceStateRequest {
	s.ProductKey = &v
	return s
}

func (s *BatchGetDeviceStateRequest) SetIotId(v []*string) *BatchGetDeviceStateRequest {
	s.IotId = v
	return s
}

type BatchGetDeviceStateResponseBody struct {
	RequestId        *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success          *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
	Code             *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage     *string                                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	DeviceStatusList *BatchGetDeviceStateResponseBodyDeviceStatusList `json:"DeviceStatusList,omitempty" xml:"DeviceStatusList,omitempty" type:"Struct"`
}

func (s BatchGetDeviceStateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchGetDeviceStateResponseBody) GoString() string {
	return s.String()
}

func (s *BatchGetDeviceStateResponseBody) SetRequestId(v string) *BatchGetDeviceStateResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchGetDeviceStateResponseBody) SetSuccess(v bool) *BatchGetDeviceStateResponseBody {
	s.Success = &v
	return s
}

func (s *BatchGetDeviceStateResponseBody) SetCode(v string) *BatchGetDeviceStateResponseBody {
	s.Code = &v
	return s
}

func (s *BatchGetDeviceStateResponseBody) SetErrorMessage(v string) *BatchGetDeviceStateResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *BatchGetDeviceStateResponseBody) SetDeviceStatusList(v *BatchGetDeviceStateResponseBodyDeviceStatusList) *BatchGetDeviceStateResponseBody {
	s.DeviceStatusList = v
	return s
}

type BatchGetDeviceStateResponseBodyDeviceStatusList struct {
	DeviceStatus []*BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty" type:"Repeated"`
}

func (s BatchGetDeviceStateResponseBodyDeviceStatusList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetDeviceStateResponseBodyDeviceStatusList) GoString() string {
	return s.String()
}

func (s *BatchGetDeviceStateResponseBodyDeviceStatusList) SetDeviceStatus(v []*BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus) *BatchGetDeviceStateResponseBodyDeviceStatusList {
	s.DeviceStatus = v
	return s
}

type BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus struct {
	DeviceId       *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceName     *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	AsAddress      *string `json:"AsAddress,omitempty" xml:"AsAddress,omitempty"`
	LastOnlineTime *string `json:"LastOnlineTime,omitempty" xml:"LastOnlineTime,omitempty"`
	IotId          *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus) String() string {
	return tea.Prettify(s)
}

func (s BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus) GoString() string {
	return s.String()
}

func (s *BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus) SetDeviceId(v string) *BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus {
	s.DeviceId = &v
	return s
}

func (s *BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus) SetDeviceName(v string) *BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus {
	s.DeviceName = &v
	return s
}

func (s *BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus) SetStatus(v string) *BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus {
	s.Status = &v
	return s
}

func (s *BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus) SetAsAddress(v string) *BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus {
	s.AsAddress = &v
	return s
}

func (s *BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus) SetLastOnlineTime(v string) *BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus {
	s.LastOnlineTime = &v
	return s
}

func (s *BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus) SetIotId(v string) *BatchGetDeviceStateResponseBodyDeviceStatusListDeviceStatus {
	s.IotId = &v
	return s
}

type BatchGetDeviceStateResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchGetDeviceStateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchGetDeviceStateResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetDeviceStateResponse) GoString() string {
	return s.String()
}

func (s *BatchGetDeviceStateResponse) SetHeaders(v map[string]*string) *BatchGetDeviceStateResponse {
	s.Headers = v
	return s
}

func (s *BatchGetDeviceStateResponse) SetBody(v *BatchGetDeviceStateResponseBody) *BatchGetDeviceStateResponse {
	s.Body = v
	return s
}

type BatchGetEdgeDriverRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DriverIds     []*string `json:"DriverIds,omitempty" xml:"DriverIds,omitempty" type:"Repeated"`
}

func (s BatchGetEdgeDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeDriverRequest) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeDriverRequest) SetApiProduct(v string) *BatchGetEdgeDriverRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchGetEdgeDriverRequest) SetApiRevision(v string) *BatchGetEdgeDriverRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchGetEdgeDriverRequest) SetIotInstanceId(v string) *BatchGetEdgeDriverRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchGetEdgeDriverRequest) SetDriverIds(v []*string) *BatchGetEdgeDriverRequest {
	s.DriverIds = v
	return s
}

type BatchGetEdgeDriverResponseBody struct {
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	DriverList   []*BatchGetEdgeDriverResponseBodyDriverList `json:"DriverList,omitempty" xml:"DriverList,omitempty" type:"Repeated"`
}

func (s BatchGetEdgeDriverResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeDriverResponseBody) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeDriverResponseBody) SetRequestId(v string) *BatchGetEdgeDriverResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchGetEdgeDriverResponseBody) SetSuccess(v bool) *BatchGetEdgeDriverResponseBody {
	s.Success = &v
	return s
}

func (s *BatchGetEdgeDriverResponseBody) SetCode(v string) *BatchGetEdgeDriverResponseBody {
	s.Code = &v
	return s
}

func (s *BatchGetEdgeDriverResponseBody) SetErrorMessage(v string) *BatchGetEdgeDriverResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *BatchGetEdgeDriverResponseBody) SetDriverList(v []*BatchGetEdgeDriverResponseBodyDriverList) *BatchGetEdgeDriverResponseBody {
	s.DriverList = v
	return s
}

type BatchGetEdgeDriverResponseBodyDriverList struct {
	DriverId             *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	DriverName           *string `json:"DriverName,omitempty" xml:"DriverName,omitempty"`
	DriverProtocol       *string `json:"DriverProtocol,omitempty" xml:"DriverProtocol,omitempty"`
	Runtime              *string `json:"Runtime,omitempty" xml:"Runtime,omitempty"`
	CpuArch              *string `json:"CpuArch,omitempty" xml:"CpuArch,omitempty"`
	Type                 *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	IsBuiltIn            *bool   `json:"IsBuiltIn,omitempty" xml:"IsBuiltIn,omitempty"`
	GmtCreateTimestamp   *int64  `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty"`
	GmtModifiedTimestamp *int64  `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty"`
}

func (s BatchGetEdgeDriverResponseBodyDriverList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeDriverResponseBodyDriverList) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeDriverResponseBodyDriverList) SetDriverId(v string) *BatchGetEdgeDriverResponseBodyDriverList {
	s.DriverId = &v
	return s
}

func (s *BatchGetEdgeDriverResponseBodyDriverList) SetDriverName(v string) *BatchGetEdgeDriverResponseBodyDriverList {
	s.DriverName = &v
	return s
}

func (s *BatchGetEdgeDriverResponseBodyDriverList) SetDriverProtocol(v string) *BatchGetEdgeDriverResponseBodyDriverList {
	s.DriverProtocol = &v
	return s
}

func (s *BatchGetEdgeDriverResponseBodyDriverList) SetRuntime(v string) *BatchGetEdgeDriverResponseBodyDriverList {
	s.Runtime = &v
	return s
}

func (s *BatchGetEdgeDriverResponseBodyDriverList) SetCpuArch(v string) *BatchGetEdgeDriverResponseBodyDriverList {
	s.CpuArch = &v
	return s
}

func (s *BatchGetEdgeDriverResponseBodyDriverList) SetType(v int32) *BatchGetEdgeDriverResponseBodyDriverList {
	s.Type = &v
	return s
}

func (s *BatchGetEdgeDriverResponseBodyDriverList) SetIsBuiltIn(v bool) *BatchGetEdgeDriverResponseBodyDriverList {
	s.IsBuiltIn = &v
	return s
}

func (s *BatchGetEdgeDriverResponseBodyDriverList) SetGmtCreateTimestamp(v int64) *BatchGetEdgeDriverResponseBodyDriverList {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *BatchGetEdgeDriverResponseBodyDriverList) SetGmtModifiedTimestamp(v int64) *BatchGetEdgeDriverResponseBodyDriverList {
	s.GmtModifiedTimestamp = &v
	return s
}

type BatchGetEdgeDriverResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchGetEdgeDriverResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchGetEdgeDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeDriverResponse) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeDriverResponse) SetHeaders(v map[string]*string) *BatchGetEdgeDriverResponse {
	s.Headers = v
	return s
}

func (s *BatchGetEdgeDriverResponse) SetBody(v *BatchGetEdgeDriverResponseBody) *BatchGetEdgeDriverResponse {
	s.Body = v
	return s
}

type BatchGetEdgeInstanceChannelRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DriverId      *string   `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	ChannelIds    []*string `json:"ChannelIds,omitempty" xml:"ChannelIds,omitempty" type:"Repeated"`
}

func (s BatchGetEdgeInstanceChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceChannelRequest) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceChannelRequest) SetApiProduct(v string) *BatchGetEdgeInstanceChannelRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelRequest) SetApiRevision(v string) *BatchGetEdgeInstanceChannelRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelRequest) SetIotInstanceId(v string) *BatchGetEdgeInstanceChannelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelRequest) SetInstanceId(v string) *BatchGetEdgeInstanceChannelRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelRequest) SetDriverId(v string) *BatchGetEdgeInstanceChannelRequest {
	s.DriverId = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelRequest) SetChannelIds(v []*string) *BatchGetEdgeInstanceChannelRequest {
	s.ChannelIds = v
	return s
}

type BatchGetEdgeInstanceChannelResponseBody struct {
	RequestId    *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *BatchGetEdgeInstanceChannelResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s BatchGetEdgeInstanceChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceChannelResponseBody) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceChannelResponseBody) SetRequestId(v string) *BatchGetEdgeInstanceChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponseBody) SetSuccess(v bool) *BatchGetEdgeInstanceChannelResponseBody {
	s.Success = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponseBody) SetCode(v string) *BatchGetEdgeInstanceChannelResponseBody {
	s.Code = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponseBody) SetErrorMessage(v string) *BatchGetEdgeInstanceChannelResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponseBody) SetData(v *BatchGetEdgeInstanceChannelResponseBodyData) *BatchGetEdgeInstanceChannelResponseBody {
	s.Data = v
	return s
}

type BatchGetEdgeInstanceChannelResponseBodyData struct {
	Channel []*BatchGetEdgeInstanceChannelResponseBodyDataChannel `json:"Channel,omitempty" xml:"Channel,omitempty" type:"Repeated"`
}

func (s BatchGetEdgeInstanceChannelResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceChannelResponseBodyData) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceChannelResponseBodyData) SetChannel(v []*BatchGetEdgeInstanceChannelResponseBodyDataChannel) *BatchGetEdgeInstanceChannelResponseBodyData {
	s.Channel = v
	return s
}

type BatchGetEdgeInstanceChannelResponseBodyDataChannel struct {
	ChannelId   *string                                                       `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	ChannelName *string                                                       `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	ConfigList  *BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigList `json:"ConfigList,omitempty" xml:"ConfigList,omitempty" type:"Struct"`
}

func (s BatchGetEdgeInstanceChannelResponseBodyDataChannel) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceChannelResponseBodyDataChannel) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceChannelResponseBodyDataChannel) SetChannelId(v string) *BatchGetEdgeInstanceChannelResponseBodyDataChannel {
	s.ChannelId = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponseBodyDataChannel) SetChannelName(v string) *BatchGetEdgeInstanceChannelResponseBodyDataChannel {
	s.ChannelName = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponseBodyDataChannel) SetConfigList(v *BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigList) *BatchGetEdgeInstanceChannelResponseBodyDataChannel {
	s.ConfigList = v
	return s
}

type BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigList struct {
	Config []*BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
}

func (s BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigList) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigList) SetConfig(v []*BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig) *BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigList {
	s.Config = v
	return s
}

type BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig struct {
	ConfigId *string `json:"ConfigId,omitempty" xml:"ConfigId,omitempty"`
	Format   *string `json:"Format,omitempty" xml:"Format,omitempty"`
	Content  *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Key      *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig) SetConfigId(v string) *BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig {
	s.ConfigId = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig) SetFormat(v string) *BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig {
	s.Format = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig) SetContent(v string) *BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig {
	s.Content = &v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig) SetKey(v string) *BatchGetEdgeInstanceChannelResponseBodyDataChannelConfigListConfig {
	s.Key = &v
	return s
}

type BatchGetEdgeInstanceChannelResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchGetEdgeInstanceChannelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchGetEdgeInstanceChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceChannelResponse) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceChannelResponse) SetHeaders(v map[string]*string) *BatchGetEdgeInstanceChannelResponse {
	s.Headers = v
	return s
}

func (s *BatchGetEdgeInstanceChannelResponse) SetBody(v *BatchGetEdgeInstanceChannelResponseBody) *BatchGetEdgeInstanceChannelResponse {
	s.Body = v
	return s
}

type BatchGetEdgeInstanceDeviceChannelRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DriverId      *string   `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	IotIds        []*string `json:"IotIds,omitempty" xml:"IotIds,omitempty" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDeviceChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceChannelRequest) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceChannelRequest) SetApiProduct(v string) *BatchGetEdgeInstanceDeviceChannelRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelRequest) SetApiRevision(v string) *BatchGetEdgeInstanceDeviceChannelRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelRequest) SetIotInstanceId(v string) *BatchGetEdgeInstanceDeviceChannelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelRequest) SetInstanceId(v string) *BatchGetEdgeInstanceDeviceChannelRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelRequest) SetDriverId(v string) *BatchGetEdgeInstanceDeviceChannelRequest {
	s.DriverId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelRequest) SetIotIds(v []*string) *BatchGetEdgeInstanceDeviceChannelRequest {
	s.IotIds = v
	return s
}

type BatchGetEdgeInstanceDeviceChannelResponseBody struct {
	RequestId         *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success           *bool                                                             `json:"Success,omitempty" xml:"Success,omitempty"`
	Code              *string                                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage      *string                                                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	DeviceChannelList []*BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList `json:"DeviceChannelList,omitempty" xml:"DeviceChannelList,omitempty" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDeviceChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceChannelResponseBody) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceChannelResponseBody) SetRequestId(v string) *BatchGetEdgeInstanceDeviceChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelResponseBody) SetSuccess(v bool) *BatchGetEdgeInstanceDeviceChannelResponseBody {
	s.Success = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelResponseBody) SetCode(v string) *BatchGetEdgeInstanceDeviceChannelResponseBody {
	s.Code = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelResponseBody) SetErrorMessage(v string) *BatchGetEdgeInstanceDeviceChannelResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelResponseBody) SetDeviceChannelList(v []*BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList) *BatchGetEdgeInstanceDeviceChannelResponseBody {
	s.DeviceChannelList = v
	return s
}

type BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList struct {
	ChannelId   *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	IotId       *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList) SetChannelId(v string) *BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList {
	s.ChannelId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList) SetChannelName(v string) *BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList {
	s.ChannelName = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList) SetIotId(v string) *BatchGetEdgeInstanceDeviceChannelResponseBodyDeviceChannelList {
	s.IotId = &v
	return s
}

type BatchGetEdgeInstanceDeviceChannelResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchGetEdgeInstanceDeviceChannelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchGetEdgeInstanceDeviceChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceChannelResponse) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceChannelResponse) SetHeaders(v map[string]*string) *BatchGetEdgeInstanceDeviceChannelResponse {
	s.Headers = v
	return s
}

func (s *BatchGetEdgeInstanceDeviceChannelResponse) SetBody(v *BatchGetEdgeInstanceDeviceChannelResponseBody) *BatchGetEdgeInstanceDeviceChannelResponse {
	s.Body = v
	return s
}

type BatchGetEdgeInstanceDeviceConfigRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IotIds        []*string `json:"IotIds,omitempty" xml:"IotIds,omitempty" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDeviceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceConfigRequest) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceConfigRequest) SetApiProduct(v string) *BatchGetEdgeInstanceDeviceConfigRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigRequest) SetApiRevision(v string) *BatchGetEdgeInstanceDeviceConfigRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigRequest) SetIotInstanceId(v string) *BatchGetEdgeInstanceDeviceConfigRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigRequest) SetInstanceId(v string) *BatchGetEdgeInstanceDeviceConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigRequest) SetIotIds(v []*string) *BatchGetEdgeInstanceDeviceConfigRequest {
	s.IotIds = v
	return s
}

type BatchGetEdgeInstanceDeviceConfigResponseBody struct {
	RequestId        *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success          *bool                                                           `json:"Success,omitempty" xml:"Success,omitempty"`
	Code             *string                                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage     *string                                                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	DeviceConfigList []*BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList `json:"DeviceConfigList,omitempty" xml:"DeviceConfigList,omitempty" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDeviceConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceConfigResponseBody) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceConfigResponseBody) SetRequestId(v string) *BatchGetEdgeInstanceDeviceConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigResponseBody) SetSuccess(v bool) *BatchGetEdgeInstanceDeviceConfigResponseBody {
	s.Success = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigResponseBody) SetCode(v string) *BatchGetEdgeInstanceDeviceConfigResponseBody {
	s.Code = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigResponseBody) SetErrorMessage(v string) *BatchGetEdgeInstanceDeviceConfigResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigResponseBody) SetDeviceConfigList(v []*BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList) *BatchGetEdgeInstanceDeviceConfigResponseBody {
	s.DeviceConfigList = v
	return s
}

type BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList struct {
	IotId  *string                                                             `json:"IotId,omitempty" xml:"IotId,omitempty"`
	Config *BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Struct"`
}

func (s BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList) SetIotId(v string) *BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList {
	s.IotId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList) SetConfig(v *BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig) *BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigList {
	s.Config = v
	return s
}

type BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig struct {
	Format  *string `json:"Format,omitempty" xml:"Format,omitempty"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
}

func (s BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig) SetFormat(v string) *BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig {
	s.Format = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig) SetContent(v string) *BatchGetEdgeInstanceDeviceConfigResponseBodyDeviceConfigListConfig {
	s.Content = &v
	return s
}

type BatchGetEdgeInstanceDeviceConfigResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchGetEdgeInstanceDeviceConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchGetEdgeInstanceDeviceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceConfigResponse) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceConfigResponse) SetHeaders(v map[string]*string) *BatchGetEdgeInstanceDeviceConfigResponse {
	s.Headers = v
	return s
}

func (s *BatchGetEdgeInstanceDeviceConfigResponse) SetBody(v *BatchGetEdgeInstanceDeviceConfigResponseBody) *BatchGetEdgeInstanceDeviceConfigResponse {
	s.Body = v
	return s
}

type BatchGetEdgeInstanceDeviceDriverRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IotIds        []*string `json:"IotIds,omitempty" xml:"IotIds,omitempty" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDeviceDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceDriverRequest) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceDriverRequest) SetApiProduct(v string) *BatchGetEdgeInstanceDeviceDriverRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverRequest) SetApiRevision(v string) *BatchGetEdgeInstanceDeviceDriverRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverRequest) SetIotInstanceId(v string) *BatchGetEdgeInstanceDeviceDriverRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverRequest) SetInstanceId(v string) *BatchGetEdgeInstanceDeviceDriverRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverRequest) SetIotIds(v []*string) *BatchGetEdgeInstanceDeviceDriverRequest {
	s.IotIds = v
	return s
}

type BatchGetEdgeInstanceDeviceDriverResponseBody struct {
	RequestId        *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success          *bool                                                           `json:"Success,omitempty" xml:"Success,omitempty"`
	Code             *string                                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage     *string                                                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	DeviceDriverList []*BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList `json:"DeviceDriverList,omitempty" xml:"DeviceDriverList,omitempty" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDeviceDriverResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceDriverResponseBody) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceDriverResponseBody) SetRequestId(v string) *BatchGetEdgeInstanceDeviceDriverResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverResponseBody) SetSuccess(v bool) *BatchGetEdgeInstanceDeviceDriverResponseBody {
	s.Success = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverResponseBody) SetCode(v string) *BatchGetEdgeInstanceDeviceDriverResponseBody {
	s.Code = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverResponseBody) SetErrorMessage(v string) *BatchGetEdgeInstanceDeviceDriverResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverResponseBody) SetDeviceDriverList(v []*BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList) *BatchGetEdgeInstanceDeviceDriverResponseBody {
	s.DeviceDriverList = v
	return s
}

type BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList struct {
	DriverId *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	IotId    *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList) SetDriverId(v string) *BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList {
	s.DriverId = &v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList) SetIotId(v string) *BatchGetEdgeInstanceDeviceDriverResponseBodyDeviceDriverList {
	s.IotId = &v
	return s
}

type BatchGetEdgeInstanceDeviceDriverResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchGetEdgeInstanceDeviceDriverResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchGetEdgeInstanceDeviceDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDeviceDriverResponse) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDeviceDriverResponse) SetHeaders(v map[string]*string) *BatchGetEdgeInstanceDeviceDriverResponse {
	s.Headers = v
	return s
}

func (s *BatchGetEdgeInstanceDeviceDriverResponse) SetBody(v *BatchGetEdgeInstanceDeviceDriverResponseBody) *BatchGetEdgeInstanceDeviceDriverResponse {
	s.Body = v
	return s
}

type BatchGetEdgeInstanceDriverConfigsRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DriverIds     []*string `json:"DriverIds,omitempty" xml:"DriverIds,omitempty" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDriverConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDriverConfigsRequest) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDriverConfigsRequest) SetApiProduct(v string) *BatchGetEdgeInstanceDriverConfigsRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsRequest) SetApiRevision(v string) *BatchGetEdgeInstanceDriverConfigsRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsRequest) SetIotInstanceId(v string) *BatchGetEdgeInstanceDriverConfigsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsRequest) SetInstanceId(v string) *BatchGetEdgeInstanceDriverConfigsRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsRequest) SetDriverIds(v []*string) *BatchGetEdgeInstanceDriverConfigsRequest {
	s.DriverIds = v
	return s
}

type BatchGetEdgeInstanceDriverConfigsResponseBody struct {
	RequestId        *string                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success          *bool                                                            `json:"Success,omitempty" xml:"Success,omitempty"`
	Code             *string                                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage     *string                                                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	DriverConfigList []*BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList `json:"DriverConfigList,omitempty" xml:"DriverConfigList,omitempty" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDriverConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDriverConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseBody) SetRequestId(v string) *BatchGetEdgeInstanceDriverConfigsResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseBody) SetSuccess(v bool) *BatchGetEdgeInstanceDriverConfigsResponseBody {
	s.Success = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseBody) SetCode(v string) *BatchGetEdgeInstanceDriverConfigsResponseBody {
	s.Code = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseBody) SetErrorMessage(v string) *BatchGetEdgeInstanceDriverConfigsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseBody) SetDriverConfigList(v []*BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList) *BatchGetEdgeInstanceDriverConfigsResponseBody {
	s.DriverConfigList = v
	return s
}

type BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList struct {
	DriverId   *string                                                                    `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	ConfigList []*BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList `json:"ConfigList,omitempty" xml:"ConfigList,omitempty" type:"Repeated"`
}

func (s BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList) SetDriverId(v string) *BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList {
	s.DriverId = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList) SetConfigList(v []*BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList) *BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigList {
	s.ConfigList = v
	return s
}

type BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList struct {
	ConfigId *string `json:"ConfigId,omitempty" xml:"ConfigId,omitempty"`
	Format   *string `json:"Format,omitempty" xml:"Format,omitempty"`
	Content  *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Key      *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList) SetConfigId(v string) *BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList {
	s.ConfigId = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList) SetFormat(v string) *BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList {
	s.Format = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList) SetContent(v string) *BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList {
	s.Content = &v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList) SetKey(v string) *BatchGetEdgeInstanceDriverConfigsResponseBodyDriverConfigListConfigList {
	s.Key = &v
	return s
}

type BatchGetEdgeInstanceDriverConfigsResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchGetEdgeInstanceDriverConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchGetEdgeInstanceDriverConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetEdgeInstanceDriverConfigsResponse) GoString() string {
	return s.String()
}

func (s *BatchGetEdgeInstanceDriverConfigsResponse) SetHeaders(v map[string]*string) *BatchGetEdgeInstanceDriverConfigsResponse {
	s.Headers = v
	return s
}

func (s *BatchGetEdgeInstanceDriverConfigsResponse) SetBody(v *BatchGetEdgeInstanceDriverConfigsResponseBody) *BatchGetEdgeInstanceDriverConfigsResponse {
	s.Body = v
	return s
}

type BatchPubRequest struct {
	ApiProduct     *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision    *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId  *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DeviceName     []*string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" type:"Repeated"`
	ProductKey     *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Qos            *int32    `json:"Qos,omitempty" xml:"Qos,omitempty"`
	TopicShortName *string   `json:"TopicShortName,omitempty" xml:"TopicShortName,omitempty"`
	MessageContent *string   `json:"MessageContent,omitempty" xml:"MessageContent,omitempty"`
}

func (s BatchPubRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchPubRequest) GoString() string {
	return s.String()
}

func (s *BatchPubRequest) SetApiProduct(v string) *BatchPubRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchPubRequest) SetApiRevision(v string) *BatchPubRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchPubRequest) SetIotInstanceId(v string) *BatchPubRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchPubRequest) SetDeviceName(v []*string) *BatchPubRequest {
	s.DeviceName = v
	return s
}

func (s *BatchPubRequest) SetProductKey(v string) *BatchPubRequest {
	s.ProductKey = &v
	return s
}

func (s *BatchPubRequest) SetQos(v int32) *BatchPubRequest {
	s.Qos = &v
	return s
}

func (s *BatchPubRequest) SetTopicShortName(v string) *BatchPubRequest {
	s.TopicShortName = &v
	return s
}

func (s *BatchPubRequest) SetMessageContent(v string) *BatchPubRequest {
	s.MessageContent = &v
	return s
}

type BatchPubResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s BatchPubResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchPubResponseBody) GoString() string {
	return s.String()
}

func (s *BatchPubResponseBody) SetRequestId(v string) *BatchPubResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchPubResponseBody) SetSuccess(v bool) *BatchPubResponseBody {
	s.Success = &v
	return s
}

func (s *BatchPubResponseBody) SetCode(v string) *BatchPubResponseBody {
	s.Code = &v
	return s
}

func (s *BatchPubResponseBody) SetErrorMessage(v string) *BatchPubResponseBody {
	s.ErrorMessage = &v
	return s
}

type BatchPubResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchPubResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchPubResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchPubResponse) GoString() string {
	return s.String()
}

func (s *BatchPubResponse) SetHeaders(v map[string]*string) *BatchPubResponse {
	s.Headers = v
	return s
}

func (s *BatchPubResponse) SetBody(v *BatchPubResponseBody) *BatchPubResponse {
	s.Body = v
	return s
}

type BatchQueryDeviceDetailRequest struct {
	ApiProduct        *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	DeviceName        []*string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" type:"Repeated"`
	ProductKey        *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	IotInstanceId     *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RealTenantId      *string   `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string   `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s BatchQueryDeviceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchQueryDeviceDetailRequest) GoString() string {
	return s.String()
}

func (s *BatchQueryDeviceDetailRequest) SetApiProduct(v string) *BatchQueryDeviceDetailRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchQueryDeviceDetailRequest) SetApiRevision(v string) *BatchQueryDeviceDetailRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchQueryDeviceDetailRequest) SetDeviceName(v []*string) *BatchQueryDeviceDetailRequest {
	s.DeviceName = v
	return s
}

func (s *BatchQueryDeviceDetailRequest) SetProductKey(v string) *BatchQueryDeviceDetailRequest {
	s.ProductKey = &v
	return s
}

func (s *BatchQueryDeviceDetailRequest) SetIotInstanceId(v string) *BatchQueryDeviceDetailRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchQueryDeviceDetailRequest) SetRealTenantId(v string) *BatchQueryDeviceDetailRequest {
	s.RealTenantId = &v
	return s
}

func (s *BatchQueryDeviceDetailRequest) SetRealTripartiteKey(v string) *BatchQueryDeviceDetailRequest {
	s.RealTripartiteKey = &v
	return s
}

type BatchQueryDeviceDetailResponseBody struct {
	RequestId    *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                 `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *BatchQueryDeviceDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s BatchQueryDeviceDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchQueryDeviceDetailResponseBody) GoString() string {
	return s.String()
}

func (s *BatchQueryDeviceDetailResponseBody) SetRequestId(v string) *BatchQueryDeviceDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBody) SetSuccess(v bool) *BatchQueryDeviceDetailResponseBody {
	s.Success = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBody) SetCode(v string) *BatchQueryDeviceDetailResponseBody {
	s.Code = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBody) SetErrorMessage(v string) *BatchQueryDeviceDetailResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBody) SetData(v *BatchQueryDeviceDetailResponseBodyData) *BatchQueryDeviceDetailResponseBody {
	s.Data = v
	return s
}

type BatchQueryDeviceDetailResponseBodyData struct {
	Data []*BatchQueryDeviceDetailResponseBodyDataData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
}

func (s BatchQueryDeviceDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BatchQueryDeviceDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *BatchQueryDeviceDetailResponseBodyData) SetData(v []*BatchQueryDeviceDetailResponseBodyDataData) *BatchQueryDeviceDetailResponseBodyData {
	s.Data = v
	return s
}

type BatchQueryDeviceDetailResponseBodyDataData struct {
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ProductName     *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	DeviceName      *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	Nickname        *string `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
	DeviceSecret    *string `json:"DeviceSecret,omitempty" xml:"DeviceSecret,omitempty"`
	IotId           *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	UtcCreate       *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	GmtCreate       *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	UtcActive       *string `json:"UtcActive,omitempty" xml:"UtcActive,omitempty"`
	GmtActive       *string `json:"GmtActive,omitempty" xml:"GmtActive,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	FirmwareVersion *string `json:"FirmwareVersion,omitempty" xml:"FirmwareVersion,omitempty"`
	NodeType        *int32  `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s BatchQueryDeviceDetailResponseBodyDataData) String() string {
	return tea.Prettify(s)
}

func (s BatchQueryDeviceDetailResponseBodyDataData) GoString() string {
	return s.String()
}

func (s *BatchQueryDeviceDetailResponseBodyDataData) SetProductKey(v string) *BatchQueryDeviceDetailResponseBodyDataData {
	s.ProductKey = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBodyDataData) SetProductName(v string) *BatchQueryDeviceDetailResponseBodyDataData {
	s.ProductName = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBodyDataData) SetDeviceName(v string) *BatchQueryDeviceDetailResponseBodyDataData {
	s.DeviceName = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBodyDataData) SetNickname(v string) *BatchQueryDeviceDetailResponseBodyDataData {
	s.Nickname = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBodyDataData) SetDeviceSecret(v string) *BatchQueryDeviceDetailResponseBodyDataData {
	s.DeviceSecret = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBodyDataData) SetIotId(v string) *BatchQueryDeviceDetailResponseBodyDataData {
	s.IotId = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBodyDataData) SetUtcCreate(v string) *BatchQueryDeviceDetailResponseBodyDataData {
	s.UtcCreate = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBodyDataData) SetGmtCreate(v string) *BatchQueryDeviceDetailResponseBodyDataData {
	s.GmtCreate = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBodyDataData) SetUtcActive(v string) *BatchQueryDeviceDetailResponseBodyDataData {
	s.UtcActive = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBodyDataData) SetGmtActive(v string) *BatchQueryDeviceDetailResponseBodyDataData {
	s.GmtActive = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBodyDataData) SetStatus(v string) *BatchQueryDeviceDetailResponseBodyDataData {
	s.Status = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBodyDataData) SetFirmwareVersion(v string) *BatchQueryDeviceDetailResponseBodyDataData {
	s.FirmwareVersion = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBodyDataData) SetNodeType(v int32) *BatchQueryDeviceDetailResponseBodyDataData {
	s.NodeType = &v
	return s
}

func (s *BatchQueryDeviceDetailResponseBodyDataData) SetRegion(v string) *BatchQueryDeviceDetailResponseBodyDataData {
	s.Region = &v
	return s
}

type BatchQueryDeviceDetailResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchQueryDeviceDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchQueryDeviceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchQueryDeviceDetailResponse) GoString() string {
	return s.String()
}

func (s *BatchQueryDeviceDetailResponse) SetHeaders(v map[string]*string) *BatchQueryDeviceDetailResponse {
	s.Headers = v
	return s
}

func (s *BatchQueryDeviceDetailResponse) SetBody(v *BatchQueryDeviceDetailResponseBody) *BatchQueryDeviceDetailResponse {
	s.Body = v
	return s
}

type BatchRegisterDeviceRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Count             *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s BatchRegisterDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchRegisterDeviceRequest) GoString() string {
	return s.String()
}

func (s *BatchRegisterDeviceRequest) SetApiProduct(v string) *BatchRegisterDeviceRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchRegisterDeviceRequest) SetApiRevision(v string) *BatchRegisterDeviceRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchRegisterDeviceRequest) SetIotInstanceId(v string) *BatchRegisterDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchRegisterDeviceRequest) SetProductKey(v string) *BatchRegisterDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *BatchRegisterDeviceRequest) SetCount(v int32) *BatchRegisterDeviceRequest {
	s.Count = &v
	return s
}

func (s *BatchRegisterDeviceRequest) SetRealTenantId(v string) *BatchRegisterDeviceRequest {
	s.RealTenantId = &v
	return s
}

func (s *BatchRegisterDeviceRequest) SetRealTripartiteKey(v string) *BatchRegisterDeviceRequest {
	s.RealTripartiteKey = &v
	return s
}

type BatchRegisterDeviceResponseBody struct {
	RequestId    *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *BatchRegisterDeviceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s BatchRegisterDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchRegisterDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *BatchRegisterDeviceResponseBody) SetRequestId(v string) *BatchRegisterDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchRegisterDeviceResponseBody) SetSuccess(v bool) *BatchRegisterDeviceResponseBody {
	s.Success = &v
	return s
}

func (s *BatchRegisterDeviceResponseBody) SetCode(v string) *BatchRegisterDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *BatchRegisterDeviceResponseBody) SetErrorMessage(v string) *BatchRegisterDeviceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *BatchRegisterDeviceResponseBody) SetData(v *BatchRegisterDeviceResponseBodyData) *BatchRegisterDeviceResponseBody {
	s.Data = v
	return s
}

type BatchRegisterDeviceResponseBodyData struct {
	ApplyId *int64 `json:"ApplyId,omitempty" xml:"ApplyId,omitempty"`
}

func (s BatchRegisterDeviceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BatchRegisterDeviceResponseBodyData) GoString() string {
	return s.String()
}

func (s *BatchRegisterDeviceResponseBodyData) SetApplyId(v int64) *BatchRegisterDeviceResponseBodyData {
	s.ApplyId = &v
	return s
}

type BatchRegisterDeviceResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchRegisterDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchRegisterDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchRegisterDeviceResponse) GoString() string {
	return s.String()
}

func (s *BatchRegisterDeviceResponse) SetHeaders(v map[string]*string) *BatchRegisterDeviceResponse {
	s.Headers = v
	return s
}

func (s *BatchRegisterDeviceResponse) SetBody(v *BatchRegisterDeviceResponseBody) *BatchRegisterDeviceResponse {
	s.Body = v
	return s
}

type BatchRegisterDeviceWithApplyIdRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ApplyId           *int64  `json:"ApplyId,omitempty" xml:"ApplyId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s BatchRegisterDeviceWithApplyIdRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchRegisterDeviceWithApplyIdRequest) GoString() string {
	return s.String()
}

func (s *BatchRegisterDeviceWithApplyIdRequest) SetApiProduct(v string) *BatchRegisterDeviceWithApplyIdRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdRequest) SetApiRevision(v string) *BatchRegisterDeviceWithApplyIdRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdRequest) SetIotInstanceId(v string) *BatchRegisterDeviceWithApplyIdRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdRequest) SetProductKey(v string) *BatchRegisterDeviceWithApplyIdRequest {
	s.ProductKey = &v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdRequest) SetApplyId(v int64) *BatchRegisterDeviceWithApplyIdRequest {
	s.ApplyId = &v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdRequest) SetRealTenantId(v string) *BatchRegisterDeviceWithApplyIdRequest {
	s.RealTenantId = &v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdRequest) SetRealTripartiteKey(v string) *BatchRegisterDeviceWithApplyIdRequest {
	s.RealTripartiteKey = &v
	return s
}

type BatchRegisterDeviceWithApplyIdResponseBody struct {
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *BatchRegisterDeviceWithApplyIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s BatchRegisterDeviceWithApplyIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchRegisterDeviceWithApplyIdResponseBody) GoString() string {
	return s.String()
}

func (s *BatchRegisterDeviceWithApplyIdResponseBody) SetRequestId(v string) *BatchRegisterDeviceWithApplyIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdResponseBody) SetSuccess(v bool) *BatchRegisterDeviceWithApplyIdResponseBody {
	s.Success = &v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdResponseBody) SetCode(v string) *BatchRegisterDeviceWithApplyIdResponseBody {
	s.Code = &v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdResponseBody) SetErrorMessage(v string) *BatchRegisterDeviceWithApplyIdResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdResponseBody) SetData(v *BatchRegisterDeviceWithApplyIdResponseBodyData) *BatchRegisterDeviceWithApplyIdResponseBody {
	s.Data = v
	return s
}

type BatchRegisterDeviceWithApplyIdResponseBodyData struct {
	ApplyId *int64 `json:"ApplyId,omitempty" xml:"ApplyId,omitempty"`
}

func (s BatchRegisterDeviceWithApplyIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BatchRegisterDeviceWithApplyIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *BatchRegisterDeviceWithApplyIdResponseBodyData) SetApplyId(v int64) *BatchRegisterDeviceWithApplyIdResponseBodyData {
	s.ApplyId = &v
	return s
}

type BatchRegisterDeviceWithApplyIdResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchRegisterDeviceWithApplyIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchRegisterDeviceWithApplyIdResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchRegisterDeviceWithApplyIdResponse) GoString() string {
	return s.String()
}

func (s *BatchRegisterDeviceWithApplyIdResponse) SetHeaders(v map[string]*string) *BatchRegisterDeviceWithApplyIdResponse {
	s.Headers = v
	return s
}

func (s *BatchRegisterDeviceWithApplyIdResponse) SetBody(v *BatchRegisterDeviceWithApplyIdResponseBody) *BatchRegisterDeviceWithApplyIdResponse {
	s.Body = v
	return s
}

type BatchSetEdgeInstanceDeviceChannelRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DriverId      *string   `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	ChannelId     *string   `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	IotIds        []*string `json:"IotIds,omitempty" xml:"IotIds,omitempty" type:"Repeated"`
}

func (s BatchSetEdgeInstanceDeviceChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchSetEdgeInstanceDeviceChannelRequest) GoString() string {
	return s.String()
}

func (s *BatchSetEdgeInstanceDeviceChannelRequest) SetApiProduct(v string) *BatchSetEdgeInstanceDeviceChannelRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelRequest) SetApiRevision(v string) *BatchSetEdgeInstanceDeviceChannelRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelRequest) SetIotInstanceId(v string) *BatchSetEdgeInstanceDeviceChannelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelRequest) SetInstanceId(v string) *BatchSetEdgeInstanceDeviceChannelRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelRequest) SetDriverId(v string) *BatchSetEdgeInstanceDeviceChannelRequest {
	s.DriverId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelRequest) SetChannelId(v string) *BatchSetEdgeInstanceDeviceChannelRequest {
	s.ChannelId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelRequest) SetIotIds(v []*string) *BatchSetEdgeInstanceDeviceChannelRequest {
	s.IotIds = v
	return s
}

type BatchSetEdgeInstanceDeviceChannelResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s BatchSetEdgeInstanceDeviceChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchSetEdgeInstanceDeviceChannelResponseBody) GoString() string {
	return s.String()
}

func (s *BatchSetEdgeInstanceDeviceChannelResponseBody) SetRequestId(v string) *BatchSetEdgeInstanceDeviceChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelResponseBody) SetSuccess(v bool) *BatchSetEdgeInstanceDeviceChannelResponseBody {
	s.Success = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelResponseBody) SetCode(v string) *BatchSetEdgeInstanceDeviceChannelResponseBody {
	s.Code = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelResponseBody) SetErrorMessage(v string) *BatchSetEdgeInstanceDeviceChannelResponseBody {
	s.ErrorMessage = &v
	return s
}

type BatchSetEdgeInstanceDeviceChannelResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchSetEdgeInstanceDeviceChannelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchSetEdgeInstanceDeviceChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchSetEdgeInstanceDeviceChannelResponse) GoString() string {
	return s.String()
}

func (s *BatchSetEdgeInstanceDeviceChannelResponse) SetHeaders(v map[string]*string) *BatchSetEdgeInstanceDeviceChannelResponse {
	s.Headers = v
	return s
}

func (s *BatchSetEdgeInstanceDeviceChannelResponse) SetBody(v *BatchSetEdgeInstanceDeviceChannelResponseBody) *BatchSetEdgeInstanceDeviceChannelResponse {
	s.Body = v
	return s
}

type BatchSetEdgeInstanceDeviceConfigRequest struct {
	ApiProduct    *string                                                 `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string                                                 `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string                                                 `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string                                                 `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DeviceConfigs []*BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs `json:"DeviceConfigs,omitempty" xml:"DeviceConfigs,omitempty" type:"Repeated"`
}

func (s BatchSetEdgeInstanceDeviceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchSetEdgeInstanceDeviceConfigRequest) GoString() string {
	return s.String()
}

func (s *BatchSetEdgeInstanceDeviceConfigRequest) SetApiProduct(v string) *BatchSetEdgeInstanceDeviceConfigRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceConfigRequest) SetApiRevision(v string) *BatchSetEdgeInstanceDeviceConfigRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceConfigRequest) SetIotInstanceId(v string) *BatchSetEdgeInstanceDeviceConfigRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceConfigRequest) SetInstanceId(v string) *BatchSetEdgeInstanceDeviceConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceConfigRequest) SetDeviceConfigs(v []*BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs) *BatchSetEdgeInstanceDeviceConfigRequest {
	s.DeviceConfigs = v
	return s
}

type BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs struct {
	IotId   *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
}

func (s BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs) String() string {
	return tea.Prettify(s)
}

func (s BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs) GoString() string {
	return s.String()
}

func (s *BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs) SetIotId(v string) *BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs {
	s.IotId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs) SetContent(v string) *BatchSetEdgeInstanceDeviceConfigRequestDeviceConfigs {
	s.Content = &v
	return s
}

type BatchSetEdgeInstanceDeviceConfigResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s BatchSetEdgeInstanceDeviceConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchSetEdgeInstanceDeviceConfigResponseBody) GoString() string {
	return s.String()
}

func (s *BatchSetEdgeInstanceDeviceConfigResponseBody) SetRequestId(v string) *BatchSetEdgeInstanceDeviceConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceConfigResponseBody) SetSuccess(v bool) *BatchSetEdgeInstanceDeviceConfigResponseBody {
	s.Success = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceConfigResponseBody) SetCode(v string) *BatchSetEdgeInstanceDeviceConfigResponseBody {
	s.Code = &v
	return s
}

func (s *BatchSetEdgeInstanceDeviceConfigResponseBody) SetErrorMessage(v string) *BatchSetEdgeInstanceDeviceConfigResponseBody {
	s.ErrorMessage = &v
	return s
}

type BatchSetEdgeInstanceDeviceConfigResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchSetEdgeInstanceDeviceConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchSetEdgeInstanceDeviceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchSetEdgeInstanceDeviceConfigResponse) GoString() string {
	return s.String()
}

func (s *BatchSetEdgeInstanceDeviceConfigResponse) SetHeaders(v map[string]*string) *BatchSetEdgeInstanceDeviceConfigResponse {
	s.Headers = v
	return s
}

func (s *BatchSetEdgeInstanceDeviceConfigResponse) SetBody(v *BatchSetEdgeInstanceDeviceConfigResponseBody) *BatchSetEdgeInstanceDeviceConfigResponse {
	s.Body = v
	return s
}

type BatchUnbindDeviceFromEdgeInstanceRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IotIds        []*string `json:"IotIds,omitempty" xml:"IotIds,omitempty" type:"Repeated"`
}

func (s BatchUnbindDeviceFromEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindDeviceFromEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *BatchUnbindDeviceFromEdgeInstanceRequest) SetApiProduct(v string) *BatchUnbindDeviceFromEdgeInstanceRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchUnbindDeviceFromEdgeInstanceRequest) SetApiRevision(v string) *BatchUnbindDeviceFromEdgeInstanceRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchUnbindDeviceFromEdgeInstanceRequest) SetIotInstanceId(v string) *BatchUnbindDeviceFromEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchUnbindDeviceFromEdgeInstanceRequest) SetInstanceId(v string) *BatchUnbindDeviceFromEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *BatchUnbindDeviceFromEdgeInstanceRequest) SetIotIds(v []*string) *BatchUnbindDeviceFromEdgeInstanceRequest {
	s.IotIds = v
	return s
}

type BatchUnbindDeviceFromEdgeInstanceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s BatchUnbindDeviceFromEdgeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindDeviceFromEdgeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *BatchUnbindDeviceFromEdgeInstanceResponseBody) SetRequestId(v string) *BatchUnbindDeviceFromEdgeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchUnbindDeviceFromEdgeInstanceResponseBody) SetSuccess(v bool) *BatchUnbindDeviceFromEdgeInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *BatchUnbindDeviceFromEdgeInstanceResponseBody) SetCode(v string) *BatchUnbindDeviceFromEdgeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *BatchUnbindDeviceFromEdgeInstanceResponseBody) SetErrorMessage(v string) *BatchUnbindDeviceFromEdgeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

type BatchUnbindDeviceFromEdgeInstanceResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchUnbindDeviceFromEdgeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchUnbindDeviceFromEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchUnbindDeviceFromEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *BatchUnbindDeviceFromEdgeInstanceResponse) SetHeaders(v map[string]*string) *BatchUnbindDeviceFromEdgeInstanceResponse {
	s.Headers = v
	return s
}

func (s *BatchUnbindDeviceFromEdgeInstanceResponse) SetBody(v *BatchUnbindDeviceFromEdgeInstanceResponseBody) *BatchUnbindDeviceFromEdgeInstanceResponse {
	s.Body = v
	return s
}

type BatchUpdateDeviceNicknameRequest struct {
	ApiProduct         *string                                               `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision        *string                                               `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId      *string                                               `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DeviceNicknameInfo []*BatchUpdateDeviceNicknameRequestDeviceNicknameInfo `json:"DeviceNicknameInfo,omitempty" xml:"DeviceNicknameInfo,omitempty" type:"Repeated"`
	RealTenantId       *string                                               `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey  *string                                               `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s BatchUpdateDeviceNicknameRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateDeviceNicknameRequest) GoString() string {
	return s.String()
}

func (s *BatchUpdateDeviceNicknameRequest) SetApiProduct(v string) *BatchUpdateDeviceNicknameRequest {
	s.ApiProduct = &v
	return s
}

func (s *BatchUpdateDeviceNicknameRequest) SetApiRevision(v string) *BatchUpdateDeviceNicknameRequest {
	s.ApiRevision = &v
	return s
}

func (s *BatchUpdateDeviceNicknameRequest) SetIotInstanceId(v string) *BatchUpdateDeviceNicknameRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BatchUpdateDeviceNicknameRequest) SetDeviceNicknameInfo(v []*BatchUpdateDeviceNicknameRequestDeviceNicknameInfo) *BatchUpdateDeviceNicknameRequest {
	s.DeviceNicknameInfo = v
	return s
}

func (s *BatchUpdateDeviceNicknameRequest) SetRealTenantId(v string) *BatchUpdateDeviceNicknameRequest {
	s.RealTenantId = &v
	return s
}

func (s *BatchUpdateDeviceNicknameRequest) SetRealTripartiteKey(v string) *BatchUpdateDeviceNicknameRequest {
	s.RealTripartiteKey = &v
	return s
}

type BatchUpdateDeviceNicknameRequestDeviceNicknameInfo struct {
	ProductKey *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	Nickname   *string `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
	IotId      *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s BatchUpdateDeviceNicknameRequestDeviceNicknameInfo) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateDeviceNicknameRequestDeviceNicknameInfo) GoString() string {
	return s.String()
}

func (s *BatchUpdateDeviceNicknameRequestDeviceNicknameInfo) SetProductKey(v string) *BatchUpdateDeviceNicknameRequestDeviceNicknameInfo {
	s.ProductKey = &v
	return s
}

func (s *BatchUpdateDeviceNicknameRequestDeviceNicknameInfo) SetDeviceName(v string) *BatchUpdateDeviceNicknameRequestDeviceNicknameInfo {
	s.DeviceName = &v
	return s
}

func (s *BatchUpdateDeviceNicknameRequestDeviceNicknameInfo) SetNickname(v string) *BatchUpdateDeviceNicknameRequestDeviceNicknameInfo {
	s.Nickname = &v
	return s
}

func (s *BatchUpdateDeviceNicknameRequestDeviceNicknameInfo) SetIotId(v string) *BatchUpdateDeviceNicknameRequestDeviceNicknameInfo {
	s.IotId = &v
	return s
}

type BatchUpdateDeviceNicknameResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s BatchUpdateDeviceNicknameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateDeviceNicknameResponseBody) GoString() string {
	return s.String()
}

func (s *BatchUpdateDeviceNicknameResponseBody) SetRequestId(v string) *BatchUpdateDeviceNicknameResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchUpdateDeviceNicknameResponseBody) SetSuccess(v bool) *BatchUpdateDeviceNicknameResponseBody {
	s.Success = &v
	return s
}

func (s *BatchUpdateDeviceNicknameResponseBody) SetCode(v string) *BatchUpdateDeviceNicknameResponseBody {
	s.Code = &v
	return s
}

func (s *BatchUpdateDeviceNicknameResponseBody) SetErrorMessage(v string) *BatchUpdateDeviceNicknameResponseBody {
	s.ErrorMessage = &v
	return s
}

type BatchUpdateDeviceNicknameResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BatchUpdateDeviceNicknameResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchUpdateDeviceNicknameResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateDeviceNicknameResponse) GoString() string {
	return s.String()
}

func (s *BatchUpdateDeviceNicknameResponse) SetHeaders(v map[string]*string) *BatchUpdateDeviceNicknameResponse {
	s.Headers = v
	return s
}

func (s *BatchUpdateDeviceNicknameResponse) SetBody(v *BatchUpdateDeviceNicknameResponseBody) *BatchUpdateDeviceNicknameResponse {
	s.Body = v
	return s
}

type BindApplicationToEdgeInstanceRequest struct {
	ApiProduct         *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision        *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId      *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ApplicationId      *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
	ApplicationVersion *string `json:"ApplicationVersion,omitempty" xml:"ApplicationVersion,omitempty"`
}

func (s BindApplicationToEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s BindApplicationToEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *BindApplicationToEdgeInstanceRequest) SetApiProduct(v string) *BindApplicationToEdgeInstanceRequest {
	s.ApiProduct = &v
	return s
}

func (s *BindApplicationToEdgeInstanceRequest) SetApiRevision(v string) *BindApplicationToEdgeInstanceRequest {
	s.ApiRevision = &v
	return s
}

func (s *BindApplicationToEdgeInstanceRequest) SetIotInstanceId(v string) *BindApplicationToEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BindApplicationToEdgeInstanceRequest) SetInstanceId(v string) *BindApplicationToEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *BindApplicationToEdgeInstanceRequest) SetApplicationId(v string) *BindApplicationToEdgeInstanceRequest {
	s.ApplicationId = &v
	return s
}

func (s *BindApplicationToEdgeInstanceRequest) SetApplicationVersion(v string) *BindApplicationToEdgeInstanceRequest {
	s.ApplicationVersion = &v
	return s
}

type BindApplicationToEdgeInstanceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s BindApplicationToEdgeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindApplicationToEdgeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *BindApplicationToEdgeInstanceResponseBody) SetRequestId(v string) *BindApplicationToEdgeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *BindApplicationToEdgeInstanceResponseBody) SetSuccess(v bool) *BindApplicationToEdgeInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *BindApplicationToEdgeInstanceResponseBody) SetCode(v string) *BindApplicationToEdgeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *BindApplicationToEdgeInstanceResponseBody) SetErrorMessage(v string) *BindApplicationToEdgeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

type BindApplicationToEdgeInstanceResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindApplicationToEdgeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindApplicationToEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s BindApplicationToEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *BindApplicationToEdgeInstanceResponse) SetHeaders(v map[string]*string) *BindApplicationToEdgeInstanceResponse {
	s.Headers = v
	return s
}

func (s *BindApplicationToEdgeInstanceResponse) SetBody(v *BindApplicationToEdgeInstanceResponseBody) *BindApplicationToEdgeInstanceResponse {
	s.Body = v
	return s
}

type BindDriverToEdgeInstanceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	DriverVersion *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty"`
	OrderId       *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s BindDriverToEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s BindDriverToEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *BindDriverToEdgeInstanceRequest) SetApiProduct(v string) *BindDriverToEdgeInstanceRequest {
	s.ApiProduct = &v
	return s
}

func (s *BindDriverToEdgeInstanceRequest) SetApiRevision(v string) *BindDriverToEdgeInstanceRequest {
	s.ApiRevision = &v
	return s
}

func (s *BindDriverToEdgeInstanceRequest) SetIotInstanceId(v string) *BindDriverToEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BindDriverToEdgeInstanceRequest) SetInstanceId(v string) *BindDriverToEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *BindDriverToEdgeInstanceRequest) SetDriverId(v string) *BindDriverToEdgeInstanceRequest {
	s.DriverId = &v
	return s
}

func (s *BindDriverToEdgeInstanceRequest) SetDriverVersion(v string) *BindDriverToEdgeInstanceRequest {
	s.DriverVersion = &v
	return s
}

func (s *BindDriverToEdgeInstanceRequest) SetOrderId(v string) *BindDriverToEdgeInstanceRequest {
	s.OrderId = &v
	return s
}

type BindDriverToEdgeInstanceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s BindDriverToEdgeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindDriverToEdgeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *BindDriverToEdgeInstanceResponseBody) SetRequestId(v string) *BindDriverToEdgeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *BindDriverToEdgeInstanceResponseBody) SetSuccess(v bool) *BindDriverToEdgeInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *BindDriverToEdgeInstanceResponseBody) SetCode(v string) *BindDriverToEdgeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *BindDriverToEdgeInstanceResponseBody) SetErrorMessage(v string) *BindDriverToEdgeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

type BindDriverToEdgeInstanceResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindDriverToEdgeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindDriverToEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s BindDriverToEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *BindDriverToEdgeInstanceResponse) SetHeaders(v map[string]*string) *BindDriverToEdgeInstanceResponse {
	s.Headers = v
	return s
}

func (s *BindDriverToEdgeInstanceResponse) SetBody(v *BindDriverToEdgeInstanceResponseBody) *BindDriverToEdgeInstanceResponse {
	s.Body = v
	return s
}

type BindGatewayToEdgeInstanceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s BindGatewayToEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s BindGatewayToEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *BindGatewayToEdgeInstanceRequest) SetApiProduct(v string) *BindGatewayToEdgeInstanceRequest {
	s.ApiProduct = &v
	return s
}

func (s *BindGatewayToEdgeInstanceRequest) SetApiRevision(v string) *BindGatewayToEdgeInstanceRequest {
	s.ApiRevision = &v
	return s
}

func (s *BindGatewayToEdgeInstanceRequest) SetIotInstanceId(v string) *BindGatewayToEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BindGatewayToEdgeInstanceRequest) SetInstanceId(v string) *BindGatewayToEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *BindGatewayToEdgeInstanceRequest) SetProductKey(v string) *BindGatewayToEdgeInstanceRequest {
	s.ProductKey = &v
	return s
}

func (s *BindGatewayToEdgeInstanceRequest) SetDeviceName(v string) *BindGatewayToEdgeInstanceRequest {
	s.DeviceName = &v
	return s
}

func (s *BindGatewayToEdgeInstanceRequest) SetIotId(v string) *BindGatewayToEdgeInstanceRequest {
	s.IotId = &v
	return s
}

type BindGatewayToEdgeInstanceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s BindGatewayToEdgeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindGatewayToEdgeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *BindGatewayToEdgeInstanceResponseBody) SetRequestId(v string) *BindGatewayToEdgeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *BindGatewayToEdgeInstanceResponseBody) SetSuccess(v bool) *BindGatewayToEdgeInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *BindGatewayToEdgeInstanceResponseBody) SetCode(v string) *BindGatewayToEdgeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *BindGatewayToEdgeInstanceResponseBody) SetErrorMessage(v string) *BindGatewayToEdgeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

type BindGatewayToEdgeInstanceResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindGatewayToEdgeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindGatewayToEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s BindGatewayToEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *BindGatewayToEdgeInstanceResponse) SetHeaders(v map[string]*string) *BindGatewayToEdgeInstanceResponse {
	s.Headers = v
	return s
}

func (s *BindGatewayToEdgeInstanceResponse) SetBody(v *BindGatewayToEdgeInstanceResponseBody) *BindGatewayToEdgeInstanceResponse {
	s.Body = v
	return s
}

type BindRoleToEdgeInstanceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RoleArn       *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	RoleName      *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
}

func (s BindRoleToEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s BindRoleToEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *BindRoleToEdgeInstanceRequest) SetApiProduct(v string) *BindRoleToEdgeInstanceRequest {
	s.ApiProduct = &v
	return s
}

func (s *BindRoleToEdgeInstanceRequest) SetApiRevision(v string) *BindRoleToEdgeInstanceRequest {
	s.ApiRevision = &v
	return s
}

func (s *BindRoleToEdgeInstanceRequest) SetIotInstanceId(v string) *BindRoleToEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BindRoleToEdgeInstanceRequest) SetInstanceId(v string) *BindRoleToEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *BindRoleToEdgeInstanceRequest) SetRoleArn(v string) *BindRoleToEdgeInstanceRequest {
	s.RoleArn = &v
	return s
}

func (s *BindRoleToEdgeInstanceRequest) SetRoleName(v string) *BindRoleToEdgeInstanceRequest {
	s.RoleName = &v
	return s
}

type BindRoleToEdgeInstanceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s BindRoleToEdgeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindRoleToEdgeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *BindRoleToEdgeInstanceResponseBody) SetRequestId(v string) *BindRoleToEdgeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *BindRoleToEdgeInstanceResponseBody) SetSuccess(v bool) *BindRoleToEdgeInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *BindRoleToEdgeInstanceResponseBody) SetCode(v string) *BindRoleToEdgeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *BindRoleToEdgeInstanceResponseBody) SetErrorMessage(v string) *BindRoleToEdgeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

type BindRoleToEdgeInstanceResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindRoleToEdgeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindRoleToEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s BindRoleToEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *BindRoleToEdgeInstanceResponse) SetHeaders(v map[string]*string) *BindRoleToEdgeInstanceResponse {
	s.Headers = v
	return s
}

func (s *BindRoleToEdgeInstanceResponse) SetBody(v *BindRoleToEdgeInstanceResponseBody) *BindRoleToEdgeInstanceResponse {
	s.Body = v
	return s
}

type BindSceneRuleToEdgeInstanceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s BindSceneRuleToEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s BindSceneRuleToEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *BindSceneRuleToEdgeInstanceRequest) SetApiProduct(v string) *BindSceneRuleToEdgeInstanceRequest {
	s.ApiProduct = &v
	return s
}

func (s *BindSceneRuleToEdgeInstanceRequest) SetApiRevision(v string) *BindSceneRuleToEdgeInstanceRequest {
	s.ApiRevision = &v
	return s
}

func (s *BindSceneRuleToEdgeInstanceRequest) SetIotInstanceId(v string) *BindSceneRuleToEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *BindSceneRuleToEdgeInstanceRequest) SetInstanceId(v string) *BindSceneRuleToEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *BindSceneRuleToEdgeInstanceRequest) SetRuleId(v string) *BindSceneRuleToEdgeInstanceRequest {
	s.RuleId = &v
	return s
}

type BindSceneRuleToEdgeInstanceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s BindSceneRuleToEdgeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindSceneRuleToEdgeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *BindSceneRuleToEdgeInstanceResponseBody) SetRequestId(v string) *BindSceneRuleToEdgeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *BindSceneRuleToEdgeInstanceResponseBody) SetSuccess(v bool) *BindSceneRuleToEdgeInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *BindSceneRuleToEdgeInstanceResponseBody) SetErrorMessage(v string) *BindSceneRuleToEdgeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *BindSceneRuleToEdgeInstanceResponseBody) SetCode(v string) *BindSceneRuleToEdgeInstanceResponseBody {
	s.Code = &v
	return s
}

type BindSceneRuleToEdgeInstanceResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindSceneRuleToEdgeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindSceneRuleToEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s BindSceneRuleToEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *BindSceneRuleToEdgeInstanceResponse) SetHeaders(v map[string]*string) *BindSceneRuleToEdgeInstanceResponse {
	s.Headers = v
	return s
}

func (s *BindSceneRuleToEdgeInstanceResponse) SetBody(v *BindSceneRuleToEdgeInstanceResponseBody) *BindSceneRuleToEdgeInstanceResponse {
	s.Body = v
	return s
}

type CancelJobRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s CancelJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelJobRequest) GoString() string {
	return s.String()
}

func (s *CancelJobRequest) SetApiProduct(v string) *CancelJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *CancelJobRequest) SetApiRevision(v string) *CancelJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *CancelJobRequest) SetIotInstanceId(v string) *CancelJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CancelJobRequest) SetJobId(v string) *CancelJobRequest {
	s.JobId = &v
	return s
}

type CancelJobResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CancelJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelJobResponseBody) GoString() string {
	return s.String()
}

func (s *CancelJobResponseBody) SetRequestId(v string) *CancelJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelJobResponseBody) SetSuccess(v bool) *CancelJobResponseBody {
	s.Success = &v
	return s
}

func (s *CancelJobResponseBody) SetCode(v string) *CancelJobResponseBody {
	s.Code = &v
	return s
}

func (s *CancelJobResponseBody) SetErrorMessage(v string) *CancelJobResponseBody {
	s.ErrorMessage = &v
	return s
}

type CancelJobResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CancelJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelJobResponse) GoString() string {
	return s.String()
}

func (s *CancelJobResponse) SetHeaders(v map[string]*string) *CancelJobResponse {
	s.Headers = v
	return s
}

func (s *CancelJobResponse) SetBody(v *CancelJobResponseBody) *CancelJobResponse {
	s.Body = v
	return s
}

type CancelOTAStrategyByJobRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s CancelOTAStrategyByJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelOTAStrategyByJobRequest) GoString() string {
	return s.String()
}

func (s *CancelOTAStrategyByJobRequest) SetApiProduct(v string) *CancelOTAStrategyByJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *CancelOTAStrategyByJobRequest) SetApiRevision(v string) *CancelOTAStrategyByJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *CancelOTAStrategyByJobRequest) SetIotInstanceId(v string) *CancelOTAStrategyByJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CancelOTAStrategyByJobRequest) SetJobId(v string) *CancelOTAStrategyByJobRequest {
	s.JobId = &v
	return s
}

type CancelOTAStrategyByJobResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CancelOTAStrategyByJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelOTAStrategyByJobResponseBody) GoString() string {
	return s.String()
}

func (s *CancelOTAStrategyByJobResponseBody) SetRequestId(v string) *CancelOTAStrategyByJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelOTAStrategyByJobResponseBody) SetSuccess(v bool) *CancelOTAStrategyByJobResponseBody {
	s.Success = &v
	return s
}

func (s *CancelOTAStrategyByJobResponseBody) SetCode(v string) *CancelOTAStrategyByJobResponseBody {
	s.Code = &v
	return s
}

func (s *CancelOTAStrategyByJobResponseBody) SetErrorMessage(v string) *CancelOTAStrategyByJobResponseBody {
	s.ErrorMessage = &v
	return s
}

type CancelOTAStrategyByJobResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CancelOTAStrategyByJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelOTAStrategyByJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelOTAStrategyByJobResponse) GoString() string {
	return s.String()
}

func (s *CancelOTAStrategyByJobResponse) SetHeaders(v map[string]*string) *CancelOTAStrategyByJobResponse {
	s.Headers = v
	return s
}

func (s *CancelOTAStrategyByJobResponse) SetBody(v *CancelOTAStrategyByJobResponseBody) *CancelOTAStrategyByJobResponse {
	s.Body = v
	return s
}

type CancelOTATaskByDeviceRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareId    *string   `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty"`
	ProductKey    *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    []*string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" type:"Repeated"`
	JobId         *string   `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s CancelOTATaskByDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelOTATaskByDeviceRequest) GoString() string {
	return s.String()
}

func (s *CancelOTATaskByDeviceRequest) SetApiProduct(v string) *CancelOTATaskByDeviceRequest {
	s.ApiProduct = &v
	return s
}

func (s *CancelOTATaskByDeviceRequest) SetApiRevision(v string) *CancelOTATaskByDeviceRequest {
	s.ApiRevision = &v
	return s
}

func (s *CancelOTATaskByDeviceRequest) SetIotInstanceId(v string) *CancelOTATaskByDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CancelOTATaskByDeviceRequest) SetFirmwareId(v string) *CancelOTATaskByDeviceRequest {
	s.FirmwareId = &v
	return s
}

func (s *CancelOTATaskByDeviceRequest) SetProductKey(v string) *CancelOTATaskByDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *CancelOTATaskByDeviceRequest) SetDeviceName(v []*string) *CancelOTATaskByDeviceRequest {
	s.DeviceName = v
	return s
}

func (s *CancelOTATaskByDeviceRequest) SetJobId(v string) *CancelOTATaskByDeviceRequest {
	s.JobId = &v
	return s
}

type CancelOTATaskByDeviceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CancelOTATaskByDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelOTATaskByDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *CancelOTATaskByDeviceResponseBody) SetRequestId(v string) *CancelOTATaskByDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelOTATaskByDeviceResponseBody) SetSuccess(v bool) *CancelOTATaskByDeviceResponseBody {
	s.Success = &v
	return s
}

func (s *CancelOTATaskByDeviceResponseBody) SetCode(v string) *CancelOTATaskByDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *CancelOTATaskByDeviceResponseBody) SetErrorMessage(v string) *CancelOTATaskByDeviceResponseBody {
	s.ErrorMessage = &v
	return s
}

type CancelOTATaskByDeviceResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CancelOTATaskByDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelOTATaskByDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelOTATaskByDeviceResponse) GoString() string {
	return s.String()
}

func (s *CancelOTATaskByDeviceResponse) SetHeaders(v map[string]*string) *CancelOTATaskByDeviceResponse {
	s.Headers = v
	return s
}

func (s *CancelOTATaskByDeviceResponse) SetBody(v *CancelOTATaskByDeviceResponseBody) *CancelOTATaskByDeviceResponse {
	s.Body = v
	return s
}

type CancelOTATaskByJobRequest struct {
	ApiProduct           *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision          *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId        *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	CancelScheduledTask  *bool   `json:"CancelScheduledTask,omitempty" xml:"CancelScheduledTask,omitempty"`
	CancelQueuedTask     *bool   `json:"CancelQueuedTask,omitempty" xml:"CancelQueuedTask,omitempty"`
	CancelInProgressTask *bool   `json:"CancelInProgressTask,omitempty" xml:"CancelInProgressTask,omitempty"`
	CancelNotifiedTask   *bool   `json:"CancelNotifiedTask,omitempty" xml:"CancelNotifiedTask,omitempty"`
}

func (s CancelOTATaskByJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelOTATaskByJobRequest) GoString() string {
	return s.String()
}

func (s *CancelOTATaskByJobRequest) SetApiProduct(v string) *CancelOTATaskByJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *CancelOTATaskByJobRequest) SetApiRevision(v string) *CancelOTATaskByJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *CancelOTATaskByJobRequest) SetIotInstanceId(v string) *CancelOTATaskByJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CancelOTATaskByJobRequest) SetJobId(v string) *CancelOTATaskByJobRequest {
	s.JobId = &v
	return s
}

func (s *CancelOTATaskByJobRequest) SetCancelScheduledTask(v bool) *CancelOTATaskByJobRequest {
	s.CancelScheduledTask = &v
	return s
}

func (s *CancelOTATaskByJobRequest) SetCancelQueuedTask(v bool) *CancelOTATaskByJobRequest {
	s.CancelQueuedTask = &v
	return s
}

func (s *CancelOTATaskByJobRequest) SetCancelInProgressTask(v bool) *CancelOTATaskByJobRequest {
	s.CancelInProgressTask = &v
	return s
}

func (s *CancelOTATaskByJobRequest) SetCancelNotifiedTask(v bool) *CancelOTATaskByJobRequest {
	s.CancelNotifiedTask = &v
	return s
}

type CancelOTATaskByJobResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CancelOTATaskByJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelOTATaskByJobResponseBody) GoString() string {
	return s.String()
}

func (s *CancelOTATaskByJobResponseBody) SetRequestId(v string) *CancelOTATaskByJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelOTATaskByJobResponseBody) SetSuccess(v bool) *CancelOTATaskByJobResponseBody {
	s.Success = &v
	return s
}

func (s *CancelOTATaskByJobResponseBody) SetCode(v string) *CancelOTATaskByJobResponseBody {
	s.Code = &v
	return s
}

func (s *CancelOTATaskByJobResponseBody) SetErrorMessage(v string) *CancelOTATaskByJobResponseBody {
	s.ErrorMessage = &v
	return s
}

type CancelOTATaskByJobResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CancelOTATaskByJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelOTATaskByJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelOTATaskByJobResponse) GoString() string {
	return s.String()
}

func (s *CancelOTATaskByJobResponse) SetHeaders(v map[string]*string) *CancelOTATaskByJobResponse {
	s.Headers = v
	return s
}

func (s *CancelOTATaskByJobResponse) SetBody(v *CancelOTATaskByJobResponseBody) *CancelOTATaskByJobResponse {
	s.Body = v
	return s
}

type ClearEdgeInstanceDriverConfigsRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
}

func (s ClearEdgeInstanceDriverConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s ClearEdgeInstanceDriverConfigsRequest) GoString() string {
	return s.String()
}

func (s *ClearEdgeInstanceDriverConfigsRequest) SetApiProduct(v string) *ClearEdgeInstanceDriverConfigsRequest {
	s.ApiProduct = &v
	return s
}

func (s *ClearEdgeInstanceDriverConfigsRequest) SetApiRevision(v string) *ClearEdgeInstanceDriverConfigsRequest {
	s.ApiRevision = &v
	return s
}

func (s *ClearEdgeInstanceDriverConfigsRequest) SetIotInstanceId(v string) *ClearEdgeInstanceDriverConfigsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ClearEdgeInstanceDriverConfigsRequest) SetInstanceId(v string) *ClearEdgeInstanceDriverConfigsRequest {
	s.InstanceId = &v
	return s
}

func (s *ClearEdgeInstanceDriverConfigsRequest) SetDriverId(v string) *ClearEdgeInstanceDriverConfigsRequest {
	s.DriverId = &v
	return s
}

type ClearEdgeInstanceDriverConfigsResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s ClearEdgeInstanceDriverConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ClearEdgeInstanceDriverConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *ClearEdgeInstanceDriverConfigsResponseBody) SetRequestId(v string) *ClearEdgeInstanceDriverConfigsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ClearEdgeInstanceDriverConfigsResponseBody) SetSuccess(v bool) *ClearEdgeInstanceDriverConfigsResponseBody {
	s.Success = &v
	return s
}

func (s *ClearEdgeInstanceDriverConfigsResponseBody) SetCode(v string) *ClearEdgeInstanceDriverConfigsResponseBody {
	s.Code = &v
	return s
}

func (s *ClearEdgeInstanceDriverConfigsResponseBody) SetErrorMessage(v string) *ClearEdgeInstanceDriverConfigsResponseBody {
	s.ErrorMessage = &v
	return s
}

type ClearEdgeInstanceDriverConfigsResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ClearEdgeInstanceDriverConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ClearEdgeInstanceDriverConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s ClearEdgeInstanceDriverConfigsResponse) GoString() string {
	return s.String()
}

func (s *ClearEdgeInstanceDriverConfigsResponse) SetHeaders(v map[string]*string) *ClearEdgeInstanceDriverConfigsResponse {
	s.Headers = v
	return s
}

func (s *ClearEdgeInstanceDriverConfigsResponse) SetBody(v *ClearEdgeInstanceDriverConfigsResponseBody) *ClearEdgeInstanceDriverConfigsResponse {
	s.Body = v
	return s
}

type CloseEdgeInstanceDeploymentRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s CloseEdgeInstanceDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s CloseEdgeInstanceDeploymentRequest) GoString() string {
	return s.String()
}

func (s *CloseEdgeInstanceDeploymentRequest) SetApiProduct(v string) *CloseEdgeInstanceDeploymentRequest {
	s.ApiProduct = &v
	return s
}

func (s *CloseEdgeInstanceDeploymentRequest) SetApiRevision(v string) *CloseEdgeInstanceDeploymentRequest {
	s.ApiRevision = &v
	return s
}

func (s *CloseEdgeInstanceDeploymentRequest) SetIotInstanceId(v string) *CloseEdgeInstanceDeploymentRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CloseEdgeInstanceDeploymentRequest) SetInstanceId(v string) *CloseEdgeInstanceDeploymentRequest {
	s.InstanceId = &v
	return s
}

type CloseEdgeInstanceDeploymentResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CloseEdgeInstanceDeploymentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CloseEdgeInstanceDeploymentResponseBody) GoString() string {
	return s.String()
}

func (s *CloseEdgeInstanceDeploymentResponseBody) SetRequestId(v string) *CloseEdgeInstanceDeploymentResponseBody {
	s.RequestId = &v
	return s
}

func (s *CloseEdgeInstanceDeploymentResponseBody) SetSuccess(v bool) *CloseEdgeInstanceDeploymentResponseBody {
	s.Success = &v
	return s
}

func (s *CloseEdgeInstanceDeploymentResponseBody) SetCode(v string) *CloseEdgeInstanceDeploymentResponseBody {
	s.Code = &v
	return s
}

func (s *CloseEdgeInstanceDeploymentResponseBody) SetErrorMessage(v string) *CloseEdgeInstanceDeploymentResponseBody {
	s.ErrorMessage = &v
	return s
}

type CloseEdgeInstanceDeploymentResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CloseEdgeInstanceDeploymentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CloseEdgeInstanceDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s CloseEdgeInstanceDeploymentResponse) GoString() string {
	return s.String()
}

func (s *CloseEdgeInstanceDeploymentResponse) SetHeaders(v map[string]*string) *CloseEdgeInstanceDeploymentResponse {
	s.Headers = v
	return s
}

func (s *CloseEdgeInstanceDeploymentResponse) SetBody(v *CloseEdgeInstanceDeploymentResponseBody) *CloseEdgeInstanceDeploymentResponse {
	s.Body = v
	return s
}

type CopyThingModelRequest struct {
	ApiProduct         *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision        *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId      *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId    *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SourceProductKey   *string `json:"SourceProductKey,omitempty" xml:"SourceProductKey,omitempty"`
	TargetProductKey   *string `json:"TargetProductKey,omitempty" xml:"TargetProductKey,omitempty"`
	SourceModelVersion *string `json:"SourceModelVersion,omitempty" xml:"SourceModelVersion,omitempty"`
	RealTenantId       *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey  *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s CopyThingModelRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyThingModelRequest) GoString() string {
	return s.String()
}

func (s *CopyThingModelRequest) SetApiProduct(v string) *CopyThingModelRequest {
	s.ApiProduct = &v
	return s
}

func (s *CopyThingModelRequest) SetApiRevision(v string) *CopyThingModelRequest {
	s.ApiRevision = &v
	return s
}

func (s *CopyThingModelRequest) SetIotInstanceId(v string) *CopyThingModelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CopyThingModelRequest) SetResourceGroupId(v string) *CopyThingModelRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CopyThingModelRequest) SetSourceProductKey(v string) *CopyThingModelRequest {
	s.SourceProductKey = &v
	return s
}

func (s *CopyThingModelRequest) SetTargetProductKey(v string) *CopyThingModelRequest {
	s.TargetProductKey = &v
	return s
}

func (s *CopyThingModelRequest) SetSourceModelVersion(v string) *CopyThingModelRequest {
	s.SourceModelVersion = &v
	return s
}

func (s *CopyThingModelRequest) SetRealTenantId(v string) *CopyThingModelRequest {
	s.RealTenantId = &v
	return s
}

func (s *CopyThingModelRequest) SetRealTripartiteKey(v string) *CopyThingModelRequest {
	s.RealTripartiteKey = &v
	return s
}

type CopyThingModelResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CopyThingModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CopyThingModelResponseBody) GoString() string {
	return s.String()
}

func (s *CopyThingModelResponseBody) SetRequestId(v string) *CopyThingModelResponseBody {
	s.RequestId = &v
	return s
}

func (s *CopyThingModelResponseBody) SetSuccess(v bool) *CopyThingModelResponseBody {
	s.Success = &v
	return s
}

func (s *CopyThingModelResponseBody) SetCode(v string) *CopyThingModelResponseBody {
	s.Code = &v
	return s
}

func (s *CopyThingModelResponseBody) SetErrorMessage(v string) *CopyThingModelResponseBody {
	s.ErrorMessage = &v
	return s
}

type CopyThingModelResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CopyThingModelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CopyThingModelResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyThingModelResponse) GoString() string {
	return s.String()
}

func (s *CopyThingModelResponse) SetHeaders(v map[string]*string) *CopyThingModelResponse {
	s.Headers = v
	return s
}

func (s *CopyThingModelResponse) SetBody(v *CopyThingModelResponseBody) *CopyThingModelResponse {
	s.Body = v
	return s
}

type CreateConsumerGroupRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupName     *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s CreateConsumerGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateConsumerGroupRequest) SetApiProduct(v string) *CreateConsumerGroupRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateConsumerGroupRequest) SetApiRevision(v string) *CreateConsumerGroupRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateConsumerGroupRequest) SetIotInstanceId(v string) *CreateConsumerGroupRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateConsumerGroupRequest) SetGroupName(v string) *CreateConsumerGroupRequest {
	s.GroupName = &v
	return s
}

type CreateConsumerGroupResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	GroupId      *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s CreateConsumerGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateConsumerGroupResponseBody) SetRequestId(v string) *CreateConsumerGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateConsumerGroupResponseBody) SetSuccess(v bool) *CreateConsumerGroupResponseBody {
	s.Success = &v
	return s
}

func (s *CreateConsumerGroupResponseBody) SetErrorMessage(v string) *CreateConsumerGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateConsumerGroupResponseBody) SetGroupId(v string) *CreateConsumerGroupResponseBody {
	s.GroupId = &v
	return s
}

func (s *CreateConsumerGroupResponseBody) SetCode(v string) *CreateConsumerGroupResponseBody {
	s.Code = &v
	return s
}

type CreateConsumerGroupResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateConsumerGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateConsumerGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateConsumerGroupResponse) SetHeaders(v map[string]*string) *CreateConsumerGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateConsumerGroupResponse) SetBody(v *CreateConsumerGroupResponseBody) *CreateConsumerGroupResponse {
	s.Body = v
	return s
}

type CreateConsumerGroupSubscribeRelationRequest struct {
	ApiProduct      *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision     *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	ConsumerGroupId *string `json:"ConsumerGroupId,omitempty" xml:"ConsumerGroupId,omitempty"`
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
}

func (s CreateConsumerGroupSubscribeRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerGroupSubscribeRelationRequest) GoString() string {
	return s.String()
}

func (s *CreateConsumerGroupSubscribeRelationRequest) SetApiProduct(v string) *CreateConsumerGroupSubscribeRelationRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateConsumerGroupSubscribeRelationRequest) SetApiRevision(v string) *CreateConsumerGroupSubscribeRelationRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateConsumerGroupSubscribeRelationRequest) SetConsumerGroupId(v string) *CreateConsumerGroupSubscribeRelationRequest {
	s.ConsumerGroupId = &v
	return s
}

func (s *CreateConsumerGroupSubscribeRelationRequest) SetIotInstanceId(v string) *CreateConsumerGroupSubscribeRelationRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateConsumerGroupSubscribeRelationRequest) SetProductKey(v string) *CreateConsumerGroupSubscribeRelationRequest {
	s.ProductKey = &v
	return s
}

type CreateConsumerGroupSubscribeRelationResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CreateConsumerGroupSubscribeRelationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerGroupSubscribeRelationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateConsumerGroupSubscribeRelationResponseBody) SetRequestId(v string) *CreateConsumerGroupSubscribeRelationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateConsumerGroupSubscribeRelationResponseBody) SetSuccess(v bool) *CreateConsumerGroupSubscribeRelationResponseBody {
	s.Success = &v
	return s
}

func (s *CreateConsumerGroupSubscribeRelationResponseBody) SetCode(v string) *CreateConsumerGroupSubscribeRelationResponseBody {
	s.Code = &v
	return s
}

func (s *CreateConsumerGroupSubscribeRelationResponseBody) SetErrorMessage(v string) *CreateConsumerGroupSubscribeRelationResponseBody {
	s.ErrorMessage = &v
	return s
}

type CreateConsumerGroupSubscribeRelationResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateConsumerGroupSubscribeRelationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateConsumerGroupSubscribeRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerGroupSubscribeRelationResponse) GoString() string {
	return s.String()
}

func (s *CreateConsumerGroupSubscribeRelationResponse) SetHeaders(v map[string]*string) *CreateConsumerGroupSubscribeRelationResponse {
	s.Headers = v
	return s
}

func (s *CreateConsumerGroupSubscribeRelationResponse) SetBody(v *CreateConsumerGroupSubscribeRelationResponseBody) *CreateConsumerGroupSubscribeRelationResponse {
	s.Body = v
	return s
}

type CreateDataAPIServiceRequest struct {
	ApiProduct    *string                                     `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string                                     `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	DisplayName   *string                                     `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	OriginSql     *string                                     `json:"OriginSql,omitempty" xml:"OriginSql,omitempty"`
	RequestParam  []*CreateDataAPIServiceRequestRequestParam  `json:"RequestParam,omitempty" xml:"RequestParam,omitempty" type:"Repeated"`
	Desc          *string                                     `json:"Desc,omitempty" xml:"Desc,omitempty"`
	ResponseParam []*CreateDataAPIServiceRequestResponseParam `json:"ResponseParam,omitempty" xml:"ResponseParam,omitempty" type:"Repeated"`
	TemplateSql   *string                                     `json:"TemplateSql,omitempty" xml:"TemplateSql,omitempty"`
	ApiPath       *string                                     `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	IotInstanceId *string                                     `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
}

func (s CreateDataAPIServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataAPIServiceRequest) GoString() string {
	return s.String()
}

func (s *CreateDataAPIServiceRequest) SetApiProduct(v string) *CreateDataAPIServiceRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateDataAPIServiceRequest) SetApiRevision(v string) *CreateDataAPIServiceRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateDataAPIServiceRequest) SetDisplayName(v string) *CreateDataAPIServiceRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateDataAPIServiceRequest) SetOriginSql(v string) *CreateDataAPIServiceRequest {
	s.OriginSql = &v
	return s
}

func (s *CreateDataAPIServiceRequest) SetRequestParam(v []*CreateDataAPIServiceRequestRequestParam) *CreateDataAPIServiceRequest {
	s.RequestParam = v
	return s
}

func (s *CreateDataAPIServiceRequest) SetDesc(v string) *CreateDataAPIServiceRequest {
	s.Desc = &v
	return s
}

func (s *CreateDataAPIServiceRequest) SetResponseParam(v []*CreateDataAPIServiceRequestResponseParam) *CreateDataAPIServiceRequest {
	s.ResponseParam = v
	return s
}

func (s *CreateDataAPIServiceRequest) SetTemplateSql(v string) *CreateDataAPIServiceRequest {
	s.TemplateSql = &v
	return s
}

func (s *CreateDataAPIServiceRequest) SetApiPath(v string) *CreateDataAPIServiceRequest {
	s.ApiPath = &v
	return s
}

func (s *CreateDataAPIServiceRequest) SetIotInstanceId(v string) *CreateDataAPIServiceRequest {
	s.IotInstanceId = &v
	return s
}

type CreateDataAPIServiceRequestRequestParam struct {
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Desc     *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Example  *string `json:"Example,omitempty" xml:"Example,omitempty"`
	Required *bool   `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s CreateDataAPIServiceRequestRequestParam) String() string {
	return tea.Prettify(s)
}

func (s CreateDataAPIServiceRequestRequestParam) GoString() string {
	return s.String()
}

func (s *CreateDataAPIServiceRequestRequestParam) SetName(v string) *CreateDataAPIServiceRequestRequestParam {
	s.Name = &v
	return s
}

func (s *CreateDataAPIServiceRequestRequestParam) SetType(v string) *CreateDataAPIServiceRequestRequestParam {
	s.Type = &v
	return s
}

func (s *CreateDataAPIServiceRequestRequestParam) SetDesc(v string) *CreateDataAPIServiceRequestRequestParam {
	s.Desc = &v
	return s
}

func (s *CreateDataAPIServiceRequestRequestParam) SetExample(v string) *CreateDataAPIServiceRequestRequestParam {
	s.Example = &v
	return s
}

func (s *CreateDataAPIServiceRequestRequestParam) SetRequired(v bool) *CreateDataAPIServiceRequestRequestParam {
	s.Required = &v
	return s
}

type CreateDataAPIServiceRequestResponseParam struct {
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Desc     *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Example  *string `json:"Example,omitempty" xml:"Example,omitempty"`
	Required *bool   `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s CreateDataAPIServiceRequestResponseParam) String() string {
	return tea.Prettify(s)
}

func (s CreateDataAPIServiceRequestResponseParam) GoString() string {
	return s.String()
}

func (s *CreateDataAPIServiceRequestResponseParam) SetName(v string) *CreateDataAPIServiceRequestResponseParam {
	s.Name = &v
	return s
}

func (s *CreateDataAPIServiceRequestResponseParam) SetType(v string) *CreateDataAPIServiceRequestResponseParam {
	s.Type = &v
	return s
}

func (s *CreateDataAPIServiceRequestResponseParam) SetDesc(v string) *CreateDataAPIServiceRequestResponseParam {
	s.Desc = &v
	return s
}

func (s *CreateDataAPIServiceRequestResponseParam) SetExample(v string) *CreateDataAPIServiceRequestResponseParam {
	s.Example = &v
	return s
}

func (s *CreateDataAPIServiceRequestResponseParam) SetRequired(v bool) *CreateDataAPIServiceRequestResponseParam {
	s.Required = &v
	return s
}

type CreateDataAPIServiceResponseBody struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *CreateDataAPIServiceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s CreateDataAPIServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDataAPIServiceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDataAPIServiceResponseBody) SetRequestId(v string) *CreateDataAPIServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDataAPIServiceResponseBody) SetSuccess(v bool) *CreateDataAPIServiceResponseBody {
	s.Success = &v
	return s
}

func (s *CreateDataAPIServiceResponseBody) SetCode(v string) *CreateDataAPIServiceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateDataAPIServiceResponseBody) SetErrorMessage(v string) *CreateDataAPIServiceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateDataAPIServiceResponseBody) SetData(v *CreateDataAPIServiceResponseBodyData) *CreateDataAPIServiceResponseBody {
	s.Data = v
	return s
}

type CreateDataAPIServiceResponseBodyData struct {
	ApiSrn         *string `json:"ApiSrn,omitempty" xml:"ApiSrn,omitempty"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	LastUpdateTime *int64  `json:"LastUpdateTime,omitempty" xml:"LastUpdateTime,omitempty"`
}

func (s CreateDataAPIServiceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateDataAPIServiceResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateDataAPIServiceResponseBodyData) SetApiSrn(v string) *CreateDataAPIServiceResponseBodyData {
	s.ApiSrn = &v
	return s
}

func (s *CreateDataAPIServiceResponseBodyData) SetCreateTime(v int64) *CreateDataAPIServiceResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *CreateDataAPIServiceResponseBodyData) SetLastUpdateTime(v int64) *CreateDataAPIServiceResponseBodyData {
	s.LastUpdateTime = &v
	return s
}

type CreateDataAPIServiceResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDataAPIServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDataAPIServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataAPIServiceResponse) GoString() string {
	return s.String()
}

func (s *CreateDataAPIServiceResponse) SetHeaders(v map[string]*string) *CreateDataAPIServiceResponse {
	s.Headers = v
	return s
}

func (s *CreateDataAPIServiceResponse) SetBody(v *CreateDataAPIServiceResponseBody) *CreateDataAPIServiceResponse {
	s.Body = v
	return s
}

type CreateDeviceDistributeJobRequest struct {
	ApiProduct           *string                                                 `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision          *string                                                 `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	DeviceName           []*string                                               `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" type:"Repeated"`
	SourceInstanceId     *string                                                 `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	ProductKey           *string                                                 `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	TargetUid            *string                                                 `json:"TargetUid,omitempty" xml:"TargetUid,omitempty"`
	TargetAliyunId       *string                                                 `json:"TargetAliyunId,omitempty" xml:"TargetAliyunId,omitempty"`
	Captcha              *string                                                 `json:"Captcha,omitempty" xml:"Captcha,omitempty"`
	TargetInstanceConfig []*CreateDeviceDistributeJobRequestTargetInstanceConfig `json:"TargetInstanceConfig,omitempty" xml:"TargetInstanceConfig,omitempty" type:"Repeated"`
	Strategy             *int32                                                  `json:"Strategy,omitempty" xml:"Strategy,omitempty"`
}

func (s CreateDeviceDistributeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceDistributeJobRequest) GoString() string {
	return s.String()
}

func (s *CreateDeviceDistributeJobRequest) SetApiProduct(v string) *CreateDeviceDistributeJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateDeviceDistributeJobRequest) SetApiRevision(v string) *CreateDeviceDistributeJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateDeviceDistributeJobRequest) SetDeviceName(v []*string) *CreateDeviceDistributeJobRequest {
	s.DeviceName = v
	return s
}

func (s *CreateDeviceDistributeJobRequest) SetSourceInstanceId(v string) *CreateDeviceDistributeJobRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *CreateDeviceDistributeJobRequest) SetProductKey(v string) *CreateDeviceDistributeJobRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateDeviceDistributeJobRequest) SetTargetUid(v string) *CreateDeviceDistributeJobRequest {
	s.TargetUid = &v
	return s
}

func (s *CreateDeviceDistributeJobRequest) SetTargetAliyunId(v string) *CreateDeviceDistributeJobRequest {
	s.TargetAliyunId = &v
	return s
}

func (s *CreateDeviceDistributeJobRequest) SetCaptcha(v string) *CreateDeviceDistributeJobRequest {
	s.Captcha = &v
	return s
}

func (s *CreateDeviceDistributeJobRequest) SetTargetInstanceConfig(v []*CreateDeviceDistributeJobRequestTargetInstanceConfig) *CreateDeviceDistributeJobRequest {
	s.TargetInstanceConfig = v
	return s
}

func (s *CreateDeviceDistributeJobRequest) SetStrategy(v int32) *CreateDeviceDistributeJobRequest {
	s.Strategy = &v
	return s
}

type CreateDeviceDistributeJobRequestTargetInstanceConfig struct {
	TargetInstanceId *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty"`
}

func (s CreateDeviceDistributeJobRequestTargetInstanceConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceDistributeJobRequestTargetInstanceConfig) GoString() string {
	return s.String()
}

func (s *CreateDeviceDistributeJobRequestTargetInstanceConfig) SetTargetInstanceId(v string) *CreateDeviceDistributeJobRequestTargetInstanceConfig {
	s.TargetInstanceId = &v
	return s
}

type CreateDeviceDistributeJobResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s CreateDeviceDistributeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceDistributeJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDeviceDistributeJobResponseBody) SetRequestId(v string) *CreateDeviceDistributeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDeviceDistributeJobResponseBody) SetSuccess(v bool) *CreateDeviceDistributeJobResponseBody {
	s.Success = &v
	return s
}

func (s *CreateDeviceDistributeJobResponseBody) SetCode(v string) *CreateDeviceDistributeJobResponseBody {
	s.Code = &v
	return s
}

func (s *CreateDeviceDistributeJobResponseBody) SetErrorMessage(v string) *CreateDeviceDistributeJobResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateDeviceDistributeJobResponseBody) SetJobId(v string) *CreateDeviceDistributeJobResponseBody {
	s.JobId = &v
	return s
}

type CreateDeviceDistributeJobResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDeviceDistributeJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDeviceDistributeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceDistributeJobResponse) GoString() string {
	return s.String()
}

func (s *CreateDeviceDistributeJobResponse) SetHeaders(v map[string]*string) *CreateDeviceDistributeJobResponse {
	s.Headers = v
	return s
}

func (s *CreateDeviceDistributeJobResponse) SetBody(v *CreateDeviceDistributeJobResponseBody) *CreateDeviceDistributeJobResponse {
	s.Body = v
	return s
}

type CreateDeviceGroupRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	SuperGroupId      *string `json:"SuperGroupId,omitempty" xml:"SuperGroupId,omitempty"`
	GroupDesc         *string `json:"GroupDesc,omitempty" xml:"GroupDesc,omitempty"`
	GroupName         *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s CreateDeviceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateDeviceGroupRequest) SetApiProduct(v string) *CreateDeviceGroupRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateDeviceGroupRequest) SetApiRevision(v string) *CreateDeviceGroupRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateDeviceGroupRequest) SetIotInstanceId(v string) *CreateDeviceGroupRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateDeviceGroupRequest) SetSuperGroupId(v string) *CreateDeviceGroupRequest {
	s.SuperGroupId = &v
	return s
}

func (s *CreateDeviceGroupRequest) SetGroupDesc(v string) *CreateDeviceGroupRequest {
	s.GroupDesc = &v
	return s
}

func (s *CreateDeviceGroupRequest) SetGroupName(v string) *CreateDeviceGroupRequest {
	s.GroupName = &v
	return s
}

func (s *CreateDeviceGroupRequest) SetRealTenantId(v string) *CreateDeviceGroupRequest {
	s.RealTenantId = &v
	return s
}

func (s *CreateDeviceGroupRequest) SetRealTripartiteKey(v string) *CreateDeviceGroupRequest {
	s.RealTripartiteKey = &v
	return s
}

type CreateDeviceGroupResponseBody struct {
	RequestId    *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *CreateDeviceGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s CreateDeviceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDeviceGroupResponseBody) SetRequestId(v string) *CreateDeviceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDeviceGroupResponseBody) SetSuccess(v bool) *CreateDeviceGroupResponseBody {
	s.Success = &v
	return s
}

func (s *CreateDeviceGroupResponseBody) SetCode(v string) *CreateDeviceGroupResponseBody {
	s.Code = &v
	return s
}

func (s *CreateDeviceGroupResponseBody) SetErrorMessage(v string) *CreateDeviceGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateDeviceGroupResponseBody) SetData(v *CreateDeviceGroupResponseBodyData) *CreateDeviceGroupResponseBody {
	s.Data = v
	return s
}

type CreateDeviceGroupResponseBodyData struct {
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	UtcCreate *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	GroupDesc *string `json:"GroupDesc,omitempty" xml:"GroupDesc,omitempty"`
}

func (s CreateDeviceGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateDeviceGroupResponseBodyData) SetGroupId(v string) *CreateDeviceGroupResponseBodyData {
	s.GroupId = &v
	return s
}

func (s *CreateDeviceGroupResponseBodyData) SetUtcCreate(v string) *CreateDeviceGroupResponseBodyData {
	s.UtcCreate = &v
	return s
}

func (s *CreateDeviceGroupResponseBodyData) SetGroupName(v string) *CreateDeviceGroupResponseBodyData {
	s.GroupName = &v
	return s
}

func (s *CreateDeviceGroupResponseBodyData) SetGroupDesc(v string) *CreateDeviceGroupResponseBodyData {
	s.GroupDesc = &v
	return s
}

type CreateDeviceGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDeviceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDeviceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDeviceGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateDeviceGroupResponse) SetHeaders(v map[string]*string) *CreateDeviceGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateDeviceGroupResponse) SetBody(v *CreateDeviceGroupResponseBody) *CreateDeviceGroupResponse {
	s.Body = v
	return s
}

type CreateEdgeDriverRequest struct {
	ApiProduct     *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision    *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId  *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DriverName     *string `json:"DriverName,omitempty" xml:"DriverName,omitempty"`
	DriverProtocol *string `json:"DriverProtocol,omitempty" xml:"DriverProtocol,omitempty"`
	Runtime        *string `json:"Runtime,omitempty" xml:"Runtime,omitempty"`
	CpuArch        *string `json:"CpuArch,omitempty" xml:"CpuArch,omitempty"`
	IsBuiltIn      *bool   `json:"IsBuiltIn,omitempty" xml:"IsBuiltIn,omitempty"`
}

func (s CreateEdgeDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeDriverRequest) GoString() string {
	return s.String()
}

func (s *CreateEdgeDriverRequest) SetApiProduct(v string) *CreateEdgeDriverRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateEdgeDriverRequest) SetApiRevision(v string) *CreateEdgeDriverRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateEdgeDriverRequest) SetIotInstanceId(v string) *CreateEdgeDriverRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateEdgeDriverRequest) SetDriverName(v string) *CreateEdgeDriverRequest {
	s.DriverName = &v
	return s
}

func (s *CreateEdgeDriverRequest) SetDriverProtocol(v string) *CreateEdgeDriverRequest {
	s.DriverProtocol = &v
	return s
}

func (s *CreateEdgeDriverRequest) SetRuntime(v string) *CreateEdgeDriverRequest {
	s.Runtime = &v
	return s
}

func (s *CreateEdgeDriverRequest) SetCpuArch(v string) *CreateEdgeDriverRequest {
	s.CpuArch = &v
	return s
}

func (s *CreateEdgeDriverRequest) SetIsBuiltIn(v bool) *CreateEdgeDriverRequest {
	s.IsBuiltIn = &v
	return s
}

type CreateEdgeDriverResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	DriverId     *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
}

func (s CreateEdgeDriverResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeDriverResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEdgeDriverResponseBody) SetRequestId(v string) *CreateEdgeDriverResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateEdgeDriverResponseBody) SetSuccess(v bool) *CreateEdgeDriverResponseBody {
	s.Success = &v
	return s
}

func (s *CreateEdgeDriverResponseBody) SetCode(v string) *CreateEdgeDriverResponseBody {
	s.Code = &v
	return s
}

func (s *CreateEdgeDriverResponseBody) SetErrorMessage(v string) *CreateEdgeDriverResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateEdgeDriverResponseBody) SetDriverId(v string) *CreateEdgeDriverResponseBody {
	s.DriverId = &v
	return s
}

type CreateEdgeDriverResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateEdgeDriverResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateEdgeDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeDriverResponse) GoString() string {
	return s.String()
}

func (s *CreateEdgeDriverResponse) SetHeaders(v map[string]*string) *CreateEdgeDriverResponse {
	s.Headers = v
	return s
}

func (s *CreateEdgeDriverResponse) SetBody(v *CreateEdgeDriverResponseBody) *CreateEdgeDriverResponse {
	s.Body = v
	return s
}

type CreateEdgeDriverVersionRequest struct {
	ApiProduct      *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision     *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DriverId        *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	DriverVersion   *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty"`
	EdgeVersion     *string `json:"EdgeVersion,omitempty" xml:"EdgeVersion,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SourceConfig    *string `json:"SourceConfig,omitempty" xml:"SourceConfig,omitempty"`
	DriverConfig    *string `json:"DriverConfig,omitempty" xml:"DriverConfig,omitempty"`
	ContainerConfig *string `json:"ContainerConfig,omitempty" xml:"ContainerConfig,omitempty"`
	ConfigCheckRule *string `json:"ConfigCheckRule,omitempty" xml:"ConfigCheckRule,omitempty"`
	Argument        *string `json:"Argument,omitempty" xml:"Argument,omitempty"`
}

func (s CreateEdgeDriverVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeDriverVersionRequest) GoString() string {
	return s.String()
}

func (s *CreateEdgeDriverVersionRequest) SetApiProduct(v string) *CreateEdgeDriverVersionRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetApiRevision(v string) *CreateEdgeDriverVersionRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetIotInstanceId(v string) *CreateEdgeDriverVersionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetDriverId(v string) *CreateEdgeDriverVersionRequest {
	s.DriverId = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetDriverVersion(v string) *CreateEdgeDriverVersionRequest {
	s.DriverVersion = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetEdgeVersion(v string) *CreateEdgeDriverVersionRequest {
	s.EdgeVersion = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetDescription(v string) *CreateEdgeDriverVersionRequest {
	s.Description = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetSourceConfig(v string) *CreateEdgeDriverVersionRequest {
	s.SourceConfig = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetDriverConfig(v string) *CreateEdgeDriverVersionRequest {
	s.DriverConfig = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetContainerConfig(v string) *CreateEdgeDriverVersionRequest {
	s.ContainerConfig = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetConfigCheckRule(v string) *CreateEdgeDriverVersionRequest {
	s.ConfigCheckRule = &v
	return s
}

func (s *CreateEdgeDriverVersionRequest) SetArgument(v string) *CreateEdgeDriverVersionRequest {
	s.Argument = &v
	return s
}

type CreateEdgeDriverVersionResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CreateEdgeDriverVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeDriverVersionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEdgeDriverVersionResponseBody) SetRequestId(v string) *CreateEdgeDriverVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateEdgeDriverVersionResponseBody) SetSuccess(v bool) *CreateEdgeDriverVersionResponseBody {
	s.Success = &v
	return s
}

func (s *CreateEdgeDriverVersionResponseBody) SetCode(v string) *CreateEdgeDriverVersionResponseBody {
	s.Code = &v
	return s
}

func (s *CreateEdgeDriverVersionResponseBody) SetErrorMessage(v string) *CreateEdgeDriverVersionResponseBody {
	s.ErrorMessage = &v
	return s
}

type CreateEdgeDriverVersionResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateEdgeDriverVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateEdgeDriverVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeDriverVersionResponse) GoString() string {
	return s.String()
}

func (s *CreateEdgeDriverVersionResponse) SetHeaders(v map[string]*string) *CreateEdgeDriverVersionResponse {
	s.Headers = v
	return s
}

func (s *CreateEdgeDriverVersionResponse) SetBody(v *CreateEdgeDriverVersionResponseBody) *CreateEdgeDriverVersionResponse {
	s.Body = v
	return s
}

type CreateEdgeInstanceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Tags          *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	Spec          *int32  `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s CreateEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceRequest) SetApiProduct(v string) *CreateEdgeInstanceRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateEdgeInstanceRequest) SetApiRevision(v string) *CreateEdgeInstanceRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateEdgeInstanceRequest) SetIotInstanceId(v string) *CreateEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateEdgeInstanceRequest) SetName(v string) *CreateEdgeInstanceRequest {
	s.Name = &v
	return s
}

func (s *CreateEdgeInstanceRequest) SetTags(v string) *CreateEdgeInstanceRequest {
	s.Tags = &v
	return s
}

func (s *CreateEdgeInstanceRequest) SetSpec(v int32) *CreateEdgeInstanceRequest {
	s.Spec = &v
	return s
}

type CreateEdgeInstanceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s CreateEdgeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceResponseBody) SetRequestId(v string) *CreateEdgeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateEdgeInstanceResponseBody) SetSuccess(v bool) *CreateEdgeInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *CreateEdgeInstanceResponseBody) SetErrorMessage(v string) *CreateEdgeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateEdgeInstanceResponseBody) SetCode(v string) *CreateEdgeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateEdgeInstanceResponseBody) SetInstanceId(v string) *CreateEdgeInstanceResponseBody {
	s.InstanceId = &v
	return s
}

type CreateEdgeInstanceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateEdgeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceResponse) SetHeaders(v map[string]*string) *CreateEdgeInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateEdgeInstanceResponse) SetBody(v *CreateEdgeInstanceResponseBody) *CreateEdgeInstanceResponse {
	s.Body = v
	return s
}

type CreateEdgeInstanceChannelRequest struct {
	ApiProduct    *string                                    `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string                                    `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string                                    `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string                                    `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DriverId      *string                                    `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	ChannelName   *string                                    `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	Configs       []*CreateEdgeInstanceChannelRequestConfigs `json:"Configs,omitempty" xml:"Configs,omitempty" type:"Repeated"`
}

func (s CreateEdgeInstanceChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceChannelRequest) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceChannelRequest) SetApiProduct(v string) *CreateEdgeInstanceChannelRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateEdgeInstanceChannelRequest) SetApiRevision(v string) *CreateEdgeInstanceChannelRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateEdgeInstanceChannelRequest) SetIotInstanceId(v string) *CreateEdgeInstanceChannelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateEdgeInstanceChannelRequest) SetInstanceId(v string) *CreateEdgeInstanceChannelRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateEdgeInstanceChannelRequest) SetDriverId(v string) *CreateEdgeInstanceChannelRequest {
	s.DriverId = &v
	return s
}

func (s *CreateEdgeInstanceChannelRequest) SetChannelName(v string) *CreateEdgeInstanceChannelRequest {
	s.ChannelName = &v
	return s
}

func (s *CreateEdgeInstanceChannelRequest) SetConfigs(v []*CreateEdgeInstanceChannelRequestConfigs) *CreateEdgeInstanceChannelRequest {
	s.Configs = v
	return s
}

type CreateEdgeInstanceChannelRequestConfigs struct {
	Format  *string `json:"Format,omitempty" xml:"Format,omitempty"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s CreateEdgeInstanceChannelRequestConfigs) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceChannelRequestConfigs) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceChannelRequestConfigs) SetFormat(v string) *CreateEdgeInstanceChannelRequestConfigs {
	s.Format = &v
	return s
}

func (s *CreateEdgeInstanceChannelRequestConfigs) SetContent(v string) *CreateEdgeInstanceChannelRequestConfigs {
	s.Content = &v
	return s
}

func (s *CreateEdgeInstanceChannelRequestConfigs) SetKey(v string) *CreateEdgeInstanceChannelRequestConfigs {
	s.Key = &v
	return s
}

type CreateEdgeInstanceChannelResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s CreateEdgeInstanceChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceChannelResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceChannelResponseBody) SetRequestId(v string) *CreateEdgeInstanceChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateEdgeInstanceChannelResponseBody) SetSuccess(v bool) *CreateEdgeInstanceChannelResponseBody {
	s.Success = &v
	return s
}

func (s *CreateEdgeInstanceChannelResponseBody) SetCode(v string) *CreateEdgeInstanceChannelResponseBody {
	s.Code = &v
	return s
}

func (s *CreateEdgeInstanceChannelResponseBody) SetErrorMessage(v string) *CreateEdgeInstanceChannelResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateEdgeInstanceChannelResponseBody) SetData(v string) *CreateEdgeInstanceChannelResponseBody {
	s.Data = &v
	return s
}

type CreateEdgeInstanceChannelResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateEdgeInstanceChannelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateEdgeInstanceChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceChannelResponse) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceChannelResponse) SetHeaders(v map[string]*string) *CreateEdgeInstanceChannelResponse {
	s.Headers = v
	return s
}

func (s *CreateEdgeInstanceChannelResponse) SetBody(v *CreateEdgeInstanceChannelResponseBody) *CreateEdgeInstanceChannelResponse {
	s.Body = v
	return s
}

type CreateEdgeInstanceDeploymentRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateEdgeInstanceDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceDeploymentRequest) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceDeploymentRequest) SetApiProduct(v string) *CreateEdgeInstanceDeploymentRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateEdgeInstanceDeploymentRequest) SetApiRevision(v string) *CreateEdgeInstanceDeploymentRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateEdgeInstanceDeploymentRequest) SetIotInstanceId(v string) *CreateEdgeInstanceDeploymentRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateEdgeInstanceDeploymentRequest) SetInstanceId(v string) *CreateEdgeInstanceDeploymentRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateEdgeInstanceDeploymentRequest) SetType(v string) *CreateEdgeInstanceDeploymentRequest {
	s.Type = &v
	return s
}

type CreateEdgeInstanceDeploymentResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	DeploymentId *string `json:"DeploymentId,omitempty" xml:"DeploymentId,omitempty"`
}

func (s CreateEdgeInstanceDeploymentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceDeploymentResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceDeploymentResponseBody) SetRequestId(v string) *CreateEdgeInstanceDeploymentResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateEdgeInstanceDeploymentResponseBody) SetSuccess(v bool) *CreateEdgeInstanceDeploymentResponseBody {
	s.Success = &v
	return s
}

func (s *CreateEdgeInstanceDeploymentResponseBody) SetCode(v string) *CreateEdgeInstanceDeploymentResponseBody {
	s.Code = &v
	return s
}

func (s *CreateEdgeInstanceDeploymentResponseBody) SetErrorMessage(v string) *CreateEdgeInstanceDeploymentResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateEdgeInstanceDeploymentResponseBody) SetDeploymentId(v string) *CreateEdgeInstanceDeploymentResponseBody {
	s.DeploymentId = &v
	return s
}

type CreateEdgeInstanceDeploymentResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateEdgeInstanceDeploymentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateEdgeInstanceDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeInstanceDeploymentResponse) GoString() string {
	return s.String()
}

func (s *CreateEdgeInstanceDeploymentResponse) SetHeaders(v map[string]*string) *CreateEdgeInstanceDeploymentResponse {
	s.Headers = v
	return s
}

func (s *CreateEdgeInstanceDeploymentResponse) SetBody(v *CreateEdgeInstanceDeploymentResponseBody) *CreateEdgeInstanceDeploymentResponse {
	s.Body = v
	return s
}

type CreateEdgeOssPreSignedAddressRequest struct {
	ApiProduct      *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision     *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	ResourceId      *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	FileName        *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ResourceVersion *string `json:"ResourceVersion,omitempty" xml:"ResourceVersion,omitempty"`
}

func (s CreateEdgeOssPreSignedAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeOssPreSignedAddressRequest) GoString() string {
	return s.String()
}

func (s *CreateEdgeOssPreSignedAddressRequest) SetApiProduct(v string) *CreateEdgeOssPreSignedAddressRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressRequest) SetApiRevision(v string) *CreateEdgeOssPreSignedAddressRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressRequest) SetResourceId(v string) *CreateEdgeOssPreSignedAddressRequest {
	s.ResourceId = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressRequest) SetFileName(v string) *CreateEdgeOssPreSignedAddressRequest {
	s.FileName = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressRequest) SetIotInstanceId(v string) *CreateEdgeOssPreSignedAddressRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressRequest) SetType(v string) *CreateEdgeOssPreSignedAddressRequest {
	s.Type = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressRequest) SetInstanceId(v string) *CreateEdgeOssPreSignedAddressRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressRequest) SetResourceVersion(v string) *CreateEdgeOssPreSignedAddressRequest {
	s.ResourceVersion = &v
	return s
}

type CreateEdgeOssPreSignedAddressResponseBody struct {
	RequestId    *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                          `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *CreateEdgeOssPreSignedAddressResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s CreateEdgeOssPreSignedAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeOssPreSignedAddressResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEdgeOssPreSignedAddressResponseBody) SetRequestId(v string) *CreateEdgeOssPreSignedAddressResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressResponseBody) SetSuccess(v bool) *CreateEdgeOssPreSignedAddressResponseBody {
	s.Success = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressResponseBody) SetCode(v string) *CreateEdgeOssPreSignedAddressResponseBody {
	s.Code = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressResponseBody) SetErrorMessage(v string) *CreateEdgeOssPreSignedAddressResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressResponseBody) SetData(v *CreateEdgeOssPreSignedAddressResponseBodyData) *CreateEdgeOssPreSignedAddressResponseBody {
	s.Data = v
	return s
}

type CreateEdgeOssPreSignedAddressResponseBodyData struct {
	OssPreSignedAddress *string `json:"OssPreSignedAddress,omitempty" xml:"OssPreSignedAddress,omitempty"`
	OssAddress          *string `json:"OssAddress,omitempty" xml:"OssAddress,omitempty"`
}

func (s CreateEdgeOssPreSignedAddressResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeOssPreSignedAddressResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateEdgeOssPreSignedAddressResponseBodyData) SetOssPreSignedAddress(v string) *CreateEdgeOssPreSignedAddressResponseBodyData {
	s.OssPreSignedAddress = &v
	return s
}

func (s *CreateEdgeOssPreSignedAddressResponseBodyData) SetOssAddress(v string) *CreateEdgeOssPreSignedAddressResponseBodyData {
	s.OssAddress = &v
	return s
}

type CreateEdgeOssPreSignedAddressResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateEdgeOssPreSignedAddressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateEdgeOssPreSignedAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEdgeOssPreSignedAddressResponse) GoString() string {
	return s.String()
}

func (s *CreateEdgeOssPreSignedAddressResponse) SetHeaders(v map[string]*string) *CreateEdgeOssPreSignedAddressResponse {
	s.Headers = v
	return s
}

func (s *CreateEdgeOssPreSignedAddressResponse) SetBody(v *CreateEdgeOssPreSignedAddressResponseBody) *CreateEdgeOssPreSignedAddressResponse {
	s.Body = v
	return s
}

type CreateJobRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	JobDocument   *string `json:"JobDocument,omitempty" xml:"JobDocument,omitempty"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty"`
	JobFile       *string `json:"JobFile,omitempty" xml:"JobFile,omitempty"`
	JobName       *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	TimeoutConfig *string `json:"TimeoutConfig,omitempty" xml:"TimeoutConfig,omitempty"`
	RolloutConfig *string `json:"RolloutConfig,omitempty" xml:"RolloutConfig,omitempty"`
	TargetConfig  *string `json:"TargetConfig,omitempty" xml:"TargetConfig,omitempty"`
}

func (s CreateJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJobRequest) GoString() string {
	return s.String()
}

func (s *CreateJobRequest) SetApiProduct(v string) *CreateJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateJobRequest) SetApiRevision(v string) *CreateJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateJobRequest) SetIotInstanceId(v string) *CreateJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateJobRequest) SetDescription(v string) *CreateJobRequest {
	s.Description = &v
	return s
}

func (s *CreateJobRequest) SetJobDocument(v string) *CreateJobRequest {
	s.JobDocument = &v
	return s
}

func (s *CreateJobRequest) SetType(v string) *CreateJobRequest {
	s.Type = &v
	return s
}

func (s *CreateJobRequest) SetJobFile(v string) *CreateJobRequest {
	s.JobFile = &v
	return s
}

func (s *CreateJobRequest) SetJobName(v string) *CreateJobRequest {
	s.JobName = &v
	return s
}

func (s *CreateJobRequest) SetTimeoutConfig(v string) *CreateJobRequest {
	s.TimeoutConfig = &v
	return s
}

func (s *CreateJobRequest) SetRolloutConfig(v string) *CreateJobRequest {
	s.RolloutConfig = &v
	return s
}

func (s *CreateJobRequest) SetTargetConfig(v string) *CreateJobRequest {
	s.TargetConfig = &v
	return s
}

type CreateJobResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s CreateJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateJobResponseBody) SetRequestId(v string) *CreateJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateJobResponseBody) SetSuccess(v bool) *CreateJobResponseBody {
	s.Success = &v
	return s
}

func (s *CreateJobResponseBody) SetCode(v string) *CreateJobResponseBody {
	s.Code = &v
	return s
}

func (s *CreateJobResponseBody) SetErrorMessage(v string) *CreateJobResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateJobResponseBody) SetJobId(v string) *CreateJobResponseBody {
	s.JobId = &v
	return s
}

type CreateJobResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJobResponse) GoString() string {
	return s.String()
}

func (s *CreateJobResponse) SetHeaders(v map[string]*string) *CreateJobResponse {
	s.Headers = v
	return s
}

func (s *CreateJobResponse) SetBody(v *CreateJobResponseBody) *CreateJobResponse {
	s.Body = v
	return s
}

type CreateLoRaNodesTaskRequest struct {
	ApiProduct    *string                                 `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string                                 `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string                                 `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string                                 `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceInfo    []*CreateLoRaNodesTaskRequestDeviceInfo `json:"DeviceInfo,omitempty" xml:"DeviceInfo,omitempty" type:"Repeated"`
}

func (s CreateLoRaNodesTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoRaNodesTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateLoRaNodesTaskRequest) SetApiProduct(v string) *CreateLoRaNodesTaskRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateLoRaNodesTaskRequest) SetApiRevision(v string) *CreateLoRaNodesTaskRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateLoRaNodesTaskRequest) SetIotInstanceId(v string) *CreateLoRaNodesTaskRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateLoRaNodesTaskRequest) SetProductKey(v string) *CreateLoRaNodesTaskRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateLoRaNodesTaskRequest) SetDeviceInfo(v []*CreateLoRaNodesTaskRequestDeviceInfo) *CreateLoRaNodesTaskRequest {
	s.DeviceInfo = v
	return s
}

type CreateLoRaNodesTaskRequestDeviceInfo struct {
	DevEui  *string `json:"DevEui,omitempty" xml:"DevEui,omitempty"`
	PinCode *string `json:"PinCode,omitempty" xml:"PinCode,omitempty"`
}

func (s CreateLoRaNodesTaskRequestDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateLoRaNodesTaskRequestDeviceInfo) GoString() string {
	return s.String()
}

func (s *CreateLoRaNodesTaskRequestDeviceInfo) SetDevEui(v string) *CreateLoRaNodesTaskRequestDeviceInfo {
	s.DevEui = &v
	return s
}

func (s *CreateLoRaNodesTaskRequestDeviceInfo) SetPinCode(v string) *CreateLoRaNodesTaskRequestDeviceInfo {
	s.PinCode = &v
	return s
}

type CreateLoRaNodesTaskResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	TaskId       *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CreateLoRaNodesTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLoRaNodesTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLoRaNodesTaskResponseBody) SetRequestId(v string) *CreateLoRaNodesTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLoRaNodesTaskResponseBody) SetSuccess(v bool) *CreateLoRaNodesTaskResponseBody {
	s.Success = &v
	return s
}

func (s *CreateLoRaNodesTaskResponseBody) SetCode(v string) *CreateLoRaNodesTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateLoRaNodesTaskResponseBody) SetErrorMessage(v string) *CreateLoRaNodesTaskResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateLoRaNodesTaskResponseBody) SetTaskId(v string) *CreateLoRaNodesTaskResponseBody {
	s.TaskId = &v
	return s
}

type CreateLoRaNodesTaskResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateLoRaNodesTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLoRaNodesTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoRaNodesTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateLoRaNodesTaskResponse) SetHeaders(v map[string]*string) *CreateLoRaNodesTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateLoRaNodesTaskResponse) SetBody(v *CreateLoRaNodesTaskResponseBody) *CreateLoRaNodesTaskResponse {
	s.Body = v
	return s
}

type CreateOTADynamicUpgradeJobRequest struct {
	ApiProduct       *string                                 `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision      *string                                 `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId    *string                                 `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareId       *string                                 `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty"`
	ProductKey       *string                                 `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	SrcVersion       []*string                               `json:"SrcVersion,omitempty" xml:"SrcVersion,omitempty" type:"Repeated"`
	RetryInterval    *int32                                  `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	RetryCount       *int32                                  `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	TimeoutInMinutes *int32                                  `json:"TimeoutInMinutes,omitempty" xml:"TimeoutInMinutes,omitempty"`
	MaximumPerMinute *int32                                  `json:"MaximumPerMinute,omitempty" xml:"MaximumPerMinute,omitempty"`
	OverwriteMode    *int32                                  `json:"OverwriteMode,omitempty" xml:"OverwriteMode,omitempty"`
	DynamicMode      *int32                                  `json:"DynamicMode,omitempty" xml:"DynamicMode,omitempty"`
	Tag              []*CreateOTADynamicUpgradeJobRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateOTADynamicUpgradeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOTADynamicUpgradeJobRequest) GoString() string {
	return s.String()
}

func (s *CreateOTADynamicUpgradeJobRequest) SetApiProduct(v string) *CreateOTADynamicUpgradeJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetApiRevision(v string) *CreateOTADynamicUpgradeJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetIotInstanceId(v string) *CreateOTADynamicUpgradeJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetFirmwareId(v string) *CreateOTADynamicUpgradeJobRequest {
	s.FirmwareId = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetProductKey(v string) *CreateOTADynamicUpgradeJobRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetSrcVersion(v []*string) *CreateOTADynamicUpgradeJobRequest {
	s.SrcVersion = v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetRetryInterval(v int32) *CreateOTADynamicUpgradeJobRequest {
	s.RetryInterval = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetRetryCount(v int32) *CreateOTADynamicUpgradeJobRequest {
	s.RetryCount = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetTimeoutInMinutes(v int32) *CreateOTADynamicUpgradeJobRequest {
	s.TimeoutInMinutes = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetMaximumPerMinute(v int32) *CreateOTADynamicUpgradeJobRequest {
	s.MaximumPerMinute = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetOverwriteMode(v int32) *CreateOTADynamicUpgradeJobRequest {
	s.OverwriteMode = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetDynamicMode(v int32) *CreateOTADynamicUpgradeJobRequest {
	s.DynamicMode = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequest) SetTag(v []*CreateOTADynamicUpgradeJobRequestTag) *CreateOTADynamicUpgradeJobRequest {
	s.Tag = v
	return s
}

type CreateOTADynamicUpgradeJobRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateOTADynamicUpgradeJobRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateOTADynamicUpgradeJobRequestTag) GoString() string {
	return s.String()
}

func (s *CreateOTADynamicUpgradeJobRequestTag) SetKey(v string) *CreateOTADynamicUpgradeJobRequestTag {
	s.Key = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobRequestTag) SetValue(v string) *CreateOTADynamicUpgradeJobRequestTag {
	s.Value = &v
	return s
}

type CreateOTADynamicUpgradeJobResponseBody struct {
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *CreateOTADynamicUpgradeJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s CreateOTADynamicUpgradeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOTADynamicUpgradeJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOTADynamicUpgradeJobResponseBody) SetRequestId(v string) *CreateOTADynamicUpgradeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobResponseBody) SetSuccess(v bool) *CreateOTADynamicUpgradeJobResponseBody {
	s.Success = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobResponseBody) SetCode(v string) *CreateOTADynamicUpgradeJobResponseBody {
	s.Code = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobResponseBody) SetErrorMessage(v string) *CreateOTADynamicUpgradeJobResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobResponseBody) SetData(v *CreateOTADynamicUpgradeJobResponseBodyData) *CreateOTADynamicUpgradeJobResponseBody {
	s.Data = v
	return s
}

type CreateOTADynamicUpgradeJobResponseBodyData struct {
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UtcCreate *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
}

func (s CreateOTADynamicUpgradeJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateOTADynamicUpgradeJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateOTADynamicUpgradeJobResponseBodyData) SetJobId(v string) *CreateOTADynamicUpgradeJobResponseBodyData {
	s.JobId = &v
	return s
}

func (s *CreateOTADynamicUpgradeJobResponseBodyData) SetUtcCreate(v string) *CreateOTADynamicUpgradeJobResponseBodyData {
	s.UtcCreate = &v
	return s
}

type CreateOTADynamicUpgradeJobResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateOTADynamicUpgradeJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateOTADynamicUpgradeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOTADynamicUpgradeJobResponse) GoString() string {
	return s.String()
}

func (s *CreateOTADynamicUpgradeJobResponse) SetHeaders(v map[string]*string) *CreateOTADynamicUpgradeJobResponse {
	s.Headers = v
	return s
}

func (s *CreateOTADynamicUpgradeJobResponse) SetBody(v *CreateOTADynamicUpgradeJobResponseBody) *CreateOTADynamicUpgradeJobResponse {
	s.Body = v
	return s
}

type CreateOTAFirmwareRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareName  *string `json:"FirmwareName,omitempty" xml:"FirmwareName,omitempty"`
	DestVersion   *string `json:"DestVersion,omitempty" xml:"DestVersion,omitempty"`
	FirmwareUrl   *string `json:"FirmwareUrl,omitempty" xml:"FirmwareUrl,omitempty"`
	FirmwareSign  *string `json:"FirmwareSign,omitempty" xml:"FirmwareSign,omitempty"`
	SignMethod    *string `json:"SignMethod,omitempty" xml:"SignMethod,omitempty"`
	FirmwareSize  *int32  `json:"FirmwareSize,omitempty" xml:"FirmwareSize,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	FirmwareDesc  *string `json:"FirmwareDesc,omitempty" xml:"FirmwareDesc,omitempty"`
	Type          *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	SrcVersion    *string `json:"SrcVersion,omitempty" xml:"SrcVersion,omitempty"`
	ModuleName    *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
	NeedToVerify  *bool   `json:"NeedToVerify,omitempty" xml:"NeedToVerify,omitempty"`
}

func (s CreateOTAFirmwareRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAFirmwareRequest) GoString() string {
	return s.String()
}

func (s *CreateOTAFirmwareRequest) SetApiProduct(v string) *CreateOTAFirmwareRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetApiRevision(v string) *CreateOTAFirmwareRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetIotInstanceId(v string) *CreateOTAFirmwareRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetFirmwareName(v string) *CreateOTAFirmwareRequest {
	s.FirmwareName = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetDestVersion(v string) *CreateOTAFirmwareRequest {
	s.DestVersion = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetFirmwareUrl(v string) *CreateOTAFirmwareRequest {
	s.FirmwareUrl = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetFirmwareSign(v string) *CreateOTAFirmwareRequest {
	s.FirmwareSign = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetSignMethod(v string) *CreateOTAFirmwareRequest {
	s.SignMethod = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetFirmwareSize(v int32) *CreateOTAFirmwareRequest {
	s.FirmwareSize = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetProductKey(v string) *CreateOTAFirmwareRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetFirmwareDesc(v string) *CreateOTAFirmwareRequest {
	s.FirmwareDesc = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetType(v int32) *CreateOTAFirmwareRequest {
	s.Type = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetSrcVersion(v string) *CreateOTAFirmwareRequest {
	s.SrcVersion = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetModuleName(v string) *CreateOTAFirmwareRequest {
	s.ModuleName = &v
	return s
}

func (s *CreateOTAFirmwareRequest) SetNeedToVerify(v bool) *CreateOTAFirmwareRequest {
	s.NeedToVerify = &v
	return s
}

type CreateOTAFirmwareResponseBody struct {
	RequestId    *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *CreateOTAFirmwareResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s CreateOTAFirmwareResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAFirmwareResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOTAFirmwareResponseBody) SetRequestId(v string) *CreateOTAFirmwareResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOTAFirmwareResponseBody) SetSuccess(v bool) *CreateOTAFirmwareResponseBody {
	s.Success = &v
	return s
}

func (s *CreateOTAFirmwareResponseBody) SetCode(v string) *CreateOTAFirmwareResponseBody {
	s.Code = &v
	return s
}

func (s *CreateOTAFirmwareResponseBody) SetErrorMessage(v string) *CreateOTAFirmwareResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateOTAFirmwareResponseBody) SetData(v *CreateOTAFirmwareResponseBodyData) *CreateOTAFirmwareResponseBody {
	s.Data = v
	return s
}

type CreateOTAFirmwareResponseBodyData struct {
	FirmwareId *string `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty"`
	UtcCreate  *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
}

func (s CreateOTAFirmwareResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAFirmwareResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateOTAFirmwareResponseBodyData) SetFirmwareId(v string) *CreateOTAFirmwareResponseBodyData {
	s.FirmwareId = &v
	return s
}

func (s *CreateOTAFirmwareResponseBodyData) SetUtcCreate(v string) *CreateOTAFirmwareResponseBodyData {
	s.UtcCreate = &v
	return s
}

type CreateOTAFirmwareResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateOTAFirmwareResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateOTAFirmwareResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAFirmwareResponse) GoString() string {
	return s.String()
}

func (s *CreateOTAFirmwareResponse) SetHeaders(v map[string]*string) *CreateOTAFirmwareResponse {
	s.Headers = v
	return s
}

func (s *CreateOTAFirmwareResponse) SetBody(v *CreateOTAFirmwareResponseBody) *CreateOTAFirmwareResponse {
	s.Body = v
	return s
}

type CreateOTAModuleRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	AliasName     *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ModuleName    *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
	Desc          *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
}

func (s CreateOTAModuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAModuleRequest) GoString() string {
	return s.String()
}

func (s *CreateOTAModuleRequest) SetApiProduct(v string) *CreateOTAModuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateOTAModuleRequest) SetApiRevision(v string) *CreateOTAModuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateOTAModuleRequest) SetAliasName(v string) *CreateOTAModuleRequest {
	s.AliasName = &v
	return s
}

func (s *CreateOTAModuleRequest) SetIotInstanceId(v string) *CreateOTAModuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateOTAModuleRequest) SetModuleName(v string) *CreateOTAModuleRequest {
	s.ModuleName = &v
	return s
}

func (s *CreateOTAModuleRequest) SetDesc(v string) *CreateOTAModuleRequest {
	s.Desc = &v
	return s
}

func (s *CreateOTAModuleRequest) SetProductKey(v string) *CreateOTAModuleRequest {
	s.ProductKey = &v
	return s
}

type CreateOTAModuleResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CreateOTAModuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAModuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOTAModuleResponseBody) SetRequestId(v string) *CreateOTAModuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOTAModuleResponseBody) SetSuccess(v bool) *CreateOTAModuleResponseBody {
	s.Success = &v
	return s
}

func (s *CreateOTAModuleResponseBody) SetCode(v string) *CreateOTAModuleResponseBody {
	s.Code = &v
	return s
}

func (s *CreateOTAModuleResponseBody) SetErrorMessage(v string) *CreateOTAModuleResponseBody {
	s.ErrorMessage = &v
	return s
}

type CreateOTAModuleResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateOTAModuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateOTAModuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAModuleResponse) GoString() string {
	return s.String()
}

func (s *CreateOTAModuleResponse) SetHeaders(v map[string]*string) *CreateOTAModuleResponse {
	s.Headers = v
	return s
}

func (s *CreateOTAModuleResponse) SetBody(v *CreateOTAModuleResponseBody) *CreateOTAModuleResponse {
	s.Body = v
	return s
}

type CreateOTAStaticUpgradeJobRequest struct {
	ApiProduct         *string                                `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision        *string                                `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId      *string                                `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareId         *string                                `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty"`
	ProductKey         *string                                `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	TargetSelection    *string                                `json:"TargetSelection,omitempty" xml:"TargetSelection,omitempty"`
	SrcVersion         []*string                              `json:"SrcVersion,omitempty" xml:"SrcVersion,omitempty" type:"Repeated"`
	ScheduleTime       *int64                                 `json:"ScheduleTime,omitempty" xml:"ScheduleTime,omitempty"`
	RetryInterval      *int32                                 `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	RetryCount         *int32                                 `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	TimeoutInMinutes   *int32                                 `json:"TimeoutInMinutes,omitempty" xml:"TimeoutInMinutes,omitempty"`
	MaximumPerMinute   *int32                                 `json:"MaximumPerMinute,omitempty" xml:"MaximumPerMinute,omitempty"`
	GrayPercent        *string                                `json:"GrayPercent,omitempty" xml:"GrayPercent,omitempty"`
	TargetDeviceName   []*string                              `json:"TargetDeviceName,omitempty" xml:"TargetDeviceName,omitempty" type:"Repeated"`
	ScheduleFinishTime *int64                                 `json:"ScheduleFinishTime,omitempty" xml:"ScheduleFinishTime,omitempty"`
	OverwriteMode      *int32                                 `json:"OverwriteMode,omitempty" xml:"OverwriteMode,omitempty"`
	Tag                []*CreateOTAStaticUpgradeJobRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	DnListFileUrl      *string                                `json:"DnListFileUrl,omitempty" xml:"DnListFileUrl,omitempty"`
}

func (s CreateOTAStaticUpgradeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAStaticUpgradeJobRequest) GoString() string {
	return s.String()
}

func (s *CreateOTAStaticUpgradeJobRequest) SetApiProduct(v string) *CreateOTAStaticUpgradeJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetApiRevision(v string) *CreateOTAStaticUpgradeJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetIotInstanceId(v string) *CreateOTAStaticUpgradeJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetFirmwareId(v string) *CreateOTAStaticUpgradeJobRequest {
	s.FirmwareId = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetProductKey(v string) *CreateOTAStaticUpgradeJobRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetTargetSelection(v string) *CreateOTAStaticUpgradeJobRequest {
	s.TargetSelection = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetSrcVersion(v []*string) *CreateOTAStaticUpgradeJobRequest {
	s.SrcVersion = v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetScheduleTime(v int64) *CreateOTAStaticUpgradeJobRequest {
	s.ScheduleTime = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetRetryInterval(v int32) *CreateOTAStaticUpgradeJobRequest {
	s.RetryInterval = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetRetryCount(v int32) *CreateOTAStaticUpgradeJobRequest {
	s.RetryCount = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetTimeoutInMinutes(v int32) *CreateOTAStaticUpgradeJobRequest {
	s.TimeoutInMinutes = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetMaximumPerMinute(v int32) *CreateOTAStaticUpgradeJobRequest {
	s.MaximumPerMinute = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetGrayPercent(v string) *CreateOTAStaticUpgradeJobRequest {
	s.GrayPercent = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetTargetDeviceName(v []*string) *CreateOTAStaticUpgradeJobRequest {
	s.TargetDeviceName = v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetScheduleFinishTime(v int64) *CreateOTAStaticUpgradeJobRequest {
	s.ScheduleFinishTime = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetOverwriteMode(v int32) *CreateOTAStaticUpgradeJobRequest {
	s.OverwriteMode = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetTag(v []*CreateOTAStaticUpgradeJobRequestTag) *CreateOTAStaticUpgradeJobRequest {
	s.Tag = v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequest) SetDnListFileUrl(v string) *CreateOTAStaticUpgradeJobRequest {
	s.DnListFileUrl = &v
	return s
}

type CreateOTAStaticUpgradeJobRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateOTAStaticUpgradeJobRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAStaticUpgradeJobRequestTag) GoString() string {
	return s.String()
}

func (s *CreateOTAStaticUpgradeJobRequestTag) SetKey(v string) *CreateOTAStaticUpgradeJobRequestTag {
	s.Key = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobRequestTag) SetValue(v string) *CreateOTAStaticUpgradeJobRequestTag {
	s.Value = &v
	return s
}

type CreateOTAStaticUpgradeJobResponseBody struct {
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                      `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *CreateOTAStaticUpgradeJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s CreateOTAStaticUpgradeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAStaticUpgradeJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOTAStaticUpgradeJobResponseBody) SetRequestId(v string) *CreateOTAStaticUpgradeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobResponseBody) SetSuccess(v bool) *CreateOTAStaticUpgradeJobResponseBody {
	s.Success = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobResponseBody) SetCode(v string) *CreateOTAStaticUpgradeJobResponseBody {
	s.Code = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobResponseBody) SetErrorMessage(v string) *CreateOTAStaticUpgradeJobResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobResponseBody) SetData(v *CreateOTAStaticUpgradeJobResponseBodyData) *CreateOTAStaticUpgradeJobResponseBody {
	s.Data = v
	return s
}

type CreateOTAStaticUpgradeJobResponseBodyData struct {
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UtcCreate *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
}

func (s CreateOTAStaticUpgradeJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAStaticUpgradeJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateOTAStaticUpgradeJobResponseBodyData) SetJobId(v string) *CreateOTAStaticUpgradeJobResponseBodyData {
	s.JobId = &v
	return s
}

func (s *CreateOTAStaticUpgradeJobResponseBodyData) SetUtcCreate(v string) *CreateOTAStaticUpgradeJobResponseBodyData {
	s.UtcCreate = &v
	return s
}

type CreateOTAStaticUpgradeJobResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateOTAStaticUpgradeJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateOTAStaticUpgradeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAStaticUpgradeJobResponse) GoString() string {
	return s.String()
}

func (s *CreateOTAStaticUpgradeJobResponse) SetHeaders(v map[string]*string) *CreateOTAStaticUpgradeJobResponse {
	s.Headers = v
	return s
}

func (s *CreateOTAStaticUpgradeJobResponse) SetBody(v *CreateOTAStaticUpgradeJobResponseBody) *CreateOTAStaticUpgradeJobResponse {
	s.Body = v
	return s
}

type CreateOTAVerifyJobRequest struct {
	ApiProduct       *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision      *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId    *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareId       *string   `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty"`
	TimeoutInMinutes *int32    `json:"TimeoutInMinutes,omitempty" xml:"TimeoutInMinutes,omitempty"`
	ProductKey       *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	TargetDeviceName []*string `json:"TargetDeviceName,omitempty" xml:"TargetDeviceName,omitempty" type:"Repeated"`
}

func (s CreateOTAVerifyJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAVerifyJobRequest) GoString() string {
	return s.String()
}

func (s *CreateOTAVerifyJobRequest) SetApiProduct(v string) *CreateOTAVerifyJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateOTAVerifyJobRequest) SetApiRevision(v string) *CreateOTAVerifyJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateOTAVerifyJobRequest) SetIotInstanceId(v string) *CreateOTAVerifyJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateOTAVerifyJobRequest) SetFirmwareId(v string) *CreateOTAVerifyJobRequest {
	s.FirmwareId = &v
	return s
}

func (s *CreateOTAVerifyJobRequest) SetTimeoutInMinutes(v int32) *CreateOTAVerifyJobRequest {
	s.TimeoutInMinutes = &v
	return s
}

func (s *CreateOTAVerifyJobRequest) SetProductKey(v string) *CreateOTAVerifyJobRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateOTAVerifyJobRequest) SetTargetDeviceName(v []*string) *CreateOTAVerifyJobRequest {
	s.TargetDeviceName = v
	return s
}

type CreateOTAVerifyJobResponseBody struct {
	RequestId    *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *CreateOTAVerifyJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s CreateOTAVerifyJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAVerifyJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOTAVerifyJobResponseBody) SetRequestId(v string) *CreateOTAVerifyJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOTAVerifyJobResponseBody) SetSuccess(v bool) *CreateOTAVerifyJobResponseBody {
	s.Success = &v
	return s
}

func (s *CreateOTAVerifyJobResponseBody) SetCode(v string) *CreateOTAVerifyJobResponseBody {
	s.Code = &v
	return s
}

func (s *CreateOTAVerifyJobResponseBody) SetErrorMessage(v string) *CreateOTAVerifyJobResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateOTAVerifyJobResponseBody) SetData(v *CreateOTAVerifyJobResponseBodyData) *CreateOTAVerifyJobResponseBody {
	s.Data = v
	return s
}

type CreateOTAVerifyJobResponseBodyData struct {
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UtcCreate *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
}

func (s CreateOTAVerifyJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAVerifyJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateOTAVerifyJobResponseBodyData) SetJobId(v string) *CreateOTAVerifyJobResponseBodyData {
	s.JobId = &v
	return s
}

func (s *CreateOTAVerifyJobResponseBodyData) SetUtcCreate(v string) *CreateOTAVerifyJobResponseBodyData {
	s.UtcCreate = &v
	return s
}

type CreateOTAVerifyJobResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateOTAVerifyJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateOTAVerifyJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOTAVerifyJobResponse) GoString() string {
	return s.String()
}

func (s *CreateOTAVerifyJobResponse) SetHeaders(v map[string]*string) *CreateOTAVerifyJobResponse {
	s.Headers = v
	return s
}

func (s *CreateOTAVerifyJobResponse) SetBody(v *CreateOTAVerifyJobResponseBody) *CreateOTAVerifyJobResponse {
	s.Body = v
	return s
}

type CreateProductRequest struct {
	ApiProduct          *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision         *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId       *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductName         *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	NodeType            *int32  `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	DataFormat          *int32  `json:"DataFormat,omitempty" xml:"DataFormat,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	AliyunCommodityCode *string `json:"AliyunCommodityCode,omitempty" xml:"AliyunCommodityCode,omitempty"`
	Id2                 *bool   `json:"Id2,omitempty" xml:"Id2,omitempty"`
	CategoryId          *int64  `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	ProtocolType        *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	NetType             *string `json:"NetType,omitempty" xml:"NetType,omitempty"`
	JoinPermissionId    *string `json:"JoinPermissionId,omitempty" xml:"JoinPermissionId,omitempty"`
	ResourceGroupId     *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	AuthType            *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	CategoryKey         *string `json:"CategoryKey,omitempty" xml:"CategoryKey,omitempty"`
	PublishAuto         *bool   `json:"PublishAuto,omitempty" xml:"PublishAuto,omitempty"`
	ValidateType        *int32  `json:"ValidateType,omitempty" xml:"ValidateType,omitempty"`
	RealTenantId        *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey   *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s CreateProductRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProductRequest) GoString() string {
	return s.String()
}

func (s *CreateProductRequest) SetApiProduct(v string) *CreateProductRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateProductRequest) SetApiRevision(v string) *CreateProductRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateProductRequest) SetIotInstanceId(v string) *CreateProductRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateProductRequest) SetProductName(v string) *CreateProductRequest {
	s.ProductName = &v
	return s
}

func (s *CreateProductRequest) SetNodeType(v int32) *CreateProductRequest {
	s.NodeType = &v
	return s
}

func (s *CreateProductRequest) SetDataFormat(v int32) *CreateProductRequest {
	s.DataFormat = &v
	return s
}

func (s *CreateProductRequest) SetDescription(v string) *CreateProductRequest {
	s.Description = &v
	return s
}

func (s *CreateProductRequest) SetAliyunCommodityCode(v string) *CreateProductRequest {
	s.AliyunCommodityCode = &v
	return s
}

func (s *CreateProductRequest) SetId2(v bool) *CreateProductRequest {
	s.Id2 = &v
	return s
}

func (s *CreateProductRequest) SetCategoryId(v int64) *CreateProductRequest {
	s.CategoryId = &v
	return s
}

func (s *CreateProductRequest) SetProtocolType(v string) *CreateProductRequest {
	s.ProtocolType = &v
	return s
}

func (s *CreateProductRequest) SetNetType(v string) *CreateProductRequest {
	s.NetType = &v
	return s
}

func (s *CreateProductRequest) SetJoinPermissionId(v string) *CreateProductRequest {
	s.JoinPermissionId = &v
	return s
}

func (s *CreateProductRequest) SetResourceGroupId(v string) *CreateProductRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateProductRequest) SetAuthType(v string) *CreateProductRequest {
	s.AuthType = &v
	return s
}

func (s *CreateProductRequest) SetCategoryKey(v string) *CreateProductRequest {
	s.CategoryKey = &v
	return s
}

func (s *CreateProductRequest) SetPublishAuto(v bool) *CreateProductRequest {
	s.PublishAuto = &v
	return s
}

func (s *CreateProductRequest) SetValidateType(v int32) *CreateProductRequest {
	s.ValidateType = &v
	return s
}

func (s *CreateProductRequest) SetRealTenantId(v string) *CreateProductRequest {
	s.RealTenantId = &v
	return s
}

func (s *CreateProductRequest) SetRealTripartiteKey(v string) *CreateProductRequest {
	s.RealTripartiteKey = &v
	return s
}

type CreateProductResponseBody struct {
	RequestId    *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                          `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ProductKey   *string                        `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Data         *CreateProductResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s CreateProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateProductResponseBody) GoString() string {
	return s.String()
}

func (s *CreateProductResponseBody) SetRequestId(v string) *CreateProductResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateProductResponseBody) SetSuccess(v bool) *CreateProductResponseBody {
	s.Success = &v
	return s
}

func (s *CreateProductResponseBody) SetCode(v string) *CreateProductResponseBody {
	s.Code = &v
	return s
}

func (s *CreateProductResponseBody) SetErrorMessage(v string) *CreateProductResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateProductResponseBody) SetProductKey(v string) *CreateProductResponseBody {
	s.ProductKey = &v
	return s
}

func (s *CreateProductResponseBody) SetData(v *CreateProductResponseBodyData) *CreateProductResponseBody {
	s.Data = v
	return s
}

type CreateProductResponseBodyData struct {
	DataFormat          *int32  `json:"DataFormat,omitempty" xml:"DataFormat,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	NodeType            *int32  `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	ProductKey          *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ProductName         *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	AliyunCommodityCode *string `json:"AliyunCommodityCode,omitempty" xml:"AliyunCommodityCode,omitempty"`
	Id2                 *bool   `json:"Id2,omitempty" xml:"Id2,omitempty"`
	ProtocolType        *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	AuthType            *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	ProductSecret       *string `json:"ProductSecret,omitempty" xml:"ProductSecret,omitempty"`
}

func (s CreateProductResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateProductResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateProductResponseBodyData) SetDataFormat(v int32) *CreateProductResponseBodyData {
	s.DataFormat = &v
	return s
}

func (s *CreateProductResponseBodyData) SetDescription(v string) *CreateProductResponseBodyData {
	s.Description = &v
	return s
}

func (s *CreateProductResponseBodyData) SetNodeType(v int32) *CreateProductResponseBodyData {
	s.NodeType = &v
	return s
}

func (s *CreateProductResponseBodyData) SetProductKey(v string) *CreateProductResponseBodyData {
	s.ProductKey = &v
	return s
}

func (s *CreateProductResponseBodyData) SetProductName(v string) *CreateProductResponseBodyData {
	s.ProductName = &v
	return s
}

func (s *CreateProductResponseBodyData) SetAliyunCommodityCode(v string) *CreateProductResponseBodyData {
	s.AliyunCommodityCode = &v
	return s
}

func (s *CreateProductResponseBodyData) SetId2(v bool) *CreateProductResponseBodyData {
	s.Id2 = &v
	return s
}

func (s *CreateProductResponseBodyData) SetProtocolType(v string) *CreateProductResponseBodyData {
	s.ProtocolType = &v
	return s
}

func (s *CreateProductResponseBodyData) SetAuthType(v string) *CreateProductResponseBodyData {
	s.AuthType = &v
	return s
}

func (s *CreateProductResponseBodyData) SetProductSecret(v string) *CreateProductResponseBodyData {
	s.ProductSecret = &v
	return s
}

type CreateProductResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateProductResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateProductResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProductResponse) GoString() string {
	return s.String()
}

func (s *CreateProductResponse) SetHeaders(v map[string]*string) *CreateProductResponse {
	s.Headers = v
	return s
}

func (s *CreateProductResponse) SetBody(v *CreateProductResponseBody) *CreateProductResponse {
	s.Body = v
	return s
}

type CreateProductDistributeJobRequest struct {
	ApiProduct       *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision      *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	ProductKey       *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	TargetInstanceId *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty"`
	TargetUid        *string `json:"TargetUid,omitempty" xml:"TargetUid,omitempty"`
	Captcha          *string `json:"Captcha,omitempty" xml:"Captcha,omitempty"`
	TargetAliyunId   *string `json:"TargetAliyunId,omitempty" xml:"TargetAliyunId,omitempty"`
}

func (s CreateProductDistributeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProductDistributeJobRequest) GoString() string {
	return s.String()
}

func (s *CreateProductDistributeJobRequest) SetApiProduct(v string) *CreateProductDistributeJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateProductDistributeJobRequest) SetApiRevision(v string) *CreateProductDistributeJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateProductDistributeJobRequest) SetSourceInstanceId(v string) *CreateProductDistributeJobRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *CreateProductDistributeJobRequest) SetProductKey(v string) *CreateProductDistributeJobRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateProductDistributeJobRequest) SetTargetInstanceId(v string) *CreateProductDistributeJobRequest {
	s.TargetInstanceId = &v
	return s
}

func (s *CreateProductDistributeJobRequest) SetTargetUid(v string) *CreateProductDistributeJobRequest {
	s.TargetUid = &v
	return s
}

func (s *CreateProductDistributeJobRequest) SetCaptcha(v string) *CreateProductDistributeJobRequest {
	s.Captcha = &v
	return s
}

func (s *CreateProductDistributeJobRequest) SetTargetAliyunId(v string) *CreateProductDistributeJobRequest {
	s.TargetAliyunId = &v
	return s
}

type CreateProductDistributeJobResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s CreateProductDistributeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateProductDistributeJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateProductDistributeJobResponseBody) SetRequestId(v string) *CreateProductDistributeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateProductDistributeJobResponseBody) SetSuccess(v bool) *CreateProductDistributeJobResponseBody {
	s.Success = &v
	return s
}

func (s *CreateProductDistributeJobResponseBody) SetCode(v string) *CreateProductDistributeJobResponseBody {
	s.Code = &v
	return s
}

func (s *CreateProductDistributeJobResponseBody) SetErrorMessage(v string) *CreateProductDistributeJobResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateProductDistributeJobResponseBody) SetJobId(v string) *CreateProductDistributeJobResponseBody {
	s.JobId = &v
	return s
}

type CreateProductDistributeJobResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateProductDistributeJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateProductDistributeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProductDistributeJobResponse) GoString() string {
	return s.String()
}

func (s *CreateProductDistributeJobResponse) SetHeaders(v map[string]*string) *CreateProductDistributeJobResponse {
	s.Headers = v
	return s
}

func (s *CreateProductDistributeJobResponse) SetBody(v *CreateProductDistributeJobResponseBody) *CreateProductDistributeJobResponse {
	s.Body = v
	return s
}

type CreateProductTagsRequest struct {
	ApiProduct        *string                               `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string                               `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string                               `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string                               `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ProductTag        []*CreateProductTagsRequestProductTag `json:"ProductTag,omitempty" xml:"ProductTag,omitempty" type:"Repeated"`
	RealTenantId      *string                               `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string                               `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s CreateProductTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProductTagsRequest) GoString() string {
	return s.String()
}

func (s *CreateProductTagsRequest) SetApiProduct(v string) *CreateProductTagsRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateProductTagsRequest) SetApiRevision(v string) *CreateProductTagsRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateProductTagsRequest) SetIotInstanceId(v string) *CreateProductTagsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateProductTagsRequest) SetProductKey(v string) *CreateProductTagsRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateProductTagsRequest) SetProductTag(v []*CreateProductTagsRequestProductTag) *CreateProductTagsRequest {
	s.ProductTag = v
	return s
}

func (s *CreateProductTagsRequest) SetRealTenantId(v string) *CreateProductTagsRequest {
	s.RealTenantId = &v
	return s
}

func (s *CreateProductTagsRequest) SetRealTripartiteKey(v string) *CreateProductTagsRequest {
	s.RealTripartiteKey = &v
	return s
}

type CreateProductTagsRequestProductTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s CreateProductTagsRequestProductTag) String() string {
	return tea.Prettify(s)
}

func (s CreateProductTagsRequestProductTag) GoString() string {
	return s.String()
}

func (s *CreateProductTagsRequestProductTag) SetTagKey(v string) *CreateProductTagsRequestProductTag {
	s.TagKey = &v
	return s
}

func (s *CreateProductTagsRequestProductTag) SetTagValue(v string) *CreateProductTagsRequestProductTag {
	s.TagValue = &v
	return s
}

type CreateProductTagsResponseBody struct {
	RequestId          *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success            *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage       *string                                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code               *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	InvalidProductTags *CreateProductTagsResponseBodyInvalidProductTags `json:"InvalidProductTags,omitempty" xml:"InvalidProductTags,omitempty" type:"Struct"`
}

func (s CreateProductTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateProductTagsResponseBody) GoString() string {
	return s.String()
}

func (s *CreateProductTagsResponseBody) SetRequestId(v string) *CreateProductTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateProductTagsResponseBody) SetSuccess(v bool) *CreateProductTagsResponseBody {
	s.Success = &v
	return s
}

func (s *CreateProductTagsResponseBody) SetErrorMessage(v string) *CreateProductTagsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateProductTagsResponseBody) SetCode(v string) *CreateProductTagsResponseBody {
	s.Code = &v
	return s
}

func (s *CreateProductTagsResponseBody) SetInvalidProductTags(v *CreateProductTagsResponseBodyInvalidProductTags) *CreateProductTagsResponseBody {
	s.InvalidProductTags = v
	return s
}

type CreateProductTagsResponseBodyInvalidProductTags struct {
	ProductTag []*CreateProductTagsResponseBodyInvalidProductTagsProductTag `json:"ProductTag,omitempty" xml:"ProductTag,omitempty" type:"Repeated"`
}

func (s CreateProductTagsResponseBodyInvalidProductTags) String() string {
	return tea.Prettify(s)
}

func (s CreateProductTagsResponseBodyInvalidProductTags) GoString() string {
	return s.String()
}

func (s *CreateProductTagsResponseBodyInvalidProductTags) SetProductTag(v []*CreateProductTagsResponseBodyInvalidProductTagsProductTag) *CreateProductTagsResponseBodyInvalidProductTags {
	s.ProductTag = v
	return s
}

type CreateProductTagsResponseBodyInvalidProductTagsProductTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s CreateProductTagsResponseBodyInvalidProductTagsProductTag) String() string {
	return tea.Prettify(s)
}

func (s CreateProductTagsResponseBodyInvalidProductTagsProductTag) GoString() string {
	return s.String()
}

func (s *CreateProductTagsResponseBodyInvalidProductTagsProductTag) SetTagKey(v string) *CreateProductTagsResponseBodyInvalidProductTagsProductTag {
	s.TagKey = &v
	return s
}

func (s *CreateProductTagsResponseBodyInvalidProductTagsProductTag) SetTagValue(v string) *CreateProductTagsResponseBodyInvalidProductTagsProductTag {
	s.TagValue = &v
	return s
}

type CreateProductTagsResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateProductTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateProductTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProductTagsResponse) GoString() string {
	return s.String()
}

func (s *CreateProductTagsResponse) SetHeaders(v map[string]*string) *CreateProductTagsResponse {
	s.Headers = v
	return s
}

func (s *CreateProductTagsResponse) SetBody(v *CreateProductTagsResponseBody) *CreateProductTagsResponse {
	s.Body = v
	return s
}

type CreateProductTopicRequest struct {
	ApiProduct     *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision    *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId  *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey     *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	TopicShortName *string `json:"TopicShortName,omitempty" xml:"TopicShortName,omitempty"`
	Operation      *string `json:"Operation,omitempty" xml:"Operation,omitempty"`
	Desc           *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
}

func (s CreateProductTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProductTopicRequest) GoString() string {
	return s.String()
}

func (s *CreateProductTopicRequest) SetApiProduct(v string) *CreateProductTopicRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateProductTopicRequest) SetApiRevision(v string) *CreateProductTopicRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateProductTopicRequest) SetIotInstanceId(v string) *CreateProductTopicRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateProductTopicRequest) SetProductKey(v string) *CreateProductTopicRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateProductTopicRequest) SetTopicShortName(v string) *CreateProductTopicRequest {
	s.TopicShortName = &v
	return s
}

func (s *CreateProductTopicRequest) SetOperation(v string) *CreateProductTopicRequest {
	s.Operation = &v
	return s
}

func (s *CreateProductTopicRequest) SetDesc(v string) *CreateProductTopicRequest {
	s.Desc = &v
	return s
}

type CreateProductTopicResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	TopicId      *int64  `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
}

func (s CreateProductTopicResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateProductTopicResponseBody) GoString() string {
	return s.String()
}

func (s *CreateProductTopicResponseBody) SetRequestId(v string) *CreateProductTopicResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateProductTopicResponseBody) SetSuccess(v bool) *CreateProductTopicResponseBody {
	s.Success = &v
	return s
}

func (s *CreateProductTopicResponseBody) SetCode(v string) *CreateProductTopicResponseBody {
	s.Code = &v
	return s
}

func (s *CreateProductTopicResponseBody) SetErrorMessage(v string) *CreateProductTopicResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateProductTopicResponseBody) SetTopicId(v int64) *CreateProductTopicResponseBody {
	s.TopicId = &v
	return s
}

type CreateProductTopicResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateProductTopicResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateProductTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProductTopicResponse) GoString() string {
	return s.String()
}

func (s *CreateProductTopicResponse) SetHeaders(v map[string]*string) *CreateProductTopicResponse {
	s.Headers = v
	return s
}

func (s *CreateProductTopicResponse) SetBody(v *CreateProductTopicResponseBody) *CreateProductTopicResponse {
	s.Body = v
	return s
}

type CreateRuleRequest struct {
	ApiProduct      *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision     *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Select          *string `json:"Select,omitempty" xml:"Select,omitempty"`
	ShortTopic      *string `json:"ShortTopic,omitempty" xml:"ShortTopic,omitempty"`
	Where           *string `json:"Where,omitempty" xml:"Where,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RuleDesc        *string `json:"RuleDesc,omitempty" xml:"RuleDesc,omitempty"`
	DataType        *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	TopicType       *int32  `json:"TopicType,omitempty" xml:"TopicType,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Topic           *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s CreateRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateRuleRequest) SetApiProduct(v string) *CreateRuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateRuleRequest) SetApiRevision(v string) *CreateRuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateRuleRequest) SetIotInstanceId(v string) *CreateRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateRuleRequest) SetSelect(v string) *CreateRuleRequest {
	s.Select = &v
	return s
}

func (s *CreateRuleRequest) SetShortTopic(v string) *CreateRuleRequest {
	s.ShortTopic = &v
	return s
}

func (s *CreateRuleRequest) SetWhere(v string) *CreateRuleRequest {
	s.Where = &v
	return s
}

func (s *CreateRuleRequest) SetProductKey(v string) *CreateRuleRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateRuleRequest) SetName(v string) *CreateRuleRequest {
	s.Name = &v
	return s
}

func (s *CreateRuleRequest) SetRuleDesc(v string) *CreateRuleRequest {
	s.RuleDesc = &v
	return s
}

func (s *CreateRuleRequest) SetDataType(v string) *CreateRuleRequest {
	s.DataType = &v
	return s
}

func (s *CreateRuleRequest) SetTopicType(v int32) *CreateRuleRequest {
	s.TopicType = &v
	return s
}

func (s *CreateRuleRequest) SetResourceGroupId(v string) *CreateRuleRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateRuleRequest) SetTopic(v string) *CreateRuleRequest {
	s.Topic = &v
	return s
}

type CreateRuleResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	RuleId       *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s CreateRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRuleResponseBody) SetRequestId(v string) *CreateRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRuleResponseBody) SetSuccess(v bool) *CreateRuleResponseBody {
	s.Success = &v
	return s
}

func (s *CreateRuleResponseBody) SetCode(v string) *CreateRuleResponseBody {
	s.Code = &v
	return s
}

func (s *CreateRuleResponseBody) SetErrorMessage(v string) *CreateRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateRuleResponseBody) SetRuleId(v int64) *CreateRuleResponseBody {
	s.RuleId = &v
	return s
}

type CreateRuleResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateRuleResponse) SetHeaders(v map[string]*string) *CreateRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateRuleResponse) SetBody(v *CreateRuleResponseBody) *CreateRuleResponse {
	s.Body = v
	return s
}

type CreateRuleActionRequest struct {
	ApiProduct      *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision     *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId          *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Configuration   *string `json:"Configuration,omitempty" xml:"Configuration,omitempty"`
	ErrorActionFlag *bool   `json:"ErrorActionFlag,omitempty" xml:"ErrorActionFlag,omitempty"`
}

func (s CreateRuleActionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleActionRequest) GoString() string {
	return s.String()
}

func (s *CreateRuleActionRequest) SetApiProduct(v string) *CreateRuleActionRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateRuleActionRequest) SetApiRevision(v string) *CreateRuleActionRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateRuleActionRequest) SetIotInstanceId(v string) *CreateRuleActionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateRuleActionRequest) SetRuleId(v int64) *CreateRuleActionRequest {
	s.RuleId = &v
	return s
}

func (s *CreateRuleActionRequest) SetType(v string) *CreateRuleActionRequest {
	s.Type = &v
	return s
}

func (s *CreateRuleActionRequest) SetConfiguration(v string) *CreateRuleActionRequest {
	s.Configuration = &v
	return s
}

func (s *CreateRuleActionRequest) SetErrorActionFlag(v bool) *CreateRuleActionRequest {
	s.ErrorActionFlag = &v
	return s
}

type CreateRuleActionResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ActionId     *int64  `json:"ActionId,omitempty" xml:"ActionId,omitempty"`
}

func (s CreateRuleActionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleActionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRuleActionResponseBody) SetRequestId(v string) *CreateRuleActionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRuleActionResponseBody) SetCode(v string) *CreateRuleActionResponseBody {
	s.Code = &v
	return s
}

func (s *CreateRuleActionResponseBody) SetSuccess(v bool) *CreateRuleActionResponseBody {
	s.Success = &v
	return s
}

func (s *CreateRuleActionResponseBody) SetErrorMessage(v string) *CreateRuleActionResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateRuleActionResponseBody) SetActionId(v int64) *CreateRuleActionResponseBody {
	s.ActionId = &v
	return s
}

type CreateRuleActionResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateRuleActionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateRuleActionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRuleActionResponse) GoString() string {
	return s.String()
}

func (s *CreateRuleActionResponse) SetHeaders(v map[string]*string) *CreateRuleActionResponse {
	s.Headers = v
	return s
}

func (s *CreateRuleActionResponse) SetBody(v *CreateRuleActionResponseBody) *CreateRuleActionResponse {
	s.Body = v
	return s
}

type CreateRulengDistributeJobRequest struct {
	ApiProduct       *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision      *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	ProductKey       *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	TargetInstanceId *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty"`
}

func (s CreateRulengDistributeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRulengDistributeJobRequest) GoString() string {
	return s.String()
}

func (s *CreateRulengDistributeJobRequest) SetApiProduct(v string) *CreateRulengDistributeJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateRulengDistributeJobRequest) SetApiRevision(v string) *CreateRulengDistributeJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateRulengDistributeJobRequest) SetProductKey(v string) *CreateRulengDistributeJobRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateRulengDistributeJobRequest) SetSourceInstanceId(v string) *CreateRulengDistributeJobRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *CreateRulengDistributeJobRequest) SetTargetInstanceId(v string) *CreateRulengDistributeJobRequest {
	s.TargetInstanceId = &v
	return s
}

type CreateRulengDistributeJobResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CreateRulengDistributeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRulengDistributeJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRulengDistributeJobResponseBody) SetRequestId(v string) *CreateRulengDistributeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRulengDistributeJobResponseBody) SetSuccess(v bool) *CreateRulengDistributeJobResponseBody {
	s.Success = &v
	return s
}

func (s *CreateRulengDistributeJobResponseBody) SetCode(v string) *CreateRulengDistributeJobResponseBody {
	s.Code = &v
	return s
}

func (s *CreateRulengDistributeJobResponseBody) SetErrorMessage(v string) *CreateRulengDistributeJobResponseBody {
	s.ErrorMessage = &v
	return s
}

type CreateRulengDistributeJobResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateRulengDistributeJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateRulengDistributeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRulengDistributeJobResponse) GoString() string {
	return s.String()
}

func (s *CreateRulengDistributeJobResponse) SetHeaders(v map[string]*string) *CreateRulengDistributeJobResponse {
	s.Headers = v
	return s
}

func (s *CreateRulengDistributeJobResponse) SetBody(v *CreateRulengDistributeJobResponseBody) *CreateRulengDistributeJobResponse {
	s.Body = v
	return s
}

type CreateSceneRuleRequest struct {
	ApiProduct      *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision     *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleName        *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleContent     *string `json:"RuleContent,omitempty" xml:"RuleContent,omitempty"`
	RuleDescription *string `json:"RuleDescription,omitempty" xml:"RuleDescription,omitempty"`
}

func (s CreateSceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSceneRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateSceneRuleRequest) SetApiProduct(v string) *CreateSceneRuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateSceneRuleRequest) SetApiRevision(v string) *CreateSceneRuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateSceneRuleRequest) SetIotInstanceId(v string) *CreateSceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateSceneRuleRequest) SetRuleName(v string) *CreateSceneRuleRequest {
	s.RuleName = &v
	return s
}

func (s *CreateSceneRuleRequest) SetRuleContent(v string) *CreateSceneRuleRequest {
	s.RuleContent = &v
	return s
}

func (s *CreateSceneRuleRequest) SetRuleDescription(v string) *CreateSceneRuleRequest {
	s.RuleDescription = &v
	return s
}

type CreateSceneRuleResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	RuleId       *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s CreateSceneRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSceneRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSceneRuleResponseBody) SetRequestId(v string) *CreateSceneRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSceneRuleResponseBody) SetSuccess(v bool) *CreateSceneRuleResponseBody {
	s.Success = &v
	return s
}

func (s *CreateSceneRuleResponseBody) SetCode(v string) *CreateSceneRuleResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSceneRuleResponseBody) SetErrorMessage(v string) *CreateSceneRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateSceneRuleResponseBody) SetRuleId(v string) *CreateSceneRuleResponseBody {
	s.RuleId = &v
	return s
}

type CreateSceneRuleResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateSceneRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSceneRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateSceneRuleResponse) SetHeaders(v map[string]*string) *CreateSceneRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateSceneRuleResponse) SetBody(v *CreateSceneRuleResponseBody) *CreateSceneRuleResponse {
	s.Body = v
	return s
}

type CreateSubscribeRelationRequest struct {
	ApiProduct              *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision             *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId           *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey              *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceDataFlag          *bool     `json:"DeviceDataFlag,omitempty" xml:"DeviceDataFlag,omitempty"`
	DeviceLifeCycleFlag     *bool     `json:"DeviceLifeCycleFlag,omitempty" xml:"DeviceLifeCycleFlag,omitempty"`
	DeviceStatusChangeFlag  *bool     `json:"DeviceStatusChangeFlag,omitempty" xml:"DeviceStatusChangeFlag,omitempty"`
	DeviceTopoLifeCycleFlag *bool     `json:"DeviceTopoLifeCycleFlag,omitempty" xml:"DeviceTopoLifeCycleFlag,omitempty"`
	FoundDeviceListFlag     *bool     `json:"FoundDeviceListFlag,omitempty" xml:"FoundDeviceListFlag,omitempty"`
	MnsConfiguration        *string   `json:"MnsConfiguration,omitempty" xml:"MnsConfiguration,omitempty"`
	Type                    *string   `json:"Type,omitempty" xml:"Type,omitempty"`
	ConsumerGroupIds        []*string `json:"ConsumerGroupIds,omitempty" xml:"ConsumerGroupIds,omitempty" type:"Repeated"`
	OtaEventFlag            *bool     `json:"OtaEventFlag,omitempty" xml:"OtaEventFlag,omitempty"`
	ThingHistoryFlag        *bool     `json:"ThingHistoryFlag,omitempty" xml:"ThingHistoryFlag,omitempty"`
	DeviceTagFlag           *bool     `json:"DeviceTagFlag,omitempty" xml:"DeviceTagFlag,omitempty"`
	OtaVersionFlag          *bool     `json:"OtaVersionFlag,omitempty" xml:"OtaVersionFlag,omitempty"`
	OtaJobFlag              *bool     `json:"OtaJobFlag,omitempty" xml:"OtaJobFlag,omitempty"`
}

func (s CreateSubscribeRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscribeRelationRequest) GoString() string {
	return s.String()
}

func (s *CreateSubscribeRelationRequest) SetApiProduct(v string) *CreateSubscribeRelationRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetApiRevision(v string) *CreateSubscribeRelationRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetIotInstanceId(v string) *CreateSubscribeRelationRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetProductKey(v string) *CreateSubscribeRelationRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetDeviceDataFlag(v bool) *CreateSubscribeRelationRequest {
	s.DeviceDataFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetDeviceLifeCycleFlag(v bool) *CreateSubscribeRelationRequest {
	s.DeviceLifeCycleFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetDeviceStatusChangeFlag(v bool) *CreateSubscribeRelationRequest {
	s.DeviceStatusChangeFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetDeviceTopoLifeCycleFlag(v bool) *CreateSubscribeRelationRequest {
	s.DeviceTopoLifeCycleFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetFoundDeviceListFlag(v bool) *CreateSubscribeRelationRequest {
	s.FoundDeviceListFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetMnsConfiguration(v string) *CreateSubscribeRelationRequest {
	s.MnsConfiguration = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetType(v string) *CreateSubscribeRelationRequest {
	s.Type = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetConsumerGroupIds(v []*string) *CreateSubscribeRelationRequest {
	s.ConsumerGroupIds = v
	return s
}

func (s *CreateSubscribeRelationRequest) SetOtaEventFlag(v bool) *CreateSubscribeRelationRequest {
	s.OtaEventFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetThingHistoryFlag(v bool) *CreateSubscribeRelationRequest {
	s.ThingHistoryFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetDeviceTagFlag(v bool) *CreateSubscribeRelationRequest {
	s.DeviceTagFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetOtaVersionFlag(v bool) *CreateSubscribeRelationRequest {
	s.OtaVersionFlag = &v
	return s
}

func (s *CreateSubscribeRelationRequest) SetOtaJobFlag(v bool) *CreateSubscribeRelationRequest {
	s.OtaJobFlag = &v
	return s
}

type CreateSubscribeRelationResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CreateSubscribeRelationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscribeRelationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSubscribeRelationResponseBody) SetRequestId(v string) *CreateSubscribeRelationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSubscribeRelationResponseBody) SetSuccess(v bool) *CreateSubscribeRelationResponseBody {
	s.Success = &v
	return s
}

func (s *CreateSubscribeRelationResponseBody) SetCode(v string) *CreateSubscribeRelationResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSubscribeRelationResponseBody) SetErrorMessage(v string) *CreateSubscribeRelationResponseBody {
	s.ErrorMessage = &v
	return s
}

type CreateSubscribeRelationResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateSubscribeRelationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSubscribeRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscribeRelationResponse) GoString() string {
	return s.String()
}

func (s *CreateSubscribeRelationResponse) SetHeaders(v map[string]*string) *CreateSubscribeRelationResponse {
	s.Headers = v
	return s
}

func (s *CreateSubscribeRelationResponse) SetBody(v *CreateSubscribeRelationResponseBody) *CreateSubscribeRelationResponse {
	s.Body = v
	return s
}

type CreateThingModelRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ThingModelJson    *string `json:"ThingModelJson,omitempty" xml:"ThingModelJson,omitempty"`
	FunctionBlockId   *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
	FunctionBlockName *string `json:"FunctionBlockName,omitempty" xml:"FunctionBlockName,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s CreateThingModelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateThingModelRequest) GoString() string {
	return s.String()
}

func (s *CreateThingModelRequest) SetApiProduct(v string) *CreateThingModelRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateThingModelRequest) SetApiRevision(v string) *CreateThingModelRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateThingModelRequest) SetIotInstanceId(v string) *CreateThingModelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateThingModelRequest) SetProductKey(v string) *CreateThingModelRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateThingModelRequest) SetThingModelJson(v string) *CreateThingModelRequest {
	s.ThingModelJson = &v
	return s
}

func (s *CreateThingModelRequest) SetFunctionBlockId(v string) *CreateThingModelRequest {
	s.FunctionBlockId = &v
	return s
}

func (s *CreateThingModelRequest) SetFunctionBlockName(v string) *CreateThingModelRequest {
	s.FunctionBlockName = &v
	return s
}

func (s *CreateThingModelRequest) SetRealTenantId(v string) *CreateThingModelRequest {
	s.RealTenantId = &v
	return s
}

func (s *CreateThingModelRequest) SetRealTripartiteKey(v string) *CreateThingModelRequest {
	s.RealTripartiteKey = &v
	return s
}

type CreateThingModelResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CreateThingModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateThingModelResponseBody) GoString() string {
	return s.String()
}

func (s *CreateThingModelResponseBody) SetRequestId(v string) *CreateThingModelResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateThingModelResponseBody) SetSuccess(v bool) *CreateThingModelResponseBody {
	s.Success = &v
	return s
}

func (s *CreateThingModelResponseBody) SetCode(v string) *CreateThingModelResponseBody {
	s.Code = &v
	return s
}

func (s *CreateThingModelResponseBody) SetErrorMessage(v string) *CreateThingModelResponseBody {
	s.ErrorMessage = &v
	return s
}

type CreateThingModelResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateThingModelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateThingModelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateThingModelResponse) GoString() string {
	return s.String()
}

func (s *CreateThingModelResponse) SetHeaders(v map[string]*string) *CreateThingModelResponse {
	s.Headers = v
	return s
}

func (s *CreateThingModelResponse) SetBody(v *CreateThingModelResponseBody) *CreateThingModelResponse {
	s.Body = v
	return s
}

type CreateThingScriptRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	ScriptContent *string `json:"ScriptContent,omitempty" xml:"ScriptContent,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ScriptType    *string `json:"ScriptType,omitempty" xml:"ScriptType,omitempty"`
}

func (s CreateThingScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateThingScriptRequest) GoString() string {
	return s.String()
}

func (s *CreateThingScriptRequest) SetApiProduct(v string) *CreateThingScriptRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateThingScriptRequest) SetApiRevision(v string) *CreateThingScriptRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateThingScriptRequest) SetScriptContent(v string) *CreateThingScriptRequest {
	s.ScriptContent = &v
	return s
}

func (s *CreateThingScriptRequest) SetIotInstanceId(v string) *CreateThingScriptRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateThingScriptRequest) SetProductKey(v string) *CreateThingScriptRequest {
	s.ProductKey = &v
	return s
}

func (s *CreateThingScriptRequest) SetScriptType(v string) *CreateThingScriptRequest {
	s.ScriptType = &v
	return s
}

type CreateThingScriptResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CreateThingScriptResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateThingScriptResponseBody) GoString() string {
	return s.String()
}

func (s *CreateThingScriptResponseBody) SetRequestId(v string) *CreateThingScriptResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateThingScriptResponseBody) SetSuccess(v bool) *CreateThingScriptResponseBody {
	s.Success = &v
	return s
}

func (s *CreateThingScriptResponseBody) SetCode(v string) *CreateThingScriptResponseBody {
	s.Code = &v
	return s
}

func (s *CreateThingScriptResponseBody) SetErrorMessage(v string) *CreateThingScriptResponseBody {
	s.ErrorMessage = &v
	return s
}

type CreateThingScriptResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateThingScriptResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateThingScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateThingScriptResponse) GoString() string {
	return s.String()
}

func (s *CreateThingScriptResponse) SetHeaders(v map[string]*string) *CreateThingScriptResponse {
	s.Headers = v
	return s
}

func (s *CreateThingScriptResponse) SetBody(v *CreateThingScriptResponseBody) *CreateThingScriptResponse {
	s.Body = v
	return s
}

type CreateTopicRouteTableRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DstTopic      []*string `json:"DstTopic,omitempty" xml:"DstTopic,omitempty" type:"Repeated"`
	SrcTopic      *string   `json:"SrcTopic,omitempty" xml:"SrcTopic,omitempty"`
}

func (s CreateTopicRouteTableRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTopicRouteTableRequest) GoString() string {
	return s.String()
}

func (s *CreateTopicRouteTableRequest) SetApiProduct(v string) *CreateTopicRouteTableRequest {
	s.ApiProduct = &v
	return s
}

func (s *CreateTopicRouteTableRequest) SetApiRevision(v string) *CreateTopicRouteTableRequest {
	s.ApiRevision = &v
	return s
}

func (s *CreateTopicRouteTableRequest) SetIotInstanceId(v string) *CreateTopicRouteTableRequest {
	s.IotInstanceId = &v
	return s
}

func (s *CreateTopicRouteTableRequest) SetDstTopic(v []*string) *CreateTopicRouteTableRequest {
	s.DstTopic = v
	return s
}

func (s *CreateTopicRouteTableRequest) SetSrcTopic(v string) *CreateTopicRouteTableRequest {
	s.SrcTopic = &v
	return s
}

type CreateTopicRouteTableResponseBody struct {
	RequestId     *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success       *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
	Code          *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	IsAllSucceed  *bool                                           `json:"IsAllSucceed,omitempty" xml:"IsAllSucceed,omitempty"`
	ErrorMessage  *string                                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	FailureTopics *CreateTopicRouteTableResponseBodyFailureTopics `json:"FailureTopics,omitempty" xml:"FailureTopics,omitempty" type:"Struct"`
}

func (s CreateTopicRouteTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTopicRouteTableResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTopicRouteTableResponseBody) SetRequestId(v string) *CreateTopicRouteTableResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTopicRouteTableResponseBody) SetSuccess(v bool) *CreateTopicRouteTableResponseBody {
	s.Success = &v
	return s
}

func (s *CreateTopicRouteTableResponseBody) SetCode(v string) *CreateTopicRouteTableResponseBody {
	s.Code = &v
	return s
}

func (s *CreateTopicRouteTableResponseBody) SetIsAllSucceed(v bool) *CreateTopicRouteTableResponseBody {
	s.IsAllSucceed = &v
	return s
}

func (s *CreateTopicRouteTableResponseBody) SetErrorMessage(v string) *CreateTopicRouteTableResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateTopicRouteTableResponseBody) SetFailureTopics(v *CreateTopicRouteTableResponseBodyFailureTopics) *CreateTopicRouteTableResponseBody {
	s.FailureTopics = v
	return s
}

type CreateTopicRouteTableResponseBodyFailureTopics struct {
	Topic []map[string]*string `json:"Topic,omitempty" xml:"Topic,omitempty" type:"Repeated"`
}

func (s CreateTopicRouteTableResponseBodyFailureTopics) String() string {
	return tea.Prettify(s)
}

func (s CreateTopicRouteTableResponseBodyFailureTopics) GoString() string {
	return s.String()
}

func (s *CreateTopicRouteTableResponseBodyFailureTopics) SetTopic(v []map[string]*string) *CreateTopicRouteTableResponseBodyFailureTopics {
	s.Topic = v
	return s
}

type CreateTopicRouteTableResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateTopicRouteTableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateTopicRouteTableResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTopicRouteTableResponse) GoString() string {
	return s.String()
}

func (s *CreateTopicRouteTableResponse) SetHeaders(v map[string]*string) *CreateTopicRouteTableResponse {
	s.Headers = v
	return s
}

func (s *CreateTopicRouteTableResponse) SetBody(v *CreateTopicRouteTableResponseBody) *CreateTopicRouteTableResponse {
	s.Body = v
	return s
}

type DeleteConsumerGroupRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s DeleteConsumerGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteConsumerGroupRequest) SetApiProduct(v string) *DeleteConsumerGroupRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteConsumerGroupRequest) SetApiRevision(v string) *DeleteConsumerGroupRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteConsumerGroupRequest) SetIotInstanceId(v string) *DeleteConsumerGroupRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteConsumerGroupRequest) SetGroupId(v string) *DeleteConsumerGroupRequest {
	s.GroupId = &v
	return s
}

type DeleteConsumerGroupResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s DeleteConsumerGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteConsumerGroupResponseBody) SetRequestId(v string) *DeleteConsumerGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteConsumerGroupResponseBody) SetSuccess(v bool) *DeleteConsumerGroupResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteConsumerGroupResponseBody) SetErrorMessage(v string) *DeleteConsumerGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteConsumerGroupResponseBody) SetCode(v string) *DeleteConsumerGroupResponseBody {
	s.Code = &v
	return s
}

type DeleteConsumerGroupResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteConsumerGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteConsumerGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteConsumerGroupResponse) SetHeaders(v map[string]*string) *DeleteConsumerGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteConsumerGroupResponse) SetBody(v *DeleteConsumerGroupResponseBody) *DeleteConsumerGroupResponse {
	s.Body = v
	return s
}

type DeleteConsumerGroupSubscribeRelationRequest struct {
	ApiProduct      *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision     *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	ConsumerGroupId *string `json:"ConsumerGroupId,omitempty" xml:"ConsumerGroupId,omitempty"`
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
}

func (s DeleteConsumerGroupSubscribeRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerGroupSubscribeRelationRequest) GoString() string {
	return s.String()
}

func (s *DeleteConsumerGroupSubscribeRelationRequest) SetApiProduct(v string) *DeleteConsumerGroupSubscribeRelationRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteConsumerGroupSubscribeRelationRequest) SetApiRevision(v string) *DeleteConsumerGroupSubscribeRelationRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteConsumerGroupSubscribeRelationRequest) SetConsumerGroupId(v string) *DeleteConsumerGroupSubscribeRelationRequest {
	s.ConsumerGroupId = &v
	return s
}

func (s *DeleteConsumerGroupSubscribeRelationRequest) SetIotInstanceId(v string) *DeleteConsumerGroupSubscribeRelationRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteConsumerGroupSubscribeRelationRequest) SetProductKey(v string) *DeleteConsumerGroupSubscribeRelationRequest {
	s.ProductKey = &v
	return s
}

type DeleteConsumerGroupSubscribeRelationResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteConsumerGroupSubscribeRelationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerGroupSubscribeRelationResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteConsumerGroupSubscribeRelationResponseBody) SetRequestId(v string) *DeleteConsumerGroupSubscribeRelationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteConsumerGroupSubscribeRelationResponseBody) SetSuccess(v bool) *DeleteConsumerGroupSubscribeRelationResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteConsumerGroupSubscribeRelationResponseBody) SetCode(v string) *DeleteConsumerGroupSubscribeRelationResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteConsumerGroupSubscribeRelationResponseBody) SetErrorMessage(v string) *DeleteConsumerGroupSubscribeRelationResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteConsumerGroupSubscribeRelationResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteConsumerGroupSubscribeRelationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteConsumerGroupSubscribeRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerGroupSubscribeRelationResponse) GoString() string {
	return s.String()
}

func (s *DeleteConsumerGroupSubscribeRelationResponse) SetHeaders(v map[string]*string) *DeleteConsumerGroupSubscribeRelationResponse {
	s.Headers = v
	return s
}

func (s *DeleteConsumerGroupSubscribeRelationResponse) SetBody(v *DeleteConsumerGroupSubscribeRelationResponseBody) *DeleteConsumerGroupSubscribeRelationResponse {
	s.Body = v
	return s
}

type DeleteDeviceRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId             *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s DeleteDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeviceRequest) SetApiProduct(v string) *DeleteDeviceRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteDeviceRequest) SetApiRevision(v string) *DeleteDeviceRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteDeviceRequest) SetIotInstanceId(v string) *DeleteDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteDeviceRequest) SetProductKey(v string) *DeleteDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *DeleteDeviceRequest) SetDeviceName(v string) *DeleteDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *DeleteDeviceRequest) SetIotId(v string) *DeleteDeviceRequest {
	s.IotId = &v
	return s
}

func (s *DeleteDeviceRequest) SetRealTenantId(v string) *DeleteDeviceRequest {
	s.RealTenantId = &v
	return s
}

func (s *DeleteDeviceRequest) SetRealTripartiteKey(v string) *DeleteDeviceRequest {
	s.RealTripartiteKey = &v
	return s
}

type DeleteDeviceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDeviceResponseBody) SetRequestId(v string) *DeleteDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDeviceResponseBody) SetSuccess(v bool) *DeleteDeviceResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteDeviceResponseBody) SetCode(v string) *DeleteDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDeviceResponseBody) SetErrorMessage(v string) *DeleteDeviceResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteDeviceResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeviceResponse) SetHeaders(v map[string]*string) *DeleteDeviceResponse {
	s.Headers = v
	return s
}

func (s *DeleteDeviceResponse) SetBody(v *DeleteDeviceResponseBody) *DeleteDeviceResponse {
	s.Body = v
	return s
}

type DeleteDeviceDistributeJobRequest struct {
	ApiProduct  *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	JobId       *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteDeviceDistributeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceDistributeJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeviceDistributeJobRequest) SetApiProduct(v string) *DeleteDeviceDistributeJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteDeviceDistributeJobRequest) SetApiRevision(v string) *DeleteDeviceDistributeJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteDeviceDistributeJobRequest) SetJobId(v string) *DeleteDeviceDistributeJobRequest {
	s.JobId = &v
	return s
}

type DeleteDeviceDistributeJobResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteDeviceDistributeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceDistributeJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDeviceDistributeJobResponseBody) SetRequestId(v string) *DeleteDeviceDistributeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDeviceDistributeJobResponseBody) SetSuccess(v bool) *DeleteDeviceDistributeJobResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteDeviceDistributeJobResponseBody) SetCode(v string) *DeleteDeviceDistributeJobResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDeviceDistributeJobResponseBody) SetErrorMessage(v string) *DeleteDeviceDistributeJobResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteDeviceDistributeJobResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDeviceDistributeJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDeviceDistributeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceDistributeJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeviceDistributeJobResponse) SetHeaders(v map[string]*string) *DeleteDeviceDistributeJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteDeviceDistributeJobResponse) SetBody(v *DeleteDeviceDistributeJobResponseBody) *DeleteDeviceDistributeJobResponse {
	s.Body = v
	return s
}

type DeleteDeviceFileRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	FileId        *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
}

func (s DeleteDeviceFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceFileRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeviceFileRequest) SetApiProduct(v string) *DeleteDeviceFileRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteDeviceFileRequest) SetApiRevision(v string) *DeleteDeviceFileRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteDeviceFileRequest) SetIotInstanceId(v string) *DeleteDeviceFileRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteDeviceFileRequest) SetProductKey(v string) *DeleteDeviceFileRequest {
	s.ProductKey = &v
	return s
}

func (s *DeleteDeviceFileRequest) SetDeviceName(v string) *DeleteDeviceFileRequest {
	s.DeviceName = &v
	return s
}

func (s *DeleteDeviceFileRequest) SetIotId(v string) *DeleteDeviceFileRequest {
	s.IotId = &v
	return s
}

func (s *DeleteDeviceFileRequest) SetFileId(v string) *DeleteDeviceFileRequest {
	s.FileId = &v
	return s
}

type DeleteDeviceFileResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteDeviceFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceFileResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDeviceFileResponseBody) SetRequestId(v string) *DeleteDeviceFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDeviceFileResponseBody) SetSuccess(v bool) *DeleteDeviceFileResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteDeviceFileResponseBody) SetCode(v string) *DeleteDeviceFileResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDeviceFileResponseBody) SetErrorMessage(v string) *DeleteDeviceFileResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteDeviceFileResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDeviceFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDeviceFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceFileResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeviceFileResponse) SetHeaders(v map[string]*string) *DeleteDeviceFileResponse {
	s.Headers = v
	return s
}

func (s *DeleteDeviceFileResponse) SetBody(v *DeleteDeviceFileResponseBody) *DeleteDeviceFileResponse {
	s.Body = v
	return s
}

type DeleteDeviceGroupRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId           *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s DeleteDeviceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeviceGroupRequest) SetApiProduct(v string) *DeleteDeviceGroupRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteDeviceGroupRequest) SetApiRevision(v string) *DeleteDeviceGroupRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteDeviceGroupRequest) SetIotInstanceId(v string) *DeleteDeviceGroupRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteDeviceGroupRequest) SetGroupId(v string) *DeleteDeviceGroupRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteDeviceGroupRequest) SetRealTenantId(v string) *DeleteDeviceGroupRequest {
	s.RealTenantId = &v
	return s
}

func (s *DeleteDeviceGroupRequest) SetRealTripartiteKey(v string) *DeleteDeviceGroupRequest {
	s.RealTripartiteKey = &v
	return s
}

type DeleteDeviceGroupResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteDeviceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDeviceGroupResponseBody) SetRequestId(v string) *DeleteDeviceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDeviceGroupResponseBody) SetSuccess(v bool) *DeleteDeviceGroupResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteDeviceGroupResponseBody) SetCode(v string) *DeleteDeviceGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDeviceGroupResponseBody) SetErrorMessage(v string) *DeleteDeviceGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteDeviceGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDeviceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDeviceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeviceGroupResponse) SetHeaders(v map[string]*string) *DeleteDeviceGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteDeviceGroupResponse) SetBody(v *DeleteDeviceGroupResponseBody) *DeleteDeviceGroupResponse {
	s.Body = v
	return s
}

type DeleteDevicePropRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	PropKey       *string `json:"PropKey,omitempty" xml:"PropKey,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s DeleteDevicePropRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDevicePropRequest) GoString() string {
	return s.String()
}

func (s *DeleteDevicePropRequest) SetApiProduct(v string) *DeleteDevicePropRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteDevicePropRequest) SetApiRevision(v string) *DeleteDevicePropRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteDevicePropRequest) SetIotInstanceId(v string) *DeleteDevicePropRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteDevicePropRequest) SetProductKey(v string) *DeleteDevicePropRequest {
	s.ProductKey = &v
	return s
}

func (s *DeleteDevicePropRequest) SetDeviceName(v string) *DeleteDevicePropRequest {
	s.DeviceName = &v
	return s
}

func (s *DeleteDevicePropRequest) SetPropKey(v string) *DeleteDevicePropRequest {
	s.PropKey = &v
	return s
}

func (s *DeleteDevicePropRequest) SetIotId(v string) *DeleteDevicePropRequest {
	s.IotId = &v
	return s
}

type DeleteDevicePropResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteDevicePropResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDevicePropResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDevicePropResponseBody) SetRequestId(v string) *DeleteDevicePropResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDevicePropResponseBody) SetSuccess(v bool) *DeleteDevicePropResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteDevicePropResponseBody) SetCode(v string) *DeleteDevicePropResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDevicePropResponseBody) SetErrorMessage(v string) *DeleteDevicePropResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteDevicePropResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDevicePropResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDevicePropResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDevicePropResponse) GoString() string {
	return s.String()
}

func (s *DeleteDevicePropResponse) SetHeaders(v map[string]*string) *DeleteDevicePropResponse {
	s.Headers = v
	return s
}

func (s *DeleteDevicePropResponse) SetBody(v *DeleteDevicePropResponseBody) *DeleteDevicePropResponse {
	s.Body = v
	return s
}

type DeleteEdgeDriverRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
}

func (s DeleteEdgeDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEdgeDriverRequest) GoString() string {
	return s.String()
}

func (s *DeleteEdgeDriverRequest) SetApiProduct(v string) *DeleteEdgeDriverRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteEdgeDriverRequest) SetApiRevision(v string) *DeleteEdgeDriverRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteEdgeDriverRequest) SetIotInstanceId(v string) *DeleteEdgeDriverRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteEdgeDriverRequest) SetDriverId(v string) *DeleteEdgeDriverRequest {
	s.DriverId = &v
	return s
}

type DeleteEdgeDriverResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteEdgeDriverResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEdgeDriverResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEdgeDriverResponseBody) SetRequestId(v string) *DeleteEdgeDriverResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteEdgeDriverResponseBody) SetSuccess(v bool) *DeleteEdgeDriverResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteEdgeDriverResponseBody) SetCode(v string) *DeleteEdgeDriverResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteEdgeDriverResponseBody) SetErrorMessage(v string) *DeleteEdgeDriverResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteEdgeDriverResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteEdgeDriverResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteEdgeDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEdgeDriverResponse) GoString() string {
	return s.String()
}

func (s *DeleteEdgeDriverResponse) SetHeaders(v map[string]*string) *DeleteEdgeDriverResponse {
	s.Headers = v
	return s
}

func (s *DeleteEdgeDriverResponse) SetBody(v *DeleteEdgeDriverResponseBody) *DeleteEdgeDriverResponse {
	s.Body = v
	return s
}

type DeleteEdgeDriverVersionRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	DriverVersion *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty"`
}

func (s DeleteEdgeDriverVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEdgeDriverVersionRequest) GoString() string {
	return s.String()
}

func (s *DeleteEdgeDriverVersionRequest) SetApiProduct(v string) *DeleteEdgeDriverVersionRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteEdgeDriverVersionRequest) SetApiRevision(v string) *DeleteEdgeDriverVersionRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteEdgeDriverVersionRequest) SetIotInstanceId(v string) *DeleteEdgeDriverVersionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteEdgeDriverVersionRequest) SetDriverId(v string) *DeleteEdgeDriverVersionRequest {
	s.DriverId = &v
	return s
}

func (s *DeleteEdgeDriverVersionRequest) SetDriverVersion(v string) *DeleteEdgeDriverVersionRequest {
	s.DriverVersion = &v
	return s
}

type DeleteEdgeDriverVersionResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteEdgeDriverVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEdgeDriverVersionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEdgeDriverVersionResponseBody) SetRequestId(v string) *DeleteEdgeDriverVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteEdgeDriverVersionResponseBody) SetSuccess(v bool) *DeleteEdgeDriverVersionResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteEdgeDriverVersionResponseBody) SetCode(v string) *DeleteEdgeDriverVersionResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteEdgeDriverVersionResponseBody) SetErrorMessage(v string) *DeleteEdgeDriverVersionResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteEdgeDriverVersionResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteEdgeDriverVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteEdgeDriverVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEdgeDriverVersionResponse) GoString() string {
	return s.String()
}

func (s *DeleteEdgeDriverVersionResponse) SetHeaders(v map[string]*string) *DeleteEdgeDriverVersionResponse {
	s.Headers = v
	return s
}

func (s *DeleteEdgeDriverVersionResponse) SetBody(v *DeleteEdgeDriverVersionResponseBody) *DeleteEdgeDriverVersionResponse {
	s.Body = v
	return s
}

type DeleteEdgeInstanceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DeleteEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteEdgeInstanceRequest) SetApiProduct(v string) *DeleteEdgeInstanceRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteEdgeInstanceRequest) SetApiRevision(v string) *DeleteEdgeInstanceRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteEdgeInstanceRequest) SetIotInstanceId(v string) *DeleteEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteEdgeInstanceRequest) SetInstanceId(v string) *DeleteEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

type DeleteEdgeInstanceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteEdgeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEdgeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEdgeInstanceResponseBody) SetRequestId(v string) *DeleteEdgeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteEdgeInstanceResponseBody) SetSuccess(v bool) *DeleteEdgeInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteEdgeInstanceResponseBody) SetCode(v string) *DeleteEdgeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteEdgeInstanceResponseBody) SetErrorMessage(v string) *DeleteEdgeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteEdgeInstanceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteEdgeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteEdgeInstanceResponse) SetHeaders(v map[string]*string) *DeleteEdgeInstanceResponse {
	s.Headers = v
	return s
}

func (s *DeleteEdgeInstanceResponse) SetBody(v *DeleteEdgeInstanceResponseBody) *DeleteEdgeInstanceResponse {
	s.Body = v
	return s
}

type DeleteJobRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteJobRequest) SetApiProduct(v string) *DeleteJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteJobRequest) SetApiRevision(v string) *DeleteJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteJobRequest) SetIotInstanceId(v string) *DeleteJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteJobRequest) SetJobId(v string) *DeleteJobRequest {
	s.JobId = &v
	return s
}

type DeleteJobResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteJobResponseBody) SetRequestId(v string) *DeleteJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteJobResponseBody) SetSuccess(v bool) *DeleteJobResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteJobResponseBody) SetCode(v string) *DeleteJobResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteJobResponseBody) SetErrorMessage(v string) *DeleteJobResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteJobResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteJobResponse) SetHeaders(v map[string]*string) *DeleteJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteJobResponse) SetBody(v *DeleteJobResponseBody) *DeleteJobResponse {
	s.Body = v
	return s
}

type DeleteOTAFirmwareRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareId    *string `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty"`
}

func (s DeleteOTAFirmwareRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteOTAFirmwareRequest) GoString() string {
	return s.String()
}

func (s *DeleteOTAFirmwareRequest) SetApiProduct(v string) *DeleteOTAFirmwareRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteOTAFirmwareRequest) SetApiRevision(v string) *DeleteOTAFirmwareRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteOTAFirmwareRequest) SetIotInstanceId(v string) *DeleteOTAFirmwareRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteOTAFirmwareRequest) SetFirmwareId(v string) *DeleteOTAFirmwareRequest {
	s.FirmwareId = &v
	return s
}

type DeleteOTAFirmwareResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteOTAFirmwareResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteOTAFirmwareResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteOTAFirmwareResponseBody) SetRequestId(v string) *DeleteOTAFirmwareResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteOTAFirmwareResponseBody) SetSuccess(v bool) *DeleteOTAFirmwareResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteOTAFirmwareResponseBody) SetCode(v string) *DeleteOTAFirmwareResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteOTAFirmwareResponseBody) SetErrorMessage(v string) *DeleteOTAFirmwareResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteOTAFirmwareResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteOTAFirmwareResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteOTAFirmwareResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteOTAFirmwareResponse) GoString() string {
	return s.String()
}

func (s *DeleteOTAFirmwareResponse) SetHeaders(v map[string]*string) *DeleteOTAFirmwareResponse {
	s.Headers = v
	return s
}

func (s *DeleteOTAFirmwareResponse) SetBody(v *DeleteOTAFirmwareResponseBody) *DeleteOTAFirmwareResponse {
	s.Body = v
	return s
}

type DeleteOTAModuleRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ModuleName    *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
	AuthConfig    *string `json:"AuthConfig,omitempty" xml:"AuthConfig,omitempty"`
}

func (s DeleteOTAModuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteOTAModuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteOTAModuleRequest) SetApiProduct(v string) *DeleteOTAModuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteOTAModuleRequest) SetApiRevision(v string) *DeleteOTAModuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteOTAModuleRequest) SetIotInstanceId(v string) *DeleteOTAModuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteOTAModuleRequest) SetProductKey(v string) *DeleteOTAModuleRequest {
	s.ProductKey = &v
	return s
}

func (s *DeleteOTAModuleRequest) SetModuleName(v string) *DeleteOTAModuleRequest {
	s.ModuleName = &v
	return s
}

func (s *DeleteOTAModuleRequest) SetAuthConfig(v string) *DeleteOTAModuleRequest {
	s.AuthConfig = &v
	return s
}

type DeleteOTAModuleResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteOTAModuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteOTAModuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteOTAModuleResponseBody) SetRequestId(v string) *DeleteOTAModuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteOTAModuleResponseBody) SetSuccess(v bool) *DeleteOTAModuleResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteOTAModuleResponseBody) SetCode(v string) *DeleteOTAModuleResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteOTAModuleResponseBody) SetErrorMessage(v string) *DeleteOTAModuleResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteOTAModuleResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteOTAModuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteOTAModuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteOTAModuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteOTAModuleResponse) SetHeaders(v map[string]*string) *DeleteOTAModuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteOTAModuleResponse) SetBody(v *DeleteOTAModuleResponseBody) *DeleteOTAModuleResponse {
	s.Body = v
	return s
}

type DeleteProductRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s DeleteProductRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProductRequest) GoString() string {
	return s.String()
}

func (s *DeleteProductRequest) SetApiProduct(v string) *DeleteProductRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteProductRequest) SetApiRevision(v string) *DeleteProductRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteProductRequest) SetIotInstanceId(v string) *DeleteProductRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteProductRequest) SetProductKey(v string) *DeleteProductRequest {
	s.ProductKey = &v
	return s
}

func (s *DeleteProductRequest) SetRealTenantId(v string) *DeleteProductRequest {
	s.RealTenantId = &v
	return s
}

func (s *DeleteProductRequest) SetRealTripartiteKey(v string) *DeleteProductRequest {
	s.RealTripartiteKey = &v
	return s
}

type DeleteProductResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteProductResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteProductResponseBody) SetRequestId(v string) *DeleteProductResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteProductResponseBody) SetSuccess(v bool) *DeleteProductResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteProductResponseBody) SetCode(v string) *DeleteProductResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteProductResponseBody) SetErrorMessage(v string) *DeleteProductResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteProductResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteProductResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteProductResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProductResponse) GoString() string {
	return s.String()
}

func (s *DeleteProductResponse) SetHeaders(v map[string]*string) *DeleteProductResponse {
	s.Headers = v
	return s
}

func (s *DeleteProductResponse) SetBody(v *DeleteProductResponseBody) *DeleteProductResponse {
	s.Body = v
	return s
}

type DeleteProductTagsRequest struct {
	ApiProduct        *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductTagKey     []*string `json:"ProductTagKey,omitempty" xml:"ProductTagKey,omitempty" type:"Repeated"`
	ProductKey        *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	RealTenantId      *string   `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string   `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s DeleteProductTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProductTagsRequest) GoString() string {
	return s.String()
}

func (s *DeleteProductTagsRequest) SetApiProduct(v string) *DeleteProductTagsRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteProductTagsRequest) SetApiRevision(v string) *DeleteProductTagsRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteProductTagsRequest) SetIotInstanceId(v string) *DeleteProductTagsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteProductTagsRequest) SetProductTagKey(v []*string) *DeleteProductTagsRequest {
	s.ProductTagKey = v
	return s
}

func (s *DeleteProductTagsRequest) SetProductKey(v string) *DeleteProductTagsRequest {
	s.ProductKey = &v
	return s
}

func (s *DeleteProductTagsRequest) SetRealTenantId(v string) *DeleteProductTagsRequest {
	s.RealTenantId = &v
	return s
}

func (s *DeleteProductTagsRequest) SetRealTripartiteKey(v string) *DeleteProductTagsRequest {
	s.RealTripartiteKey = &v
	return s
}

type DeleteProductTagsResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s DeleteProductTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteProductTagsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteProductTagsResponseBody) SetRequestId(v string) *DeleteProductTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteProductTagsResponseBody) SetSuccess(v bool) *DeleteProductTagsResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteProductTagsResponseBody) SetErrorMessage(v string) *DeleteProductTagsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteProductTagsResponseBody) SetCode(v string) *DeleteProductTagsResponseBody {
	s.Code = &v
	return s
}

type DeleteProductTagsResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteProductTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteProductTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProductTagsResponse) GoString() string {
	return s.String()
}

func (s *DeleteProductTagsResponse) SetHeaders(v map[string]*string) *DeleteProductTagsResponse {
	s.Headers = v
	return s
}

func (s *DeleteProductTagsResponse) SetBody(v *DeleteProductTagsResponseBody) *DeleteProductTagsResponse {
	s.Body = v
	return s
}

type DeleteProductTopicRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	TopicId       *string `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
}

func (s DeleteProductTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProductTopicRequest) GoString() string {
	return s.String()
}

func (s *DeleteProductTopicRequest) SetApiProduct(v string) *DeleteProductTopicRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteProductTopicRequest) SetApiRevision(v string) *DeleteProductTopicRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteProductTopicRequest) SetIotInstanceId(v string) *DeleteProductTopicRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteProductTopicRequest) SetTopicId(v string) *DeleteProductTopicRequest {
	s.TopicId = &v
	return s
}

type DeleteProductTopicResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteProductTopicResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteProductTopicResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteProductTopicResponseBody) SetRequestId(v string) *DeleteProductTopicResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteProductTopicResponseBody) SetSuccess(v bool) *DeleteProductTopicResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteProductTopicResponseBody) SetCode(v string) *DeleteProductTopicResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteProductTopicResponseBody) SetErrorMessage(v string) *DeleteProductTopicResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteProductTopicResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteProductTopicResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteProductTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProductTopicResponse) GoString() string {
	return s.String()
}

func (s *DeleteProductTopicResponse) SetHeaders(v map[string]*string) *DeleteProductTopicResponse {
	s.Headers = v
	return s
}

func (s *DeleteProductTopicResponse) SetBody(v *DeleteProductTopicResponseBody) *DeleteProductTopicResponse {
	s.Body = v
	return s
}

type DeleteRuleRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DeleteRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteRuleRequest) SetApiProduct(v string) *DeleteRuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteRuleRequest) SetApiRevision(v string) *DeleteRuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteRuleRequest) SetIotInstanceId(v string) *DeleteRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteRuleRequest) SetRuleId(v int64) *DeleteRuleRequest {
	s.RuleId = &v
	return s
}

type DeleteRuleResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRuleResponseBody) SetRequestId(v string) *DeleteRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteRuleResponseBody) SetSuccess(v bool) *DeleteRuleResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteRuleResponseBody) SetCode(v string) *DeleteRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteRuleResponseBody) SetErrorMessage(v string) *DeleteRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteRuleResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteRuleResponse) SetHeaders(v map[string]*string) *DeleteRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteRuleResponse) SetBody(v *DeleteRuleResponseBody) *DeleteRuleResponse {
	s.Body = v
	return s
}

type DeleteRuleActionRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ActionId      *int64  `json:"ActionId,omitempty" xml:"ActionId,omitempty"`
}

func (s DeleteRuleActionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleActionRequest) GoString() string {
	return s.String()
}

func (s *DeleteRuleActionRequest) SetApiProduct(v string) *DeleteRuleActionRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteRuleActionRequest) SetApiRevision(v string) *DeleteRuleActionRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteRuleActionRequest) SetIotInstanceId(v string) *DeleteRuleActionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteRuleActionRequest) SetActionId(v int64) *DeleteRuleActionRequest {
	s.ActionId = &v
	return s
}

type DeleteRuleActionResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteRuleActionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleActionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRuleActionResponseBody) SetRequestId(v string) *DeleteRuleActionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteRuleActionResponseBody) SetSuccess(v bool) *DeleteRuleActionResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteRuleActionResponseBody) SetCode(v string) *DeleteRuleActionResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteRuleActionResponseBody) SetErrorMessage(v string) *DeleteRuleActionResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteRuleActionResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteRuleActionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteRuleActionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRuleActionResponse) GoString() string {
	return s.String()
}

func (s *DeleteRuleActionResponse) SetHeaders(v map[string]*string) *DeleteRuleActionResponse {
	s.Headers = v
	return s
}

func (s *DeleteRuleActionResponse) SetBody(v *DeleteRuleActionResponseBody) *DeleteRuleActionResponse {
	s.Body = v
	return s
}

type DeleteSceneRuleRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DeleteSceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSceneRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteSceneRuleRequest) SetApiProduct(v string) *DeleteSceneRuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteSceneRuleRequest) SetApiRevision(v string) *DeleteSceneRuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteSceneRuleRequest) SetIotInstanceId(v string) *DeleteSceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteSceneRuleRequest) SetRuleId(v string) *DeleteSceneRuleRequest {
	s.RuleId = &v
	return s
}

type DeleteSceneRuleResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s DeleteSceneRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSceneRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSceneRuleResponseBody) SetRequestId(v string) *DeleteSceneRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSceneRuleResponseBody) SetSuccess(v bool) *DeleteSceneRuleResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteSceneRuleResponseBody) SetErrorMessage(v string) *DeleteSceneRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteSceneRuleResponseBody) SetCode(v string) *DeleteSceneRuleResponseBody {
	s.Code = &v
	return s
}

type DeleteSceneRuleResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteSceneRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSceneRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteSceneRuleResponse) SetHeaders(v map[string]*string) *DeleteSceneRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteSceneRuleResponse) SetBody(v *DeleteSceneRuleResponseBody) *DeleteSceneRuleResponse {
	s.Body = v
	return s
}

type DeleteSubscribeRelationRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DeleteSubscribeRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSubscribeRelationRequest) GoString() string {
	return s.String()
}

func (s *DeleteSubscribeRelationRequest) SetApiProduct(v string) *DeleteSubscribeRelationRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteSubscribeRelationRequest) SetApiRevision(v string) *DeleteSubscribeRelationRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteSubscribeRelationRequest) SetIotInstanceId(v string) *DeleteSubscribeRelationRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteSubscribeRelationRequest) SetProductKey(v string) *DeleteSubscribeRelationRequest {
	s.ProductKey = &v
	return s
}

func (s *DeleteSubscribeRelationRequest) SetType(v string) *DeleteSubscribeRelationRequest {
	s.Type = &v
	return s
}

type DeleteSubscribeRelationResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteSubscribeRelationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSubscribeRelationResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSubscribeRelationResponseBody) SetRequestId(v string) *DeleteSubscribeRelationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSubscribeRelationResponseBody) SetSuccess(v bool) *DeleteSubscribeRelationResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteSubscribeRelationResponseBody) SetCode(v string) *DeleteSubscribeRelationResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteSubscribeRelationResponseBody) SetErrorMessage(v string) *DeleteSubscribeRelationResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteSubscribeRelationResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteSubscribeRelationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSubscribeRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSubscribeRelationResponse) GoString() string {
	return s.String()
}

func (s *DeleteSubscribeRelationResponse) SetHeaders(v map[string]*string) *DeleteSubscribeRelationResponse {
	s.Headers = v
	return s
}

func (s *DeleteSubscribeRelationResponse) SetBody(v *DeleteSubscribeRelationResponseBody) *DeleteSubscribeRelationResponse {
	s.Body = v
	return s
}

type DeleteThingModelRequest struct {
	ApiProduct         *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision        *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId      *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId    *string   `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ProductKey         *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	PropertyIdentifier []*string `json:"PropertyIdentifier,omitempty" xml:"PropertyIdentifier,omitempty" type:"Repeated"`
	ServiceIdentifier  []*string `json:"ServiceIdentifier,omitempty" xml:"ServiceIdentifier,omitempty" type:"Repeated"`
	EventIdentifier    []*string `json:"EventIdentifier,omitempty" xml:"EventIdentifier,omitempty" type:"Repeated"`
	FunctionBlockId    *string   `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
	IsClearAllFunction *bool     `json:"IsClearAllFunction,omitempty" xml:"IsClearAllFunction,omitempty"`
	RealTenantId       *string   `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey  *string   `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s DeleteThingModelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteThingModelRequest) GoString() string {
	return s.String()
}

func (s *DeleteThingModelRequest) SetApiProduct(v string) *DeleteThingModelRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteThingModelRequest) SetApiRevision(v string) *DeleteThingModelRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteThingModelRequest) SetIotInstanceId(v string) *DeleteThingModelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteThingModelRequest) SetResourceGroupId(v string) *DeleteThingModelRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DeleteThingModelRequest) SetProductKey(v string) *DeleteThingModelRequest {
	s.ProductKey = &v
	return s
}

func (s *DeleteThingModelRequest) SetPropertyIdentifier(v []*string) *DeleteThingModelRequest {
	s.PropertyIdentifier = v
	return s
}

func (s *DeleteThingModelRequest) SetServiceIdentifier(v []*string) *DeleteThingModelRequest {
	s.ServiceIdentifier = v
	return s
}

func (s *DeleteThingModelRequest) SetEventIdentifier(v []*string) *DeleteThingModelRequest {
	s.EventIdentifier = v
	return s
}

func (s *DeleteThingModelRequest) SetFunctionBlockId(v string) *DeleteThingModelRequest {
	s.FunctionBlockId = &v
	return s
}

func (s *DeleteThingModelRequest) SetIsClearAllFunction(v bool) *DeleteThingModelRequest {
	s.IsClearAllFunction = &v
	return s
}

func (s *DeleteThingModelRequest) SetRealTenantId(v string) *DeleteThingModelRequest {
	s.RealTenantId = &v
	return s
}

func (s *DeleteThingModelRequest) SetRealTripartiteKey(v string) *DeleteThingModelRequest {
	s.RealTripartiteKey = &v
	return s
}

type DeleteThingModelResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DeleteThingModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteThingModelResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteThingModelResponseBody) SetRequestId(v string) *DeleteThingModelResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteThingModelResponseBody) SetSuccess(v bool) *DeleteThingModelResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteThingModelResponseBody) SetCode(v string) *DeleteThingModelResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteThingModelResponseBody) SetErrorMessage(v string) *DeleteThingModelResponseBody {
	s.ErrorMessage = &v
	return s
}

type DeleteThingModelResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteThingModelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteThingModelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteThingModelResponse) GoString() string {
	return s.String()
}

func (s *DeleteThingModelResponse) SetHeaders(v map[string]*string) *DeleteThingModelResponse {
	s.Headers = v
	return s
}

func (s *DeleteThingModelResponse) SetBody(v *DeleteThingModelResponseBody) *DeleteThingModelResponse {
	s.Body = v
	return s
}

type DeleteTopicRouteTableRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DstTopic      []*string `json:"DstTopic,omitempty" xml:"DstTopic,omitempty" type:"Repeated"`
	SrcTopic      *string   `json:"SrcTopic,omitempty" xml:"SrcTopic,omitempty"`
}

func (s DeleteTopicRouteTableRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTopicRouteTableRequest) GoString() string {
	return s.String()
}

func (s *DeleteTopicRouteTableRequest) SetApiProduct(v string) *DeleteTopicRouteTableRequest {
	s.ApiProduct = &v
	return s
}

func (s *DeleteTopicRouteTableRequest) SetApiRevision(v string) *DeleteTopicRouteTableRequest {
	s.ApiRevision = &v
	return s
}

func (s *DeleteTopicRouteTableRequest) SetIotInstanceId(v string) *DeleteTopicRouteTableRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DeleteTopicRouteTableRequest) SetDstTopic(v []*string) *DeleteTopicRouteTableRequest {
	s.DstTopic = v
	return s
}

func (s *DeleteTopicRouteTableRequest) SetSrcTopic(v string) *DeleteTopicRouteTableRequest {
	s.SrcTopic = &v
	return s
}

type DeleteTopicRouteTableResponseBody struct {
	RequestId     *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success       *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
	Code          *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	IsAllSucceed  *bool                                           `json:"IsAllSucceed,omitempty" xml:"IsAllSucceed,omitempty"`
	ErrorMessage  *string                                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	FailureTopics *DeleteTopicRouteTableResponseBodyFailureTopics `json:"FailureTopics,omitempty" xml:"FailureTopics,omitempty" type:"Struct"`
}

func (s DeleteTopicRouteTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTopicRouteTableResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTopicRouteTableResponseBody) SetRequestId(v string) *DeleteTopicRouteTableResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTopicRouteTableResponseBody) SetSuccess(v bool) *DeleteTopicRouteTableResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteTopicRouteTableResponseBody) SetCode(v string) *DeleteTopicRouteTableResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteTopicRouteTableResponseBody) SetIsAllSucceed(v bool) *DeleteTopicRouteTableResponseBody {
	s.IsAllSucceed = &v
	return s
}

func (s *DeleteTopicRouteTableResponseBody) SetErrorMessage(v string) *DeleteTopicRouteTableResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteTopicRouteTableResponseBody) SetFailureTopics(v *DeleteTopicRouteTableResponseBodyFailureTopics) *DeleteTopicRouteTableResponseBody {
	s.FailureTopics = v
	return s
}

type DeleteTopicRouteTableResponseBodyFailureTopics struct {
	Topic []map[string]*string `json:"Topic,omitempty" xml:"Topic,omitempty" type:"Repeated"`
}

func (s DeleteTopicRouteTableResponseBodyFailureTopics) String() string {
	return tea.Prettify(s)
}

func (s DeleteTopicRouteTableResponseBodyFailureTopics) GoString() string {
	return s.String()
}

func (s *DeleteTopicRouteTableResponseBodyFailureTopics) SetTopic(v []map[string]*string) *DeleteTopicRouteTableResponseBodyFailureTopics {
	s.Topic = v
	return s
}

type DeleteTopicRouteTableResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteTopicRouteTableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteTopicRouteTableResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTopicRouteTableResponse) GoString() string {
	return s.String()
}

func (s *DeleteTopicRouteTableResponse) SetHeaders(v map[string]*string) *DeleteTopicRouteTableResponse {
	s.Headers = v
	return s
}

func (s *DeleteTopicRouteTableResponse) SetBody(v *DeleteTopicRouteTableResponseBody) *DeleteTopicRouteTableResponse {
	s.Body = v
	return s
}

type DisableSceneRuleRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DisableSceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableSceneRuleRequest) GoString() string {
	return s.String()
}

func (s *DisableSceneRuleRequest) SetApiProduct(v string) *DisableSceneRuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *DisableSceneRuleRequest) SetApiRevision(v string) *DisableSceneRuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *DisableSceneRuleRequest) SetIotInstanceId(v string) *DisableSceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DisableSceneRuleRequest) SetRuleId(v string) *DisableSceneRuleRequest {
	s.RuleId = &v
	return s
}

type DisableSceneRuleResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s DisableSceneRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableSceneRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DisableSceneRuleResponseBody) SetRequestId(v string) *DisableSceneRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableSceneRuleResponseBody) SetSuccess(v bool) *DisableSceneRuleResponseBody {
	s.Success = &v
	return s
}

func (s *DisableSceneRuleResponseBody) SetErrorMessage(v string) *DisableSceneRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DisableSceneRuleResponseBody) SetCode(v string) *DisableSceneRuleResponseBody {
	s.Code = &v
	return s
}

type DisableSceneRuleResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DisableSceneRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableSceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableSceneRuleResponse) GoString() string {
	return s.String()
}

func (s *DisableSceneRuleResponse) SetHeaders(v map[string]*string) *DisableSceneRuleResponse {
	s.Headers = v
	return s
}

func (s *DisableSceneRuleResponse) SetBody(v *DisableSceneRuleResponseBody) *DisableSceneRuleResponse {
	s.Body = v
	return s
}

type DisableThingRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId             *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s DisableThingRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableThingRequest) GoString() string {
	return s.String()
}

func (s *DisableThingRequest) SetApiProduct(v string) *DisableThingRequest {
	s.ApiProduct = &v
	return s
}

func (s *DisableThingRequest) SetApiRevision(v string) *DisableThingRequest {
	s.ApiRevision = &v
	return s
}

func (s *DisableThingRequest) SetIotInstanceId(v string) *DisableThingRequest {
	s.IotInstanceId = &v
	return s
}

func (s *DisableThingRequest) SetProductKey(v string) *DisableThingRequest {
	s.ProductKey = &v
	return s
}

func (s *DisableThingRequest) SetDeviceName(v string) *DisableThingRequest {
	s.DeviceName = &v
	return s
}

func (s *DisableThingRequest) SetIotId(v string) *DisableThingRequest {
	s.IotId = &v
	return s
}

func (s *DisableThingRequest) SetRealTenantId(v string) *DisableThingRequest {
	s.RealTenantId = &v
	return s
}

func (s *DisableThingRequest) SetRealTripartiteKey(v string) *DisableThingRequest {
	s.RealTripartiteKey = &v
	return s
}

type DisableThingResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s DisableThingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableThingResponseBody) GoString() string {
	return s.String()
}

func (s *DisableThingResponseBody) SetRequestId(v string) *DisableThingResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableThingResponseBody) SetSuccess(v bool) *DisableThingResponseBody {
	s.Success = &v
	return s
}

func (s *DisableThingResponseBody) SetCode(v string) *DisableThingResponseBody {
	s.Code = &v
	return s
}

func (s *DisableThingResponseBody) SetErrorMessage(v string) *DisableThingResponseBody {
	s.ErrorMessage = &v
	return s
}

type DisableThingResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DisableThingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableThingResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableThingResponse) GoString() string {
	return s.String()
}

func (s *DisableThingResponse) SetHeaders(v map[string]*string) *DisableThingResponse {
	s.Headers = v
	return s
}

func (s *DisableThingResponse) SetBody(v *DisableThingResponseBody) *DisableThingResponse {
	s.Body = v
	return s
}

type EnableSceneRuleRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s EnableSceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableSceneRuleRequest) GoString() string {
	return s.String()
}

func (s *EnableSceneRuleRequest) SetApiProduct(v string) *EnableSceneRuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *EnableSceneRuleRequest) SetApiRevision(v string) *EnableSceneRuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *EnableSceneRuleRequest) SetIotInstanceId(v string) *EnableSceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *EnableSceneRuleRequest) SetRuleId(v string) *EnableSceneRuleRequest {
	s.RuleId = &v
	return s
}

type EnableSceneRuleResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s EnableSceneRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableSceneRuleResponseBody) GoString() string {
	return s.String()
}

func (s *EnableSceneRuleResponseBody) SetRequestId(v string) *EnableSceneRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableSceneRuleResponseBody) SetSuccess(v bool) *EnableSceneRuleResponseBody {
	s.Success = &v
	return s
}

func (s *EnableSceneRuleResponseBody) SetErrorMessage(v string) *EnableSceneRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *EnableSceneRuleResponseBody) SetCode(v string) *EnableSceneRuleResponseBody {
	s.Code = &v
	return s
}

type EnableSceneRuleResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EnableSceneRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableSceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableSceneRuleResponse) GoString() string {
	return s.String()
}

func (s *EnableSceneRuleResponse) SetHeaders(v map[string]*string) *EnableSceneRuleResponse {
	s.Headers = v
	return s
}

func (s *EnableSceneRuleResponse) SetBody(v *EnableSceneRuleResponseBody) *EnableSceneRuleResponse {
	s.Body = v
	return s
}

type EnableThingRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId             *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s EnableThingRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableThingRequest) GoString() string {
	return s.String()
}

func (s *EnableThingRequest) SetApiProduct(v string) *EnableThingRequest {
	s.ApiProduct = &v
	return s
}

func (s *EnableThingRequest) SetApiRevision(v string) *EnableThingRequest {
	s.ApiRevision = &v
	return s
}

func (s *EnableThingRequest) SetIotInstanceId(v string) *EnableThingRequest {
	s.IotInstanceId = &v
	return s
}

func (s *EnableThingRequest) SetProductKey(v string) *EnableThingRequest {
	s.ProductKey = &v
	return s
}

func (s *EnableThingRequest) SetDeviceName(v string) *EnableThingRequest {
	s.DeviceName = &v
	return s
}

func (s *EnableThingRequest) SetIotId(v string) *EnableThingRequest {
	s.IotId = &v
	return s
}

func (s *EnableThingRequest) SetRealTenantId(v string) *EnableThingRequest {
	s.RealTenantId = &v
	return s
}

func (s *EnableThingRequest) SetRealTripartiteKey(v string) *EnableThingRequest {
	s.RealTripartiteKey = &v
	return s
}

type EnableThingResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s EnableThingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableThingResponseBody) GoString() string {
	return s.String()
}

func (s *EnableThingResponseBody) SetRequestId(v string) *EnableThingResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableThingResponseBody) SetSuccess(v bool) *EnableThingResponseBody {
	s.Success = &v
	return s
}

func (s *EnableThingResponseBody) SetCode(v string) *EnableThingResponseBody {
	s.Code = &v
	return s
}

func (s *EnableThingResponseBody) SetErrorMessage(v string) *EnableThingResponseBody {
	s.ErrorMessage = &v
	return s
}

type EnableThingResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EnableThingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableThingResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableThingResponse) GoString() string {
	return s.String()
}

func (s *EnableThingResponse) SetHeaders(v map[string]*string) *EnableThingResponse {
	s.Headers = v
	return s
}

func (s *EnableThingResponse) SetBody(v *EnableThingResponseBody) *EnableThingResponse {
	s.Body = v
	return s
}

type GenerateDeviceNameListURLRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
}

func (s GenerateDeviceNameListURLRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateDeviceNameListURLRequest) GoString() string {
	return s.String()
}

func (s *GenerateDeviceNameListURLRequest) SetApiProduct(v string) *GenerateDeviceNameListURLRequest {
	s.ApiProduct = &v
	return s
}

func (s *GenerateDeviceNameListURLRequest) SetApiRevision(v string) *GenerateDeviceNameListURLRequest {
	s.ApiRevision = &v
	return s
}

func (s *GenerateDeviceNameListURLRequest) SetIotInstanceId(v string) *GenerateDeviceNameListURLRequest {
	s.IotInstanceId = &v
	return s
}

type GenerateDeviceNameListURLResponseBody struct {
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                      `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *GenerateDeviceNameListURLResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s GenerateDeviceNameListURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateDeviceNameListURLResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateDeviceNameListURLResponseBody) SetRequestId(v string) *GenerateDeviceNameListURLResponseBody {
	s.RequestId = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseBody) SetSuccess(v bool) *GenerateDeviceNameListURLResponseBody {
	s.Success = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseBody) SetCode(v string) *GenerateDeviceNameListURLResponseBody {
	s.Code = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseBody) SetErrorMessage(v string) *GenerateDeviceNameListURLResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseBody) SetData(v *GenerateDeviceNameListURLResponseBodyData) *GenerateDeviceNameListURLResponseBody {
	s.Data = v
	return s
}

type GenerateDeviceNameListURLResponseBodyData struct {
	Key           *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Host          *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Policy        *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	AccessKeyId   *string `json:"AccessKeyId,omitempty" xml:"AccessKeyId,omitempty"`
	Signature     *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
	FileUrl       *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	UtcCreate     *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	ObjectStorage *string `json:"ObjectStorage,omitempty" xml:"ObjectStorage,omitempty"`
}

func (s GenerateDeviceNameListURLResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GenerateDeviceNameListURLResponseBodyData) GoString() string {
	return s.String()
}

func (s *GenerateDeviceNameListURLResponseBodyData) SetKey(v string) *GenerateDeviceNameListURLResponseBodyData {
	s.Key = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseBodyData) SetHost(v string) *GenerateDeviceNameListURLResponseBodyData {
	s.Host = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseBodyData) SetPolicy(v string) *GenerateDeviceNameListURLResponseBodyData {
	s.Policy = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseBodyData) SetAccessKeyId(v string) *GenerateDeviceNameListURLResponseBodyData {
	s.AccessKeyId = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseBodyData) SetSignature(v string) *GenerateDeviceNameListURLResponseBodyData {
	s.Signature = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseBodyData) SetFileUrl(v string) *GenerateDeviceNameListURLResponseBodyData {
	s.FileUrl = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseBodyData) SetUtcCreate(v string) *GenerateDeviceNameListURLResponseBodyData {
	s.UtcCreate = &v
	return s
}

func (s *GenerateDeviceNameListURLResponseBodyData) SetObjectStorage(v string) *GenerateDeviceNameListURLResponseBodyData {
	s.ObjectStorage = &v
	return s
}

type GenerateDeviceNameListURLResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GenerateDeviceNameListURLResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GenerateDeviceNameListURLResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateDeviceNameListURLResponse) GoString() string {
	return s.String()
}

func (s *GenerateDeviceNameListURLResponse) SetHeaders(v map[string]*string) *GenerateDeviceNameListURLResponse {
	s.Headers = v
	return s
}

func (s *GenerateDeviceNameListURLResponse) SetBody(v *GenerateDeviceNameListURLResponseBody) *GenerateDeviceNameListURLResponse {
	s.Body = v
	return s
}

type GenerateFileUploadURLRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FileSuffix    *string `json:"FileSuffix,omitempty" xml:"FileSuffix,omitempty"`
	BizCode       *string `json:"BizCode,omitempty" xml:"BizCode,omitempty"`
}

func (s GenerateFileUploadURLRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateFileUploadURLRequest) GoString() string {
	return s.String()
}

func (s *GenerateFileUploadURLRequest) SetApiProduct(v string) *GenerateFileUploadURLRequest {
	s.ApiProduct = &v
	return s
}

func (s *GenerateFileUploadURLRequest) SetApiRevision(v string) *GenerateFileUploadURLRequest {
	s.ApiRevision = &v
	return s
}

func (s *GenerateFileUploadURLRequest) SetIotInstanceId(v string) *GenerateFileUploadURLRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GenerateFileUploadURLRequest) SetFileSuffix(v string) *GenerateFileUploadURLRequest {
	s.FileSuffix = &v
	return s
}

func (s *GenerateFileUploadURLRequest) SetBizCode(v string) *GenerateFileUploadURLRequest {
	s.BizCode = &v
	return s
}

type GenerateFileUploadURLResponseBody struct {
	RequestId    *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *GenerateFileUploadURLResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s GenerateFileUploadURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateFileUploadURLResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateFileUploadURLResponseBody) SetRequestId(v string) *GenerateFileUploadURLResponseBody {
	s.RequestId = &v
	return s
}

func (s *GenerateFileUploadURLResponseBody) SetSuccess(v bool) *GenerateFileUploadURLResponseBody {
	s.Success = &v
	return s
}

func (s *GenerateFileUploadURLResponseBody) SetCode(v string) *GenerateFileUploadURLResponseBody {
	s.Code = &v
	return s
}

func (s *GenerateFileUploadURLResponseBody) SetErrorMessage(v string) *GenerateFileUploadURLResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GenerateFileUploadURLResponseBody) SetData(v *GenerateFileUploadURLResponseBodyData) *GenerateFileUploadURLResponseBody {
	s.Data = v
	return s
}

type GenerateFileUploadURLResponseBodyData struct {
	Key            *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Host           *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Policy         *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	OssAccessKeyId *string `json:"OssAccessKeyId,omitempty" xml:"OssAccessKeyId,omitempty"`
	Signature      *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
	ObjectStorage  *string `json:"ObjectStorage,omitempty" xml:"ObjectStorage,omitempty"`
}

func (s GenerateFileUploadURLResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GenerateFileUploadURLResponseBodyData) GoString() string {
	return s.String()
}

func (s *GenerateFileUploadURLResponseBodyData) SetKey(v string) *GenerateFileUploadURLResponseBodyData {
	s.Key = &v
	return s
}

func (s *GenerateFileUploadURLResponseBodyData) SetHost(v string) *GenerateFileUploadURLResponseBodyData {
	s.Host = &v
	return s
}

func (s *GenerateFileUploadURLResponseBodyData) SetPolicy(v string) *GenerateFileUploadURLResponseBodyData {
	s.Policy = &v
	return s
}

func (s *GenerateFileUploadURLResponseBodyData) SetOssAccessKeyId(v string) *GenerateFileUploadURLResponseBodyData {
	s.OssAccessKeyId = &v
	return s
}

func (s *GenerateFileUploadURLResponseBodyData) SetSignature(v string) *GenerateFileUploadURLResponseBodyData {
	s.Signature = &v
	return s
}

func (s *GenerateFileUploadURLResponseBodyData) SetObjectStorage(v string) *GenerateFileUploadURLResponseBodyData {
	s.ObjectStorage = &v
	return s
}

type GenerateFileUploadURLResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GenerateFileUploadURLResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GenerateFileUploadURLResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateFileUploadURLResponse) GoString() string {
	return s.String()
}

func (s *GenerateFileUploadURLResponse) SetHeaders(v map[string]*string) *GenerateFileUploadURLResponse {
	s.Headers = v
	return s
}

func (s *GenerateFileUploadURLResponse) SetBody(v *GenerateFileUploadURLResponseBody) *GenerateFileUploadURLResponse {
	s.Body = v
	return s
}

type GenerateOTAUploadURLRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FileSuffix    *string `json:"FileSuffix,omitempty" xml:"FileSuffix,omitempty"`
}

func (s GenerateOTAUploadURLRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateOTAUploadURLRequest) GoString() string {
	return s.String()
}

func (s *GenerateOTAUploadURLRequest) SetApiProduct(v string) *GenerateOTAUploadURLRequest {
	s.ApiProduct = &v
	return s
}

func (s *GenerateOTAUploadURLRequest) SetApiRevision(v string) *GenerateOTAUploadURLRequest {
	s.ApiRevision = &v
	return s
}

func (s *GenerateOTAUploadURLRequest) SetIotInstanceId(v string) *GenerateOTAUploadURLRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GenerateOTAUploadURLRequest) SetFileSuffix(v string) *GenerateOTAUploadURLRequest {
	s.FileSuffix = &v
	return s
}

type GenerateOTAUploadURLResponseBody struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *GenerateOTAUploadURLResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s GenerateOTAUploadURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateOTAUploadURLResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateOTAUploadURLResponseBody) SetRequestId(v string) *GenerateOTAUploadURLResponseBody {
	s.RequestId = &v
	return s
}

func (s *GenerateOTAUploadURLResponseBody) SetSuccess(v bool) *GenerateOTAUploadURLResponseBody {
	s.Success = &v
	return s
}

func (s *GenerateOTAUploadURLResponseBody) SetCode(v string) *GenerateOTAUploadURLResponseBody {
	s.Code = &v
	return s
}

func (s *GenerateOTAUploadURLResponseBody) SetErrorMessage(v string) *GenerateOTAUploadURLResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GenerateOTAUploadURLResponseBody) SetData(v *GenerateOTAUploadURLResponseBodyData) *GenerateOTAUploadURLResponseBody {
	s.Data = v
	return s
}

type GenerateOTAUploadURLResponseBodyData struct {
	Key            *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Host           *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Policy         *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	OSSAccessKeyId *string `json:"OSSAccessKeyId,omitempty" xml:"OSSAccessKeyId,omitempty"`
	Signature      *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
	FirmwareUrl    *string `json:"FirmwareUrl,omitempty" xml:"FirmwareUrl,omitempty"`
	UtcCreate      *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	ObjectStorage  *string `json:"ObjectStorage,omitempty" xml:"ObjectStorage,omitempty"`
}

func (s GenerateOTAUploadURLResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GenerateOTAUploadURLResponseBodyData) GoString() string {
	return s.String()
}

func (s *GenerateOTAUploadURLResponseBodyData) SetKey(v string) *GenerateOTAUploadURLResponseBodyData {
	s.Key = &v
	return s
}

func (s *GenerateOTAUploadURLResponseBodyData) SetHost(v string) *GenerateOTAUploadURLResponseBodyData {
	s.Host = &v
	return s
}

func (s *GenerateOTAUploadURLResponseBodyData) SetPolicy(v string) *GenerateOTAUploadURLResponseBodyData {
	s.Policy = &v
	return s
}

func (s *GenerateOTAUploadURLResponseBodyData) SetOSSAccessKeyId(v string) *GenerateOTAUploadURLResponseBodyData {
	s.OSSAccessKeyId = &v
	return s
}

func (s *GenerateOTAUploadURLResponseBodyData) SetSignature(v string) *GenerateOTAUploadURLResponseBodyData {
	s.Signature = &v
	return s
}

func (s *GenerateOTAUploadURLResponseBodyData) SetFirmwareUrl(v string) *GenerateOTAUploadURLResponseBodyData {
	s.FirmwareUrl = &v
	return s
}

func (s *GenerateOTAUploadURLResponseBodyData) SetUtcCreate(v string) *GenerateOTAUploadURLResponseBodyData {
	s.UtcCreate = &v
	return s
}

func (s *GenerateOTAUploadURLResponseBodyData) SetObjectStorage(v string) *GenerateOTAUploadURLResponseBodyData {
	s.ObjectStorage = &v
	return s
}

type GenerateOTAUploadURLResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GenerateOTAUploadURLResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GenerateOTAUploadURLResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateOTAUploadURLResponse) GoString() string {
	return s.String()
}

func (s *GenerateOTAUploadURLResponse) SetHeaders(v map[string]*string) *GenerateOTAUploadURLResponse {
	s.Headers = v
	return s
}

func (s *GenerateOTAUploadURLResponse) SetBody(v *GenerateOTAUploadURLResponseBody) *GenerateOTAUploadURLResponse {
	s.Body = v
	return s
}

type GetDataAPIServiceDetailRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	ApiSrn        *string `json:"ApiSrn,omitempty" xml:"ApiSrn,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
}

func (s GetDataAPIServiceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailRequest) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailRequest) SetApiProduct(v string) *GetDataAPIServiceDetailRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetDataAPIServiceDetailRequest) SetApiRevision(v string) *GetDataAPIServiceDetailRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetDataAPIServiceDetailRequest) SetApiSrn(v string) *GetDataAPIServiceDetailRequest {
	s.ApiSrn = &v
	return s
}

func (s *GetDataAPIServiceDetailRequest) SetIotInstanceId(v string) *GetDataAPIServiceDetailRequest {
	s.IotInstanceId = &v
	return s
}

type GetDataAPIServiceDetailResponseBody struct {
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *GetDataAPIServiceDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s GetDataAPIServiceDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailResponseBody) SetRequestId(v string) *GetDataAPIServiceDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBody) SetSuccess(v bool) *GetDataAPIServiceDetailResponseBody {
	s.Success = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBody) SetCode(v string) *GetDataAPIServiceDetailResponseBody {
	s.Code = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBody) SetErrorMessage(v string) *GetDataAPIServiceDetailResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBody) SetData(v *GetDataAPIServiceDetailResponseBodyData) *GetDataAPIServiceDetailResponseBody {
	s.Data = v
	return s
}

type GetDataAPIServiceDetailResponseBodyData struct {
	ApiSrn          *string                                                `json:"ApiSrn,omitempty" xml:"ApiSrn,omitempty"`
	Status          *int32                                                 `json:"Status,omitempty" xml:"Status,omitempty"`
	DisplayName     *string                                                `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	ApiPath         *string                                                `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	CreateTime      *int64                                                 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	LastUpdateTime  *int64                                                 `json:"LastUpdateTime,omitempty" xml:"LastUpdateTime,omitempty"`
	DateFormat      *string                                                `json:"DateFormat,omitempty" xml:"DateFormat,omitempty"`
	RequestMethod   *string                                                `json:"RequestMethod,omitempty" xml:"RequestMethod,omitempty"`
	RequestProtocol *string                                                `json:"RequestProtocol,omitempty" xml:"RequestProtocol,omitempty"`
	Description     *string                                                `json:"Description,omitempty" xml:"Description,omitempty"`
	SqlTemplateDTO  *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO `json:"SqlTemplateDTO,omitempty" xml:"SqlTemplateDTO,omitempty" type:"Struct"`
}

func (s GetDataAPIServiceDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailResponseBodyData) SetApiSrn(v string) *GetDataAPIServiceDetailResponseBodyData {
	s.ApiSrn = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyData) SetStatus(v int32) *GetDataAPIServiceDetailResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyData) SetDisplayName(v string) *GetDataAPIServiceDetailResponseBodyData {
	s.DisplayName = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyData) SetApiPath(v string) *GetDataAPIServiceDetailResponseBodyData {
	s.ApiPath = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyData) SetCreateTime(v int64) *GetDataAPIServiceDetailResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyData) SetLastUpdateTime(v int64) *GetDataAPIServiceDetailResponseBodyData {
	s.LastUpdateTime = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyData) SetDateFormat(v string) *GetDataAPIServiceDetailResponseBodyData {
	s.DateFormat = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyData) SetRequestMethod(v string) *GetDataAPIServiceDetailResponseBodyData {
	s.RequestMethod = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyData) SetRequestProtocol(v string) *GetDataAPIServiceDetailResponseBodyData {
	s.RequestProtocol = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyData) SetDescription(v string) *GetDataAPIServiceDetailResponseBodyData {
	s.Description = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyData) SetSqlTemplateDTO(v *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO) *GetDataAPIServiceDetailResponseBodyData {
	s.SqlTemplateDTO = v
	return s
}

type GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO struct {
	OriginSql      *string                                                              `json:"OriginSql,omitempty" xml:"OriginSql,omitempty"`
	TemplateSql    *string                                                              `json:"TemplateSql,omitempty" xml:"TemplateSql,omitempty"`
	RequestParams  *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParams  `json:"RequestParams,omitempty" xml:"RequestParams,omitempty" type:"Struct"`
	ResponseParams *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParams `json:"ResponseParams,omitempty" xml:"ResponseParams,omitempty" type:"Struct"`
}

func (s GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO) SetOriginSql(v string) *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO {
	s.OriginSql = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO) SetTemplateSql(v string) *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO {
	s.TemplateSql = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO) SetRequestParams(v *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParams) *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO {
	s.RequestParams = v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO) SetResponseParams(v *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParams) *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTO {
	s.ResponseParams = v
	return s
}

type GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParams struct {
	RequestParams []*GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams `json:"RequestParams,omitempty" xml:"RequestParams,omitempty" type:"Repeated"`
}

func (s GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParams) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParams) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParams) SetRequestParams(v []*GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams) *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParams {
	s.RequestParams = v
	return s
}

type GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams struct {
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Desc     *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Example  *string `json:"Example,omitempty" xml:"Example,omitempty"`
	Required *bool   `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams) SetName(v string) *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams {
	s.Name = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams) SetType(v string) *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams {
	s.Type = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams) SetDesc(v string) *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams {
	s.Desc = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams) SetExample(v string) *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams {
	s.Example = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams) SetRequired(v bool) *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTORequestParamsRequestParams {
	s.Required = &v
	return s
}

type GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParams struct {
	ResponseParams []*GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams `json:"ResponseParams,omitempty" xml:"ResponseParams,omitempty" type:"Repeated"`
}

func (s GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParams) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParams) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParams) SetResponseParams(v []*GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams) *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParams {
	s.ResponseParams = v
	return s
}

type GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams struct {
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Desc     *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Example  *string `json:"Example,omitempty" xml:"Example,omitempty"`
	Required *bool   `json:"Required,omitempty" xml:"Required,omitempty"`
}

func (s GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams) SetName(v string) *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams {
	s.Name = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams) SetType(v string) *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams {
	s.Type = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams) SetDesc(v string) *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams {
	s.Desc = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams) SetExample(v string) *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams {
	s.Example = &v
	return s
}

func (s *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams) SetRequired(v bool) *GetDataAPIServiceDetailResponseBodyDataSqlTemplateDTOResponseParamsResponseParams {
	s.Required = &v
	return s
}

type GetDataAPIServiceDetailResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDataAPIServiceDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDataAPIServiceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataAPIServiceDetailResponse) GoString() string {
	return s.String()
}

func (s *GetDataAPIServiceDetailResponse) SetHeaders(v map[string]*string) *GetDataAPIServiceDetailResponse {
	s.Headers = v
	return s
}

func (s *GetDataAPIServiceDetailResponse) SetBody(v *GetDataAPIServiceDetailResponseBody) *GetDataAPIServiceDetailResponse {
	s.Body = v
	return s
}

type GetDeviceShadowRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
}

func (s GetDeviceShadowRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceShadowRequest) GoString() string {
	return s.String()
}

func (s *GetDeviceShadowRequest) SetApiProduct(v string) *GetDeviceShadowRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetDeviceShadowRequest) SetApiRevision(v string) *GetDeviceShadowRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetDeviceShadowRequest) SetIotInstanceId(v string) *GetDeviceShadowRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetDeviceShadowRequest) SetProductKey(v string) *GetDeviceShadowRequest {
	s.ProductKey = &v
	return s
}

func (s *GetDeviceShadowRequest) SetDeviceName(v string) *GetDeviceShadowRequest {
	s.DeviceName = &v
	return s
}

type GetDeviceShadowResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success       *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code          *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage  *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ShadowMessage *string `json:"ShadowMessage,omitempty" xml:"ShadowMessage,omitempty"`
}

func (s GetDeviceShadowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceShadowResponseBody) GoString() string {
	return s.String()
}

func (s *GetDeviceShadowResponseBody) SetRequestId(v string) *GetDeviceShadowResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDeviceShadowResponseBody) SetSuccess(v bool) *GetDeviceShadowResponseBody {
	s.Success = &v
	return s
}

func (s *GetDeviceShadowResponseBody) SetCode(v string) *GetDeviceShadowResponseBody {
	s.Code = &v
	return s
}

func (s *GetDeviceShadowResponseBody) SetErrorMessage(v string) *GetDeviceShadowResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetDeviceShadowResponseBody) SetShadowMessage(v string) *GetDeviceShadowResponseBody {
	s.ShadowMessage = &v
	return s
}

type GetDeviceShadowResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDeviceShadowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDeviceShadowResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceShadowResponse) GoString() string {
	return s.String()
}

func (s *GetDeviceShadowResponse) SetHeaders(v map[string]*string) *GetDeviceShadowResponse {
	s.Headers = v
	return s
}

func (s *GetDeviceShadowResponse) SetBody(v *GetDeviceShadowResponseBody) *GetDeviceShadowResponse {
	s.Body = v
	return s
}

type GetDeviceStatusRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s GetDeviceStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceStatusRequest) GoString() string {
	return s.String()
}

func (s *GetDeviceStatusRequest) SetApiProduct(v string) *GetDeviceStatusRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetDeviceStatusRequest) SetApiRevision(v string) *GetDeviceStatusRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetDeviceStatusRequest) SetIotInstanceId(v string) *GetDeviceStatusRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetDeviceStatusRequest) SetProductKey(v string) *GetDeviceStatusRequest {
	s.ProductKey = &v
	return s
}

func (s *GetDeviceStatusRequest) SetDeviceName(v string) *GetDeviceStatusRequest {
	s.DeviceName = &v
	return s
}

func (s *GetDeviceStatusRequest) SetIotId(v string) *GetDeviceStatusRequest {
	s.IotId = &v
	return s
}

type GetDeviceStatusResponseBody struct {
	RequestId    *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *GetDeviceStatusResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s GetDeviceStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceStatusResponseBody) GoString() string {
	return s.String()
}

func (s *GetDeviceStatusResponseBody) SetRequestId(v string) *GetDeviceStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDeviceStatusResponseBody) SetSuccess(v bool) *GetDeviceStatusResponseBody {
	s.Success = &v
	return s
}

func (s *GetDeviceStatusResponseBody) SetCode(v string) *GetDeviceStatusResponseBody {
	s.Code = &v
	return s
}

func (s *GetDeviceStatusResponseBody) SetErrorMessage(v string) *GetDeviceStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetDeviceStatusResponseBody) SetData(v *GetDeviceStatusResponseBodyData) *GetDeviceStatusResponseBody {
	s.Data = v
	return s
}

type GetDeviceStatusResponseBodyData struct {
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetDeviceStatusResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceStatusResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDeviceStatusResponseBodyData) SetStatus(v string) *GetDeviceStatusResponseBodyData {
	s.Status = &v
	return s
}

type GetDeviceStatusResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDeviceStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDeviceStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceStatusResponse) GoString() string {
	return s.String()
}

func (s *GetDeviceStatusResponse) SetHeaders(v map[string]*string) *GetDeviceStatusResponse {
	s.Headers = v
	return s
}

func (s *GetDeviceStatusResponse) SetBody(v *GetDeviceStatusResponseBody) *GetDeviceStatusResponse {
	s.Body = v
	return s
}

type GetEdgeDriverVersionRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	DriverVersion *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty"`
}

func (s GetEdgeDriverVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeDriverVersionRequest) GoString() string {
	return s.String()
}

func (s *GetEdgeDriverVersionRequest) SetApiProduct(v string) *GetEdgeDriverVersionRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetEdgeDriverVersionRequest) SetApiRevision(v string) *GetEdgeDriverVersionRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetEdgeDriverVersionRequest) SetIotInstanceId(v string) *GetEdgeDriverVersionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetEdgeDriverVersionRequest) SetDriverId(v string) *GetEdgeDriverVersionRequest {
	s.DriverId = &v
	return s
}

func (s *GetEdgeDriverVersionRequest) SetDriverVersion(v string) *GetEdgeDriverVersionRequest {
	s.DriverVersion = &v
	return s
}

type GetEdgeDriverVersionResponseBody struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *GetEdgeDriverVersionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s GetEdgeDriverVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeDriverVersionResponseBody) GoString() string {
	return s.String()
}

func (s *GetEdgeDriverVersionResponseBody) SetRequestId(v string) *GetEdgeDriverVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEdgeDriverVersionResponseBody) SetSuccess(v bool) *GetEdgeDriverVersionResponseBody {
	s.Success = &v
	return s
}

func (s *GetEdgeDriverVersionResponseBody) SetCode(v string) *GetEdgeDriverVersionResponseBody {
	s.Code = &v
	return s
}

func (s *GetEdgeDriverVersionResponseBody) SetErrorMessage(v string) *GetEdgeDriverVersionResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetEdgeDriverVersionResponseBody) SetData(v *GetEdgeDriverVersionResponseBodyData) *GetEdgeDriverVersionResponseBody {
	s.Data = v
	return s
}

type GetEdgeDriverVersionResponseBodyData struct {
	DriverId             *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	DriverVersion        *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty"`
	VersionState         *string `json:"VersionState,omitempty" xml:"VersionState,omitempty"`
	EdgeVersion          *string `json:"EdgeVersion,omitempty" xml:"EdgeVersion,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SourceConfig         *string `json:"SourceConfig,omitempty" xml:"SourceConfig,omitempty"`
	DriverConfig         *string `json:"DriverConfig,omitempty" xml:"DriverConfig,omitempty"`
	ContainerConfig      *string `json:"ContainerConfig,omitempty" xml:"ContainerConfig,omitempty"`
	ConfigCheckRule      *string `json:"ConfigCheckRule,omitempty" xml:"ConfigCheckRule,omitempty"`
	GmtCreateTimestamp   *int64  `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty"`
	GmtModifiedTimestamp *int64  `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty"`
	Argument             *string `json:"Argument,omitempty" xml:"Argument,omitempty"`
}

func (s GetEdgeDriverVersionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeDriverVersionResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetEdgeDriverVersionResponseBodyData) SetDriverId(v string) *GetEdgeDriverVersionResponseBodyData {
	s.DriverId = &v
	return s
}

func (s *GetEdgeDriverVersionResponseBodyData) SetDriverVersion(v string) *GetEdgeDriverVersionResponseBodyData {
	s.DriverVersion = &v
	return s
}

func (s *GetEdgeDriverVersionResponseBodyData) SetVersionState(v string) *GetEdgeDriverVersionResponseBodyData {
	s.VersionState = &v
	return s
}

func (s *GetEdgeDriverVersionResponseBodyData) SetEdgeVersion(v string) *GetEdgeDriverVersionResponseBodyData {
	s.EdgeVersion = &v
	return s
}

func (s *GetEdgeDriverVersionResponseBodyData) SetDescription(v string) *GetEdgeDriverVersionResponseBodyData {
	s.Description = &v
	return s
}

func (s *GetEdgeDriverVersionResponseBodyData) SetSourceConfig(v string) *GetEdgeDriverVersionResponseBodyData {
	s.SourceConfig = &v
	return s
}

func (s *GetEdgeDriverVersionResponseBodyData) SetDriverConfig(v string) *GetEdgeDriverVersionResponseBodyData {
	s.DriverConfig = &v
	return s
}

func (s *GetEdgeDriverVersionResponseBodyData) SetContainerConfig(v string) *GetEdgeDriverVersionResponseBodyData {
	s.ContainerConfig = &v
	return s
}

func (s *GetEdgeDriverVersionResponseBodyData) SetConfigCheckRule(v string) *GetEdgeDriverVersionResponseBodyData {
	s.ConfigCheckRule = &v
	return s
}

func (s *GetEdgeDriverVersionResponseBodyData) SetGmtCreateTimestamp(v int64) *GetEdgeDriverVersionResponseBodyData {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *GetEdgeDriverVersionResponseBodyData) SetGmtModifiedTimestamp(v int64) *GetEdgeDriverVersionResponseBodyData {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *GetEdgeDriverVersionResponseBodyData) SetArgument(v string) *GetEdgeDriverVersionResponseBodyData {
	s.Argument = &v
	return s
}

type GetEdgeDriverVersionResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetEdgeDriverVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetEdgeDriverVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeDriverVersionResponse) GoString() string {
	return s.String()
}

func (s *GetEdgeDriverVersionResponse) SetHeaders(v map[string]*string) *GetEdgeDriverVersionResponse {
	s.Headers = v
	return s
}

func (s *GetEdgeDriverVersionResponse) SetBody(v *GetEdgeDriverVersionResponseBody) *GetEdgeDriverVersionResponse {
	s.Body = v
	return s
}

type GetEdgeInstanceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceRequest) SetApiProduct(v string) *GetEdgeInstanceRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetEdgeInstanceRequest) SetApiRevision(v string) *GetEdgeInstanceRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetEdgeInstanceRequest) SetIotInstanceId(v string) *GetEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetEdgeInstanceRequest) SetInstanceId(v string) *GetEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

type GetEdgeInstanceResponseBody struct {
	RequestId    *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *GetEdgeInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s GetEdgeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceResponseBody) SetRequestId(v string) *GetEdgeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEdgeInstanceResponseBody) SetSuccess(v bool) *GetEdgeInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *GetEdgeInstanceResponseBody) SetCode(v string) *GetEdgeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *GetEdgeInstanceResponseBody) SetErrorMessage(v string) *GetEdgeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetEdgeInstanceResponseBody) SetData(v *GetEdgeInstanceResponseBodyData) *GetEdgeInstanceResponseBody {
	s.Data = v
	return s
}

type GetEdgeInstanceResponseBodyData struct {
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name                   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Tags                   *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	Type                   *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Spec                   *int32  `json:"Spec,omitempty" xml:"Spec,omitempty"`
	BizEnable              *bool   `json:"BizEnable,omitempty" xml:"BizEnable,omitempty"`
	GmtCreate              *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified            *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	RoleArn                *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	RoleName               *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	RoleAttachTime         *string `json:"RoleAttachTime,omitempty" xml:"RoleAttachTime,omitempty"`
	LatestDeploymentStatus *int32  `json:"LatestDeploymentStatus,omitempty" xml:"LatestDeploymentStatus,omitempty"`
	LatestDeploymentType   *string `json:"LatestDeploymentType,omitempty" xml:"LatestDeploymentType,omitempty"`
	GmtCreateTimestamp     *int64  `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty"`
	GmtModifiedTimestamp   *int64  `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty"`
	RoleAttachTimestamp    *int64  `json:"RoleAttachTimestamp,omitempty" xml:"RoleAttachTimestamp,omitempty"`
}

func (s GetEdgeInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceResponseBodyData) SetInstanceId(v string) *GetEdgeInstanceResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetEdgeInstanceResponseBodyData) SetName(v string) *GetEdgeInstanceResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetEdgeInstanceResponseBodyData) SetTags(v string) *GetEdgeInstanceResponseBodyData {
	s.Tags = &v
	return s
}

func (s *GetEdgeInstanceResponseBodyData) SetType(v string) *GetEdgeInstanceResponseBodyData {
	s.Type = &v
	return s
}

func (s *GetEdgeInstanceResponseBodyData) SetSpec(v int32) *GetEdgeInstanceResponseBodyData {
	s.Spec = &v
	return s
}

func (s *GetEdgeInstanceResponseBodyData) SetBizEnable(v bool) *GetEdgeInstanceResponseBodyData {
	s.BizEnable = &v
	return s
}

func (s *GetEdgeInstanceResponseBodyData) SetGmtCreate(v string) *GetEdgeInstanceResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *GetEdgeInstanceResponseBodyData) SetGmtModified(v string) *GetEdgeInstanceResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *GetEdgeInstanceResponseBodyData) SetRoleArn(v string) *GetEdgeInstanceResponseBodyData {
	s.RoleArn = &v
	return s
}

func (s *GetEdgeInstanceResponseBodyData) SetRoleName(v string) *GetEdgeInstanceResponseBodyData {
	s.RoleName = &v
	return s
}

func (s *GetEdgeInstanceResponseBodyData) SetRoleAttachTime(v string) *GetEdgeInstanceResponseBodyData {
	s.RoleAttachTime = &v
	return s
}

func (s *GetEdgeInstanceResponseBodyData) SetLatestDeploymentStatus(v int32) *GetEdgeInstanceResponseBodyData {
	s.LatestDeploymentStatus = &v
	return s
}

func (s *GetEdgeInstanceResponseBodyData) SetLatestDeploymentType(v string) *GetEdgeInstanceResponseBodyData {
	s.LatestDeploymentType = &v
	return s
}

func (s *GetEdgeInstanceResponseBodyData) SetGmtCreateTimestamp(v int64) *GetEdgeInstanceResponseBodyData {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *GetEdgeInstanceResponseBodyData) SetGmtModifiedTimestamp(v int64) *GetEdgeInstanceResponseBodyData {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *GetEdgeInstanceResponseBodyData) SetRoleAttachTimestamp(v int64) *GetEdgeInstanceResponseBodyData {
	s.RoleAttachTimestamp = &v
	return s
}

type GetEdgeInstanceResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetEdgeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceResponse) SetHeaders(v map[string]*string) *GetEdgeInstanceResponse {
	s.Headers = v
	return s
}

func (s *GetEdgeInstanceResponse) SetBody(v *GetEdgeInstanceResponseBody) *GetEdgeInstanceResponse {
	s.Body = v
	return s
}

type GetEdgeInstanceDeploymentRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DeploymentId  *string `json:"DeploymentId,omitempty" xml:"DeploymentId,omitempty"`
}

func (s GetEdgeInstanceDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceDeploymentRequest) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceDeploymentRequest) SetApiProduct(v string) *GetEdgeInstanceDeploymentRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetEdgeInstanceDeploymentRequest) SetApiRevision(v string) *GetEdgeInstanceDeploymentRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetEdgeInstanceDeploymentRequest) SetIotInstanceId(v string) *GetEdgeInstanceDeploymentRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetEdgeInstanceDeploymentRequest) SetInstanceId(v string) *GetEdgeInstanceDeploymentRequest {
	s.InstanceId = &v
	return s
}

func (s *GetEdgeInstanceDeploymentRequest) SetDeploymentId(v string) *GetEdgeInstanceDeploymentRequest {
	s.DeploymentId = &v
	return s
}

type GetEdgeInstanceDeploymentResponseBody struct {
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                      `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *GetEdgeInstanceDeploymentResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s GetEdgeInstanceDeploymentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceDeploymentResponseBody) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceDeploymentResponseBody) SetRequestId(v string) *GetEdgeInstanceDeploymentResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBody) SetSuccess(v bool) *GetEdgeInstanceDeploymentResponseBody {
	s.Success = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBody) SetCode(v string) *GetEdgeInstanceDeploymentResponseBody {
	s.Code = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBody) SetErrorMessage(v string) *GetEdgeInstanceDeploymentResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBody) SetData(v *GetEdgeInstanceDeploymentResponseBodyData) *GetEdgeInstanceDeploymentResponseBody {
	s.Data = v
	return s
}

type GetEdgeInstanceDeploymentResponseBodyData struct {
	GmtCreate             *string                                              `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified           *string                                              `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GmtCompleted          *string                                              `json:"GmtCompleted,omitempty" xml:"GmtCompleted,omitempty"`
	DeploymentId          *string                                              `json:"DeploymentId,omitempty" xml:"DeploymentId,omitempty"`
	Description           *string                                              `json:"Description,omitempty" xml:"Description,omitempty"`
	Status                *int32                                               `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                  *string                                              `json:"Type,omitempty" xml:"Type,omitempty"`
	GmtCreateTimestamp    *int64                                               `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty"`
	GmtModifiedTimestamp  *int64                                               `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty"`
	GmtCompletedTimestamp *int64                                               `json:"GmtCompletedTimestamp,omitempty" xml:"GmtCompletedTimestamp,omitempty"`
	TaskList              []*GetEdgeInstanceDeploymentResponseBodyDataTaskList `json:"TaskList,omitempty" xml:"TaskList,omitempty" type:"Repeated"`
}

func (s GetEdgeInstanceDeploymentResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceDeploymentResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceDeploymentResponseBodyData) SetGmtCreate(v string) *GetEdgeInstanceDeploymentResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyData) SetGmtModified(v string) *GetEdgeInstanceDeploymentResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyData) SetGmtCompleted(v string) *GetEdgeInstanceDeploymentResponseBodyData {
	s.GmtCompleted = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyData) SetDeploymentId(v string) *GetEdgeInstanceDeploymentResponseBodyData {
	s.DeploymentId = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyData) SetDescription(v string) *GetEdgeInstanceDeploymentResponseBodyData {
	s.Description = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyData) SetStatus(v int32) *GetEdgeInstanceDeploymentResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyData) SetType(v string) *GetEdgeInstanceDeploymentResponseBodyData {
	s.Type = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyData) SetGmtCreateTimestamp(v int64) *GetEdgeInstanceDeploymentResponseBodyData {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyData) SetGmtModifiedTimestamp(v int64) *GetEdgeInstanceDeploymentResponseBodyData {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyData) SetGmtCompletedTimestamp(v int64) *GetEdgeInstanceDeploymentResponseBodyData {
	s.GmtCompletedTimestamp = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyData) SetTaskList(v []*GetEdgeInstanceDeploymentResponseBodyDataTaskList) *GetEdgeInstanceDeploymentResponseBodyData {
	s.TaskList = v
	return s
}

type GetEdgeInstanceDeploymentResponseBodyDataTaskList struct {
	GmtCreate             *string                                                                  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified           *string                                                                  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GmtCompleted          *string                                                                  `json:"GmtCompleted,omitempty" xml:"GmtCompleted,omitempty"`
	GatewayId             *string                                                                  `json:"GatewayId,omitempty" xml:"GatewayId,omitempty"`
	TaskId                *string                                                                  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Stage                 *int32                                                                   `json:"Stage,omitempty" xml:"Stage,omitempty"`
	Status                *int32                                                                   `json:"Status,omitempty" xml:"Status,omitempty"`
	GmtCreateTimestamp    *int64                                                                   `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty"`
	GmtModifiedTimestamp  *int64                                                                   `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty"`
	GmtCompletedTimestamp *int64                                                                   `json:"GmtCompletedTimestamp,omitempty" xml:"GmtCompletedTimestamp,omitempty"`
	ResourceSnapshotList  []*GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList `json:"ResourceSnapshotList,omitempty" xml:"ResourceSnapshotList,omitempty" type:"Repeated"`
}

func (s GetEdgeInstanceDeploymentResponseBodyDataTaskList) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceDeploymentResponseBodyDataTaskList) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskList) SetGmtCreate(v string) *GetEdgeInstanceDeploymentResponseBodyDataTaskList {
	s.GmtCreate = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskList) SetGmtModified(v string) *GetEdgeInstanceDeploymentResponseBodyDataTaskList {
	s.GmtModified = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskList) SetGmtCompleted(v string) *GetEdgeInstanceDeploymentResponseBodyDataTaskList {
	s.GmtCompleted = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskList) SetGatewayId(v string) *GetEdgeInstanceDeploymentResponseBodyDataTaskList {
	s.GatewayId = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskList) SetTaskId(v string) *GetEdgeInstanceDeploymentResponseBodyDataTaskList {
	s.TaskId = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskList) SetStage(v int32) *GetEdgeInstanceDeploymentResponseBodyDataTaskList {
	s.Stage = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskList) SetStatus(v int32) *GetEdgeInstanceDeploymentResponseBodyDataTaskList {
	s.Status = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskList) SetGmtCreateTimestamp(v int64) *GetEdgeInstanceDeploymentResponseBodyDataTaskList {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskList) SetGmtModifiedTimestamp(v int64) *GetEdgeInstanceDeploymentResponseBodyDataTaskList {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskList) SetGmtCompletedTimestamp(v int64) *GetEdgeInstanceDeploymentResponseBodyDataTaskList {
	s.GmtCompletedTimestamp = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskList) SetResourceSnapshotList(v []*GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) *GetEdgeInstanceDeploymentResponseBodyDataTaskList {
	s.ResourceSnapshotList = v
	return s
}

type GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList struct {
	GmtCreate             *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified           *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GmtCompleted          *string `json:"GmtCompleted,omitempty" xml:"GmtCompleted,omitempty"`
	SnapshotId            *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	ResourceType          *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId            *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceName          *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty"`
	OperateType           *int32  `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
	Stage                 *int32  `json:"Stage,omitempty" xml:"Stage,omitempty"`
	Status                *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Log                   *string `json:"Log,omitempty" xml:"Log,omitempty"`
	GmtCreateTimestamp    *int64  `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty"`
	GmtModifiedTimestamp  *int64  `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty"`
	GmtCompletedTimestamp *int64  `json:"GmtCompletedTimestamp,omitempty" xml:"GmtCompletedTimestamp,omitempty"`
}

func (s GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) SetGmtCreate(v string) *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList {
	s.GmtCreate = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) SetGmtModified(v string) *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList {
	s.GmtModified = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) SetGmtCompleted(v string) *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList {
	s.GmtCompleted = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) SetSnapshotId(v string) *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList {
	s.SnapshotId = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) SetResourceType(v string) *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList {
	s.ResourceType = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) SetResourceId(v string) *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList {
	s.ResourceId = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) SetResourceName(v string) *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList {
	s.ResourceName = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) SetOperateType(v int32) *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList {
	s.OperateType = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) SetStage(v int32) *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList {
	s.Stage = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) SetStatus(v int32) *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList {
	s.Status = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) SetLog(v string) *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList {
	s.Log = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) SetGmtCreateTimestamp(v int64) *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) SetGmtModifiedTimestamp(v int64) *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList) SetGmtCompletedTimestamp(v int64) *GetEdgeInstanceDeploymentResponseBodyDataTaskListResourceSnapshotList {
	s.GmtCompletedTimestamp = &v
	return s
}

type GetEdgeInstanceDeploymentResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetEdgeInstanceDeploymentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetEdgeInstanceDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEdgeInstanceDeploymentResponse) GoString() string {
	return s.String()
}

func (s *GetEdgeInstanceDeploymentResponse) SetHeaders(v map[string]*string) *GetEdgeInstanceDeploymentResponse {
	s.Headers = v
	return s
}

func (s *GetEdgeInstanceDeploymentResponse) SetBody(v *GetEdgeInstanceDeploymentResponseBody) *GetEdgeInstanceDeploymentResponse {
	s.Body = v
	return s
}

type GetGatewayBySubDeviceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s GetGatewayBySubDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetGatewayBySubDeviceRequest) GoString() string {
	return s.String()
}

func (s *GetGatewayBySubDeviceRequest) SetApiProduct(v string) *GetGatewayBySubDeviceRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetGatewayBySubDeviceRequest) SetApiRevision(v string) *GetGatewayBySubDeviceRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetGatewayBySubDeviceRequest) SetIotInstanceId(v string) *GetGatewayBySubDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetGatewayBySubDeviceRequest) SetProductKey(v string) *GetGatewayBySubDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *GetGatewayBySubDeviceRequest) SetDeviceName(v string) *GetGatewayBySubDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *GetGatewayBySubDeviceRequest) SetIotId(v string) *GetGatewayBySubDeviceRequest {
	s.IotId = &v
	return s
}

type GetGatewayBySubDeviceResponseBody struct {
	RequestId    *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *GetGatewayBySubDeviceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s GetGatewayBySubDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetGatewayBySubDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *GetGatewayBySubDeviceResponseBody) SetRequestId(v string) *GetGatewayBySubDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBody) SetSuccess(v bool) *GetGatewayBySubDeviceResponseBody {
	s.Success = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBody) SetCode(v string) *GetGatewayBySubDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBody) SetErrorMessage(v string) *GetGatewayBySubDeviceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBody) SetData(v *GetGatewayBySubDeviceResponseBodyData) *GetGatewayBySubDeviceResponseBody {
	s.Data = v
	return s
}

type GetGatewayBySubDeviceResponseBodyData struct {
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ProductName     *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	DeviceSecret    *string `json:"DeviceSecret,omitempty" xml:"DeviceSecret,omitempty"`
	DeviceName      *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	FirmwareVersion *string `json:"FirmwareVersion,omitempty" xml:"FirmwareVersion,omitempty"`
	GmtCreate       *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	UtcCreate       *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	GmtActive       *string `json:"GmtActive,omitempty" xml:"GmtActive,omitempty"`
	UtcActive       *string `json:"UtcActive,omitempty" xml:"UtcActive,omitempty"`
	GmtOnline       *string `json:"GmtOnline,omitempty" xml:"GmtOnline,omitempty"`
	UtcOnline       *string `json:"UtcOnline,omitempty" xml:"UtcOnline,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	IpAddress       *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	NodeType        *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	Region          *string `json:"region,omitempty" xml:"region,omitempty"`
	IotId           *string `json:"iotId,omitempty" xml:"iotId,omitempty"`
}

func (s GetGatewayBySubDeviceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetGatewayBySubDeviceResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetGatewayBySubDeviceResponseBodyData) SetProductKey(v string) *GetGatewayBySubDeviceResponseBodyData {
	s.ProductKey = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBodyData) SetProductName(v string) *GetGatewayBySubDeviceResponseBodyData {
	s.ProductName = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBodyData) SetDeviceSecret(v string) *GetGatewayBySubDeviceResponseBodyData {
	s.DeviceSecret = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBodyData) SetDeviceName(v string) *GetGatewayBySubDeviceResponseBodyData {
	s.DeviceName = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBodyData) SetFirmwareVersion(v string) *GetGatewayBySubDeviceResponseBodyData {
	s.FirmwareVersion = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBodyData) SetGmtCreate(v string) *GetGatewayBySubDeviceResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBodyData) SetUtcCreate(v string) *GetGatewayBySubDeviceResponseBodyData {
	s.UtcCreate = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBodyData) SetGmtActive(v string) *GetGatewayBySubDeviceResponseBodyData {
	s.GmtActive = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBodyData) SetUtcActive(v string) *GetGatewayBySubDeviceResponseBodyData {
	s.UtcActive = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBodyData) SetGmtOnline(v string) *GetGatewayBySubDeviceResponseBodyData {
	s.GmtOnline = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBodyData) SetUtcOnline(v string) *GetGatewayBySubDeviceResponseBodyData {
	s.UtcOnline = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBodyData) SetStatus(v string) *GetGatewayBySubDeviceResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBodyData) SetIpAddress(v string) *GetGatewayBySubDeviceResponseBodyData {
	s.IpAddress = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBodyData) SetNodeType(v string) *GetGatewayBySubDeviceResponseBodyData {
	s.NodeType = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBodyData) SetRegion(v string) *GetGatewayBySubDeviceResponseBodyData {
	s.Region = &v
	return s
}

func (s *GetGatewayBySubDeviceResponseBodyData) SetIotId(v string) *GetGatewayBySubDeviceResponseBodyData {
	s.IotId = &v
	return s
}

type GetGatewayBySubDeviceResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetGatewayBySubDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetGatewayBySubDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetGatewayBySubDeviceResponse) GoString() string {
	return s.String()
}

func (s *GetGatewayBySubDeviceResponse) SetHeaders(v map[string]*string) *GetGatewayBySubDeviceResponse {
	s.Headers = v
	return s
}

func (s *GetGatewayBySubDeviceResponse) SetBody(v *GetGatewayBySubDeviceResponseBody) *GetGatewayBySubDeviceResponse {
	s.Body = v
	return s
}

type GetLoraNodesTaskRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	TaskId        *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetLoraNodesTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLoraNodesTaskRequest) GoString() string {
	return s.String()
}

func (s *GetLoraNodesTaskRequest) SetApiProduct(v string) *GetLoraNodesTaskRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetLoraNodesTaskRequest) SetApiRevision(v string) *GetLoraNodesTaskRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetLoraNodesTaskRequest) SetIotInstanceId(v string) *GetLoraNodesTaskRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetLoraNodesTaskRequest) SetTaskId(v string) *GetLoraNodesTaskRequest {
	s.TaskId = &v
	return s
}

type GetLoraNodesTaskResponseBody struct {
	RequestId      *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
	Code           *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage   *string                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	TaskId         *string                                     `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskState      *string                                     `json:"TaskState,omitempty" xml:"TaskState,omitempty"`
	TotalCount     *int64                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	SuccessCount   *int64                                      `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
	SuccessDevEuis *GetLoraNodesTaskResponseBodySuccessDevEuis `json:"SuccessDevEuis,omitempty" xml:"SuccessDevEuis,omitempty" type:"Struct"`
}

func (s GetLoraNodesTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLoraNodesTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetLoraNodesTaskResponseBody) SetRequestId(v string) *GetLoraNodesTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetLoraNodesTaskResponseBody) SetSuccess(v bool) *GetLoraNodesTaskResponseBody {
	s.Success = &v
	return s
}

func (s *GetLoraNodesTaskResponseBody) SetCode(v string) *GetLoraNodesTaskResponseBody {
	s.Code = &v
	return s
}

func (s *GetLoraNodesTaskResponseBody) SetErrorMessage(v string) *GetLoraNodesTaskResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetLoraNodesTaskResponseBody) SetTaskId(v string) *GetLoraNodesTaskResponseBody {
	s.TaskId = &v
	return s
}

func (s *GetLoraNodesTaskResponseBody) SetTaskState(v string) *GetLoraNodesTaskResponseBody {
	s.TaskState = &v
	return s
}

func (s *GetLoraNodesTaskResponseBody) SetTotalCount(v int64) *GetLoraNodesTaskResponseBody {
	s.TotalCount = &v
	return s
}

func (s *GetLoraNodesTaskResponseBody) SetSuccessCount(v int64) *GetLoraNodesTaskResponseBody {
	s.SuccessCount = &v
	return s
}

func (s *GetLoraNodesTaskResponseBody) SetSuccessDevEuis(v *GetLoraNodesTaskResponseBodySuccessDevEuis) *GetLoraNodesTaskResponseBody {
	s.SuccessDevEuis = v
	return s
}

type GetLoraNodesTaskResponseBodySuccessDevEuis struct {
	SuccessDevEui []*string `json:"SuccessDevEui,omitempty" xml:"SuccessDevEui,omitempty" type:"Repeated"`
}

func (s GetLoraNodesTaskResponseBodySuccessDevEuis) String() string {
	return tea.Prettify(s)
}

func (s GetLoraNodesTaskResponseBodySuccessDevEuis) GoString() string {
	return s.String()
}

func (s *GetLoraNodesTaskResponseBodySuccessDevEuis) SetSuccessDevEui(v []*string) *GetLoraNodesTaskResponseBodySuccessDevEuis {
	s.SuccessDevEui = v
	return s
}

type GetLoraNodesTaskResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetLoraNodesTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetLoraNodesTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLoraNodesTaskResponse) GoString() string {
	return s.String()
}

func (s *GetLoraNodesTaskResponse) SetHeaders(v map[string]*string) *GetLoraNodesTaskResponse {
	s.Headers = v
	return s
}

func (s *GetLoraNodesTaskResponse) SetBody(v *GetLoraNodesTaskResponseBody) *GetLoraNodesTaskResponse {
	s.Body = v
	return s
}

type GetNodesAddingTaskRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	TaskId        *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetNodesAddingTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNodesAddingTaskRequest) GoString() string {
	return s.String()
}

func (s *GetNodesAddingTaskRequest) SetApiProduct(v string) *GetNodesAddingTaskRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetNodesAddingTaskRequest) SetApiRevision(v string) *GetNodesAddingTaskRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetNodesAddingTaskRequest) SetIotInstanceId(v string) *GetNodesAddingTaskRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetNodesAddingTaskRequest) SetTaskId(v string) *GetNodesAddingTaskRequest {
	s.TaskId = &v
	return s
}

type GetNodesAddingTaskResponseBody struct {
	RequestId      *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                         `json:"Success,omitempty" xml:"Success,omitempty"`
	Code           *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage   *string                                       `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	TaskId         *string                                       `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskState      *string                                       `json:"TaskState,omitempty" xml:"TaskState,omitempty"`
	TotalCount     *int64                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	SuccessCount   *int64                                        `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
	SuccessDevEuis *GetNodesAddingTaskResponseBodySuccessDevEuis `json:"SuccessDevEuis,omitempty" xml:"SuccessDevEuis,omitempty" type:"Struct"`
}

func (s GetNodesAddingTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNodesAddingTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetNodesAddingTaskResponseBody) SetRequestId(v string) *GetNodesAddingTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetNodesAddingTaskResponseBody) SetSuccess(v bool) *GetNodesAddingTaskResponseBody {
	s.Success = &v
	return s
}

func (s *GetNodesAddingTaskResponseBody) SetCode(v string) *GetNodesAddingTaskResponseBody {
	s.Code = &v
	return s
}

func (s *GetNodesAddingTaskResponseBody) SetErrorMessage(v string) *GetNodesAddingTaskResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetNodesAddingTaskResponseBody) SetTaskId(v string) *GetNodesAddingTaskResponseBody {
	s.TaskId = &v
	return s
}

func (s *GetNodesAddingTaskResponseBody) SetTaskState(v string) *GetNodesAddingTaskResponseBody {
	s.TaskState = &v
	return s
}

func (s *GetNodesAddingTaskResponseBody) SetTotalCount(v int64) *GetNodesAddingTaskResponseBody {
	s.TotalCount = &v
	return s
}

func (s *GetNodesAddingTaskResponseBody) SetSuccessCount(v int64) *GetNodesAddingTaskResponseBody {
	s.SuccessCount = &v
	return s
}

func (s *GetNodesAddingTaskResponseBody) SetSuccessDevEuis(v *GetNodesAddingTaskResponseBodySuccessDevEuis) *GetNodesAddingTaskResponseBody {
	s.SuccessDevEuis = v
	return s
}

type GetNodesAddingTaskResponseBodySuccessDevEuis struct {
	SuccessDevEui []*string `json:"SuccessDevEui,omitempty" xml:"SuccessDevEui,omitempty" type:"Repeated"`
}

func (s GetNodesAddingTaskResponseBodySuccessDevEuis) String() string {
	return tea.Prettify(s)
}

func (s GetNodesAddingTaskResponseBodySuccessDevEuis) GoString() string {
	return s.String()
}

func (s *GetNodesAddingTaskResponseBodySuccessDevEuis) SetSuccessDevEui(v []*string) *GetNodesAddingTaskResponseBodySuccessDevEuis {
	s.SuccessDevEui = v
	return s
}

type GetNodesAddingTaskResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetNodesAddingTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetNodesAddingTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNodesAddingTaskResponse) GoString() string {
	return s.String()
}

func (s *GetNodesAddingTaskResponse) SetHeaders(v map[string]*string) *GetNodesAddingTaskResponse {
	s.Headers = v
	return s
}

func (s *GetNodesAddingTaskResponse) SetBody(v *GetNodesAddingTaskResponseBody) *GetNodesAddingTaskResponse {
	s.Body = v
	return s
}

type GetRuleRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s GetRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRuleRequest) GoString() string {
	return s.String()
}

func (s *GetRuleRequest) SetApiProduct(v string) *GetRuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetRuleRequest) SetApiRevision(v string) *GetRuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetRuleRequest) SetIotInstanceId(v string) *GetRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetRuleRequest) SetRuleId(v int64) *GetRuleRequest {
	s.RuleId = &v
	return s
}

type GetRuleResponseBody struct {
	RequestId    *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                        `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	RuleInfo     *GetRuleResponseBodyRuleInfo `json:"RuleInfo,omitempty" xml:"RuleInfo,omitempty" type:"Struct"`
}

func (s GetRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRuleResponseBody) GoString() string {
	return s.String()
}

func (s *GetRuleResponseBody) SetRequestId(v string) *GetRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRuleResponseBody) SetSuccess(v bool) *GetRuleResponseBody {
	s.Success = &v
	return s
}

func (s *GetRuleResponseBody) SetCode(v string) *GetRuleResponseBody {
	s.Code = &v
	return s
}

func (s *GetRuleResponseBody) SetErrorMessage(v string) *GetRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetRuleResponseBody) SetRuleInfo(v *GetRuleResponseBodyRuleInfo) *GetRuleResponseBody {
	s.RuleInfo = v
	return s
}

type GetRuleResponseBodyRuleInfo struct {
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Select       *string `json:"Select,omitempty" xml:"Select,omitempty"`
	Topic        *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	ShortTopic   *string `json:"ShortTopic,omitempty" xml:"ShortTopic,omitempty"`
	Where        *string `json:"Where,omitempty" xml:"Where,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	CreateUserId *int64  `json:"CreateUserId,omitempty" xml:"CreateUserId,omitempty"`
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RuleDesc     *string `json:"RuleDesc,omitempty" xml:"RuleDesc,omitempty"`
	DataType     *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	Created      *string `json:"Created,omitempty" xml:"Created,omitempty"`
	UtcCreated   *string `json:"UtcCreated,omitempty" xml:"UtcCreated,omitempty"`
	Modified     *string `json:"Modified,omitempty" xml:"Modified,omitempty"`
	UtcModified  *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty"`
	TopicType    *int32  `json:"TopicType,omitempty" xml:"TopicType,omitempty"`
}

func (s GetRuleResponseBodyRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s GetRuleResponseBodyRuleInfo) GoString() string {
	return s.String()
}

func (s *GetRuleResponseBodyRuleInfo) SetId(v int64) *GetRuleResponseBodyRuleInfo {
	s.Id = &v
	return s
}

func (s *GetRuleResponseBodyRuleInfo) SetSelect(v string) *GetRuleResponseBodyRuleInfo {
	s.Select = &v
	return s
}

func (s *GetRuleResponseBodyRuleInfo) SetTopic(v string) *GetRuleResponseBodyRuleInfo {
	s.Topic = &v
	return s
}

func (s *GetRuleResponseBodyRuleInfo) SetShortTopic(v string) *GetRuleResponseBodyRuleInfo {
	s.ShortTopic = &v
	return s
}

func (s *GetRuleResponseBodyRuleInfo) SetWhere(v string) *GetRuleResponseBodyRuleInfo {
	s.Where = &v
	return s
}

func (s *GetRuleResponseBodyRuleInfo) SetStatus(v string) *GetRuleResponseBodyRuleInfo {
	s.Status = &v
	return s
}

func (s *GetRuleResponseBodyRuleInfo) SetCreateUserId(v int64) *GetRuleResponseBodyRuleInfo {
	s.CreateUserId = &v
	return s
}

func (s *GetRuleResponseBodyRuleInfo) SetProductKey(v string) *GetRuleResponseBodyRuleInfo {
	s.ProductKey = &v
	return s
}

func (s *GetRuleResponseBodyRuleInfo) SetName(v string) *GetRuleResponseBodyRuleInfo {
	s.Name = &v
	return s
}

func (s *GetRuleResponseBodyRuleInfo) SetRuleDesc(v string) *GetRuleResponseBodyRuleInfo {
	s.RuleDesc = &v
	return s
}

func (s *GetRuleResponseBodyRuleInfo) SetDataType(v string) *GetRuleResponseBodyRuleInfo {
	s.DataType = &v
	return s
}

func (s *GetRuleResponseBodyRuleInfo) SetCreated(v string) *GetRuleResponseBodyRuleInfo {
	s.Created = &v
	return s
}

func (s *GetRuleResponseBodyRuleInfo) SetUtcCreated(v string) *GetRuleResponseBodyRuleInfo {
	s.UtcCreated = &v
	return s
}

func (s *GetRuleResponseBodyRuleInfo) SetModified(v string) *GetRuleResponseBodyRuleInfo {
	s.Modified = &v
	return s
}

func (s *GetRuleResponseBodyRuleInfo) SetUtcModified(v string) *GetRuleResponseBodyRuleInfo {
	s.UtcModified = &v
	return s
}

func (s *GetRuleResponseBodyRuleInfo) SetTopicType(v int32) *GetRuleResponseBodyRuleInfo {
	s.TopicType = &v
	return s
}

type GetRuleResponse struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRuleResponse) GoString() string {
	return s.String()
}

func (s *GetRuleResponse) SetHeaders(v map[string]*string) *GetRuleResponse {
	s.Headers = v
	return s
}

func (s *GetRuleResponse) SetBody(v *GetRuleResponseBody) *GetRuleResponse {
	s.Body = v
	return s
}

type GetRuleActionRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ActionId      *int64  `json:"ActionId,omitempty" xml:"ActionId,omitempty"`
}

func (s GetRuleActionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRuleActionRequest) GoString() string {
	return s.String()
}

func (s *GetRuleActionRequest) SetApiProduct(v string) *GetRuleActionRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetRuleActionRequest) SetApiRevision(v string) *GetRuleActionRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetRuleActionRequest) SetIotInstanceId(v string) *GetRuleActionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetRuleActionRequest) SetActionId(v int64) *GetRuleActionRequest {
	s.ActionId = &v
	return s
}

type GetRuleActionResponseBody struct {
	RequestId      *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
	Code           *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage   *string                                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	RuleActionInfo *GetRuleActionResponseBodyRuleActionInfo `json:"RuleActionInfo,omitempty" xml:"RuleActionInfo,omitempty" type:"Struct"`
}

func (s GetRuleActionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRuleActionResponseBody) GoString() string {
	return s.String()
}

func (s *GetRuleActionResponseBody) SetRequestId(v string) *GetRuleActionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRuleActionResponseBody) SetSuccess(v bool) *GetRuleActionResponseBody {
	s.Success = &v
	return s
}

func (s *GetRuleActionResponseBody) SetCode(v string) *GetRuleActionResponseBody {
	s.Code = &v
	return s
}

func (s *GetRuleActionResponseBody) SetErrorMessage(v string) *GetRuleActionResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetRuleActionResponseBody) SetRuleActionInfo(v *GetRuleActionResponseBodyRuleActionInfo) *GetRuleActionResponseBody {
	s.RuleActionInfo = v
	return s
}

type GetRuleActionResponseBodyRuleActionInfo struct {
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	RuleId          *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Configuration   *string `json:"Configuration,omitempty" xml:"Configuration,omitempty"`
	ErrorActionFlag *bool   `json:"ErrorActionFlag,omitempty" xml:"ErrorActionFlag,omitempty"`
}

func (s GetRuleActionResponseBodyRuleActionInfo) String() string {
	return tea.Prettify(s)
}

func (s GetRuleActionResponseBodyRuleActionInfo) GoString() string {
	return s.String()
}

func (s *GetRuleActionResponseBodyRuleActionInfo) SetId(v int64) *GetRuleActionResponseBodyRuleActionInfo {
	s.Id = &v
	return s
}

func (s *GetRuleActionResponseBodyRuleActionInfo) SetRuleId(v int64) *GetRuleActionResponseBodyRuleActionInfo {
	s.RuleId = &v
	return s
}

func (s *GetRuleActionResponseBodyRuleActionInfo) SetType(v string) *GetRuleActionResponseBodyRuleActionInfo {
	s.Type = &v
	return s
}

func (s *GetRuleActionResponseBodyRuleActionInfo) SetConfiguration(v string) *GetRuleActionResponseBodyRuleActionInfo {
	s.Configuration = &v
	return s
}

func (s *GetRuleActionResponseBodyRuleActionInfo) SetErrorActionFlag(v bool) *GetRuleActionResponseBodyRuleActionInfo {
	s.ErrorActionFlag = &v
	return s
}

type GetRuleActionResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetRuleActionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetRuleActionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRuleActionResponse) GoString() string {
	return s.String()
}

func (s *GetRuleActionResponse) SetHeaders(v map[string]*string) *GetRuleActionResponse {
	s.Headers = v
	return s
}

func (s *GetRuleActionResponse) SetBody(v *GetRuleActionResponseBody) *GetRuleActionResponse {
	s.Body = v
	return s
}

type GetSceneRuleRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s GetSceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSceneRuleRequest) GoString() string {
	return s.String()
}

func (s *GetSceneRuleRequest) SetApiProduct(v string) *GetSceneRuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetSceneRuleRequest) SetApiRevision(v string) *GetSceneRuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetSceneRuleRequest) SetIotInstanceId(v string) *GetSceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetSceneRuleRequest) SetRuleId(v string) *GetSceneRuleRequest {
	s.RuleId = &v
	return s
}

type GetSceneRuleResponseBody struct {
	RequestId    *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                         `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string                       `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data         *GetSceneRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s GetSceneRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSceneRuleResponseBody) GoString() string {
	return s.String()
}

func (s *GetSceneRuleResponseBody) SetRequestId(v string) *GetSceneRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSceneRuleResponseBody) SetSuccess(v bool) *GetSceneRuleResponseBody {
	s.Success = &v
	return s
}

func (s *GetSceneRuleResponseBody) SetErrorMessage(v string) *GetSceneRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetSceneRuleResponseBody) SetCode(v string) *GetSceneRuleResponseBody {
	s.Code = &v
	return s
}

func (s *GetSceneRuleResponseBody) SetData(v *GetSceneRuleResponseBodyData) *GetSceneRuleResponseBody {
	s.Data = v
	return s
}

type GetSceneRuleResponseBodyData struct {
	GmtCreate       *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified     *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	RuleName        *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleContent     *string `json:"RuleContent,omitempty" xml:"RuleContent,omitempty"`
	RuleDescription *string `json:"RuleDescription,omitempty" xml:"RuleDescription,omitempty"`
	RuleStatus      *int32  `json:"RuleStatus,omitempty" xml:"RuleStatus,omitempty"`
}

func (s GetSceneRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetSceneRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetSceneRuleResponseBodyData) SetGmtCreate(v int64) *GetSceneRuleResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *GetSceneRuleResponseBodyData) SetGmtModified(v int64) *GetSceneRuleResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *GetSceneRuleResponseBodyData) SetRuleName(v string) *GetSceneRuleResponseBodyData {
	s.RuleName = &v
	return s
}

func (s *GetSceneRuleResponseBodyData) SetRuleContent(v string) *GetSceneRuleResponseBodyData {
	s.RuleContent = &v
	return s
}

func (s *GetSceneRuleResponseBodyData) SetRuleDescription(v string) *GetSceneRuleResponseBodyData {
	s.RuleDescription = &v
	return s
}

func (s *GetSceneRuleResponseBodyData) SetRuleStatus(v int32) *GetSceneRuleResponseBodyData {
	s.RuleStatus = &v
	return s
}

type GetSceneRuleResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetSceneRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSceneRuleResponse) GoString() string {
	return s.String()
}

func (s *GetSceneRuleResponse) SetHeaders(v map[string]*string) *GetSceneRuleResponse {
	s.Headers = v
	return s
}

func (s *GetSceneRuleResponse) SetBody(v *GetSceneRuleResponseBody) *GetSceneRuleResponse {
	s.Body = v
	return s
}

type GetThingModelTslRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ModelVersion      *string `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty"`
	Simple            *bool   `json:"Simple,omitempty" xml:"Simple,omitempty"`
	FunctionBlockId   *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s GetThingModelTslRequest) String() string {
	return tea.Prettify(s)
}

func (s GetThingModelTslRequest) GoString() string {
	return s.String()
}

func (s *GetThingModelTslRequest) SetApiProduct(v string) *GetThingModelTslRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetThingModelTslRequest) SetApiRevision(v string) *GetThingModelTslRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetThingModelTslRequest) SetIotInstanceId(v string) *GetThingModelTslRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetThingModelTslRequest) SetResourceGroupId(v string) *GetThingModelTslRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *GetThingModelTslRequest) SetProductKey(v string) *GetThingModelTslRequest {
	s.ProductKey = &v
	return s
}

func (s *GetThingModelTslRequest) SetModelVersion(v string) *GetThingModelTslRequest {
	s.ModelVersion = &v
	return s
}

func (s *GetThingModelTslRequest) SetSimple(v bool) *GetThingModelTslRequest {
	s.Simple = &v
	return s
}

func (s *GetThingModelTslRequest) SetFunctionBlockId(v string) *GetThingModelTslRequest {
	s.FunctionBlockId = &v
	return s
}

func (s *GetThingModelTslRequest) SetRealTenantId(v string) *GetThingModelTslRequest {
	s.RealTenantId = &v
	return s
}

func (s *GetThingModelTslRequest) SetRealTripartiteKey(v string) *GetThingModelTslRequest {
	s.RealTripartiteKey = &v
	return s
}

type GetThingModelTslResponseBody struct {
	RequestId    *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *GetThingModelTslResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s GetThingModelTslResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetThingModelTslResponseBody) GoString() string {
	return s.String()
}

func (s *GetThingModelTslResponseBody) SetRequestId(v string) *GetThingModelTslResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetThingModelTslResponseBody) SetSuccess(v bool) *GetThingModelTslResponseBody {
	s.Success = &v
	return s
}

func (s *GetThingModelTslResponseBody) SetCode(v string) *GetThingModelTslResponseBody {
	s.Code = &v
	return s
}

func (s *GetThingModelTslResponseBody) SetErrorMessage(v string) *GetThingModelTslResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetThingModelTslResponseBody) SetData(v *GetThingModelTslResponseBodyData) *GetThingModelTslResponseBody {
	s.Data = v
	return s
}

type GetThingModelTslResponseBodyData struct {
	TslStr *string `json:"TslStr,omitempty" xml:"TslStr,omitempty"`
	TslUri *string `json:"TslUri,omitempty" xml:"TslUri,omitempty"`
}

func (s GetThingModelTslResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetThingModelTslResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetThingModelTslResponseBodyData) SetTslStr(v string) *GetThingModelTslResponseBodyData {
	s.TslStr = &v
	return s
}

func (s *GetThingModelTslResponseBodyData) SetTslUri(v string) *GetThingModelTslResponseBodyData {
	s.TslUri = &v
	return s
}

type GetThingModelTslResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetThingModelTslResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetThingModelTslResponse) String() string {
	return tea.Prettify(s)
}

func (s GetThingModelTslResponse) GoString() string {
	return s.String()
}

func (s *GetThingModelTslResponse) SetHeaders(v map[string]*string) *GetThingModelTslResponse {
	s.Headers = v
	return s
}

func (s *GetThingModelTslResponse) SetBody(v *GetThingModelTslResponseBody) *GetThingModelTslResponse {
	s.Body = v
	return s
}

type GetThingModelTslPublishedRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Simple            *bool   `json:"Simple,omitempty" xml:"Simple,omitempty"`
	ModelVersion      *string `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty"`
	FunctionBlockId   *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s GetThingModelTslPublishedRequest) String() string {
	return tea.Prettify(s)
}

func (s GetThingModelTslPublishedRequest) GoString() string {
	return s.String()
}

func (s *GetThingModelTslPublishedRequest) SetApiProduct(v string) *GetThingModelTslPublishedRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetThingModelTslPublishedRequest) SetApiRevision(v string) *GetThingModelTslPublishedRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetThingModelTslPublishedRequest) SetIotInstanceId(v string) *GetThingModelTslPublishedRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetThingModelTslPublishedRequest) SetProductKey(v string) *GetThingModelTslPublishedRequest {
	s.ProductKey = &v
	return s
}

func (s *GetThingModelTslPublishedRequest) SetResourceGroupId(v string) *GetThingModelTslPublishedRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *GetThingModelTslPublishedRequest) SetSimple(v bool) *GetThingModelTslPublishedRequest {
	s.Simple = &v
	return s
}

func (s *GetThingModelTslPublishedRequest) SetModelVersion(v string) *GetThingModelTslPublishedRequest {
	s.ModelVersion = &v
	return s
}

func (s *GetThingModelTslPublishedRequest) SetFunctionBlockId(v string) *GetThingModelTslPublishedRequest {
	s.FunctionBlockId = &v
	return s
}

func (s *GetThingModelTslPublishedRequest) SetRealTenantId(v string) *GetThingModelTslPublishedRequest {
	s.RealTenantId = &v
	return s
}

func (s *GetThingModelTslPublishedRequest) SetRealTripartiteKey(v string) *GetThingModelTslPublishedRequest {
	s.RealTripartiteKey = &v
	return s
}

type GetThingModelTslPublishedResponseBody struct {
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                      `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *GetThingModelTslPublishedResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s GetThingModelTslPublishedResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetThingModelTslPublishedResponseBody) GoString() string {
	return s.String()
}

func (s *GetThingModelTslPublishedResponseBody) SetRequestId(v string) *GetThingModelTslPublishedResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetThingModelTslPublishedResponseBody) SetSuccess(v bool) *GetThingModelTslPublishedResponseBody {
	s.Success = &v
	return s
}

func (s *GetThingModelTslPublishedResponseBody) SetCode(v string) *GetThingModelTslPublishedResponseBody {
	s.Code = &v
	return s
}

func (s *GetThingModelTslPublishedResponseBody) SetErrorMessage(v string) *GetThingModelTslPublishedResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetThingModelTslPublishedResponseBody) SetData(v *GetThingModelTslPublishedResponseBodyData) *GetThingModelTslPublishedResponseBody {
	s.Data = v
	return s
}

type GetThingModelTslPublishedResponseBodyData struct {
	TslStr *string `json:"TslStr,omitempty" xml:"TslStr,omitempty"`
	TslUri *string `json:"TslUri,omitempty" xml:"TslUri,omitempty"`
}

func (s GetThingModelTslPublishedResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetThingModelTslPublishedResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetThingModelTslPublishedResponseBodyData) SetTslStr(v string) *GetThingModelTslPublishedResponseBodyData {
	s.TslStr = &v
	return s
}

func (s *GetThingModelTslPublishedResponseBodyData) SetTslUri(v string) *GetThingModelTslPublishedResponseBodyData {
	s.TslUri = &v
	return s
}

type GetThingModelTslPublishedResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetThingModelTslPublishedResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetThingModelTslPublishedResponse) String() string {
	return tea.Prettify(s)
}

func (s GetThingModelTslPublishedResponse) GoString() string {
	return s.String()
}

func (s *GetThingModelTslPublishedResponse) SetHeaders(v map[string]*string) *GetThingModelTslPublishedResponse {
	s.Headers = v
	return s
}

func (s *GetThingModelTslPublishedResponse) SetBody(v *GetThingModelTslPublishedResponseBody) *GetThingModelTslPublishedResponse {
	s.Body = v
	return s
}

type GetThingScriptRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
}

func (s GetThingScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s GetThingScriptRequest) GoString() string {
	return s.String()
}

func (s *GetThingScriptRequest) SetApiProduct(v string) *GetThingScriptRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetThingScriptRequest) SetApiRevision(v string) *GetThingScriptRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetThingScriptRequest) SetIotInstanceId(v string) *GetThingScriptRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetThingScriptRequest) SetProductKey(v string) *GetThingScriptRequest {
	s.ProductKey = &v
	return s
}

type GetThingScriptResponseBody struct {
	RequestId    *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                           `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *GetThingScriptResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s GetThingScriptResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetThingScriptResponseBody) GoString() string {
	return s.String()
}

func (s *GetThingScriptResponseBody) SetRequestId(v string) *GetThingScriptResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetThingScriptResponseBody) SetSuccess(v bool) *GetThingScriptResponseBody {
	s.Success = &v
	return s
}

func (s *GetThingScriptResponseBody) SetCode(v string) *GetThingScriptResponseBody {
	s.Code = &v
	return s
}

func (s *GetThingScriptResponseBody) SetErrorMessage(v string) *GetThingScriptResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetThingScriptResponseBody) SetData(v *GetThingScriptResponseBodyData) *GetThingScriptResponseBody {
	s.Data = v
	return s
}

type GetThingScriptResponseBodyData struct {
	ScriptType *string `json:"ScriptType,omitempty" xml:"ScriptType,omitempty"`
	ScriptUrl  *string `json:"ScriptUrl,omitempty" xml:"ScriptUrl,omitempty"`
}

func (s GetThingScriptResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetThingScriptResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetThingScriptResponseBodyData) SetScriptType(v string) *GetThingScriptResponseBodyData {
	s.ScriptType = &v
	return s
}

func (s *GetThingScriptResponseBodyData) SetScriptUrl(v string) *GetThingScriptResponseBodyData {
	s.ScriptUrl = &v
	return s
}

type GetThingScriptResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetThingScriptResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetThingScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s GetThingScriptResponse) GoString() string {
	return s.String()
}

func (s *GetThingScriptResponse) SetHeaders(v map[string]*string) *GetThingScriptResponse {
	s.Headers = v
	return s
}

func (s *GetThingScriptResponse) SetBody(v *GetThingScriptResponseBody) *GetThingScriptResponse {
	s.Body = v
	return s
}

type GetThingTemplateRequest struct {
	ApiProduct      *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision     *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	CategoryKey     *string `json:"CategoryKey,omitempty" xml:"CategoryKey,omitempty"`
}

func (s GetThingTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetThingTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetThingTemplateRequest) SetApiProduct(v string) *GetThingTemplateRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetThingTemplateRequest) SetApiRevision(v string) *GetThingTemplateRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetThingTemplateRequest) SetIotInstanceId(v string) *GetThingTemplateRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetThingTemplateRequest) SetResourceGroupId(v string) *GetThingTemplateRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *GetThingTemplateRequest) SetCategoryKey(v string) *GetThingTemplateRequest {
	s.CategoryKey = &v
	return s
}

type GetThingTemplateResponseBody struct {
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage   *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ThingModelJSON *string `json:"ThingModelJSON,omitempty" xml:"ThingModelJSON,omitempty"`
}

func (s GetThingTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetThingTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetThingTemplateResponseBody) SetRequestId(v string) *GetThingTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetThingTemplateResponseBody) SetSuccess(v bool) *GetThingTemplateResponseBody {
	s.Success = &v
	return s
}

func (s *GetThingTemplateResponseBody) SetCode(v string) *GetThingTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *GetThingTemplateResponseBody) SetErrorMessage(v string) *GetThingTemplateResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetThingTemplateResponseBody) SetThingModelJSON(v string) *GetThingTemplateResponseBody {
	s.ThingModelJSON = &v
	return s
}

type GetThingTemplateResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetThingTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetThingTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetThingTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetThingTemplateResponse) SetHeaders(v map[string]*string) *GetThingTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetThingTemplateResponse) SetBody(v *GetThingTemplateResponseBody) *GetThingTemplateResponse {
	s.Body = v
	return s
}

type GetThingTopoRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	PageNo        *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s GetThingTopoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetThingTopoRequest) GoString() string {
	return s.String()
}

func (s *GetThingTopoRequest) SetApiProduct(v string) *GetThingTopoRequest {
	s.ApiProduct = &v
	return s
}

func (s *GetThingTopoRequest) SetApiRevision(v string) *GetThingTopoRequest {
	s.ApiRevision = &v
	return s
}

func (s *GetThingTopoRequest) SetIotInstanceId(v string) *GetThingTopoRequest {
	s.IotInstanceId = &v
	return s
}

func (s *GetThingTopoRequest) SetPageSize(v int32) *GetThingTopoRequest {
	s.PageSize = &v
	return s
}

func (s *GetThingTopoRequest) SetProductKey(v string) *GetThingTopoRequest {
	s.ProductKey = &v
	return s
}

func (s *GetThingTopoRequest) SetDeviceName(v string) *GetThingTopoRequest {
	s.DeviceName = &v
	return s
}

func (s *GetThingTopoRequest) SetPageNo(v int32) *GetThingTopoRequest {
	s.PageNo = &v
	return s
}

func (s *GetThingTopoRequest) SetIotId(v string) *GetThingTopoRequest {
	s.IotId = &v
	return s
}

type GetThingTopoResponseBody struct {
	RequestId    *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                         `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                       `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *GetThingTopoResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s GetThingTopoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetThingTopoResponseBody) GoString() string {
	return s.String()
}

func (s *GetThingTopoResponseBody) SetRequestId(v string) *GetThingTopoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetThingTopoResponseBody) SetSuccess(v bool) *GetThingTopoResponseBody {
	s.Success = &v
	return s
}

func (s *GetThingTopoResponseBody) SetCode(v string) *GetThingTopoResponseBody {
	s.Code = &v
	return s
}

func (s *GetThingTopoResponseBody) SetErrorMessage(v string) *GetThingTopoResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetThingTopoResponseBody) SetData(v *GetThingTopoResponseBodyData) *GetThingTopoResponseBody {
	s.Data = v
	return s
}

type GetThingTopoResponseBodyData struct {
	Total       *int64                            `json:"Total,omitempty" xml:"Total,omitempty"`
	CurrentPage *int32                            `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageCount   *int64                            `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	List        *GetThingTopoResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
}

func (s GetThingTopoResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetThingTopoResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetThingTopoResponseBodyData) SetTotal(v int64) *GetThingTopoResponseBodyData {
	s.Total = &v
	return s
}

func (s *GetThingTopoResponseBodyData) SetCurrentPage(v int32) *GetThingTopoResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *GetThingTopoResponseBodyData) SetPageSize(v int32) *GetThingTopoResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetThingTopoResponseBodyData) SetPageCount(v int64) *GetThingTopoResponseBodyData {
	s.PageCount = &v
	return s
}

func (s *GetThingTopoResponseBodyData) SetList(v *GetThingTopoResponseBodyDataList) *GetThingTopoResponseBodyData {
	s.List = v
	return s
}

type GetThingTopoResponseBodyDataList struct {
	DeviceInfo []*GetThingTopoResponseBodyDataListDeviceInfo `json:"deviceInfo,omitempty" xml:"deviceInfo,omitempty" type:"Repeated"`
}

func (s GetThingTopoResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetThingTopoResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetThingTopoResponseBodyDataList) SetDeviceInfo(v []*GetThingTopoResponseBodyDataListDeviceInfo) *GetThingTopoResponseBodyDataList {
	s.DeviceInfo = v
	return s
}

type GetThingTopoResponseBodyDataListDeviceInfo struct {
	IotId      *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	ProductKey *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
}

func (s GetThingTopoResponseBodyDataListDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s GetThingTopoResponseBodyDataListDeviceInfo) GoString() string {
	return s.String()
}

func (s *GetThingTopoResponseBodyDataListDeviceInfo) SetIotId(v string) *GetThingTopoResponseBodyDataListDeviceInfo {
	s.IotId = &v
	return s
}

func (s *GetThingTopoResponseBodyDataListDeviceInfo) SetProductKey(v string) *GetThingTopoResponseBodyDataListDeviceInfo {
	s.ProductKey = &v
	return s
}

func (s *GetThingTopoResponseBodyDataListDeviceInfo) SetDeviceName(v string) *GetThingTopoResponseBodyDataListDeviceInfo {
	s.DeviceName = &v
	return s
}

type GetThingTopoResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetThingTopoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetThingTopoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetThingTopoResponse) GoString() string {
	return s.String()
}

func (s *GetThingTopoResponse) SetHeaders(v map[string]*string) *GetThingTopoResponse {
	s.Headers = v
	return s
}

func (s *GetThingTopoResponse) SetBody(v *GetThingTopoResponseBody) *GetThingTopoResponse {
	s.Body = v
	return s
}

type ImportThingModelTslRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	TslStr            *string `json:"TslStr,omitempty" xml:"TslStr,omitempty"`
	TslUrl            *string `json:"TslUrl,omitempty" xml:"TslUrl,omitempty"`
	FunctionBlockId   *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
	FunctionBlockName *string `json:"FunctionBlockName,omitempty" xml:"FunctionBlockName,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s ImportThingModelTslRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportThingModelTslRequest) GoString() string {
	return s.String()
}

func (s *ImportThingModelTslRequest) SetApiProduct(v string) *ImportThingModelTslRequest {
	s.ApiProduct = &v
	return s
}

func (s *ImportThingModelTslRequest) SetApiRevision(v string) *ImportThingModelTslRequest {
	s.ApiRevision = &v
	return s
}

func (s *ImportThingModelTslRequest) SetIotInstanceId(v string) *ImportThingModelTslRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ImportThingModelTslRequest) SetResourceGroupId(v string) *ImportThingModelTslRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ImportThingModelTslRequest) SetProductKey(v string) *ImportThingModelTslRequest {
	s.ProductKey = &v
	return s
}

func (s *ImportThingModelTslRequest) SetTslStr(v string) *ImportThingModelTslRequest {
	s.TslStr = &v
	return s
}

func (s *ImportThingModelTslRequest) SetTslUrl(v string) *ImportThingModelTslRequest {
	s.TslUrl = &v
	return s
}

func (s *ImportThingModelTslRequest) SetFunctionBlockId(v string) *ImportThingModelTslRequest {
	s.FunctionBlockId = &v
	return s
}

func (s *ImportThingModelTslRequest) SetFunctionBlockName(v string) *ImportThingModelTslRequest {
	s.FunctionBlockName = &v
	return s
}

func (s *ImportThingModelTslRequest) SetRealTenantId(v string) *ImportThingModelTslRequest {
	s.RealTenantId = &v
	return s
}

func (s *ImportThingModelTslRequest) SetRealTripartiteKey(v string) *ImportThingModelTslRequest {
	s.RealTripartiteKey = &v
	return s
}

type ImportThingModelTslResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s ImportThingModelTslResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportThingModelTslResponseBody) GoString() string {
	return s.String()
}

func (s *ImportThingModelTslResponseBody) SetRequestId(v string) *ImportThingModelTslResponseBody {
	s.RequestId = &v
	return s
}

func (s *ImportThingModelTslResponseBody) SetSuccess(v bool) *ImportThingModelTslResponseBody {
	s.Success = &v
	return s
}

func (s *ImportThingModelTslResponseBody) SetCode(v string) *ImportThingModelTslResponseBody {
	s.Code = &v
	return s
}

func (s *ImportThingModelTslResponseBody) SetErrorMessage(v string) *ImportThingModelTslResponseBody {
	s.ErrorMessage = &v
	return s
}

type ImportThingModelTslResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ImportThingModelTslResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ImportThingModelTslResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportThingModelTslResponse) GoString() string {
	return s.String()
}

func (s *ImportThingModelTslResponse) SetHeaders(v map[string]*string) *ImportThingModelTslResponse {
	s.Headers = v
	return s
}

func (s *ImportThingModelTslResponse) SetBody(v *ImportThingModelTslResponseBody) *ImportThingModelTslResponse {
	s.Body = v
	return s
}

type InvokeDataAPIServiceRequest struct {
	ApiProduct    *string                             `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string                             `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	ApiSrn        *string                             `json:"ApiSrn,omitempty" xml:"ApiSrn,omitempty"`
	Param         []*InvokeDataAPIServiceRequestParam `json:"Param,omitempty" xml:"Param,omitempty" type:"Repeated"`
	IotInstanceId *string                             `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
}

func (s InvokeDataAPIServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s InvokeDataAPIServiceRequest) GoString() string {
	return s.String()
}

func (s *InvokeDataAPIServiceRequest) SetApiProduct(v string) *InvokeDataAPIServiceRequest {
	s.ApiProduct = &v
	return s
}

func (s *InvokeDataAPIServiceRequest) SetApiRevision(v string) *InvokeDataAPIServiceRequest {
	s.ApiRevision = &v
	return s
}

func (s *InvokeDataAPIServiceRequest) SetApiSrn(v string) *InvokeDataAPIServiceRequest {
	s.ApiSrn = &v
	return s
}

func (s *InvokeDataAPIServiceRequest) SetParam(v []*InvokeDataAPIServiceRequestParam) *InvokeDataAPIServiceRequest {
	s.Param = v
	return s
}

func (s *InvokeDataAPIServiceRequest) SetIotInstanceId(v string) *InvokeDataAPIServiceRequest {
	s.IotInstanceId = &v
	return s
}

type InvokeDataAPIServiceRequestParam struct {
	ParamType      *string   `json:"ParamType,omitempty" xml:"ParamType,omitempty"`
	ListParamValue []*string `json:"ListParamValue,omitempty" xml:"ListParamValue,omitempty" type:"Repeated"`
	ListParamType  *string   `json:"ListParamType,omitempty" xml:"ListParamType,omitempty"`
	ParamName      *string   `json:"ParamName,omitempty" xml:"ParamName,omitempty"`
	ParamValue     *string   `json:"ParamValue,omitempty" xml:"ParamValue,omitempty"`
}

func (s InvokeDataAPIServiceRequestParam) String() string {
	return tea.Prettify(s)
}

func (s InvokeDataAPIServiceRequestParam) GoString() string {
	return s.String()
}

func (s *InvokeDataAPIServiceRequestParam) SetParamType(v string) *InvokeDataAPIServiceRequestParam {
	s.ParamType = &v
	return s
}

func (s *InvokeDataAPIServiceRequestParam) SetListParamValue(v []*string) *InvokeDataAPIServiceRequestParam {
	s.ListParamValue = v
	return s
}

func (s *InvokeDataAPIServiceRequestParam) SetListParamType(v string) *InvokeDataAPIServiceRequestParam {
	s.ListParamType = &v
	return s
}

func (s *InvokeDataAPIServiceRequestParam) SetParamName(v string) *InvokeDataAPIServiceRequestParam {
	s.ParamName = &v
	return s
}

func (s *InvokeDataAPIServiceRequestParam) SetParamValue(v string) *InvokeDataAPIServiceRequestParam {
	s.ParamValue = &v
	return s
}

type InvokeDataAPIServiceResponseBody struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *InvokeDataAPIServiceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s InvokeDataAPIServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InvokeDataAPIServiceResponseBody) GoString() string {
	return s.String()
}

func (s *InvokeDataAPIServiceResponseBody) SetRequestId(v string) *InvokeDataAPIServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *InvokeDataAPIServiceResponseBody) SetSuccess(v bool) *InvokeDataAPIServiceResponseBody {
	s.Success = &v
	return s
}

func (s *InvokeDataAPIServiceResponseBody) SetCode(v string) *InvokeDataAPIServiceResponseBody {
	s.Code = &v
	return s
}

func (s *InvokeDataAPIServiceResponseBody) SetErrorMessage(v string) *InvokeDataAPIServiceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *InvokeDataAPIServiceResponseBody) SetData(v *InvokeDataAPIServiceResponseBodyData) *InvokeDataAPIServiceResponseBody {
	s.Data = v
	return s
}

type InvokeDataAPIServiceResponseBodyData struct {
	PageNo        *int32                                             `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize      *int32                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ApiSrn        *string                                            `json:"ApiSrn,omitempty" xml:"ApiSrn,omitempty"`
	FieldNameList *InvokeDataAPIServiceResponseBodyDataFieldNameList `json:"FieldNameList,omitempty" xml:"FieldNameList,omitempty" type:"Struct"`
	ResultList    *InvokeDataAPIServiceResponseBodyDataResultList    `json:"ResultList,omitempty" xml:"ResultList,omitempty" type:"Struct"`
}

func (s InvokeDataAPIServiceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s InvokeDataAPIServiceResponseBodyData) GoString() string {
	return s.String()
}

func (s *InvokeDataAPIServiceResponseBodyData) SetPageNo(v int32) *InvokeDataAPIServiceResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *InvokeDataAPIServiceResponseBodyData) SetPageSize(v int32) *InvokeDataAPIServiceResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *InvokeDataAPIServiceResponseBodyData) SetApiSrn(v string) *InvokeDataAPIServiceResponseBodyData {
	s.ApiSrn = &v
	return s
}

func (s *InvokeDataAPIServiceResponseBodyData) SetFieldNameList(v *InvokeDataAPIServiceResponseBodyDataFieldNameList) *InvokeDataAPIServiceResponseBodyData {
	s.FieldNameList = v
	return s
}

func (s *InvokeDataAPIServiceResponseBodyData) SetResultList(v *InvokeDataAPIServiceResponseBodyDataResultList) *InvokeDataAPIServiceResponseBodyData {
	s.ResultList = v
	return s
}

type InvokeDataAPIServiceResponseBodyDataFieldNameList struct {
	FieldNameList []*string `json:"FieldNameList,omitempty" xml:"FieldNameList,omitempty" type:"Repeated"`
}

func (s InvokeDataAPIServiceResponseBodyDataFieldNameList) String() string {
	return tea.Prettify(s)
}

func (s InvokeDataAPIServiceResponseBodyDataFieldNameList) GoString() string {
	return s.String()
}

func (s *InvokeDataAPIServiceResponseBodyDataFieldNameList) SetFieldNameList(v []*string) *InvokeDataAPIServiceResponseBodyDataFieldNameList {
	s.FieldNameList = v
	return s
}

type InvokeDataAPIServiceResponseBodyDataResultList struct {
	ResultList []map[string]*string `json:"ResultList,omitempty" xml:"ResultList,omitempty" type:"Repeated"`
}

func (s InvokeDataAPIServiceResponseBodyDataResultList) String() string {
	return tea.Prettify(s)
}

func (s InvokeDataAPIServiceResponseBodyDataResultList) GoString() string {
	return s.String()
}

func (s *InvokeDataAPIServiceResponseBodyDataResultList) SetResultList(v []map[string]*string) *InvokeDataAPIServiceResponseBodyDataResultList {
	s.ResultList = v
	return s
}

type InvokeDataAPIServiceResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InvokeDataAPIServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InvokeDataAPIServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s InvokeDataAPIServiceResponse) GoString() string {
	return s.String()
}

func (s *InvokeDataAPIServiceResponse) SetHeaders(v map[string]*string) *InvokeDataAPIServiceResponse {
	s.Headers = v
	return s
}

func (s *InvokeDataAPIServiceResponse) SetBody(v *InvokeDataAPIServiceResponseBody) *InvokeDataAPIServiceResponse {
	s.Body = v
	return s
}

type InvokeThingServiceRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	Identifier        *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	Args              *string `json:"Args,omitempty" xml:"Args,omitempty"`
	IotId             *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s InvokeThingServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s InvokeThingServiceRequest) GoString() string {
	return s.String()
}

func (s *InvokeThingServiceRequest) SetApiProduct(v string) *InvokeThingServiceRequest {
	s.ApiProduct = &v
	return s
}

func (s *InvokeThingServiceRequest) SetApiRevision(v string) *InvokeThingServiceRequest {
	s.ApiRevision = &v
	return s
}

func (s *InvokeThingServiceRequest) SetIotInstanceId(v string) *InvokeThingServiceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *InvokeThingServiceRequest) SetProductKey(v string) *InvokeThingServiceRequest {
	s.ProductKey = &v
	return s
}

func (s *InvokeThingServiceRequest) SetDeviceName(v string) *InvokeThingServiceRequest {
	s.DeviceName = &v
	return s
}

func (s *InvokeThingServiceRequest) SetIdentifier(v string) *InvokeThingServiceRequest {
	s.Identifier = &v
	return s
}

func (s *InvokeThingServiceRequest) SetArgs(v string) *InvokeThingServiceRequest {
	s.Args = &v
	return s
}

func (s *InvokeThingServiceRequest) SetIotId(v string) *InvokeThingServiceRequest {
	s.IotId = &v
	return s
}

func (s *InvokeThingServiceRequest) SetRealTenantId(v string) *InvokeThingServiceRequest {
	s.RealTenantId = &v
	return s
}

func (s *InvokeThingServiceRequest) SetRealTripartiteKey(v string) *InvokeThingServiceRequest {
	s.RealTripartiteKey = &v
	return s
}

type InvokeThingServiceResponseBody struct {
	RequestId    *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data         *InvokeThingServiceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s InvokeThingServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InvokeThingServiceResponseBody) GoString() string {
	return s.String()
}

func (s *InvokeThingServiceResponseBody) SetRequestId(v string) *InvokeThingServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *InvokeThingServiceResponseBody) SetSuccess(v bool) *InvokeThingServiceResponseBody {
	s.Success = &v
	return s
}

func (s *InvokeThingServiceResponseBody) SetErrorMessage(v string) *InvokeThingServiceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *InvokeThingServiceResponseBody) SetCode(v string) *InvokeThingServiceResponseBody {
	s.Code = &v
	return s
}

func (s *InvokeThingServiceResponseBody) SetData(v *InvokeThingServiceResponseBodyData) *InvokeThingServiceResponseBody {
	s.Data = v
	return s
}

type InvokeThingServiceResponseBodyData struct {
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s InvokeThingServiceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s InvokeThingServiceResponseBodyData) GoString() string {
	return s.String()
}

func (s *InvokeThingServiceResponseBodyData) SetResult(v string) *InvokeThingServiceResponseBodyData {
	s.Result = &v
	return s
}

func (s *InvokeThingServiceResponseBodyData) SetMessageId(v string) *InvokeThingServiceResponseBodyData {
	s.MessageId = &v
	return s
}

type InvokeThingServiceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InvokeThingServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InvokeThingServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s InvokeThingServiceResponse) GoString() string {
	return s.String()
}

func (s *InvokeThingServiceResponse) SetHeaders(v map[string]*string) *InvokeThingServiceResponse {
	s.Headers = v
	return s
}

func (s *InvokeThingServiceResponse) SetBody(v *InvokeThingServiceResponseBody) *InvokeThingServiceResponse {
	s.Body = v
	return s
}

type InvokeThingsServiceRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	DeviceName    []*string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" type:"Repeated"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Identifier    *string   `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	Args          *string   `json:"Args,omitempty" xml:"Args,omitempty"`
}

func (s InvokeThingsServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s InvokeThingsServiceRequest) GoString() string {
	return s.String()
}

func (s *InvokeThingsServiceRequest) SetApiProduct(v string) *InvokeThingsServiceRequest {
	s.ApiProduct = &v
	return s
}

func (s *InvokeThingsServiceRequest) SetApiRevision(v string) *InvokeThingsServiceRequest {
	s.ApiRevision = &v
	return s
}

func (s *InvokeThingsServiceRequest) SetDeviceName(v []*string) *InvokeThingsServiceRequest {
	s.DeviceName = v
	return s
}

func (s *InvokeThingsServiceRequest) SetIotInstanceId(v string) *InvokeThingsServiceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *InvokeThingsServiceRequest) SetProductKey(v string) *InvokeThingsServiceRequest {
	s.ProductKey = &v
	return s
}

func (s *InvokeThingsServiceRequest) SetIdentifier(v string) *InvokeThingsServiceRequest {
	s.Identifier = &v
	return s
}

func (s *InvokeThingsServiceRequest) SetArgs(v string) *InvokeThingsServiceRequest {
	s.Args = &v
	return s
}

type InvokeThingsServiceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s InvokeThingsServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InvokeThingsServiceResponseBody) GoString() string {
	return s.String()
}

func (s *InvokeThingsServiceResponseBody) SetRequestId(v string) *InvokeThingsServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *InvokeThingsServiceResponseBody) SetSuccess(v bool) *InvokeThingsServiceResponseBody {
	s.Success = &v
	return s
}

func (s *InvokeThingsServiceResponseBody) SetErrorMessage(v string) *InvokeThingsServiceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *InvokeThingsServiceResponseBody) SetCode(v string) *InvokeThingsServiceResponseBody {
	s.Code = &v
	return s
}

type InvokeThingsServiceResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InvokeThingsServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InvokeThingsServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s InvokeThingsServiceResponse) GoString() string {
	return s.String()
}

func (s *InvokeThingsServiceResponse) SetHeaders(v map[string]*string) *InvokeThingsServiceResponse {
	s.Headers = v
	return s
}

func (s *InvokeThingsServiceResponse) SetBody(v *InvokeThingsServiceResponseBody) *InvokeThingsServiceResponse {
	s.Body = v
	return s
}

type ListDeviceDistributeJobRequest struct {
	ApiProduct  *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	TargetUid   *string `json:"TargetUid,omitempty" xml:"TargetUid,omitempty"`
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status      *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDeviceDistributeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceDistributeJobRequest) GoString() string {
	return s.String()
}

func (s *ListDeviceDistributeJobRequest) SetApiProduct(v string) *ListDeviceDistributeJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListDeviceDistributeJobRequest) SetApiRevision(v string) *ListDeviceDistributeJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListDeviceDistributeJobRequest) SetTargetUid(v string) *ListDeviceDistributeJobRequest {
	s.TargetUid = &v
	return s
}

func (s *ListDeviceDistributeJobRequest) SetCurrentPage(v int32) *ListDeviceDistributeJobRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListDeviceDistributeJobRequest) SetPageSize(v int32) *ListDeviceDistributeJobRequest {
	s.PageSize = &v
	return s
}

func (s *ListDeviceDistributeJobRequest) SetStatus(v int32) *ListDeviceDistributeJobRequest {
	s.Status = &v
	return s
}

type ListDeviceDistributeJobResponseBody struct {
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *ListDeviceDistributeJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s ListDeviceDistributeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceDistributeJobResponseBody) GoString() string {
	return s.String()
}

func (s *ListDeviceDistributeJobResponseBody) SetRequestId(v string) *ListDeviceDistributeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDeviceDistributeJobResponseBody) SetSuccess(v bool) *ListDeviceDistributeJobResponseBody {
	s.Success = &v
	return s
}

func (s *ListDeviceDistributeJobResponseBody) SetCode(v string) *ListDeviceDistributeJobResponseBody {
	s.Code = &v
	return s
}

func (s *ListDeviceDistributeJobResponseBody) SetErrorMessage(v string) *ListDeviceDistributeJobResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListDeviceDistributeJobResponseBody) SetData(v *ListDeviceDistributeJobResponseBodyData) *ListDeviceDistributeJobResponseBody {
	s.Data = v
	return s
}

type ListDeviceDistributeJobResponseBodyData struct {
	Total   *int32                                          `json:"Total,omitempty" xml:"Total,omitempty"`
	JobInfo *ListDeviceDistributeJobResponseBodyDataJobInfo `json:"JobInfo,omitempty" xml:"JobInfo,omitempty" type:"Struct"`
}

func (s ListDeviceDistributeJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceDistributeJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDeviceDistributeJobResponseBodyData) SetTotal(v int32) *ListDeviceDistributeJobResponseBodyData {
	s.Total = &v
	return s
}

func (s *ListDeviceDistributeJobResponseBodyData) SetJobInfo(v *ListDeviceDistributeJobResponseBodyDataJobInfo) *ListDeviceDistributeJobResponseBodyData {
	s.JobInfo = v
	return s
}

type ListDeviceDistributeJobResponseBodyDataJobInfo struct {
	Items []*ListDeviceDistributeJobResponseBodyDataJobInfoItems `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
}

func (s ListDeviceDistributeJobResponseBodyDataJobInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceDistributeJobResponseBodyDataJobInfo) GoString() string {
	return s.String()
}

func (s *ListDeviceDistributeJobResponseBodyDataJobInfo) SetItems(v []*ListDeviceDistributeJobResponseBodyDataJobInfoItems) *ListDeviceDistributeJobResponseBodyDataJobInfo {
	s.Items = v
	return s
}

type ListDeviceDistributeJobResponseBodyDataJobInfoItems struct {
	GmtCreate             *int64                                                                    `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	SourceUid             *string                                                                   `json:"SourceUid,omitempty" xml:"SourceUid,omitempty"`
	TargetUid             *string                                                                   `json:"TargetUid,omitempty" xml:"TargetUid,omitempty"`
	JobId                 *string                                                                   `json:"JobId,omitempty" xml:"JobId,omitempty"`
	SourceInstanceId      *string                                                                   `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	ProductKey            *string                                                                   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Total                 *int32                                                                    `json:"Total,omitempty" xml:"Total,omitempty"`
	Status                *int32                                                                    `json:"Status,omitempty" xml:"Status,omitempty"`
	Strategy              *int32                                                                    `json:"Strategy,omitempty" xml:"Strategy,omitempty"`
	TargetInstanceConfigs *ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigs `json:"TargetInstanceConfigs,omitempty" xml:"TargetInstanceConfigs,omitempty" type:"Struct"`
}

func (s ListDeviceDistributeJobResponseBodyDataJobInfoItems) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceDistributeJobResponseBodyDataJobInfoItems) GoString() string {
	return s.String()
}

func (s *ListDeviceDistributeJobResponseBodyDataJobInfoItems) SetGmtCreate(v int64) *ListDeviceDistributeJobResponseBodyDataJobInfoItems {
	s.GmtCreate = &v
	return s
}

func (s *ListDeviceDistributeJobResponseBodyDataJobInfoItems) SetSourceUid(v string) *ListDeviceDistributeJobResponseBodyDataJobInfoItems {
	s.SourceUid = &v
	return s
}

func (s *ListDeviceDistributeJobResponseBodyDataJobInfoItems) SetTargetUid(v string) *ListDeviceDistributeJobResponseBodyDataJobInfoItems {
	s.TargetUid = &v
	return s
}

func (s *ListDeviceDistributeJobResponseBodyDataJobInfoItems) SetJobId(v string) *ListDeviceDistributeJobResponseBodyDataJobInfoItems {
	s.JobId = &v
	return s
}

func (s *ListDeviceDistributeJobResponseBodyDataJobInfoItems) SetSourceInstanceId(v string) *ListDeviceDistributeJobResponseBodyDataJobInfoItems {
	s.SourceInstanceId = &v
	return s
}

func (s *ListDeviceDistributeJobResponseBodyDataJobInfoItems) SetProductKey(v string) *ListDeviceDistributeJobResponseBodyDataJobInfoItems {
	s.ProductKey = &v
	return s
}

func (s *ListDeviceDistributeJobResponseBodyDataJobInfoItems) SetTotal(v int32) *ListDeviceDistributeJobResponseBodyDataJobInfoItems {
	s.Total = &v
	return s
}

func (s *ListDeviceDistributeJobResponseBodyDataJobInfoItems) SetStatus(v int32) *ListDeviceDistributeJobResponseBodyDataJobInfoItems {
	s.Status = &v
	return s
}

func (s *ListDeviceDistributeJobResponseBodyDataJobInfoItems) SetStrategy(v int32) *ListDeviceDistributeJobResponseBodyDataJobInfoItems {
	s.Strategy = &v
	return s
}

func (s *ListDeviceDistributeJobResponseBodyDataJobInfoItems) SetTargetInstanceConfigs(v *ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigs) *ListDeviceDistributeJobResponseBodyDataJobInfoItems {
	s.TargetInstanceConfigs = v
	return s
}

type ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigs struct {
	TargetInstanceConfigs []*ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs `json:"targetInstanceConfigs,omitempty" xml:"targetInstanceConfigs,omitempty" type:"Repeated"`
}

func (s ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigs) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigs) GoString() string {
	return s.String()
}

func (s *ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigs) SetTargetInstanceConfigs(v []*ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs) *ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigs {
	s.TargetInstanceConfigs = v
	return s
}

type ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs struct {
	TargetInstanceId *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty"`
}

func (s ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs) GoString() string {
	return s.String()
}

func (s *ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs) SetTargetInstanceId(v string) *ListDeviceDistributeJobResponseBodyDataJobInfoItemsTargetInstanceConfigsTargetInstanceConfigs {
	s.TargetInstanceId = &v
	return s
}

type ListDeviceDistributeJobResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDeviceDistributeJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDeviceDistributeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDeviceDistributeJobResponse) GoString() string {
	return s.String()
}

func (s *ListDeviceDistributeJobResponse) SetHeaders(v map[string]*string) *ListDeviceDistributeJobResponse {
	s.Headers = v
	return s
}

func (s *ListDeviceDistributeJobResponse) SetBody(v *ListDeviceDistributeJobResponseBody) *ListDeviceDistributeJobResponse {
	s.Body = v
	return s
}

type ListDistributedDeviceRequest struct {
	ApiProduct       *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision      *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	PageSize         *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey       *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName       *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	CurrentPage      *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	TargetUid        *string `json:"TargetUid,omitempty" xml:"TargetUid,omitempty"`
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	TargetInstanceId *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty"`
}

func (s ListDistributedDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedDeviceRequest) GoString() string {
	return s.String()
}

func (s *ListDistributedDeviceRequest) SetApiProduct(v string) *ListDistributedDeviceRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListDistributedDeviceRequest) SetApiRevision(v string) *ListDistributedDeviceRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListDistributedDeviceRequest) SetPageSize(v int32) *ListDistributedDeviceRequest {
	s.PageSize = &v
	return s
}

func (s *ListDistributedDeviceRequest) SetProductKey(v string) *ListDistributedDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *ListDistributedDeviceRequest) SetDeviceName(v string) *ListDistributedDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *ListDistributedDeviceRequest) SetCurrentPage(v int32) *ListDistributedDeviceRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListDistributedDeviceRequest) SetTargetUid(v string) *ListDistributedDeviceRequest {
	s.TargetUid = &v
	return s
}

func (s *ListDistributedDeviceRequest) SetSourceInstanceId(v string) *ListDistributedDeviceRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *ListDistributedDeviceRequest) SetTargetInstanceId(v string) *ListDistributedDeviceRequest {
	s.TargetInstanceId = &v
	return s
}

type ListDistributedDeviceResponseBody struct {
	RequestId    *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *ListDistributedDeviceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s ListDistributedDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *ListDistributedDeviceResponseBody) SetRequestId(v string) *ListDistributedDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDistributedDeviceResponseBody) SetSuccess(v bool) *ListDistributedDeviceResponseBody {
	s.Success = &v
	return s
}

func (s *ListDistributedDeviceResponseBody) SetCode(v string) *ListDistributedDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *ListDistributedDeviceResponseBody) SetErrorMessage(v string) *ListDistributedDeviceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListDistributedDeviceResponseBody) SetData(v *ListDistributedDeviceResponseBodyData) *ListDistributedDeviceResponseBody {
	s.Data = v
	return s
}

type ListDistributedDeviceResponseBodyData struct {
	Total *int32                                     `json:"Total,omitempty" xml:"Total,omitempty"`
	Info  *ListDistributedDeviceResponseBodyDataInfo `json:"Info,omitempty" xml:"Info,omitempty" type:"Struct"`
}

func (s ListDistributedDeviceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedDeviceResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDistributedDeviceResponseBodyData) SetTotal(v int32) *ListDistributedDeviceResponseBodyData {
	s.Total = &v
	return s
}

func (s *ListDistributedDeviceResponseBodyData) SetInfo(v *ListDistributedDeviceResponseBodyDataInfo) *ListDistributedDeviceResponseBodyData {
	s.Info = v
	return s
}

type ListDistributedDeviceResponseBodyDataInfo struct {
	Items []*ListDistributedDeviceResponseBodyDataInfoItems `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
}

func (s ListDistributedDeviceResponseBodyDataInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedDeviceResponseBodyDataInfo) GoString() string {
	return s.String()
}

func (s *ListDistributedDeviceResponseBodyDataInfo) SetItems(v []*ListDistributedDeviceResponseBodyDataInfoItems) *ListDistributedDeviceResponseBodyDataInfo {
	s.Items = v
	return s
}

type ListDistributedDeviceResponseBodyDataInfoItems struct {
	SourceUid          *string `json:"SourceUid,omitempty" xml:"SourceUid,omitempty"`
	TargetUid          *string `json:"TargetUid,omitempty" xml:"TargetUid,omitempty"`
	ProductKey         *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName         *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	SourceInstanceId   *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	TargetInstanceId   *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty"`
	GmtCreate          *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	TargetAliyunId     *string `json:"TargetAliyunId,omitempty" xml:"TargetAliyunId,omitempty"`
	SourceRegion       *string `json:"SourceRegion,omitempty" xml:"SourceRegion,omitempty"`
	TargetRegion       *string `json:"TargetRegion,omitempty" xml:"TargetRegion,omitempty"`
	SourceInstanceName *string `json:"SourceInstanceName,omitempty" xml:"SourceInstanceName,omitempty"`
	TargetInstanceName *string `json:"TargetInstanceName,omitempty" xml:"TargetInstanceName,omitempty"`
	GmtModified        *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
}

func (s ListDistributedDeviceResponseBodyDataInfoItems) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedDeviceResponseBodyDataInfoItems) GoString() string {
	return s.String()
}

func (s *ListDistributedDeviceResponseBodyDataInfoItems) SetSourceUid(v string) *ListDistributedDeviceResponseBodyDataInfoItems {
	s.SourceUid = &v
	return s
}

func (s *ListDistributedDeviceResponseBodyDataInfoItems) SetTargetUid(v string) *ListDistributedDeviceResponseBodyDataInfoItems {
	s.TargetUid = &v
	return s
}

func (s *ListDistributedDeviceResponseBodyDataInfoItems) SetProductKey(v string) *ListDistributedDeviceResponseBodyDataInfoItems {
	s.ProductKey = &v
	return s
}

func (s *ListDistributedDeviceResponseBodyDataInfoItems) SetDeviceName(v string) *ListDistributedDeviceResponseBodyDataInfoItems {
	s.DeviceName = &v
	return s
}

func (s *ListDistributedDeviceResponseBodyDataInfoItems) SetSourceInstanceId(v string) *ListDistributedDeviceResponseBodyDataInfoItems {
	s.SourceInstanceId = &v
	return s
}

func (s *ListDistributedDeviceResponseBodyDataInfoItems) SetTargetInstanceId(v string) *ListDistributedDeviceResponseBodyDataInfoItems {
	s.TargetInstanceId = &v
	return s
}

func (s *ListDistributedDeviceResponseBodyDataInfoItems) SetGmtCreate(v int64) *ListDistributedDeviceResponseBodyDataInfoItems {
	s.GmtCreate = &v
	return s
}

func (s *ListDistributedDeviceResponseBodyDataInfoItems) SetTargetAliyunId(v string) *ListDistributedDeviceResponseBodyDataInfoItems {
	s.TargetAliyunId = &v
	return s
}

func (s *ListDistributedDeviceResponseBodyDataInfoItems) SetSourceRegion(v string) *ListDistributedDeviceResponseBodyDataInfoItems {
	s.SourceRegion = &v
	return s
}

func (s *ListDistributedDeviceResponseBodyDataInfoItems) SetTargetRegion(v string) *ListDistributedDeviceResponseBodyDataInfoItems {
	s.TargetRegion = &v
	return s
}

func (s *ListDistributedDeviceResponseBodyDataInfoItems) SetSourceInstanceName(v string) *ListDistributedDeviceResponseBodyDataInfoItems {
	s.SourceInstanceName = &v
	return s
}

func (s *ListDistributedDeviceResponseBodyDataInfoItems) SetTargetInstanceName(v string) *ListDistributedDeviceResponseBodyDataInfoItems {
	s.TargetInstanceName = &v
	return s
}

func (s *ListDistributedDeviceResponseBodyDataInfoItems) SetGmtModified(v int64) *ListDistributedDeviceResponseBodyDataInfoItems {
	s.GmtModified = &v
	return s
}

type ListDistributedDeviceResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDistributedDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDistributedDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedDeviceResponse) GoString() string {
	return s.String()
}

func (s *ListDistributedDeviceResponse) SetHeaders(v map[string]*string) *ListDistributedDeviceResponse {
	s.Headers = v
	return s
}

func (s *ListDistributedDeviceResponse) SetBody(v *ListDistributedDeviceResponseBody) *ListDistributedDeviceResponse {
	s.Body = v
	return s
}

type ListDistributedProductRequest struct {
	ApiProduct       *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision      *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	PageSize         *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SourceInstanceId *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	ProductKey       *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	TargetInstanceId *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty"`
	TargetUid        *string `json:"TargetUid,omitempty" xml:"TargetUid,omitempty"`
	CurrentPage      *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s ListDistributedProductRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedProductRequest) GoString() string {
	return s.String()
}

func (s *ListDistributedProductRequest) SetApiProduct(v string) *ListDistributedProductRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListDistributedProductRequest) SetApiRevision(v string) *ListDistributedProductRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListDistributedProductRequest) SetPageSize(v int32) *ListDistributedProductRequest {
	s.PageSize = &v
	return s
}

func (s *ListDistributedProductRequest) SetSourceInstanceId(v string) *ListDistributedProductRequest {
	s.SourceInstanceId = &v
	return s
}

func (s *ListDistributedProductRequest) SetProductKey(v string) *ListDistributedProductRequest {
	s.ProductKey = &v
	return s
}

func (s *ListDistributedProductRequest) SetTargetInstanceId(v string) *ListDistributedProductRequest {
	s.TargetInstanceId = &v
	return s
}

func (s *ListDistributedProductRequest) SetTargetUid(v string) *ListDistributedProductRequest {
	s.TargetUid = &v
	return s
}

func (s *ListDistributedProductRequest) SetCurrentPage(v int32) *ListDistributedProductRequest {
	s.CurrentPage = &v
	return s
}

type ListDistributedProductResponseBody struct {
	RequestId    *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                 `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *ListDistributedProductResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s ListDistributedProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedProductResponseBody) GoString() string {
	return s.String()
}

func (s *ListDistributedProductResponseBody) SetRequestId(v string) *ListDistributedProductResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDistributedProductResponseBody) SetSuccess(v bool) *ListDistributedProductResponseBody {
	s.Success = &v
	return s
}

func (s *ListDistributedProductResponseBody) SetCode(v string) *ListDistributedProductResponseBody {
	s.Code = &v
	return s
}

func (s *ListDistributedProductResponseBody) SetErrorMessage(v string) *ListDistributedProductResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListDistributedProductResponseBody) SetData(v *ListDistributedProductResponseBodyData) *ListDistributedProductResponseBody {
	s.Data = v
	return s
}

type ListDistributedProductResponseBodyData struct {
	Total *int32                                      `json:"Total,omitempty" xml:"Total,omitempty"`
	Info  *ListDistributedProductResponseBodyDataInfo `json:"Info,omitempty" xml:"Info,omitempty" type:"Struct"`
}

func (s ListDistributedProductResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedProductResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListDistributedProductResponseBodyData) SetTotal(v int32) *ListDistributedProductResponseBodyData {
	s.Total = &v
	return s
}

func (s *ListDistributedProductResponseBodyData) SetInfo(v *ListDistributedProductResponseBodyDataInfo) *ListDistributedProductResponseBodyData {
	s.Info = v
	return s
}

type ListDistributedProductResponseBodyDataInfo struct {
	Items []*ListDistributedProductResponseBodyDataInfoItems `json:"items,omitempty" xml:"items,omitempty" type:"Repeated"`
}

func (s ListDistributedProductResponseBodyDataInfo) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedProductResponseBodyDataInfo) GoString() string {
	return s.String()
}

func (s *ListDistributedProductResponseBodyDataInfo) SetItems(v []*ListDistributedProductResponseBodyDataInfoItems) *ListDistributedProductResponseBodyDataInfo {
	s.Items = v
	return s
}

type ListDistributedProductResponseBodyDataInfoItems struct {
	SourceUid          *string `json:"SourceUid,omitempty" xml:"SourceUid,omitempty"`
	TargetUid          *string `json:"TargetUid,omitempty" xml:"TargetUid,omitempty"`
	ProductKey         *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	SourceInstanceId   *string `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	TargetInstanceId   *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty"`
	GmtCreate          *int32  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	TargetAliyunId     *string `json:"TargetAliyunId,omitempty" xml:"TargetAliyunId,omitempty"`
	SourceRegion       *string `json:"SourceRegion,omitempty" xml:"SourceRegion,omitempty"`
	TargetRegion       *string `json:"TargetRegion,omitempty" xml:"TargetRegion,omitempty"`
	SourceInstanceName *string `json:"SourceInstanceName,omitempty" xml:"SourceInstanceName,omitempty"`
	TargetInstanceName *string `json:"TargetInstanceName,omitempty" xml:"TargetInstanceName,omitempty"`
}

func (s ListDistributedProductResponseBodyDataInfoItems) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedProductResponseBodyDataInfoItems) GoString() string {
	return s.String()
}

func (s *ListDistributedProductResponseBodyDataInfoItems) SetSourceUid(v string) *ListDistributedProductResponseBodyDataInfoItems {
	s.SourceUid = &v
	return s
}

func (s *ListDistributedProductResponseBodyDataInfoItems) SetTargetUid(v string) *ListDistributedProductResponseBodyDataInfoItems {
	s.TargetUid = &v
	return s
}

func (s *ListDistributedProductResponseBodyDataInfoItems) SetProductKey(v string) *ListDistributedProductResponseBodyDataInfoItems {
	s.ProductKey = &v
	return s
}

func (s *ListDistributedProductResponseBodyDataInfoItems) SetSourceInstanceId(v string) *ListDistributedProductResponseBodyDataInfoItems {
	s.SourceInstanceId = &v
	return s
}

func (s *ListDistributedProductResponseBodyDataInfoItems) SetTargetInstanceId(v string) *ListDistributedProductResponseBodyDataInfoItems {
	s.TargetInstanceId = &v
	return s
}

func (s *ListDistributedProductResponseBodyDataInfoItems) SetGmtCreate(v int32) *ListDistributedProductResponseBodyDataInfoItems {
	s.GmtCreate = &v
	return s
}

func (s *ListDistributedProductResponseBodyDataInfoItems) SetTargetAliyunId(v string) *ListDistributedProductResponseBodyDataInfoItems {
	s.TargetAliyunId = &v
	return s
}

func (s *ListDistributedProductResponseBodyDataInfoItems) SetSourceRegion(v string) *ListDistributedProductResponseBodyDataInfoItems {
	s.SourceRegion = &v
	return s
}

func (s *ListDistributedProductResponseBodyDataInfoItems) SetTargetRegion(v string) *ListDistributedProductResponseBodyDataInfoItems {
	s.TargetRegion = &v
	return s
}

func (s *ListDistributedProductResponseBodyDataInfoItems) SetSourceInstanceName(v string) *ListDistributedProductResponseBodyDataInfoItems {
	s.SourceInstanceName = &v
	return s
}

func (s *ListDistributedProductResponseBodyDataInfoItems) SetTargetInstanceName(v string) *ListDistributedProductResponseBodyDataInfoItems {
	s.TargetInstanceName = &v
	return s
}

type ListDistributedProductResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDistributedProductResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDistributedProductResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDistributedProductResponse) GoString() string {
	return s.String()
}

func (s *ListDistributedProductResponse) SetHeaders(v map[string]*string) *ListDistributedProductResponse {
	s.Headers = v
	return s
}

func (s *ListDistributedProductResponse) SetBody(v *ListDistributedProductResponseBody) *ListDistributedProductResponse {
	s.Body = v
	return s
}

type ListJobRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s ListJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ListJobRequest) GoString() string {
	return s.String()
}

func (s *ListJobRequest) SetApiProduct(v string) *ListJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListJobRequest) SetApiRevision(v string) *ListJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListJobRequest) SetIotInstanceId(v string) *ListJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListJobRequest) SetStatus(v string) *ListJobRequest {
	s.Status = &v
	return s
}

func (s *ListJobRequest) SetPageSize(v int32) *ListJobRequest {
	s.PageSize = &v
	return s
}

func (s *ListJobRequest) SetCurrentPage(v int32) *ListJobRequest {
	s.CurrentPage = &v
	return s
}

type ListJobResponseBody struct {
	RequestId    *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                    `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                  `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Total        *int32                   `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize     *int32                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Page         *int32                   `json:"Page,omitempty" xml:"Page,omitempty"`
	Data         *ListJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s ListJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBody) GoString() string {
	return s.String()
}

func (s *ListJobResponseBody) SetRequestId(v string) *ListJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListJobResponseBody) SetSuccess(v bool) *ListJobResponseBody {
	s.Success = &v
	return s
}

func (s *ListJobResponseBody) SetCode(v string) *ListJobResponseBody {
	s.Code = &v
	return s
}

func (s *ListJobResponseBody) SetErrorMessage(v string) *ListJobResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListJobResponseBody) SetTotal(v int32) *ListJobResponseBody {
	s.Total = &v
	return s
}

func (s *ListJobResponseBody) SetPageSize(v int32) *ListJobResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListJobResponseBody) SetPage(v int32) *ListJobResponseBody {
	s.Page = &v
	return s
}

func (s *ListJobResponseBody) SetData(v *ListJobResponseBodyData) *ListJobResponseBody {
	s.Data = v
	return s
}

type ListJobResponseBodyData struct {
	Data []*ListJobResponseBodyDataData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyData) SetData(v []*ListJobResponseBodyDataData) *ListJobResponseBodyData {
	s.Data = v
	return s
}

type ListJobResponseBodyDataData struct {
	JobId       *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobName     *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	UtcCreate   *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	UtcModified *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListJobResponseBodyDataData) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyDataData) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyDataData) SetJobId(v string) *ListJobResponseBodyDataData {
	s.JobId = &v
	return s
}

func (s *ListJobResponseBodyDataData) SetJobName(v string) *ListJobResponseBodyDataData {
	s.JobName = &v
	return s
}

func (s *ListJobResponseBodyDataData) SetUtcCreate(v string) *ListJobResponseBodyDataData {
	s.UtcCreate = &v
	return s
}

func (s *ListJobResponseBodyDataData) SetUtcModified(v string) *ListJobResponseBodyDataData {
	s.UtcModified = &v
	return s
}

func (s *ListJobResponseBodyDataData) SetStatus(v string) *ListJobResponseBodyDataData {
	s.Status = &v
	return s
}

func (s *ListJobResponseBodyDataData) SetDescription(v string) *ListJobResponseBodyDataData {
	s.Description = &v
	return s
}

func (s *ListJobResponseBodyDataData) SetType(v string) *ListJobResponseBodyDataData {
	s.Type = &v
	return s
}

type ListJobResponse struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponse) GoString() string {
	return s.String()
}

func (s *ListJobResponse) SetHeaders(v map[string]*string) *ListJobResponse {
	s.Headers = v
	return s
}

func (s *ListJobResponse) SetBody(v *ListJobResponseBody) *ListJobResponse {
	s.Body = v
	return s
}

type ListOTAFirmwareRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	DestVersion   *string `json:"DestVersion,omitempty" xml:"DestVersion,omitempty"`
}

func (s ListOTAFirmwareRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOTAFirmwareRequest) GoString() string {
	return s.String()
}

func (s *ListOTAFirmwareRequest) SetApiProduct(v string) *ListOTAFirmwareRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListOTAFirmwareRequest) SetApiRevision(v string) *ListOTAFirmwareRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListOTAFirmwareRequest) SetIotInstanceId(v string) *ListOTAFirmwareRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListOTAFirmwareRequest) SetProductKey(v string) *ListOTAFirmwareRequest {
	s.ProductKey = &v
	return s
}

func (s *ListOTAFirmwareRequest) SetPageSize(v int32) *ListOTAFirmwareRequest {
	s.PageSize = &v
	return s
}

func (s *ListOTAFirmwareRequest) SetCurrentPage(v int32) *ListOTAFirmwareRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListOTAFirmwareRequest) SetDestVersion(v string) *ListOTAFirmwareRequest {
	s.DestVersion = &v
	return s
}

type ListOTAFirmwareResponseBody struct {
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Total        *int32                                   `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize     *int32                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageCount    *int32                                   `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	CurrentPage  *int32                                   `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	FirmwareInfo *ListOTAFirmwareResponseBodyFirmwareInfo `json:"FirmwareInfo,omitempty" xml:"FirmwareInfo,omitempty" type:"Struct"`
}

func (s ListOTAFirmwareResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOTAFirmwareResponseBody) GoString() string {
	return s.String()
}

func (s *ListOTAFirmwareResponseBody) SetRequestId(v string) *ListOTAFirmwareResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOTAFirmwareResponseBody) SetSuccess(v bool) *ListOTAFirmwareResponseBody {
	s.Success = &v
	return s
}

func (s *ListOTAFirmwareResponseBody) SetCode(v string) *ListOTAFirmwareResponseBody {
	s.Code = &v
	return s
}

func (s *ListOTAFirmwareResponseBody) SetErrorMessage(v string) *ListOTAFirmwareResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListOTAFirmwareResponseBody) SetTotal(v int32) *ListOTAFirmwareResponseBody {
	s.Total = &v
	return s
}

func (s *ListOTAFirmwareResponseBody) SetPageSize(v int32) *ListOTAFirmwareResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListOTAFirmwareResponseBody) SetPageCount(v int32) *ListOTAFirmwareResponseBody {
	s.PageCount = &v
	return s
}

func (s *ListOTAFirmwareResponseBody) SetCurrentPage(v int32) *ListOTAFirmwareResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *ListOTAFirmwareResponseBody) SetFirmwareInfo(v *ListOTAFirmwareResponseBodyFirmwareInfo) *ListOTAFirmwareResponseBody {
	s.FirmwareInfo = v
	return s
}

type ListOTAFirmwareResponseBodyFirmwareInfo struct {
	SimpleFirmwareInfo []*ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo `json:"SimpleFirmwareInfo,omitempty" xml:"SimpleFirmwareInfo,omitempty" type:"Repeated"`
}

func (s ListOTAFirmwareResponseBodyFirmwareInfo) String() string {
	return tea.Prettify(s)
}

func (s ListOTAFirmwareResponseBodyFirmwareInfo) GoString() string {
	return s.String()
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfo) SetSimpleFirmwareInfo(v []*ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) *ListOTAFirmwareResponseBodyFirmwareInfo {
	s.SimpleFirmwareInfo = v
	return s
}

type ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo struct {
	FirmwareName *string `json:"FirmwareName,omitempty" xml:"FirmwareName,omitempty"`
	FirmwareId   *string `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty"`
	SrcVersion   *string `json:"SrcVersion,omitempty" xml:"SrcVersion,omitempty"`
	DestVersion  *string `json:"DestVersion,omitempty" xml:"DestVersion,omitempty"`
	UtcCreate    *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	UtcModified  *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty"`
	Status       *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	FirmwareDesc *string `json:"FirmwareDesc,omitempty" xml:"FirmwareDesc,omitempty"`
	FirmwareSign *string `json:"FirmwareSign,omitempty" xml:"FirmwareSign,omitempty"`
	FirmwareSize *int32  `json:"FirmwareSize,omitempty" xml:"FirmwareSize,omitempty"`
	FirmwareUrl  *string `json:"FirmwareUrl,omitempty" xml:"FirmwareUrl,omitempty"`
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	SignMethod   *string `json:"SignMethod,omitempty" xml:"SignMethod,omitempty"`
	ProductName  *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	Type         *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	ModuleName   *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
}

func (s ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) String() string {
	return tea.Prettify(s)
}

func (s ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) GoString() string {
	return s.String()
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) SetFirmwareName(v string) *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo {
	s.FirmwareName = &v
	return s
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) SetFirmwareId(v string) *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo {
	s.FirmwareId = &v
	return s
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) SetSrcVersion(v string) *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo {
	s.SrcVersion = &v
	return s
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) SetDestVersion(v string) *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo {
	s.DestVersion = &v
	return s
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) SetUtcCreate(v string) *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo {
	s.UtcCreate = &v
	return s
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) SetUtcModified(v string) *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo {
	s.UtcModified = &v
	return s
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) SetStatus(v int32) *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo {
	s.Status = &v
	return s
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) SetFirmwareDesc(v string) *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo {
	s.FirmwareDesc = &v
	return s
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) SetFirmwareSign(v string) *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo {
	s.FirmwareSign = &v
	return s
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) SetFirmwareSize(v int32) *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo {
	s.FirmwareSize = &v
	return s
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) SetFirmwareUrl(v string) *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo {
	s.FirmwareUrl = &v
	return s
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) SetProductKey(v string) *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo {
	s.ProductKey = &v
	return s
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) SetSignMethod(v string) *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo {
	s.SignMethod = &v
	return s
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) SetProductName(v string) *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo {
	s.ProductName = &v
	return s
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) SetType(v int32) *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo {
	s.Type = &v
	return s
}

func (s *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo) SetModuleName(v string) *ListOTAFirmwareResponseBodyFirmwareInfoSimpleFirmwareInfo {
	s.ModuleName = &v
	return s
}

type ListOTAFirmwareResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListOTAFirmwareResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListOTAFirmwareResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOTAFirmwareResponse) GoString() string {
	return s.String()
}

func (s *ListOTAFirmwareResponse) SetHeaders(v map[string]*string) *ListOTAFirmwareResponse {
	s.Headers = v
	return s
}

func (s *ListOTAFirmwareResponse) SetBody(v *ListOTAFirmwareResponseBody) *ListOTAFirmwareResponse {
	s.Body = v
	return s
}

type ListOTAJobByDeviceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareId    *string `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s ListOTAJobByDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByDeviceRequest) GoString() string {
	return s.String()
}

func (s *ListOTAJobByDeviceRequest) SetApiProduct(v string) *ListOTAJobByDeviceRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListOTAJobByDeviceRequest) SetApiRevision(v string) *ListOTAJobByDeviceRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListOTAJobByDeviceRequest) SetIotInstanceId(v string) *ListOTAJobByDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListOTAJobByDeviceRequest) SetFirmwareId(v string) *ListOTAJobByDeviceRequest {
	s.FirmwareId = &v
	return s
}

func (s *ListOTAJobByDeviceRequest) SetPageSize(v int32) *ListOTAJobByDeviceRequest {
	s.PageSize = &v
	return s
}

func (s *ListOTAJobByDeviceRequest) SetProductKey(v string) *ListOTAJobByDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *ListOTAJobByDeviceRequest) SetDeviceName(v string) *ListOTAJobByDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *ListOTAJobByDeviceRequest) SetCurrentPage(v int32) *ListOTAJobByDeviceRequest {
	s.CurrentPage = &v
	return s
}

type ListOTAJobByDeviceResponseBody struct {
	RequestId    *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Total        *int32                              `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize     *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageCount    *int32                              `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	CurrentPage  *int32                              `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Data         *ListOTAJobByDeviceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s ListOTAJobByDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *ListOTAJobByDeviceResponseBody) SetRequestId(v string) *ListOTAJobByDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBody) SetSuccess(v bool) *ListOTAJobByDeviceResponseBody {
	s.Success = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBody) SetCode(v string) *ListOTAJobByDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBody) SetErrorMessage(v string) *ListOTAJobByDeviceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBody) SetTotal(v int32) *ListOTAJobByDeviceResponseBody {
	s.Total = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBody) SetPageSize(v int32) *ListOTAJobByDeviceResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBody) SetPageCount(v int32) *ListOTAJobByDeviceResponseBody {
	s.PageCount = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBody) SetCurrentPage(v int32) *ListOTAJobByDeviceResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBody) SetData(v *ListOTAJobByDeviceResponseBodyData) *ListOTAJobByDeviceResponseBody {
	s.Data = v
	return s
}

type ListOTAJobByDeviceResponseBodyData struct {
	SimpleOTAJobInfo []*ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo `json:"SimpleOTAJobInfo,omitempty" xml:"SimpleOTAJobInfo,omitempty" type:"Repeated"`
}

func (s ListOTAJobByDeviceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByDeviceResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListOTAJobByDeviceResponseBodyData) SetSimpleOTAJobInfo(v []*ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo) *ListOTAJobByDeviceResponseBodyData {
	s.SimpleOTAJobInfo = v
	return s
}

type ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo struct {
	JobId           *string                                                 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UtcCreate       *string                                                 `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	UtcModified     *string                                                 `json:"UtcModified,omitempty" xml:"UtcModified,omitempty"`
	ProductKey      *string                                                 `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	FirmwareId      *string                                                 `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty"`
	UtcStartTime    *string                                                 `json:"UtcStartTime,omitempty" xml:"UtcStartTime,omitempty"`
	UtcEndTime      *string                                                 `json:"UtcEndTime,omitempty" xml:"UtcEndTime,omitempty"`
	JobStatus       *string                                                 `json:"JobStatus,omitempty" xml:"JobStatus,omitempty"`
	JobType         *string                                                 `json:"JobType,omitempty" xml:"JobType,omitempty"`
	TargetSelection *string                                                 `json:"TargetSelection,omitempty" xml:"TargetSelection,omitempty"`
	SelectionType   *string                                                 `json:"SelectionType,omitempty" xml:"SelectionType,omitempty"`
	Tags            *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo) GoString() string {
	return s.String()
}

func (s *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo) SetJobId(v string) *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo {
	s.JobId = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo) SetUtcCreate(v string) *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo {
	s.UtcCreate = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo) SetUtcModified(v string) *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo {
	s.UtcModified = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo) SetProductKey(v string) *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo {
	s.ProductKey = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo) SetFirmwareId(v string) *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo {
	s.FirmwareId = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo) SetUtcStartTime(v string) *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo {
	s.UtcStartTime = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo) SetUtcEndTime(v string) *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo {
	s.UtcEndTime = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo) SetJobStatus(v string) *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo {
	s.JobStatus = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo) SetJobType(v string) *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo {
	s.JobType = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo) SetTargetSelection(v string) *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo {
	s.TargetSelection = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo) SetSelectionType(v string) *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo {
	s.SelectionType = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo) SetTags(v *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTags) *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfo {
	s.Tags = v
	return s
}

type ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTags struct {
	OtaTagDTO []*ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO `json:"OtaTagDTO,omitempty" xml:"OtaTagDTO,omitempty" type:"Repeated"`
}

func (s ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTags) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTags) GoString() string {
	return s.String()
}

func (s *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTags) SetOtaTagDTO(v []*ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO) *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTags {
	s.OtaTagDTO = v
	return s
}

type ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO) GoString() string {
	return s.String()
}

func (s *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO) SetKey(v string) *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO {
	s.Key = &v
	return s
}

func (s *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO) SetValue(v string) *ListOTAJobByDeviceResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO {
	s.Value = &v
	return s
}

type ListOTAJobByDeviceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListOTAJobByDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListOTAJobByDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByDeviceResponse) GoString() string {
	return s.String()
}

func (s *ListOTAJobByDeviceResponse) SetHeaders(v map[string]*string) *ListOTAJobByDeviceResponse {
	s.Headers = v
	return s
}

func (s *ListOTAJobByDeviceResponse) SetBody(v *ListOTAJobByDeviceResponseBody) *ListOTAJobByDeviceResponse {
	s.Body = v
	return s
}

type ListOTAJobByFirmwareRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareId    *string `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s ListOTAJobByFirmwareRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByFirmwareRequest) GoString() string {
	return s.String()
}

func (s *ListOTAJobByFirmwareRequest) SetApiProduct(v string) *ListOTAJobByFirmwareRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListOTAJobByFirmwareRequest) SetApiRevision(v string) *ListOTAJobByFirmwareRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListOTAJobByFirmwareRequest) SetIotInstanceId(v string) *ListOTAJobByFirmwareRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListOTAJobByFirmwareRequest) SetFirmwareId(v string) *ListOTAJobByFirmwareRequest {
	s.FirmwareId = &v
	return s
}

func (s *ListOTAJobByFirmwareRequest) SetPageSize(v int32) *ListOTAJobByFirmwareRequest {
	s.PageSize = &v
	return s
}

func (s *ListOTAJobByFirmwareRequest) SetCurrentPage(v int32) *ListOTAJobByFirmwareRequest {
	s.CurrentPage = &v
	return s
}

type ListOTAJobByFirmwareResponseBody struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Total        *int32                                `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize     *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageCount    *int32                                `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	CurrentPage  *int32                                `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Data         *ListOTAJobByFirmwareResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s ListOTAJobByFirmwareResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByFirmwareResponseBody) GoString() string {
	return s.String()
}

func (s *ListOTAJobByFirmwareResponseBody) SetRequestId(v string) *ListOTAJobByFirmwareResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBody) SetSuccess(v bool) *ListOTAJobByFirmwareResponseBody {
	s.Success = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBody) SetCode(v string) *ListOTAJobByFirmwareResponseBody {
	s.Code = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBody) SetErrorMessage(v string) *ListOTAJobByFirmwareResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBody) SetTotal(v int32) *ListOTAJobByFirmwareResponseBody {
	s.Total = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBody) SetPageSize(v int32) *ListOTAJobByFirmwareResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBody) SetPageCount(v int32) *ListOTAJobByFirmwareResponseBody {
	s.PageCount = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBody) SetCurrentPage(v int32) *ListOTAJobByFirmwareResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBody) SetData(v *ListOTAJobByFirmwareResponseBodyData) *ListOTAJobByFirmwareResponseBody {
	s.Data = v
	return s
}

type ListOTAJobByFirmwareResponseBodyData struct {
	SimpleOTAJobInfo []*ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo `json:"SimpleOTAJobInfo,omitempty" xml:"SimpleOTAJobInfo,omitempty" type:"Repeated"`
}

func (s ListOTAJobByFirmwareResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByFirmwareResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListOTAJobByFirmwareResponseBodyData) SetSimpleOTAJobInfo(v []*ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo) *ListOTAJobByFirmwareResponseBodyData {
	s.SimpleOTAJobInfo = v
	return s
}

type ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo struct {
	JobId           *string                                                   `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UtcCreate       *string                                                   `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	UtcModified     *string                                                   `json:"UtcModified,omitempty" xml:"UtcModified,omitempty"`
	ProductKey      *string                                                   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	FirmwareId      *string                                                   `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty"`
	UtcStartTime    *string                                                   `json:"UtcStartTime,omitempty" xml:"UtcStartTime,omitempty"`
	UtcEndTime      *string                                                   `json:"UtcEndTime,omitempty" xml:"UtcEndTime,omitempty"`
	JobStatus       *string                                                   `json:"JobStatus,omitempty" xml:"JobStatus,omitempty"`
	JobType         *string                                                   `json:"JobType,omitempty" xml:"JobType,omitempty"`
	TargetSelection *string                                                   `json:"TargetSelection,omitempty" xml:"TargetSelection,omitempty"`
	SelectionType   *string                                                   `json:"SelectionType,omitempty" xml:"SelectionType,omitempty"`
	Tags            *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo) GoString() string {
	return s.String()
}

func (s *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo) SetJobId(v string) *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo {
	s.JobId = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo) SetUtcCreate(v string) *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo {
	s.UtcCreate = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo) SetUtcModified(v string) *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo {
	s.UtcModified = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo) SetProductKey(v string) *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo {
	s.ProductKey = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo) SetFirmwareId(v string) *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo {
	s.FirmwareId = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo) SetUtcStartTime(v string) *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo {
	s.UtcStartTime = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo) SetUtcEndTime(v string) *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo {
	s.UtcEndTime = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo) SetJobStatus(v string) *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo {
	s.JobStatus = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo) SetJobType(v string) *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo {
	s.JobType = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo) SetTargetSelection(v string) *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo {
	s.TargetSelection = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo) SetSelectionType(v string) *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo {
	s.SelectionType = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo) SetTags(v *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTags) *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfo {
	s.Tags = v
	return s
}

type ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTags struct {
	OtaTagDTO []*ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO `json:"OtaTagDTO,omitempty" xml:"OtaTagDTO,omitempty" type:"Repeated"`
}

func (s ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTags) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTags) GoString() string {
	return s.String()
}

func (s *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTags) SetOtaTagDTO(v []*ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO) *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTags {
	s.OtaTagDTO = v
	return s
}

type ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO) GoString() string {
	return s.String()
}

func (s *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO) SetKey(v string) *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO {
	s.Key = &v
	return s
}

func (s *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO) SetValue(v string) *ListOTAJobByFirmwareResponseBodyDataSimpleOTAJobInfoTagsOtaTagDTO {
	s.Value = &v
	return s
}

type ListOTAJobByFirmwareResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListOTAJobByFirmwareResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListOTAJobByFirmwareResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOTAJobByFirmwareResponse) GoString() string {
	return s.String()
}

func (s *ListOTAJobByFirmwareResponse) SetHeaders(v map[string]*string) *ListOTAJobByFirmwareResponse {
	s.Headers = v
	return s
}

func (s *ListOTAJobByFirmwareResponse) SetBody(v *ListOTAJobByFirmwareResponseBody) *ListOTAJobByFirmwareResponse {
	s.Body = v
	return s
}

type ListOTAModuleByProductRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	AuthConfig    *string `json:"AuthConfig,omitempty" xml:"AuthConfig,omitempty"`
}

func (s ListOTAModuleByProductRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOTAModuleByProductRequest) GoString() string {
	return s.String()
}

func (s *ListOTAModuleByProductRequest) SetApiProduct(v string) *ListOTAModuleByProductRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListOTAModuleByProductRequest) SetApiRevision(v string) *ListOTAModuleByProductRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListOTAModuleByProductRequest) SetIotInstanceId(v string) *ListOTAModuleByProductRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListOTAModuleByProductRequest) SetProductKey(v string) *ListOTAModuleByProductRequest {
	s.ProductKey = &v
	return s
}

func (s *ListOTAModuleByProductRequest) SetAuthConfig(v string) *ListOTAModuleByProductRequest {
	s.AuthConfig = &v
	return s
}

type ListOTAModuleByProductResponseBody struct {
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         []*ListOTAModuleByProductResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
}

func (s ListOTAModuleByProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOTAModuleByProductResponseBody) GoString() string {
	return s.String()
}

func (s *ListOTAModuleByProductResponseBody) SetRequestId(v string) *ListOTAModuleByProductResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOTAModuleByProductResponseBody) SetSuccess(v bool) *ListOTAModuleByProductResponseBody {
	s.Success = &v
	return s
}

func (s *ListOTAModuleByProductResponseBody) SetCode(v string) *ListOTAModuleByProductResponseBody {
	s.Code = &v
	return s
}

func (s *ListOTAModuleByProductResponseBody) SetErrorMessage(v string) *ListOTAModuleByProductResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListOTAModuleByProductResponseBody) SetData(v []*ListOTAModuleByProductResponseBodyData) *ListOTAModuleByProductResponseBody {
	s.Data = v
	return s
}

type ListOTAModuleByProductResponseBodyData struct {
	ProductKey  *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ModuleName  *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
	AliasName   *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	Desc        *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	GmtCreate   *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
}

func (s ListOTAModuleByProductResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListOTAModuleByProductResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListOTAModuleByProductResponseBodyData) SetProductKey(v string) *ListOTAModuleByProductResponseBodyData {
	s.ProductKey = &v
	return s
}

func (s *ListOTAModuleByProductResponseBodyData) SetModuleName(v string) *ListOTAModuleByProductResponseBodyData {
	s.ModuleName = &v
	return s
}

func (s *ListOTAModuleByProductResponseBodyData) SetAliasName(v string) *ListOTAModuleByProductResponseBodyData {
	s.AliasName = &v
	return s
}

func (s *ListOTAModuleByProductResponseBodyData) SetDesc(v string) *ListOTAModuleByProductResponseBodyData {
	s.Desc = &v
	return s
}

func (s *ListOTAModuleByProductResponseBodyData) SetGmtCreate(v string) *ListOTAModuleByProductResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *ListOTAModuleByProductResponseBodyData) SetGmtModified(v string) *ListOTAModuleByProductResponseBodyData {
	s.GmtModified = &v
	return s
}

type ListOTAModuleByProductResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListOTAModuleByProductResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListOTAModuleByProductResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOTAModuleByProductResponse) GoString() string {
	return s.String()
}

func (s *ListOTAModuleByProductResponse) SetHeaders(v map[string]*string) *ListOTAModuleByProductResponse {
	s.Headers = v
	return s
}

func (s *ListOTAModuleByProductResponse) SetBody(v *ListOTAModuleByProductResponseBody) *ListOTAModuleByProductResponse {
	s.Body = v
	return s
}

type ListOTAModuleVersionsByDeviceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s ListOTAModuleVersionsByDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOTAModuleVersionsByDeviceRequest) GoString() string {
	return s.String()
}

func (s *ListOTAModuleVersionsByDeviceRequest) SetApiProduct(v string) *ListOTAModuleVersionsByDeviceRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceRequest) SetApiRevision(v string) *ListOTAModuleVersionsByDeviceRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceRequest) SetIotInstanceId(v string) *ListOTAModuleVersionsByDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceRequest) SetPageSize(v int32) *ListOTAModuleVersionsByDeviceRequest {
	s.PageSize = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceRequest) SetProductKey(v string) *ListOTAModuleVersionsByDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceRequest) SetDeviceName(v string) *ListOTAModuleVersionsByDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceRequest) SetIotId(v string) *ListOTAModuleVersionsByDeviceRequest {
	s.IotId = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceRequest) SetCurrentPage(v int32) *ListOTAModuleVersionsByDeviceRequest {
	s.CurrentPage = &v
	return s
}

type ListOTAModuleVersionsByDeviceResponseBody struct {
	RequestId    *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                          `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Total        *int32                                         `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize     *int32                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageCount    *int32                                         `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	CurrentPage  *int32                                         `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Data         *ListOTAModuleVersionsByDeviceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s ListOTAModuleVersionsByDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOTAModuleVersionsByDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *ListOTAModuleVersionsByDeviceResponseBody) SetRequestId(v string) *ListOTAModuleVersionsByDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponseBody) SetSuccess(v bool) *ListOTAModuleVersionsByDeviceResponseBody {
	s.Success = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponseBody) SetCode(v string) *ListOTAModuleVersionsByDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponseBody) SetErrorMessage(v string) *ListOTAModuleVersionsByDeviceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponseBody) SetTotal(v int32) *ListOTAModuleVersionsByDeviceResponseBody {
	s.Total = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponseBody) SetPageSize(v int32) *ListOTAModuleVersionsByDeviceResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponseBody) SetPageCount(v int32) *ListOTAModuleVersionsByDeviceResponseBody {
	s.PageCount = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponseBody) SetCurrentPage(v int32) *ListOTAModuleVersionsByDeviceResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponseBody) SetData(v *ListOTAModuleVersionsByDeviceResponseBodyData) *ListOTAModuleVersionsByDeviceResponseBody {
	s.Data = v
	return s
}

type ListOTAModuleVersionsByDeviceResponseBodyData struct {
	SimpleOTAModuleInfo []*ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo `json:"SimpleOTAModuleInfo,omitempty" xml:"SimpleOTAModuleInfo,omitempty" type:"Repeated"`
}

func (s ListOTAModuleVersionsByDeviceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListOTAModuleVersionsByDeviceResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListOTAModuleVersionsByDeviceResponseBodyData) SetSimpleOTAModuleInfo(v []*ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo) *ListOTAModuleVersionsByDeviceResponseBodyData {
	s.SimpleOTAModuleInfo = v
	return s
}

type ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo struct {
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	ModuleVersion *string `json:"ModuleVersion,omitempty" xml:"ModuleVersion,omitempty"`
	ModuleName    *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
}

func (s ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo) String() string {
	return tea.Prettify(s)
}

func (s ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo) GoString() string {
	return s.String()
}

func (s *ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo) SetProductKey(v string) *ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo {
	s.ProductKey = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo) SetDeviceName(v string) *ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo {
	s.DeviceName = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo) SetIotId(v string) *ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo {
	s.IotId = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo) SetModuleVersion(v string) *ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo {
	s.ModuleVersion = &v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo) SetModuleName(v string) *ListOTAModuleVersionsByDeviceResponseBodyDataSimpleOTAModuleInfo {
	s.ModuleName = &v
	return s
}

type ListOTAModuleVersionsByDeviceResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListOTAModuleVersionsByDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListOTAModuleVersionsByDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOTAModuleVersionsByDeviceResponse) GoString() string {
	return s.String()
}

func (s *ListOTAModuleVersionsByDeviceResponse) SetHeaders(v map[string]*string) *ListOTAModuleVersionsByDeviceResponse {
	s.Headers = v
	return s
}

func (s *ListOTAModuleVersionsByDeviceResponse) SetBody(v *ListOTAModuleVersionsByDeviceResponseBody) *ListOTAModuleVersionsByDeviceResponse {
	s.Body = v
	return s
}

type ListOTATaskByJobRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TaskStatus    *string   `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	JobId         *string   `json:"JobId,omitempty" xml:"JobId,omitempty"`
	CurrentPage   *int32    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	DeviceNames   []*string `json:"DeviceNames,omitempty" xml:"DeviceNames,omitempty" type:"Repeated"`
}

func (s ListOTATaskByJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOTATaskByJobRequest) GoString() string {
	return s.String()
}

func (s *ListOTATaskByJobRequest) SetApiProduct(v string) *ListOTATaskByJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListOTATaskByJobRequest) SetApiRevision(v string) *ListOTATaskByJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListOTATaskByJobRequest) SetIotInstanceId(v string) *ListOTATaskByJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListOTATaskByJobRequest) SetPageSize(v int32) *ListOTATaskByJobRequest {
	s.PageSize = &v
	return s
}

func (s *ListOTATaskByJobRequest) SetTaskStatus(v string) *ListOTATaskByJobRequest {
	s.TaskStatus = &v
	return s
}

func (s *ListOTATaskByJobRequest) SetJobId(v string) *ListOTATaskByJobRequest {
	s.JobId = &v
	return s
}

func (s *ListOTATaskByJobRequest) SetCurrentPage(v int32) *ListOTATaskByJobRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListOTATaskByJobRequest) SetDeviceNames(v []*string) *ListOTATaskByJobRequest {
	s.DeviceNames = v
	return s
}

type ListOTATaskByJobResponseBody struct {
	RequestId    *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Total        *int32                            `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize     *int32                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageCount    *int32                            `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	CurrentPage  *int32                            `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Data         *ListOTATaskByJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s ListOTATaskByJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOTATaskByJobResponseBody) GoString() string {
	return s.String()
}

func (s *ListOTATaskByJobResponseBody) SetRequestId(v string) *ListOTATaskByJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOTATaskByJobResponseBody) SetSuccess(v bool) *ListOTATaskByJobResponseBody {
	s.Success = &v
	return s
}

func (s *ListOTATaskByJobResponseBody) SetCode(v string) *ListOTATaskByJobResponseBody {
	s.Code = &v
	return s
}

func (s *ListOTATaskByJobResponseBody) SetErrorMessage(v string) *ListOTATaskByJobResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListOTATaskByJobResponseBody) SetTotal(v int32) *ListOTATaskByJobResponseBody {
	s.Total = &v
	return s
}

func (s *ListOTATaskByJobResponseBody) SetPageSize(v int32) *ListOTATaskByJobResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListOTATaskByJobResponseBody) SetPageCount(v int32) *ListOTATaskByJobResponseBody {
	s.PageCount = &v
	return s
}

func (s *ListOTATaskByJobResponseBody) SetCurrentPage(v int32) *ListOTATaskByJobResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *ListOTATaskByJobResponseBody) SetData(v *ListOTATaskByJobResponseBodyData) *ListOTATaskByJobResponseBody {
	s.Data = v
	return s
}

type ListOTATaskByJobResponseBodyData struct {
	SimpleOTATaskInfo []*ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo `json:"SimpleOTATaskInfo,omitempty" xml:"SimpleOTATaskInfo,omitempty" type:"Repeated"`
}

func (s ListOTATaskByJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListOTATaskByJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListOTATaskByJobResponseBodyData) SetSimpleOTATaskInfo(v []*ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) *ListOTATaskByJobResponseBodyData {
	s.SimpleOTATaskInfo = v
	return s
}

type ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo struct {
	TaskId      *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	UtcModified *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty"`
	ProductKey  *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	FirmwareId  *string `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty"`
	TaskStatus  *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	JobId       *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	DeviceName  *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	SrcVersion  *string `json:"SrcVersion,omitempty" xml:"SrcVersion,omitempty"`
	DestVersion *string `json:"DestVersion,omitempty" xml:"DestVersion,omitempty"`
	TaskDesc    *string `json:"TaskDesc,omitempty" xml:"TaskDesc,omitempty"`
	Progress    *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	IotId       *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	UtcCreate   *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
}

func (s ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) String() string {
	return tea.Prettify(s)
}

func (s ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) GoString() string {
	return s.String()
}

func (s *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) SetTaskId(v string) *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo {
	s.TaskId = &v
	return s
}

func (s *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) SetUtcModified(v string) *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo {
	s.UtcModified = &v
	return s
}

func (s *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) SetProductKey(v string) *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo {
	s.ProductKey = &v
	return s
}

func (s *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) SetFirmwareId(v string) *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo {
	s.FirmwareId = &v
	return s
}

func (s *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) SetTaskStatus(v string) *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo {
	s.TaskStatus = &v
	return s
}

func (s *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) SetJobId(v string) *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo {
	s.JobId = &v
	return s
}

func (s *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) SetProductName(v string) *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo {
	s.ProductName = &v
	return s
}

func (s *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) SetDeviceName(v string) *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo {
	s.DeviceName = &v
	return s
}

func (s *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) SetSrcVersion(v string) *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo {
	s.SrcVersion = &v
	return s
}

func (s *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) SetDestVersion(v string) *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo {
	s.DestVersion = &v
	return s
}

func (s *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) SetTaskDesc(v string) *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo {
	s.TaskDesc = &v
	return s
}

func (s *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) SetProgress(v string) *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo {
	s.Progress = &v
	return s
}

func (s *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) SetIotId(v string) *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo {
	s.IotId = &v
	return s
}

func (s *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo) SetUtcCreate(v string) *ListOTATaskByJobResponseBodyDataSimpleOTATaskInfo {
	s.UtcCreate = &v
	return s
}

type ListOTATaskByJobResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListOTATaskByJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListOTATaskByJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOTATaskByJobResponse) GoString() string {
	return s.String()
}

func (s *ListOTATaskByJobResponse) SetHeaders(v map[string]*string) *ListOTATaskByJobResponse {
	s.Headers = v
	return s
}

func (s *ListOTATaskByJobResponse) SetBody(v *ListOTATaskByJobResponseBody) *ListOTATaskByJobResponse {
	s.Body = v
	return s
}

type ListProductByTagsRequest struct {
	ApiProduct    *string                               `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string                               `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string                               `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	CurrentPage   *int32                                `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize      *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductTag    []*ListProductByTagsRequestProductTag `json:"ProductTag,omitempty" xml:"ProductTag,omitempty" type:"Repeated"`
}

func (s ListProductByTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProductByTagsRequest) GoString() string {
	return s.String()
}

func (s *ListProductByTagsRequest) SetApiProduct(v string) *ListProductByTagsRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListProductByTagsRequest) SetApiRevision(v string) *ListProductByTagsRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListProductByTagsRequest) SetIotInstanceId(v string) *ListProductByTagsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListProductByTagsRequest) SetCurrentPage(v int32) *ListProductByTagsRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListProductByTagsRequest) SetPageSize(v int32) *ListProductByTagsRequest {
	s.PageSize = &v
	return s
}

func (s *ListProductByTagsRequest) SetProductTag(v []*ListProductByTagsRequestProductTag) *ListProductByTagsRequest {
	s.ProductTag = v
	return s
}

type ListProductByTagsRequestProductTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListProductByTagsRequestProductTag) String() string {
	return tea.Prettify(s)
}

func (s ListProductByTagsRequestProductTag) GoString() string {
	return s.String()
}

func (s *ListProductByTagsRequestProductTag) SetTagKey(v string) *ListProductByTagsRequestProductTag {
	s.TagKey = &v
	return s
}

func (s *ListProductByTagsRequestProductTag) SetTagValue(v string) *ListProductByTagsRequestProductTag {
	s.TagValue = &v
	return s
}

type ListProductByTagsResponseBody struct {
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                      `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string                                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	ProductInfos *ListProductByTagsResponseBodyProductInfos `json:"ProductInfos,omitempty" xml:"ProductInfos,omitempty" type:"Struct"`
}

func (s ListProductByTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProductByTagsResponseBody) GoString() string {
	return s.String()
}

func (s *ListProductByTagsResponseBody) SetRequestId(v string) *ListProductByTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListProductByTagsResponseBody) SetSuccess(v bool) *ListProductByTagsResponseBody {
	s.Success = &v
	return s
}

func (s *ListProductByTagsResponseBody) SetErrorMessage(v string) *ListProductByTagsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListProductByTagsResponseBody) SetCode(v string) *ListProductByTagsResponseBody {
	s.Code = &v
	return s
}

func (s *ListProductByTagsResponseBody) SetProductInfos(v *ListProductByTagsResponseBodyProductInfos) *ListProductByTagsResponseBody {
	s.ProductInfos = v
	return s
}

type ListProductByTagsResponseBodyProductInfos struct {
	ProductInfo []*ListProductByTagsResponseBodyProductInfosProductInfo `json:"ProductInfo,omitempty" xml:"ProductInfo,omitempty" type:"Repeated"`
}

func (s ListProductByTagsResponseBodyProductInfos) String() string {
	return tea.Prettify(s)
}

func (s ListProductByTagsResponseBodyProductInfos) GoString() string {
	return s.String()
}

func (s *ListProductByTagsResponseBodyProductInfos) SetProductInfo(v []*ListProductByTagsResponseBodyProductInfosProductInfo) *ListProductByTagsResponseBodyProductInfos {
	s.ProductInfo = v
	return s
}

type ListProductByTagsResponseBodyProductInfosProductInfo struct {
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	ProductKey  *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	NodeType    *int32  `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
}

func (s ListProductByTagsResponseBodyProductInfosProductInfo) String() string {
	return tea.Prettify(s)
}

func (s ListProductByTagsResponseBodyProductInfosProductInfo) GoString() string {
	return s.String()
}

func (s *ListProductByTagsResponseBodyProductInfosProductInfo) SetProductName(v string) *ListProductByTagsResponseBodyProductInfosProductInfo {
	s.ProductName = &v
	return s
}

func (s *ListProductByTagsResponseBodyProductInfosProductInfo) SetProductKey(v string) *ListProductByTagsResponseBodyProductInfosProductInfo {
	s.ProductKey = &v
	return s
}

func (s *ListProductByTagsResponseBodyProductInfosProductInfo) SetCreateTime(v int64) *ListProductByTagsResponseBodyProductInfosProductInfo {
	s.CreateTime = &v
	return s
}

func (s *ListProductByTagsResponseBodyProductInfosProductInfo) SetDescription(v string) *ListProductByTagsResponseBodyProductInfosProductInfo {
	s.Description = &v
	return s
}

func (s *ListProductByTagsResponseBodyProductInfosProductInfo) SetNodeType(v int32) *ListProductByTagsResponseBodyProductInfosProductInfo {
	s.NodeType = &v
	return s
}

type ListProductByTagsResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListProductByTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListProductByTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProductByTagsResponse) GoString() string {
	return s.String()
}

func (s *ListProductByTagsResponse) SetHeaders(v map[string]*string) *ListProductByTagsResponse {
	s.Headers = v
	return s
}

func (s *ListProductByTagsResponse) SetBody(v *ListProductByTagsResponseBody) *ListProductByTagsResponse {
	s.Body = v
	return s
}

type ListProductTagsRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s ListProductTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProductTagsRequest) GoString() string {
	return s.String()
}

func (s *ListProductTagsRequest) SetApiProduct(v string) *ListProductTagsRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListProductTagsRequest) SetApiRevision(v string) *ListProductTagsRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListProductTagsRequest) SetIotInstanceId(v string) *ListProductTagsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListProductTagsRequest) SetProductKey(v string) *ListProductTagsRequest {
	s.ProductKey = &v
	return s
}

func (s *ListProductTagsRequest) SetRealTenantId(v string) *ListProductTagsRequest {
	s.RealTenantId = &v
	return s
}

func (s *ListProductTagsRequest) SetRealTripartiteKey(v string) *ListProductTagsRequest {
	s.RealTripartiteKey = &v
	return s
}

type ListProductTagsResponseBody struct {
	RequestId    *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data         *ListProductTagsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s ListProductTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProductTagsResponseBody) GoString() string {
	return s.String()
}

func (s *ListProductTagsResponseBody) SetRequestId(v string) *ListProductTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListProductTagsResponseBody) SetSuccess(v bool) *ListProductTagsResponseBody {
	s.Success = &v
	return s
}

func (s *ListProductTagsResponseBody) SetErrorMessage(v string) *ListProductTagsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListProductTagsResponseBody) SetCode(v string) *ListProductTagsResponseBody {
	s.Code = &v
	return s
}

func (s *ListProductTagsResponseBody) SetData(v *ListProductTagsResponseBodyData) *ListProductTagsResponseBody {
	s.Data = v
	return s
}

type ListProductTagsResponseBodyData struct {
	ProductTag []*ListProductTagsResponseBodyDataProductTag `json:"ProductTag,omitempty" xml:"ProductTag,omitempty" type:"Repeated"`
}

func (s ListProductTagsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListProductTagsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListProductTagsResponseBodyData) SetProductTag(v []*ListProductTagsResponseBodyDataProductTag) *ListProductTagsResponseBodyData {
	s.ProductTag = v
	return s
}

type ListProductTagsResponseBodyDataProductTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListProductTagsResponseBodyDataProductTag) String() string {
	return tea.Prettify(s)
}

func (s ListProductTagsResponseBodyDataProductTag) GoString() string {
	return s.String()
}

func (s *ListProductTagsResponseBodyDataProductTag) SetTagKey(v string) *ListProductTagsResponseBodyDataProductTag {
	s.TagKey = &v
	return s
}

func (s *ListProductTagsResponseBodyDataProductTag) SetTagValue(v string) *ListProductTagsResponseBodyDataProductTag {
	s.TagValue = &v
	return s
}

type ListProductTagsResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListProductTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListProductTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProductTagsResponse) GoString() string {
	return s.String()
}

func (s *ListProductTagsResponse) SetHeaders(v map[string]*string) *ListProductTagsResponse {
	s.Headers = v
	return s
}

func (s *ListProductTagsResponse) SetBody(v *ListProductTagsResponseBody) *ListProductTagsResponse {
	s.Body = v
	return s
}

type ListRuleRequest struct {
	ApiProduct      *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision     *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	CurrentPage     *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchName      *string `json:"SearchName,omitempty" xml:"SearchName,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRuleRequest) GoString() string {
	return s.String()
}

func (s *ListRuleRequest) SetApiProduct(v string) *ListRuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListRuleRequest) SetApiRevision(v string) *ListRuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListRuleRequest) SetIotInstanceId(v string) *ListRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListRuleRequest) SetCurrentPage(v int32) *ListRuleRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListRuleRequest) SetPageSize(v int32) *ListRuleRequest {
	s.PageSize = &v
	return s
}

func (s *ListRuleRequest) SetSearchName(v string) *ListRuleRequest {
	s.SearchName = &v
	return s
}

func (s *ListRuleRequest) SetResourceGroupId(v string) *ListRuleRequest {
	s.ResourceGroupId = &v
	return s
}

type ListRuleResponseBody struct {
	RequestId    *string                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                     `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                   `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Page         *int32                    `json:"Page,omitempty" xml:"Page,omitempty"`
	Total        *int32                    `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize     *int32                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Data         *ListRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s ListRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ListRuleResponseBody) SetRequestId(v string) *ListRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRuleResponseBody) SetSuccess(v bool) *ListRuleResponseBody {
	s.Success = &v
	return s
}

func (s *ListRuleResponseBody) SetCode(v string) *ListRuleResponseBody {
	s.Code = &v
	return s
}

func (s *ListRuleResponseBody) SetErrorMessage(v string) *ListRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListRuleResponseBody) SetPage(v int32) *ListRuleResponseBody {
	s.Page = &v
	return s
}

func (s *ListRuleResponseBody) SetTotal(v int32) *ListRuleResponseBody {
	s.Total = &v
	return s
}

func (s *ListRuleResponseBody) SetPageSize(v int32) *ListRuleResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListRuleResponseBody) SetData(v *ListRuleResponseBodyData) *ListRuleResponseBody {
	s.Data = v
	return s
}

type ListRuleResponseBodyData struct {
	RuleInfo []*ListRuleResponseBodyDataRuleInfo `json:"RuleInfo,omitempty" xml:"RuleInfo,omitempty" type:"Repeated"`
}

func (s ListRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListRuleResponseBodyData) SetRuleInfo(v []*ListRuleResponseBodyDataRuleInfo) *ListRuleResponseBodyData {
	s.RuleInfo = v
	return s
}

type ListRuleResponseBodyDataRuleInfo struct {
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Select       *string `json:"Select,omitempty" xml:"Select,omitempty"`
	Topic        *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	ShortTopic   *string `json:"ShortTopic,omitempty" xml:"ShortTopic,omitempty"`
	Where        *string `json:"Where,omitempty" xml:"Where,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	CreateUserId *int64  `json:"CreateUserId,omitempty" xml:"CreateUserId,omitempty"`
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	DataType     *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	RuleDesc     *string `json:"RuleDesc,omitempty" xml:"RuleDesc,omitempty"`
	Created      *string `json:"Created,omitempty" xml:"Created,omitempty"`
	UtcCreated   *string `json:"UtcCreated,omitempty" xml:"UtcCreated,omitempty"`
	Modified     *string `json:"Modified,omitempty" xml:"Modified,omitempty"`
	UtcModified  *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty"`
}

func (s ListRuleResponseBodyDataRuleInfo) String() string {
	return tea.Prettify(s)
}

func (s ListRuleResponseBodyDataRuleInfo) GoString() string {
	return s.String()
}

func (s *ListRuleResponseBodyDataRuleInfo) SetId(v int64) *ListRuleResponseBodyDataRuleInfo {
	s.Id = &v
	return s
}

func (s *ListRuleResponseBodyDataRuleInfo) SetSelect(v string) *ListRuleResponseBodyDataRuleInfo {
	s.Select = &v
	return s
}

func (s *ListRuleResponseBodyDataRuleInfo) SetTopic(v string) *ListRuleResponseBodyDataRuleInfo {
	s.Topic = &v
	return s
}

func (s *ListRuleResponseBodyDataRuleInfo) SetShortTopic(v string) *ListRuleResponseBodyDataRuleInfo {
	s.ShortTopic = &v
	return s
}

func (s *ListRuleResponseBodyDataRuleInfo) SetWhere(v string) *ListRuleResponseBodyDataRuleInfo {
	s.Where = &v
	return s
}

func (s *ListRuleResponseBodyDataRuleInfo) SetStatus(v string) *ListRuleResponseBodyDataRuleInfo {
	s.Status = &v
	return s
}

func (s *ListRuleResponseBodyDataRuleInfo) SetCreateUserId(v int64) *ListRuleResponseBodyDataRuleInfo {
	s.CreateUserId = &v
	return s
}

func (s *ListRuleResponseBodyDataRuleInfo) SetProductKey(v string) *ListRuleResponseBodyDataRuleInfo {
	s.ProductKey = &v
	return s
}

func (s *ListRuleResponseBodyDataRuleInfo) SetName(v string) *ListRuleResponseBodyDataRuleInfo {
	s.Name = &v
	return s
}

func (s *ListRuleResponseBodyDataRuleInfo) SetDataType(v string) *ListRuleResponseBodyDataRuleInfo {
	s.DataType = &v
	return s
}

func (s *ListRuleResponseBodyDataRuleInfo) SetRuleDesc(v string) *ListRuleResponseBodyDataRuleInfo {
	s.RuleDesc = &v
	return s
}

func (s *ListRuleResponseBodyDataRuleInfo) SetCreated(v string) *ListRuleResponseBodyDataRuleInfo {
	s.Created = &v
	return s
}

func (s *ListRuleResponseBodyDataRuleInfo) SetUtcCreated(v string) *ListRuleResponseBodyDataRuleInfo {
	s.UtcCreated = &v
	return s
}

func (s *ListRuleResponseBodyDataRuleInfo) SetModified(v string) *ListRuleResponseBodyDataRuleInfo {
	s.Modified = &v
	return s
}

func (s *ListRuleResponseBodyDataRuleInfo) SetUtcModified(v string) *ListRuleResponseBodyDataRuleInfo {
	s.UtcModified = &v
	return s
}

type ListRuleResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRuleResponse) GoString() string {
	return s.String()
}

func (s *ListRuleResponse) SetHeaders(v map[string]*string) *ListRuleResponse {
	s.Headers = v
	return s
}

func (s *ListRuleResponse) SetBody(v *ListRuleResponseBody) *ListRuleResponse {
	s.Body = v
	return s
}

type ListRuleActionsRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s ListRuleActionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRuleActionsRequest) GoString() string {
	return s.String()
}

func (s *ListRuleActionsRequest) SetApiProduct(v string) *ListRuleActionsRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListRuleActionsRequest) SetApiRevision(v string) *ListRuleActionsRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListRuleActionsRequest) SetIotInstanceId(v string) *ListRuleActionsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListRuleActionsRequest) SetRuleId(v int64) *ListRuleActionsRequest {
	s.RuleId = &v
	return s
}

type ListRuleActionsResponseBody struct {
	RequestId      *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                      `json:"Success,omitempty" xml:"Success,omitempty"`
	Code           *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage   *string                                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	RuleActionList *ListRuleActionsResponseBodyRuleActionList `json:"RuleActionList,omitempty" xml:"RuleActionList,omitempty" type:"Struct"`
}

func (s ListRuleActionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRuleActionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListRuleActionsResponseBody) SetRequestId(v string) *ListRuleActionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRuleActionsResponseBody) SetSuccess(v bool) *ListRuleActionsResponseBody {
	s.Success = &v
	return s
}

func (s *ListRuleActionsResponseBody) SetCode(v string) *ListRuleActionsResponseBody {
	s.Code = &v
	return s
}

func (s *ListRuleActionsResponseBody) SetErrorMessage(v string) *ListRuleActionsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListRuleActionsResponseBody) SetRuleActionList(v *ListRuleActionsResponseBodyRuleActionList) *ListRuleActionsResponseBody {
	s.RuleActionList = v
	return s
}

type ListRuleActionsResponseBodyRuleActionList struct {
	RuleActionInfo []*ListRuleActionsResponseBodyRuleActionListRuleActionInfo `json:"RuleActionInfo,omitempty" xml:"RuleActionInfo,omitempty" type:"Repeated"`
}

func (s ListRuleActionsResponseBodyRuleActionList) String() string {
	return tea.Prettify(s)
}

func (s ListRuleActionsResponseBodyRuleActionList) GoString() string {
	return s.String()
}

func (s *ListRuleActionsResponseBodyRuleActionList) SetRuleActionInfo(v []*ListRuleActionsResponseBodyRuleActionListRuleActionInfo) *ListRuleActionsResponseBodyRuleActionList {
	s.RuleActionInfo = v
	return s
}

type ListRuleActionsResponseBodyRuleActionListRuleActionInfo struct {
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	RuleId          *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Configuration   *string `json:"Configuration,omitempty" xml:"Configuration,omitempty"`
	ErrorActionFlag *bool   `json:"ErrorActionFlag,omitempty" xml:"ErrorActionFlag,omitempty"`
}

func (s ListRuleActionsResponseBodyRuleActionListRuleActionInfo) String() string {
	return tea.Prettify(s)
}

func (s ListRuleActionsResponseBodyRuleActionListRuleActionInfo) GoString() string {
	return s.String()
}

func (s *ListRuleActionsResponseBodyRuleActionListRuleActionInfo) SetId(v int64) *ListRuleActionsResponseBodyRuleActionListRuleActionInfo {
	s.Id = &v
	return s
}

func (s *ListRuleActionsResponseBodyRuleActionListRuleActionInfo) SetRuleId(v int64) *ListRuleActionsResponseBodyRuleActionListRuleActionInfo {
	s.RuleId = &v
	return s
}

func (s *ListRuleActionsResponseBodyRuleActionListRuleActionInfo) SetType(v string) *ListRuleActionsResponseBodyRuleActionListRuleActionInfo {
	s.Type = &v
	return s
}

func (s *ListRuleActionsResponseBodyRuleActionListRuleActionInfo) SetConfiguration(v string) *ListRuleActionsResponseBodyRuleActionListRuleActionInfo {
	s.Configuration = &v
	return s
}

func (s *ListRuleActionsResponseBodyRuleActionListRuleActionInfo) SetErrorActionFlag(v bool) *ListRuleActionsResponseBodyRuleActionListRuleActionInfo {
	s.ErrorActionFlag = &v
	return s
}

type ListRuleActionsResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListRuleActionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRuleActionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRuleActionsResponse) GoString() string {
	return s.String()
}

func (s *ListRuleActionsResponse) SetHeaders(v map[string]*string) *ListRuleActionsResponse {
	s.Headers = v
	return s
}

func (s *ListRuleActionsResponse) SetBody(v *ListRuleActionsResponseBody) *ListRuleActionsResponse {
	s.Body = v
	return s
}

type ListTaskRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Limit         *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	NextToken     *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	Device        *string `json:"Device,omitempty" xml:"Device,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTaskRequest) GoString() string {
	return s.String()
}

func (s *ListTaskRequest) SetApiProduct(v string) *ListTaskRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListTaskRequest) SetApiRevision(v string) *ListTaskRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListTaskRequest) SetIotInstanceId(v string) *ListTaskRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListTaskRequest) SetLimit(v int32) *ListTaskRequest {
	s.Limit = &v
	return s
}

func (s *ListTaskRequest) SetJobId(v string) *ListTaskRequest {
	s.JobId = &v
	return s
}

func (s *ListTaskRequest) SetNextToken(v string) *ListTaskRequest {
	s.NextToken = &v
	return s
}

func (s *ListTaskRequest) SetDevice(v string) *ListTaskRequest {
	s.Device = &v
	return s
}

func (s *ListTaskRequest) SetStatus(v string) *ListTaskRequest {
	s.Status = &v
	return s
}

type ListTaskResponseBody struct {
	RequestId    *string                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                     `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                   `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NextToken    *string                   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	Data         *ListTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s ListTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTaskResponseBody) GoString() string {
	return s.String()
}

func (s *ListTaskResponseBody) SetRequestId(v string) *ListTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTaskResponseBody) SetSuccess(v bool) *ListTaskResponseBody {
	s.Success = &v
	return s
}

func (s *ListTaskResponseBody) SetCode(v string) *ListTaskResponseBody {
	s.Code = &v
	return s
}

func (s *ListTaskResponseBody) SetErrorMessage(v string) *ListTaskResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListTaskResponseBody) SetNextToken(v string) *ListTaskResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTaskResponseBody) SetData(v *ListTaskResponseBodyData) *ListTaskResponseBody {
	s.Data = v
	return s
}

type ListTaskResponseBodyData struct {
	Data []*ListTaskResponseBodyDataData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListTaskResponseBodyData) SetData(v []*ListTaskResponseBodyDataData) *ListTaskResponseBodyData {
	s.Data = v
	return s
}

type ListTaskResponseBodyDataData struct {
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobName      *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	TaskId       *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId        *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	UtcQueueTime *string `json:"UtcQueueTime,omitempty" xml:"UtcQueueTime,omitempty"`
	UtcModified  *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListTaskResponseBodyDataData) String() string {
	return tea.Prettify(s)
}

func (s ListTaskResponseBodyDataData) GoString() string {
	return s.String()
}

func (s *ListTaskResponseBodyDataData) SetJobId(v string) *ListTaskResponseBodyDataData {
	s.JobId = &v
	return s
}

func (s *ListTaskResponseBodyDataData) SetJobName(v string) *ListTaskResponseBodyDataData {
	s.JobName = &v
	return s
}

func (s *ListTaskResponseBodyDataData) SetTaskId(v string) *ListTaskResponseBodyDataData {
	s.TaskId = &v
	return s
}

func (s *ListTaskResponseBodyDataData) SetProductKey(v string) *ListTaskResponseBodyDataData {
	s.ProductKey = &v
	return s
}

func (s *ListTaskResponseBodyDataData) SetDeviceName(v string) *ListTaskResponseBodyDataData {
	s.DeviceName = &v
	return s
}

func (s *ListTaskResponseBodyDataData) SetIotId(v string) *ListTaskResponseBodyDataData {
	s.IotId = &v
	return s
}

func (s *ListTaskResponseBodyDataData) SetProgress(v string) *ListTaskResponseBodyDataData {
	s.Progress = &v
	return s
}

func (s *ListTaskResponseBodyDataData) SetUtcQueueTime(v string) *ListTaskResponseBodyDataData {
	s.UtcQueueTime = &v
	return s
}

func (s *ListTaskResponseBodyDataData) SetUtcModified(v string) *ListTaskResponseBodyDataData {
	s.UtcModified = &v
	return s
}

func (s *ListTaskResponseBodyDataData) SetStatus(v string) *ListTaskResponseBodyDataData {
	s.Status = &v
	return s
}

type ListTaskResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTaskResponse) GoString() string {
	return s.String()
}

func (s *ListTaskResponse) SetHeaders(v map[string]*string) *ListTaskResponse {
	s.Headers = v
	return s
}

func (s *ListTaskResponse) SetBody(v *ListTaskResponseBody) *ListTaskResponse {
	s.Body = v
	return s
}

type ListTaskByPageRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNo        *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Device        *string `json:"Device,omitempty" xml:"Device,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	JobName       *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
}

func (s ListTaskByPageRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTaskByPageRequest) GoString() string {
	return s.String()
}

func (s *ListTaskByPageRequest) SetApiProduct(v string) *ListTaskByPageRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListTaskByPageRequest) SetApiRevision(v string) *ListTaskByPageRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListTaskByPageRequest) SetIotInstanceId(v string) *ListTaskByPageRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListTaskByPageRequest) SetPageSize(v string) *ListTaskByPageRequest {
	s.PageSize = &v
	return s
}

func (s *ListTaskByPageRequest) SetPageNo(v string) *ListTaskByPageRequest {
	s.PageNo = &v
	return s
}

func (s *ListTaskByPageRequest) SetJobId(v string) *ListTaskByPageRequest {
	s.JobId = &v
	return s
}

func (s *ListTaskByPageRequest) SetDevice(v string) *ListTaskByPageRequest {
	s.Device = &v
	return s
}

func (s *ListTaskByPageRequest) SetStatus(v string) *ListTaskByPageRequest {
	s.Status = &v
	return s
}

func (s *ListTaskByPageRequest) SetDeviceName(v string) *ListTaskByPageRequest {
	s.DeviceName = &v
	return s
}

func (s *ListTaskByPageRequest) SetJobName(v string) *ListTaskByPageRequest {
	s.JobName = &v
	return s
}

type ListTaskByPageResponseBody struct {
	RequestId    *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                           `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Total        *int32                          `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize     *int32                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageCount    *int32                          `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	Page         *int32                          `json:"Page,omitempty" xml:"Page,omitempty"`
	Data         *ListTaskByPageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s ListTaskByPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTaskByPageResponseBody) GoString() string {
	return s.String()
}

func (s *ListTaskByPageResponseBody) SetRequestId(v string) *ListTaskByPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTaskByPageResponseBody) SetSuccess(v bool) *ListTaskByPageResponseBody {
	s.Success = &v
	return s
}

func (s *ListTaskByPageResponseBody) SetCode(v string) *ListTaskByPageResponseBody {
	s.Code = &v
	return s
}

func (s *ListTaskByPageResponseBody) SetErrorMessage(v string) *ListTaskByPageResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListTaskByPageResponseBody) SetTotal(v int32) *ListTaskByPageResponseBody {
	s.Total = &v
	return s
}

func (s *ListTaskByPageResponseBody) SetPageSize(v int32) *ListTaskByPageResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListTaskByPageResponseBody) SetPageCount(v int32) *ListTaskByPageResponseBody {
	s.PageCount = &v
	return s
}

func (s *ListTaskByPageResponseBody) SetPage(v int32) *ListTaskByPageResponseBody {
	s.Page = &v
	return s
}

func (s *ListTaskByPageResponseBody) SetData(v *ListTaskByPageResponseBodyData) *ListTaskByPageResponseBody {
	s.Data = v
	return s
}

type ListTaskByPageResponseBodyData struct {
	Data []*ListTaskByPageResponseBodyDataData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
}

func (s ListTaskByPageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListTaskByPageResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListTaskByPageResponseBodyData) SetData(v []*ListTaskByPageResponseBodyDataData) *ListTaskByPageResponseBodyData {
	s.Data = v
	return s
}

type ListTaskByPageResponseBodyDataData struct {
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobName      *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	TaskId       *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId        *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	Progress     *int32  `json:"Progress,omitempty" xml:"Progress,omitempty"`
	UtcQueueTime *string `json:"UtcQueueTime,omitempty" xml:"UtcQueueTime,omitempty"`
	UtcModified  *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty"`
	StatusDetail *string `json:"StatusDetail,omitempty" xml:"StatusDetail,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ProductName  *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
}

func (s ListTaskByPageResponseBodyDataData) String() string {
	return tea.Prettify(s)
}

func (s ListTaskByPageResponseBodyDataData) GoString() string {
	return s.String()
}

func (s *ListTaskByPageResponseBodyDataData) SetJobId(v string) *ListTaskByPageResponseBodyDataData {
	s.JobId = &v
	return s
}

func (s *ListTaskByPageResponseBodyDataData) SetJobName(v string) *ListTaskByPageResponseBodyDataData {
	s.JobName = &v
	return s
}

func (s *ListTaskByPageResponseBodyDataData) SetTaskId(v string) *ListTaskByPageResponseBodyDataData {
	s.TaskId = &v
	return s
}

func (s *ListTaskByPageResponseBodyDataData) SetProductKey(v string) *ListTaskByPageResponseBodyDataData {
	s.ProductKey = &v
	return s
}

func (s *ListTaskByPageResponseBodyDataData) SetDeviceName(v string) *ListTaskByPageResponseBodyDataData {
	s.DeviceName = &v
	return s
}

func (s *ListTaskByPageResponseBodyDataData) SetIotId(v string) *ListTaskByPageResponseBodyDataData {
	s.IotId = &v
	return s
}

func (s *ListTaskByPageResponseBodyDataData) SetProgress(v int32) *ListTaskByPageResponseBodyDataData {
	s.Progress = &v
	return s
}

func (s *ListTaskByPageResponseBodyDataData) SetUtcQueueTime(v string) *ListTaskByPageResponseBodyDataData {
	s.UtcQueueTime = &v
	return s
}

func (s *ListTaskByPageResponseBodyDataData) SetUtcModified(v string) *ListTaskByPageResponseBodyDataData {
	s.UtcModified = &v
	return s
}

func (s *ListTaskByPageResponseBodyDataData) SetStatusDetail(v string) *ListTaskByPageResponseBodyDataData {
	s.StatusDetail = &v
	return s
}

func (s *ListTaskByPageResponseBodyDataData) SetStatus(v string) *ListTaskByPageResponseBodyDataData {
	s.Status = &v
	return s
}

func (s *ListTaskByPageResponseBodyDataData) SetProductName(v string) *ListTaskByPageResponseBodyDataData {
	s.ProductName = &v
	return s
}

type ListTaskByPageResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListTaskByPageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTaskByPageResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTaskByPageResponse) GoString() string {
	return s.String()
}

func (s *ListTaskByPageResponse) SetHeaders(v map[string]*string) *ListTaskByPageResponse {
	s.Headers = v
	return s
}

func (s *ListTaskByPageResponse) SetBody(v *ListTaskByPageResponseBody) *ListTaskByPageResponse {
	s.Body = v
	return s
}

type ListThingModelVersionRequest struct {
	ApiProduct      *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision     *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
}

func (s ListThingModelVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListThingModelVersionRequest) GoString() string {
	return s.String()
}

func (s *ListThingModelVersionRequest) SetApiProduct(v string) *ListThingModelVersionRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListThingModelVersionRequest) SetApiRevision(v string) *ListThingModelVersionRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListThingModelVersionRequest) SetIotInstanceId(v string) *ListThingModelVersionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListThingModelVersionRequest) SetResourceGroupId(v string) *ListThingModelVersionRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListThingModelVersionRequest) SetProductKey(v string) *ListThingModelVersionRequest {
	s.ProductKey = &v
	return s
}

type ListThingModelVersionResponseBody struct {
	RequestId    *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *ListThingModelVersionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s ListThingModelVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListThingModelVersionResponseBody) GoString() string {
	return s.String()
}

func (s *ListThingModelVersionResponseBody) SetRequestId(v string) *ListThingModelVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListThingModelVersionResponseBody) SetSuccess(v bool) *ListThingModelVersionResponseBody {
	s.Success = &v
	return s
}

func (s *ListThingModelVersionResponseBody) SetCode(v string) *ListThingModelVersionResponseBody {
	s.Code = &v
	return s
}

func (s *ListThingModelVersionResponseBody) SetErrorMessage(v string) *ListThingModelVersionResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListThingModelVersionResponseBody) SetData(v *ListThingModelVersionResponseBodyData) *ListThingModelVersionResponseBody {
	s.Data = v
	return s
}

type ListThingModelVersionResponseBodyData struct {
	ModelVersions []*ListThingModelVersionResponseBodyDataModelVersions `json:"ModelVersions,omitempty" xml:"ModelVersions,omitempty" type:"Repeated"`
}

func (s ListThingModelVersionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListThingModelVersionResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListThingModelVersionResponseBodyData) SetModelVersions(v []*ListThingModelVersionResponseBodyDataModelVersions) *ListThingModelVersionResponseBodyData {
	s.ModelVersions = v
	return s
}

type ListThingModelVersionResponseBodyDataModelVersions struct {
	ModelVersion *string `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtCreate    *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
}

func (s ListThingModelVersionResponseBodyDataModelVersions) String() string {
	return tea.Prettify(s)
}

func (s ListThingModelVersionResponseBodyDataModelVersions) GoString() string {
	return s.String()
}

func (s *ListThingModelVersionResponseBodyDataModelVersions) SetModelVersion(v string) *ListThingModelVersionResponseBodyDataModelVersions {
	s.ModelVersion = &v
	return s
}

func (s *ListThingModelVersionResponseBodyDataModelVersions) SetDescription(v string) *ListThingModelVersionResponseBodyDataModelVersions {
	s.Description = &v
	return s
}

func (s *ListThingModelVersionResponseBodyDataModelVersions) SetGmtCreate(v int64) *ListThingModelVersionResponseBodyDataModelVersions {
	s.GmtCreate = &v
	return s
}

type ListThingModelVersionResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListThingModelVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListThingModelVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListThingModelVersionResponse) GoString() string {
	return s.String()
}

func (s *ListThingModelVersionResponse) SetHeaders(v map[string]*string) *ListThingModelVersionResponse {
	s.Headers = v
	return s
}

func (s *ListThingModelVersionResponse) SetBody(v *ListThingModelVersionResponseBody) *ListThingModelVersionResponse {
	s.Body = v
	return s
}

type ListThingTemplatesRequest struct {
	ApiProduct      *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision     *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListThingTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListThingTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListThingTemplatesRequest) SetApiProduct(v string) *ListThingTemplatesRequest {
	s.ApiProduct = &v
	return s
}

func (s *ListThingTemplatesRequest) SetApiRevision(v string) *ListThingTemplatesRequest {
	s.ApiRevision = &v
	return s
}

func (s *ListThingTemplatesRequest) SetIotInstanceId(v string) *ListThingTemplatesRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ListThingTemplatesRequest) SetResourceGroupId(v string) *ListThingTemplatesRequest {
	s.ResourceGroupId = &v
	return s
}

type ListThingTemplatesResponseBody struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         []*ListThingTemplatesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
}

func (s ListThingTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListThingTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListThingTemplatesResponseBody) SetRequestId(v string) *ListThingTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListThingTemplatesResponseBody) SetSuccess(v bool) *ListThingTemplatesResponseBody {
	s.Success = &v
	return s
}

func (s *ListThingTemplatesResponseBody) SetCode(v string) *ListThingTemplatesResponseBody {
	s.Code = &v
	return s
}

func (s *ListThingTemplatesResponseBody) SetErrorMessage(v string) *ListThingTemplatesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListThingTemplatesResponseBody) SetData(v []*ListThingTemplatesResponseBodyData) *ListThingTemplatesResponseBody {
	s.Data = v
	return s
}

type ListThingTemplatesResponseBodyData struct {
	CategoryKey  *string `json:"CategoryKey,omitempty" xml:"CategoryKey,omitempty"`
	CategoryName *string `json:"CategoryName,omitempty" xml:"CategoryName,omitempty"`
}

func (s ListThingTemplatesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListThingTemplatesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListThingTemplatesResponseBodyData) SetCategoryKey(v string) *ListThingTemplatesResponseBodyData {
	s.CategoryKey = &v
	return s
}

func (s *ListThingTemplatesResponseBodyData) SetCategoryName(v string) *ListThingTemplatesResponseBodyData {
	s.CategoryName = &v
	return s
}

type ListThingTemplatesResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListThingTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListThingTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListThingTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListThingTemplatesResponse) SetHeaders(v map[string]*string) *ListThingTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListThingTemplatesResponse) SetBody(v *ListThingTemplatesResponseBody) *ListThingTemplatesResponse {
	s.Body = v
	return s
}

type NotifyAddThingTopoRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DeviceListStr *string `json:"DeviceListStr,omitempty" xml:"DeviceListStr,omitempty"`
	GwIotId       *string `json:"GwIotId,omitempty" xml:"GwIotId,omitempty"`
	GwProductKey  *string `json:"GwProductKey,omitempty" xml:"GwProductKey,omitempty"`
	GwDeviceName  *string `json:"GwDeviceName,omitempty" xml:"GwDeviceName,omitempty"`
}

func (s NotifyAddThingTopoRequest) String() string {
	return tea.Prettify(s)
}

func (s NotifyAddThingTopoRequest) GoString() string {
	return s.String()
}

func (s *NotifyAddThingTopoRequest) SetApiProduct(v string) *NotifyAddThingTopoRequest {
	s.ApiProduct = &v
	return s
}

func (s *NotifyAddThingTopoRequest) SetApiRevision(v string) *NotifyAddThingTopoRequest {
	s.ApiRevision = &v
	return s
}

func (s *NotifyAddThingTopoRequest) SetIotInstanceId(v string) *NotifyAddThingTopoRequest {
	s.IotInstanceId = &v
	return s
}

func (s *NotifyAddThingTopoRequest) SetDeviceListStr(v string) *NotifyAddThingTopoRequest {
	s.DeviceListStr = &v
	return s
}

func (s *NotifyAddThingTopoRequest) SetGwIotId(v string) *NotifyAddThingTopoRequest {
	s.GwIotId = &v
	return s
}

func (s *NotifyAddThingTopoRequest) SetGwProductKey(v string) *NotifyAddThingTopoRequest {
	s.GwProductKey = &v
	return s
}

func (s *NotifyAddThingTopoRequest) SetGwDeviceName(v string) *NotifyAddThingTopoRequest {
	s.GwDeviceName = &v
	return s
}

type NotifyAddThingTopoResponseBody struct {
	RequestId    *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data         *NotifyAddThingTopoResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s NotifyAddThingTopoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s NotifyAddThingTopoResponseBody) GoString() string {
	return s.String()
}

func (s *NotifyAddThingTopoResponseBody) SetRequestId(v string) *NotifyAddThingTopoResponseBody {
	s.RequestId = &v
	return s
}

func (s *NotifyAddThingTopoResponseBody) SetSuccess(v bool) *NotifyAddThingTopoResponseBody {
	s.Success = &v
	return s
}

func (s *NotifyAddThingTopoResponseBody) SetErrorMessage(v string) *NotifyAddThingTopoResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *NotifyAddThingTopoResponseBody) SetCode(v string) *NotifyAddThingTopoResponseBody {
	s.Code = &v
	return s
}

func (s *NotifyAddThingTopoResponseBody) SetData(v *NotifyAddThingTopoResponseBodyData) *NotifyAddThingTopoResponseBody {
	s.Data = v
	return s
}

type NotifyAddThingTopoResponseBodyData struct {
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s NotifyAddThingTopoResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s NotifyAddThingTopoResponseBodyData) GoString() string {
	return s.String()
}

func (s *NotifyAddThingTopoResponseBodyData) SetMessageId(v string) *NotifyAddThingTopoResponseBodyData {
	s.MessageId = &v
	return s
}

type NotifyAddThingTopoResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *NotifyAddThingTopoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s NotifyAddThingTopoResponse) String() string {
	return tea.Prettify(s)
}

func (s NotifyAddThingTopoResponse) GoString() string {
	return s.String()
}

func (s *NotifyAddThingTopoResponse) SetHeaders(v map[string]*string) *NotifyAddThingTopoResponse {
	s.Headers = v
	return s
}

func (s *NotifyAddThingTopoResponse) SetBody(v *NotifyAddThingTopoResponseBody) *NotifyAddThingTopoResponse {
	s.Body = v
	return s
}

type OpenIotServiceRequest struct {
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s OpenIotServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenIotServiceRequest) GoString() string {
	return s.String()
}

func (s *OpenIotServiceRequest) SetOwnerId(v int64) *OpenIotServiceRequest {
	s.OwnerId = &v
	return s
}

type OpenIotServiceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OrderId   *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s OpenIotServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenIotServiceResponseBody) GoString() string {
	return s.String()
}

func (s *OpenIotServiceResponseBody) SetRequestId(v string) *OpenIotServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *OpenIotServiceResponseBody) SetOrderId(v string) *OpenIotServiceResponseBody {
	s.OrderId = &v
	return s
}

type OpenIotServiceResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *OpenIotServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OpenIotServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenIotServiceResponse) GoString() string {
	return s.String()
}

func (s *OpenIotServiceResponse) SetHeaders(v map[string]*string) *OpenIotServiceResponse {
	s.Headers = v
	return s
}

func (s *OpenIotServiceResponse) SetBody(v *OpenIotServiceResponseBody) *OpenIotServiceResponse {
	s.Body = v
	return s
}

type PubRequest struct {
	ApiProduct      *string               `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision     *string               `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId   *string               `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey      *string               `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Qos             *int32                `json:"Qos,omitempty" xml:"Qos,omitempty"`
	TopicFullName   *string               `json:"TopicFullName,omitempty" xml:"TopicFullName,omitempty"`
	MessageContent  *string               `json:"MessageContent,omitempty" xml:"MessageContent,omitempty"`
	ResponseTopic   *string               `json:"ResponseTopic,omitempty" xml:"ResponseTopic,omitempty"`
	CorrelationData *string               `json:"CorrelationData,omitempty" xml:"CorrelationData,omitempty"`
	UserProp        []*PubRequestUserProp `json:"UserProp,omitempty" xml:"UserProp,omitempty" type:"Repeated"`
}

func (s PubRequest) String() string {
	return tea.Prettify(s)
}

func (s PubRequest) GoString() string {
	return s.String()
}

func (s *PubRequest) SetApiProduct(v string) *PubRequest {
	s.ApiProduct = &v
	return s
}

func (s *PubRequest) SetApiRevision(v string) *PubRequest {
	s.ApiRevision = &v
	return s
}

func (s *PubRequest) SetIotInstanceId(v string) *PubRequest {
	s.IotInstanceId = &v
	return s
}

func (s *PubRequest) SetProductKey(v string) *PubRequest {
	s.ProductKey = &v
	return s
}

func (s *PubRequest) SetQos(v int32) *PubRequest {
	s.Qos = &v
	return s
}

func (s *PubRequest) SetTopicFullName(v string) *PubRequest {
	s.TopicFullName = &v
	return s
}

func (s *PubRequest) SetMessageContent(v string) *PubRequest {
	s.MessageContent = &v
	return s
}

func (s *PubRequest) SetResponseTopic(v string) *PubRequest {
	s.ResponseTopic = &v
	return s
}

func (s *PubRequest) SetCorrelationData(v string) *PubRequest {
	s.CorrelationData = &v
	return s
}

func (s *PubRequest) SetUserProp(v []*PubRequestUserProp) *PubRequest {
	s.UserProp = v
	return s
}

type PubRequestUserProp struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s PubRequestUserProp) String() string {
	return tea.Prettify(s)
}

func (s PubRequestUserProp) GoString() string {
	return s.String()
}

func (s *PubRequestUserProp) SetKey(v string) *PubRequestUserProp {
	s.Key = &v
	return s
}

func (s *PubRequestUserProp) SetValue(v string) *PubRequestUserProp {
	s.Value = &v
	return s
}

type PubResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s PubResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PubResponseBody) GoString() string {
	return s.String()
}

func (s *PubResponseBody) SetRequestId(v string) *PubResponseBody {
	s.RequestId = &v
	return s
}

func (s *PubResponseBody) SetSuccess(v bool) *PubResponseBody {
	s.Success = &v
	return s
}

func (s *PubResponseBody) SetCode(v string) *PubResponseBody {
	s.Code = &v
	return s
}

func (s *PubResponseBody) SetErrorMessage(v string) *PubResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *PubResponseBody) SetMessageId(v string) *PubResponseBody {
	s.MessageId = &v
	return s
}

type PubResponse struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *PubResponseBody   `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PubResponse) String() string {
	return tea.Prettify(s)
}

func (s PubResponse) GoString() string {
	return s.String()
}

func (s *PubResponse) SetHeaders(v map[string]*string) *PubResponse {
	s.Headers = v
	return s
}

func (s *PubResponse) SetBody(v *PubResponseBody) *PubResponse {
	s.Body = v
	return s
}

type PubBroadcastRequest struct {
	ApiProduct     *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision    *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId  *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey     *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	TopicFullName  *string `json:"TopicFullName,omitempty" xml:"TopicFullName,omitempty"`
	MessageContent *string `json:"MessageContent,omitempty" xml:"MessageContent,omitempty"`
}

func (s PubBroadcastRequest) String() string {
	return tea.Prettify(s)
}

func (s PubBroadcastRequest) GoString() string {
	return s.String()
}

func (s *PubBroadcastRequest) SetApiProduct(v string) *PubBroadcastRequest {
	s.ApiProduct = &v
	return s
}

func (s *PubBroadcastRequest) SetApiRevision(v string) *PubBroadcastRequest {
	s.ApiRevision = &v
	return s
}

func (s *PubBroadcastRequest) SetIotInstanceId(v string) *PubBroadcastRequest {
	s.IotInstanceId = &v
	return s
}

func (s *PubBroadcastRequest) SetProductKey(v string) *PubBroadcastRequest {
	s.ProductKey = &v
	return s
}

func (s *PubBroadcastRequest) SetTopicFullName(v string) *PubBroadcastRequest {
	s.TopicFullName = &v
	return s
}

func (s *PubBroadcastRequest) SetMessageContent(v string) *PubBroadcastRequest {
	s.MessageContent = &v
	return s
}

type PubBroadcastResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	MessageId    *int64  `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s PubBroadcastResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PubBroadcastResponseBody) GoString() string {
	return s.String()
}

func (s *PubBroadcastResponseBody) SetRequestId(v string) *PubBroadcastResponseBody {
	s.RequestId = &v
	return s
}

func (s *PubBroadcastResponseBody) SetSuccess(v bool) *PubBroadcastResponseBody {
	s.Success = &v
	return s
}

func (s *PubBroadcastResponseBody) SetCode(v string) *PubBroadcastResponseBody {
	s.Code = &v
	return s
}

func (s *PubBroadcastResponseBody) SetErrorMessage(v string) *PubBroadcastResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *PubBroadcastResponseBody) SetMessageId(v int64) *PubBroadcastResponseBody {
	s.MessageId = &v
	return s
}

type PubBroadcastResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *PubBroadcastResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PubBroadcastResponse) String() string {
	return tea.Prettify(s)
}

func (s PubBroadcastResponse) GoString() string {
	return s.String()
}

func (s *PubBroadcastResponse) SetHeaders(v map[string]*string) *PubBroadcastResponse {
	s.Headers = v
	return s
}

func (s *PubBroadcastResponse) SetBody(v *PubBroadcastResponseBody) *PubBroadcastResponse {
	s.Body = v
	return s
}

type PublishThingModelRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ModelVersion      *string `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s PublishThingModelRequest) String() string {
	return tea.Prettify(s)
}

func (s PublishThingModelRequest) GoString() string {
	return s.String()
}

func (s *PublishThingModelRequest) SetApiProduct(v string) *PublishThingModelRequest {
	s.ApiProduct = &v
	return s
}

func (s *PublishThingModelRequest) SetApiRevision(v string) *PublishThingModelRequest {
	s.ApiRevision = &v
	return s
}

func (s *PublishThingModelRequest) SetIotInstanceId(v string) *PublishThingModelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *PublishThingModelRequest) SetResourceGroupId(v string) *PublishThingModelRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *PublishThingModelRequest) SetProductKey(v string) *PublishThingModelRequest {
	s.ProductKey = &v
	return s
}

func (s *PublishThingModelRequest) SetModelVersion(v string) *PublishThingModelRequest {
	s.ModelVersion = &v
	return s
}

func (s *PublishThingModelRequest) SetDescription(v string) *PublishThingModelRequest {
	s.Description = &v
	return s
}

func (s *PublishThingModelRequest) SetRealTenantId(v string) *PublishThingModelRequest {
	s.RealTenantId = &v
	return s
}

func (s *PublishThingModelRequest) SetRealTripartiteKey(v string) *PublishThingModelRequest {
	s.RealTripartiteKey = &v
	return s
}

type PublishThingModelResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s PublishThingModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PublishThingModelResponseBody) GoString() string {
	return s.String()
}

func (s *PublishThingModelResponseBody) SetRequestId(v string) *PublishThingModelResponseBody {
	s.RequestId = &v
	return s
}

func (s *PublishThingModelResponseBody) SetSuccess(v bool) *PublishThingModelResponseBody {
	s.Success = &v
	return s
}

func (s *PublishThingModelResponseBody) SetCode(v string) *PublishThingModelResponseBody {
	s.Code = &v
	return s
}

func (s *PublishThingModelResponseBody) SetErrorMessage(v string) *PublishThingModelResponseBody {
	s.ErrorMessage = &v
	return s
}

type PublishThingModelResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *PublishThingModelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PublishThingModelResponse) String() string {
	return tea.Prettify(s)
}

func (s PublishThingModelResponse) GoString() string {
	return s.String()
}

func (s *PublishThingModelResponse) SetHeaders(v map[string]*string) *PublishThingModelResponse {
	s.Headers = v
	return s
}

func (s *PublishThingModelResponse) SetBody(v *PublishThingModelResponseBody) *PublishThingModelResponse {
	s.Body = v
	return s
}

type QueryAppDeviceListRequest struct {
	ApiProduct      *string                             `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision     *string                             `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId   *string                             `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize        *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKeyList  []*string                           `json:"ProductKeyList,omitempty" xml:"ProductKeyList,omitempty" type:"Repeated"`
	CategoryKeyList []*string                           `json:"CategoryKeyList,omitempty" xml:"CategoryKeyList,omitempty" type:"Repeated"`
	AppKey          *string                             `json:"AppKey,omitempty" xml:"AppKey,omitempty"`
	TagList         []*QueryAppDeviceListRequestTagList `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
	CurrentPage     *int32                              `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s QueryAppDeviceListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAppDeviceListRequest) GoString() string {
	return s.String()
}

func (s *QueryAppDeviceListRequest) SetApiProduct(v string) *QueryAppDeviceListRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryAppDeviceListRequest) SetApiRevision(v string) *QueryAppDeviceListRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryAppDeviceListRequest) SetIotInstanceId(v string) *QueryAppDeviceListRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryAppDeviceListRequest) SetPageSize(v int32) *QueryAppDeviceListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAppDeviceListRequest) SetProductKeyList(v []*string) *QueryAppDeviceListRequest {
	s.ProductKeyList = v
	return s
}

func (s *QueryAppDeviceListRequest) SetCategoryKeyList(v []*string) *QueryAppDeviceListRequest {
	s.CategoryKeyList = v
	return s
}

func (s *QueryAppDeviceListRequest) SetAppKey(v string) *QueryAppDeviceListRequest {
	s.AppKey = &v
	return s
}

func (s *QueryAppDeviceListRequest) SetTagList(v []*QueryAppDeviceListRequestTagList) *QueryAppDeviceListRequest {
	s.TagList = v
	return s
}

func (s *QueryAppDeviceListRequest) SetCurrentPage(v int32) *QueryAppDeviceListRequest {
	s.CurrentPage = &v
	return s
}

type QueryAppDeviceListRequestTagList struct {
	TagName  *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s QueryAppDeviceListRequestTagList) String() string {
	return tea.Prettify(s)
}

func (s QueryAppDeviceListRequestTagList) GoString() string {
	return s.String()
}

func (s *QueryAppDeviceListRequestTagList) SetTagName(v string) *QueryAppDeviceListRequestTagList {
	s.TagName = &v
	return s
}

func (s *QueryAppDeviceListRequestTagList) SetTagValue(v string) *QueryAppDeviceListRequestTagList {
	s.TagValue = &v
	return s
}

type QueryAppDeviceListResponseBody struct {
	RequestId    *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Page         *int32                              `json:"Page,omitempty" xml:"Page,omitempty"`
	PageSize     *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageCount    *int32                              `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	Total        *int32                              `json:"Total,omitempty" xml:"Total,omitempty"`
	Data         *QueryAppDeviceListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryAppDeviceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAppDeviceListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAppDeviceListResponseBody) SetRequestId(v string) *QueryAppDeviceListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAppDeviceListResponseBody) SetSuccess(v bool) *QueryAppDeviceListResponseBody {
	s.Success = &v
	return s
}

func (s *QueryAppDeviceListResponseBody) SetErrorMessage(v string) *QueryAppDeviceListResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryAppDeviceListResponseBody) SetCode(v string) *QueryAppDeviceListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryAppDeviceListResponseBody) SetPage(v int32) *QueryAppDeviceListResponseBody {
	s.Page = &v
	return s
}

func (s *QueryAppDeviceListResponseBody) SetPageSize(v int32) *QueryAppDeviceListResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryAppDeviceListResponseBody) SetPageCount(v int32) *QueryAppDeviceListResponseBody {
	s.PageCount = &v
	return s
}

func (s *QueryAppDeviceListResponseBody) SetTotal(v int32) *QueryAppDeviceListResponseBody {
	s.Total = &v
	return s
}

func (s *QueryAppDeviceListResponseBody) SetData(v *QueryAppDeviceListResponseBodyData) *QueryAppDeviceListResponseBody {
	s.Data = v
	return s
}

type QueryAppDeviceListResponseBodyData struct {
	Data []*QueryAppDeviceListResponseBodyDataData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
}

func (s QueryAppDeviceListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryAppDeviceListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryAppDeviceListResponseBodyData) SetData(v []*QueryAppDeviceListResponseBodyDataData) *QueryAppDeviceListResponseBodyData {
	s.Data = v
	return s
}

type QueryAppDeviceListResponseBodyDataData struct {
	ProductName       *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	NodeType          *int32  `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ActiveTime        *string `json:"ActiveTime,omitempty" xml:"ActiveTime,omitempty"`
	LastOnlineTime    *string `json:"LastOnlineTime,omitempty" xml:"LastOnlineTime,omitempty"`
	CreateTime        *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ChildDeviceCount  *int64  `json:"ChildDeviceCount,omitempty" xml:"ChildDeviceCount,omitempty"`
	UtcActiveTime     *string `json:"UtcActiveTime,omitempty" xml:"UtcActiveTime,omitempty"`
	UtcLastOnlineTime *string `json:"UtcLastOnlineTime,omitempty" xml:"UtcLastOnlineTime,omitempty"`
	UtcCreateTime     *string `json:"UtcCreateTime,omitempty" xml:"UtcCreateTime,omitempty"`
}

func (s QueryAppDeviceListResponseBodyDataData) String() string {
	return tea.Prettify(s)
}

func (s QueryAppDeviceListResponseBodyDataData) GoString() string {
	return s.String()
}

func (s *QueryAppDeviceListResponseBodyDataData) SetProductName(v string) *QueryAppDeviceListResponseBodyDataData {
	s.ProductName = &v
	return s
}

func (s *QueryAppDeviceListResponseBodyDataData) SetProductKey(v string) *QueryAppDeviceListResponseBodyDataData {
	s.ProductKey = &v
	return s
}

func (s *QueryAppDeviceListResponseBodyDataData) SetDeviceName(v string) *QueryAppDeviceListResponseBodyDataData {
	s.DeviceName = &v
	return s
}

func (s *QueryAppDeviceListResponseBodyDataData) SetNodeType(v int32) *QueryAppDeviceListResponseBodyDataData {
	s.NodeType = &v
	return s
}

func (s *QueryAppDeviceListResponseBodyDataData) SetStatus(v string) *QueryAppDeviceListResponseBodyDataData {
	s.Status = &v
	return s
}

func (s *QueryAppDeviceListResponseBodyDataData) SetActiveTime(v string) *QueryAppDeviceListResponseBodyDataData {
	s.ActiveTime = &v
	return s
}

func (s *QueryAppDeviceListResponseBodyDataData) SetLastOnlineTime(v string) *QueryAppDeviceListResponseBodyDataData {
	s.LastOnlineTime = &v
	return s
}

func (s *QueryAppDeviceListResponseBodyDataData) SetCreateTime(v string) *QueryAppDeviceListResponseBodyDataData {
	s.CreateTime = &v
	return s
}

func (s *QueryAppDeviceListResponseBodyDataData) SetChildDeviceCount(v int64) *QueryAppDeviceListResponseBodyDataData {
	s.ChildDeviceCount = &v
	return s
}

func (s *QueryAppDeviceListResponseBodyDataData) SetUtcActiveTime(v string) *QueryAppDeviceListResponseBodyDataData {
	s.UtcActiveTime = &v
	return s
}

func (s *QueryAppDeviceListResponseBodyDataData) SetUtcLastOnlineTime(v string) *QueryAppDeviceListResponseBodyDataData {
	s.UtcLastOnlineTime = &v
	return s
}

func (s *QueryAppDeviceListResponseBodyDataData) SetUtcCreateTime(v string) *QueryAppDeviceListResponseBodyDataData {
	s.UtcCreateTime = &v
	return s
}

type QueryAppDeviceListResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryAppDeviceListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryAppDeviceListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAppDeviceListResponse) GoString() string {
	return s.String()
}

func (s *QueryAppDeviceListResponse) SetHeaders(v map[string]*string) *QueryAppDeviceListResponse {
	s.Headers = v
	return s
}

func (s *QueryAppDeviceListResponse) SetBody(v *QueryAppDeviceListResponseBody) *QueryAppDeviceListResponse {
	s.Body = v
	return s
}

type QueryBatchRegisterDeviceStatusRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ApplyId           *int64  `json:"ApplyId,omitempty" xml:"ApplyId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryBatchRegisterDeviceStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBatchRegisterDeviceStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryBatchRegisterDeviceStatusRequest) SetApiProduct(v string) *QueryBatchRegisterDeviceStatusRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusRequest) SetApiRevision(v string) *QueryBatchRegisterDeviceStatusRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusRequest) SetIotInstanceId(v string) *QueryBatchRegisterDeviceStatusRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusRequest) SetProductKey(v string) *QueryBatchRegisterDeviceStatusRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusRequest) SetApplyId(v int64) *QueryBatchRegisterDeviceStatusRequest {
	s.ApplyId = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusRequest) SetRealTenantId(v string) *QueryBatchRegisterDeviceStatusRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusRequest) SetRealTripartiteKey(v string) *QueryBatchRegisterDeviceStatusRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryBatchRegisterDeviceStatusResponseBody struct {
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryBatchRegisterDeviceStatusResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryBatchRegisterDeviceStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryBatchRegisterDeviceStatusResponseBody) GoString() string {
	return s.String()
}

func (s *QueryBatchRegisterDeviceStatusResponseBody) SetRequestId(v string) *QueryBatchRegisterDeviceStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusResponseBody) SetSuccess(v bool) *QueryBatchRegisterDeviceStatusResponseBody {
	s.Success = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusResponseBody) SetCode(v string) *QueryBatchRegisterDeviceStatusResponseBody {
	s.Code = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusResponseBody) SetErrorMessage(v string) *QueryBatchRegisterDeviceStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusResponseBody) SetData(v *QueryBatchRegisterDeviceStatusResponseBodyData) *QueryBatchRegisterDeviceStatusResponseBody {
	s.Data = v
	return s
}

type QueryBatchRegisterDeviceStatusResponseBodyData struct {
	Status      *string                                                    `json:"Status,omitempty" xml:"Status,omitempty"`
	ValidList   *QueryBatchRegisterDeviceStatusResponseBodyDataValidList   `json:"ValidList,omitempty" xml:"ValidList,omitempty" type:"Struct"`
	InvalidList *QueryBatchRegisterDeviceStatusResponseBodyDataInvalidList `json:"InvalidList,omitempty" xml:"InvalidList,omitempty" type:"Struct"`
}

func (s QueryBatchRegisterDeviceStatusResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryBatchRegisterDeviceStatusResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryBatchRegisterDeviceStatusResponseBodyData) SetStatus(v string) *QueryBatchRegisterDeviceStatusResponseBodyData {
	s.Status = &v
	return s
}

func (s *QueryBatchRegisterDeviceStatusResponseBodyData) SetValidList(v *QueryBatchRegisterDeviceStatusResponseBodyDataValidList) *QueryBatchRegisterDeviceStatusResponseBodyData {
	s.ValidList = v
	return s
}

func (s *QueryBatchRegisterDeviceStatusResponseBodyData) SetInvalidList(v *QueryBatchRegisterDeviceStatusResponseBodyDataInvalidList) *QueryBatchRegisterDeviceStatusResponseBodyData {
	s.InvalidList = v
	return s
}

type QueryBatchRegisterDeviceStatusResponseBodyDataValidList struct {
	Name []*string `json:"Name,omitempty" xml:"Name,omitempty" type:"Repeated"`
}

func (s QueryBatchRegisterDeviceStatusResponseBodyDataValidList) String() string {
	return tea.Prettify(s)
}

func (s QueryBatchRegisterDeviceStatusResponseBodyDataValidList) GoString() string {
	return s.String()
}

func (s *QueryBatchRegisterDeviceStatusResponseBodyDataValidList) SetName(v []*string) *QueryBatchRegisterDeviceStatusResponseBodyDataValidList {
	s.Name = v
	return s
}

type QueryBatchRegisterDeviceStatusResponseBodyDataInvalidList struct {
	Name []*string `json:"Name,omitempty" xml:"Name,omitempty" type:"Repeated"`
}

func (s QueryBatchRegisterDeviceStatusResponseBodyDataInvalidList) String() string {
	return tea.Prettify(s)
}

func (s QueryBatchRegisterDeviceStatusResponseBodyDataInvalidList) GoString() string {
	return s.String()
}

func (s *QueryBatchRegisterDeviceStatusResponseBodyDataInvalidList) SetName(v []*string) *QueryBatchRegisterDeviceStatusResponseBodyDataInvalidList {
	s.Name = v
	return s
}

type QueryBatchRegisterDeviceStatusResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryBatchRegisterDeviceStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryBatchRegisterDeviceStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBatchRegisterDeviceStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryBatchRegisterDeviceStatusResponse) SetHeaders(v map[string]*string) *QueryBatchRegisterDeviceStatusResponse {
	s.Headers = v
	return s
}

func (s *QueryBatchRegisterDeviceStatusResponse) SetBody(v *QueryBatchRegisterDeviceStatusResponseBody) *QueryBatchRegisterDeviceStatusResponse {
	s.Body = v
	return s
}

type QueryCertUrlByApplyIdRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ApplyId       *int64  `json:"ApplyId,omitempty" xml:"ApplyId,omitempty"`
}

func (s QueryCertUrlByApplyIdRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCertUrlByApplyIdRequest) GoString() string {
	return s.String()
}

func (s *QueryCertUrlByApplyIdRequest) SetApiProduct(v string) *QueryCertUrlByApplyIdRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryCertUrlByApplyIdRequest) SetApiRevision(v string) *QueryCertUrlByApplyIdRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryCertUrlByApplyIdRequest) SetIotInstanceId(v string) *QueryCertUrlByApplyIdRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryCertUrlByApplyIdRequest) SetApplyId(v int64) *QueryCertUrlByApplyIdRequest {
	s.ApplyId = &v
	return s
}

type QueryCertUrlByApplyIdResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	CertUrl      *string `json:"CertUrl,omitempty" xml:"CertUrl,omitempty"`
}

func (s QueryCertUrlByApplyIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCertUrlByApplyIdResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCertUrlByApplyIdResponseBody) SetRequestId(v string) *QueryCertUrlByApplyIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCertUrlByApplyIdResponseBody) SetSuccess(v bool) *QueryCertUrlByApplyIdResponseBody {
	s.Success = &v
	return s
}

func (s *QueryCertUrlByApplyIdResponseBody) SetCode(v string) *QueryCertUrlByApplyIdResponseBody {
	s.Code = &v
	return s
}

func (s *QueryCertUrlByApplyIdResponseBody) SetErrorMessage(v string) *QueryCertUrlByApplyIdResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryCertUrlByApplyIdResponseBody) SetCertUrl(v string) *QueryCertUrlByApplyIdResponseBody {
	s.CertUrl = &v
	return s
}

type QueryCertUrlByApplyIdResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryCertUrlByApplyIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryCertUrlByApplyIdResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCertUrlByApplyIdResponse) GoString() string {
	return s.String()
}

func (s *QueryCertUrlByApplyIdResponse) SetHeaders(v map[string]*string) *QueryCertUrlByApplyIdResponse {
	s.Headers = v
	return s
}

func (s *QueryCertUrlByApplyIdResponse) SetBody(v *QueryCertUrlByApplyIdResponseBody) *QueryCertUrlByApplyIdResponse {
	s.Body = v
	return s
}

type QueryConsumerGroupByGroupIdRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s QueryConsumerGroupByGroupIdRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupByGroupIdRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupByGroupIdRequest) SetApiProduct(v string) *QueryConsumerGroupByGroupIdRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryConsumerGroupByGroupIdRequest) SetApiRevision(v string) *QueryConsumerGroupByGroupIdRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryConsumerGroupByGroupIdRequest) SetIotInstanceId(v string) *QueryConsumerGroupByGroupIdRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryConsumerGroupByGroupIdRequest) SetGroupId(v string) *QueryConsumerGroupByGroupIdRequest {
	s.GroupId = &v
	return s
}

type QueryConsumerGroupByGroupIdResponseBody struct {
	RequestId    *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string                                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data         *QueryConsumerGroupByGroupIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryConsumerGroupByGroupIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupByGroupIdResponseBody) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupByGroupIdResponseBody) SetRequestId(v string) *QueryConsumerGroupByGroupIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryConsumerGroupByGroupIdResponseBody) SetSuccess(v bool) *QueryConsumerGroupByGroupIdResponseBody {
	s.Success = &v
	return s
}

func (s *QueryConsumerGroupByGroupIdResponseBody) SetErrorMessage(v string) *QueryConsumerGroupByGroupIdResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryConsumerGroupByGroupIdResponseBody) SetCode(v string) *QueryConsumerGroupByGroupIdResponseBody {
	s.Code = &v
	return s
}

func (s *QueryConsumerGroupByGroupIdResponseBody) SetData(v *QueryConsumerGroupByGroupIdResponseBodyData) *QueryConsumerGroupByGroupIdResponseBody {
	s.Data = v
	return s
}

type QueryConsumerGroupByGroupIdResponseBodyData struct {
	GroupId    *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName  *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
}

func (s QueryConsumerGroupByGroupIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupByGroupIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupByGroupIdResponseBodyData) SetGroupId(v string) *QueryConsumerGroupByGroupIdResponseBodyData {
	s.GroupId = &v
	return s
}

func (s *QueryConsumerGroupByGroupIdResponseBodyData) SetGroupName(v string) *QueryConsumerGroupByGroupIdResponseBodyData {
	s.GroupName = &v
	return s
}

func (s *QueryConsumerGroupByGroupIdResponseBodyData) SetCreateTime(v string) *QueryConsumerGroupByGroupIdResponseBodyData {
	s.CreateTime = &v
	return s
}

type QueryConsumerGroupByGroupIdResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryConsumerGroupByGroupIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryConsumerGroupByGroupIdResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupByGroupIdResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupByGroupIdResponse) SetHeaders(v map[string]*string) *QueryConsumerGroupByGroupIdResponse {
	s.Headers = v
	return s
}

func (s *QueryConsumerGroupByGroupIdResponse) SetBody(v *QueryConsumerGroupByGroupIdResponseBody) *QueryConsumerGroupByGroupIdResponse {
	s.Body = v
	return s
}

type QueryConsumerGroupListRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Fuzzy         *bool   `json:"Fuzzy,omitempty" xml:"Fuzzy,omitempty"`
	GroupName     *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s QueryConsumerGroupListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupListRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupListRequest) SetApiProduct(v string) *QueryConsumerGroupListRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryConsumerGroupListRequest) SetApiRevision(v string) *QueryConsumerGroupListRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryConsumerGroupListRequest) SetIotInstanceId(v string) *QueryConsumerGroupListRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryConsumerGroupListRequest) SetPageSize(v int32) *QueryConsumerGroupListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryConsumerGroupListRequest) SetCurrentPage(v int32) *QueryConsumerGroupListRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryConsumerGroupListRequest) SetFuzzy(v bool) *QueryConsumerGroupListRequest {
	s.Fuzzy = &v
	return s
}

func (s *QueryConsumerGroupListRequest) SetGroupName(v string) *QueryConsumerGroupListRequest {
	s.GroupName = &v
	return s
}

type QueryConsumerGroupListResponseBody struct {
	RequestId    *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string                                 `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	PageSize     *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageCount    *int32                                  `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	Total        *int32                                  `json:"Total,omitempty" xml:"Total,omitempty"`
	CurrentPage  *int32                                  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Code         *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data         *QueryConsumerGroupListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryConsumerGroupListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupListResponseBody) SetRequestId(v string) *QueryConsumerGroupListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryConsumerGroupListResponseBody) SetSuccess(v bool) *QueryConsumerGroupListResponseBody {
	s.Success = &v
	return s
}

func (s *QueryConsumerGroupListResponseBody) SetErrorMessage(v string) *QueryConsumerGroupListResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryConsumerGroupListResponseBody) SetPageSize(v int32) *QueryConsumerGroupListResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryConsumerGroupListResponseBody) SetPageCount(v int32) *QueryConsumerGroupListResponseBody {
	s.PageCount = &v
	return s
}

func (s *QueryConsumerGroupListResponseBody) SetTotal(v int32) *QueryConsumerGroupListResponseBody {
	s.Total = &v
	return s
}

func (s *QueryConsumerGroupListResponseBody) SetCurrentPage(v int32) *QueryConsumerGroupListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *QueryConsumerGroupListResponseBody) SetCode(v string) *QueryConsumerGroupListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryConsumerGroupListResponseBody) SetData(v *QueryConsumerGroupListResponseBodyData) *QueryConsumerGroupListResponseBody {
	s.Data = v
	return s
}

type QueryConsumerGroupListResponseBodyData struct {
	ConsumerGroupDTO []*QueryConsumerGroupListResponseBodyDataConsumerGroupDTO `json:"ConsumerGroupDTO,omitempty" xml:"ConsumerGroupDTO,omitempty" type:"Repeated"`
}

func (s QueryConsumerGroupListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupListResponseBodyData) SetConsumerGroupDTO(v []*QueryConsumerGroupListResponseBodyDataConsumerGroupDTO) *QueryConsumerGroupListResponseBodyData {
	s.ConsumerGroupDTO = v
	return s
}

type QueryConsumerGroupListResponseBodyDataConsumerGroupDTO struct {
	GroupId    *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName  *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
}

func (s QueryConsumerGroupListResponseBodyDataConsumerGroupDTO) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupListResponseBodyDataConsumerGroupDTO) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupListResponseBodyDataConsumerGroupDTO) SetGroupId(v string) *QueryConsumerGroupListResponseBodyDataConsumerGroupDTO {
	s.GroupId = &v
	return s
}

func (s *QueryConsumerGroupListResponseBodyDataConsumerGroupDTO) SetGroupName(v string) *QueryConsumerGroupListResponseBodyDataConsumerGroupDTO {
	s.GroupName = &v
	return s
}

func (s *QueryConsumerGroupListResponseBodyDataConsumerGroupDTO) SetCreateTime(v string) *QueryConsumerGroupListResponseBodyDataConsumerGroupDTO {
	s.CreateTime = &v
	return s
}

type QueryConsumerGroupListResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryConsumerGroupListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryConsumerGroupListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupListResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupListResponse) SetHeaders(v map[string]*string) *QueryConsumerGroupListResponse {
	s.Headers = v
	return s
}

func (s *QueryConsumerGroupListResponse) SetBody(v *QueryConsumerGroupListResponseBody) *QueryConsumerGroupListResponse {
	s.Body = v
	return s
}

type QueryConsumerGroupStatusRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s QueryConsumerGroupStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupStatusRequest) SetApiProduct(v string) *QueryConsumerGroupStatusRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryConsumerGroupStatusRequest) SetApiRevision(v string) *QueryConsumerGroupStatusRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryConsumerGroupStatusRequest) SetIotInstanceId(v string) *QueryConsumerGroupStatusRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryConsumerGroupStatusRequest) SetGroupId(v string) *QueryConsumerGroupStatusRequest {
	s.GroupId = &v
	return s
}

type QueryConsumerGroupStatusResponseBody struct {
	RequestId                  *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                    *bool                                                           `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage               *string                                                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	AccumulationCount          *int32                                                          `json:"AccumulationCount,omitempty" xml:"AccumulationCount,omitempty"`
	ConsumerSpeed              *int32                                                          `json:"ConsumerSpeed,omitempty" xml:"ConsumerSpeed,omitempty"`
	LastConsumerTime           *string                                                         `json:"LastConsumerTime,omitempty" xml:"LastConsumerTime,omitempty"`
	Code                       *string                                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	ClientConnectionStatusList *QueryConsumerGroupStatusResponseBodyClientConnectionStatusList `json:"ClientConnectionStatusList,omitempty" xml:"ClientConnectionStatusList,omitempty" type:"Struct"`
}

func (s QueryConsumerGroupStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupStatusResponseBody) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupStatusResponseBody) SetRequestId(v string) *QueryConsumerGroupStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryConsumerGroupStatusResponseBody) SetSuccess(v bool) *QueryConsumerGroupStatusResponseBody {
	s.Success = &v
	return s
}

func (s *QueryConsumerGroupStatusResponseBody) SetErrorMessage(v string) *QueryConsumerGroupStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryConsumerGroupStatusResponseBody) SetAccumulationCount(v int32) *QueryConsumerGroupStatusResponseBody {
	s.AccumulationCount = &v
	return s
}

func (s *QueryConsumerGroupStatusResponseBody) SetConsumerSpeed(v int32) *QueryConsumerGroupStatusResponseBody {
	s.ConsumerSpeed = &v
	return s
}

func (s *QueryConsumerGroupStatusResponseBody) SetLastConsumerTime(v string) *QueryConsumerGroupStatusResponseBody {
	s.LastConsumerTime = &v
	return s
}

func (s *QueryConsumerGroupStatusResponseBody) SetCode(v string) *QueryConsumerGroupStatusResponseBody {
	s.Code = &v
	return s
}

func (s *QueryConsumerGroupStatusResponseBody) SetClientConnectionStatusList(v *QueryConsumerGroupStatusResponseBodyClientConnectionStatusList) *QueryConsumerGroupStatusResponseBody {
	s.ClientConnectionStatusList = v
	return s
}

type QueryConsumerGroupStatusResponseBodyClientConnectionStatusList struct {
	ConsumerGroupClientConnectionInfo []*QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo `json:"ConsumerGroupClientConnectionInfo,omitempty" xml:"ConsumerGroupClientConnectionInfo,omitempty" type:"Repeated"`
}

func (s QueryConsumerGroupStatusResponseBodyClientConnectionStatusList) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupStatusResponseBodyClientConnectionStatusList) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupStatusResponseBodyClientConnectionStatusList) SetConsumerGroupClientConnectionInfo(v []*QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo) *QueryConsumerGroupStatusResponseBodyClientConnectionStatusList {
	s.ConsumerGroupClientConnectionInfo = v
	return s
}

type QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo struct {
	ClientId     *string `json:"ClientId,omitempty" xml:"ClientId,omitempty"`
	ClientIpPort *string `json:"ClientIpPort,omitempty" xml:"ClientIpPort,omitempty"`
	OnlineTime   *int64  `json:"OnlineTime,omitempty" xml:"OnlineTime,omitempty"`
}

func (s QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo) SetClientId(v string) *QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo {
	s.ClientId = &v
	return s
}

func (s *QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo) SetClientIpPort(v string) *QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo {
	s.ClientIpPort = &v
	return s
}

func (s *QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo) SetOnlineTime(v int64) *QueryConsumerGroupStatusResponseBodyClientConnectionStatusListConsumerGroupClientConnectionInfo {
	s.OnlineTime = &v
	return s
}

type QueryConsumerGroupStatusResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryConsumerGroupStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryConsumerGroupStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsumerGroupStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryConsumerGroupStatusResponse) SetHeaders(v map[string]*string) *QueryConsumerGroupStatusResponse {
	s.Headers = v
	return s
}

func (s *QueryConsumerGroupStatusResponse) SetBody(v *QueryConsumerGroupStatusResponseBody) *QueryConsumerGroupStatusResponse {
	s.Body = v
	return s
}

type QueryDetailSceneRuleLogRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	StartTime     *int32  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime       *int32  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	TraceId       *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s QueryDetailSceneRuleLogRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDetailSceneRuleLogRequest) GoString() string {
	return s.String()
}

func (s *QueryDetailSceneRuleLogRequest) SetApiProduct(v string) *QueryDetailSceneRuleLogRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDetailSceneRuleLogRequest) SetApiRevision(v string) *QueryDetailSceneRuleLogRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDetailSceneRuleLogRequest) SetIotInstanceId(v string) *QueryDetailSceneRuleLogRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDetailSceneRuleLogRequest) SetRuleId(v string) *QueryDetailSceneRuleLogRequest {
	s.RuleId = &v
	return s
}

func (s *QueryDetailSceneRuleLogRequest) SetStartTime(v int32) *QueryDetailSceneRuleLogRequest {
	s.StartTime = &v
	return s
}

func (s *QueryDetailSceneRuleLogRequest) SetEndTime(v int32) *QueryDetailSceneRuleLogRequest {
	s.EndTime = &v
	return s
}

func (s *QueryDetailSceneRuleLogRequest) SetTraceId(v string) *QueryDetailSceneRuleLogRequest {
	s.TraceId = &v
	return s
}

func (s *QueryDetailSceneRuleLogRequest) SetPageSize(v int32) *QueryDetailSceneRuleLogRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDetailSceneRuleLogRequest) SetCurrentPage(v int32) *QueryDetailSceneRuleLogRequest {
	s.CurrentPage = &v
	return s
}

type QueryDetailSceneRuleLogResponseBody struct {
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string                                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data         *QueryDetailSceneRuleLogResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDetailSceneRuleLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDetailSceneRuleLogResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDetailSceneRuleLogResponseBody) SetRequestId(v string) *QueryDetailSceneRuleLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponseBody) SetSuccess(v bool) *QueryDetailSceneRuleLogResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponseBody) SetErrorMessage(v string) *QueryDetailSceneRuleLogResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponseBody) SetCode(v string) *QueryDetailSceneRuleLogResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponseBody) SetData(v *QueryDetailSceneRuleLogResponseBodyData) *QueryDetailSceneRuleLogResponseBody {
	s.Data = v
	return s
}

type QueryDetailSceneRuleLogResponseBodyData struct {
	Total       *int32                                            `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize    *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage *int32                                            `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	LogList     []*QueryDetailSceneRuleLogResponseBodyDataLogList `json:"LogList,omitempty" xml:"LogList,omitempty" type:"Repeated"`
}

func (s QueryDetailSceneRuleLogResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDetailSceneRuleLogResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDetailSceneRuleLogResponseBodyData) SetTotal(v int32) *QueryDetailSceneRuleLogResponseBodyData {
	s.Total = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponseBodyData) SetPageSize(v int32) *QueryDetailSceneRuleLogResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponseBodyData) SetCurrentPage(v int32) *QueryDetailSceneRuleLogResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponseBodyData) SetLogList(v []*QueryDetailSceneRuleLogResponseBodyDataLogList) *QueryDetailSceneRuleLogResponseBodyData {
	s.LogList = v
	return s
}

type QueryDetailSceneRuleLogResponseBodyDataLogList struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	PkDn    *string `json:"PkDn,omitempty" xml:"PkDn,omitempty"`
}

func (s QueryDetailSceneRuleLogResponseBodyDataLogList) String() string {
	return tea.Prettify(s)
}

func (s QueryDetailSceneRuleLogResponseBodyDataLogList) GoString() string {
	return s.String()
}

func (s *QueryDetailSceneRuleLogResponseBodyDataLogList) SetCode(v string) *QueryDetailSceneRuleLogResponseBodyDataLogList {
	s.Code = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponseBodyDataLogList) SetMessage(v string) *QueryDetailSceneRuleLogResponseBodyDataLogList {
	s.Message = &v
	return s
}

func (s *QueryDetailSceneRuleLogResponseBodyDataLogList) SetPkDn(v string) *QueryDetailSceneRuleLogResponseBodyDataLogList {
	s.PkDn = &v
	return s
}

type QueryDetailSceneRuleLogResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDetailSceneRuleLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDetailSceneRuleLogResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDetailSceneRuleLogResponse) GoString() string {
	return s.String()
}

func (s *QueryDetailSceneRuleLogResponse) SetHeaders(v map[string]*string) *QueryDetailSceneRuleLogResponse {
	s.Headers = v
	return s
}

func (s *QueryDetailSceneRuleLogResponse) SetBody(v *QueryDetailSceneRuleLogResponseBody) *QueryDetailSceneRuleLogResponse {
	s.Body = v
	return s
}

type QueryDeviceRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	CurrentPage       *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceRequest) SetApiProduct(v string) *QueryDeviceRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceRequest) SetApiRevision(v string) *QueryDeviceRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceRequest) SetIotInstanceId(v string) *QueryDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceRequest) SetPageSize(v int32) *QueryDeviceRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceRequest) SetProductKey(v string) *QueryDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceRequest) SetCurrentPage(v int32) *QueryDeviceRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryDeviceRequest) SetRealTenantId(v string) *QueryDeviceRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryDeviceRequest) SetRealTripartiteKey(v string) *QueryDeviceRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryDeviceResponseBody struct {
	RequestId    *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                        `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Total        *int32                       `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize     *int32                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageCount    *int32                       `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	Page         *int32                       `json:"Page,omitempty" xml:"Page,omitempty"`
	Data         *QueryDeviceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceResponseBody) SetRequestId(v string) *QueryDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceResponseBody) SetSuccess(v bool) *QueryDeviceResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceResponseBody) SetCode(v string) *QueryDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceResponseBody) SetErrorMessage(v string) *QueryDeviceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceResponseBody) SetTotal(v int32) *QueryDeviceResponseBody {
	s.Total = &v
	return s
}

func (s *QueryDeviceResponseBody) SetPageSize(v int32) *QueryDeviceResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceResponseBody) SetPageCount(v int32) *QueryDeviceResponseBody {
	s.PageCount = &v
	return s
}

func (s *QueryDeviceResponseBody) SetPage(v int32) *QueryDeviceResponseBody {
	s.Page = &v
	return s
}

func (s *QueryDeviceResponseBody) SetData(v *QueryDeviceResponseBodyData) *QueryDeviceResponseBody {
	s.Data = v
	return s
}

type QueryDeviceResponseBodyData struct {
	DeviceInfo []*QueryDeviceResponseBodyDataDeviceInfo `json:"DeviceInfo,omitempty" xml:"DeviceInfo,omitempty" type:"Repeated"`
}

func (s QueryDeviceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceResponseBodyData) SetDeviceInfo(v []*QueryDeviceResponseBodyDataDeviceInfo) *QueryDeviceResponseBodyData {
	s.DeviceInfo = v
	return s
}

type QueryDeviceResponseBodyDataDeviceInfo struct {
	DeviceId     *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceSecret *string `json:"DeviceSecret,omitempty" xml:"DeviceSecret,omitempty"`
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceStatus *string `json:"DeviceStatus,omitempty" xml:"DeviceStatus,omitempty"`
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceType   *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	GmtCreate    *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified  *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	UtcCreate    *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	UtcModified  *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty"`
	IotId        *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	Nickname     *string `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
}

func (s QueryDeviceResponseBodyDataDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceResponseBodyDataDeviceInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceResponseBodyDataDeviceInfo) SetDeviceId(v string) *QueryDeviceResponseBodyDataDeviceInfo {
	s.DeviceId = &v
	return s
}

func (s *QueryDeviceResponseBodyDataDeviceInfo) SetDeviceSecret(v string) *QueryDeviceResponseBodyDataDeviceInfo {
	s.DeviceSecret = &v
	return s
}

func (s *QueryDeviceResponseBodyDataDeviceInfo) SetProductKey(v string) *QueryDeviceResponseBodyDataDeviceInfo {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceResponseBodyDataDeviceInfo) SetDeviceStatus(v string) *QueryDeviceResponseBodyDataDeviceInfo {
	s.DeviceStatus = &v
	return s
}

func (s *QueryDeviceResponseBodyDataDeviceInfo) SetDeviceName(v string) *QueryDeviceResponseBodyDataDeviceInfo {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceResponseBodyDataDeviceInfo) SetDeviceType(v string) *QueryDeviceResponseBodyDataDeviceInfo {
	s.DeviceType = &v
	return s
}

func (s *QueryDeviceResponseBodyDataDeviceInfo) SetGmtCreate(v string) *QueryDeviceResponseBodyDataDeviceInfo {
	s.GmtCreate = &v
	return s
}

func (s *QueryDeviceResponseBodyDataDeviceInfo) SetGmtModified(v string) *QueryDeviceResponseBodyDataDeviceInfo {
	s.GmtModified = &v
	return s
}

func (s *QueryDeviceResponseBodyDataDeviceInfo) SetUtcCreate(v string) *QueryDeviceResponseBodyDataDeviceInfo {
	s.UtcCreate = &v
	return s
}

func (s *QueryDeviceResponseBodyDataDeviceInfo) SetUtcModified(v string) *QueryDeviceResponseBodyDataDeviceInfo {
	s.UtcModified = &v
	return s
}

func (s *QueryDeviceResponseBodyDataDeviceInfo) SetIotId(v string) *QueryDeviceResponseBodyDataDeviceInfo {
	s.IotId = &v
	return s
}

func (s *QueryDeviceResponseBodyDataDeviceInfo) SetNickname(v string) *QueryDeviceResponseBodyDataDeviceInfo {
	s.Nickname = &v
	return s
}

type QueryDeviceResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceResponse) SetHeaders(v map[string]*string) *QueryDeviceResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceResponse) SetBody(v *QueryDeviceResponseBody) *QueryDeviceResponse {
	s.Body = v
	return s
}

type QueryDeviceBySQLRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	SQL           *string `json:"SQL,omitempty" xml:"SQL,omitempty"`
}

func (s QueryDeviceBySQLRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceBySQLRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceBySQLRequest) SetApiProduct(v string) *QueryDeviceBySQLRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceBySQLRequest) SetApiRevision(v string) *QueryDeviceBySQLRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceBySQLRequest) SetIotInstanceId(v string) *QueryDeviceBySQLRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceBySQLRequest) SetSQL(v string) *QueryDeviceBySQLRequest {
	s.SQL = &v
	return s
}

type QueryDeviceBySQLResponseBody struct {
	RequestId    *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	TotalCount   *int64                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	Data         []*QueryDeviceBySQLResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
}

func (s QueryDeviceBySQLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceBySQLResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceBySQLResponseBody) SetRequestId(v string) *QueryDeviceBySQLResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceBySQLResponseBody) SetSuccess(v bool) *QueryDeviceBySQLResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceBySQLResponseBody) SetCode(v string) *QueryDeviceBySQLResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceBySQLResponseBody) SetErrorMessage(v string) *QueryDeviceBySQLResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceBySQLResponseBody) SetTotalCount(v int64) *QueryDeviceBySQLResponseBody {
	s.TotalCount = &v
	return s
}

func (s *QueryDeviceBySQLResponseBody) SetData(v []*QueryDeviceBySQLResponseBodyData) *QueryDeviceBySQLResponseBody {
	s.Data = v
	return s
}

type QueryDeviceBySQLResponseBodyData struct {
	ProductKey  *string                                       `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName  *string                                       `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	Nickname    *string                                       `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
	Status      *string                                       `json:"Status,omitempty" xml:"Status,omitempty"`
	ActiveTime  *string                                       `json:"ActiveTime,omitempty" xml:"ActiveTime,omitempty"`
	IotId       *string                                       `json:"IotId,omitempty" xml:"IotId,omitempty"`
	GmtCreate   *string                                       `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified *string                                       `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Groups      []*QueryDeviceBySQLResponseBodyDataGroups     `json:"Groups,omitempty" xml:"Groups,omitempty" type:"Repeated"`
	Tags        []*QueryDeviceBySQLResponseBodyDataTags       `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	OTAModules  []*QueryDeviceBySQLResponseBodyDataOTAModules `json:"OTAModules,omitempty" xml:"OTAModules,omitempty" type:"Repeated"`
}

func (s QueryDeviceBySQLResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceBySQLResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceBySQLResponseBodyData) SetProductKey(v string) *QueryDeviceBySQLResponseBodyData {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceBySQLResponseBodyData) SetDeviceName(v string) *QueryDeviceBySQLResponseBodyData {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceBySQLResponseBodyData) SetNickname(v string) *QueryDeviceBySQLResponseBodyData {
	s.Nickname = &v
	return s
}

func (s *QueryDeviceBySQLResponseBodyData) SetStatus(v string) *QueryDeviceBySQLResponseBodyData {
	s.Status = &v
	return s
}

func (s *QueryDeviceBySQLResponseBodyData) SetActiveTime(v string) *QueryDeviceBySQLResponseBodyData {
	s.ActiveTime = &v
	return s
}

func (s *QueryDeviceBySQLResponseBodyData) SetIotId(v string) *QueryDeviceBySQLResponseBodyData {
	s.IotId = &v
	return s
}

func (s *QueryDeviceBySQLResponseBodyData) SetGmtCreate(v string) *QueryDeviceBySQLResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *QueryDeviceBySQLResponseBodyData) SetGmtModified(v string) *QueryDeviceBySQLResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *QueryDeviceBySQLResponseBodyData) SetGroups(v []*QueryDeviceBySQLResponseBodyDataGroups) *QueryDeviceBySQLResponseBodyData {
	s.Groups = v
	return s
}

func (s *QueryDeviceBySQLResponseBodyData) SetTags(v []*QueryDeviceBySQLResponseBodyDataTags) *QueryDeviceBySQLResponseBodyData {
	s.Tags = v
	return s
}

func (s *QueryDeviceBySQLResponseBodyData) SetOTAModules(v []*QueryDeviceBySQLResponseBodyDataOTAModules) *QueryDeviceBySQLResponseBodyData {
	s.OTAModules = v
	return s
}

type QueryDeviceBySQLResponseBodyDataGroups struct {
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s QueryDeviceBySQLResponseBodyDataGroups) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceBySQLResponseBodyDataGroups) GoString() string {
	return s.String()
}

func (s *QueryDeviceBySQLResponseBodyDataGroups) SetGroupId(v string) *QueryDeviceBySQLResponseBodyDataGroups {
	s.GroupId = &v
	return s
}

type QueryDeviceBySQLResponseBodyDataTags struct {
	TagName  *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s QueryDeviceBySQLResponseBodyDataTags) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceBySQLResponseBodyDataTags) GoString() string {
	return s.String()
}

func (s *QueryDeviceBySQLResponseBodyDataTags) SetTagName(v string) *QueryDeviceBySQLResponseBodyDataTags {
	s.TagName = &v
	return s
}

func (s *QueryDeviceBySQLResponseBodyDataTags) SetTagValue(v string) *QueryDeviceBySQLResponseBodyDataTags {
	s.TagValue = &v
	return s
}

type QueryDeviceBySQLResponseBodyDataOTAModules struct {
	ModuleName      *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
	FirmwareVersion *string `json:"FirmwareVersion,omitempty" xml:"FirmwareVersion,omitempty"`
}

func (s QueryDeviceBySQLResponseBodyDataOTAModules) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceBySQLResponseBodyDataOTAModules) GoString() string {
	return s.String()
}

func (s *QueryDeviceBySQLResponseBodyDataOTAModules) SetModuleName(v string) *QueryDeviceBySQLResponseBodyDataOTAModules {
	s.ModuleName = &v
	return s
}

func (s *QueryDeviceBySQLResponseBodyDataOTAModules) SetFirmwareVersion(v string) *QueryDeviceBySQLResponseBodyDataOTAModules {
	s.FirmwareVersion = &v
	return s
}

type QueryDeviceBySQLResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceBySQLResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceBySQLResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceBySQLResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceBySQLResponse) SetHeaders(v map[string]*string) *QueryDeviceBySQLResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceBySQLResponse) SetBody(v *QueryDeviceBySQLResponseBody) *QueryDeviceBySQLResponse {
	s.Body = v
	return s
}

type QueryDeviceByStatusRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Status            *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	CurrentPage       *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	BizTenantId       *string `json:"BizTenantId,omitempty" xml:"BizTenantId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryDeviceByStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceByStatusRequest) SetApiProduct(v string) *QueryDeviceByStatusRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceByStatusRequest) SetApiRevision(v string) *QueryDeviceByStatusRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceByStatusRequest) SetIotInstanceId(v string) *QueryDeviceByStatusRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceByStatusRequest) SetProductKey(v string) *QueryDeviceByStatusRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceByStatusRequest) SetStatus(v int32) *QueryDeviceByStatusRequest {
	s.Status = &v
	return s
}

func (s *QueryDeviceByStatusRequest) SetCurrentPage(v int32) *QueryDeviceByStatusRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryDeviceByStatusRequest) SetPageSize(v int32) *QueryDeviceByStatusRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceByStatusRequest) SetBizTenantId(v string) *QueryDeviceByStatusRequest {
	s.BizTenantId = &v
	return s
}

func (s *QueryDeviceByStatusRequest) SetResourceGroupId(v string) *QueryDeviceByStatusRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *QueryDeviceByStatusRequest) SetRealTenantId(v string) *QueryDeviceByStatusRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryDeviceByStatusRequest) SetRealTripartiteKey(v string) *QueryDeviceByStatusRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryDeviceByStatusResponseBody struct {
	RequestId    *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Page         *int32                               `json:"Page,omitempty" xml:"Page,omitempty"`
	PageSize     *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageCount    *int32                               `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	Total        *int32                               `json:"Total,omitempty" xml:"Total,omitempty"`
	Data         *QueryDeviceByStatusResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceByStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByStatusResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceByStatusResponseBody) SetRequestId(v string) *QueryDeviceByStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceByStatusResponseBody) SetSuccess(v bool) *QueryDeviceByStatusResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceByStatusResponseBody) SetCode(v string) *QueryDeviceByStatusResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceByStatusResponseBody) SetErrorMessage(v string) *QueryDeviceByStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceByStatusResponseBody) SetPage(v int32) *QueryDeviceByStatusResponseBody {
	s.Page = &v
	return s
}

func (s *QueryDeviceByStatusResponseBody) SetPageSize(v int32) *QueryDeviceByStatusResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceByStatusResponseBody) SetPageCount(v int32) *QueryDeviceByStatusResponseBody {
	s.PageCount = &v
	return s
}

func (s *QueryDeviceByStatusResponseBody) SetTotal(v int32) *QueryDeviceByStatusResponseBody {
	s.Total = &v
	return s
}

func (s *QueryDeviceByStatusResponseBody) SetData(v *QueryDeviceByStatusResponseBodyData) *QueryDeviceByStatusResponseBody {
	s.Data = v
	return s
}

type QueryDeviceByStatusResponseBodyData struct {
	SimpleDeviceInfo []*QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo `json:"SimpleDeviceInfo,omitempty" xml:"SimpleDeviceInfo,omitempty" type:"Repeated"`
}

func (s QueryDeviceByStatusResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByStatusResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceByStatusResponseBodyData) SetSimpleDeviceInfo(v []*QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo) *QueryDeviceByStatusResponseBodyData {
	s.SimpleDeviceInfo = v
	return s
}

type QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo struct {
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	IotId        *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	Nickname     *string `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
	GmtCreate    *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified  *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	UtcCreate    *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	UtcModified  *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty"`
	DeviceSecret *string `json:"DeviceSecret,omitempty" xml:"DeviceSecret,omitempty"`
}

func (s QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo) SetProductKey(v string) *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo) SetDeviceName(v string) *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo) SetStatus(v string) *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo {
	s.Status = &v
	return s
}

func (s *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo) SetIotId(v string) *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo {
	s.IotId = &v
	return s
}

func (s *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo) SetNickname(v string) *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo {
	s.Nickname = &v
	return s
}

func (s *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo) SetGmtCreate(v string) *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo {
	s.GmtCreate = &v
	return s
}

func (s *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo) SetGmtModified(v string) *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo {
	s.GmtModified = &v
	return s
}

func (s *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo) SetUtcCreate(v string) *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo {
	s.UtcCreate = &v
	return s
}

func (s *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo) SetUtcModified(v string) *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo {
	s.UtcModified = &v
	return s
}

func (s *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo) SetDeviceSecret(v string) *QueryDeviceByStatusResponseBodyDataSimpleDeviceInfo {
	s.DeviceSecret = &v
	return s
}

type QueryDeviceByStatusResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceByStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceByStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceByStatusResponse) SetHeaders(v map[string]*string) *QueryDeviceByStatusResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceByStatusResponse) SetBody(v *QueryDeviceByStatusResponseBody) *QueryDeviceByStatusResponse {
	s.Body = v
	return s
}

type QueryDeviceByTagsRequest struct {
	ApiProduct    *string                        `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string                        `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string                        `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Tag           []*QueryDeviceByTagsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	CurrentPage   *int32                         `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize      *int32                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s QueryDeviceByTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByTagsRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceByTagsRequest) SetApiProduct(v string) *QueryDeviceByTagsRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceByTagsRequest) SetApiRevision(v string) *QueryDeviceByTagsRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceByTagsRequest) SetIotInstanceId(v string) *QueryDeviceByTagsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceByTagsRequest) SetTag(v []*QueryDeviceByTagsRequestTag) *QueryDeviceByTagsRequest {
	s.Tag = v
	return s
}

func (s *QueryDeviceByTagsRequest) SetCurrentPage(v int32) *QueryDeviceByTagsRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryDeviceByTagsRequest) SetPageSize(v int32) *QueryDeviceByTagsRequest {
	s.PageSize = &v
	return s
}

type QueryDeviceByTagsRequestTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s QueryDeviceByTagsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByTagsRequestTag) GoString() string {
	return s.String()
}

func (s *QueryDeviceByTagsRequestTag) SetTagKey(v string) *QueryDeviceByTagsRequestTag {
	s.TagKey = &v
	return s
}

func (s *QueryDeviceByTagsRequestTag) SetTagValue(v string) *QueryDeviceByTagsRequestTag {
	s.TagValue = &v
	return s
}

type QueryDeviceByTagsResponseBody struct {
	RequestId    *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Page         *int32                             `json:"Page,omitempty" xml:"Page,omitempty"`
	PageSize     *int32                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageCount    *int32                             `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	Total        *int32                             `json:"Total,omitempty" xml:"Total,omitempty"`
	Data         *QueryDeviceByTagsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceByTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByTagsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceByTagsResponseBody) SetRequestId(v string) *QueryDeviceByTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceByTagsResponseBody) SetSuccess(v bool) *QueryDeviceByTagsResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceByTagsResponseBody) SetCode(v string) *QueryDeviceByTagsResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceByTagsResponseBody) SetErrorMessage(v string) *QueryDeviceByTagsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceByTagsResponseBody) SetPage(v int32) *QueryDeviceByTagsResponseBody {
	s.Page = &v
	return s
}

func (s *QueryDeviceByTagsResponseBody) SetPageSize(v int32) *QueryDeviceByTagsResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceByTagsResponseBody) SetPageCount(v int32) *QueryDeviceByTagsResponseBody {
	s.PageCount = &v
	return s
}

func (s *QueryDeviceByTagsResponseBody) SetTotal(v int32) *QueryDeviceByTagsResponseBody {
	s.Total = &v
	return s
}

func (s *QueryDeviceByTagsResponseBody) SetData(v *QueryDeviceByTagsResponseBodyData) *QueryDeviceByTagsResponseBody {
	s.Data = v
	return s
}

type QueryDeviceByTagsResponseBodyData struct {
	SimpleDeviceInfo []*QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo `json:"SimpleDeviceInfo,omitempty" xml:"SimpleDeviceInfo,omitempty" type:"Repeated"`
}

func (s QueryDeviceByTagsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByTagsResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceByTagsResponseBodyData) SetSimpleDeviceInfo(v []*QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo) *QueryDeviceByTagsResponseBodyData {
	s.SimpleDeviceInfo = v
	return s
}

type QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo struct {
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	ProductKey  *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName  *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId       *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo) SetProductName(v string) *QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo {
	s.ProductName = &v
	return s
}

func (s *QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo) SetProductKey(v string) *QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo) SetDeviceName(v string) *QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo) SetIotId(v string) *QueryDeviceByTagsResponseBodyDataSimpleDeviceInfo {
	s.IotId = &v
	return s
}

type QueryDeviceByTagsResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceByTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceByTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceByTagsResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceByTagsResponse) SetHeaders(v map[string]*string) *QueryDeviceByTagsResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceByTagsResponse) SetBody(v *QueryDeviceByTagsResponseBody) *QueryDeviceByTagsResponse {
	s.Body = v
	return s
}

type QueryDeviceCertRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
}

func (s QueryDeviceCertRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceCertRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceCertRequest) SetApiProduct(v string) *QueryDeviceCertRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceCertRequest) SetApiRevision(v string) *QueryDeviceCertRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceCertRequest) SetIotInstanceId(v string) *QueryDeviceCertRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceCertRequest) SetProductKey(v string) *QueryDeviceCertRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceCertRequest) SetDeviceName(v string) *QueryDeviceCertRequest {
	s.DeviceName = &v
	return s
}

type QueryDeviceCertResponseBody struct {
	RequestId      *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                      `json:"Success,omitempty" xml:"Success,omitempty"`
	Code           *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage   *string                                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	DeviceCertInfo *QueryDeviceCertResponseBodyDeviceCertInfo `json:"DeviceCertInfo,omitempty" xml:"DeviceCertInfo,omitempty" type:"Struct"`
}

func (s QueryDeviceCertResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceCertResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceCertResponseBody) SetRequestId(v string) *QueryDeviceCertResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceCertResponseBody) SetSuccess(v bool) *QueryDeviceCertResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceCertResponseBody) SetCode(v string) *QueryDeviceCertResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceCertResponseBody) SetErrorMessage(v string) *QueryDeviceCertResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceCertResponseBody) SetDeviceCertInfo(v *QueryDeviceCertResponseBodyDeviceCertInfo) *QueryDeviceCertResponseBody {
	s.DeviceCertInfo = v
	return s
}

type QueryDeviceCertResponseBodyDeviceCertInfo struct {
	Status      *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Certificate *string `json:"Certificate,omitempty" xml:"Certificate,omitempty"`
	PrivateKey  *string `json:"PrivateKey,omitempty" xml:"PrivateKey,omitempty"`
	CertSN      *string `json:"CertSN,omitempty" xml:"CertSN,omitempty"`
}

func (s QueryDeviceCertResponseBodyDeviceCertInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceCertResponseBodyDeviceCertInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceCertResponseBodyDeviceCertInfo) SetStatus(v int32) *QueryDeviceCertResponseBodyDeviceCertInfo {
	s.Status = &v
	return s
}

func (s *QueryDeviceCertResponseBodyDeviceCertInfo) SetCertificate(v string) *QueryDeviceCertResponseBodyDeviceCertInfo {
	s.Certificate = &v
	return s
}

func (s *QueryDeviceCertResponseBodyDeviceCertInfo) SetPrivateKey(v string) *QueryDeviceCertResponseBodyDeviceCertInfo {
	s.PrivateKey = &v
	return s
}

func (s *QueryDeviceCertResponseBodyDeviceCertInfo) SetCertSN(v string) *QueryDeviceCertResponseBodyDeviceCertInfo {
	s.CertSN = &v
	return s
}

type QueryDeviceCertResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceCertResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceCertResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceCertResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceCertResponse) SetHeaders(v map[string]*string) *QueryDeviceCertResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceCertResponse) SetBody(v *QueryDeviceCertResponseBody) *QueryDeviceCertResponse {
	s.Body = v
	return s
}

type QueryDeviceDesiredPropertyRequest struct {
	ApiProduct        *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string   `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	Identifier        []*string `json:"Identifier,omitempty" xml:"Identifier,omitempty" type:"Repeated"`
	IotId             *string   `json:"IotId,omitempty" xml:"IotId,omitempty"`
	FunctionBlockId   *string   `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
	RealTenantId      *string   `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string   `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryDeviceDesiredPropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDesiredPropertyRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceDesiredPropertyRequest) SetApiProduct(v string) *QueryDeviceDesiredPropertyRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceDesiredPropertyRequest) SetApiRevision(v string) *QueryDeviceDesiredPropertyRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceDesiredPropertyRequest) SetIotInstanceId(v string) *QueryDeviceDesiredPropertyRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceDesiredPropertyRequest) SetProductKey(v string) *QueryDeviceDesiredPropertyRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceDesiredPropertyRequest) SetDeviceName(v string) *QueryDeviceDesiredPropertyRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceDesiredPropertyRequest) SetIdentifier(v []*string) *QueryDeviceDesiredPropertyRequest {
	s.Identifier = v
	return s
}

func (s *QueryDeviceDesiredPropertyRequest) SetIotId(v string) *QueryDeviceDesiredPropertyRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceDesiredPropertyRequest) SetFunctionBlockId(v string) *QueryDeviceDesiredPropertyRequest {
	s.FunctionBlockId = &v
	return s
}

func (s *QueryDeviceDesiredPropertyRequest) SetRealTenantId(v string) *QueryDeviceDesiredPropertyRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryDeviceDesiredPropertyRequest) SetRealTripartiteKey(v string) *QueryDeviceDesiredPropertyRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryDeviceDesiredPropertyResponseBody struct {
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryDeviceDesiredPropertyResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceDesiredPropertyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDesiredPropertyResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceDesiredPropertyResponseBody) SetRequestId(v string) *QueryDeviceDesiredPropertyResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponseBody) SetSuccess(v bool) *QueryDeviceDesiredPropertyResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponseBody) SetCode(v string) *QueryDeviceDesiredPropertyResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponseBody) SetErrorMessage(v string) *QueryDeviceDesiredPropertyResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponseBody) SetData(v *QueryDeviceDesiredPropertyResponseBodyData) *QueryDeviceDesiredPropertyResponseBody {
	s.Data = v
	return s
}

type QueryDeviceDesiredPropertyResponseBodyData struct {
	List *QueryDeviceDesiredPropertyResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
}

func (s QueryDeviceDesiredPropertyResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDesiredPropertyResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceDesiredPropertyResponseBodyData) SetList(v *QueryDeviceDesiredPropertyResponseBodyDataList) *QueryDeviceDesiredPropertyResponseBodyData {
	s.List = v
	return s
}

type QueryDeviceDesiredPropertyResponseBodyDataList struct {
	DesiredPropertyInfo []*QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo `json:"DesiredPropertyInfo,omitempty" xml:"DesiredPropertyInfo,omitempty" type:"Repeated"`
}

func (s QueryDeviceDesiredPropertyResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDesiredPropertyResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *QueryDeviceDesiredPropertyResponseBodyDataList) SetDesiredPropertyInfo(v []*QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo) *QueryDeviceDesiredPropertyResponseBodyDataList {
	s.DesiredPropertyInfo = v
	return s
}

type QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo struct {
	Unit       *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
	Identifier *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	DataType   *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Value      *string `json:"Value,omitempty" xml:"Value,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Version    *int64  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo) SetUnit(v string) *QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo {
	s.Unit = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo) SetIdentifier(v string) *QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo) SetDataType(v string) *QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo {
	s.DataType = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo) SetTime(v string) *QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo {
	s.Time = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo) SetValue(v string) *QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo {
	s.Value = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo) SetName(v string) *QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo {
	s.Name = &v
	return s
}

func (s *QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo) SetVersion(v int64) *QueryDeviceDesiredPropertyResponseBodyDataListDesiredPropertyInfo {
	s.Version = &v
	return s
}

type QueryDeviceDesiredPropertyResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceDesiredPropertyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceDesiredPropertyResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDesiredPropertyResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceDesiredPropertyResponse) SetHeaders(v map[string]*string) *QueryDeviceDesiredPropertyResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceDesiredPropertyResponse) SetBody(v *QueryDeviceDesiredPropertyResponseBody) *QueryDeviceDesiredPropertyResponse {
	s.Body = v
	return s
}

type QueryDeviceDetailRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId             *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryDeviceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceDetailRequest) SetApiProduct(v string) *QueryDeviceDetailRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceDetailRequest) SetApiRevision(v string) *QueryDeviceDetailRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceDetailRequest) SetIotInstanceId(v string) *QueryDeviceDetailRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceDetailRequest) SetProductKey(v string) *QueryDeviceDetailRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceDetailRequest) SetDeviceName(v string) *QueryDeviceDetailRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceDetailRequest) SetIotId(v string) *QueryDeviceDetailRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceDetailRequest) SetRealTenantId(v string) *QueryDeviceDetailRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryDeviceDetailRequest) SetRealTripartiteKey(v string) *QueryDeviceDetailRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryDeviceDetailResponseBody struct {
	RequestId    *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryDeviceDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceDetailResponseBody) SetRequestId(v string) *QueryDeviceDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceDetailResponseBody) SetSuccess(v bool) *QueryDeviceDetailResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceDetailResponseBody) SetCode(v string) *QueryDeviceDetailResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceDetailResponseBody) SetErrorMessage(v string) *QueryDeviceDetailResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceDetailResponseBody) SetData(v *QueryDeviceDetailResponseBodyData) *QueryDeviceDetailResponseBody {
	s.Data = v
	return s
}

type QueryDeviceDetailResponseBodyData struct {
	IotId           *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	ProductKey      *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ProductName     *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	DeviceName      *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceSecret    *string `json:"DeviceSecret,omitempty" xml:"DeviceSecret,omitempty"`
	FirmwareVersion *string `json:"FirmwareVersion,omitempty" xml:"FirmwareVersion,omitempty"`
	GmtCreate       *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	UtcCreate       *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	GmtActive       *string `json:"GmtActive,omitempty" xml:"GmtActive,omitempty"`
	UtcActive       *string `json:"UtcActive,omitempty" xml:"UtcActive,omitempty"`
	GmtOnline       *string `json:"GmtOnline,omitempty" xml:"GmtOnline,omitempty"`
	UtcOnline       *string `json:"UtcOnline,omitempty" xml:"UtcOnline,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	IpAddress       *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	NodeType        *int32  `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	Owner           *bool   `json:"Owner,omitempty" xml:"Owner,omitempty"`
	Nickname        *string `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
}

func (s QueryDeviceDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceDetailResponseBodyData) SetIotId(v string) *QueryDeviceDetailResponseBodyData {
	s.IotId = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetProductKey(v string) *QueryDeviceDetailResponseBodyData {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetProductName(v string) *QueryDeviceDetailResponseBodyData {
	s.ProductName = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetDeviceName(v string) *QueryDeviceDetailResponseBodyData {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetDeviceSecret(v string) *QueryDeviceDetailResponseBodyData {
	s.DeviceSecret = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetFirmwareVersion(v string) *QueryDeviceDetailResponseBodyData {
	s.FirmwareVersion = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetGmtCreate(v string) *QueryDeviceDetailResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetUtcCreate(v string) *QueryDeviceDetailResponseBodyData {
	s.UtcCreate = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetGmtActive(v string) *QueryDeviceDetailResponseBodyData {
	s.GmtActive = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetUtcActive(v string) *QueryDeviceDetailResponseBodyData {
	s.UtcActive = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetGmtOnline(v string) *QueryDeviceDetailResponseBodyData {
	s.GmtOnline = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetUtcOnline(v string) *QueryDeviceDetailResponseBodyData {
	s.UtcOnline = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetStatus(v string) *QueryDeviceDetailResponseBodyData {
	s.Status = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetIpAddress(v string) *QueryDeviceDetailResponseBodyData {
	s.IpAddress = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetNodeType(v int32) *QueryDeviceDetailResponseBodyData {
	s.NodeType = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetRegion(v string) *QueryDeviceDetailResponseBodyData {
	s.Region = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetOwner(v bool) *QueryDeviceDetailResponseBodyData {
	s.Owner = &v
	return s
}

func (s *QueryDeviceDetailResponseBodyData) SetNickname(v string) *QueryDeviceDetailResponseBodyData {
	s.Nickname = &v
	return s
}

type QueryDeviceDetailResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceDetailResponse) SetHeaders(v map[string]*string) *QueryDeviceDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceDetailResponse) SetBody(v *QueryDeviceDetailResponseBody) *QueryDeviceDetailResponse {
	s.Body = v
	return s
}

type QueryDeviceDistributeDetailRequest struct {
	ApiProduct  *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	JobId       *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s QueryDeviceDistributeDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDistributeDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceDistributeDetailRequest) SetApiProduct(v string) *QueryDeviceDistributeDetailRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceDistributeDetailRequest) SetApiRevision(v string) *QueryDeviceDistributeDetailRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceDistributeDetailRequest) SetJobId(v string) *QueryDeviceDistributeDetailRequest {
	s.JobId = &v
	return s
}

type QueryDeviceDistributeDetailResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	File         *string `json:"File,omitempty" xml:"File,omitempty"`
}

func (s QueryDeviceDistributeDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDistributeDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceDistributeDetailResponseBody) SetRequestId(v string) *QueryDeviceDistributeDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceDistributeDetailResponseBody) SetSuccess(v bool) *QueryDeviceDistributeDetailResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceDistributeDetailResponseBody) SetCode(v string) *QueryDeviceDistributeDetailResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceDistributeDetailResponseBody) SetErrorMessage(v string) *QueryDeviceDistributeDetailResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceDistributeDetailResponseBody) SetFile(v string) *QueryDeviceDistributeDetailResponseBody {
	s.File = &v
	return s
}

type QueryDeviceDistributeDetailResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceDistributeDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceDistributeDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDistributeDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceDistributeDetailResponse) SetHeaders(v map[string]*string) *QueryDeviceDistributeDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceDistributeDetailResponse) SetBody(v *QueryDeviceDistributeDetailResponseBody) *QueryDeviceDistributeDetailResponse {
	s.Body = v
	return s
}

type QueryDeviceDistributeJobRequest struct {
	ApiProduct  *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	JobId       *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s QueryDeviceDistributeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDistributeJobRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceDistributeJobRequest) SetApiProduct(v string) *QueryDeviceDistributeJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceDistributeJobRequest) SetApiRevision(v string) *QueryDeviceDistributeJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceDistributeJobRequest) SetJobId(v string) *QueryDeviceDistributeJobRequest {
	s.JobId = &v
	return s
}

type QueryDeviceDistributeJobResponseBody struct {
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryDeviceDistributeJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceDistributeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDistributeJobResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceDistributeJobResponseBody) SetRequestId(v string) *QueryDeviceDistributeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseBody) SetSuccess(v bool) *QueryDeviceDistributeJobResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseBody) SetCode(v string) *QueryDeviceDistributeJobResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseBody) SetErrorMessage(v string) *QueryDeviceDistributeJobResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseBody) SetData(v *QueryDeviceDistributeJobResponseBodyData) *QueryDeviceDistributeJobResponseBody {
	s.Data = v
	return s
}

type QueryDeviceDistributeJobResponseBodyData struct {
	SourceUid             *string                                                        `json:"SourceUid,omitempty" xml:"SourceUid,omitempty"`
	TargetUid             *string                                                        `json:"TargetUid,omitempty" xml:"TargetUid,omitempty"`
	SourceInstanceId      *string                                                        `json:"SourceInstanceId,omitempty" xml:"SourceInstanceId,omitempty"`
	JobId                 *string                                                        `json:"JobId,omitempty" xml:"JobId,omitempty"`
	ProductKey            *string                                                        `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Total                 *int32                                                         `json:"Total,omitempty" xml:"Total,omitempty"`
	Status                *int32                                                         `json:"Status,omitempty" xml:"Status,omitempty"`
	GmtCreate             *int64                                                         `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Strategy              *int32                                                         `json:"Strategy,omitempty" xml:"Strategy,omitempty"`
	TargetInstanceConfigs *QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigs `json:"TargetInstanceConfigs,omitempty" xml:"TargetInstanceConfigs,omitempty" type:"Struct"`
}

func (s QueryDeviceDistributeJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDistributeJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceDistributeJobResponseBodyData) SetSourceUid(v string) *QueryDeviceDistributeJobResponseBodyData {
	s.SourceUid = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseBodyData) SetTargetUid(v string) *QueryDeviceDistributeJobResponseBodyData {
	s.TargetUid = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseBodyData) SetSourceInstanceId(v string) *QueryDeviceDistributeJobResponseBodyData {
	s.SourceInstanceId = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseBodyData) SetJobId(v string) *QueryDeviceDistributeJobResponseBodyData {
	s.JobId = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseBodyData) SetProductKey(v string) *QueryDeviceDistributeJobResponseBodyData {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseBodyData) SetTotal(v int32) *QueryDeviceDistributeJobResponseBodyData {
	s.Total = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseBodyData) SetStatus(v int32) *QueryDeviceDistributeJobResponseBodyData {
	s.Status = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseBodyData) SetGmtCreate(v int64) *QueryDeviceDistributeJobResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseBodyData) SetStrategy(v int32) *QueryDeviceDistributeJobResponseBodyData {
	s.Strategy = &v
	return s
}

func (s *QueryDeviceDistributeJobResponseBodyData) SetTargetInstanceConfigs(v *QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigs) *QueryDeviceDistributeJobResponseBodyData {
	s.TargetInstanceConfigs = v
	return s
}

type QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigs struct {
	TargetInstanceConfigs []*QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigsTargetInstanceConfigs `json:"targetInstanceConfigs,omitempty" xml:"targetInstanceConfigs,omitempty" type:"Repeated"`
}

func (s QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigs) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigs) GoString() string {
	return s.String()
}

func (s *QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigs) SetTargetInstanceConfigs(v []*QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigsTargetInstanceConfigs) *QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigs {
	s.TargetInstanceConfigs = v
	return s
}

type QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigsTargetInstanceConfigs struct {
	TargetInstanceId *string `json:"TargetInstanceId,omitempty" xml:"TargetInstanceId,omitempty"`
}

func (s QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigsTargetInstanceConfigs) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigsTargetInstanceConfigs) GoString() string {
	return s.String()
}

func (s *QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigsTargetInstanceConfigs) SetTargetInstanceId(v string) *QueryDeviceDistributeJobResponseBodyDataTargetInstanceConfigsTargetInstanceConfigs {
	s.TargetInstanceId = &v
	return s
}

type QueryDeviceDistributeJobResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceDistributeJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceDistributeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceDistributeJobResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceDistributeJobResponse) SetHeaders(v map[string]*string) *QueryDeviceDistributeJobResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceDistributeJobResponse) SetBody(v *QueryDeviceDistributeJobResponseBody) *QueryDeviceDistributeJobResponse {
	s.Body = v
	return s
}

type QueryDeviceEventDataRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	StartTime         *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Identifier        *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	EventType         *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	Asc               *int32  `json:"Asc,omitempty" xml:"Asc,omitempty"`
	IotId             *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	EndTime           *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryDeviceEventDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceEventDataRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceEventDataRequest) SetApiProduct(v string) *QueryDeviceEventDataRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetApiRevision(v string) *QueryDeviceEventDataRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetIotInstanceId(v string) *QueryDeviceEventDataRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetPageSize(v int32) *QueryDeviceEventDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetProductKey(v string) *QueryDeviceEventDataRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetDeviceName(v string) *QueryDeviceEventDataRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetStartTime(v int64) *QueryDeviceEventDataRequest {
	s.StartTime = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetIdentifier(v string) *QueryDeviceEventDataRequest {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetEventType(v string) *QueryDeviceEventDataRequest {
	s.EventType = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetAsc(v int32) *QueryDeviceEventDataRequest {
	s.Asc = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetIotId(v string) *QueryDeviceEventDataRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetEndTime(v int64) *QueryDeviceEventDataRequest {
	s.EndTime = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetRealTenantId(v string) *QueryDeviceEventDataRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryDeviceEventDataRequest) SetRealTripartiteKey(v string) *QueryDeviceEventDataRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryDeviceEventDataResponseBody struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryDeviceEventDataResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceEventDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceEventDataResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceEventDataResponseBody) SetRequestId(v string) *QueryDeviceEventDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceEventDataResponseBody) SetSuccess(v bool) *QueryDeviceEventDataResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceEventDataResponseBody) SetCode(v string) *QueryDeviceEventDataResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceEventDataResponseBody) SetErrorMessage(v string) *QueryDeviceEventDataResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceEventDataResponseBody) SetData(v *QueryDeviceEventDataResponseBodyData) *QueryDeviceEventDataResponseBody {
	s.Data = v
	return s
}

type QueryDeviceEventDataResponseBodyData struct {
	NextTime  *int64                                    `json:"NextTime,omitempty" xml:"NextTime,omitempty"`
	NextValid *bool                                     `json:"NextValid,omitempty" xml:"NextValid,omitempty"`
	List      *QueryDeviceEventDataResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
}

func (s QueryDeviceEventDataResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceEventDataResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceEventDataResponseBodyData) SetNextTime(v int64) *QueryDeviceEventDataResponseBodyData {
	s.NextTime = &v
	return s
}

func (s *QueryDeviceEventDataResponseBodyData) SetNextValid(v bool) *QueryDeviceEventDataResponseBodyData {
	s.NextValid = &v
	return s
}

func (s *QueryDeviceEventDataResponseBodyData) SetList(v *QueryDeviceEventDataResponseBodyDataList) *QueryDeviceEventDataResponseBodyData {
	s.List = v
	return s
}

type QueryDeviceEventDataResponseBodyDataList struct {
	EventInfo []*QueryDeviceEventDataResponseBodyDataListEventInfo `json:"EventInfo,omitempty" xml:"EventInfo,omitempty" type:"Repeated"`
}

func (s QueryDeviceEventDataResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceEventDataResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *QueryDeviceEventDataResponseBodyDataList) SetEventInfo(v []*QueryDeviceEventDataResponseBodyDataListEventInfo) *QueryDeviceEventDataResponseBodyDataList {
	s.EventInfo = v
	return s
}

type QueryDeviceEventDataResponseBodyDataListEventInfo struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Identifier *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	EventType  *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	OutputData *string `json:"OutputData,omitempty" xml:"OutputData,omitempty"`
}

func (s QueryDeviceEventDataResponseBodyDataListEventInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceEventDataResponseBodyDataListEventInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceEventDataResponseBodyDataListEventInfo) SetTime(v string) *QueryDeviceEventDataResponseBodyDataListEventInfo {
	s.Time = &v
	return s
}

func (s *QueryDeviceEventDataResponseBodyDataListEventInfo) SetIdentifier(v string) *QueryDeviceEventDataResponseBodyDataListEventInfo {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceEventDataResponseBodyDataListEventInfo) SetName(v string) *QueryDeviceEventDataResponseBodyDataListEventInfo {
	s.Name = &v
	return s
}

func (s *QueryDeviceEventDataResponseBodyDataListEventInfo) SetEventType(v string) *QueryDeviceEventDataResponseBodyDataListEventInfo {
	s.EventType = &v
	return s
}

func (s *QueryDeviceEventDataResponseBodyDataListEventInfo) SetOutputData(v string) *QueryDeviceEventDataResponseBodyDataListEventInfo {
	s.OutputData = &v
	return s
}

type QueryDeviceEventDataResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceEventDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceEventDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceEventDataResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceEventDataResponse) SetHeaders(v map[string]*string) *QueryDeviceEventDataResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceEventDataResponse) SetBody(v *QueryDeviceEventDataResponseBody) *QueryDeviceEventDataResponse {
	s.Body = v
	return s
}

type QueryDeviceFileRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	FileId        *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
}

func (s QueryDeviceFileRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceFileRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceFileRequest) SetApiProduct(v string) *QueryDeviceFileRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceFileRequest) SetApiRevision(v string) *QueryDeviceFileRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceFileRequest) SetIotInstanceId(v string) *QueryDeviceFileRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceFileRequest) SetProductKey(v string) *QueryDeviceFileRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceFileRequest) SetDeviceName(v string) *QueryDeviceFileRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceFileRequest) SetIotId(v string) *QueryDeviceFileRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceFileRequest) SetFileId(v string) *QueryDeviceFileRequest {
	s.FileId = &v
	return s
}

type QueryDeviceFileResponseBody struct {
	RequestId    *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryDeviceFileResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceFileResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceFileResponseBody) SetRequestId(v string) *QueryDeviceFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceFileResponseBody) SetSuccess(v bool) *QueryDeviceFileResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceFileResponseBody) SetCode(v string) *QueryDeviceFileResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceFileResponseBody) SetErrorMessage(v string) *QueryDeviceFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceFileResponseBody) SetData(v *QueryDeviceFileResponseBodyData) *QueryDeviceFileResponseBody {
	s.Data = v
	return s
}

type QueryDeviceFileResponseBodyData struct {
	FileId       *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Size         *string `json:"Size,omitempty" xml:"Size,omitempty"`
	UtcCreatedOn *string `json:"UtcCreatedOn,omitempty" xml:"UtcCreatedOn,omitempty"`
	DownloadUrl  *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
}

func (s QueryDeviceFileResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceFileResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceFileResponseBodyData) SetFileId(v string) *QueryDeviceFileResponseBodyData {
	s.FileId = &v
	return s
}

func (s *QueryDeviceFileResponseBodyData) SetName(v string) *QueryDeviceFileResponseBodyData {
	s.Name = &v
	return s
}

func (s *QueryDeviceFileResponseBodyData) SetSize(v string) *QueryDeviceFileResponseBodyData {
	s.Size = &v
	return s
}

func (s *QueryDeviceFileResponseBodyData) SetUtcCreatedOn(v string) *QueryDeviceFileResponseBodyData {
	s.UtcCreatedOn = &v
	return s
}

func (s *QueryDeviceFileResponseBodyData) SetDownloadUrl(v string) *QueryDeviceFileResponseBodyData {
	s.DownloadUrl = &v
	return s
}

type QueryDeviceFileResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceFileResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceFileResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceFileResponse) SetHeaders(v map[string]*string) *QueryDeviceFileResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceFileResponse) SetBody(v *QueryDeviceFileResponseBody) *QueryDeviceFileResponse {
	s.Body = v
	return s
}

type QueryDeviceFileListRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s QueryDeviceFileListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceFileListRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceFileListRequest) SetApiProduct(v string) *QueryDeviceFileListRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceFileListRequest) SetApiRevision(v string) *QueryDeviceFileListRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceFileListRequest) SetIotInstanceId(v string) *QueryDeviceFileListRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceFileListRequest) SetPageSize(v int32) *QueryDeviceFileListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceFileListRequest) SetProductKey(v string) *QueryDeviceFileListRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceFileListRequest) SetDeviceName(v string) *QueryDeviceFileListRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceFileListRequest) SetIotId(v string) *QueryDeviceFileListRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceFileListRequest) SetCurrentPage(v int32) *QueryDeviceFileListRequest {
	s.CurrentPage = &v
	return s
}

type QueryDeviceFileListResponseBody struct {
	RequestId    *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	CurrentPage  *int32                               `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageCount    *int32                               `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	PageSize     *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Total        *int32                               `json:"Total,omitempty" xml:"Total,omitempty"`
	Data         *QueryDeviceFileListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceFileListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceFileListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceFileListResponseBody) SetRequestId(v string) *QueryDeviceFileListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceFileListResponseBody) SetSuccess(v bool) *QueryDeviceFileListResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceFileListResponseBody) SetCode(v string) *QueryDeviceFileListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceFileListResponseBody) SetErrorMessage(v string) *QueryDeviceFileListResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceFileListResponseBody) SetCurrentPage(v int32) *QueryDeviceFileListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *QueryDeviceFileListResponseBody) SetPageCount(v int32) *QueryDeviceFileListResponseBody {
	s.PageCount = &v
	return s
}

func (s *QueryDeviceFileListResponseBody) SetPageSize(v int32) *QueryDeviceFileListResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceFileListResponseBody) SetTotal(v int32) *QueryDeviceFileListResponseBody {
	s.Total = &v
	return s
}

func (s *QueryDeviceFileListResponseBody) SetData(v *QueryDeviceFileListResponseBodyData) *QueryDeviceFileListResponseBody {
	s.Data = v
	return s
}

type QueryDeviceFileListResponseBodyData struct {
	FileSummary []*QueryDeviceFileListResponseBodyDataFileSummary `json:"FileSummary,omitempty" xml:"FileSummary,omitempty" type:"Repeated"`
}

func (s QueryDeviceFileListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceFileListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceFileListResponseBodyData) SetFileSummary(v []*QueryDeviceFileListResponseBodyDataFileSummary) *QueryDeviceFileListResponseBodyData {
	s.FileSummary = v
	return s
}

type QueryDeviceFileListResponseBodyDataFileSummary struct {
	FileId       *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Size         *string `json:"Size,omitempty" xml:"Size,omitempty"`
	UtcCreatedOn *string `json:"UtcCreatedOn,omitempty" xml:"UtcCreatedOn,omitempty"`
}

func (s QueryDeviceFileListResponseBodyDataFileSummary) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceFileListResponseBodyDataFileSummary) GoString() string {
	return s.String()
}

func (s *QueryDeviceFileListResponseBodyDataFileSummary) SetFileId(v string) *QueryDeviceFileListResponseBodyDataFileSummary {
	s.FileId = &v
	return s
}

func (s *QueryDeviceFileListResponseBodyDataFileSummary) SetName(v string) *QueryDeviceFileListResponseBodyDataFileSummary {
	s.Name = &v
	return s
}

func (s *QueryDeviceFileListResponseBodyDataFileSummary) SetSize(v string) *QueryDeviceFileListResponseBodyDataFileSummary {
	s.Size = &v
	return s
}

func (s *QueryDeviceFileListResponseBodyDataFileSummary) SetUtcCreatedOn(v string) *QueryDeviceFileListResponseBodyDataFileSummary {
	s.UtcCreatedOn = &v
	return s
}

type QueryDeviceFileListResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceFileListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceFileListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceFileListResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceFileListResponse) SetHeaders(v map[string]*string) *QueryDeviceFileListResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceFileListResponse) SetBody(v *QueryDeviceFileListResponseBody) *QueryDeviceFileListResponse {
	s.Body = v
	return s
}

type QueryDeviceGroupByDeviceRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryDeviceGroupByDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByDeviceRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByDeviceRequest) SetApiProduct(v string) *QueryDeviceGroupByDeviceRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceGroupByDeviceRequest) SetApiRevision(v string) *QueryDeviceGroupByDeviceRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceGroupByDeviceRequest) SetIotInstanceId(v string) *QueryDeviceGroupByDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceGroupByDeviceRequest) SetProductKey(v string) *QueryDeviceGroupByDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceGroupByDeviceRequest) SetDeviceName(v string) *QueryDeviceGroupByDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceGroupByDeviceRequest) SetRealTenantId(v string) *QueryDeviceGroupByDeviceRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryDeviceGroupByDeviceRequest) SetRealTripartiteKey(v string) *QueryDeviceGroupByDeviceRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryDeviceGroupByDeviceResponseBody struct {
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	GroupInfos   *QueryDeviceGroupByDeviceResponseBodyGroupInfos `json:"GroupInfos,omitempty" xml:"GroupInfos,omitempty" type:"Struct"`
}

func (s QueryDeviceGroupByDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByDeviceResponseBody) SetRequestId(v string) *QueryDeviceGroupByDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceGroupByDeviceResponseBody) SetSuccess(v bool) *QueryDeviceGroupByDeviceResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceGroupByDeviceResponseBody) SetCode(v string) *QueryDeviceGroupByDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceGroupByDeviceResponseBody) SetErrorMessage(v string) *QueryDeviceGroupByDeviceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceGroupByDeviceResponseBody) SetGroupInfos(v *QueryDeviceGroupByDeviceResponseBodyGroupInfos) *QueryDeviceGroupByDeviceResponseBody {
	s.GroupInfos = v
	return s
}

type QueryDeviceGroupByDeviceResponseBodyGroupInfos struct {
	GroupInfo []*QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo `json:"GroupInfo,omitempty" xml:"GroupInfo,omitempty" type:"Repeated"`
}

func (s QueryDeviceGroupByDeviceResponseBodyGroupInfos) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByDeviceResponseBodyGroupInfos) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByDeviceResponseBodyGroupInfos) SetGroupInfo(v []*QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo) *QueryDeviceGroupByDeviceResponseBodyGroupInfos {
	s.GroupInfo = v
	return s
}

type QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo struct {
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	UtcCreate *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	GroupDesc *string `json:"GroupDesc,omitempty" xml:"GroupDesc,omitempty"`
}

func (s QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo) SetGroupId(v string) *QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo {
	s.GroupId = &v
	return s
}

func (s *QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo) SetGroupName(v string) *QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo {
	s.GroupName = &v
	return s
}

func (s *QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo) SetUtcCreate(v string) *QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo {
	s.UtcCreate = &v
	return s
}

func (s *QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo) SetGroupDesc(v string) *QueryDeviceGroupByDeviceResponseBodyGroupInfosGroupInfo {
	s.GroupDesc = &v
	return s
}

type QueryDeviceGroupByDeviceResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceGroupByDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceGroupByDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByDeviceResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByDeviceResponse) SetHeaders(v map[string]*string) *QueryDeviceGroupByDeviceResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceGroupByDeviceResponse) SetBody(v *QueryDeviceGroupByDeviceResponseBody) *QueryDeviceGroupByDeviceResponse {
	s.Body = v
	return s
}

type QueryDeviceGroupByTagsRequest struct {
	ApiProduct    *string                             `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string                             `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string                             `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Tag           []*QueryDeviceGroupByTagsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	CurrentPage   *int32                              `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize      *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s QueryDeviceGroupByTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByTagsRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByTagsRequest) SetApiProduct(v string) *QueryDeviceGroupByTagsRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceGroupByTagsRequest) SetApiRevision(v string) *QueryDeviceGroupByTagsRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceGroupByTagsRequest) SetIotInstanceId(v string) *QueryDeviceGroupByTagsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceGroupByTagsRequest) SetTag(v []*QueryDeviceGroupByTagsRequestTag) *QueryDeviceGroupByTagsRequest {
	s.Tag = v
	return s
}

func (s *QueryDeviceGroupByTagsRequest) SetCurrentPage(v int32) *QueryDeviceGroupByTagsRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryDeviceGroupByTagsRequest) SetPageSize(v int32) *QueryDeviceGroupByTagsRequest {
	s.PageSize = &v
	return s
}

type QueryDeviceGroupByTagsRequestTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s QueryDeviceGroupByTagsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByTagsRequestTag) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByTagsRequestTag) SetTagKey(v string) *QueryDeviceGroupByTagsRequestTag {
	s.TagKey = &v
	return s
}

func (s *QueryDeviceGroupByTagsRequestTag) SetTagValue(v string) *QueryDeviceGroupByTagsRequestTag {
	s.TagValue = &v
	return s
}

type QueryDeviceGroupByTagsResponseBody struct {
	RequestId    *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                 `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Page         *int32                                  `json:"Page,omitempty" xml:"Page,omitempty"`
	PageSize     *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageCount    *int32                                  `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	Total        *int32                                  `json:"Total,omitempty" xml:"Total,omitempty"`
	Data         *QueryDeviceGroupByTagsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceGroupByTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByTagsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByTagsResponseBody) SetRequestId(v string) *QueryDeviceGroupByTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponseBody) SetSuccess(v bool) *QueryDeviceGroupByTagsResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponseBody) SetCode(v string) *QueryDeviceGroupByTagsResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponseBody) SetErrorMessage(v string) *QueryDeviceGroupByTagsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponseBody) SetPage(v int32) *QueryDeviceGroupByTagsResponseBody {
	s.Page = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponseBody) SetPageSize(v int32) *QueryDeviceGroupByTagsResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponseBody) SetPageCount(v int32) *QueryDeviceGroupByTagsResponseBody {
	s.PageCount = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponseBody) SetTotal(v int32) *QueryDeviceGroupByTagsResponseBody {
	s.Total = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponseBody) SetData(v *QueryDeviceGroupByTagsResponseBodyData) *QueryDeviceGroupByTagsResponseBody {
	s.Data = v
	return s
}

type QueryDeviceGroupByTagsResponseBodyData struct {
	DeviceGroup []*QueryDeviceGroupByTagsResponseBodyDataDeviceGroup `json:"DeviceGroup,omitempty" xml:"DeviceGroup,omitempty" type:"Repeated"`
}

func (s QueryDeviceGroupByTagsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByTagsResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByTagsResponseBodyData) SetDeviceGroup(v []*QueryDeviceGroupByTagsResponseBodyDataDeviceGroup) *QueryDeviceGroupByTagsResponseBodyData {
	s.DeviceGroup = v
	return s
}

type QueryDeviceGroupByTagsResponseBodyDataDeviceGroup struct {
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s QueryDeviceGroupByTagsResponseBodyDataDeviceGroup) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByTagsResponseBodyDataDeviceGroup) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByTagsResponseBodyDataDeviceGroup) SetGroupId(v string) *QueryDeviceGroupByTagsResponseBodyDataDeviceGroup {
	s.GroupId = &v
	return s
}

func (s *QueryDeviceGroupByTagsResponseBodyDataDeviceGroup) SetGroupName(v string) *QueryDeviceGroupByTagsResponseBodyDataDeviceGroup {
	s.GroupName = &v
	return s
}

type QueryDeviceGroupByTagsResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceGroupByTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceGroupByTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupByTagsResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupByTagsResponse) SetHeaders(v map[string]*string) *QueryDeviceGroupByTagsResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceGroupByTagsResponse) SetBody(v *QueryDeviceGroupByTagsResponseBody) *QueryDeviceGroupByTagsResponse {
	s.Body = v
	return s
}

type QueryDeviceGroupInfoRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId           *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryDeviceGroupInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupInfoRequest) SetApiProduct(v string) *QueryDeviceGroupInfoRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceGroupInfoRequest) SetApiRevision(v string) *QueryDeviceGroupInfoRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceGroupInfoRequest) SetIotInstanceId(v string) *QueryDeviceGroupInfoRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceGroupInfoRequest) SetGroupId(v string) *QueryDeviceGroupInfoRequest {
	s.GroupId = &v
	return s
}

func (s *QueryDeviceGroupInfoRequest) SetRealTenantId(v string) *QueryDeviceGroupInfoRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryDeviceGroupInfoRequest) SetRealTripartiteKey(v string) *QueryDeviceGroupInfoRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryDeviceGroupInfoResponseBody struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryDeviceGroupInfoResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceGroupInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupInfoResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupInfoResponseBody) SetRequestId(v string) *QueryDeviceGroupInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceGroupInfoResponseBody) SetSuccess(v bool) *QueryDeviceGroupInfoResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceGroupInfoResponseBody) SetCode(v string) *QueryDeviceGroupInfoResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceGroupInfoResponseBody) SetErrorMessage(v string) *QueryDeviceGroupInfoResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceGroupInfoResponseBody) SetData(v *QueryDeviceGroupInfoResponseBodyData) *QueryDeviceGroupInfoResponseBody {
	s.Data = v
	return s
}

type QueryDeviceGroupInfoResponseBodyData struct {
	GroupId      *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	UtcCreate    *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	GroupName    *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	GroupDesc    *string `json:"GroupDesc,omitempty" xml:"GroupDesc,omitempty"`
	DeviceCount  *int32  `json:"DeviceCount,omitempty" xml:"DeviceCount,omitempty"`
	DeviceActive *int32  `json:"DeviceActive,omitempty" xml:"DeviceActive,omitempty"`
	DeviceOnline *int32  `json:"DeviceOnline,omitempty" xml:"DeviceOnline,omitempty"`
}

func (s QueryDeviceGroupInfoResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupInfoResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupInfoResponseBodyData) SetGroupId(v string) *QueryDeviceGroupInfoResponseBodyData {
	s.GroupId = &v
	return s
}

func (s *QueryDeviceGroupInfoResponseBodyData) SetUtcCreate(v string) *QueryDeviceGroupInfoResponseBodyData {
	s.UtcCreate = &v
	return s
}

func (s *QueryDeviceGroupInfoResponseBodyData) SetGroupName(v string) *QueryDeviceGroupInfoResponseBodyData {
	s.GroupName = &v
	return s
}

func (s *QueryDeviceGroupInfoResponseBodyData) SetGroupDesc(v string) *QueryDeviceGroupInfoResponseBodyData {
	s.GroupDesc = &v
	return s
}

func (s *QueryDeviceGroupInfoResponseBodyData) SetDeviceCount(v int32) *QueryDeviceGroupInfoResponseBodyData {
	s.DeviceCount = &v
	return s
}

func (s *QueryDeviceGroupInfoResponseBodyData) SetDeviceActive(v int32) *QueryDeviceGroupInfoResponseBodyData {
	s.DeviceActive = &v
	return s
}

func (s *QueryDeviceGroupInfoResponseBodyData) SetDeviceOnline(v int32) *QueryDeviceGroupInfoResponseBodyData {
	s.DeviceOnline = &v
	return s
}

type QueryDeviceGroupInfoResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceGroupInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceGroupInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupInfoResponse) SetHeaders(v map[string]*string) *QueryDeviceGroupInfoResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceGroupInfoResponse) SetBody(v *QueryDeviceGroupInfoResponseBody) *QueryDeviceGroupInfoResponse {
	s.Body = v
	return s
}

type QueryDeviceGroupListRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SuperGroupId  *string `json:"SuperGroupId,omitempty" xml:"SuperGroupId,omitempty"`
	GroupName     *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s QueryDeviceGroupListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupListRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupListRequest) SetApiProduct(v string) *QueryDeviceGroupListRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceGroupListRequest) SetApiRevision(v string) *QueryDeviceGroupListRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceGroupListRequest) SetIotInstanceId(v string) *QueryDeviceGroupListRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceGroupListRequest) SetPageSize(v int32) *QueryDeviceGroupListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceGroupListRequest) SetSuperGroupId(v string) *QueryDeviceGroupListRequest {
	s.SuperGroupId = &v
	return s
}

func (s *QueryDeviceGroupListRequest) SetGroupName(v string) *QueryDeviceGroupListRequest {
	s.GroupName = &v
	return s
}

func (s *QueryDeviceGroupListRequest) SetCurrentPage(v int32) *QueryDeviceGroupListRequest {
	s.CurrentPage = &v
	return s
}

type QueryDeviceGroupListResponseBody struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	CurrentPage  *int32                                `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageCount    *int32                                `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	PageSize     *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Total        *int32                                `json:"Total,omitempty" xml:"Total,omitempty"`
	Data         *QueryDeviceGroupListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceGroupListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupListResponseBody) SetRequestId(v string) *QueryDeviceGroupListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceGroupListResponseBody) SetSuccess(v bool) *QueryDeviceGroupListResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceGroupListResponseBody) SetCode(v string) *QueryDeviceGroupListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceGroupListResponseBody) SetErrorMessage(v string) *QueryDeviceGroupListResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceGroupListResponseBody) SetCurrentPage(v int32) *QueryDeviceGroupListResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *QueryDeviceGroupListResponseBody) SetPageCount(v int32) *QueryDeviceGroupListResponseBody {
	s.PageCount = &v
	return s
}

func (s *QueryDeviceGroupListResponseBody) SetPageSize(v int32) *QueryDeviceGroupListResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceGroupListResponseBody) SetTotal(v int32) *QueryDeviceGroupListResponseBody {
	s.Total = &v
	return s
}

func (s *QueryDeviceGroupListResponseBody) SetData(v *QueryDeviceGroupListResponseBodyData) *QueryDeviceGroupListResponseBody {
	s.Data = v
	return s
}

type QueryDeviceGroupListResponseBodyData struct {
	GroupInfo []*QueryDeviceGroupListResponseBodyDataGroupInfo `json:"GroupInfo,omitempty" xml:"GroupInfo,omitempty" type:"Repeated"`
}

func (s QueryDeviceGroupListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupListResponseBodyData) SetGroupInfo(v []*QueryDeviceGroupListResponseBodyDataGroupInfo) *QueryDeviceGroupListResponseBodyData {
	s.GroupInfo = v
	return s
}

type QueryDeviceGroupListResponseBodyDataGroupInfo struct {
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	UtcCreate *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	GroupDesc *string `json:"GroupDesc,omitempty" xml:"GroupDesc,omitempty"`
}

func (s QueryDeviceGroupListResponseBodyDataGroupInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupListResponseBodyDataGroupInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupListResponseBodyDataGroupInfo) SetGroupId(v string) *QueryDeviceGroupListResponseBodyDataGroupInfo {
	s.GroupId = &v
	return s
}

func (s *QueryDeviceGroupListResponseBodyDataGroupInfo) SetUtcCreate(v string) *QueryDeviceGroupListResponseBodyDataGroupInfo {
	s.UtcCreate = &v
	return s
}

func (s *QueryDeviceGroupListResponseBodyDataGroupInfo) SetGroupName(v string) *QueryDeviceGroupListResponseBodyDataGroupInfo {
	s.GroupName = &v
	return s
}

func (s *QueryDeviceGroupListResponseBodyDataGroupInfo) SetGroupDesc(v string) *QueryDeviceGroupListResponseBodyDataGroupInfo {
	s.GroupDesc = &v
	return s
}

type QueryDeviceGroupListResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceGroupListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceGroupListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupListResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupListResponse) SetHeaders(v map[string]*string) *QueryDeviceGroupListResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceGroupListResponse) SetBody(v *QueryDeviceGroupListResponseBody) *QueryDeviceGroupListResponse {
	s.Body = v
	return s
}

type QueryDeviceGroupTagListRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s QueryDeviceGroupTagListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupTagListRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupTagListRequest) SetApiProduct(v string) *QueryDeviceGroupTagListRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceGroupTagListRequest) SetApiRevision(v string) *QueryDeviceGroupTagListRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceGroupTagListRequest) SetIotInstanceId(v string) *QueryDeviceGroupTagListRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceGroupTagListRequest) SetGroupId(v string) *QueryDeviceGroupTagListRequest {
	s.GroupId = &v
	return s
}

type QueryDeviceGroupTagListResponseBody struct {
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryDeviceGroupTagListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceGroupTagListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupTagListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupTagListResponseBody) SetRequestId(v string) *QueryDeviceGroupTagListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceGroupTagListResponseBody) SetSuccess(v bool) *QueryDeviceGroupTagListResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceGroupTagListResponseBody) SetCode(v string) *QueryDeviceGroupTagListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceGroupTagListResponseBody) SetErrorMessage(v string) *QueryDeviceGroupTagListResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceGroupTagListResponseBody) SetData(v *QueryDeviceGroupTagListResponseBodyData) *QueryDeviceGroupTagListResponseBody {
	s.Data = v
	return s
}

type QueryDeviceGroupTagListResponseBodyData struct {
	GroupTagInfo []*QueryDeviceGroupTagListResponseBodyDataGroupTagInfo `json:"GroupTagInfo,omitempty" xml:"GroupTagInfo,omitempty" type:"Repeated"`
}

func (s QueryDeviceGroupTagListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupTagListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupTagListResponseBodyData) SetGroupTagInfo(v []*QueryDeviceGroupTagListResponseBodyDataGroupTagInfo) *QueryDeviceGroupTagListResponseBodyData {
	s.GroupTagInfo = v
	return s
}

type QueryDeviceGroupTagListResponseBodyDataGroupTagInfo struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s QueryDeviceGroupTagListResponseBodyDataGroupTagInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupTagListResponseBodyDataGroupTagInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupTagListResponseBodyDataGroupTagInfo) SetTagKey(v string) *QueryDeviceGroupTagListResponseBodyDataGroupTagInfo {
	s.TagKey = &v
	return s
}

func (s *QueryDeviceGroupTagListResponseBodyDataGroupTagInfo) SetTagValue(v string) *QueryDeviceGroupTagListResponseBodyDataGroupTagInfo {
	s.TagValue = &v
	return s
}

type QueryDeviceGroupTagListResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceGroupTagListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceGroupTagListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceGroupTagListResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceGroupTagListResponse) SetHeaders(v map[string]*string) *QueryDeviceGroupTagListResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceGroupTagListResponse) SetBody(v *QueryDeviceGroupTagListResponseBody) *QueryDeviceGroupTagListResponse {
	s.Body = v
	return s
}

type QueryDeviceListByDeviceGroupRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s QueryDeviceListByDeviceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceListByDeviceGroupRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceListByDeviceGroupRequest) SetApiProduct(v string) *QueryDeviceListByDeviceGroupRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupRequest) SetApiRevision(v string) *QueryDeviceListByDeviceGroupRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupRequest) SetIotInstanceId(v string) *QueryDeviceListByDeviceGroupRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupRequest) SetGroupId(v string) *QueryDeviceListByDeviceGroupRequest {
	s.GroupId = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupRequest) SetPageSize(v int32) *QueryDeviceListByDeviceGroupRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupRequest) SetCurrentPage(v int32) *QueryDeviceListByDeviceGroupRequest {
	s.CurrentPage = &v
	return s
}

type QueryDeviceListByDeviceGroupResponseBody struct {
	RequestId    *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                         `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                       `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Page         *int32                                        `json:"Page,omitempty" xml:"Page,omitempty"`
	PageSize     *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageCount    *int32                                        `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	Total        *int32                                        `json:"Total,omitempty" xml:"Total,omitempty"`
	Data         *QueryDeviceListByDeviceGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceListByDeviceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceListByDeviceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceListByDeviceGroupResponseBody) SetRequestId(v string) *QueryDeviceListByDeviceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponseBody) SetSuccess(v bool) *QueryDeviceListByDeviceGroupResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponseBody) SetCode(v string) *QueryDeviceListByDeviceGroupResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponseBody) SetErrorMessage(v string) *QueryDeviceListByDeviceGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponseBody) SetPage(v int32) *QueryDeviceListByDeviceGroupResponseBody {
	s.Page = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponseBody) SetPageSize(v int32) *QueryDeviceListByDeviceGroupResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponseBody) SetPageCount(v int32) *QueryDeviceListByDeviceGroupResponseBody {
	s.PageCount = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponseBody) SetTotal(v int32) *QueryDeviceListByDeviceGroupResponseBody {
	s.Total = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponseBody) SetData(v *QueryDeviceListByDeviceGroupResponseBodyData) *QueryDeviceListByDeviceGroupResponseBody {
	s.Data = v
	return s
}

type QueryDeviceListByDeviceGroupResponseBodyData struct {
	SimpleDeviceInfo []*QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo `json:"SimpleDeviceInfo,omitempty" xml:"SimpleDeviceInfo,omitempty" type:"Repeated"`
}

func (s QueryDeviceListByDeviceGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceListByDeviceGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceListByDeviceGroupResponseBodyData) SetSimpleDeviceInfo(v []*QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo) *QueryDeviceListByDeviceGroupResponseBodyData {
	s.SimpleDeviceInfo = v
	return s
}

type QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo struct {
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	ProductKey  *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName  *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId       *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo) SetProductName(v string) *QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo {
	s.ProductName = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo) SetProductKey(v string) *QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo) SetDeviceName(v string) *QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo) SetIotId(v string) *QueryDeviceListByDeviceGroupResponseBodyDataSimpleDeviceInfo {
	s.IotId = &v
	return s
}

type QueryDeviceListByDeviceGroupResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceListByDeviceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceListByDeviceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceListByDeviceGroupResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceListByDeviceGroupResponse) SetHeaders(v map[string]*string) *QueryDeviceListByDeviceGroupResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceListByDeviceGroupResponse) SetBody(v *QueryDeviceListByDeviceGroupResponseBody) *QueryDeviceListByDeviceGroupResponse {
	s.Body = v
	return s
}

type QueryDeviceOriginalEventDataRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Identifier    *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	Asc           *int32  `json:"Asc,omitempty" xml:"Asc,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s QueryDeviceOriginalEventDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalEventDataRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalEventDataRequest) SetApiProduct(v string) *QueryDeviceOriginalEventDataRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetApiRevision(v string) *QueryDeviceOriginalEventDataRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetIotInstanceId(v string) *QueryDeviceOriginalEventDataRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetPageSize(v int32) *QueryDeviceOriginalEventDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetProductKey(v string) *QueryDeviceOriginalEventDataRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetDeviceName(v string) *QueryDeviceOriginalEventDataRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetNextPageToken(v string) *QueryDeviceOriginalEventDataRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetStartTime(v int64) *QueryDeviceOriginalEventDataRequest {
	s.StartTime = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetIdentifier(v string) *QueryDeviceOriginalEventDataRequest {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetAsc(v int32) *QueryDeviceOriginalEventDataRequest {
	s.Asc = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetIotId(v string) *QueryDeviceOriginalEventDataRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceOriginalEventDataRequest) SetEndTime(v int64) *QueryDeviceOriginalEventDataRequest {
	s.EndTime = &v
	return s
}

type QueryDeviceOriginalEventDataResponseBody struct {
	RequestId    *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                         `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                       `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryDeviceOriginalEventDataResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceOriginalEventDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalEventDataResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalEventDataResponseBody) SetRequestId(v string) *QueryDeviceOriginalEventDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponseBody) SetSuccess(v bool) *QueryDeviceOriginalEventDataResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponseBody) SetCode(v string) *QueryDeviceOriginalEventDataResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponseBody) SetErrorMessage(v string) *QueryDeviceOriginalEventDataResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponseBody) SetData(v *QueryDeviceOriginalEventDataResponseBodyData) *QueryDeviceOriginalEventDataResponseBody {
	s.Data = v
	return s
}

type QueryDeviceOriginalEventDataResponseBodyData struct {
	NextPageToken *string                                           `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	NextValid     *bool                                             `json:"NextValid,omitempty" xml:"NextValid,omitempty"`
	List          *QueryDeviceOriginalEventDataResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
}

func (s QueryDeviceOriginalEventDataResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalEventDataResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalEventDataResponseBodyData) SetNextPageToken(v string) *QueryDeviceOriginalEventDataResponseBodyData {
	s.NextPageToken = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponseBodyData) SetNextValid(v bool) *QueryDeviceOriginalEventDataResponseBodyData {
	s.NextValid = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponseBodyData) SetList(v *QueryDeviceOriginalEventDataResponseBodyDataList) *QueryDeviceOriginalEventDataResponseBodyData {
	s.List = v
	return s
}

type QueryDeviceOriginalEventDataResponseBodyDataList struct {
	EventInfo []*QueryDeviceOriginalEventDataResponseBodyDataListEventInfo `json:"EventInfo,omitempty" xml:"EventInfo,omitempty" type:"Repeated"`
}

func (s QueryDeviceOriginalEventDataResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalEventDataResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalEventDataResponseBodyDataList) SetEventInfo(v []*QueryDeviceOriginalEventDataResponseBodyDataListEventInfo) *QueryDeviceOriginalEventDataResponseBodyDataList {
	s.EventInfo = v
	return s
}

type QueryDeviceOriginalEventDataResponseBodyDataListEventInfo struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Identifier *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	EventType  *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	OutputData *string `json:"OutputData,omitempty" xml:"OutputData,omitempty"`
}

func (s QueryDeviceOriginalEventDataResponseBodyDataListEventInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalEventDataResponseBodyDataListEventInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalEventDataResponseBodyDataListEventInfo) SetTime(v string) *QueryDeviceOriginalEventDataResponseBodyDataListEventInfo {
	s.Time = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponseBodyDataListEventInfo) SetIdentifier(v string) *QueryDeviceOriginalEventDataResponseBodyDataListEventInfo {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponseBodyDataListEventInfo) SetName(v string) *QueryDeviceOriginalEventDataResponseBodyDataListEventInfo {
	s.Name = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponseBodyDataListEventInfo) SetEventType(v string) *QueryDeviceOriginalEventDataResponseBodyDataListEventInfo {
	s.EventType = &v
	return s
}

func (s *QueryDeviceOriginalEventDataResponseBodyDataListEventInfo) SetOutputData(v string) *QueryDeviceOriginalEventDataResponseBodyDataListEventInfo {
	s.OutputData = &v
	return s
}

type QueryDeviceOriginalEventDataResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceOriginalEventDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceOriginalEventDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalEventDataResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalEventDataResponse) SetHeaders(v map[string]*string) *QueryDeviceOriginalEventDataResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceOriginalEventDataResponse) SetBody(v *QueryDeviceOriginalEventDataResponseBody) *QueryDeviceOriginalEventDataResponse {
	s.Body = v
	return s
}

type QueryDeviceOriginalPropertyDataRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Identifier    *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	Asc           *int32  `json:"Asc,omitempty" xml:"Asc,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s QueryDeviceOriginalPropertyDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyDataRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetApiProduct(v string) *QueryDeviceOriginalPropertyDataRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetApiRevision(v string) *QueryDeviceOriginalPropertyDataRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetIotInstanceId(v string) *QueryDeviceOriginalPropertyDataRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetPageSize(v int32) *QueryDeviceOriginalPropertyDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetProductKey(v string) *QueryDeviceOriginalPropertyDataRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetDeviceName(v string) *QueryDeviceOriginalPropertyDataRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetNextPageToken(v string) *QueryDeviceOriginalPropertyDataRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetStartTime(v int64) *QueryDeviceOriginalPropertyDataRequest {
	s.StartTime = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetIdentifier(v string) *QueryDeviceOriginalPropertyDataRequest {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetAsc(v int32) *QueryDeviceOriginalPropertyDataRequest {
	s.Asc = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetIotId(v string) *QueryDeviceOriginalPropertyDataRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataRequest) SetEndTime(v int64) *QueryDeviceOriginalPropertyDataRequest {
	s.EndTime = &v
	return s
}

type QueryDeviceOriginalPropertyDataResponseBody struct {
	RequestId    *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryDeviceOriginalPropertyDataResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceOriginalPropertyDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyDataResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyDataResponseBody) SetRequestId(v string) *QueryDeviceOriginalPropertyDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataResponseBody) SetSuccess(v bool) *QueryDeviceOriginalPropertyDataResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataResponseBody) SetCode(v string) *QueryDeviceOriginalPropertyDataResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataResponseBody) SetErrorMessage(v string) *QueryDeviceOriginalPropertyDataResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataResponseBody) SetData(v *QueryDeviceOriginalPropertyDataResponseBodyData) *QueryDeviceOriginalPropertyDataResponseBody {
	s.Data = v
	return s
}

type QueryDeviceOriginalPropertyDataResponseBodyData struct {
	NextValid     *bool                                                `json:"NextValid,omitempty" xml:"NextValid,omitempty"`
	NextPageToken *string                                              `json:"nextPageToken,omitempty" xml:"nextPageToken,omitempty"`
	List          *QueryDeviceOriginalPropertyDataResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
}

func (s QueryDeviceOriginalPropertyDataResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyDataResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyDataResponseBodyData) SetNextValid(v bool) *QueryDeviceOriginalPropertyDataResponseBodyData {
	s.NextValid = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataResponseBodyData) SetNextPageToken(v string) *QueryDeviceOriginalPropertyDataResponseBodyData {
	s.NextPageToken = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataResponseBodyData) SetList(v *QueryDeviceOriginalPropertyDataResponseBodyDataList) *QueryDeviceOriginalPropertyDataResponseBodyData {
	s.List = v
	return s
}

type QueryDeviceOriginalPropertyDataResponseBodyDataList struct {
	PropertyInfo []*QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo `json:"PropertyInfo,omitempty" xml:"PropertyInfo,omitempty" type:"Repeated"`
}

func (s QueryDeviceOriginalPropertyDataResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyDataResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyDataResponseBodyDataList) SetPropertyInfo(v []*QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo) *QueryDeviceOriginalPropertyDataResponseBodyDataList {
	s.PropertyInfo = v
	return s
}

type QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo struct {
	Time  *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo) SetTime(v string) *QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo {
	s.Time = &v
	return s
}

func (s *QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo) SetValue(v string) *QueryDeviceOriginalPropertyDataResponseBodyDataListPropertyInfo {
	s.Value = &v
	return s
}

type QueryDeviceOriginalPropertyDataResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceOriginalPropertyDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceOriginalPropertyDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyDataResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyDataResponse) SetHeaders(v map[string]*string) *QueryDeviceOriginalPropertyDataResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceOriginalPropertyDataResponse) SetBody(v *QueryDeviceOriginalPropertyDataResponseBody) *QueryDeviceOriginalPropertyDataResponse {
	s.Body = v
	return s
}

type QueryDeviceOriginalPropertyStatusRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	Asc           *int32  `json:"Asc,omitempty" xml:"Asc,omitempty"`
}

func (s QueryDeviceOriginalPropertyStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyStatusRequest) SetApiProduct(v string) *QueryDeviceOriginalPropertyStatusRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusRequest) SetApiRevision(v string) *QueryDeviceOriginalPropertyStatusRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusRequest) SetIotInstanceId(v string) *QueryDeviceOriginalPropertyStatusRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusRequest) SetPageSize(v int32) *QueryDeviceOriginalPropertyStatusRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusRequest) SetProductKey(v string) *QueryDeviceOriginalPropertyStatusRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusRequest) SetDeviceName(v string) *QueryDeviceOriginalPropertyStatusRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusRequest) SetNextPageToken(v string) *QueryDeviceOriginalPropertyStatusRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusRequest) SetIotId(v string) *QueryDeviceOriginalPropertyStatusRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusRequest) SetAsc(v int32) *QueryDeviceOriginalPropertyStatusRequest {
	s.Asc = &v
	return s
}

type QueryDeviceOriginalPropertyStatusResponseBody struct {
	RequestId    *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                              `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryDeviceOriginalPropertyStatusResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceOriginalPropertyStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyStatusResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyStatusResponseBody) SetRequestId(v string) *QueryDeviceOriginalPropertyStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponseBody) SetSuccess(v bool) *QueryDeviceOriginalPropertyStatusResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponseBody) SetCode(v string) *QueryDeviceOriginalPropertyStatusResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponseBody) SetErrorMessage(v string) *QueryDeviceOriginalPropertyStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponseBody) SetData(v *QueryDeviceOriginalPropertyStatusResponseBodyData) *QueryDeviceOriginalPropertyStatusResponseBody {
	s.Data = v
	return s
}

type QueryDeviceOriginalPropertyStatusResponseBodyData struct {
	NextValid     *bool                                                  `json:"NextValid,omitempty" xml:"NextValid,omitempty"`
	NextPageToken *string                                                `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	List          *QueryDeviceOriginalPropertyStatusResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
}

func (s QueryDeviceOriginalPropertyStatusResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyStatusResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyStatusResponseBodyData) SetNextValid(v bool) *QueryDeviceOriginalPropertyStatusResponseBodyData {
	s.NextValid = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponseBodyData) SetNextPageToken(v string) *QueryDeviceOriginalPropertyStatusResponseBodyData {
	s.NextPageToken = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponseBodyData) SetList(v *QueryDeviceOriginalPropertyStatusResponseBodyDataList) *QueryDeviceOriginalPropertyStatusResponseBodyData {
	s.List = v
	return s
}

type QueryDeviceOriginalPropertyStatusResponseBodyDataList struct {
	PropertyStatusDataInfo []*QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo `json:"PropertyStatusDataInfo,omitempty" xml:"PropertyStatusDataInfo,omitempty" type:"Repeated"`
}

func (s QueryDeviceOriginalPropertyStatusResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyStatusResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyStatusResponseBodyDataList) SetPropertyStatusDataInfo(v []*QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo) *QueryDeviceOriginalPropertyStatusResponseBodyDataList {
	s.PropertyStatusDataInfo = v
	return s
}

type QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo struct {
	Identifier *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	Value      *string `json:"Value,omitempty" xml:"Value,omitempty"`
	Time       *int64  `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo) SetIdentifier(v string) *QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo) SetValue(v string) *QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo {
	s.Value = &v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo) SetTime(v int64) *QueryDeviceOriginalPropertyStatusResponseBodyDataListPropertyStatusDataInfo {
	s.Time = &v
	return s
}

type QueryDeviceOriginalPropertyStatusResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceOriginalPropertyStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceOriginalPropertyStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalPropertyStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalPropertyStatusResponse) SetHeaders(v map[string]*string) *QueryDeviceOriginalPropertyStatusResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceOriginalPropertyStatusResponse) SetBody(v *QueryDeviceOriginalPropertyStatusResponseBody) *QueryDeviceOriginalPropertyStatusResponse {
	s.Body = v
	return s
}

type QueryDeviceOriginalServiceDataRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Identifier    *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	Asc           *int32  `json:"Asc,omitempty" xml:"Asc,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s QueryDeviceOriginalServiceDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalServiceDataRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalServiceDataRequest) SetApiProduct(v string) *QueryDeviceOriginalServiceDataRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetApiRevision(v string) *QueryDeviceOriginalServiceDataRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetIotInstanceId(v string) *QueryDeviceOriginalServiceDataRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetPageSize(v int32) *QueryDeviceOriginalServiceDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetProductKey(v string) *QueryDeviceOriginalServiceDataRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetDeviceName(v string) *QueryDeviceOriginalServiceDataRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetNextPageToken(v string) *QueryDeviceOriginalServiceDataRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetStartTime(v int64) *QueryDeviceOriginalServiceDataRequest {
	s.StartTime = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetIdentifier(v string) *QueryDeviceOriginalServiceDataRequest {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetAsc(v int32) *QueryDeviceOriginalServiceDataRequest {
	s.Asc = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetIotId(v string) *QueryDeviceOriginalServiceDataRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataRequest) SetEndTime(v int64) *QueryDeviceOriginalServiceDataRequest {
	s.EndTime = &v
	return s
}

type QueryDeviceOriginalServiceDataResponseBody struct {
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryDeviceOriginalServiceDataResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceOriginalServiceDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalServiceDataResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalServiceDataResponseBody) SetRequestId(v string) *QueryDeviceOriginalServiceDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponseBody) SetSuccess(v bool) *QueryDeviceOriginalServiceDataResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponseBody) SetCode(v string) *QueryDeviceOriginalServiceDataResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponseBody) SetErrorMessage(v string) *QueryDeviceOriginalServiceDataResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponseBody) SetData(v *QueryDeviceOriginalServiceDataResponseBodyData) *QueryDeviceOriginalServiceDataResponseBody {
	s.Data = v
	return s
}

type QueryDeviceOriginalServiceDataResponseBodyData struct {
	NextPageToken *string                                             `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	NextValid     *bool                                               `json:"NextValid,omitempty" xml:"NextValid,omitempty"`
	List          *QueryDeviceOriginalServiceDataResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
}

func (s QueryDeviceOriginalServiceDataResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalServiceDataResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalServiceDataResponseBodyData) SetNextPageToken(v string) *QueryDeviceOriginalServiceDataResponseBodyData {
	s.NextPageToken = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponseBodyData) SetNextValid(v bool) *QueryDeviceOriginalServiceDataResponseBodyData {
	s.NextValid = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponseBodyData) SetList(v *QueryDeviceOriginalServiceDataResponseBodyDataList) *QueryDeviceOriginalServiceDataResponseBodyData {
	s.List = v
	return s
}

type QueryDeviceOriginalServiceDataResponseBodyDataList struct {
	ServiceInfo []*QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo `json:"ServiceInfo,omitempty" xml:"ServiceInfo,omitempty" type:"Repeated"`
}

func (s QueryDeviceOriginalServiceDataResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalServiceDataResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalServiceDataResponseBodyDataList) SetServiceInfo(v []*QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo) *QueryDeviceOriginalServiceDataResponseBodyDataList {
	s.ServiceInfo = v
	return s
}

type QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Identifier *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	InputData  *string `json:"InputData,omitempty" xml:"InputData,omitempty"`
	OutputData *string `json:"OutputData,omitempty" xml:"OutputData,omitempty"`
}

func (s QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo) SetTime(v string) *QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo {
	s.Time = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo) SetIdentifier(v string) *QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo) SetName(v string) *QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo {
	s.Name = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo) SetInputData(v string) *QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo {
	s.InputData = &v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo) SetOutputData(v string) *QueryDeviceOriginalServiceDataResponseBodyDataListServiceInfo {
	s.OutputData = &v
	return s
}

type QueryDeviceOriginalServiceDataResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceOriginalServiceDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceOriginalServiceDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceOriginalServiceDataResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceOriginalServiceDataResponse) SetHeaders(v map[string]*string) *QueryDeviceOriginalServiceDataResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceOriginalServiceDataResponse) SetBody(v *QueryDeviceOriginalServiceDataResponseBody) *QueryDeviceOriginalServiceDataResponse {
	s.Body = v
	return s
}

type QueryDevicePropRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId             *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryDevicePropRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropRequest) GoString() string {
	return s.String()
}

func (s *QueryDevicePropRequest) SetApiProduct(v string) *QueryDevicePropRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDevicePropRequest) SetApiRevision(v string) *QueryDevicePropRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDevicePropRequest) SetIotInstanceId(v string) *QueryDevicePropRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDevicePropRequest) SetProductKey(v string) *QueryDevicePropRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDevicePropRequest) SetDeviceName(v string) *QueryDevicePropRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDevicePropRequest) SetIotId(v string) *QueryDevicePropRequest {
	s.IotId = &v
	return s
}

func (s *QueryDevicePropRequest) SetRealTenantId(v string) *QueryDevicePropRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryDevicePropRequest) SetRealTripartiteKey(v string) *QueryDevicePropRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryDevicePropResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Props        *string `json:"Props,omitempty" xml:"Props,omitempty"`
}

func (s QueryDevicePropResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDevicePropResponseBody) SetRequestId(v string) *QueryDevicePropResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDevicePropResponseBody) SetSuccess(v bool) *QueryDevicePropResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDevicePropResponseBody) SetCode(v string) *QueryDevicePropResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDevicePropResponseBody) SetErrorMessage(v string) *QueryDevicePropResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDevicePropResponseBody) SetProps(v string) *QueryDevicePropResponseBody {
	s.Props = &v
	return s
}

type QueryDevicePropResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDevicePropResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDevicePropResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropResponse) GoString() string {
	return s.String()
}

func (s *QueryDevicePropResponse) SetHeaders(v map[string]*string) *QueryDevicePropResponse {
	s.Headers = v
	return s
}

func (s *QueryDevicePropResponse) SetBody(v *QueryDevicePropResponseBody) *QueryDevicePropResponse {
	s.Body = v
	return s
}

type QueryDevicePropertiesDataRequest struct {
	ApiProduct        *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize          *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey        *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string   `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	StartTime         *int64    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Identifier        []*string `json:"Identifier,omitempty" xml:"Identifier,omitempty" type:"Repeated"`
	Asc               *int32    `json:"Asc,omitempty" xml:"Asc,omitempty"`
	IotId             *string   `json:"IotId,omitempty" xml:"IotId,omitempty"`
	EndTime           *int64    `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RealTenantId      *string   `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string   `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryDevicePropertiesDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertiesDataRequest) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertiesDataRequest) SetApiProduct(v string) *QueryDevicePropertiesDataRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetApiRevision(v string) *QueryDevicePropertiesDataRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetIotInstanceId(v string) *QueryDevicePropertiesDataRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetPageSize(v int32) *QueryDevicePropertiesDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetProductKey(v string) *QueryDevicePropertiesDataRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetDeviceName(v string) *QueryDevicePropertiesDataRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetStartTime(v int64) *QueryDevicePropertiesDataRequest {
	s.StartTime = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetIdentifier(v []*string) *QueryDevicePropertiesDataRequest {
	s.Identifier = v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetAsc(v int32) *QueryDevicePropertiesDataRequest {
	s.Asc = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetIotId(v string) *QueryDevicePropertiesDataRequest {
	s.IotId = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetEndTime(v int64) *QueryDevicePropertiesDataRequest {
	s.EndTime = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetRealTenantId(v string) *QueryDevicePropertiesDataRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryDevicePropertiesDataRequest) SetRealTripartiteKey(v string) *QueryDevicePropertiesDataRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryDevicePropertiesDataResponseBody struct {
	RequestId         *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success           *bool                                                   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code              *string                                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage      *string                                                 `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NextValid         *bool                                                   `json:"NextValid,omitempty" xml:"NextValid,omitempty"`
	NextTime          *int64                                                  `json:"NextTime,omitempty" xml:"NextTime,omitempty"`
	PropertyDataInfos *QueryDevicePropertiesDataResponseBodyPropertyDataInfos `json:"PropertyDataInfos,omitempty" xml:"PropertyDataInfos,omitempty" type:"Struct"`
}

func (s QueryDevicePropertiesDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertiesDataResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertiesDataResponseBody) SetRequestId(v string) *QueryDevicePropertiesDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDevicePropertiesDataResponseBody) SetSuccess(v bool) *QueryDevicePropertiesDataResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDevicePropertiesDataResponseBody) SetCode(v string) *QueryDevicePropertiesDataResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDevicePropertiesDataResponseBody) SetErrorMessage(v string) *QueryDevicePropertiesDataResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDevicePropertiesDataResponseBody) SetNextValid(v bool) *QueryDevicePropertiesDataResponseBody {
	s.NextValid = &v
	return s
}

func (s *QueryDevicePropertiesDataResponseBody) SetNextTime(v int64) *QueryDevicePropertiesDataResponseBody {
	s.NextTime = &v
	return s
}

func (s *QueryDevicePropertiesDataResponseBody) SetPropertyDataInfos(v *QueryDevicePropertiesDataResponseBodyPropertyDataInfos) *QueryDevicePropertiesDataResponseBody {
	s.PropertyDataInfos = v
	return s
}

type QueryDevicePropertiesDataResponseBodyPropertyDataInfos struct {
	PropertyDataInfo []*QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo `json:"PropertyDataInfo,omitempty" xml:"PropertyDataInfo,omitempty" type:"Repeated"`
}

func (s QueryDevicePropertiesDataResponseBodyPropertyDataInfos) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertiesDataResponseBodyPropertyDataInfos) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertiesDataResponseBodyPropertyDataInfos) SetPropertyDataInfo(v []*QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo) *QueryDevicePropertiesDataResponseBodyPropertyDataInfos {
	s.PropertyDataInfo = v
	return s
}

type QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo struct {
	Identifier *string                                                                     `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	List       *QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
}

func (s QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo) SetIdentifier(v string) *QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo {
	s.Identifier = &v
	return s
}

func (s *QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo) SetList(v *QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoList) *QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfo {
	s.List = v
	return s
}

type QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoList struct {
	PropertyInfo []*QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo `json:"PropertyInfo,omitempty" xml:"PropertyInfo,omitempty" type:"Repeated"`
}

func (s QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoList) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoList) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoList) SetPropertyInfo(v []*QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo) *QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoList {
	s.PropertyInfo = v
	return s
}

type QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo struct {
	Time  *int64  `json:"Time,omitempty" xml:"Time,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo) SetTime(v int64) *QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo {
	s.Time = &v
	return s
}

func (s *QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo) SetValue(v string) *QueryDevicePropertiesDataResponseBodyPropertyDataInfosPropertyDataInfoListPropertyInfo {
	s.Value = &v
	return s
}

type QueryDevicePropertiesDataResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDevicePropertiesDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDevicePropertiesDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertiesDataResponse) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertiesDataResponse) SetHeaders(v map[string]*string) *QueryDevicePropertiesDataResponse {
	s.Headers = v
	return s
}

func (s *QueryDevicePropertiesDataResponse) SetBody(v *QueryDevicePropertiesDataResponseBody) *QueryDevicePropertiesDataResponse {
	s.Body = v
	return s
}

type QueryDevicePropertyDataRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	StartTime         *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Identifier        *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	Asc               *int32  `json:"Asc,omitempty" xml:"Asc,omitempty"`
	IotId             *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	EndTime           *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryDevicePropertyDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyDataRequest) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyDataRequest) SetApiProduct(v string) *QueryDevicePropertyDataRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetApiRevision(v string) *QueryDevicePropertyDataRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetIotInstanceId(v string) *QueryDevicePropertyDataRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetPageSize(v int32) *QueryDevicePropertyDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetProductKey(v string) *QueryDevicePropertyDataRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetDeviceName(v string) *QueryDevicePropertyDataRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetStartTime(v int64) *QueryDevicePropertyDataRequest {
	s.StartTime = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetIdentifier(v string) *QueryDevicePropertyDataRequest {
	s.Identifier = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetAsc(v int32) *QueryDevicePropertyDataRequest {
	s.Asc = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetIotId(v string) *QueryDevicePropertyDataRequest {
	s.IotId = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetEndTime(v int64) *QueryDevicePropertyDataRequest {
	s.EndTime = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetRealTenantId(v string) *QueryDevicePropertyDataRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryDevicePropertyDataRequest) SetRealTripartiteKey(v string) *QueryDevicePropertyDataRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryDevicePropertyDataResponseBody struct {
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryDevicePropertyDataResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDevicePropertyDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyDataResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyDataResponseBody) SetRequestId(v string) *QueryDevicePropertyDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDevicePropertyDataResponseBody) SetSuccess(v bool) *QueryDevicePropertyDataResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDevicePropertyDataResponseBody) SetCode(v string) *QueryDevicePropertyDataResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDevicePropertyDataResponseBody) SetErrorMessage(v string) *QueryDevicePropertyDataResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDevicePropertyDataResponseBody) SetData(v *QueryDevicePropertyDataResponseBodyData) *QueryDevicePropertyDataResponseBody {
	s.Data = v
	return s
}

type QueryDevicePropertyDataResponseBodyData struct {
	NextValid *bool                                        `json:"NextValid,omitempty" xml:"NextValid,omitempty"`
	NextTime  *int64                                       `json:"NextTime,omitempty" xml:"NextTime,omitempty"`
	List      *QueryDevicePropertyDataResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
}

func (s QueryDevicePropertyDataResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyDataResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyDataResponseBodyData) SetNextValid(v bool) *QueryDevicePropertyDataResponseBodyData {
	s.NextValid = &v
	return s
}

func (s *QueryDevicePropertyDataResponseBodyData) SetNextTime(v int64) *QueryDevicePropertyDataResponseBodyData {
	s.NextTime = &v
	return s
}

func (s *QueryDevicePropertyDataResponseBodyData) SetList(v *QueryDevicePropertyDataResponseBodyDataList) *QueryDevicePropertyDataResponseBodyData {
	s.List = v
	return s
}

type QueryDevicePropertyDataResponseBodyDataList struct {
	PropertyInfo []*QueryDevicePropertyDataResponseBodyDataListPropertyInfo `json:"PropertyInfo,omitempty" xml:"PropertyInfo,omitempty" type:"Repeated"`
}

func (s QueryDevicePropertyDataResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyDataResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyDataResponseBodyDataList) SetPropertyInfo(v []*QueryDevicePropertyDataResponseBodyDataListPropertyInfo) *QueryDevicePropertyDataResponseBodyDataList {
	s.PropertyInfo = v
	return s
}

type QueryDevicePropertyDataResponseBodyDataListPropertyInfo struct {
	Time  *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryDevicePropertyDataResponseBodyDataListPropertyInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyDataResponseBodyDataListPropertyInfo) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyDataResponseBodyDataListPropertyInfo) SetTime(v string) *QueryDevicePropertyDataResponseBodyDataListPropertyInfo {
	s.Time = &v
	return s
}

func (s *QueryDevicePropertyDataResponseBodyDataListPropertyInfo) SetValue(v string) *QueryDevicePropertyDataResponseBodyDataListPropertyInfo {
	s.Value = &v
	return s
}

type QueryDevicePropertyDataResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDevicePropertyDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDevicePropertyDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyDataResponse) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyDataResponse) SetHeaders(v map[string]*string) *QueryDevicePropertyDataResponse {
	s.Headers = v
	return s
}

func (s *QueryDevicePropertyDataResponse) SetBody(v *QueryDevicePropertyDataResponseBody) *QueryDevicePropertyDataResponse {
	s.Body = v
	return s
}

type QueryDevicePropertyStatusRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId             *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	FunctionBlockId   *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryDevicePropertyStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyStatusRequest) SetApiProduct(v string) *QueryDevicePropertyStatusRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDevicePropertyStatusRequest) SetApiRevision(v string) *QueryDevicePropertyStatusRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDevicePropertyStatusRequest) SetIotInstanceId(v string) *QueryDevicePropertyStatusRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDevicePropertyStatusRequest) SetProductKey(v string) *QueryDevicePropertyStatusRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDevicePropertyStatusRequest) SetDeviceName(v string) *QueryDevicePropertyStatusRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDevicePropertyStatusRequest) SetIotId(v string) *QueryDevicePropertyStatusRequest {
	s.IotId = &v
	return s
}

func (s *QueryDevicePropertyStatusRequest) SetFunctionBlockId(v string) *QueryDevicePropertyStatusRequest {
	s.FunctionBlockId = &v
	return s
}

func (s *QueryDevicePropertyStatusRequest) SetRealTenantId(v string) *QueryDevicePropertyStatusRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryDevicePropertyStatusRequest) SetRealTripartiteKey(v string) *QueryDevicePropertyStatusRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryDevicePropertyStatusResponseBody struct {
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                      `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryDevicePropertyStatusResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDevicePropertyStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyStatusResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyStatusResponseBody) SetRequestId(v string) *QueryDevicePropertyStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDevicePropertyStatusResponseBody) SetSuccess(v bool) *QueryDevicePropertyStatusResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDevicePropertyStatusResponseBody) SetCode(v string) *QueryDevicePropertyStatusResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDevicePropertyStatusResponseBody) SetErrorMessage(v string) *QueryDevicePropertyStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDevicePropertyStatusResponseBody) SetData(v *QueryDevicePropertyStatusResponseBodyData) *QueryDevicePropertyStatusResponseBody {
	s.Data = v
	return s
}

type QueryDevicePropertyStatusResponseBodyData struct {
	List *QueryDevicePropertyStatusResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
}

func (s QueryDevicePropertyStatusResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyStatusResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyStatusResponseBodyData) SetList(v *QueryDevicePropertyStatusResponseBodyDataList) *QueryDevicePropertyStatusResponseBodyData {
	s.List = v
	return s
}

type QueryDevicePropertyStatusResponseBodyDataList struct {
	PropertyStatusInfo []*QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo `json:"PropertyStatusInfo,omitempty" xml:"PropertyStatusInfo,omitempty" type:"Repeated"`
}

func (s QueryDevicePropertyStatusResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyStatusResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyStatusResponseBodyDataList) SetPropertyStatusInfo(v []*QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo) *QueryDevicePropertyStatusResponseBodyDataList {
	s.PropertyStatusInfo = v
	return s
}

type QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo struct {
	Unit       *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
	Identifier *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	DataType   *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Value      *string `json:"Value,omitempty" xml:"Value,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo) SetUnit(v string) *QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo {
	s.Unit = &v
	return s
}

func (s *QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo) SetIdentifier(v string) *QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo {
	s.Identifier = &v
	return s
}

func (s *QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo) SetDataType(v string) *QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo {
	s.DataType = &v
	return s
}

func (s *QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo) SetTime(v string) *QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo {
	s.Time = &v
	return s
}

func (s *QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo) SetValue(v string) *QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo {
	s.Value = &v
	return s
}

func (s *QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo) SetName(v string) *QueryDevicePropertyStatusResponseBodyDataListPropertyStatusInfo {
	s.Name = &v
	return s
}

type QueryDevicePropertyStatusResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDevicePropertyStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDevicePropertyStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDevicePropertyStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryDevicePropertyStatusResponse) SetHeaders(v map[string]*string) *QueryDevicePropertyStatusResponse {
	s.Headers = v
	return s
}

func (s *QueryDevicePropertyStatusResponse) SetBody(v *QueryDevicePropertyStatusResponseBody) *QueryDevicePropertyStatusResponse {
	s.Body = v
	return s
}

type QueryDeviceServiceDataRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	StartTime         *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Identifier        *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	Asc               *int32  `json:"Asc,omitempty" xml:"Asc,omitempty"`
	IotId             *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	EndTime           *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryDeviceServiceDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceServiceDataRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceServiceDataRequest) SetApiProduct(v string) *QueryDeviceServiceDataRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetApiRevision(v string) *QueryDeviceServiceDataRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetIotInstanceId(v string) *QueryDeviceServiceDataRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetPageSize(v int32) *QueryDeviceServiceDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetProductKey(v string) *QueryDeviceServiceDataRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetDeviceName(v string) *QueryDeviceServiceDataRequest {
	s.DeviceName = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetStartTime(v int64) *QueryDeviceServiceDataRequest {
	s.StartTime = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetIdentifier(v string) *QueryDeviceServiceDataRequest {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetAsc(v int32) *QueryDeviceServiceDataRequest {
	s.Asc = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetIotId(v string) *QueryDeviceServiceDataRequest {
	s.IotId = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetEndTime(v int64) *QueryDeviceServiceDataRequest {
	s.EndTime = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetRealTenantId(v string) *QueryDeviceServiceDataRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryDeviceServiceDataRequest) SetRealTripartiteKey(v string) *QueryDeviceServiceDataRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryDeviceServiceDataResponseBody struct {
	RequestId    *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                 `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryDeviceServiceDataResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceServiceDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceServiceDataResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceServiceDataResponseBody) SetRequestId(v string) *QueryDeviceServiceDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceServiceDataResponseBody) SetSuccess(v bool) *QueryDeviceServiceDataResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceServiceDataResponseBody) SetCode(v string) *QueryDeviceServiceDataResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceServiceDataResponseBody) SetErrorMessage(v string) *QueryDeviceServiceDataResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceServiceDataResponseBody) SetData(v *QueryDeviceServiceDataResponseBodyData) *QueryDeviceServiceDataResponseBody {
	s.Data = v
	return s
}

type QueryDeviceServiceDataResponseBodyData struct {
	NextTime  *int64                                      `json:"NextTime,omitempty" xml:"NextTime,omitempty"`
	NextValid *bool                                       `json:"NextValid,omitempty" xml:"NextValid,omitempty"`
	List      *QueryDeviceServiceDataResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
}

func (s QueryDeviceServiceDataResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceServiceDataResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceServiceDataResponseBodyData) SetNextTime(v int64) *QueryDeviceServiceDataResponseBodyData {
	s.NextTime = &v
	return s
}

func (s *QueryDeviceServiceDataResponseBodyData) SetNextValid(v bool) *QueryDeviceServiceDataResponseBodyData {
	s.NextValid = &v
	return s
}

func (s *QueryDeviceServiceDataResponseBodyData) SetList(v *QueryDeviceServiceDataResponseBodyDataList) *QueryDeviceServiceDataResponseBodyData {
	s.List = v
	return s
}

type QueryDeviceServiceDataResponseBodyDataList struct {
	ServiceInfo []*QueryDeviceServiceDataResponseBodyDataListServiceInfo `json:"ServiceInfo,omitempty" xml:"ServiceInfo,omitempty" type:"Repeated"`
}

func (s QueryDeviceServiceDataResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceServiceDataResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *QueryDeviceServiceDataResponseBodyDataList) SetServiceInfo(v []*QueryDeviceServiceDataResponseBodyDataListServiceInfo) *QueryDeviceServiceDataResponseBodyDataList {
	s.ServiceInfo = v
	return s
}

type QueryDeviceServiceDataResponseBodyDataListServiceInfo struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Identifier *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	InputData  *string `json:"InputData,omitempty" xml:"InputData,omitempty"`
	OutputData *string `json:"OutputData,omitempty" xml:"OutputData,omitempty"`
}

func (s QueryDeviceServiceDataResponseBodyDataListServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceServiceDataResponseBodyDataListServiceInfo) GoString() string {
	return s.String()
}

func (s *QueryDeviceServiceDataResponseBodyDataListServiceInfo) SetTime(v string) *QueryDeviceServiceDataResponseBodyDataListServiceInfo {
	s.Time = &v
	return s
}

func (s *QueryDeviceServiceDataResponseBodyDataListServiceInfo) SetIdentifier(v string) *QueryDeviceServiceDataResponseBodyDataListServiceInfo {
	s.Identifier = &v
	return s
}

func (s *QueryDeviceServiceDataResponseBodyDataListServiceInfo) SetName(v string) *QueryDeviceServiceDataResponseBodyDataListServiceInfo {
	s.Name = &v
	return s
}

func (s *QueryDeviceServiceDataResponseBodyDataListServiceInfo) SetInputData(v string) *QueryDeviceServiceDataResponseBodyDataListServiceInfo {
	s.InputData = &v
	return s
}

func (s *QueryDeviceServiceDataResponseBodyDataListServiceInfo) SetOutputData(v string) *QueryDeviceServiceDataResponseBodyDataListServiceInfo {
	s.OutputData = &v
	return s
}

type QueryDeviceServiceDataResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceServiceDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceServiceDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceServiceDataResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceServiceDataResponse) SetHeaders(v map[string]*string) *QueryDeviceServiceDataResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceServiceDataResponse) SetBody(v *QueryDeviceServiceDataResponseBody) *QueryDeviceServiceDataResponse {
	s.Body = v
	return s
}

type QueryDeviceStatisticsRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	GroupId           *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryDeviceStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceStatisticsRequest) GoString() string {
	return s.String()
}

func (s *QueryDeviceStatisticsRequest) SetApiProduct(v string) *QueryDeviceStatisticsRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryDeviceStatisticsRequest) SetApiRevision(v string) *QueryDeviceStatisticsRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryDeviceStatisticsRequest) SetIotInstanceId(v string) *QueryDeviceStatisticsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryDeviceStatisticsRequest) SetProductKey(v string) *QueryDeviceStatisticsRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryDeviceStatisticsRequest) SetGroupId(v string) *QueryDeviceStatisticsRequest {
	s.GroupId = &v
	return s
}

func (s *QueryDeviceStatisticsRequest) SetRealTenantId(v string) *QueryDeviceStatisticsRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryDeviceStatisticsRequest) SetRealTripartiteKey(v string) *QueryDeviceStatisticsRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryDeviceStatisticsResponseBody struct {
	RequestId    *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryDeviceStatisticsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryDeviceStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDeviceStatisticsResponseBody) SetRequestId(v string) *QueryDeviceStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDeviceStatisticsResponseBody) SetSuccess(v bool) *QueryDeviceStatisticsResponseBody {
	s.Success = &v
	return s
}

func (s *QueryDeviceStatisticsResponseBody) SetCode(v string) *QueryDeviceStatisticsResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDeviceStatisticsResponseBody) SetErrorMessage(v string) *QueryDeviceStatisticsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryDeviceStatisticsResponseBody) SetData(v *QueryDeviceStatisticsResponseBodyData) *QueryDeviceStatisticsResponseBody {
	s.Data = v
	return s
}

type QueryDeviceStatisticsResponseBodyData struct {
	DeviceCount *int64 `json:"deviceCount,omitempty" xml:"deviceCount,omitempty"`
	OnlineCount *int64 `json:"onlineCount,omitempty" xml:"onlineCount,omitempty"`
	ActiveCount *int64 `json:"activeCount,omitempty" xml:"activeCount,omitempty"`
}

func (s QueryDeviceStatisticsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceStatisticsResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDeviceStatisticsResponseBodyData) SetDeviceCount(v int64) *QueryDeviceStatisticsResponseBodyData {
	s.DeviceCount = &v
	return s
}

func (s *QueryDeviceStatisticsResponseBodyData) SetOnlineCount(v int64) *QueryDeviceStatisticsResponseBodyData {
	s.OnlineCount = &v
	return s
}

func (s *QueryDeviceStatisticsResponseBodyData) SetActiveCount(v int64) *QueryDeviceStatisticsResponseBodyData {
	s.ActiveCount = &v
	return s
}

type QueryDeviceStatisticsResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryDeviceStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryDeviceStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDeviceStatisticsResponse) GoString() string {
	return s.String()
}

func (s *QueryDeviceStatisticsResponse) SetHeaders(v map[string]*string) *QueryDeviceStatisticsResponse {
	s.Headers = v
	return s
}

func (s *QueryDeviceStatisticsResponse) SetBody(v *QueryDeviceStatisticsResponseBody) *QueryDeviceStatisticsResponse {
	s.Body = v
	return s
}

type QueryEdgeDriverRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Type          *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	DriverName    *string `json:"DriverName,omitempty" xml:"DriverName,omitempty"`
}

func (s QueryEdgeDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverRequest) SetApiProduct(v string) *QueryEdgeDriverRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryEdgeDriverRequest) SetApiRevision(v string) *QueryEdgeDriverRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryEdgeDriverRequest) SetIotInstanceId(v string) *QueryEdgeDriverRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeDriverRequest) SetPageSize(v int32) *QueryEdgeDriverRequest {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeDriverRequest) SetCurrentPage(v int32) *QueryEdgeDriverRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeDriverRequest) SetType(v int32) *QueryEdgeDriverRequest {
	s.Type = &v
	return s
}

func (s *QueryEdgeDriverRequest) SetDriverName(v string) *QueryEdgeDriverRequest {
	s.DriverName = &v
	return s
}

type QueryEdgeDriverResponseBody struct {
	RequestId    *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryEdgeDriverResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryEdgeDriverResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverResponseBody) SetRequestId(v string) *QueryEdgeDriverResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeDriverResponseBody) SetSuccess(v bool) *QueryEdgeDriverResponseBody {
	s.Success = &v
	return s
}

func (s *QueryEdgeDriverResponseBody) SetCode(v string) *QueryEdgeDriverResponseBody {
	s.Code = &v
	return s
}

func (s *QueryEdgeDriverResponseBody) SetErrorMessage(v string) *QueryEdgeDriverResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeDriverResponseBody) SetData(v *QueryEdgeDriverResponseBodyData) *QueryEdgeDriverResponseBody {
	s.Data = v
	return s
}

type QueryEdgeDriverResponseBodyData struct {
	Total       *int32                                       `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize    *int32                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage *int32                                       `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	DriverList  []*QueryEdgeDriverResponseBodyDataDriverList `json:"DriverList,omitempty" xml:"DriverList,omitempty" type:"Repeated"`
}

func (s QueryEdgeDriverResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverResponseBodyData) SetTotal(v int32) *QueryEdgeDriverResponseBodyData {
	s.Total = &v
	return s
}

func (s *QueryEdgeDriverResponseBodyData) SetPageSize(v int32) *QueryEdgeDriverResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeDriverResponseBodyData) SetCurrentPage(v int32) *QueryEdgeDriverResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeDriverResponseBodyData) SetDriverList(v []*QueryEdgeDriverResponseBodyDataDriverList) *QueryEdgeDriverResponseBodyData {
	s.DriverList = v
	return s
}

type QueryEdgeDriverResponseBodyDataDriverList struct {
	DriverId             *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	DriverName           *string `json:"DriverName,omitempty" xml:"DriverName,omitempty"`
	DriverProtocol       *string `json:"DriverProtocol,omitempty" xml:"DriverProtocol,omitempty"`
	Runtime              *string `json:"Runtime,omitempty" xml:"Runtime,omitempty"`
	CpuArch              *string `json:"CpuArch,omitempty" xml:"CpuArch,omitempty"`
	Type                 *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	IsBuiltIn            *bool   `json:"IsBuiltIn,omitempty" xml:"IsBuiltIn,omitempty"`
	GmtCreateTimestamp   *int64  `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty"`
	GmtModifiedTimestamp *int64  `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty"`
}

func (s QueryEdgeDriverResponseBodyDataDriverList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverResponseBodyDataDriverList) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverResponseBodyDataDriverList) SetDriverId(v string) *QueryEdgeDriverResponseBodyDataDriverList {
	s.DriverId = &v
	return s
}

func (s *QueryEdgeDriverResponseBodyDataDriverList) SetDriverName(v string) *QueryEdgeDriverResponseBodyDataDriverList {
	s.DriverName = &v
	return s
}

func (s *QueryEdgeDriverResponseBodyDataDriverList) SetDriverProtocol(v string) *QueryEdgeDriverResponseBodyDataDriverList {
	s.DriverProtocol = &v
	return s
}

func (s *QueryEdgeDriverResponseBodyDataDriverList) SetRuntime(v string) *QueryEdgeDriverResponseBodyDataDriverList {
	s.Runtime = &v
	return s
}

func (s *QueryEdgeDriverResponseBodyDataDriverList) SetCpuArch(v string) *QueryEdgeDriverResponseBodyDataDriverList {
	s.CpuArch = &v
	return s
}

func (s *QueryEdgeDriverResponseBodyDataDriverList) SetType(v int32) *QueryEdgeDriverResponseBodyDataDriverList {
	s.Type = &v
	return s
}

func (s *QueryEdgeDriverResponseBodyDataDriverList) SetIsBuiltIn(v bool) *QueryEdgeDriverResponseBodyDataDriverList {
	s.IsBuiltIn = &v
	return s
}

func (s *QueryEdgeDriverResponseBodyDataDriverList) SetGmtCreateTimestamp(v int64) *QueryEdgeDriverResponseBodyDataDriverList {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *QueryEdgeDriverResponseBodyDataDriverList) SetGmtModifiedTimestamp(v int64) *QueryEdgeDriverResponseBodyDataDriverList {
	s.GmtModifiedTimestamp = &v
	return s
}

type QueryEdgeDriverResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryEdgeDriverResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryEdgeDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverResponse) SetHeaders(v map[string]*string) *QueryEdgeDriverResponse {
	s.Headers = v
	return s
}

func (s *QueryEdgeDriverResponse) SetBody(v *QueryEdgeDriverResponseBody) *QueryEdgeDriverResponse {
	s.Body = v
	return s
}

type QueryEdgeDriverVersionRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	DriverVersion *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty"`
	VersionState  *int32  `json:"VersionState,omitempty" xml:"VersionState,omitempty"`
}

func (s QueryEdgeDriverVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverVersionRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverVersionRequest) SetApiProduct(v string) *QueryEdgeDriverVersionRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryEdgeDriverVersionRequest) SetApiRevision(v string) *QueryEdgeDriverVersionRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryEdgeDriverVersionRequest) SetIotInstanceId(v string) *QueryEdgeDriverVersionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeDriverVersionRequest) SetPageSize(v int32) *QueryEdgeDriverVersionRequest {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeDriverVersionRequest) SetCurrentPage(v int32) *QueryEdgeDriverVersionRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeDriverVersionRequest) SetDriverId(v string) *QueryEdgeDriverVersionRequest {
	s.DriverId = &v
	return s
}

func (s *QueryEdgeDriverVersionRequest) SetDriverVersion(v string) *QueryEdgeDriverVersionRequest {
	s.DriverVersion = &v
	return s
}

func (s *QueryEdgeDriverVersionRequest) SetVersionState(v int32) *QueryEdgeDriverVersionRequest {
	s.VersionState = &v
	return s
}

type QueryEdgeDriverVersionResponseBody struct {
	RequestId    *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                 `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryEdgeDriverVersionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryEdgeDriverVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverVersionResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverVersionResponseBody) SetRequestId(v string) *QueryEdgeDriverVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBody) SetSuccess(v bool) *QueryEdgeDriverVersionResponseBody {
	s.Success = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBody) SetCode(v string) *QueryEdgeDriverVersionResponseBody {
	s.Code = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBody) SetErrorMessage(v string) *QueryEdgeDriverVersionResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBody) SetData(v *QueryEdgeDriverVersionResponseBodyData) *QueryEdgeDriverVersionResponseBody {
	s.Data = v
	return s
}

type QueryEdgeDriverVersionResponseBodyData struct {
	Total             *int32                                                     `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize          *int32                                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage       *int32                                                     `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	DriverVersionList []*QueryEdgeDriverVersionResponseBodyDataDriverVersionList `json:"DriverVersionList,omitempty" xml:"DriverVersionList,omitempty" type:"Repeated"`
}

func (s QueryEdgeDriverVersionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverVersionResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverVersionResponseBodyData) SetTotal(v int32) *QueryEdgeDriverVersionResponseBodyData {
	s.Total = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBodyData) SetPageSize(v int32) *QueryEdgeDriverVersionResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBodyData) SetCurrentPage(v int32) *QueryEdgeDriverVersionResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBodyData) SetDriverVersionList(v []*QueryEdgeDriverVersionResponseBodyDataDriverVersionList) *QueryEdgeDriverVersionResponseBodyData {
	s.DriverVersionList = v
	return s
}

type QueryEdgeDriverVersionResponseBodyDataDriverVersionList struct {
	DriverId             *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	DriverVersion        *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty"`
	VersionState         *string `json:"VersionState,omitempty" xml:"VersionState,omitempty"`
	EdgeVersion          *string `json:"EdgeVersion,omitempty" xml:"EdgeVersion,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SourceConfig         *string `json:"SourceConfig,omitempty" xml:"SourceConfig,omitempty"`
	DriverConfig         *string `json:"DriverConfig,omitempty" xml:"DriverConfig,omitempty"`
	ContainerConfig      *string `json:"ContainerConfig,omitempty" xml:"ContainerConfig,omitempty"`
	ConfigCheckRule      *string `json:"ConfigCheckRule,omitempty" xml:"ConfigCheckRule,omitempty"`
	GmtCreateTimestamp   *int64  `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty"`
	GmtModifiedTimestamp *int64  `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty"`
	Argument             *string `json:"Argument,omitempty" xml:"Argument,omitempty"`
}

func (s QueryEdgeDriverVersionResponseBodyDataDriverVersionList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverVersionResponseBodyDataDriverVersionList) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverVersionResponseBodyDataDriverVersionList) SetDriverId(v string) *QueryEdgeDriverVersionResponseBodyDataDriverVersionList {
	s.DriverId = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBodyDataDriverVersionList) SetDriverVersion(v string) *QueryEdgeDriverVersionResponseBodyDataDriverVersionList {
	s.DriverVersion = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBodyDataDriverVersionList) SetVersionState(v string) *QueryEdgeDriverVersionResponseBodyDataDriverVersionList {
	s.VersionState = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBodyDataDriverVersionList) SetEdgeVersion(v string) *QueryEdgeDriverVersionResponseBodyDataDriverVersionList {
	s.EdgeVersion = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBodyDataDriverVersionList) SetDescription(v string) *QueryEdgeDriverVersionResponseBodyDataDriverVersionList {
	s.Description = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBodyDataDriverVersionList) SetSourceConfig(v string) *QueryEdgeDriverVersionResponseBodyDataDriverVersionList {
	s.SourceConfig = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBodyDataDriverVersionList) SetDriverConfig(v string) *QueryEdgeDriverVersionResponseBodyDataDriverVersionList {
	s.DriverConfig = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBodyDataDriverVersionList) SetContainerConfig(v string) *QueryEdgeDriverVersionResponseBodyDataDriverVersionList {
	s.ContainerConfig = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBodyDataDriverVersionList) SetConfigCheckRule(v string) *QueryEdgeDriverVersionResponseBodyDataDriverVersionList {
	s.ConfigCheckRule = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBodyDataDriverVersionList) SetGmtCreateTimestamp(v int64) *QueryEdgeDriverVersionResponseBodyDataDriverVersionList {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBodyDataDriverVersionList) SetGmtModifiedTimestamp(v int64) *QueryEdgeDriverVersionResponseBodyDataDriverVersionList {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *QueryEdgeDriverVersionResponseBodyDataDriverVersionList) SetArgument(v string) *QueryEdgeDriverVersionResponseBodyDataDriverVersionList {
	s.Argument = &v
	return s
}

type QueryEdgeDriverVersionResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryEdgeDriverVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryEdgeDriverVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeDriverVersionResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeDriverVersionResponse) SetHeaders(v map[string]*string) *QueryEdgeDriverVersionResponse {
	s.Headers = v
	return s
}

func (s *QueryEdgeDriverVersionResponse) SetBody(v *QueryEdgeDriverVersionResponseBody) *QueryEdgeDriverVersionResponse {
	s.Body = v
	return s
}

type QueryEdgeInstanceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s QueryEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceRequest) SetApiProduct(v string) *QueryEdgeInstanceRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryEdgeInstanceRequest) SetApiRevision(v string) *QueryEdgeInstanceRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryEdgeInstanceRequest) SetIotInstanceId(v string) *QueryEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeInstanceRequest) SetPageSize(v int32) *QueryEdgeInstanceRequest {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceRequest) SetCurrentPage(v int32) *QueryEdgeInstanceRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceRequest) SetName(v string) *QueryEdgeInstanceRequest {
	s.Name = &v
	return s
}

type QueryEdgeInstanceResponseBody struct {
	RequestId    *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryEdgeInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryEdgeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceResponseBody) SetRequestId(v string) *QueryEdgeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeInstanceResponseBody) SetSuccess(v bool) *QueryEdgeInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *QueryEdgeInstanceResponseBody) SetCode(v string) *QueryEdgeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *QueryEdgeInstanceResponseBody) SetErrorMessage(v string) *QueryEdgeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeInstanceResponseBody) SetData(v *QueryEdgeInstanceResponseBodyData) *QueryEdgeInstanceResponseBody {
	s.Data = v
	return s
}

type QueryEdgeInstanceResponseBodyData struct {
	Total        *int32                                           `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize     *int32                                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage  *int32                                           `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	InstanceList []*QueryEdgeInstanceResponseBodyDataInstanceList `json:"InstanceList,omitempty" xml:"InstanceList,omitempty" type:"Repeated"`
}

func (s QueryEdgeInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceResponseBodyData) SetTotal(v int32) *QueryEdgeInstanceResponseBodyData {
	s.Total = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyData) SetPageSize(v int32) *QueryEdgeInstanceResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyData) SetCurrentPage(v int32) *QueryEdgeInstanceResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyData) SetInstanceList(v []*QueryEdgeInstanceResponseBodyDataInstanceList) *QueryEdgeInstanceResponseBodyData {
	s.InstanceList = v
	return s
}

type QueryEdgeInstanceResponseBodyDataInstanceList struct {
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name                   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Tags                   *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	Type                   *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	GmtCreate              *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified            *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	RoleArn                *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	RoleName               *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	RoleAttachTime         *string `json:"RoleAttachTime,omitempty" xml:"RoleAttachTime,omitempty"`
	Spec                   *int32  `json:"Spec,omitempty" xml:"Spec,omitempty"`
	BizEnable              *bool   `json:"BizEnable,omitempty" xml:"BizEnable,omitempty"`
	LatestDeploymentStatus *int32  `json:"LatestDeploymentStatus,omitempty" xml:"LatestDeploymentStatus,omitempty"`
	LatestDeploymentType   *string `json:"LatestDeploymentType,omitempty" xml:"LatestDeploymentType,omitempty"`
	GmtCreateTimestamp     *int64  `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty"`
	GmtModifiedTimestamp   *int64  `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty"`
	RoleAttachTimestamp    *int64  `json:"RoleAttachTimestamp,omitempty" xml:"RoleAttachTimestamp,omitempty"`
}

func (s QueryEdgeInstanceResponseBodyDataInstanceList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceResponseBodyDataInstanceList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceResponseBodyDataInstanceList) SetInstanceId(v string) *QueryEdgeInstanceResponseBodyDataInstanceList {
	s.InstanceId = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyDataInstanceList) SetName(v string) *QueryEdgeInstanceResponseBodyDataInstanceList {
	s.Name = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyDataInstanceList) SetTags(v string) *QueryEdgeInstanceResponseBodyDataInstanceList {
	s.Tags = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyDataInstanceList) SetType(v int32) *QueryEdgeInstanceResponseBodyDataInstanceList {
	s.Type = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyDataInstanceList) SetGmtCreate(v string) *QueryEdgeInstanceResponseBodyDataInstanceList {
	s.GmtCreate = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyDataInstanceList) SetGmtModified(v string) *QueryEdgeInstanceResponseBodyDataInstanceList {
	s.GmtModified = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyDataInstanceList) SetRoleArn(v string) *QueryEdgeInstanceResponseBodyDataInstanceList {
	s.RoleArn = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyDataInstanceList) SetRoleName(v string) *QueryEdgeInstanceResponseBodyDataInstanceList {
	s.RoleName = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyDataInstanceList) SetRoleAttachTime(v string) *QueryEdgeInstanceResponseBodyDataInstanceList {
	s.RoleAttachTime = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyDataInstanceList) SetSpec(v int32) *QueryEdgeInstanceResponseBodyDataInstanceList {
	s.Spec = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyDataInstanceList) SetBizEnable(v bool) *QueryEdgeInstanceResponseBodyDataInstanceList {
	s.BizEnable = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyDataInstanceList) SetLatestDeploymentStatus(v int32) *QueryEdgeInstanceResponseBodyDataInstanceList {
	s.LatestDeploymentStatus = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyDataInstanceList) SetLatestDeploymentType(v string) *QueryEdgeInstanceResponseBodyDataInstanceList {
	s.LatestDeploymentType = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyDataInstanceList) SetGmtCreateTimestamp(v int64) *QueryEdgeInstanceResponseBodyDataInstanceList {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyDataInstanceList) SetGmtModifiedTimestamp(v int64) *QueryEdgeInstanceResponseBodyDataInstanceList {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *QueryEdgeInstanceResponseBodyDataInstanceList) SetRoleAttachTimestamp(v int64) *QueryEdgeInstanceResponseBodyDataInstanceList {
	s.RoleAttachTimestamp = &v
	return s
}

type QueryEdgeInstanceResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryEdgeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceResponse) SetHeaders(v map[string]*string) *QueryEdgeInstanceResponse {
	s.Headers = v
	return s
}

func (s *QueryEdgeInstanceResponse) SetBody(v *QueryEdgeInstanceResponseBody) *QueryEdgeInstanceResponse {
	s.Body = v
	return s
}

type QueryEdgeInstanceChannelRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	ChannelName   *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s QueryEdgeInstanceChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceChannelRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceChannelRequest) SetApiProduct(v string) *QueryEdgeInstanceChannelRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryEdgeInstanceChannelRequest) SetApiRevision(v string) *QueryEdgeInstanceChannelRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryEdgeInstanceChannelRequest) SetIotInstanceId(v string) *QueryEdgeInstanceChannelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeInstanceChannelRequest) SetInstanceId(v string) *QueryEdgeInstanceChannelRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryEdgeInstanceChannelRequest) SetDriverId(v string) *QueryEdgeInstanceChannelRequest {
	s.DriverId = &v
	return s
}

func (s *QueryEdgeInstanceChannelRequest) SetChannelName(v string) *QueryEdgeInstanceChannelRequest {
	s.ChannelName = &v
	return s
}

func (s *QueryEdgeInstanceChannelRequest) SetCurrentPage(v int32) *QueryEdgeInstanceChannelRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceChannelRequest) SetPageSize(v int32) *QueryEdgeInstanceChannelRequest {
	s.PageSize = &v
	return s
}

type QueryEdgeInstanceChannelResponseBody struct {
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryEdgeInstanceChannelResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryEdgeInstanceChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceChannelResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceChannelResponseBody) SetRequestId(v string) *QueryEdgeInstanceChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseBody) SetSuccess(v bool) *QueryEdgeInstanceChannelResponseBody {
	s.Success = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseBody) SetCode(v string) *QueryEdgeInstanceChannelResponseBody {
	s.Code = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseBody) SetErrorMessage(v string) *QueryEdgeInstanceChannelResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseBody) SetData(v *QueryEdgeInstanceChannelResponseBodyData) *QueryEdgeInstanceChannelResponseBody {
	s.Data = v
	return s
}

type QueryEdgeInstanceChannelResponseBodyData struct {
	Total       *int32                                               `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize    *int32                                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage *int32                                               `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	ChannelList *QueryEdgeInstanceChannelResponseBodyDataChannelList `json:"ChannelList,omitempty" xml:"ChannelList,omitempty" type:"Struct"`
}

func (s QueryEdgeInstanceChannelResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceChannelResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceChannelResponseBodyData) SetTotal(v int32) *QueryEdgeInstanceChannelResponseBodyData {
	s.Total = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseBodyData) SetPageSize(v int32) *QueryEdgeInstanceChannelResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseBodyData) SetCurrentPage(v int32) *QueryEdgeInstanceChannelResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseBodyData) SetChannelList(v *QueryEdgeInstanceChannelResponseBodyDataChannelList) *QueryEdgeInstanceChannelResponseBodyData {
	s.ChannelList = v
	return s
}

type QueryEdgeInstanceChannelResponseBodyDataChannelList struct {
	Channel []*QueryEdgeInstanceChannelResponseBodyDataChannelListChannel `json:"Channel,omitempty" xml:"Channel,omitempty" type:"Repeated"`
}

func (s QueryEdgeInstanceChannelResponseBodyDataChannelList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceChannelResponseBodyDataChannelList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceChannelResponseBodyDataChannelList) SetChannel(v []*QueryEdgeInstanceChannelResponseBodyDataChannelListChannel) *QueryEdgeInstanceChannelResponseBodyDataChannelList {
	s.Channel = v
	return s
}

type QueryEdgeInstanceChannelResponseBodyDataChannelListChannel struct {
	ChannelId            *string                                                               `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	ChannelName          *string                                                               `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	GmtCreate            *string                                                               `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified          *string                                                               `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GmtCreateTimestamp   *int64                                                                `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty"`
	GmtModifiedTimestamp *int64                                                                `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty"`
	ConfigList           *QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigList `json:"ConfigList,omitempty" xml:"ConfigList,omitempty" type:"Struct"`
}

func (s QueryEdgeInstanceChannelResponseBodyDataChannelListChannel) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceChannelResponseBodyDataChannelListChannel) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceChannelResponseBodyDataChannelListChannel) SetChannelId(v string) *QueryEdgeInstanceChannelResponseBodyDataChannelListChannel {
	s.ChannelId = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseBodyDataChannelListChannel) SetChannelName(v string) *QueryEdgeInstanceChannelResponseBodyDataChannelListChannel {
	s.ChannelName = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseBodyDataChannelListChannel) SetGmtCreate(v string) *QueryEdgeInstanceChannelResponseBodyDataChannelListChannel {
	s.GmtCreate = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseBodyDataChannelListChannel) SetGmtModified(v string) *QueryEdgeInstanceChannelResponseBodyDataChannelListChannel {
	s.GmtModified = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseBodyDataChannelListChannel) SetGmtCreateTimestamp(v int64) *QueryEdgeInstanceChannelResponseBodyDataChannelListChannel {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseBodyDataChannelListChannel) SetGmtModifiedTimestamp(v int64) *QueryEdgeInstanceChannelResponseBodyDataChannelListChannel {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseBodyDataChannelListChannel) SetConfigList(v *QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigList) *QueryEdgeInstanceChannelResponseBodyDataChannelListChannel {
	s.ConfigList = v
	return s
}

type QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigList struct {
	Config []*QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
}

func (s QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigList) SetConfig(v []*QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig) *QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigList {
	s.Config = v
	return s
}

type QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig struct {
	ConfigId *string `json:"ConfigId,omitempty" xml:"ConfigId,omitempty"`
	Format   *string `json:"Format,omitempty" xml:"Format,omitempty"`
	Content  *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Key      *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig) SetConfigId(v string) *QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig {
	s.ConfigId = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig) SetFormat(v string) *QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig {
	s.Format = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig) SetContent(v string) *QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig {
	s.Content = &v
	return s
}

func (s *QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig) SetKey(v string) *QueryEdgeInstanceChannelResponseBodyDataChannelListChannelConfigListConfig {
	s.Key = &v
	return s
}

type QueryEdgeInstanceChannelResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryEdgeInstanceChannelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryEdgeInstanceChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceChannelResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceChannelResponse) SetHeaders(v map[string]*string) *QueryEdgeInstanceChannelResponse {
	s.Headers = v
	return s
}

func (s *QueryEdgeInstanceChannelResponse) SetBody(v *QueryEdgeInstanceChannelResponseBody) *QueryEdgeInstanceChannelResponse {
	s.Body = v
	return s
}

type QueryEdgeInstanceDeviceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s QueryEdgeInstanceDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceRequest) SetApiProduct(v string) *QueryEdgeInstanceDeviceRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryEdgeInstanceDeviceRequest) SetApiRevision(v string) *QueryEdgeInstanceDeviceRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryEdgeInstanceDeviceRequest) SetIotInstanceId(v string) *QueryEdgeInstanceDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceRequest) SetInstanceId(v string) *QueryEdgeInstanceDeviceRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceRequest) SetCurrentPage(v int32) *QueryEdgeInstanceDeviceRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceDeviceRequest) SetPageSize(v int32) *QueryEdgeInstanceDeviceRequest {
	s.PageSize = &v
	return s
}

type QueryEdgeInstanceDeviceResponseBody struct {
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryEdgeInstanceDeviceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryEdgeInstanceDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceResponseBody) SetRequestId(v string) *QueryEdgeInstanceDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponseBody) SetSuccess(v bool) *QueryEdgeInstanceDeviceResponseBody {
	s.Success = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponseBody) SetCode(v string) *QueryEdgeInstanceDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponseBody) SetErrorMessage(v string) *QueryEdgeInstanceDeviceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponseBody) SetData(v *QueryEdgeInstanceDeviceResponseBodyData) *QueryEdgeInstanceDeviceResponseBody {
	s.Data = v
	return s
}

type QueryEdgeInstanceDeviceResponseBodyData struct {
	Total       *int32                                               `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize    *int32                                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage *int32                                               `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	DeviceList  []*QueryEdgeInstanceDeviceResponseBodyDataDeviceList `json:"DeviceList,omitempty" xml:"DeviceList,omitempty" type:"Repeated"`
}

func (s QueryEdgeInstanceDeviceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceResponseBodyData) SetTotal(v int32) *QueryEdgeInstanceDeviceResponseBodyData {
	s.Total = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponseBodyData) SetPageSize(v int32) *QueryEdgeInstanceDeviceResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponseBodyData) SetCurrentPage(v int32) *QueryEdgeInstanceDeviceResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponseBodyData) SetDeviceList(v []*QueryEdgeInstanceDeviceResponseBodyDataDeviceList) *QueryEdgeInstanceDeviceResponseBodyData {
	s.DeviceList = v
	return s
}

type QueryEdgeInstanceDeviceResponseBodyDataDeviceList struct {
	IotId      *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	ProductKey *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DriverId   *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
}

func (s QueryEdgeInstanceDeviceResponseBodyDataDeviceList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceResponseBodyDataDeviceList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceResponseBodyDataDeviceList) SetIotId(v string) *QueryEdgeInstanceDeviceResponseBodyDataDeviceList {
	s.IotId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponseBodyDataDeviceList) SetProductKey(v string) *QueryEdgeInstanceDeviceResponseBodyDataDeviceList {
	s.ProductKey = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponseBodyDataDeviceList) SetDeviceName(v string) *QueryEdgeInstanceDeviceResponseBodyDataDeviceList {
	s.DeviceName = &v
	return s
}

func (s *QueryEdgeInstanceDeviceResponseBodyDataDeviceList) SetDriverId(v string) *QueryEdgeInstanceDeviceResponseBodyDataDeviceList {
	s.DriverId = &v
	return s
}

type QueryEdgeInstanceDeviceResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryEdgeInstanceDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryEdgeInstanceDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceResponse) SetHeaders(v map[string]*string) *QueryEdgeInstanceDeviceResponse {
	s.Headers = v
	return s
}

func (s *QueryEdgeInstanceDeviceResponse) SetBody(v *QueryEdgeInstanceDeviceResponseBody) *QueryEdgeInstanceDeviceResponse {
	s.Body = v
	return s
}

type QueryEdgeInstanceDeviceByDriverRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ChannelId     *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s QueryEdgeInstanceDeviceByDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceByDriverRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceByDriverRequest) SetApiProduct(v string) *QueryEdgeInstanceDeviceByDriverRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverRequest) SetApiRevision(v string) *QueryEdgeInstanceDeviceByDriverRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverRequest) SetIotInstanceId(v string) *QueryEdgeInstanceDeviceByDriverRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverRequest) SetPageSize(v int32) *QueryEdgeInstanceDeviceByDriverRequest {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverRequest) SetInstanceId(v string) *QueryEdgeInstanceDeviceByDriverRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverRequest) SetChannelId(v string) *QueryEdgeInstanceDeviceByDriverRequest {
	s.ChannelId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverRequest) SetDriverId(v string) *QueryEdgeInstanceDeviceByDriverRequest {
	s.DriverId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverRequest) SetCurrentPage(v int32) *QueryEdgeInstanceDeviceByDriverRequest {
	s.CurrentPage = &v
	return s
}

type QueryEdgeInstanceDeviceByDriverResponseBody struct {
	RequestId    *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryEdgeInstanceDeviceByDriverResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryEdgeInstanceDeviceByDriverResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceByDriverResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceByDriverResponseBody) SetRequestId(v string) *QueryEdgeInstanceDeviceByDriverResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverResponseBody) SetSuccess(v bool) *QueryEdgeInstanceDeviceByDriverResponseBody {
	s.Success = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverResponseBody) SetCode(v string) *QueryEdgeInstanceDeviceByDriverResponseBody {
	s.Code = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverResponseBody) SetErrorMessage(v string) *QueryEdgeInstanceDeviceByDriverResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverResponseBody) SetData(v *QueryEdgeInstanceDeviceByDriverResponseBodyData) *QueryEdgeInstanceDeviceByDriverResponseBody {
	s.Data = v
	return s
}

type QueryEdgeInstanceDeviceByDriverResponseBodyData struct {
	Total       *int32                                                       `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize    *int32                                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage *int32                                                       `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	DeviceList  []*QueryEdgeInstanceDeviceByDriverResponseBodyDataDeviceList `json:"DeviceList,omitempty" xml:"DeviceList,omitempty" type:"Repeated"`
}

func (s QueryEdgeInstanceDeviceByDriverResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceByDriverResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceByDriverResponseBodyData) SetTotal(v int32) *QueryEdgeInstanceDeviceByDriverResponseBodyData {
	s.Total = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverResponseBodyData) SetPageSize(v int32) *QueryEdgeInstanceDeviceByDriverResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverResponseBodyData) SetCurrentPage(v int32) *QueryEdgeInstanceDeviceByDriverResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverResponseBodyData) SetDeviceList(v []*QueryEdgeInstanceDeviceByDriverResponseBodyDataDeviceList) *QueryEdgeInstanceDeviceByDriverResponseBodyData {
	s.DeviceList = v
	return s
}

type QueryEdgeInstanceDeviceByDriverResponseBodyDataDeviceList struct {
	IotId *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s QueryEdgeInstanceDeviceByDriverResponseBodyDataDeviceList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceByDriverResponseBodyDataDeviceList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceByDriverResponseBodyDataDeviceList) SetIotId(v string) *QueryEdgeInstanceDeviceByDriverResponseBodyDataDeviceList {
	s.IotId = &v
	return s
}

type QueryEdgeInstanceDeviceByDriverResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryEdgeInstanceDeviceByDriverResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryEdgeInstanceDeviceByDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDeviceByDriverResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDeviceByDriverResponse) SetHeaders(v map[string]*string) *QueryEdgeInstanceDeviceByDriverResponse {
	s.Headers = v
	return s
}

func (s *QueryEdgeInstanceDeviceByDriverResponse) SetBody(v *QueryEdgeInstanceDeviceByDriverResponseBody) *QueryEdgeInstanceDeviceByDriverResponse {
	s.Body = v
	return s
}

type QueryEdgeInstanceDriverRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s QueryEdgeInstanceDriverRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDriverRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDriverRequest) SetApiProduct(v string) *QueryEdgeInstanceDriverRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryEdgeInstanceDriverRequest) SetApiRevision(v string) *QueryEdgeInstanceDriverRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryEdgeInstanceDriverRequest) SetIotInstanceId(v string) *QueryEdgeInstanceDriverRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeInstanceDriverRequest) SetInstanceId(v string) *QueryEdgeInstanceDriverRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryEdgeInstanceDriverRequest) SetCurrentPage(v int32) *QueryEdgeInstanceDriverRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceDriverRequest) SetPageSize(v int32) *QueryEdgeInstanceDriverRequest {
	s.PageSize = &v
	return s
}

type QueryEdgeInstanceDriverResponseBody struct {
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryEdgeInstanceDriverResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryEdgeInstanceDriverResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDriverResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDriverResponseBody) SetRequestId(v string) *QueryEdgeInstanceDriverResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseBody) SetSuccess(v bool) *QueryEdgeInstanceDriverResponseBody {
	s.Success = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseBody) SetCode(v string) *QueryEdgeInstanceDriverResponseBody {
	s.Code = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseBody) SetErrorMessage(v string) *QueryEdgeInstanceDriverResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseBody) SetData(v *QueryEdgeInstanceDriverResponseBodyData) *QueryEdgeInstanceDriverResponseBody {
	s.Data = v
	return s
}

type QueryEdgeInstanceDriverResponseBodyData struct {
	Total       *int32                                               `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize    *int32                                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage *int32                                               `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	DriverList  []*QueryEdgeInstanceDriverResponseBodyDataDriverList `json:"DriverList,omitempty" xml:"DriverList,omitempty" type:"Repeated"`
}

func (s QueryEdgeInstanceDriverResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDriverResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDriverResponseBodyData) SetTotal(v int32) *QueryEdgeInstanceDriverResponseBodyData {
	s.Total = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseBodyData) SetPageSize(v int32) *QueryEdgeInstanceDriverResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseBodyData) SetCurrentPage(v int32) *QueryEdgeInstanceDriverResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseBodyData) SetDriverList(v []*QueryEdgeInstanceDriverResponseBodyDataDriverList) *QueryEdgeInstanceDriverResponseBodyData {
	s.DriverList = v
	return s
}

type QueryEdgeInstanceDriverResponseBodyDataDriverList struct {
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	DriverVersion *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty"`
	OrderId       *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	GmtCreate     *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified   *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
}

func (s QueryEdgeInstanceDriverResponseBodyDataDriverList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDriverResponseBodyDataDriverList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDriverResponseBodyDataDriverList) SetDriverId(v string) *QueryEdgeInstanceDriverResponseBodyDataDriverList {
	s.DriverId = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseBodyDataDriverList) SetDriverVersion(v string) *QueryEdgeInstanceDriverResponseBodyDataDriverList {
	s.DriverVersion = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseBodyDataDriverList) SetOrderId(v string) *QueryEdgeInstanceDriverResponseBodyDataDriverList {
	s.OrderId = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseBodyDataDriverList) SetGmtCreate(v string) *QueryEdgeInstanceDriverResponseBodyDataDriverList {
	s.GmtCreate = &v
	return s
}

func (s *QueryEdgeInstanceDriverResponseBodyDataDriverList) SetGmtModified(v string) *QueryEdgeInstanceDriverResponseBodyDataDriverList {
	s.GmtModified = &v
	return s
}

type QueryEdgeInstanceDriverResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryEdgeInstanceDriverResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryEdgeInstanceDriverResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceDriverResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceDriverResponse) SetHeaders(v map[string]*string) *QueryEdgeInstanceDriverResponse {
	s.Headers = v
	return s
}

func (s *QueryEdgeInstanceDriverResponse) SetBody(v *QueryEdgeInstanceDriverResponseBody) *QueryEdgeInstanceDriverResponse {
	s.Body = v
	return s
}

type QueryEdgeInstanceGatewayRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s QueryEdgeInstanceGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceGatewayRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceGatewayRequest) SetApiProduct(v string) *QueryEdgeInstanceGatewayRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryEdgeInstanceGatewayRequest) SetApiRevision(v string) *QueryEdgeInstanceGatewayRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryEdgeInstanceGatewayRequest) SetIotInstanceId(v string) *QueryEdgeInstanceGatewayRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeInstanceGatewayRequest) SetInstanceId(v string) *QueryEdgeInstanceGatewayRequest {
	s.InstanceId = &v
	return s
}

type QueryEdgeInstanceGatewayResponseBody struct {
	RequestId    *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                              `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	GatewayList  []*QueryEdgeInstanceGatewayResponseBodyGatewayList `json:"GatewayList,omitempty" xml:"GatewayList,omitempty" type:"Repeated"`
}

func (s QueryEdgeInstanceGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceGatewayResponseBody) SetRequestId(v string) *QueryEdgeInstanceGatewayResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeInstanceGatewayResponseBody) SetSuccess(v bool) *QueryEdgeInstanceGatewayResponseBody {
	s.Success = &v
	return s
}

func (s *QueryEdgeInstanceGatewayResponseBody) SetCode(v string) *QueryEdgeInstanceGatewayResponseBody {
	s.Code = &v
	return s
}

func (s *QueryEdgeInstanceGatewayResponseBody) SetErrorMessage(v string) *QueryEdgeInstanceGatewayResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeInstanceGatewayResponseBody) SetGatewayList(v []*QueryEdgeInstanceGatewayResponseBodyGatewayList) *QueryEdgeInstanceGatewayResponseBody {
	s.GatewayList = v
	return s
}

type QueryEdgeInstanceGatewayResponseBodyGatewayList struct {
	ProductKey  *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName  *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId       *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	EdgeVersion *string `json:"EdgeVersion,omitempty" xml:"EdgeVersion,omitempty"`
}

func (s QueryEdgeInstanceGatewayResponseBodyGatewayList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceGatewayResponseBodyGatewayList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceGatewayResponseBodyGatewayList) SetProductKey(v string) *QueryEdgeInstanceGatewayResponseBodyGatewayList {
	s.ProductKey = &v
	return s
}

func (s *QueryEdgeInstanceGatewayResponseBodyGatewayList) SetDeviceName(v string) *QueryEdgeInstanceGatewayResponseBodyGatewayList {
	s.DeviceName = &v
	return s
}

func (s *QueryEdgeInstanceGatewayResponseBodyGatewayList) SetIotId(v string) *QueryEdgeInstanceGatewayResponseBodyGatewayList {
	s.IotId = &v
	return s
}

func (s *QueryEdgeInstanceGatewayResponseBodyGatewayList) SetEdgeVersion(v string) *QueryEdgeInstanceGatewayResponseBodyGatewayList {
	s.EdgeVersion = &v
	return s
}

type QueryEdgeInstanceGatewayResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryEdgeInstanceGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryEdgeInstanceGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceGatewayResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceGatewayResponse) SetHeaders(v map[string]*string) *QueryEdgeInstanceGatewayResponse {
	s.Headers = v
	return s
}

func (s *QueryEdgeInstanceGatewayResponse) SetBody(v *QueryEdgeInstanceGatewayResponseBody) *QueryEdgeInstanceGatewayResponse {
	s.Body = v
	return s
}

type QueryEdgeInstanceHistoricDeploymentRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s QueryEdgeInstanceHistoricDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceHistoricDeploymentRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceHistoricDeploymentRequest) SetApiProduct(v string) *QueryEdgeInstanceHistoricDeploymentRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentRequest) SetApiRevision(v string) *QueryEdgeInstanceHistoricDeploymentRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentRequest) SetIotInstanceId(v string) *QueryEdgeInstanceHistoricDeploymentRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentRequest) SetInstanceId(v string) *QueryEdgeInstanceHistoricDeploymentRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentRequest) SetCurrentPage(v int32) *QueryEdgeInstanceHistoricDeploymentRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentRequest) SetPageSize(v int32) *QueryEdgeInstanceHistoricDeploymentRequest {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentRequest) SetStartTime(v int64) *QueryEdgeInstanceHistoricDeploymentRequest {
	s.StartTime = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentRequest) SetEndTime(v int64) *QueryEdgeInstanceHistoricDeploymentRequest {
	s.EndTime = &v
	return s
}

type QueryEdgeInstanceHistoricDeploymentResponseBody struct {
	RequestId    *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                                `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                              `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryEdgeInstanceHistoricDeploymentResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryEdgeInstanceHistoricDeploymentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceHistoricDeploymentResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBody) SetRequestId(v string) *QueryEdgeInstanceHistoricDeploymentResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBody) SetSuccess(v bool) *QueryEdgeInstanceHistoricDeploymentResponseBody {
	s.Success = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBody) SetCode(v string) *QueryEdgeInstanceHistoricDeploymentResponseBody {
	s.Code = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBody) SetErrorMessage(v string) *QueryEdgeInstanceHistoricDeploymentResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBody) SetData(v *QueryEdgeInstanceHistoricDeploymentResponseBodyData) *QueryEdgeInstanceHistoricDeploymentResponseBody {
	s.Data = v
	return s
}

type QueryEdgeInstanceHistoricDeploymentResponseBodyData struct {
	Total          *int32                                                               `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize       *int32                                                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage    *int32                                                               `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	DeploymentList []*QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList `json:"DeploymentList,omitempty" xml:"DeploymentList,omitempty" type:"Repeated"`
}

func (s QueryEdgeInstanceHistoricDeploymentResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceHistoricDeploymentResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBodyData) SetTotal(v int32) *QueryEdgeInstanceHistoricDeploymentResponseBodyData {
	s.Total = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBodyData) SetPageSize(v int32) *QueryEdgeInstanceHistoricDeploymentResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBodyData) SetCurrentPage(v int32) *QueryEdgeInstanceHistoricDeploymentResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBodyData) SetDeploymentList(v []*QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList) *QueryEdgeInstanceHistoricDeploymentResponseBodyData {
	s.DeploymentList = v
	return s
}

type QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList struct {
	GmtCreate             *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified           *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GmtCompleted          *string `json:"GmtCompleted,omitempty" xml:"GmtCompleted,omitempty"`
	DeploymentId          *string `json:"DeploymentId,omitempty" xml:"DeploymentId,omitempty"`
	Description           *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Status                *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                  *string `json:"Type,omitempty" xml:"Type,omitempty"`
	GmtCreateTimestamp    *int64  `json:"GmtCreateTimestamp,omitempty" xml:"GmtCreateTimestamp,omitempty"`
	GmtModifiedTimestamp  *int64  `json:"GmtModifiedTimestamp,omitempty" xml:"GmtModifiedTimestamp,omitempty"`
	GmtCompletedTimestamp *int64  `json:"GmtCompletedTimestamp,omitempty" xml:"GmtCompletedTimestamp,omitempty"`
}

func (s QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList) SetGmtCreate(v string) *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList {
	s.GmtCreate = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList) SetGmtModified(v string) *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList {
	s.GmtModified = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList) SetGmtCompleted(v string) *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList {
	s.GmtCompleted = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList) SetDeploymentId(v string) *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList {
	s.DeploymentId = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList) SetDescription(v string) *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList {
	s.Description = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList) SetStatus(v int32) *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList {
	s.Status = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList) SetType(v string) *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList {
	s.Type = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList) SetGmtCreateTimestamp(v int64) *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList {
	s.GmtCreateTimestamp = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList) SetGmtModifiedTimestamp(v int64) *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList {
	s.GmtModifiedTimestamp = &v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList) SetGmtCompletedTimestamp(v int64) *QueryEdgeInstanceHistoricDeploymentResponseBodyDataDeploymentList {
	s.GmtCompletedTimestamp = &v
	return s
}

type QueryEdgeInstanceHistoricDeploymentResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryEdgeInstanceHistoricDeploymentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryEdgeInstanceHistoricDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceHistoricDeploymentResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceHistoricDeploymentResponse) SetHeaders(v map[string]*string) *QueryEdgeInstanceHistoricDeploymentResponse {
	s.Headers = v
	return s
}

func (s *QueryEdgeInstanceHistoricDeploymentResponse) SetBody(v *QueryEdgeInstanceHistoricDeploymentResponseBody) *QueryEdgeInstanceHistoricDeploymentResponse {
	s.Body = v
	return s
}

type QueryEdgeInstanceSceneRuleRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s QueryEdgeInstanceSceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceSceneRuleRequest) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceSceneRuleRequest) SetApiProduct(v string) *QueryEdgeInstanceSceneRuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleRequest) SetApiRevision(v string) *QueryEdgeInstanceSceneRuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleRequest) SetIotInstanceId(v string) *QueryEdgeInstanceSceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleRequest) SetInstanceId(v string) *QueryEdgeInstanceSceneRuleRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleRequest) SetCurrentPage(v int32) *QueryEdgeInstanceSceneRuleRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleRequest) SetPageSize(v int32) *QueryEdgeInstanceSceneRuleRequest {
	s.PageSize = &v
	return s
}

type QueryEdgeInstanceSceneRuleResponseBody struct {
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryEdgeInstanceSceneRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryEdgeInstanceSceneRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceSceneRuleResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceSceneRuleResponseBody) SetRequestId(v string) *QueryEdgeInstanceSceneRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseBody) SetSuccess(v bool) *QueryEdgeInstanceSceneRuleResponseBody {
	s.Success = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseBody) SetCode(v string) *QueryEdgeInstanceSceneRuleResponseBody {
	s.Code = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseBody) SetErrorMessage(v string) *QueryEdgeInstanceSceneRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseBody) SetData(v *QueryEdgeInstanceSceneRuleResponseBodyData) *QueryEdgeInstanceSceneRuleResponseBody {
	s.Data = v
	return s
}

type QueryEdgeInstanceSceneRuleResponseBodyData struct {
	Total       *int32                                                `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize    *int32                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage *int32                                                `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	RuleList    []*QueryEdgeInstanceSceneRuleResponseBodyDataRuleList `json:"RuleList,omitempty" xml:"RuleList,omitempty" type:"Repeated"`
}

func (s QueryEdgeInstanceSceneRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceSceneRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceSceneRuleResponseBodyData) SetTotal(v int32) *QueryEdgeInstanceSceneRuleResponseBodyData {
	s.Total = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseBodyData) SetPageSize(v int32) *QueryEdgeInstanceSceneRuleResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseBodyData) SetCurrentPage(v int32) *QueryEdgeInstanceSceneRuleResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseBodyData) SetRuleList(v []*QueryEdgeInstanceSceneRuleResponseBodyDataRuleList) *QueryEdgeInstanceSceneRuleResponseBodyData {
	s.RuleList = v
	return s
}

type QueryEdgeInstanceSceneRuleResponseBodyDataRuleList struct {
	RuleId    *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	RuleName  *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	GmtCreate *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Status    *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	IsExisted *int32  `json:"IsExisted,omitempty" xml:"IsExisted,omitempty"`
}

func (s QueryEdgeInstanceSceneRuleResponseBodyDataRuleList) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceSceneRuleResponseBodyDataRuleList) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceSceneRuleResponseBodyDataRuleList) SetRuleId(v string) *QueryEdgeInstanceSceneRuleResponseBodyDataRuleList {
	s.RuleId = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseBodyDataRuleList) SetRuleName(v string) *QueryEdgeInstanceSceneRuleResponseBodyDataRuleList {
	s.RuleName = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseBodyDataRuleList) SetGmtCreate(v int64) *QueryEdgeInstanceSceneRuleResponseBodyDataRuleList {
	s.GmtCreate = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseBodyDataRuleList) SetStatus(v int32) *QueryEdgeInstanceSceneRuleResponseBodyDataRuleList {
	s.Status = &v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponseBodyDataRuleList) SetIsExisted(v int32) *QueryEdgeInstanceSceneRuleResponseBodyDataRuleList {
	s.IsExisted = &v
	return s
}

type QueryEdgeInstanceSceneRuleResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryEdgeInstanceSceneRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryEdgeInstanceSceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEdgeInstanceSceneRuleResponse) GoString() string {
	return s.String()
}

func (s *QueryEdgeInstanceSceneRuleResponse) SetHeaders(v map[string]*string) *QueryEdgeInstanceSceneRuleResponse {
	s.Headers = v
	return s
}

func (s *QueryEdgeInstanceSceneRuleResponse) SetBody(v *QueryEdgeInstanceSceneRuleResponseBody) *QueryEdgeInstanceSceneRuleResponse {
	s.Body = v
	return s
}

type QueryJobRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s QueryJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryJobRequest) GoString() string {
	return s.String()
}

func (s *QueryJobRequest) SetApiProduct(v string) *QueryJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryJobRequest) SetApiRevision(v string) *QueryJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryJobRequest) SetIotInstanceId(v string) *QueryJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryJobRequest) SetJobId(v string) *QueryJobRequest {
	s.JobId = &v
	return s
}

type QueryJobResponseBody struct {
	RequestId    *string                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                     `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                   `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponseBody) GoString() string {
	return s.String()
}

func (s *QueryJobResponseBody) SetRequestId(v string) *QueryJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryJobResponseBody) SetSuccess(v bool) *QueryJobResponseBody {
	s.Success = &v
	return s
}

func (s *QueryJobResponseBody) SetCode(v string) *QueryJobResponseBody {
	s.Code = &v
	return s
}

func (s *QueryJobResponseBody) SetErrorMessage(v string) *QueryJobResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryJobResponseBody) SetData(v *QueryJobResponseBodyData) *QueryJobResponseBody {
	s.Data = v
	return s
}

type QueryJobResponseBodyData struct {
	JobId         *string                                `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobName       *string                                `json:"JobName,omitempty" xml:"JobName,omitempty"`
	UtcCreate     *string                                `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	Status        *string                                `json:"Status,omitempty" xml:"Status,omitempty"`
	Description   *string                                `json:"Description,omitempty" xml:"Description,omitempty"`
	Type          *string                                `json:"Type,omitempty" xml:"Type,omitempty"`
	JobDocument   *string                                `json:"JobDocument,omitempty" xml:"JobDocument,omitempty"`
	UtcModified   *string                                `json:"UtcModified,omitempty" xml:"UtcModified,omitempty"`
	RolloutConfig *QueryJobResponseBodyDataRolloutConfig `json:"RolloutConfig,omitempty" xml:"RolloutConfig,omitempty" type:"Struct"`
	TimeoutConfig *QueryJobResponseBodyDataTimeoutConfig `json:"TimeoutConfig,omitempty" xml:"TimeoutConfig,omitempty" type:"Struct"`
	JobFile       *QueryJobResponseBodyDataJobFile       `json:"JobFile,omitempty" xml:"JobFile,omitempty" type:"Struct"`
	TargetConfig  *QueryJobResponseBodyDataTargetConfig  `json:"TargetConfig,omitempty" xml:"TargetConfig,omitempty" type:"Struct"`
}

func (s QueryJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryJobResponseBodyData) SetJobId(v string) *QueryJobResponseBodyData {
	s.JobId = &v
	return s
}

func (s *QueryJobResponseBodyData) SetJobName(v string) *QueryJobResponseBodyData {
	s.JobName = &v
	return s
}

func (s *QueryJobResponseBodyData) SetUtcCreate(v string) *QueryJobResponseBodyData {
	s.UtcCreate = &v
	return s
}

func (s *QueryJobResponseBodyData) SetStatus(v string) *QueryJobResponseBodyData {
	s.Status = &v
	return s
}

func (s *QueryJobResponseBodyData) SetDescription(v string) *QueryJobResponseBodyData {
	s.Description = &v
	return s
}

func (s *QueryJobResponseBodyData) SetType(v string) *QueryJobResponseBodyData {
	s.Type = &v
	return s
}

func (s *QueryJobResponseBodyData) SetJobDocument(v string) *QueryJobResponseBodyData {
	s.JobDocument = &v
	return s
}

func (s *QueryJobResponseBodyData) SetUtcModified(v string) *QueryJobResponseBodyData {
	s.UtcModified = &v
	return s
}

func (s *QueryJobResponseBodyData) SetRolloutConfig(v *QueryJobResponseBodyDataRolloutConfig) *QueryJobResponseBodyData {
	s.RolloutConfig = v
	return s
}

func (s *QueryJobResponseBodyData) SetTimeoutConfig(v *QueryJobResponseBodyDataTimeoutConfig) *QueryJobResponseBodyData {
	s.TimeoutConfig = v
	return s
}

func (s *QueryJobResponseBodyData) SetJobFile(v *QueryJobResponseBodyDataJobFile) *QueryJobResponseBodyData {
	s.JobFile = v
	return s
}

func (s *QueryJobResponseBodyData) SetTargetConfig(v *QueryJobResponseBodyDataTargetConfig) *QueryJobResponseBodyData {
	s.TargetConfig = v
	return s
}

type QueryJobResponseBodyDataRolloutConfig struct {
	MaximumPerMinute *int32 `json:"MaximumPerMinute,omitempty" xml:"MaximumPerMinute,omitempty"`
}

func (s QueryJobResponseBodyDataRolloutConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponseBodyDataRolloutConfig) GoString() string {
	return s.String()
}

func (s *QueryJobResponseBodyDataRolloutConfig) SetMaximumPerMinute(v int32) *QueryJobResponseBodyDataRolloutConfig {
	s.MaximumPerMinute = &v
	return s
}

type QueryJobResponseBodyDataTimeoutConfig struct {
	InProgressTimeoutInMinutes *int32 `json:"InProgressTimeoutInMinutes,omitempty" xml:"InProgressTimeoutInMinutes,omitempty"`
}

func (s QueryJobResponseBodyDataTimeoutConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponseBodyDataTimeoutConfig) GoString() string {
	return s.String()
}

func (s *QueryJobResponseBodyDataTimeoutConfig) SetInProgressTimeoutInMinutes(v int32) *QueryJobResponseBodyDataTimeoutConfig {
	s.InProgressTimeoutInMinutes = &v
	return s
}

type QueryJobResponseBodyDataJobFile struct {
	FileUrl    *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	SignMethod *string `json:"SignMethod,omitempty" xml:"SignMethod,omitempty"`
	Sign       *string `json:"Sign,omitempty" xml:"Sign,omitempty"`
}

func (s QueryJobResponseBodyDataJobFile) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponseBodyDataJobFile) GoString() string {
	return s.String()
}

func (s *QueryJobResponseBodyDataJobFile) SetFileUrl(v string) *QueryJobResponseBodyDataJobFile {
	s.FileUrl = &v
	return s
}

func (s *QueryJobResponseBodyDataJobFile) SetSignMethod(v string) *QueryJobResponseBodyDataJobFile {
	s.SignMethod = &v
	return s
}

func (s *QueryJobResponseBodyDataJobFile) SetSign(v string) *QueryJobResponseBodyDataJobFile {
	s.Sign = &v
	return s
}

type QueryJobResponseBodyDataTargetConfig struct {
	TargetGroup   *string                                            `json:"TargetGroup,omitempty" xml:"TargetGroup,omitempty"`
	TargetProduct *string                                            `json:"TargetProduct,omitempty" xml:"TargetProduct,omitempty"`
	TargetType    *string                                            `json:"TargetType,omitempty" xml:"TargetType,omitempty"`
	TargetDevices *QueryJobResponseBodyDataTargetConfigTargetDevices `json:"TargetDevices,omitempty" xml:"TargetDevices,omitempty" type:"Struct"`
}

func (s QueryJobResponseBodyDataTargetConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponseBodyDataTargetConfig) GoString() string {
	return s.String()
}

func (s *QueryJobResponseBodyDataTargetConfig) SetTargetGroup(v string) *QueryJobResponseBodyDataTargetConfig {
	s.TargetGroup = &v
	return s
}

func (s *QueryJobResponseBodyDataTargetConfig) SetTargetProduct(v string) *QueryJobResponseBodyDataTargetConfig {
	s.TargetProduct = &v
	return s
}

func (s *QueryJobResponseBodyDataTargetConfig) SetTargetType(v string) *QueryJobResponseBodyDataTargetConfig {
	s.TargetType = &v
	return s
}

func (s *QueryJobResponseBodyDataTargetConfig) SetTargetDevices(v *QueryJobResponseBodyDataTargetConfigTargetDevices) *QueryJobResponseBodyDataTargetConfig {
	s.TargetDevices = v
	return s
}

type QueryJobResponseBodyDataTargetConfigTargetDevices struct {
	TargetDevices []*QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices `json:"targetDevices,omitempty" xml:"targetDevices,omitempty" type:"Repeated"`
}

func (s QueryJobResponseBodyDataTargetConfigTargetDevices) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponseBodyDataTargetConfigTargetDevices) GoString() string {
	return s.String()
}

func (s *QueryJobResponseBodyDataTargetConfigTargetDevices) SetTargetDevices(v []*QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices) *QueryJobResponseBodyDataTargetConfigTargetDevices {
	s.TargetDevices = v
	return s
}

type QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices struct {
	ProductKey *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
}

func (s QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices) GoString() string {
	return s.String()
}

func (s *QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices) SetProductKey(v string) *QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices {
	s.ProductKey = &v
	return s
}

func (s *QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices) SetDeviceName(v string) *QueryJobResponseBodyDataTargetConfigTargetDevicesTargetDevices {
	s.DeviceName = &v
	return s
}

type QueryJobResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryJobResponse) GoString() string {
	return s.String()
}

func (s *QueryJobResponse) SetHeaders(v map[string]*string) *QueryJobResponse {
	s.Headers = v
	return s
}

func (s *QueryJobResponse) SetBody(v *QueryJobResponseBody) *QueryJobResponse {
	s.Body = v
	return s
}

type QueryJobStatisticsRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s QueryJobStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryJobStatisticsRequest) GoString() string {
	return s.String()
}

func (s *QueryJobStatisticsRequest) SetApiProduct(v string) *QueryJobStatisticsRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryJobStatisticsRequest) SetApiRevision(v string) *QueryJobStatisticsRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryJobStatisticsRequest) SetIotInstanceId(v string) *QueryJobStatisticsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryJobStatisticsRequest) SetJobId(v string) *QueryJobStatisticsRequest {
	s.JobId = &v
	return s
}

type QueryJobStatisticsResponseBody struct {
	RequestId    *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                             `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryJobStatisticsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryJobStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryJobStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryJobStatisticsResponseBody) SetRequestId(v string) *QueryJobStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryJobStatisticsResponseBody) SetSuccess(v bool) *QueryJobStatisticsResponseBody {
	s.Success = &v
	return s
}

func (s *QueryJobStatisticsResponseBody) SetCode(v string) *QueryJobStatisticsResponseBody {
	s.Code = &v
	return s
}

func (s *QueryJobStatisticsResponseBody) SetErrorMessage(v string) *QueryJobStatisticsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryJobStatisticsResponseBody) SetData(v *QueryJobStatisticsResponseBodyData) *QueryJobStatisticsResponseBody {
	s.Data = v
	return s
}

type QueryJobStatisticsResponseBodyData struct {
	Total      *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
	Queued     *int32 `json:"Queued,omitempty" xml:"Queued,omitempty"`
	Sent       *int32 `json:"Sent,omitempty" xml:"Sent,omitempty"`
	InProgress *int32 `json:"InProgress,omitempty" xml:"InProgress,omitempty"`
	Succeeded  *int32 `json:"Succeeded,omitempty" xml:"Succeeded,omitempty"`
	Failed     *int32 `json:"Failed,omitempty" xml:"Failed,omitempty"`
	Rejected   *int32 `json:"Rejected,omitempty" xml:"Rejected,omitempty"`
	TimeOut    *int32 `json:"TimeOut,omitempty" xml:"TimeOut,omitempty"`
	Cancelled  *int32 `json:"Cancelled,omitempty" xml:"Cancelled,omitempty"`
}

func (s QueryJobStatisticsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryJobStatisticsResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryJobStatisticsResponseBodyData) SetTotal(v int32) *QueryJobStatisticsResponseBodyData {
	s.Total = &v
	return s
}

func (s *QueryJobStatisticsResponseBodyData) SetQueued(v int32) *QueryJobStatisticsResponseBodyData {
	s.Queued = &v
	return s
}

func (s *QueryJobStatisticsResponseBodyData) SetSent(v int32) *QueryJobStatisticsResponseBodyData {
	s.Sent = &v
	return s
}

func (s *QueryJobStatisticsResponseBodyData) SetInProgress(v int32) *QueryJobStatisticsResponseBodyData {
	s.InProgress = &v
	return s
}

func (s *QueryJobStatisticsResponseBodyData) SetSucceeded(v int32) *QueryJobStatisticsResponseBodyData {
	s.Succeeded = &v
	return s
}

func (s *QueryJobStatisticsResponseBodyData) SetFailed(v int32) *QueryJobStatisticsResponseBodyData {
	s.Failed = &v
	return s
}

func (s *QueryJobStatisticsResponseBodyData) SetRejected(v int32) *QueryJobStatisticsResponseBodyData {
	s.Rejected = &v
	return s
}

func (s *QueryJobStatisticsResponseBodyData) SetTimeOut(v int32) *QueryJobStatisticsResponseBodyData {
	s.TimeOut = &v
	return s
}

func (s *QueryJobStatisticsResponseBodyData) SetCancelled(v int32) *QueryJobStatisticsResponseBodyData {
	s.Cancelled = &v
	return s
}

type QueryJobStatisticsResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryJobStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryJobStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryJobStatisticsResponse) GoString() string {
	return s.String()
}

func (s *QueryJobStatisticsResponse) SetHeaders(v map[string]*string) *QueryJobStatisticsResponse {
	s.Headers = v
	return s
}

func (s *QueryJobStatisticsResponse) SetBody(v *QueryJobStatisticsResponseBody) *QueryJobStatisticsResponse {
	s.Body = v
	return s
}

type QueryLoRaJoinPermissionsRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
}

func (s QueryLoRaJoinPermissionsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLoRaJoinPermissionsRequest) GoString() string {
	return s.String()
}

func (s *QueryLoRaJoinPermissionsRequest) SetApiProduct(v string) *QueryLoRaJoinPermissionsRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryLoRaJoinPermissionsRequest) SetApiRevision(v string) *QueryLoRaJoinPermissionsRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryLoRaJoinPermissionsRequest) SetIotInstanceId(v string) *QueryLoRaJoinPermissionsRequest {
	s.IotInstanceId = &v
	return s
}

type QueryLoRaJoinPermissionsResponseBody struct {
	RequestId       *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success         *bool                                                `json:"Success,omitempty" xml:"Success,omitempty"`
	Code            *string                                              `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage    *string                                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ProductKey      *string                                              `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	JoinPermissions *QueryLoRaJoinPermissionsResponseBodyJoinPermissions `json:"JoinPermissions,omitempty" xml:"JoinPermissions,omitempty" type:"Struct"`
}

func (s QueryLoRaJoinPermissionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryLoRaJoinPermissionsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryLoRaJoinPermissionsResponseBody) SetRequestId(v string) *QueryLoRaJoinPermissionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponseBody) SetSuccess(v bool) *QueryLoRaJoinPermissionsResponseBody {
	s.Success = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponseBody) SetCode(v string) *QueryLoRaJoinPermissionsResponseBody {
	s.Code = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponseBody) SetErrorMessage(v string) *QueryLoRaJoinPermissionsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponseBody) SetProductKey(v string) *QueryLoRaJoinPermissionsResponseBody {
	s.ProductKey = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponseBody) SetJoinPermissions(v *QueryLoRaJoinPermissionsResponseBodyJoinPermissions) *QueryLoRaJoinPermissionsResponseBody {
	s.JoinPermissions = v
	return s
}

type QueryLoRaJoinPermissionsResponseBodyJoinPermissions struct {
	JoinPermission []*QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission `json:"JoinPermission,omitempty" xml:"JoinPermission,omitempty" type:"Repeated"`
}

func (s QueryLoRaJoinPermissionsResponseBodyJoinPermissions) String() string {
	return tea.Prettify(s)
}

func (s QueryLoRaJoinPermissionsResponseBodyJoinPermissions) GoString() string {
	return s.String()
}

func (s *QueryLoRaJoinPermissionsResponseBodyJoinPermissions) SetJoinPermission(v []*QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission) *QueryLoRaJoinPermissionsResponseBodyJoinPermissions {
	s.JoinPermission = v
	return s
}

type QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission struct {
	JoinPermissionId   *string `json:"JoinPermissionId,omitempty" xml:"JoinPermissionId,omitempty"`
	JoinPermissionName *string `json:"JoinPermissionName,omitempty" xml:"JoinPermissionName,omitempty"`
	JoinPermissionType *string `json:"JoinPermissionType,omitempty" xml:"JoinPermissionType,omitempty"`
	OwnerAliyunPk      *string `json:"OwnerAliyunPk,omitempty" xml:"OwnerAliyunPk,omitempty"`
	Enabled            *bool   `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	ClassMode          *string `json:"ClassMode,omitempty" xml:"ClassMode,omitempty"`
}

func (s QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission) String() string {
	return tea.Prettify(s)
}

func (s QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission) GoString() string {
	return s.String()
}

func (s *QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission) SetJoinPermissionId(v string) *QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission {
	s.JoinPermissionId = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission) SetJoinPermissionName(v string) *QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission {
	s.JoinPermissionName = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission) SetJoinPermissionType(v string) *QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission {
	s.JoinPermissionType = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission) SetOwnerAliyunPk(v string) *QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission {
	s.OwnerAliyunPk = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission) SetEnabled(v bool) *QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission {
	s.Enabled = &v
	return s
}

func (s *QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission) SetClassMode(v string) *QueryLoRaJoinPermissionsResponseBodyJoinPermissionsJoinPermission {
	s.ClassMode = &v
	return s
}

type QueryLoRaJoinPermissionsResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryLoRaJoinPermissionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryLoRaJoinPermissionsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLoRaJoinPermissionsResponse) GoString() string {
	return s.String()
}

func (s *QueryLoRaJoinPermissionsResponse) SetHeaders(v map[string]*string) *QueryLoRaJoinPermissionsResponse {
	s.Headers = v
	return s
}

func (s *QueryLoRaJoinPermissionsResponse) SetBody(v *QueryLoRaJoinPermissionsResponseBody) *QueryLoRaJoinPermissionsResponse {
	s.Body = v
	return s
}

type QueryOTAFirmwareRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	FirmwareId    *string `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty"`
}

func (s QueryOTAFirmwareRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAFirmwareRequest) GoString() string {
	return s.String()
}

func (s *QueryOTAFirmwareRequest) SetApiProduct(v string) *QueryOTAFirmwareRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryOTAFirmwareRequest) SetApiRevision(v string) *QueryOTAFirmwareRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryOTAFirmwareRequest) SetIotInstanceId(v string) *QueryOTAFirmwareRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryOTAFirmwareRequest) SetFirmwareId(v string) *QueryOTAFirmwareRequest {
	s.FirmwareId = &v
	return s
}

type QueryOTAFirmwareResponseBody struct {
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	FirmwareInfo *QueryOTAFirmwareResponseBodyFirmwareInfo `json:"FirmwareInfo,omitempty" xml:"FirmwareInfo,omitempty" type:"Struct"`
}

func (s QueryOTAFirmwareResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAFirmwareResponseBody) GoString() string {
	return s.String()
}

func (s *QueryOTAFirmwareResponseBody) SetRequestId(v string) *QueryOTAFirmwareResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryOTAFirmwareResponseBody) SetSuccess(v bool) *QueryOTAFirmwareResponseBody {
	s.Success = &v
	return s
}

func (s *QueryOTAFirmwareResponseBody) SetCode(v string) *QueryOTAFirmwareResponseBody {
	s.Code = &v
	return s
}

func (s *QueryOTAFirmwareResponseBody) SetErrorMessage(v string) *QueryOTAFirmwareResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryOTAFirmwareResponseBody) SetFirmwareInfo(v *QueryOTAFirmwareResponseBodyFirmwareInfo) *QueryOTAFirmwareResponseBody {
	s.FirmwareInfo = v
	return s
}

type QueryOTAFirmwareResponseBodyFirmwareInfo struct {
	FirmwareName   *string `json:"FirmwareName,omitempty" xml:"FirmwareName,omitempty"`
	FirmwareId     *string `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty"`
	SrcVersion     *string `json:"SrcVersion,omitempty" xml:"SrcVersion,omitempty"`
	DestVersion    *string `json:"DestVersion,omitempty" xml:"DestVersion,omitempty"`
	UtcCreate      *string `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	UtcModified    *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty"`
	Status         *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	FirmwareDesc   *string `json:"FirmwareDesc,omitempty" xml:"FirmwareDesc,omitempty"`
	FirmwareSign   *string `json:"FirmwareSign,omitempty" xml:"FirmwareSign,omitempty"`
	FirmwareSize   *int32  `json:"FirmwareSize,omitempty" xml:"FirmwareSize,omitempty"`
	FirmwareUrl    *string `json:"FirmwareUrl,omitempty" xml:"FirmwareUrl,omitempty"`
	ProductKey     *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	SignMethod     *string `json:"SignMethod,omitempty" xml:"SignMethod,omitempty"`
	ProductName    *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	Type           *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	VerifyProgress *int32  `json:"VerifyProgress,omitempty" xml:"VerifyProgress,omitempty"`
	ModuleName     *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
}

func (s QueryOTAFirmwareResponseBodyFirmwareInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAFirmwareResponseBodyFirmwareInfo) GoString() string {
	return s.String()
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetFirmwareName(v string) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.FirmwareName = &v
	return s
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetFirmwareId(v string) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.FirmwareId = &v
	return s
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetSrcVersion(v string) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.SrcVersion = &v
	return s
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetDestVersion(v string) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.DestVersion = &v
	return s
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetUtcCreate(v string) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.UtcCreate = &v
	return s
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetUtcModified(v string) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.UtcModified = &v
	return s
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetStatus(v int32) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.Status = &v
	return s
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetFirmwareDesc(v string) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.FirmwareDesc = &v
	return s
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetFirmwareSign(v string) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.FirmwareSign = &v
	return s
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetFirmwareSize(v int32) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.FirmwareSize = &v
	return s
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetFirmwareUrl(v string) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.FirmwareUrl = &v
	return s
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetProductKey(v string) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.ProductKey = &v
	return s
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetSignMethod(v string) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.SignMethod = &v
	return s
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetProductName(v string) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.ProductName = &v
	return s
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetType(v int32) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.Type = &v
	return s
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetVerifyProgress(v int32) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.VerifyProgress = &v
	return s
}

func (s *QueryOTAFirmwareResponseBodyFirmwareInfo) SetModuleName(v string) *QueryOTAFirmwareResponseBodyFirmwareInfo {
	s.ModuleName = &v
	return s
}

type QueryOTAFirmwareResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryOTAFirmwareResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryOTAFirmwareResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAFirmwareResponse) GoString() string {
	return s.String()
}

func (s *QueryOTAFirmwareResponse) SetHeaders(v map[string]*string) *QueryOTAFirmwareResponse {
	s.Headers = v
	return s
}

func (s *QueryOTAFirmwareResponse) SetBody(v *QueryOTAFirmwareResponseBody) *QueryOTAFirmwareResponse {
	s.Body = v
	return s
}

type QueryOTAJobRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s QueryOTAJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAJobRequest) GoString() string {
	return s.String()
}

func (s *QueryOTAJobRequest) SetApiProduct(v string) *QueryOTAJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryOTAJobRequest) SetApiRevision(v string) *QueryOTAJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryOTAJobRequest) SetIotInstanceId(v string) *QueryOTAJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryOTAJobRequest) SetJobId(v string) *QueryOTAJobRequest {
	s.JobId = &v
	return s
}

type QueryOTAJobResponseBody struct {
	RequestId    *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                        `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryOTAJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryOTAJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAJobResponseBody) GoString() string {
	return s.String()
}

func (s *QueryOTAJobResponseBody) SetRequestId(v string) *QueryOTAJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryOTAJobResponseBody) SetSuccess(v bool) *QueryOTAJobResponseBody {
	s.Success = &v
	return s
}

func (s *QueryOTAJobResponseBody) SetCode(v string) *QueryOTAJobResponseBody {
	s.Code = &v
	return s
}

func (s *QueryOTAJobResponseBody) SetErrorMessage(v string) *QueryOTAJobResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryOTAJobResponseBody) SetData(v *QueryOTAJobResponseBodyData) *QueryOTAJobResponseBody {
	s.Data = v
	return s
}

type QueryOTAJobResponseBodyData struct {
	JobId                 *string                                 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UtcCreate             *string                                 `json:"UtcCreate,omitempty" xml:"UtcCreate,omitempty"`
	UtcModified           *string                                 `json:"UtcModified,omitempty" xml:"UtcModified,omitempty"`
	ProductKey            *string                                 `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	FirmwareId            *string                                 `json:"FirmwareId,omitempty" xml:"FirmwareId,omitempty"`
	UtcStartTime          *string                                 `json:"UtcStartTime,omitempty" xml:"UtcStartTime,omitempty"`
	UtcEndTime            *string                                 `json:"UtcEndTime,omitempty" xml:"UtcEndTime,omitempty"`
	JobStatus             *string                                 `json:"JobStatus,omitempty" xml:"JobStatus,omitempty"`
	JobType               *string                                 `json:"JobType,omitempty" xml:"JobType,omitempty"`
	JobDesc               *string                                 `json:"JobDesc,omitempty" xml:"JobDesc,omitempty"`
	Name                  *string                                 `json:"Name,omitempty" xml:"Name,omitempty"`
	UtcScheduleTime       *string                                 `json:"UtcScheduleTime,omitempty" xml:"UtcScheduleTime,omitempty"`
	RetryInterval         *int32                                  `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	RetryCount            *int32                                  `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	TimeoutInMinutes      *int32                                  `json:"TimeoutInMinutes,omitempty" xml:"TimeoutInMinutes,omitempty"`
	TargetSelection       *string                                 `json:"TargetSelection,omitempty" xml:"TargetSelection,omitempty"`
	SelectionType         *string                                 `json:"SelectionType,omitempty" xml:"SelectionType,omitempty"`
	GrayPercent           *string                                 `json:"GrayPercent,omitempty" xml:"GrayPercent,omitempty"`
	MaximumPerMinute      *int32                                  `json:"MaximumPerMinute,omitempty" xml:"MaximumPerMinute,omitempty"`
	DestVersion           *string                                 `json:"DestVersion,omitempty" xml:"DestVersion,omitempty"`
	UtcScheduleFinishTime *string                                 `json:"UtcScheduleFinishTime,omitempty" xml:"UtcScheduleFinishTime,omitempty"`
	OverwriteMode         *int32                                  `json:"OverwriteMode,omitempty" xml:"OverwriteMode,omitempty"`
	DynamicMode           *int32                                  `json:"DynamicMode,omitempty" xml:"DynamicMode,omitempty"`
	SrcVersions           *QueryOTAJobResponseBodyDataSrcVersions `json:"SrcVersions,omitempty" xml:"SrcVersions,omitempty" type:"Struct"`
	Tags                  *QueryOTAJobResponseBodyDataTags        `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s QueryOTAJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryOTAJobResponseBodyData) SetJobId(v string) *QueryOTAJobResponseBodyData {
	s.JobId = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetUtcCreate(v string) *QueryOTAJobResponseBodyData {
	s.UtcCreate = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetUtcModified(v string) *QueryOTAJobResponseBodyData {
	s.UtcModified = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetProductKey(v string) *QueryOTAJobResponseBodyData {
	s.ProductKey = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetFirmwareId(v string) *QueryOTAJobResponseBodyData {
	s.FirmwareId = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetUtcStartTime(v string) *QueryOTAJobResponseBodyData {
	s.UtcStartTime = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetUtcEndTime(v string) *QueryOTAJobResponseBodyData {
	s.UtcEndTime = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetJobStatus(v string) *QueryOTAJobResponseBodyData {
	s.JobStatus = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetJobType(v string) *QueryOTAJobResponseBodyData {
	s.JobType = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetJobDesc(v string) *QueryOTAJobResponseBodyData {
	s.JobDesc = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetName(v string) *QueryOTAJobResponseBodyData {
	s.Name = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetUtcScheduleTime(v string) *QueryOTAJobResponseBodyData {
	s.UtcScheduleTime = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetRetryInterval(v int32) *QueryOTAJobResponseBodyData {
	s.RetryInterval = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetRetryCount(v int32) *QueryOTAJobResponseBodyData {
	s.RetryCount = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetTimeoutInMinutes(v int32) *QueryOTAJobResponseBodyData {
	s.TimeoutInMinutes = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetTargetSelection(v string) *QueryOTAJobResponseBodyData {
	s.TargetSelection = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetSelectionType(v string) *QueryOTAJobResponseBodyData {
	s.SelectionType = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetGrayPercent(v string) *QueryOTAJobResponseBodyData {
	s.GrayPercent = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetMaximumPerMinute(v int32) *QueryOTAJobResponseBodyData {
	s.MaximumPerMinute = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetDestVersion(v string) *QueryOTAJobResponseBodyData {
	s.DestVersion = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetUtcScheduleFinishTime(v string) *QueryOTAJobResponseBodyData {
	s.UtcScheduleFinishTime = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetOverwriteMode(v int32) *QueryOTAJobResponseBodyData {
	s.OverwriteMode = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetDynamicMode(v int32) *QueryOTAJobResponseBodyData {
	s.DynamicMode = &v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetSrcVersions(v *QueryOTAJobResponseBodyDataSrcVersions) *QueryOTAJobResponseBodyData {
	s.SrcVersions = v
	return s
}

func (s *QueryOTAJobResponseBodyData) SetTags(v *QueryOTAJobResponseBodyDataTags) *QueryOTAJobResponseBodyData {
	s.Tags = v
	return s
}

type QueryOTAJobResponseBodyDataSrcVersions struct {
	SrcVersion []*string `json:"SrcVersion,omitempty" xml:"SrcVersion,omitempty" type:"Repeated"`
}

func (s QueryOTAJobResponseBodyDataSrcVersions) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAJobResponseBodyDataSrcVersions) GoString() string {
	return s.String()
}

func (s *QueryOTAJobResponseBodyDataSrcVersions) SetSrcVersion(v []*string) *QueryOTAJobResponseBodyDataSrcVersions {
	s.SrcVersion = v
	return s
}

type QueryOTAJobResponseBodyDataTags struct {
	OtaTagDTO []*QueryOTAJobResponseBodyDataTagsOtaTagDTO `json:"OtaTagDTO,omitempty" xml:"OtaTagDTO,omitempty" type:"Repeated"`
}

func (s QueryOTAJobResponseBodyDataTags) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAJobResponseBodyDataTags) GoString() string {
	return s.String()
}

func (s *QueryOTAJobResponseBodyDataTags) SetOtaTagDTO(v []*QueryOTAJobResponseBodyDataTagsOtaTagDTO) *QueryOTAJobResponseBodyDataTags {
	s.OtaTagDTO = v
	return s
}

type QueryOTAJobResponseBodyDataTagsOtaTagDTO struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryOTAJobResponseBodyDataTagsOtaTagDTO) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAJobResponseBodyDataTagsOtaTagDTO) GoString() string {
	return s.String()
}

func (s *QueryOTAJobResponseBodyDataTagsOtaTagDTO) SetKey(v string) *QueryOTAJobResponseBodyDataTagsOtaTagDTO {
	s.Key = &v
	return s
}

func (s *QueryOTAJobResponseBodyDataTagsOtaTagDTO) SetValue(v string) *QueryOTAJobResponseBodyDataTagsOtaTagDTO {
	s.Value = &v
	return s
}

type QueryOTAJobResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryOTAJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryOTAJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOTAJobResponse) GoString() string {
	return s.String()
}

func (s *QueryOTAJobResponse) SetHeaders(v map[string]*string) *QueryOTAJobResponse {
	s.Headers = v
	return s
}

func (s *QueryOTAJobResponse) SetBody(v *QueryOTAJobResponseBody) *QueryOTAJobResponse {
	s.Body = v
	return s
}

type QueryPageByApplyIdRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ApplyId           *int64  `json:"ApplyId,omitempty" xml:"ApplyId,omitempty"`
	CurrentPage       *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryPageByApplyIdRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPageByApplyIdRequest) GoString() string {
	return s.String()
}

func (s *QueryPageByApplyIdRequest) SetApiProduct(v string) *QueryPageByApplyIdRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryPageByApplyIdRequest) SetApiRevision(v string) *QueryPageByApplyIdRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryPageByApplyIdRequest) SetIotInstanceId(v string) *QueryPageByApplyIdRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryPageByApplyIdRequest) SetPageSize(v int32) *QueryPageByApplyIdRequest {
	s.PageSize = &v
	return s
}

func (s *QueryPageByApplyIdRequest) SetApplyId(v int64) *QueryPageByApplyIdRequest {
	s.ApplyId = &v
	return s
}

func (s *QueryPageByApplyIdRequest) SetCurrentPage(v int32) *QueryPageByApplyIdRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryPageByApplyIdRequest) SetRealTenantId(v string) *QueryPageByApplyIdRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryPageByApplyIdRequest) SetRealTripartiteKey(v string) *QueryPageByApplyIdRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryPageByApplyIdResponseBody struct {
	RequestId       *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success         *bool                                          `json:"Success,omitempty" xml:"Success,omitempty"`
	Code            *string                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage    *string                                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	PageSize        *int32                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Page            *int32                                         `json:"Page,omitempty" xml:"Page,omitempty"`
	PageCount       *int32                                         `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	Total           *int32                                         `json:"Total,omitempty" xml:"Total,omitempty"`
	ApplyDeviceList *QueryPageByApplyIdResponseBodyApplyDeviceList `json:"ApplyDeviceList,omitempty" xml:"ApplyDeviceList,omitempty" type:"Struct"`
}

func (s QueryPageByApplyIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPageByApplyIdResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPageByApplyIdResponseBody) SetRequestId(v string) *QueryPageByApplyIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPageByApplyIdResponseBody) SetSuccess(v bool) *QueryPageByApplyIdResponseBody {
	s.Success = &v
	return s
}

func (s *QueryPageByApplyIdResponseBody) SetCode(v string) *QueryPageByApplyIdResponseBody {
	s.Code = &v
	return s
}

func (s *QueryPageByApplyIdResponseBody) SetErrorMessage(v string) *QueryPageByApplyIdResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryPageByApplyIdResponseBody) SetPageSize(v int32) *QueryPageByApplyIdResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryPageByApplyIdResponseBody) SetPage(v int32) *QueryPageByApplyIdResponseBody {
	s.Page = &v
	return s
}

func (s *QueryPageByApplyIdResponseBody) SetPageCount(v int32) *QueryPageByApplyIdResponseBody {
	s.PageCount = &v
	return s
}

func (s *QueryPageByApplyIdResponseBody) SetTotal(v int32) *QueryPageByApplyIdResponseBody {
	s.Total = &v
	return s
}

func (s *QueryPageByApplyIdResponseBody) SetApplyDeviceList(v *QueryPageByApplyIdResponseBodyApplyDeviceList) *QueryPageByApplyIdResponseBody {
	s.ApplyDeviceList = v
	return s
}

type QueryPageByApplyIdResponseBodyApplyDeviceList struct {
	ApplyDeviceInfo []*QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo `json:"ApplyDeviceInfo,omitempty" xml:"ApplyDeviceInfo,omitempty" type:"Repeated"`
}

func (s QueryPageByApplyIdResponseBodyApplyDeviceList) String() string {
	return tea.Prettify(s)
}

func (s QueryPageByApplyIdResponseBodyApplyDeviceList) GoString() string {
	return s.String()
}

func (s *QueryPageByApplyIdResponseBodyApplyDeviceList) SetApplyDeviceInfo(v []*QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo) *QueryPageByApplyIdResponseBodyApplyDeviceList {
	s.ApplyDeviceInfo = v
	return s
}

type QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo struct {
	DeviceId     *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceSecret *string `json:"DeviceSecret,omitempty" xml:"DeviceSecret,omitempty"`
	IotId        *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo) GoString() string {
	return s.String()
}

func (s *QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo) SetDeviceId(v string) *QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo {
	s.DeviceId = &v
	return s
}

func (s *QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo) SetDeviceName(v string) *QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo {
	s.DeviceName = &v
	return s
}

func (s *QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo) SetDeviceSecret(v string) *QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo {
	s.DeviceSecret = &v
	return s
}

func (s *QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo) SetIotId(v string) *QueryPageByApplyIdResponseBodyApplyDeviceListApplyDeviceInfo {
	s.IotId = &v
	return s
}

type QueryPageByApplyIdResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryPageByApplyIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryPageByApplyIdResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPageByApplyIdResponse) GoString() string {
	return s.String()
}

func (s *QueryPageByApplyIdResponse) SetHeaders(v map[string]*string) *QueryPageByApplyIdResponse {
	s.Headers = v
	return s
}

func (s *QueryPageByApplyIdResponse) SetBody(v *QueryPageByApplyIdResponseBody) *QueryPageByApplyIdResponse {
	s.Body = v
	return s
}

type QueryProductRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryProductRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryProductRequest) GoString() string {
	return s.String()
}

func (s *QueryProductRequest) SetApiProduct(v string) *QueryProductRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryProductRequest) SetApiRevision(v string) *QueryProductRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryProductRequest) SetIotInstanceId(v string) *QueryProductRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryProductRequest) SetProductKey(v string) *QueryProductRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryProductRequest) SetRealTenantId(v string) *QueryProductRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryProductRequest) SetRealTripartiteKey(v string) *QueryProductRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryProductResponseBody struct {
	RequestId    *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                         `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                       `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryProductResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryProductResponseBody) GoString() string {
	return s.String()
}

func (s *QueryProductResponseBody) SetRequestId(v string) *QueryProductResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryProductResponseBody) SetSuccess(v bool) *QueryProductResponseBody {
	s.Success = &v
	return s
}

func (s *QueryProductResponseBody) SetCode(v string) *QueryProductResponseBody {
	s.Code = &v
	return s
}

func (s *QueryProductResponseBody) SetErrorMessage(v string) *QueryProductResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryProductResponseBody) SetData(v *QueryProductResponseBodyData) *QueryProductResponseBody {
	s.Data = v
	return s
}

type QueryProductResponseBodyData struct {
	GmtCreate           *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	DataFormat          *int32  `json:"DataFormat,omitempty" xml:"DataFormat,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DeviceCount         *int32  `json:"DeviceCount,omitempty" xml:"DeviceCount,omitempty"`
	NodeType            *int32  `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	ProductKey          *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ProductName         *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	ProductSecret       *string `json:"ProductSecret,omitempty" xml:"ProductSecret,omitempty"`
	CategoryName        *string `json:"CategoryName,omitempty" xml:"CategoryName,omitempty"`
	CategoryKey         *string `json:"CategoryKey,omitempty" xml:"CategoryKey,omitempty"`
	AliyunCommodityCode *string `json:"AliyunCommodityCode,omitempty" xml:"AliyunCommodityCode,omitempty"`
	Id2                 *bool   `json:"Id2,omitempty" xml:"Id2,omitempty"`
	ProtocolType        *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	ProductStatus       *string `json:"ProductStatus,omitempty" xml:"ProductStatus,omitempty"`
	Owner               *bool   `json:"Owner,omitempty" xml:"Owner,omitempty"`
	NetType             *int32  `json:"NetType,omitempty" xml:"NetType,omitempty"`
	AuthType            *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	ValidateType        *int32  `json:"ValidateType,omitempty" xml:"ValidateType,omitempty"`
}

func (s QueryProductResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryProductResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryProductResponseBodyData) SetGmtCreate(v int64) *QueryProductResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *QueryProductResponseBodyData) SetDataFormat(v int32) *QueryProductResponseBodyData {
	s.DataFormat = &v
	return s
}

func (s *QueryProductResponseBodyData) SetDescription(v string) *QueryProductResponseBodyData {
	s.Description = &v
	return s
}

func (s *QueryProductResponseBodyData) SetDeviceCount(v int32) *QueryProductResponseBodyData {
	s.DeviceCount = &v
	return s
}

func (s *QueryProductResponseBodyData) SetNodeType(v int32) *QueryProductResponseBodyData {
	s.NodeType = &v
	return s
}

func (s *QueryProductResponseBodyData) SetProductKey(v string) *QueryProductResponseBodyData {
	s.ProductKey = &v
	return s
}

func (s *QueryProductResponseBodyData) SetProductName(v string) *QueryProductResponseBodyData {
	s.ProductName = &v
	return s
}

func (s *QueryProductResponseBodyData) SetProductSecret(v string) *QueryProductResponseBodyData {
	s.ProductSecret = &v
	return s
}

func (s *QueryProductResponseBodyData) SetCategoryName(v string) *QueryProductResponseBodyData {
	s.CategoryName = &v
	return s
}

func (s *QueryProductResponseBodyData) SetCategoryKey(v string) *QueryProductResponseBodyData {
	s.CategoryKey = &v
	return s
}

func (s *QueryProductResponseBodyData) SetAliyunCommodityCode(v string) *QueryProductResponseBodyData {
	s.AliyunCommodityCode = &v
	return s
}

func (s *QueryProductResponseBodyData) SetId2(v bool) *QueryProductResponseBodyData {
	s.Id2 = &v
	return s
}

func (s *QueryProductResponseBodyData) SetProtocolType(v string) *QueryProductResponseBodyData {
	s.ProtocolType = &v
	return s
}

func (s *QueryProductResponseBodyData) SetProductStatus(v string) *QueryProductResponseBodyData {
	s.ProductStatus = &v
	return s
}

func (s *QueryProductResponseBodyData) SetOwner(v bool) *QueryProductResponseBodyData {
	s.Owner = &v
	return s
}

func (s *QueryProductResponseBodyData) SetNetType(v int32) *QueryProductResponseBodyData {
	s.NetType = &v
	return s
}

func (s *QueryProductResponseBodyData) SetAuthType(v string) *QueryProductResponseBodyData {
	s.AuthType = &v
	return s
}

func (s *QueryProductResponseBodyData) SetValidateType(v int32) *QueryProductResponseBodyData {
	s.ValidateType = &v
	return s
}

type QueryProductResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryProductResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryProductResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryProductResponse) GoString() string {
	return s.String()
}

func (s *QueryProductResponse) SetHeaders(v map[string]*string) *QueryProductResponse {
	s.Headers = v
	return s
}

func (s *QueryProductResponse) SetBody(v *QueryProductResponseBody) *QueryProductResponse {
	s.Body = v
	return s
}

type QueryProductCertInfoRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
}

func (s QueryProductCertInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryProductCertInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryProductCertInfoRequest) SetApiProduct(v string) *QueryProductCertInfoRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryProductCertInfoRequest) SetApiRevision(v string) *QueryProductCertInfoRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryProductCertInfoRequest) SetIotInstanceId(v string) *QueryProductCertInfoRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryProductCertInfoRequest) SetProductKey(v string) *QueryProductCertInfoRequest {
	s.ProductKey = &v
	return s
}

type QueryProductCertInfoResponseBody struct {
	RequestId       *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success         *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
	Code            *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage    *string                                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ProductCertInfo *QueryProductCertInfoResponseBodyProductCertInfo `json:"ProductCertInfo,omitempty" xml:"ProductCertInfo,omitempty" type:"Struct"`
}

func (s QueryProductCertInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryProductCertInfoResponseBody) GoString() string {
	return s.String()
}

func (s *QueryProductCertInfoResponseBody) SetRequestId(v string) *QueryProductCertInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryProductCertInfoResponseBody) SetSuccess(v bool) *QueryProductCertInfoResponseBody {
	s.Success = &v
	return s
}

func (s *QueryProductCertInfoResponseBody) SetCode(v string) *QueryProductCertInfoResponseBody {
	s.Code = &v
	return s
}

func (s *QueryProductCertInfoResponseBody) SetErrorMessage(v string) *QueryProductCertInfoResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryProductCertInfoResponseBody) SetProductCertInfo(v *QueryProductCertInfoResponseBodyProductCertInfo) *QueryProductCertInfoResponseBody {
	s.ProductCertInfo = v
	return s
}

type QueryProductCertInfoResponseBodyProductCertInfo struct {
	IssueModel *int32 `json:"IssueModel,omitempty" xml:"IssueModel,omitempty"`
}

func (s QueryProductCertInfoResponseBodyProductCertInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryProductCertInfoResponseBodyProductCertInfo) GoString() string {
	return s.String()
}

func (s *QueryProductCertInfoResponseBodyProductCertInfo) SetIssueModel(v int32) *QueryProductCertInfoResponseBodyProductCertInfo {
	s.IssueModel = &v
	return s
}

type QueryProductCertInfoResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryProductCertInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryProductCertInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryProductCertInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryProductCertInfoResponse) SetHeaders(v map[string]*string) *QueryProductCertInfoResponse {
	s.Headers = v
	return s
}

func (s *QueryProductCertInfoResponse) SetBody(v *QueryProductCertInfoResponseBody) *QueryProductCertInfoResponse {
	s.Body = v
	return s
}

type QueryProductListRequest struct {
	ApiProduct          *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision         *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId       *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	PageSize            *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceGroupId     *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	AliyunCommodityCode *string `json:"AliyunCommodityCode,omitempty" xml:"AliyunCommodityCode,omitempty"`
	CurrentPage         *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	RealTenantId        *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey   *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryProductListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListRequest) GoString() string {
	return s.String()
}

func (s *QueryProductListRequest) SetApiProduct(v string) *QueryProductListRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryProductListRequest) SetApiRevision(v string) *QueryProductListRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryProductListRequest) SetIotInstanceId(v string) *QueryProductListRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryProductListRequest) SetPageSize(v int32) *QueryProductListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryProductListRequest) SetResourceGroupId(v string) *QueryProductListRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *QueryProductListRequest) SetAliyunCommodityCode(v string) *QueryProductListRequest {
	s.AliyunCommodityCode = &v
	return s
}

func (s *QueryProductListRequest) SetCurrentPage(v int32) *QueryProductListRequest {
	s.CurrentPage = &v
	return s
}

func (s *QueryProductListRequest) SetRealTenantId(v string) *QueryProductListRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryProductListRequest) SetRealTripartiteKey(v string) *QueryProductListRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryProductListResponseBody struct {
	RequestId    *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryProductListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryProductListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryProductListResponseBody) SetRequestId(v string) *QueryProductListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryProductListResponseBody) SetSuccess(v bool) *QueryProductListResponseBody {
	s.Success = &v
	return s
}

func (s *QueryProductListResponseBody) SetCode(v string) *QueryProductListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryProductListResponseBody) SetErrorMessage(v string) *QueryProductListResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryProductListResponseBody) SetData(v *QueryProductListResponseBodyData) *QueryProductListResponseBody {
	s.Data = v
	return s
}

type QueryProductListResponseBodyData struct {
	CurrentPage *int32                                `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageCount   *int32                                `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	PageSize    *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Total       *int32                                `json:"Total,omitempty" xml:"Total,omitempty"`
	List        *QueryProductListResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
}

func (s QueryProductListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryProductListResponseBodyData) SetCurrentPage(v int32) *QueryProductListResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *QueryProductListResponseBodyData) SetPageCount(v int32) *QueryProductListResponseBodyData {
	s.PageCount = &v
	return s
}

func (s *QueryProductListResponseBodyData) SetPageSize(v int32) *QueryProductListResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryProductListResponseBodyData) SetTotal(v int32) *QueryProductListResponseBodyData {
	s.Total = &v
	return s
}

func (s *QueryProductListResponseBodyData) SetList(v *QueryProductListResponseBodyDataList) *QueryProductListResponseBodyData {
	s.List = v
	return s
}

type QueryProductListResponseBodyDataList struct {
	ProductInfo []*QueryProductListResponseBodyDataListProductInfo `json:"ProductInfo,omitempty" xml:"ProductInfo,omitempty" type:"Repeated"`
}

func (s QueryProductListResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *QueryProductListResponseBodyDataList) SetProductInfo(v []*QueryProductListResponseBodyDataListProductInfo) *QueryProductListResponseBodyDataList {
	s.ProductInfo = v
	return s
}

type QueryProductListResponseBodyDataListProductInfo struct {
	GmtCreate   *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	DataFormat  *int32  `json:"DataFormat,omitempty" xml:"DataFormat,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DeviceCount *int32  `json:"DeviceCount,omitempty" xml:"DeviceCount,omitempty"`
	NodeType    *int32  `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	ProductKey  *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	AuthType    *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
}

func (s QueryProductListResponseBodyDataListProductInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListResponseBodyDataListProductInfo) GoString() string {
	return s.String()
}

func (s *QueryProductListResponseBodyDataListProductInfo) SetGmtCreate(v int64) *QueryProductListResponseBodyDataListProductInfo {
	s.GmtCreate = &v
	return s
}

func (s *QueryProductListResponseBodyDataListProductInfo) SetDataFormat(v int32) *QueryProductListResponseBodyDataListProductInfo {
	s.DataFormat = &v
	return s
}

func (s *QueryProductListResponseBodyDataListProductInfo) SetDescription(v string) *QueryProductListResponseBodyDataListProductInfo {
	s.Description = &v
	return s
}

func (s *QueryProductListResponseBodyDataListProductInfo) SetDeviceCount(v int32) *QueryProductListResponseBodyDataListProductInfo {
	s.DeviceCount = &v
	return s
}

func (s *QueryProductListResponseBodyDataListProductInfo) SetNodeType(v int32) *QueryProductListResponseBodyDataListProductInfo {
	s.NodeType = &v
	return s
}

func (s *QueryProductListResponseBodyDataListProductInfo) SetProductKey(v string) *QueryProductListResponseBodyDataListProductInfo {
	s.ProductKey = &v
	return s
}

func (s *QueryProductListResponseBodyDataListProductInfo) SetProductName(v string) *QueryProductListResponseBodyDataListProductInfo {
	s.ProductName = &v
	return s
}

func (s *QueryProductListResponseBodyDataListProductInfo) SetAuthType(v string) *QueryProductListResponseBodyDataListProductInfo {
	s.AuthType = &v
	return s
}

type QueryProductListResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryProductListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryProductListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListResponse) GoString() string {
	return s.String()
}

func (s *QueryProductListResponse) SetHeaders(v map[string]*string) *QueryProductListResponse {
	s.Headers = v
	return s
}

func (s *QueryProductListResponse) SetBody(v *QueryProductListResponseBody) *QueryProductListResponse {
	s.Body = v
	return s
}

type QueryProductTopicRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
}

func (s QueryProductTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryProductTopicRequest) GoString() string {
	return s.String()
}

func (s *QueryProductTopicRequest) SetApiProduct(v string) *QueryProductTopicRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryProductTopicRequest) SetApiRevision(v string) *QueryProductTopicRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryProductTopicRequest) SetIotInstanceId(v string) *QueryProductTopicRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryProductTopicRequest) SetProductKey(v string) *QueryProductTopicRequest {
	s.ProductKey = &v
	return s
}

type QueryProductTopicResponseBody struct {
	RequestId    *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryProductTopicResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryProductTopicResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryProductTopicResponseBody) GoString() string {
	return s.String()
}

func (s *QueryProductTopicResponseBody) SetRequestId(v string) *QueryProductTopicResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryProductTopicResponseBody) SetSuccess(v bool) *QueryProductTopicResponseBody {
	s.Success = &v
	return s
}

func (s *QueryProductTopicResponseBody) SetCode(v string) *QueryProductTopicResponseBody {
	s.Code = &v
	return s
}

func (s *QueryProductTopicResponseBody) SetErrorMessage(v string) *QueryProductTopicResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryProductTopicResponseBody) SetData(v *QueryProductTopicResponseBodyData) *QueryProductTopicResponseBody {
	s.Data = v
	return s
}

type QueryProductTopicResponseBodyData struct {
	ProductTopicInfo []*QueryProductTopicResponseBodyDataProductTopicInfo `json:"ProductTopicInfo,omitempty" xml:"ProductTopicInfo,omitempty" type:"Repeated"`
}

func (s QueryProductTopicResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryProductTopicResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryProductTopicResponseBodyData) SetProductTopicInfo(v []*QueryProductTopicResponseBodyDataProductTopicInfo) *QueryProductTopicResponseBodyData {
	s.ProductTopicInfo = v
	return s
}

type QueryProductTopicResponseBodyDataProductTopicInfo struct {
	ProductKey     *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	TopicShortName *string `json:"TopicShortName,omitempty" xml:"TopicShortName,omitempty"`
	Operation      *string `json:"Operation,omitempty" xml:"Operation,omitempty"`
	Desc           *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Id             *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryProductTopicResponseBodyDataProductTopicInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryProductTopicResponseBodyDataProductTopicInfo) GoString() string {
	return s.String()
}

func (s *QueryProductTopicResponseBodyDataProductTopicInfo) SetProductKey(v string) *QueryProductTopicResponseBodyDataProductTopicInfo {
	s.ProductKey = &v
	return s
}

func (s *QueryProductTopicResponseBodyDataProductTopicInfo) SetTopicShortName(v string) *QueryProductTopicResponseBodyDataProductTopicInfo {
	s.TopicShortName = &v
	return s
}

func (s *QueryProductTopicResponseBodyDataProductTopicInfo) SetOperation(v string) *QueryProductTopicResponseBodyDataProductTopicInfo {
	s.Operation = &v
	return s
}

func (s *QueryProductTopicResponseBodyDataProductTopicInfo) SetDesc(v string) *QueryProductTopicResponseBodyDataProductTopicInfo {
	s.Desc = &v
	return s
}

func (s *QueryProductTopicResponseBodyDataProductTopicInfo) SetId(v string) *QueryProductTopicResponseBodyDataProductTopicInfo {
	s.Id = &v
	return s
}

type QueryProductTopicResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryProductTopicResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryProductTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryProductTopicResponse) GoString() string {
	return s.String()
}

func (s *QueryProductTopicResponse) SetHeaders(v map[string]*string) *QueryProductTopicResponse {
	s.Headers = v
	return s
}

func (s *QueryProductTopicResponse) SetBody(v *QueryProductTopicResponseBody) *QueryProductTopicResponse {
	s.Body = v
	return s
}

type QuerySceneRuleRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleName      *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s QuerySceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySceneRuleRequest) GoString() string {
	return s.String()
}

func (s *QuerySceneRuleRequest) SetApiProduct(v string) *QuerySceneRuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *QuerySceneRuleRequest) SetApiRevision(v string) *QuerySceneRuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *QuerySceneRuleRequest) SetIotInstanceId(v string) *QuerySceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QuerySceneRuleRequest) SetRuleName(v string) *QuerySceneRuleRequest {
	s.RuleName = &v
	return s
}

func (s *QuerySceneRuleRequest) SetPageSize(v int32) *QuerySceneRuleRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySceneRuleRequest) SetCurrentPage(v int32) *QuerySceneRuleRequest {
	s.CurrentPage = &v
	return s
}

type QuerySceneRuleResponseBody struct {
	RequestId    *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                           `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QuerySceneRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QuerySceneRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySceneRuleResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySceneRuleResponseBody) SetRequestId(v string) *QuerySceneRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySceneRuleResponseBody) SetSuccess(v bool) *QuerySceneRuleResponseBody {
	s.Success = &v
	return s
}

func (s *QuerySceneRuleResponseBody) SetCode(v string) *QuerySceneRuleResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySceneRuleResponseBody) SetErrorMessage(v string) *QuerySceneRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QuerySceneRuleResponseBody) SetData(v *QuerySceneRuleResponseBodyData) *QuerySceneRuleResponseBody {
	s.Data = v
	return s
}

type QuerySceneRuleResponseBodyData struct {
	Total       *int32                                    `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize    *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage *int32                                    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	RuleList    []*QuerySceneRuleResponseBodyDataRuleList `json:"RuleList,omitempty" xml:"RuleList,omitempty" type:"Repeated"`
}

func (s QuerySceneRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QuerySceneRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *QuerySceneRuleResponseBodyData) SetTotal(v int32) *QuerySceneRuleResponseBodyData {
	s.Total = &v
	return s
}

func (s *QuerySceneRuleResponseBodyData) SetPageSize(v int32) *QuerySceneRuleResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QuerySceneRuleResponseBodyData) SetCurrentPage(v int32) *QuerySceneRuleResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *QuerySceneRuleResponseBodyData) SetRuleList(v []*QuerySceneRuleResponseBodyDataRuleList) *QuerySceneRuleResponseBodyData {
	s.RuleList = v
	return s
}

type QuerySceneRuleResponseBodyDataRuleList struct {
	RuleId          *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	GmtCreate       *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified     *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	RuleName        *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleDescription *string `json:"RuleDescription,omitempty" xml:"RuleDescription,omitempty"`
	RuleStatus      *int32  `json:"RuleStatus,omitempty" xml:"RuleStatus,omitempty"`
}

func (s QuerySceneRuleResponseBodyDataRuleList) String() string {
	return tea.Prettify(s)
}

func (s QuerySceneRuleResponseBodyDataRuleList) GoString() string {
	return s.String()
}

func (s *QuerySceneRuleResponseBodyDataRuleList) SetRuleId(v string) *QuerySceneRuleResponseBodyDataRuleList {
	s.RuleId = &v
	return s
}

func (s *QuerySceneRuleResponseBodyDataRuleList) SetGmtCreate(v int64) *QuerySceneRuleResponseBodyDataRuleList {
	s.GmtCreate = &v
	return s
}

func (s *QuerySceneRuleResponseBodyDataRuleList) SetGmtModified(v int64) *QuerySceneRuleResponseBodyDataRuleList {
	s.GmtModified = &v
	return s
}

func (s *QuerySceneRuleResponseBodyDataRuleList) SetRuleName(v string) *QuerySceneRuleResponseBodyDataRuleList {
	s.RuleName = &v
	return s
}

func (s *QuerySceneRuleResponseBodyDataRuleList) SetRuleDescription(v string) *QuerySceneRuleResponseBodyDataRuleList {
	s.RuleDescription = &v
	return s
}

func (s *QuerySceneRuleResponseBodyDataRuleList) SetRuleStatus(v int32) *QuerySceneRuleResponseBodyDataRuleList {
	s.RuleStatus = &v
	return s
}

type QuerySceneRuleResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QuerySceneRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QuerySceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySceneRuleResponse) GoString() string {
	return s.String()
}

func (s *QuerySceneRuleResponse) SetHeaders(v map[string]*string) *QuerySceneRuleResponse {
	s.Headers = v
	return s
}

func (s *QuerySceneRuleResponse) SetBody(v *QuerySceneRuleResponseBody) *QuerySceneRuleResponse {
	s.Body = v
	return s
}

type QuerySubscribeRelationRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QuerySubscribeRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySubscribeRelationRequest) GoString() string {
	return s.String()
}

func (s *QuerySubscribeRelationRequest) SetApiProduct(v string) *QuerySubscribeRelationRequest {
	s.ApiProduct = &v
	return s
}

func (s *QuerySubscribeRelationRequest) SetApiRevision(v string) *QuerySubscribeRelationRequest {
	s.ApiRevision = &v
	return s
}

func (s *QuerySubscribeRelationRequest) SetIotInstanceId(v string) *QuerySubscribeRelationRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QuerySubscribeRelationRequest) SetProductKey(v string) *QuerySubscribeRelationRequest {
	s.ProductKey = &v
	return s
}

func (s *QuerySubscribeRelationRequest) SetType(v string) *QuerySubscribeRelationRequest {
	s.Type = &v
	return s
}

type QuerySubscribeRelationResponseBody struct {
	RequestId               *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                 *bool     `json:"Success,omitempty" xml:"Success,omitempty"`
	Code                    *string   `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage            *string   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ProductKey              *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Type                    *string   `json:"Type,omitempty" xml:"Type,omitempty"`
	DeviceDataFlag          *bool     `json:"DeviceDataFlag,omitempty" xml:"DeviceDataFlag,omitempty"`
	DeviceLifeCycleFlag     *bool     `json:"DeviceLifeCycleFlag,omitempty" xml:"DeviceLifeCycleFlag,omitempty"`
	DeviceStatusChangeFlag  *bool     `json:"DeviceStatusChangeFlag,omitempty" xml:"DeviceStatusChangeFlag,omitempty"`
	DeviceTopoLifeCycleFlag *bool     `json:"DeviceTopoLifeCycleFlag,omitempty" xml:"DeviceTopoLifeCycleFlag,omitempty"`
	FoundDeviceListFlag     *bool     `json:"FoundDeviceListFlag,omitempty" xml:"FoundDeviceListFlag,omitempty"`
	OtaEventFlag            *bool     `json:"OtaEventFlag,omitempty" xml:"OtaEventFlag,omitempty"`
	ThingHistoryFlag        *bool     `json:"ThingHistoryFlag,omitempty" xml:"ThingHistoryFlag,omitempty"`
	MnsConfiguration        *string   `json:"MnsConfiguration,omitempty" xml:"MnsConfiguration,omitempty"`
	DeviceTagFlag           *bool     `json:"DeviceTagFlag,omitempty" xml:"DeviceTagFlag,omitempty"`
	OtaVersionFlag          *bool     `json:"OtaVersionFlag,omitempty" xml:"OtaVersionFlag,omitempty"`
	OtaJobFlag              *bool     `json:"OtaJobFlag,omitempty" xml:"OtaJobFlag,omitempty"`
	ConsumerGroupIds        []*string `json:"ConsumerGroupIds,omitempty" xml:"ConsumerGroupIds,omitempty" type:"Repeated"`
}

func (s QuerySubscribeRelationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySubscribeRelationResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySubscribeRelationResponseBody) SetRequestId(v string) *QuerySubscribeRelationResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetSuccess(v bool) *QuerySubscribeRelationResponseBody {
	s.Success = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetCode(v string) *QuerySubscribeRelationResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetErrorMessage(v string) *QuerySubscribeRelationResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetProductKey(v string) *QuerySubscribeRelationResponseBody {
	s.ProductKey = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetType(v string) *QuerySubscribeRelationResponseBody {
	s.Type = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetDeviceDataFlag(v bool) *QuerySubscribeRelationResponseBody {
	s.DeviceDataFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetDeviceLifeCycleFlag(v bool) *QuerySubscribeRelationResponseBody {
	s.DeviceLifeCycleFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetDeviceStatusChangeFlag(v bool) *QuerySubscribeRelationResponseBody {
	s.DeviceStatusChangeFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetDeviceTopoLifeCycleFlag(v bool) *QuerySubscribeRelationResponseBody {
	s.DeviceTopoLifeCycleFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetFoundDeviceListFlag(v bool) *QuerySubscribeRelationResponseBody {
	s.FoundDeviceListFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetOtaEventFlag(v bool) *QuerySubscribeRelationResponseBody {
	s.OtaEventFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetThingHistoryFlag(v bool) *QuerySubscribeRelationResponseBody {
	s.ThingHistoryFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetMnsConfiguration(v string) *QuerySubscribeRelationResponseBody {
	s.MnsConfiguration = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetDeviceTagFlag(v bool) *QuerySubscribeRelationResponseBody {
	s.DeviceTagFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetOtaVersionFlag(v bool) *QuerySubscribeRelationResponseBody {
	s.OtaVersionFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetOtaJobFlag(v bool) *QuerySubscribeRelationResponseBody {
	s.OtaJobFlag = &v
	return s
}

func (s *QuerySubscribeRelationResponseBody) SetConsumerGroupIds(v []*string) *QuerySubscribeRelationResponseBody {
	s.ConsumerGroupIds = v
	return s
}

type QuerySubscribeRelationResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QuerySubscribeRelationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QuerySubscribeRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySubscribeRelationResponse) GoString() string {
	return s.String()
}

func (s *QuerySubscribeRelationResponse) SetHeaders(v map[string]*string) *QuerySubscribeRelationResponse {
	s.Headers = v
	return s
}

func (s *QuerySubscribeRelationResponse) SetBody(v *QuerySubscribeRelationResponseBody) *QuerySubscribeRelationResponse {
	s.Body = v
	return s
}

type QuerySummarySceneRuleLogRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	StartTime     *int32  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime       *int32  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
}

func (s QuerySummarySceneRuleLogRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySummarySceneRuleLogRequest) GoString() string {
	return s.String()
}

func (s *QuerySummarySceneRuleLogRequest) SetApiProduct(v string) *QuerySummarySceneRuleLogRequest {
	s.ApiProduct = &v
	return s
}

func (s *QuerySummarySceneRuleLogRequest) SetApiRevision(v string) *QuerySummarySceneRuleLogRequest {
	s.ApiRevision = &v
	return s
}

func (s *QuerySummarySceneRuleLogRequest) SetIotInstanceId(v string) *QuerySummarySceneRuleLogRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QuerySummarySceneRuleLogRequest) SetRuleId(v string) *QuerySummarySceneRuleLogRequest {
	s.RuleId = &v
	return s
}

func (s *QuerySummarySceneRuleLogRequest) SetStartTime(v int32) *QuerySummarySceneRuleLogRequest {
	s.StartTime = &v
	return s
}

func (s *QuerySummarySceneRuleLogRequest) SetEndTime(v int32) *QuerySummarySceneRuleLogRequest {
	s.EndTime = &v
	return s
}

func (s *QuerySummarySceneRuleLogRequest) SetStatus(v string) *QuerySummarySceneRuleLogRequest {
	s.Status = &v
	return s
}

func (s *QuerySummarySceneRuleLogRequest) SetPageSize(v int32) *QuerySummarySceneRuleLogRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySummarySceneRuleLogRequest) SetCurrentPage(v int32) *QuerySummarySceneRuleLogRequest {
	s.CurrentPage = &v
	return s
}

type QuerySummarySceneRuleLogResponseBody struct {
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string                                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data         *QuerySummarySceneRuleLogResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QuerySummarySceneRuleLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySummarySceneRuleLogResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySummarySceneRuleLogResponseBody) SetRequestId(v string) *QuerySummarySceneRuleLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponseBody) SetSuccess(v bool) *QuerySummarySceneRuleLogResponseBody {
	s.Success = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponseBody) SetErrorMessage(v string) *QuerySummarySceneRuleLogResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponseBody) SetCode(v string) *QuerySummarySceneRuleLogResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponseBody) SetData(v *QuerySummarySceneRuleLogResponseBodyData) *QuerySummarySceneRuleLogResponseBody {
	s.Data = v
	return s
}

type QuerySummarySceneRuleLogResponseBodyData struct {
	Total       *int32                                           `json:"Total,omitempty" xml:"Total,omitempty"`
	PageSize    *int32                                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentPage *int32                                           `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	LogList     *QuerySummarySceneRuleLogResponseBodyDataLogList `json:"LogList,omitempty" xml:"LogList,omitempty" type:"Struct"`
}

func (s QuerySummarySceneRuleLogResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QuerySummarySceneRuleLogResponseBodyData) GoString() string {
	return s.String()
}

func (s *QuerySummarySceneRuleLogResponseBodyData) SetTotal(v int32) *QuerySummarySceneRuleLogResponseBodyData {
	s.Total = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponseBodyData) SetPageSize(v int32) *QuerySummarySceneRuleLogResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponseBodyData) SetCurrentPage(v int32) *QuerySummarySceneRuleLogResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponseBodyData) SetLogList(v *QuerySummarySceneRuleLogResponseBodyDataLogList) *QuerySummarySceneRuleLogResponseBodyData {
	s.LogList = v
	return s
}

type QuerySummarySceneRuleLogResponseBodyDataLogList struct {
	LogInfo []*QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo `json:"LogInfo,omitempty" xml:"LogInfo,omitempty" type:"Repeated"`
}

func (s QuerySummarySceneRuleLogResponseBodyDataLogList) String() string {
	return tea.Prettify(s)
}

func (s QuerySummarySceneRuleLogResponseBodyDataLogList) GoString() string {
	return s.String()
}

func (s *QuerySummarySceneRuleLogResponseBodyDataLogList) SetLogInfo(v []*QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo) *QuerySummarySceneRuleLogResponseBodyDataLogList {
	s.LogInfo = v
	return s
}

type QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo struct {
	LogTime *int32  `json:"LogTime,omitempty" xml:"LogTime,omitempty"`
	Result  *string `json:"Result,omitempty" xml:"Result,omitempty"`
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo) String() string {
	return tea.Prettify(s)
}

func (s QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo) GoString() string {
	return s.String()
}

func (s *QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo) SetLogTime(v int32) *QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo {
	s.LogTime = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo) SetResult(v string) *QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo {
	s.Result = &v
	return s
}

func (s *QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo) SetTraceId(v string) *QuerySummarySceneRuleLogResponseBodyDataLogListLogInfo {
	s.TraceId = &v
	return s
}

type QuerySummarySceneRuleLogResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QuerySummarySceneRuleLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QuerySummarySceneRuleLogResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySummarySceneRuleLogResponse) GoString() string {
	return s.String()
}

func (s *QuerySummarySceneRuleLogResponse) SetHeaders(v map[string]*string) *QuerySummarySceneRuleLogResponse {
	s.Headers = v
	return s
}

func (s *QuerySummarySceneRuleLogResponse) SetBody(v *QuerySummarySceneRuleLogResponseBody) *QuerySummarySceneRuleLogResponse {
	s.Body = v
	return s
}

type QuerySuperDeviceGroupRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s QuerySuperDeviceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySuperDeviceGroupRequest) GoString() string {
	return s.String()
}

func (s *QuerySuperDeviceGroupRequest) SetApiProduct(v string) *QuerySuperDeviceGroupRequest {
	s.ApiProduct = &v
	return s
}

func (s *QuerySuperDeviceGroupRequest) SetApiRevision(v string) *QuerySuperDeviceGroupRequest {
	s.ApiRevision = &v
	return s
}

func (s *QuerySuperDeviceGroupRequest) SetIotInstanceId(v string) *QuerySuperDeviceGroupRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QuerySuperDeviceGroupRequest) SetGroupId(v string) *QuerySuperDeviceGroupRequest {
	s.GroupId = &v
	return s
}

type QuerySuperDeviceGroupResponseBody struct {
	RequestId    *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QuerySuperDeviceGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QuerySuperDeviceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySuperDeviceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySuperDeviceGroupResponseBody) SetRequestId(v string) *QuerySuperDeviceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySuperDeviceGroupResponseBody) SetSuccess(v bool) *QuerySuperDeviceGroupResponseBody {
	s.Success = &v
	return s
}

func (s *QuerySuperDeviceGroupResponseBody) SetCode(v string) *QuerySuperDeviceGroupResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySuperDeviceGroupResponseBody) SetErrorMessage(v string) *QuerySuperDeviceGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QuerySuperDeviceGroupResponseBody) SetData(v *QuerySuperDeviceGroupResponseBodyData) *QuerySuperDeviceGroupResponseBody {
	s.Data = v
	return s
}

type QuerySuperDeviceGroupResponseBodyData struct {
	GroupInfo []*QuerySuperDeviceGroupResponseBodyDataGroupInfo `json:"GroupInfo,omitempty" xml:"GroupInfo,omitempty" type:"Repeated"`
}

func (s QuerySuperDeviceGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QuerySuperDeviceGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *QuerySuperDeviceGroupResponseBodyData) SetGroupInfo(v []*QuerySuperDeviceGroupResponseBodyDataGroupInfo) *QuerySuperDeviceGroupResponseBodyData {
	s.GroupInfo = v
	return s
}

type QuerySuperDeviceGroupResponseBodyDataGroupInfo struct {
	GroupId   *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	GroupDesc *string `json:"GroupDesc,omitempty" xml:"GroupDesc,omitempty"`
}

func (s QuerySuperDeviceGroupResponseBodyDataGroupInfo) String() string {
	return tea.Prettify(s)
}

func (s QuerySuperDeviceGroupResponseBodyDataGroupInfo) GoString() string {
	return s.String()
}

func (s *QuerySuperDeviceGroupResponseBodyDataGroupInfo) SetGroupId(v string) *QuerySuperDeviceGroupResponseBodyDataGroupInfo {
	s.GroupId = &v
	return s
}

func (s *QuerySuperDeviceGroupResponseBodyDataGroupInfo) SetGroupName(v string) *QuerySuperDeviceGroupResponseBodyDataGroupInfo {
	s.GroupName = &v
	return s
}

func (s *QuerySuperDeviceGroupResponseBodyDataGroupInfo) SetGroupDesc(v string) *QuerySuperDeviceGroupResponseBodyDataGroupInfo {
	s.GroupDesc = &v
	return s
}

type QuerySuperDeviceGroupResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QuerySuperDeviceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QuerySuperDeviceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySuperDeviceGroupResponse) GoString() string {
	return s.String()
}

func (s *QuerySuperDeviceGroupResponse) SetHeaders(v map[string]*string) *QuerySuperDeviceGroupResponse {
	s.Headers = v
	return s
}

func (s *QuerySuperDeviceGroupResponse) SetBody(v *QuerySuperDeviceGroupResponseBody) *QuerySuperDeviceGroupResponse {
	s.Body = v
	return s
}

type QueryTaskRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	TaskId        *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s QueryTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTaskRequest) GoString() string {
	return s.String()
}

func (s *QueryTaskRequest) SetApiProduct(v string) *QueryTaskRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryTaskRequest) SetApiRevision(v string) *QueryTaskRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryTaskRequest) SetIotInstanceId(v string) *QueryTaskRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryTaskRequest) SetTaskId(v string) *QueryTaskRequest {
	s.TaskId = &v
	return s
}

type QueryTaskResponseBody struct {
	RequestId    *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                      `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                    `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTaskResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTaskResponseBody) SetRequestId(v string) *QueryTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTaskResponseBody) SetSuccess(v bool) *QueryTaskResponseBody {
	s.Success = &v
	return s
}

func (s *QueryTaskResponseBody) SetCode(v string) *QueryTaskResponseBody {
	s.Code = &v
	return s
}

func (s *QueryTaskResponseBody) SetErrorMessage(v string) *QueryTaskResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryTaskResponseBody) SetData(v *QueryTaskResponseBodyData) *QueryTaskResponseBody {
	s.Data = v
	return s
}

type QueryTaskResponseBodyData struct {
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobName      *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	TaskId       *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId        *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	UtcQueueTime *string `json:"UtcQueueTime,omitempty" xml:"UtcQueueTime,omitempty"`
	UtcModified  *string `json:"UtcModified,omitempty" xml:"UtcModified,omitempty"`
	StatusDetail *string `json:"StatusDetail,omitempty" xml:"StatusDetail,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Message      *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s QueryTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryTaskResponseBodyData) SetJobId(v string) *QueryTaskResponseBodyData {
	s.JobId = &v
	return s
}

func (s *QueryTaskResponseBodyData) SetJobName(v string) *QueryTaskResponseBodyData {
	s.JobName = &v
	return s
}

func (s *QueryTaskResponseBodyData) SetTaskId(v string) *QueryTaskResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *QueryTaskResponseBodyData) SetProductKey(v string) *QueryTaskResponseBodyData {
	s.ProductKey = &v
	return s
}

func (s *QueryTaskResponseBodyData) SetDeviceName(v string) *QueryTaskResponseBodyData {
	s.DeviceName = &v
	return s
}

func (s *QueryTaskResponseBodyData) SetIotId(v string) *QueryTaskResponseBodyData {
	s.IotId = &v
	return s
}

func (s *QueryTaskResponseBodyData) SetProgress(v string) *QueryTaskResponseBodyData {
	s.Progress = &v
	return s
}

func (s *QueryTaskResponseBodyData) SetUtcQueueTime(v string) *QueryTaskResponseBodyData {
	s.UtcQueueTime = &v
	return s
}

func (s *QueryTaskResponseBodyData) SetUtcModified(v string) *QueryTaskResponseBodyData {
	s.UtcModified = &v
	return s
}

func (s *QueryTaskResponseBodyData) SetStatusDetail(v string) *QueryTaskResponseBodyData {
	s.StatusDetail = &v
	return s
}

func (s *QueryTaskResponseBodyData) SetStatus(v string) *QueryTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *QueryTaskResponseBodyData) SetMessage(v string) *QueryTaskResponseBodyData {
	s.Message = &v
	return s
}

type QueryTaskResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTaskResponse) GoString() string {
	return s.String()
}

func (s *QueryTaskResponse) SetHeaders(v map[string]*string) *QueryTaskResponse {
	s.Headers = v
	return s
}

func (s *QueryTaskResponse) SetBody(v *QueryTaskResponseBody) *QueryTaskResponse {
	s.Body = v
	return s
}

type QueryThingModelRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ModelVersion      *string `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty"`
	FunctionBlockId   *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryThingModelRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelRequest) GoString() string {
	return s.String()
}

func (s *QueryThingModelRequest) SetApiProduct(v string) *QueryThingModelRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryThingModelRequest) SetApiRevision(v string) *QueryThingModelRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryThingModelRequest) SetIotInstanceId(v string) *QueryThingModelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryThingModelRequest) SetResourceGroupId(v string) *QueryThingModelRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *QueryThingModelRequest) SetProductKey(v string) *QueryThingModelRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryThingModelRequest) SetModelVersion(v string) *QueryThingModelRequest {
	s.ModelVersion = &v
	return s
}

func (s *QueryThingModelRequest) SetFunctionBlockId(v string) *QueryThingModelRequest {
	s.FunctionBlockId = &v
	return s
}

func (s *QueryThingModelRequest) SetRealTenantId(v string) *QueryThingModelRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryThingModelRequest) SetRealTripartiteKey(v string) *QueryThingModelRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryThingModelResponseBody struct {
	RequestId    *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ProductKey   *string                          `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Data         *QueryThingModelResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryThingModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelResponseBody) GoString() string {
	return s.String()
}

func (s *QueryThingModelResponseBody) SetRequestId(v string) *QueryThingModelResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryThingModelResponseBody) SetSuccess(v bool) *QueryThingModelResponseBody {
	s.Success = &v
	return s
}

func (s *QueryThingModelResponseBody) SetCode(v string) *QueryThingModelResponseBody {
	s.Code = &v
	return s
}

func (s *QueryThingModelResponseBody) SetErrorMessage(v string) *QueryThingModelResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryThingModelResponseBody) SetProductKey(v string) *QueryThingModelResponseBody {
	s.ProductKey = &v
	return s
}

func (s *QueryThingModelResponseBody) SetData(v *QueryThingModelResponseBodyData) *QueryThingModelResponseBody {
	s.Data = v
	return s
}

type QueryThingModelResponseBodyData struct {
	ThingModelJson *string `json:"ThingModelJson,omitempty" xml:"ThingModelJson,omitempty"`
}

func (s QueryThingModelResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryThingModelResponseBodyData) SetThingModelJson(v string) *QueryThingModelResponseBodyData {
	s.ThingModelJson = &v
	return s
}

type QueryThingModelResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryThingModelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryThingModelResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelResponse) GoString() string {
	return s.String()
}

func (s *QueryThingModelResponse) SetHeaders(v map[string]*string) *QueryThingModelResponse {
	s.Headers = v
	return s
}

func (s *QueryThingModelResponse) SetBody(v *QueryThingModelResponseBody) *QueryThingModelResponse {
	s.Body = v
	return s
}

type QueryThingModelExtendConfigRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ModelVersion      *string `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty"`
	FunctionBlockId   *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryThingModelExtendConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelExtendConfigRequest) GoString() string {
	return s.String()
}

func (s *QueryThingModelExtendConfigRequest) SetApiProduct(v string) *QueryThingModelExtendConfigRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryThingModelExtendConfigRequest) SetApiRevision(v string) *QueryThingModelExtendConfigRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryThingModelExtendConfigRequest) SetIotInstanceId(v string) *QueryThingModelExtendConfigRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryThingModelExtendConfigRequest) SetProductKey(v string) *QueryThingModelExtendConfigRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryThingModelExtendConfigRequest) SetResourceGroupId(v string) *QueryThingModelExtendConfigRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *QueryThingModelExtendConfigRequest) SetModelVersion(v string) *QueryThingModelExtendConfigRequest {
	s.ModelVersion = &v
	return s
}

func (s *QueryThingModelExtendConfigRequest) SetFunctionBlockId(v string) *QueryThingModelExtendConfigRequest {
	s.FunctionBlockId = &v
	return s
}

func (s *QueryThingModelExtendConfigRequest) SetRealTenantId(v string) *QueryThingModelExtendConfigRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryThingModelExtendConfigRequest) SetRealTripartiteKey(v string) *QueryThingModelExtendConfigRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryThingModelExtendConfigResponseBody struct {
	RequestId    *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryThingModelExtendConfigResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryThingModelExtendConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelExtendConfigResponseBody) GoString() string {
	return s.String()
}

func (s *QueryThingModelExtendConfigResponseBody) SetRequestId(v string) *QueryThingModelExtendConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryThingModelExtendConfigResponseBody) SetSuccess(v bool) *QueryThingModelExtendConfigResponseBody {
	s.Success = &v
	return s
}

func (s *QueryThingModelExtendConfigResponseBody) SetCode(v string) *QueryThingModelExtendConfigResponseBody {
	s.Code = &v
	return s
}

func (s *QueryThingModelExtendConfigResponseBody) SetErrorMessage(v string) *QueryThingModelExtendConfigResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryThingModelExtendConfigResponseBody) SetData(v *QueryThingModelExtendConfigResponseBodyData) *QueryThingModelExtendConfigResponseBody {
	s.Data = v
	return s
}

type QueryThingModelExtendConfigResponseBodyData struct {
	Configuration *string `json:"Configuration,omitempty" xml:"Configuration,omitempty"`
}

func (s QueryThingModelExtendConfigResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelExtendConfigResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryThingModelExtendConfigResponseBodyData) SetConfiguration(v string) *QueryThingModelExtendConfigResponseBodyData {
	s.Configuration = &v
	return s
}

type QueryThingModelExtendConfigResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryThingModelExtendConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryThingModelExtendConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelExtendConfigResponse) GoString() string {
	return s.String()
}

func (s *QueryThingModelExtendConfigResponse) SetHeaders(v map[string]*string) *QueryThingModelExtendConfigResponse {
	s.Headers = v
	return s
}

func (s *QueryThingModelExtendConfigResponse) SetBody(v *QueryThingModelExtendConfigResponseBody) *QueryThingModelExtendConfigResponse {
	s.Body = v
	return s
}

type QueryThingModelExtendConfigPublishedRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ModelVersion      *string `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty"`
	FunctionBlockId   *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryThingModelExtendConfigPublishedRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelExtendConfigPublishedRequest) GoString() string {
	return s.String()
}

func (s *QueryThingModelExtendConfigPublishedRequest) SetApiProduct(v string) *QueryThingModelExtendConfigPublishedRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedRequest) SetApiRevision(v string) *QueryThingModelExtendConfigPublishedRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedRequest) SetIotInstanceId(v string) *QueryThingModelExtendConfigPublishedRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedRequest) SetProductKey(v string) *QueryThingModelExtendConfigPublishedRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedRequest) SetModelVersion(v string) *QueryThingModelExtendConfigPublishedRequest {
	s.ModelVersion = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedRequest) SetFunctionBlockId(v string) *QueryThingModelExtendConfigPublishedRequest {
	s.FunctionBlockId = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedRequest) SetRealTenantId(v string) *QueryThingModelExtendConfigPublishedRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedRequest) SetRealTripartiteKey(v string) *QueryThingModelExtendConfigPublishedRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryThingModelExtendConfigPublishedResponseBody struct {
	RequestId    *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *QueryThingModelExtendConfigPublishedResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryThingModelExtendConfigPublishedResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelExtendConfigPublishedResponseBody) GoString() string {
	return s.String()
}

func (s *QueryThingModelExtendConfigPublishedResponseBody) SetRequestId(v string) *QueryThingModelExtendConfigPublishedResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedResponseBody) SetSuccess(v bool) *QueryThingModelExtendConfigPublishedResponseBody {
	s.Success = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedResponseBody) SetCode(v string) *QueryThingModelExtendConfigPublishedResponseBody {
	s.Code = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedResponseBody) SetErrorMessage(v string) *QueryThingModelExtendConfigPublishedResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryThingModelExtendConfigPublishedResponseBody) SetData(v *QueryThingModelExtendConfigPublishedResponseBodyData) *QueryThingModelExtendConfigPublishedResponseBody {
	s.Data = v
	return s
}

type QueryThingModelExtendConfigPublishedResponseBodyData struct {
	Configuration *string `json:"Configuration,omitempty" xml:"Configuration,omitempty"`
}

func (s QueryThingModelExtendConfigPublishedResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelExtendConfigPublishedResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryThingModelExtendConfigPublishedResponseBodyData) SetConfiguration(v string) *QueryThingModelExtendConfigPublishedResponseBodyData {
	s.Configuration = &v
	return s
}

type QueryThingModelExtendConfigPublishedResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryThingModelExtendConfigPublishedResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryThingModelExtendConfigPublishedResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelExtendConfigPublishedResponse) GoString() string {
	return s.String()
}

func (s *QueryThingModelExtendConfigPublishedResponse) SetHeaders(v map[string]*string) *QueryThingModelExtendConfigPublishedResponse {
	s.Headers = v
	return s
}

func (s *QueryThingModelExtendConfigPublishedResponse) SetBody(v *QueryThingModelExtendConfigPublishedResponseBody) *QueryThingModelExtendConfigPublishedResponse {
	s.Body = v
	return s
}

type QueryThingModelPublishedRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ModelVersion      *string `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty"`
	FunctionBlockId   *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s QueryThingModelPublishedRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelPublishedRequest) GoString() string {
	return s.String()
}

func (s *QueryThingModelPublishedRequest) SetApiProduct(v string) *QueryThingModelPublishedRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryThingModelPublishedRequest) SetApiRevision(v string) *QueryThingModelPublishedRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryThingModelPublishedRequest) SetIotInstanceId(v string) *QueryThingModelPublishedRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryThingModelPublishedRequest) SetProductKey(v string) *QueryThingModelPublishedRequest {
	s.ProductKey = &v
	return s
}

func (s *QueryThingModelPublishedRequest) SetResourceGroupId(v string) *QueryThingModelPublishedRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *QueryThingModelPublishedRequest) SetModelVersion(v string) *QueryThingModelPublishedRequest {
	s.ModelVersion = &v
	return s
}

func (s *QueryThingModelPublishedRequest) SetFunctionBlockId(v string) *QueryThingModelPublishedRequest {
	s.FunctionBlockId = &v
	return s
}

func (s *QueryThingModelPublishedRequest) SetRealTenantId(v string) *QueryThingModelPublishedRequest {
	s.RealTenantId = &v
	return s
}

func (s *QueryThingModelPublishedRequest) SetRealTripartiteKey(v string) *QueryThingModelPublishedRequest {
	s.RealTripartiteKey = &v
	return s
}

type QueryThingModelPublishedResponseBody struct {
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ProductKey   *string                                   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Data         *QueryThingModelPublishedResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryThingModelPublishedResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelPublishedResponseBody) GoString() string {
	return s.String()
}

func (s *QueryThingModelPublishedResponseBody) SetRequestId(v string) *QueryThingModelPublishedResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryThingModelPublishedResponseBody) SetSuccess(v bool) *QueryThingModelPublishedResponseBody {
	s.Success = &v
	return s
}

func (s *QueryThingModelPublishedResponseBody) SetCode(v string) *QueryThingModelPublishedResponseBody {
	s.Code = &v
	return s
}

func (s *QueryThingModelPublishedResponseBody) SetErrorMessage(v string) *QueryThingModelPublishedResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryThingModelPublishedResponseBody) SetProductKey(v string) *QueryThingModelPublishedResponseBody {
	s.ProductKey = &v
	return s
}

func (s *QueryThingModelPublishedResponseBody) SetData(v *QueryThingModelPublishedResponseBodyData) *QueryThingModelPublishedResponseBody {
	s.Data = v
	return s
}

type QueryThingModelPublishedResponseBodyData struct {
	ThingModelJson *string `json:"ThingModelJson,omitempty" xml:"ThingModelJson,omitempty"`
}

func (s QueryThingModelPublishedResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelPublishedResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryThingModelPublishedResponseBodyData) SetThingModelJson(v string) *QueryThingModelPublishedResponseBodyData {
	s.ThingModelJson = &v
	return s
}

type QueryThingModelPublishedResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryThingModelPublishedResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryThingModelPublishedResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryThingModelPublishedResponse) GoString() string {
	return s.String()
}

func (s *QueryThingModelPublishedResponse) SetHeaders(v map[string]*string) *QueryThingModelPublishedResponse {
	s.Headers = v
	return s
}

func (s *QueryThingModelPublishedResponse) SetBody(v *QueryThingModelPublishedResponseBody) *QueryThingModelPublishedResponse {
	s.Body = v
	return s
}

type QueryTopicReverseRouteTableRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Topic         *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s QueryTopicReverseRouteTableRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTopicReverseRouteTableRequest) GoString() string {
	return s.String()
}

func (s *QueryTopicReverseRouteTableRequest) SetApiProduct(v string) *QueryTopicReverseRouteTableRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryTopicReverseRouteTableRequest) SetApiRevision(v string) *QueryTopicReverseRouteTableRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryTopicReverseRouteTableRequest) SetIotInstanceId(v string) *QueryTopicReverseRouteTableRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryTopicReverseRouteTableRequest) SetRegionId(v string) *QueryTopicReverseRouteTableRequest {
	s.RegionId = &v
	return s
}

func (s *QueryTopicReverseRouteTableRequest) SetTopic(v string) *QueryTopicReverseRouteTableRequest {
	s.Topic = &v
	return s
}

type QueryTopicReverseRouteTableResponseBody struct {
	RequestId    *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                             `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	SrcTopics    *QueryTopicReverseRouteTableResponseBodySrcTopics `json:"SrcTopics,omitempty" xml:"SrcTopics,omitempty" type:"Struct"`
}

func (s QueryTopicReverseRouteTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTopicReverseRouteTableResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTopicReverseRouteTableResponseBody) SetRequestId(v string) *QueryTopicReverseRouteTableResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTopicReverseRouteTableResponseBody) SetSuccess(v bool) *QueryTopicReverseRouteTableResponseBody {
	s.Success = &v
	return s
}

func (s *QueryTopicReverseRouteTableResponseBody) SetCode(v string) *QueryTopicReverseRouteTableResponseBody {
	s.Code = &v
	return s
}

func (s *QueryTopicReverseRouteTableResponseBody) SetErrorMessage(v string) *QueryTopicReverseRouteTableResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryTopicReverseRouteTableResponseBody) SetSrcTopics(v *QueryTopicReverseRouteTableResponseBodySrcTopics) *QueryTopicReverseRouteTableResponseBody {
	s.SrcTopics = v
	return s
}

type QueryTopicReverseRouteTableResponseBodySrcTopics struct {
	Topic []map[string]*string `json:"Topic,omitempty" xml:"Topic,omitempty" type:"Repeated"`
}

func (s QueryTopicReverseRouteTableResponseBodySrcTopics) String() string {
	return tea.Prettify(s)
}

func (s QueryTopicReverseRouteTableResponseBodySrcTopics) GoString() string {
	return s.String()
}

func (s *QueryTopicReverseRouteTableResponseBodySrcTopics) SetTopic(v []map[string]*string) *QueryTopicReverseRouteTableResponseBodySrcTopics {
	s.Topic = v
	return s
}

type QueryTopicReverseRouteTableResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryTopicReverseRouteTableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTopicReverseRouteTableResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTopicReverseRouteTableResponse) GoString() string {
	return s.String()
}

func (s *QueryTopicReverseRouteTableResponse) SetHeaders(v map[string]*string) *QueryTopicReverseRouteTableResponse {
	s.Headers = v
	return s
}

func (s *QueryTopicReverseRouteTableResponse) SetBody(v *QueryTopicReverseRouteTableResponseBody) *QueryTopicReverseRouteTableResponse {
	s.Body = v
	return s
}

type QueryTopicRouteTableRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Topic         *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s QueryTopicRouteTableRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTopicRouteTableRequest) GoString() string {
	return s.String()
}

func (s *QueryTopicRouteTableRequest) SetApiProduct(v string) *QueryTopicRouteTableRequest {
	s.ApiProduct = &v
	return s
}

func (s *QueryTopicRouteTableRequest) SetApiRevision(v string) *QueryTopicRouteTableRequest {
	s.ApiRevision = &v
	return s
}

func (s *QueryTopicRouteTableRequest) SetIotInstanceId(v string) *QueryTopicRouteTableRequest {
	s.IotInstanceId = &v
	return s
}

func (s *QueryTopicRouteTableRequest) SetTopic(v string) *QueryTopicRouteTableRequest {
	s.Topic = &v
	return s
}

type QueryTopicRouteTableResponseBody struct {
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                      `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	DstTopics    *QueryTopicRouteTableResponseBodyDstTopics `json:"DstTopics,omitempty" xml:"DstTopics,omitempty" type:"Struct"`
}

func (s QueryTopicRouteTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTopicRouteTableResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTopicRouteTableResponseBody) SetRequestId(v string) *QueryTopicRouteTableResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTopicRouteTableResponseBody) SetSuccess(v bool) *QueryTopicRouteTableResponseBody {
	s.Success = &v
	return s
}

func (s *QueryTopicRouteTableResponseBody) SetCode(v string) *QueryTopicRouteTableResponseBody {
	s.Code = &v
	return s
}

func (s *QueryTopicRouteTableResponseBody) SetErrorMessage(v string) *QueryTopicRouteTableResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *QueryTopicRouteTableResponseBody) SetDstTopics(v *QueryTopicRouteTableResponseBodyDstTopics) *QueryTopicRouteTableResponseBody {
	s.DstTopics = v
	return s
}

type QueryTopicRouteTableResponseBodyDstTopics struct {
	Topic []map[string]*string `json:"Topic,omitempty" xml:"Topic,omitempty" type:"Repeated"`
}

func (s QueryTopicRouteTableResponseBodyDstTopics) String() string {
	return tea.Prettify(s)
}

func (s QueryTopicRouteTableResponseBodyDstTopics) GoString() string {
	return s.String()
}

func (s *QueryTopicRouteTableResponseBodyDstTopics) SetTopic(v []map[string]*string) *QueryTopicRouteTableResponseBodyDstTopics {
	s.Topic = v
	return s
}

type QueryTopicRouteTableResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryTopicRouteTableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTopicRouteTableResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTopicRouteTableResponse) GoString() string {
	return s.String()
}

func (s *QueryTopicRouteTableResponse) SetHeaders(v map[string]*string) *QueryTopicRouteTableResponse {
	s.Headers = v
	return s
}

func (s *QueryTopicRouteTableResponse) SetBody(v *QueryTopicRouteTableResponseBody) *QueryTopicRouteTableResponse {
	s.Body = v
	return s
}

type RegisterDeviceRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DevEui            *string `json:"DevEui,omitempty" xml:"DevEui,omitempty"`
	Nickname          *string `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
	PinCode           *string `json:"PinCode,omitempty" xml:"PinCode,omitempty"`
	JoinEui           *string `json:"JoinEui,omitempty" xml:"JoinEui,omitempty"`
	AppKey            *string `json:"AppKey,omitempty" xml:"AppKey,omitempty"`
	LoraNodeType      *string `json:"LoraNodeType,omitempty" xml:"LoraNodeType,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s RegisterDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s RegisterDeviceRequest) GoString() string {
	return s.String()
}

func (s *RegisterDeviceRequest) SetApiProduct(v string) *RegisterDeviceRequest {
	s.ApiProduct = &v
	return s
}

func (s *RegisterDeviceRequest) SetApiRevision(v string) *RegisterDeviceRequest {
	s.ApiRevision = &v
	return s
}

func (s *RegisterDeviceRequest) SetIotInstanceId(v string) *RegisterDeviceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *RegisterDeviceRequest) SetProductKey(v string) *RegisterDeviceRequest {
	s.ProductKey = &v
	return s
}

func (s *RegisterDeviceRequest) SetDeviceName(v string) *RegisterDeviceRequest {
	s.DeviceName = &v
	return s
}

func (s *RegisterDeviceRequest) SetDevEui(v string) *RegisterDeviceRequest {
	s.DevEui = &v
	return s
}

func (s *RegisterDeviceRequest) SetNickname(v string) *RegisterDeviceRequest {
	s.Nickname = &v
	return s
}

func (s *RegisterDeviceRequest) SetPinCode(v string) *RegisterDeviceRequest {
	s.PinCode = &v
	return s
}

func (s *RegisterDeviceRequest) SetJoinEui(v string) *RegisterDeviceRequest {
	s.JoinEui = &v
	return s
}

func (s *RegisterDeviceRequest) SetAppKey(v string) *RegisterDeviceRequest {
	s.AppKey = &v
	return s
}

func (s *RegisterDeviceRequest) SetLoraNodeType(v string) *RegisterDeviceRequest {
	s.LoraNodeType = &v
	return s
}

func (s *RegisterDeviceRequest) SetRealTenantId(v string) *RegisterDeviceRequest {
	s.RealTenantId = &v
	return s
}

func (s *RegisterDeviceRequest) SetRealTripartiteKey(v string) *RegisterDeviceRequest {
	s.RealTripartiteKey = &v
	return s
}

type RegisterDeviceResponseBody struct {
	RequestId    *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                           `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                         `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *RegisterDeviceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s RegisterDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RegisterDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *RegisterDeviceResponseBody) SetRequestId(v string) *RegisterDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RegisterDeviceResponseBody) SetSuccess(v bool) *RegisterDeviceResponseBody {
	s.Success = &v
	return s
}

func (s *RegisterDeviceResponseBody) SetCode(v string) *RegisterDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *RegisterDeviceResponseBody) SetErrorMessage(v string) *RegisterDeviceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *RegisterDeviceResponseBody) SetData(v *RegisterDeviceResponseBodyData) *RegisterDeviceResponseBody {
	s.Data = v
	return s
}

type RegisterDeviceResponseBodyData struct {
	IotId        *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	ProductKey   *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DeviceSecret *string `json:"DeviceSecret,omitempty" xml:"DeviceSecret,omitempty"`
	DevEui       *string `json:"DevEui,omitempty" xml:"DevEui,omitempty"`
	JoinEui      *string `json:"JoinEui,omitempty" xml:"JoinEui,omitempty"`
	Nickname     *string `json:"Nickname,omitempty" xml:"Nickname,omitempty"`
}

func (s RegisterDeviceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RegisterDeviceResponseBodyData) GoString() string {
	return s.String()
}

func (s *RegisterDeviceResponseBodyData) SetIotId(v string) *RegisterDeviceResponseBodyData {
	s.IotId = &v
	return s
}

func (s *RegisterDeviceResponseBodyData) SetProductKey(v string) *RegisterDeviceResponseBodyData {
	s.ProductKey = &v
	return s
}

func (s *RegisterDeviceResponseBodyData) SetDeviceName(v string) *RegisterDeviceResponseBodyData {
	s.DeviceName = &v
	return s
}

func (s *RegisterDeviceResponseBodyData) SetDeviceSecret(v string) *RegisterDeviceResponseBodyData {
	s.DeviceSecret = &v
	return s
}

func (s *RegisterDeviceResponseBodyData) SetDevEui(v string) *RegisterDeviceResponseBodyData {
	s.DevEui = &v
	return s
}

func (s *RegisterDeviceResponseBodyData) SetJoinEui(v string) *RegisterDeviceResponseBodyData {
	s.JoinEui = &v
	return s
}

func (s *RegisterDeviceResponseBodyData) SetNickname(v string) *RegisterDeviceResponseBodyData {
	s.Nickname = &v
	return s
}

type RegisterDeviceResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RegisterDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RegisterDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s RegisterDeviceResponse) GoString() string {
	return s.String()
}

func (s *RegisterDeviceResponse) SetHeaders(v map[string]*string) *RegisterDeviceResponse {
	s.Headers = v
	return s
}

func (s *RegisterDeviceResponse) SetBody(v *RegisterDeviceResponseBody) *RegisterDeviceResponse {
	s.Body = v
	return s
}

type ReleaseEdgeDriverVersionRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	DriverVersion *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty"`
}

func (s ReleaseEdgeDriverVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseEdgeDriverVersionRequest) GoString() string {
	return s.String()
}

func (s *ReleaseEdgeDriverVersionRequest) SetApiProduct(v string) *ReleaseEdgeDriverVersionRequest {
	s.ApiProduct = &v
	return s
}

func (s *ReleaseEdgeDriverVersionRequest) SetApiRevision(v string) *ReleaseEdgeDriverVersionRequest {
	s.ApiRevision = &v
	return s
}

func (s *ReleaseEdgeDriverVersionRequest) SetIotInstanceId(v string) *ReleaseEdgeDriverVersionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ReleaseEdgeDriverVersionRequest) SetDriverId(v string) *ReleaseEdgeDriverVersionRequest {
	s.DriverId = &v
	return s
}

func (s *ReleaseEdgeDriverVersionRequest) SetDriverVersion(v string) *ReleaseEdgeDriverVersionRequest {
	s.DriverVersion = &v
	return s
}

type ReleaseEdgeDriverVersionResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s ReleaseEdgeDriverVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseEdgeDriverVersionResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseEdgeDriverVersionResponseBody) SetRequestId(v string) *ReleaseEdgeDriverVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReleaseEdgeDriverVersionResponseBody) SetSuccess(v bool) *ReleaseEdgeDriverVersionResponseBody {
	s.Success = &v
	return s
}

func (s *ReleaseEdgeDriverVersionResponseBody) SetCode(v string) *ReleaseEdgeDriverVersionResponseBody {
	s.Code = &v
	return s
}

func (s *ReleaseEdgeDriverVersionResponseBody) SetErrorMessage(v string) *ReleaseEdgeDriverVersionResponseBody {
	s.ErrorMessage = &v
	return s
}

type ReleaseEdgeDriverVersionResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReleaseEdgeDriverVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleaseEdgeDriverVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseEdgeDriverVersionResponse) GoString() string {
	return s.String()
}

func (s *ReleaseEdgeDriverVersionResponse) SetHeaders(v map[string]*string) *ReleaseEdgeDriverVersionResponse {
	s.Headers = v
	return s
}

func (s *ReleaseEdgeDriverVersionResponse) SetBody(v *ReleaseEdgeDriverVersionResponseBody) *ReleaseEdgeDriverVersionResponse {
	s.Body = v
	return s
}

type RemoveThingTopoRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s RemoveThingTopoRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveThingTopoRequest) GoString() string {
	return s.String()
}

func (s *RemoveThingTopoRequest) SetApiProduct(v string) *RemoveThingTopoRequest {
	s.ApiProduct = &v
	return s
}

func (s *RemoveThingTopoRequest) SetApiRevision(v string) *RemoveThingTopoRequest {
	s.ApiRevision = &v
	return s
}

func (s *RemoveThingTopoRequest) SetIotInstanceId(v string) *RemoveThingTopoRequest {
	s.IotInstanceId = &v
	return s
}

func (s *RemoveThingTopoRequest) SetProductKey(v string) *RemoveThingTopoRequest {
	s.ProductKey = &v
	return s
}

func (s *RemoveThingTopoRequest) SetDeviceName(v string) *RemoveThingTopoRequest {
	s.DeviceName = &v
	return s
}

func (s *RemoveThingTopoRequest) SetIotId(v string) *RemoveThingTopoRequest {
	s.IotId = &v
	return s
}

type RemoveThingTopoResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s RemoveThingTopoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveThingTopoResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveThingTopoResponseBody) SetRequestId(v string) *RemoveThingTopoResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveThingTopoResponseBody) SetSuccess(v bool) *RemoveThingTopoResponseBody {
	s.Success = &v
	return s
}

func (s *RemoveThingTopoResponseBody) SetCode(v string) *RemoveThingTopoResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveThingTopoResponseBody) SetErrorMessage(v string) *RemoveThingTopoResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *RemoveThingTopoResponseBody) SetData(v bool) *RemoveThingTopoResponseBody {
	s.Data = &v
	return s
}

type RemoveThingTopoResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RemoveThingTopoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveThingTopoResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveThingTopoResponse) GoString() string {
	return s.String()
}

func (s *RemoveThingTopoResponse) SetHeaders(v map[string]*string) *RemoveThingTopoResponse {
	s.Headers = v
	return s
}

func (s *RemoveThingTopoResponse) SetBody(v *RemoveThingTopoResponseBody) *RemoveThingTopoResponse {
	s.Body = v
	return s
}

type ReplaceEdgeInstanceGatewayRequest struct {
	ApiProduct       *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision      *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId    *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	CurrentGatewayId *string `json:"CurrentGatewayId,omitempty" xml:"CurrentGatewayId,omitempty"`
	NewGatewayId     *string `json:"NewGatewayId,omitempty" xml:"NewGatewayId,omitempty"`
}

func (s ReplaceEdgeInstanceGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s ReplaceEdgeInstanceGatewayRequest) GoString() string {
	return s.String()
}

func (s *ReplaceEdgeInstanceGatewayRequest) SetApiProduct(v string) *ReplaceEdgeInstanceGatewayRequest {
	s.ApiProduct = &v
	return s
}

func (s *ReplaceEdgeInstanceGatewayRequest) SetApiRevision(v string) *ReplaceEdgeInstanceGatewayRequest {
	s.ApiRevision = &v
	return s
}

func (s *ReplaceEdgeInstanceGatewayRequest) SetIotInstanceId(v string) *ReplaceEdgeInstanceGatewayRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ReplaceEdgeInstanceGatewayRequest) SetInstanceId(v string) *ReplaceEdgeInstanceGatewayRequest {
	s.InstanceId = &v
	return s
}

func (s *ReplaceEdgeInstanceGatewayRequest) SetCurrentGatewayId(v string) *ReplaceEdgeInstanceGatewayRequest {
	s.CurrentGatewayId = &v
	return s
}

func (s *ReplaceEdgeInstanceGatewayRequest) SetNewGatewayId(v string) *ReplaceEdgeInstanceGatewayRequest {
	s.NewGatewayId = &v
	return s
}

type ReplaceEdgeInstanceGatewayResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s ReplaceEdgeInstanceGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReplaceEdgeInstanceGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *ReplaceEdgeInstanceGatewayResponseBody) SetRequestId(v string) *ReplaceEdgeInstanceGatewayResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReplaceEdgeInstanceGatewayResponseBody) SetSuccess(v bool) *ReplaceEdgeInstanceGatewayResponseBody {
	s.Success = &v
	return s
}

func (s *ReplaceEdgeInstanceGatewayResponseBody) SetCode(v string) *ReplaceEdgeInstanceGatewayResponseBody {
	s.Code = &v
	return s
}

func (s *ReplaceEdgeInstanceGatewayResponseBody) SetErrorMessage(v string) *ReplaceEdgeInstanceGatewayResponseBody {
	s.ErrorMessage = &v
	return s
}

type ReplaceEdgeInstanceGatewayResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReplaceEdgeInstanceGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReplaceEdgeInstanceGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s ReplaceEdgeInstanceGatewayResponse) GoString() string {
	return s.String()
}

func (s *ReplaceEdgeInstanceGatewayResponse) SetHeaders(v map[string]*string) *ReplaceEdgeInstanceGatewayResponse {
	s.Headers = v
	return s
}

func (s *ReplaceEdgeInstanceGatewayResponse) SetBody(v *ReplaceEdgeInstanceGatewayResponseBody) *ReplaceEdgeInstanceGatewayResponse {
	s.Body = v
	return s
}

type ResetConsumerGroupPositionRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s ResetConsumerGroupPositionRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetConsumerGroupPositionRequest) GoString() string {
	return s.String()
}

func (s *ResetConsumerGroupPositionRequest) SetApiProduct(v string) *ResetConsumerGroupPositionRequest {
	s.ApiProduct = &v
	return s
}

func (s *ResetConsumerGroupPositionRequest) SetApiRevision(v string) *ResetConsumerGroupPositionRequest {
	s.ApiRevision = &v
	return s
}

func (s *ResetConsumerGroupPositionRequest) SetIotInstanceId(v string) *ResetConsumerGroupPositionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ResetConsumerGroupPositionRequest) SetGroupId(v string) *ResetConsumerGroupPositionRequest {
	s.GroupId = &v
	return s
}

type ResetConsumerGroupPositionResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s ResetConsumerGroupPositionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetConsumerGroupPositionResponseBody) GoString() string {
	return s.String()
}

func (s *ResetConsumerGroupPositionResponseBody) SetRequestId(v string) *ResetConsumerGroupPositionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetConsumerGroupPositionResponseBody) SetSuccess(v bool) *ResetConsumerGroupPositionResponseBody {
	s.Success = &v
	return s
}

func (s *ResetConsumerGroupPositionResponseBody) SetErrorMessage(v string) *ResetConsumerGroupPositionResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ResetConsumerGroupPositionResponseBody) SetCode(v string) *ResetConsumerGroupPositionResponseBody {
	s.Code = &v
	return s
}

type ResetConsumerGroupPositionResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ResetConsumerGroupPositionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResetConsumerGroupPositionResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetConsumerGroupPositionResponse) GoString() string {
	return s.String()
}

func (s *ResetConsumerGroupPositionResponse) SetHeaders(v map[string]*string) *ResetConsumerGroupPositionResponse {
	s.Headers = v
	return s
}

func (s *ResetConsumerGroupPositionResponse) SetBody(v *ResetConsumerGroupPositionResponseBody) *ResetConsumerGroupPositionResponse {
	s.Body = v
	return s
}

type ResetThingRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s ResetThingRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetThingRequest) GoString() string {
	return s.String()
}

func (s *ResetThingRequest) SetApiProduct(v string) *ResetThingRequest {
	s.ApiProduct = &v
	return s
}

func (s *ResetThingRequest) SetApiRevision(v string) *ResetThingRequest {
	s.ApiRevision = &v
	return s
}

func (s *ResetThingRequest) SetIotInstanceId(v string) *ResetThingRequest {
	s.IotInstanceId = &v
	return s
}

func (s *ResetThingRequest) SetProductKey(v string) *ResetThingRequest {
	s.ProductKey = &v
	return s
}

func (s *ResetThingRequest) SetDeviceName(v string) *ResetThingRequest {
	s.DeviceName = &v
	return s
}

func (s *ResetThingRequest) SetIotId(v string) *ResetThingRequest {
	s.IotId = &v
	return s
}

type ResetThingResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s ResetThingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetThingResponseBody) GoString() string {
	return s.String()
}

func (s *ResetThingResponseBody) SetRequestId(v string) *ResetThingResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetThingResponseBody) SetSuccess(v bool) *ResetThingResponseBody {
	s.Success = &v
	return s
}

func (s *ResetThingResponseBody) SetCode(v string) *ResetThingResponseBody {
	s.Code = &v
	return s
}

func (s *ResetThingResponseBody) SetErrorMessage(v string) *ResetThingResponseBody {
	s.ErrorMessage = &v
	return s
}

type ResetThingResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ResetThingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResetThingResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetThingResponse) GoString() string {
	return s.String()
}

func (s *ResetThingResponse) SetHeaders(v map[string]*string) *ResetThingResponse {
	s.Headers = v
	return s
}

func (s *ResetThingResponse) SetBody(v *ResetThingResponseBody) *ResetThingResponse {
	s.Body = v
	return s
}

type RRpcRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	Timeout           *int32  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	RequestBase64Byte *string `json:"RequestBase64Byte,omitempty" xml:"RequestBase64Byte,omitempty"`
	Topic             *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s RRpcRequest) String() string {
	return tea.Prettify(s)
}

func (s RRpcRequest) GoString() string {
	return s.String()
}

func (s *RRpcRequest) SetApiProduct(v string) *RRpcRequest {
	s.ApiProduct = &v
	return s
}

func (s *RRpcRequest) SetApiRevision(v string) *RRpcRequest {
	s.ApiRevision = &v
	return s
}

func (s *RRpcRequest) SetIotInstanceId(v string) *RRpcRequest {
	s.IotInstanceId = &v
	return s
}

func (s *RRpcRequest) SetProductKey(v string) *RRpcRequest {
	s.ProductKey = &v
	return s
}

func (s *RRpcRequest) SetDeviceName(v string) *RRpcRequest {
	s.DeviceName = &v
	return s
}

func (s *RRpcRequest) SetTimeout(v int32) *RRpcRequest {
	s.Timeout = &v
	return s
}

func (s *RRpcRequest) SetRequestBase64Byte(v string) *RRpcRequest {
	s.RequestBase64Byte = &v
	return s
}

func (s *RRpcRequest) SetTopic(v string) *RRpcRequest {
	s.Topic = &v
	return s
}

type RRpcResponseBody struct {
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success           *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code              *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage      *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	RrpcCode          *string `json:"RrpcCode,omitempty" xml:"RrpcCode,omitempty"`
	PayloadBase64Byte *string `json:"PayloadBase64Byte,omitempty" xml:"PayloadBase64Byte,omitempty"`
	MessageId         *int64  `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s RRpcResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RRpcResponseBody) GoString() string {
	return s.String()
}

func (s *RRpcResponseBody) SetRequestId(v string) *RRpcResponseBody {
	s.RequestId = &v
	return s
}

func (s *RRpcResponseBody) SetSuccess(v bool) *RRpcResponseBody {
	s.Success = &v
	return s
}

func (s *RRpcResponseBody) SetCode(v string) *RRpcResponseBody {
	s.Code = &v
	return s
}

func (s *RRpcResponseBody) SetErrorMessage(v string) *RRpcResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *RRpcResponseBody) SetRrpcCode(v string) *RRpcResponseBody {
	s.RrpcCode = &v
	return s
}

func (s *RRpcResponseBody) SetPayloadBase64Byte(v string) *RRpcResponseBody {
	s.PayloadBase64Byte = &v
	return s
}

func (s *RRpcResponseBody) SetMessageId(v int64) *RRpcResponseBody {
	s.MessageId = &v
	return s
}

type RRpcResponse struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RRpcResponseBody  `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RRpcResponse) String() string {
	return tea.Prettify(s)
}

func (s RRpcResponse) GoString() string {
	return s.String()
}

func (s *RRpcResponse) SetHeaders(v map[string]*string) *RRpcResponse {
	s.Headers = v
	return s
}

func (s *RRpcResponse) SetBody(v *RRpcResponseBody) *RRpcResponse {
	s.Body = v
	return s
}

type SaveDevicePropRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	Props         *string `json:"Props,omitempty" xml:"Props,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
}

func (s SaveDevicePropRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveDevicePropRequest) GoString() string {
	return s.String()
}

func (s *SaveDevicePropRequest) SetApiProduct(v string) *SaveDevicePropRequest {
	s.ApiProduct = &v
	return s
}

func (s *SaveDevicePropRequest) SetApiRevision(v string) *SaveDevicePropRequest {
	s.ApiRevision = &v
	return s
}

func (s *SaveDevicePropRequest) SetIotInstanceId(v string) *SaveDevicePropRequest {
	s.IotInstanceId = &v
	return s
}

func (s *SaveDevicePropRequest) SetProductKey(v string) *SaveDevicePropRequest {
	s.ProductKey = &v
	return s
}

func (s *SaveDevicePropRequest) SetDeviceName(v string) *SaveDevicePropRequest {
	s.DeviceName = &v
	return s
}

func (s *SaveDevicePropRequest) SetProps(v string) *SaveDevicePropRequest {
	s.Props = &v
	return s
}

func (s *SaveDevicePropRequest) SetIotId(v string) *SaveDevicePropRequest {
	s.IotId = &v
	return s
}

type SaveDevicePropResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s SaveDevicePropResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveDevicePropResponseBody) GoString() string {
	return s.String()
}

func (s *SaveDevicePropResponseBody) SetRequestId(v string) *SaveDevicePropResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveDevicePropResponseBody) SetSuccess(v bool) *SaveDevicePropResponseBody {
	s.Success = &v
	return s
}

func (s *SaveDevicePropResponseBody) SetCode(v string) *SaveDevicePropResponseBody {
	s.Code = &v
	return s
}

func (s *SaveDevicePropResponseBody) SetErrorMessage(v string) *SaveDevicePropResponseBody {
	s.ErrorMessage = &v
	return s
}

type SaveDevicePropResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SaveDevicePropResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveDevicePropResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveDevicePropResponse) GoString() string {
	return s.String()
}

func (s *SaveDevicePropResponse) SetHeaders(v map[string]*string) *SaveDevicePropResponse {
	s.Headers = v
	return s
}

func (s *SaveDevicePropResponse) SetBody(v *SaveDevicePropResponseBody) *SaveDevicePropResponse {
	s.Body = v
	return s
}

type SetDeviceDesiredPropertyRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Items         *string `json:"Items,omitempty" xml:"Items,omitempty"`
	Versions      *string `json:"Versions,omitempty" xml:"Versions,omitempty"`
}

func (s SetDeviceDesiredPropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDeviceDesiredPropertyRequest) GoString() string {
	return s.String()
}

func (s *SetDeviceDesiredPropertyRequest) SetApiProduct(v string) *SetDeviceDesiredPropertyRequest {
	s.ApiProduct = &v
	return s
}

func (s *SetDeviceDesiredPropertyRequest) SetApiRevision(v string) *SetDeviceDesiredPropertyRequest {
	s.ApiRevision = &v
	return s
}

func (s *SetDeviceDesiredPropertyRequest) SetIotInstanceId(v string) *SetDeviceDesiredPropertyRequest {
	s.IotInstanceId = &v
	return s
}

func (s *SetDeviceDesiredPropertyRequest) SetIotId(v string) *SetDeviceDesiredPropertyRequest {
	s.IotId = &v
	return s
}

func (s *SetDeviceDesiredPropertyRequest) SetDeviceName(v string) *SetDeviceDesiredPropertyRequest {
	s.DeviceName = &v
	return s
}

func (s *SetDeviceDesiredPropertyRequest) SetProductKey(v string) *SetDeviceDesiredPropertyRequest {
	s.ProductKey = &v
	return s
}

func (s *SetDeviceDesiredPropertyRequest) SetItems(v string) *SetDeviceDesiredPropertyRequest {
	s.Items = &v
	return s
}

func (s *SetDeviceDesiredPropertyRequest) SetVersions(v string) *SetDeviceDesiredPropertyRequest {
	s.Versions = &v
	return s
}

type SetDeviceDesiredPropertyResponseBody struct {
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string                                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data         *SetDeviceDesiredPropertyResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s SetDeviceDesiredPropertyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDeviceDesiredPropertyResponseBody) GoString() string {
	return s.String()
}

func (s *SetDeviceDesiredPropertyResponseBody) SetRequestId(v string) *SetDeviceDesiredPropertyResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDeviceDesiredPropertyResponseBody) SetSuccess(v bool) *SetDeviceDesiredPropertyResponseBody {
	s.Success = &v
	return s
}

func (s *SetDeviceDesiredPropertyResponseBody) SetErrorMessage(v string) *SetDeviceDesiredPropertyResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *SetDeviceDesiredPropertyResponseBody) SetCode(v string) *SetDeviceDesiredPropertyResponseBody {
	s.Code = &v
	return s
}

func (s *SetDeviceDesiredPropertyResponseBody) SetData(v *SetDeviceDesiredPropertyResponseBodyData) *SetDeviceDesiredPropertyResponseBody {
	s.Data = v
	return s
}

type SetDeviceDesiredPropertyResponseBodyData struct {
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	Versions  *string `json:"Versions,omitempty" xml:"Versions,omitempty"`
}

func (s SetDeviceDesiredPropertyResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SetDeviceDesiredPropertyResponseBodyData) GoString() string {
	return s.String()
}

func (s *SetDeviceDesiredPropertyResponseBodyData) SetMessageId(v string) *SetDeviceDesiredPropertyResponseBodyData {
	s.MessageId = &v
	return s
}

func (s *SetDeviceDesiredPropertyResponseBodyData) SetVersions(v string) *SetDeviceDesiredPropertyResponseBodyData {
	s.Versions = &v
	return s
}

type SetDeviceDesiredPropertyResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetDeviceDesiredPropertyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetDeviceDesiredPropertyResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDeviceDesiredPropertyResponse) GoString() string {
	return s.String()
}

func (s *SetDeviceDesiredPropertyResponse) SetHeaders(v map[string]*string) *SetDeviceDesiredPropertyResponse {
	s.Headers = v
	return s
}

func (s *SetDeviceDesiredPropertyResponse) SetBody(v *SetDeviceDesiredPropertyResponseBody) *SetDeviceDesiredPropertyResponse {
	s.Body = v
	return s
}

type SetDeviceGroupTagsRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	TagString     *string `json:"TagString,omitempty" xml:"TagString,omitempty"`
}

func (s SetDeviceGroupTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDeviceGroupTagsRequest) GoString() string {
	return s.String()
}

func (s *SetDeviceGroupTagsRequest) SetApiProduct(v string) *SetDeviceGroupTagsRequest {
	s.ApiProduct = &v
	return s
}

func (s *SetDeviceGroupTagsRequest) SetApiRevision(v string) *SetDeviceGroupTagsRequest {
	s.ApiRevision = &v
	return s
}

func (s *SetDeviceGroupTagsRequest) SetIotInstanceId(v string) *SetDeviceGroupTagsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *SetDeviceGroupTagsRequest) SetGroupId(v string) *SetDeviceGroupTagsRequest {
	s.GroupId = &v
	return s
}

func (s *SetDeviceGroupTagsRequest) SetTagString(v string) *SetDeviceGroupTagsRequest {
	s.TagString = &v
	return s
}

type SetDeviceGroupTagsResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s SetDeviceGroupTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDeviceGroupTagsResponseBody) GoString() string {
	return s.String()
}

func (s *SetDeviceGroupTagsResponseBody) SetRequestId(v string) *SetDeviceGroupTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDeviceGroupTagsResponseBody) SetSuccess(v bool) *SetDeviceGroupTagsResponseBody {
	s.Success = &v
	return s
}

func (s *SetDeviceGroupTagsResponseBody) SetCode(v string) *SetDeviceGroupTagsResponseBody {
	s.Code = &v
	return s
}

func (s *SetDeviceGroupTagsResponseBody) SetErrorMessage(v string) *SetDeviceGroupTagsResponseBody {
	s.ErrorMessage = &v
	return s
}

type SetDeviceGroupTagsResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetDeviceGroupTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetDeviceGroupTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDeviceGroupTagsResponse) GoString() string {
	return s.String()
}

func (s *SetDeviceGroupTagsResponse) SetHeaders(v map[string]*string) *SetDeviceGroupTagsResponse {
	s.Headers = v
	return s
}

func (s *SetDeviceGroupTagsResponse) SetBody(v *SetDeviceGroupTagsResponseBody) *SetDeviceGroupTagsResponse {
	s.Body = v
	return s
}

type SetDevicePropertyRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName        *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotId             *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	Items             *string `json:"Items,omitempty" xml:"Items,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s SetDevicePropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDevicePropertyRequest) GoString() string {
	return s.String()
}

func (s *SetDevicePropertyRequest) SetApiProduct(v string) *SetDevicePropertyRequest {
	s.ApiProduct = &v
	return s
}

func (s *SetDevicePropertyRequest) SetApiRevision(v string) *SetDevicePropertyRequest {
	s.ApiRevision = &v
	return s
}

func (s *SetDevicePropertyRequest) SetIotInstanceId(v string) *SetDevicePropertyRequest {
	s.IotInstanceId = &v
	return s
}

func (s *SetDevicePropertyRequest) SetProductKey(v string) *SetDevicePropertyRequest {
	s.ProductKey = &v
	return s
}

func (s *SetDevicePropertyRequest) SetDeviceName(v string) *SetDevicePropertyRequest {
	s.DeviceName = &v
	return s
}

func (s *SetDevicePropertyRequest) SetIotId(v string) *SetDevicePropertyRequest {
	s.IotId = &v
	return s
}

func (s *SetDevicePropertyRequest) SetItems(v string) *SetDevicePropertyRequest {
	s.Items = &v
	return s
}

func (s *SetDevicePropertyRequest) SetRealTenantId(v string) *SetDevicePropertyRequest {
	s.RealTenantId = &v
	return s
}

func (s *SetDevicePropertyRequest) SetRealTripartiteKey(v string) *SetDevicePropertyRequest {
	s.RealTripartiteKey = &v
	return s
}

type SetDevicePropertyResponseBody struct {
	RequestId    *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data         *SetDevicePropertyResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s SetDevicePropertyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDevicePropertyResponseBody) GoString() string {
	return s.String()
}

func (s *SetDevicePropertyResponseBody) SetRequestId(v string) *SetDevicePropertyResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDevicePropertyResponseBody) SetSuccess(v bool) *SetDevicePropertyResponseBody {
	s.Success = &v
	return s
}

func (s *SetDevicePropertyResponseBody) SetErrorMessage(v string) *SetDevicePropertyResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *SetDevicePropertyResponseBody) SetCode(v string) *SetDevicePropertyResponseBody {
	s.Code = &v
	return s
}

func (s *SetDevicePropertyResponseBody) SetData(v *SetDevicePropertyResponseBodyData) *SetDevicePropertyResponseBody {
	s.Data = v
	return s
}

type SetDevicePropertyResponseBodyData struct {
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s SetDevicePropertyResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SetDevicePropertyResponseBodyData) GoString() string {
	return s.String()
}

func (s *SetDevicePropertyResponseBodyData) SetMessageId(v string) *SetDevicePropertyResponseBodyData {
	s.MessageId = &v
	return s
}

type SetDevicePropertyResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetDevicePropertyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetDevicePropertyResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDevicePropertyResponse) GoString() string {
	return s.String()
}

func (s *SetDevicePropertyResponse) SetHeaders(v map[string]*string) *SetDevicePropertyResponse {
	s.Headers = v
	return s
}

func (s *SetDevicePropertyResponse) SetBody(v *SetDevicePropertyResponseBody) *SetDevicePropertyResponse {
	s.Body = v
	return s
}

type SetDevicesPropertyRequest struct {
	ApiProduct    *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	DeviceName    []*string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty" type:"Repeated"`
	IotInstanceId *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Items         *string   `json:"Items,omitempty" xml:"Items,omitempty"`
}

func (s SetDevicesPropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDevicesPropertyRequest) GoString() string {
	return s.String()
}

func (s *SetDevicesPropertyRequest) SetApiProduct(v string) *SetDevicesPropertyRequest {
	s.ApiProduct = &v
	return s
}

func (s *SetDevicesPropertyRequest) SetApiRevision(v string) *SetDevicesPropertyRequest {
	s.ApiRevision = &v
	return s
}

func (s *SetDevicesPropertyRequest) SetDeviceName(v []*string) *SetDevicesPropertyRequest {
	s.DeviceName = v
	return s
}

func (s *SetDevicesPropertyRequest) SetIotInstanceId(v string) *SetDevicesPropertyRequest {
	s.IotInstanceId = &v
	return s
}

func (s *SetDevicesPropertyRequest) SetProductKey(v string) *SetDevicesPropertyRequest {
	s.ProductKey = &v
	return s
}

func (s *SetDevicesPropertyRequest) SetItems(v string) *SetDevicesPropertyRequest {
	s.Items = &v
	return s
}

type SetDevicesPropertyResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s SetDevicesPropertyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDevicesPropertyResponseBody) GoString() string {
	return s.String()
}

func (s *SetDevicesPropertyResponseBody) SetRequestId(v string) *SetDevicesPropertyResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDevicesPropertyResponseBody) SetSuccess(v bool) *SetDevicesPropertyResponseBody {
	s.Success = &v
	return s
}

func (s *SetDevicesPropertyResponseBody) SetErrorMessage(v string) *SetDevicesPropertyResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *SetDevicesPropertyResponseBody) SetCode(v string) *SetDevicesPropertyResponseBody {
	s.Code = &v
	return s
}

type SetDevicesPropertyResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetDevicesPropertyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetDevicesPropertyResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDevicesPropertyResponse) GoString() string {
	return s.String()
}

func (s *SetDevicesPropertyResponse) SetHeaders(v map[string]*string) *SetDevicesPropertyResponse {
	s.Headers = v
	return s
}

func (s *SetDevicesPropertyResponse) SetBody(v *SetDevicesPropertyResponseBody) *SetDevicesPropertyResponse {
	s.Body = v
	return s
}

type SetEdgeInstanceDriverConfigsRequest struct {
	ApiProduct    *string                                       `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string                                       `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string                                       `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string                                       `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DriverId      *string                                       `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	Configs       []*SetEdgeInstanceDriverConfigsRequestConfigs `json:"Configs,omitempty" xml:"Configs,omitempty" type:"Repeated"`
}

func (s SetEdgeInstanceDriverConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s SetEdgeInstanceDriverConfigsRequest) GoString() string {
	return s.String()
}

func (s *SetEdgeInstanceDriverConfigsRequest) SetApiProduct(v string) *SetEdgeInstanceDriverConfigsRequest {
	s.ApiProduct = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsRequest) SetApiRevision(v string) *SetEdgeInstanceDriverConfigsRequest {
	s.ApiRevision = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsRequest) SetIotInstanceId(v string) *SetEdgeInstanceDriverConfigsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsRequest) SetInstanceId(v string) *SetEdgeInstanceDriverConfigsRequest {
	s.InstanceId = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsRequest) SetDriverId(v string) *SetEdgeInstanceDriverConfigsRequest {
	s.DriverId = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsRequest) SetConfigs(v []*SetEdgeInstanceDriverConfigsRequestConfigs) *SetEdgeInstanceDriverConfigsRequest {
	s.Configs = v
	return s
}

type SetEdgeInstanceDriverConfigsRequestConfigs struct {
	Format  *string `json:"Format,omitempty" xml:"Format,omitempty"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s SetEdgeInstanceDriverConfigsRequestConfigs) String() string {
	return tea.Prettify(s)
}

func (s SetEdgeInstanceDriverConfigsRequestConfigs) GoString() string {
	return s.String()
}

func (s *SetEdgeInstanceDriverConfigsRequestConfigs) SetFormat(v string) *SetEdgeInstanceDriverConfigsRequestConfigs {
	s.Format = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsRequestConfigs) SetContent(v string) *SetEdgeInstanceDriverConfigsRequestConfigs {
	s.Content = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsRequestConfigs) SetKey(v string) *SetEdgeInstanceDriverConfigsRequestConfigs {
	s.Key = &v
	return s
}

type SetEdgeInstanceDriverConfigsResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s SetEdgeInstanceDriverConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetEdgeInstanceDriverConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *SetEdgeInstanceDriverConfigsResponseBody) SetRequestId(v string) *SetEdgeInstanceDriverConfigsResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsResponseBody) SetSuccess(v bool) *SetEdgeInstanceDriverConfigsResponseBody {
	s.Success = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsResponseBody) SetCode(v string) *SetEdgeInstanceDriverConfigsResponseBody {
	s.Code = &v
	return s
}

func (s *SetEdgeInstanceDriverConfigsResponseBody) SetErrorMessage(v string) *SetEdgeInstanceDriverConfigsResponseBody {
	s.ErrorMessage = &v
	return s
}

type SetEdgeInstanceDriverConfigsResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetEdgeInstanceDriverConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetEdgeInstanceDriverConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s SetEdgeInstanceDriverConfigsResponse) GoString() string {
	return s.String()
}

func (s *SetEdgeInstanceDriverConfigsResponse) SetHeaders(v map[string]*string) *SetEdgeInstanceDriverConfigsResponse {
	s.Headers = v
	return s
}

func (s *SetEdgeInstanceDriverConfigsResponse) SetBody(v *SetEdgeInstanceDriverConfigsResponseBody) *SetEdgeInstanceDriverConfigsResponse {
	s.Body = v
	return s
}

type SetProductCertInfoRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	IssueModel    *int32  `json:"IssueModel,omitempty" xml:"IssueModel,omitempty"`
}

func (s SetProductCertInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s SetProductCertInfoRequest) GoString() string {
	return s.String()
}

func (s *SetProductCertInfoRequest) SetApiProduct(v string) *SetProductCertInfoRequest {
	s.ApiProduct = &v
	return s
}

func (s *SetProductCertInfoRequest) SetApiRevision(v string) *SetProductCertInfoRequest {
	s.ApiRevision = &v
	return s
}

func (s *SetProductCertInfoRequest) SetIotInstanceId(v string) *SetProductCertInfoRequest {
	s.IotInstanceId = &v
	return s
}

func (s *SetProductCertInfoRequest) SetProductKey(v string) *SetProductCertInfoRequest {
	s.ProductKey = &v
	return s
}

func (s *SetProductCertInfoRequest) SetIssueModel(v int32) *SetProductCertInfoRequest {
	s.IssueModel = &v
	return s
}

type SetProductCertInfoResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s SetProductCertInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetProductCertInfoResponseBody) GoString() string {
	return s.String()
}

func (s *SetProductCertInfoResponseBody) SetRequestId(v string) *SetProductCertInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetProductCertInfoResponseBody) SetSuccess(v bool) *SetProductCertInfoResponseBody {
	s.Success = &v
	return s
}

func (s *SetProductCertInfoResponseBody) SetCode(v string) *SetProductCertInfoResponseBody {
	s.Code = &v
	return s
}

func (s *SetProductCertInfoResponseBody) SetErrorMessage(v string) *SetProductCertInfoResponseBody {
	s.ErrorMessage = &v
	return s
}

type SetProductCertInfoResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetProductCertInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetProductCertInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s SetProductCertInfoResponse) GoString() string {
	return s.String()
}

func (s *SetProductCertInfoResponse) SetHeaders(v map[string]*string) *SetProductCertInfoResponse {
	s.Headers = v
	return s
}

func (s *SetProductCertInfoResponse) SetBody(v *SetProductCertInfoResponseBody) *SetProductCertInfoResponse {
	s.Body = v
	return s
}

type SpeechByCombinationRequest struct {
	ApiProduct      *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision     *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	CombinationList []*string `json:"CombinationList,omitempty" xml:"CombinationList,omitempty" type:"Repeated"`
	IotId           *string   `json:"IotId,omitempty" xml:"IotId,omitempty"`
	ProductKey      *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName      *string   `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	IotInstanceId   *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
}

func (s SpeechByCombinationRequest) String() string {
	return tea.Prettify(s)
}

func (s SpeechByCombinationRequest) GoString() string {
	return s.String()
}

func (s *SpeechByCombinationRequest) SetApiProduct(v string) *SpeechByCombinationRequest {
	s.ApiProduct = &v
	return s
}

func (s *SpeechByCombinationRequest) SetApiRevision(v string) *SpeechByCombinationRequest {
	s.ApiRevision = &v
	return s
}

func (s *SpeechByCombinationRequest) SetCombinationList(v []*string) *SpeechByCombinationRequest {
	s.CombinationList = v
	return s
}

func (s *SpeechByCombinationRequest) SetIotId(v string) *SpeechByCombinationRequest {
	s.IotId = &v
	return s
}

func (s *SpeechByCombinationRequest) SetProductKey(v string) *SpeechByCombinationRequest {
	s.ProductKey = &v
	return s
}

func (s *SpeechByCombinationRequest) SetDeviceName(v string) *SpeechByCombinationRequest {
	s.DeviceName = &v
	return s
}

func (s *SpeechByCombinationRequest) SetIotInstanceId(v string) *SpeechByCombinationRequest {
	s.IotInstanceId = &v
	return s
}

type SpeechByCombinationResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s SpeechByCombinationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SpeechByCombinationResponseBody) GoString() string {
	return s.String()
}

func (s *SpeechByCombinationResponseBody) SetRequestId(v string) *SpeechByCombinationResponseBody {
	s.RequestId = &v
	return s
}

func (s *SpeechByCombinationResponseBody) SetSuccess(v bool) *SpeechByCombinationResponseBody {
	s.Success = &v
	return s
}

func (s *SpeechByCombinationResponseBody) SetCode(v string) *SpeechByCombinationResponseBody {
	s.Code = &v
	return s
}

func (s *SpeechByCombinationResponseBody) SetErrorMessage(v string) *SpeechByCombinationResponseBody {
	s.ErrorMessage = &v
	return s
}

type SpeechByCombinationResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SpeechByCombinationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SpeechByCombinationResponse) String() string {
	return tea.Prettify(s)
}

func (s SpeechByCombinationResponse) GoString() string {
	return s.String()
}

func (s *SpeechByCombinationResponse) SetHeaders(v map[string]*string) *SpeechByCombinationResponse {
	s.Headers = v
	return s
}

func (s *SpeechByCombinationResponse) SetBody(v *SpeechByCombinationResponseBody) *SpeechByCombinationResponse {
	s.Body = v
	return s
}

type StartCpuRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	TargetValue   *string `json:"TargetValue,omitempty" xml:"TargetValue,omitempty"`
	IotId         *string `json:"IotId,omitempty" xml:"IotId,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
}

func (s StartCpuRequest) String() string {
	return tea.Prettify(s)
}

func (s StartCpuRequest) GoString() string {
	return s.String()
}

func (s *StartCpuRequest) SetApiProduct(v string) *StartCpuRequest {
	s.ApiProduct = &v
	return s
}

func (s *StartCpuRequest) SetApiRevision(v string) *StartCpuRequest {
	s.ApiRevision = &v
	return s
}

func (s *StartCpuRequest) SetTargetValue(v string) *StartCpuRequest {
	s.TargetValue = &v
	return s
}

func (s *StartCpuRequest) SetIotId(v string) *StartCpuRequest {
	s.IotId = &v
	return s
}

func (s *StartCpuRequest) SetIotInstanceId(v string) *StartCpuRequest {
	s.IotInstanceId = &v
	return s
}

type StartCpuResponseBody struct {
	RequestId    *string                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                     `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string                   `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Data         *StartCpuResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s StartCpuResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartCpuResponseBody) GoString() string {
	return s.String()
}

func (s *StartCpuResponseBody) SetRequestId(v string) *StartCpuResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartCpuResponseBody) SetSuccess(v bool) *StartCpuResponseBody {
	s.Success = &v
	return s
}

func (s *StartCpuResponseBody) SetCode(v string) *StartCpuResponseBody {
	s.Code = &v
	return s
}

func (s *StartCpuResponseBody) SetErrorMessage(v string) *StartCpuResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *StartCpuResponseBody) SetData(v *StartCpuResponseBodyData) *StartCpuResponseBody {
	s.Data = v
	return s
}

type StartCpuResponseBodyData struct {
	GmtCreate     *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified   *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	TimeZone      *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
}

func (s StartCpuResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s StartCpuResponseBodyData) GoString() string {
	return s.String()
}

func (s *StartCpuResponseBodyData) SetGmtCreate(v int64) *StartCpuResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *StartCpuResponseBodyData) SetGmtModified(v int64) *StartCpuResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *StartCpuResponseBodyData) SetTimeZone(v string) *StartCpuResponseBodyData {
	s.TimeZone = &v
	return s
}

func (s *StartCpuResponseBodyData) SetIotInstanceId(v string) *StartCpuResponseBodyData {
	s.IotInstanceId = &v
	return s
}

type StartCpuResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartCpuResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartCpuResponse) String() string {
	return tea.Prettify(s)
}

func (s StartCpuResponse) GoString() string {
	return s.String()
}

func (s *StartCpuResponse) SetHeaders(v map[string]*string) *StartCpuResponse {
	s.Headers = v
	return s
}

func (s *StartCpuResponse) SetBody(v *StartCpuResponseBody) *StartCpuResponse {
	s.Body = v
	return s
}

type StartRuleRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s StartRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s StartRuleRequest) GoString() string {
	return s.String()
}

func (s *StartRuleRequest) SetApiProduct(v string) *StartRuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *StartRuleRequest) SetApiRevision(v string) *StartRuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *StartRuleRequest) SetIotInstanceId(v string) *StartRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *StartRuleRequest) SetRuleId(v int64) *StartRuleRequest {
	s.RuleId = &v
	return s
}

type StartRuleResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s StartRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartRuleResponseBody) GoString() string {
	return s.String()
}

func (s *StartRuleResponseBody) SetRequestId(v string) *StartRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartRuleResponseBody) SetSuccess(v bool) *StartRuleResponseBody {
	s.Success = &v
	return s
}

func (s *StartRuleResponseBody) SetCode(v string) *StartRuleResponseBody {
	s.Code = &v
	return s
}

func (s *StartRuleResponseBody) SetErrorMessage(v string) *StartRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

type StartRuleResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s StartRuleResponse) GoString() string {
	return s.String()
}

func (s *StartRuleResponse) SetHeaders(v map[string]*string) *StartRuleResponse {
	s.Headers = v
	return s
}

func (s *StartRuleResponse) SetBody(v *StartRuleResponseBody) *StartRuleResponse {
	s.Body = v
	return s
}

type StopRuleRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s StopRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s StopRuleRequest) GoString() string {
	return s.String()
}

func (s *StopRuleRequest) SetApiProduct(v string) *StopRuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *StopRuleRequest) SetApiRevision(v string) *StopRuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *StopRuleRequest) SetIotInstanceId(v string) *StopRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *StopRuleRequest) SetRuleId(v int64) *StopRuleRequest {
	s.RuleId = &v
	return s
}

type StopRuleResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s StopRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopRuleResponseBody) GoString() string {
	return s.String()
}

func (s *StopRuleResponseBody) SetRequestId(v string) *StopRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopRuleResponseBody) SetSuccess(v bool) *StopRuleResponseBody {
	s.Success = &v
	return s
}

func (s *StopRuleResponseBody) SetCode(v string) *StopRuleResponseBody {
	s.Code = &v
	return s
}

func (s *StopRuleResponseBody) SetErrorMessage(v string) *StopRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

type StopRuleResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s StopRuleResponse) GoString() string {
	return s.String()
}

func (s *StopRuleResponse) SetHeaders(v map[string]*string) *StopRuleResponse {
	s.Headers = v
	return s
}

func (s *StopRuleResponse) SetBody(v *StopRuleResponseBody) *StopRuleResponse {
	s.Body = v
	return s
}

type TriggerSceneRuleRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s TriggerSceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s TriggerSceneRuleRequest) GoString() string {
	return s.String()
}

func (s *TriggerSceneRuleRequest) SetApiProduct(v string) *TriggerSceneRuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *TriggerSceneRuleRequest) SetApiRevision(v string) *TriggerSceneRuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *TriggerSceneRuleRequest) SetIotInstanceId(v string) *TriggerSceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *TriggerSceneRuleRequest) SetRuleId(v string) *TriggerSceneRuleRequest {
	s.RuleId = &v
	return s
}

func (s *TriggerSceneRuleRequest) SetInstanceId(v string) *TriggerSceneRuleRequest {
	s.InstanceId = &v
	return s
}

type TriggerSceneRuleResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s TriggerSceneRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TriggerSceneRuleResponseBody) GoString() string {
	return s.String()
}

func (s *TriggerSceneRuleResponseBody) SetRequestId(v string) *TriggerSceneRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *TriggerSceneRuleResponseBody) SetSuccess(v bool) *TriggerSceneRuleResponseBody {
	s.Success = &v
	return s
}

func (s *TriggerSceneRuleResponseBody) SetErrorMessage(v string) *TriggerSceneRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *TriggerSceneRuleResponseBody) SetCode(v string) *TriggerSceneRuleResponseBody {
	s.Code = &v
	return s
}

type TriggerSceneRuleResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TriggerSceneRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TriggerSceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s TriggerSceneRuleResponse) GoString() string {
	return s.String()
}

func (s *TriggerSceneRuleResponse) SetHeaders(v map[string]*string) *TriggerSceneRuleResponse {
	s.Headers = v
	return s
}

func (s *TriggerSceneRuleResponse) SetBody(v *TriggerSceneRuleResponseBody) *TriggerSceneRuleResponse {
	s.Body = v
	return s
}

type UnbindApplicationFromEdgeInstanceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ApplicationId *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
}

func (s UnbindApplicationFromEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindApplicationFromEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *UnbindApplicationFromEdgeInstanceRequest) SetApiProduct(v string) *UnbindApplicationFromEdgeInstanceRequest {
	s.ApiProduct = &v
	return s
}

func (s *UnbindApplicationFromEdgeInstanceRequest) SetApiRevision(v string) *UnbindApplicationFromEdgeInstanceRequest {
	s.ApiRevision = &v
	return s
}

func (s *UnbindApplicationFromEdgeInstanceRequest) SetIotInstanceId(v string) *UnbindApplicationFromEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UnbindApplicationFromEdgeInstanceRequest) SetInstanceId(v string) *UnbindApplicationFromEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *UnbindApplicationFromEdgeInstanceRequest) SetApplicationId(v string) *UnbindApplicationFromEdgeInstanceRequest {
	s.ApplicationId = &v
	return s
}

type UnbindApplicationFromEdgeInstanceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UnbindApplicationFromEdgeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindApplicationFromEdgeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindApplicationFromEdgeInstanceResponseBody) SetRequestId(v string) *UnbindApplicationFromEdgeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnbindApplicationFromEdgeInstanceResponseBody) SetSuccess(v bool) *UnbindApplicationFromEdgeInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *UnbindApplicationFromEdgeInstanceResponseBody) SetCode(v string) *UnbindApplicationFromEdgeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *UnbindApplicationFromEdgeInstanceResponseBody) SetErrorMessage(v string) *UnbindApplicationFromEdgeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

type UnbindApplicationFromEdgeInstanceResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnbindApplicationFromEdgeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindApplicationFromEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindApplicationFromEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *UnbindApplicationFromEdgeInstanceResponse) SetHeaders(v map[string]*string) *UnbindApplicationFromEdgeInstanceResponse {
	s.Headers = v
	return s
}

func (s *UnbindApplicationFromEdgeInstanceResponse) SetBody(v *UnbindApplicationFromEdgeInstanceResponseBody) *UnbindApplicationFromEdgeInstanceResponse {
	s.Body = v
	return s
}

type UnbindDriverFromEdgeInstanceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DriverId      *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
}

func (s UnbindDriverFromEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindDriverFromEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *UnbindDriverFromEdgeInstanceRequest) SetApiProduct(v string) *UnbindDriverFromEdgeInstanceRequest {
	s.ApiProduct = &v
	return s
}

func (s *UnbindDriverFromEdgeInstanceRequest) SetApiRevision(v string) *UnbindDriverFromEdgeInstanceRequest {
	s.ApiRevision = &v
	return s
}

func (s *UnbindDriverFromEdgeInstanceRequest) SetIotInstanceId(v string) *UnbindDriverFromEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UnbindDriverFromEdgeInstanceRequest) SetInstanceId(v string) *UnbindDriverFromEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *UnbindDriverFromEdgeInstanceRequest) SetDriverId(v string) *UnbindDriverFromEdgeInstanceRequest {
	s.DriverId = &v
	return s
}

type UnbindDriverFromEdgeInstanceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UnbindDriverFromEdgeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindDriverFromEdgeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindDriverFromEdgeInstanceResponseBody) SetRequestId(v string) *UnbindDriverFromEdgeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnbindDriverFromEdgeInstanceResponseBody) SetSuccess(v bool) *UnbindDriverFromEdgeInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *UnbindDriverFromEdgeInstanceResponseBody) SetCode(v string) *UnbindDriverFromEdgeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *UnbindDriverFromEdgeInstanceResponseBody) SetErrorMessage(v string) *UnbindDriverFromEdgeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

type UnbindDriverFromEdgeInstanceResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnbindDriverFromEdgeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindDriverFromEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindDriverFromEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *UnbindDriverFromEdgeInstanceResponse) SetHeaders(v map[string]*string) *UnbindDriverFromEdgeInstanceResponse {
	s.Headers = v
	return s
}

func (s *UnbindDriverFromEdgeInstanceResponse) SetBody(v *UnbindDriverFromEdgeInstanceResponseBody) *UnbindDriverFromEdgeInstanceResponse {
	s.Body = v
	return s
}

type UnbindRoleFromEdgeInstanceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s UnbindRoleFromEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindRoleFromEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *UnbindRoleFromEdgeInstanceRequest) SetApiProduct(v string) *UnbindRoleFromEdgeInstanceRequest {
	s.ApiProduct = &v
	return s
}

func (s *UnbindRoleFromEdgeInstanceRequest) SetApiRevision(v string) *UnbindRoleFromEdgeInstanceRequest {
	s.ApiRevision = &v
	return s
}

func (s *UnbindRoleFromEdgeInstanceRequest) SetIotInstanceId(v string) *UnbindRoleFromEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UnbindRoleFromEdgeInstanceRequest) SetInstanceId(v string) *UnbindRoleFromEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

type UnbindRoleFromEdgeInstanceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UnbindRoleFromEdgeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindRoleFromEdgeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindRoleFromEdgeInstanceResponseBody) SetRequestId(v string) *UnbindRoleFromEdgeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnbindRoleFromEdgeInstanceResponseBody) SetSuccess(v bool) *UnbindRoleFromEdgeInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *UnbindRoleFromEdgeInstanceResponseBody) SetCode(v string) *UnbindRoleFromEdgeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *UnbindRoleFromEdgeInstanceResponseBody) SetErrorMessage(v string) *UnbindRoleFromEdgeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

type UnbindRoleFromEdgeInstanceResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnbindRoleFromEdgeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindRoleFromEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindRoleFromEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *UnbindRoleFromEdgeInstanceResponse) SetHeaders(v map[string]*string) *UnbindRoleFromEdgeInstanceResponse {
	s.Headers = v
	return s
}

func (s *UnbindRoleFromEdgeInstanceResponse) SetBody(v *UnbindRoleFromEdgeInstanceResponseBody) *UnbindRoleFromEdgeInstanceResponse {
	s.Body = v
	return s
}

type UnbindSceneRuleFromEdgeInstanceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s UnbindSceneRuleFromEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindSceneRuleFromEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *UnbindSceneRuleFromEdgeInstanceRequest) SetApiProduct(v string) *UnbindSceneRuleFromEdgeInstanceRequest {
	s.ApiProduct = &v
	return s
}

func (s *UnbindSceneRuleFromEdgeInstanceRequest) SetApiRevision(v string) *UnbindSceneRuleFromEdgeInstanceRequest {
	s.ApiRevision = &v
	return s
}

func (s *UnbindSceneRuleFromEdgeInstanceRequest) SetIotInstanceId(v string) *UnbindSceneRuleFromEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UnbindSceneRuleFromEdgeInstanceRequest) SetInstanceId(v string) *UnbindSceneRuleFromEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *UnbindSceneRuleFromEdgeInstanceRequest) SetRuleId(v string) *UnbindSceneRuleFromEdgeInstanceRequest {
	s.RuleId = &v
	return s
}

type UnbindSceneRuleFromEdgeInstanceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UnbindSceneRuleFromEdgeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindSceneRuleFromEdgeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindSceneRuleFromEdgeInstanceResponseBody) SetRequestId(v string) *UnbindSceneRuleFromEdgeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnbindSceneRuleFromEdgeInstanceResponseBody) SetSuccess(v bool) *UnbindSceneRuleFromEdgeInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *UnbindSceneRuleFromEdgeInstanceResponseBody) SetCode(v string) *UnbindSceneRuleFromEdgeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *UnbindSceneRuleFromEdgeInstanceResponseBody) SetErrorMessage(v string) *UnbindSceneRuleFromEdgeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

type UnbindSceneRuleFromEdgeInstanceResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnbindSceneRuleFromEdgeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindSceneRuleFromEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindSceneRuleFromEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *UnbindSceneRuleFromEdgeInstanceResponse) SetHeaders(v map[string]*string) *UnbindSceneRuleFromEdgeInstanceResponse {
	s.Headers = v
	return s
}

func (s *UnbindSceneRuleFromEdgeInstanceResponse) SetBody(v *UnbindSceneRuleFromEdgeInstanceResponseBody) *UnbindSceneRuleFromEdgeInstanceResponse {
	s.Body = v
	return s
}

type UpdateConsumerGroupRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	NewGroupName  *string `json:"NewGroupName,omitempty" xml:"NewGroupName,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s UpdateConsumerGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateConsumerGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateConsumerGroupRequest) SetApiProduct(v string) *UpdateConsumerGroupRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateConsumerGroupRequest) SetApiRevision(v string) *UpdateConsumerGroupRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateConsumerGroupRequest) SetIotInstanceId(v string) *UpdateConsumerGroupRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateConsumerGroupRequest) SetNewGroupName(v string) *UpdateConsumerGroupRequest {
	s.NewGroupName = &v
	return s
}

func (s *UpdateConsumerGroupRequest) SetGroupId(v string) *UpdateConsumerGroupRequest {
	s.GroupId = &v
	return s
}

type UpdateConsumerGroupResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s UpdateConsumerGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateConsumerGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateConsumerGroupResponseBody) SetRequestId(v string) *UpdateConsumerGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateConsumerGroupResponseBody) SetSuccess(v bool) *UpdateConsumerGroupResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateConsumerGroupResponseBody) SetErrorMessage(v string) *UpdateConsumerGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateConsumerGroupResponseBody) SetCode(v string) *UpdateConsumerGroupResponseBody {
	s.Code = &v
	return s
}

type UpdateConsumerGroupResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateConsumerGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateConsumerGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateConsumerGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateConsumerGroupResponse) SetHeaders(v map[string]*string) *UpdateConsumerGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateConsumerGroupResponse) SetBody(v *UpdateConsumerGroupResponseBody) *UpdateConsumerGroupResponse {
	s.Body = v
	return s
}

type UpdateDeviceGroupRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupDesc     *string `json:"GroupDesc,omitempty" xml:"GroupDesc,omitempty"`
}

func (s UpdateDeviceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeviceGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateDeviceGroupRequest) SetApiProduct(v string) *UpdateDeviceGroupRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateDeviceGroupRequest) SetApiRevision(v string) *UpdateDeviceGroupRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateDeviceGroupRequest) SetIotInstanceId(v string) *UpdateDeviceGroupRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateDeviceGroupRequest) SetGroupId(v string) *UpdateDeviceGroupRequest {
	s.GroupId = &v
	return s
}

func (s *UpdateDeviceGroupRequest) SetGroupDesc(v string) *UpdateDeviceGroupRequest {
	s.GroupDesc = &v
	return s
}

type UpdateDeviceGroupResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateDeviceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeviceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDeviceGroupResponseBody) SetRequestId(v string) *UpdateDeviceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDeviceGroupResponseBody) SetSuccess(v bool) *UpdateDeviceGroupResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateDeviceGroupResponseBody) SetCode(v string) *UpdateDeviceGroupResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateDeviceGroupResponseBody) SetErrorMessage(v string) *UpdateDeviceGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateDeviceGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateDeviceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateDeviceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeviceGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateDeviceGroupResponse) SetHeaders(v map[string]*string) *UpdateDeviceGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateDeviceGroupResponse) SetBody(v *UpdateDeviceGroupResponseBody) *UpdateDeviceGroupResponse {
	s.Body = v
	return s
}

type UpdateDeviceShadowRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	DeviceName    *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	ShadowMessage *string `json:"ShadowMessage,omitempty" xml:"ShadowMessage,omitempty"`
	DeltaUpdate   *bool   `json:"DeltaUpdate,omitempty" xml:"DeltaUpdate,omitempty"`
}

func (s UpdateDeviceShadowRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeviceShadowRequest) GoString() string {
	return s.String()
}

func (s *UpdateDeviceShadowRequest) SetApiProduct(v string) *UpdateDeviceShadowRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateDeviceShadowRequest) SetApiRevision(v string) *UpdateDeviceShadowRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateDeviceShadowRequest) SetIotInstanceId(v string) *UpdateDeviceShadowRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateDeviceShadowRequest) SetProductKey(v string) *UpdateDeviceShadowRequest {
	s.ProductKey = &v
	return s
}

func (s *UpdateDeviceShadowRequest) SetDeviceName(v string) *UpdateDeviceShadowRequest {
	s.DeviceName = &v
	return s
}

func (s *UpdateDeviceShadowRequest) SetShadowMessage(v string) *UpdateDeviceShadowRequest {
	s.ShadowMessage = &v
	return s
}

func (s *UpdateDeviceShadowRequest) SetDeltaUpdate(v bool) *UpdateDeviceShadowRequest {
	s.DeltaUpdate = &v
	return s
}

type UpdateDeviceShadowResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateDeviceShadowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeviceShadowResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDeviceShadowResponseBody) SetRequestId(v string) *UpdateDeviceShadowResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDeviceShadowResponseBody) SetSuccess(v bool) *UpdateDeviceShadowResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateDeviceShadowResponseBody) SetCode(v string) *UpdateDeviceShadowResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateDeviceShadowResponseBody) SetErrorMessage(v string) *UpdateDeviceShadowResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateDeviceShadowResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateDeviceShadowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateDeviceShadowResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDeviceShadowResponse) GoString() string {
	return s.String()
}

func (s *UpdateDeviceShadowResponse) SetHeaders(v map[string]*string) *UpdateDeviceShadowResponse {
	s.Headers = v
	return s
}

func (s *UpdateDeviceShadowResponse) SetBody(v *UpdateDeviceShadowResponseBody) *UpdateDeviceShadowResponse {
	s.Body = v
	return s
}

type UpdateEdgeDriverVersionRequest struct {
	ApiProduct      *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision     *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	DriverId        *string `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	DriverVersion   *string `json:"DriverVersion,omitempty" xml:"DriverVersion,omitempty"`
	EdgeVersion     *string `json:"EdgeVersion,omitempty" xml:"EdgeVersion,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SourceConfig    *string `json:"SourceConfig,omitempty" xml:"SourceConfig,omitempty"`
	DriverConfig    *string `json:"DriverConfig,omitempty" xml:"DriverConfig,omitempty"`
	ContainerConfig *string `json:"ContainerConfig,omitempty" xml:"ContainerConfig,omitempty"`
	ConfigCheckRule *string `json:"ConfigCheckRule,omitempty" xml:"ConfigCheckRule,omitempty"`
	Argument        *string `json:"Argument,omitempty" xml:"Argument,omitempty"`
}

func (s UpdateEdgeDriverVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeDriverVersionRequest) GoString() string {
	return s.String()
}

func (s *UpdateEdgeDriverVersionRequest) SetApiProduct(v string) *UpdateEdgeDriverVersionRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetApiRevision(v string) *UpdateEdgeDriverVersionRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetIotInstanceId(v string) *UpdateEdgeDriverVersionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetDriverId(v string) *UpdateEdgeDriverVersionRequest {
	s.DriverId = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetDriverVersion(v string) *UpdateEdgeDriverVersionRequest {
	s.DriverVersion = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetEdgeVersion(v string) *UpdateEdgeDriverVersionRequest {
	s.EdgeVersion = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetDescription(v string) *UpdateEdgeDriverVersionRequest {
	s.Description = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetSourceConfig(v string) *UpdateEdgeDriverVersionRequest {
	s.SourceConfig = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetDriverConfig(v string) *UpdateEdgeDriverVersionRequest {
	s.DriverConfig = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetContainerConfig(v string) *UpdateEdgeDriverVersionRequest {
	s.ContainerConfig = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetConfigCheckRule(v string) *UpdateEdgeDriverVersionRequest {
	s.ConfigCheckRule = &v
	return s
}

func (s *UpdateEdgeDriverVersionRequest) SetArgument(v string) *UpdateEdgeDriverVersionRequest {
	s.Argument = &v
	return s
}

type UpdateEdgeDriverVersionResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateEdgeDriverVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeDriverVersionResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEdgeDriverVersionResponseBody) SetRequestId(v string) *UpdateEdgeDriverVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateEdgeDriverVersionResponseBody) SetSuccess(v bool) *UpdateEdgeDriverVersionResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateEdgeDriverVersionResponseBody) SetCode(v string) *UpdateEdgeDriverVersionResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateEdgeDriverVersionResponseBody) SetErrorMessage(v string) *UpdateEdgeDriverVersionResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateEdgeDriverVersionResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateEdgeDriverVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateEdgeDriverVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeDriverVersionResponse) GoString() string {
	return s.String()
}

func (s *UpdateEdgeDriverVersionResponse) SetHeaders(v map[string]*string) *UpdateEdgeDriverVersionResponse {
	s.Headers = v
	return s
}

func (s *UpdateEdgeDriverVersionResponse) SetBody(v *UpdateEdgeDriverVersionResponseBody) *UpdateEdgeDriverVersionResponse {
	s.Body = v
	return s
}

type UpdateEdgeInstanceRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Tags          *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	Spec          *int32  `json:"Spec,omitempty" xml:"Spec,omitempty"`
	BizEnable     *bool   `json:"BizEnable,omitempty" xml:"BizEnable,omitempty"`
}

func (s UpdateEdgeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeInstanceRequest) GoString() string {
	return s.String()
}

func (s *UpdateEdgeInstanceRequest) SetApiProduct(v string) *UpdateEdgeInstanceRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateEdgeInstanceRequest) SetApiRevision(v string) *UpdateEdgeInstanceRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateEdgeInstanceRequest) SetIotInstanceId(v string) *UpdateEdgeInstanceRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateEdgeInstanceRequest) SetInstanceId(v string) *UpdateEdgeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateEdgeInstanceRequest) SetName(v string) *UpdateEdgeInstanceRequest {
	s.Name = &v
	return s
}

func (s *UpdateEdgeInstanceRequest) SetTags(v string) *UpdateEdgeInstanceRequest {
	s.Tags = &v
	return s
}

func (s *UpdateEdgeInstanceRequest) SetSpec(v int32) *UpdateEdgeInstanceRequest {
	s.Spec = &v
	return s
}

func (s *UpdateEdgeInstanceRequest) SetBizEnable(v bool) *UpdateEdgeInstanceRequest {
	s.BizEnable = &v
	return s
}

type UpdateEdgeInstanceResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateEdgeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEdgeInstanceResponseBody) SetRequestId(v string) *UpdateEdgeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateEdgeInstanceResponseBody) SetSuccess(v bool) *UpdateEdgeInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateEdgeInstanceResponseBody) SetCode(v string) *UpdateEdgeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateEdgeInstanceResponseBody) SetErrorMessage(v string) *UpdateEdgeInstanceResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateEdgeInstanceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateEdgeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateEdgeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeInstanceResponse) GoString() string {
	return s.String()
}

func (s *UpdateEdgeInstanceResponse) SetHeaders(v map[string]*string) *UpdateEdgeInstanceResponse {
	s.Headers = v
	return s
}

func (s *UpdateEdgeInstanceResponse) SetBody(v *UpdateEdgeInstanceResponseBody) *UpdateEdgeInstanceResponse {
	s.Body = v
	return s
}

type UpdateEdgeInstanceChannelRequest struct {
	ApiProduct    *string                                    `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string                                    `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string                                    `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	InstanceId    *string                                    `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DriverId      *string                                    `json:"DriverId,omitempty" xml:"DriverId,omitempty"`
	ChannelId     *string                                    `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	ChannelName   *string                                    `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	Configs       []*UpdateEdgeInstanceChannelRequestConfigs `json:"Configs,omitempty" xml:"Configs,omitempty" type:"Repeated"`
}

func (s UpdateEdgeInstanceChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeInstanceChannelRequest) GoString() string {
	return s.String()
}

func (s *UpdateEdgeInstanceChannelRequest) SetApiProduct(v string) *UpdateEdgeInstanceChannelRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateEdgeInstanceChannelRequest) SetApiRevision(v string) *UpdateEdgeInstanceChannelRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateEdgeInstanceChannelRequest) SetIotInstanceId(v string) *UpdateEdgeInstanceChannelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateEdgeInstanceChannelRequest) SetInstanceId(v string) *UpdateEdgeInstanceChannelRequest {
	s.InstanceId = &v
	return s
}

func (s *UpdateEdgeInstanceChannelRequest) SetDriverId(v string) *UpdateEdgeInstanceChannelRequest {
	s.DriverId = &v
	return s
}

func (s *UpdateEdgeInstanceChannelRequest) SetChannelId(v string) *UpdateEdgeInstanceChannelRequest {
	s.ChannelId = &v
	return s
}

func (s *UpdateEdgeInstanceChannelRequest) SetChannelName(v string) *UpdateEdgeInstanceChannelRequest {
	s.ChannelName = &v
	return s
}

func (s *UpdateEdgeInstanceChannelRequest) SetConfigs(v []*UpdateEdgeInstanceChannelRequestConfigs) *UpdateEdgeInstanceChannelRequest {
	s.Configs = v
	return s
}

type UpdateEdgeInstanceChannelRequestConfigs struct {
	Format  *string `json:"Format,omitempty" xml:"Format,omitempty"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s UpdateEdgeInstanceChannelRequestConfigs) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeInstanceChannelRequestConfigs) GoString() string {
	return s.String()
}

func (s *UpdateEdgeInstanceChannelRequestConfigs) SetFormat(v string) *UpdateEdgeInstanceChannelRequestConfigs {
	s.Format = &v
	return s
}

func (s *UpdateEdgeInstanceChannelRequestConfigs) SetContent(v string) *UpdateEdgeInstanceChannelRequestConfigs {
	s.Content = &v
	return s
}

func (s *UpdateEdgeInstanceChannelRequestConfigs) SetKey(v string) *UpdateEdgeInstanceChannelRequestConfigs {
	s.Key = &v
	return s
}

type UpdateEdgeInstanceChannelResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateEdgeInstanceChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeInstanceChannelResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEdgeInstanceChannelResponseBody) SetRequestId(v string) *UpdateEdgeInstanceChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateEdgeInstanceChannelResponseBody) SetSuccess(v bool) *UpdateEdgeInstanceChannelResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateEdgeInstanceChannelResponseBody) SetCode(v string) *UpdateEdgeInstanceChannelResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateEdgeInstanceChannelResponseBody) SetErrorMessage(v string) *UpdateEdgeInstanceChannelResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateEdgeInstanceChannelResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateEdgeInstanceChannelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateEdgeInstanceChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEdgeInstanceChannelResponse) GoString() string {
	return s.String()
}

func (s *UpdateEdgeInstanceChannelResponse) SetHeaders(v map[string]*string) *UpdateEdgeInstanceChannelResponse {
	s.Headers = v
	return s
}

func (s *UpdateEdgeInstanceChannelResponse) SetBody(v *UpdateEdgeInstanceChannelResponseBody) *UpdateEdgeInstanceChannelResponse {
	s.Body = v
	return s
}

type UpdateJobRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	TimeoutConfig *string `json:"TimeoutConfig,omitempty" xml:"TimeoutConfig,omitempty"`
	RolloutConfig *string `json:"RolloutConfig,omitempty" xml:"RolloutConfig,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s UpdateJobRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateJobRequest) GoString() string {
	return s.String()
}

func (s *UpdateJobRequest) SetApiProduct(v string) *UpdateJobRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateJobRequest) SetApiRevision(v string) *UpdateJobRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateJobRequest) SetIotInstanceId(v string) *UpdateJobRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateJobRequest) SetDescription(v string) *UpdateJobRequest {
	s.Description = &v
	return s
}

func (s *UpdateJobRequest) SetTimeoutConfig(v string) *UpdateJobRequest {
	s.TimeoutConfig = &v
	return s
}

func (s *UpdateJobRequest) SetRolloutConfig(v string) *UpdateJobRequest {
	s.RolloutConfig = &v
	return s
}

func (s *UpdateJobRequest) SetJobId(v string) *UpdateJobRequest {
	s.JobId = &v
	return s
}

type UpdateJobResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateJobResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateJobResponseBody) SetRequestId(v string) *UpdateJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateJobResponseBody) SetSuccess(v bool) *UpdateJobResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateJobResponseBody) SetCode(v string) *UpdateJobResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateJobResponseBody) SetErrorMessage(v string) *UpdateJobResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateJobResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateJobResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateJobResponse) GoString() string {
	return s.String()
}

func (s *UpdateJobResponse) SetHeaders(v map[string]*string) *UpdateJobResponse {
	s.Headers = v
	return s
}

func (s *UpdateJobResponse) SetBody(v *UpdateJobResponseBody) *UpdateJobResponse {
	s.Body = v
	return s
}

type UpdateOTAModuleRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	AliasName     *string `json:"AliasName,omitempty" xml:"AliasName,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ModuleName    *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
	Desc          *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
}

func (s UpdateOTAModuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateOTAModuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateOTAModuleRequest) SetApiProduct(v string) *UpdateOTAModuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateOTAModuleRequest) SetApiRevision(v string) *UpdateOTAModuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateOTAModuleRequest) SetAliasName(v string) *UpdateOTAModuleRequest {
	s.AliasName = &v
	return s
}

func (s *UpdateOTAModuleRequest) SetIotInstanceId(v string) *UpdateOTAModuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateOTAModuleRequest) SetModuleName(v string) *UpdateOTAModuleRequest {
	s.ModuleName = &v
	return s
}

func (s *UpdateOTAModuleRequest) SetDesc(v string) *UpdateOTAModuleRequest {
	s.Desc = &v
	return s
}

func (s *UpdateOTAModuleRequest) SetProductKey(v string) *UpdateOTAModuleRequest {
	s.ProductKey = &v
	return s
}

type UpdateOTAModuleResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateOTAModuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateOTAModuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateOTAModuleResponseBody) SetRequestId(v string) *UpdateOTAModuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateOTAModuleResponseBody) SetSuccess(v bool) *UpdateOTAModuleResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateOTAModuleResponseBody) SetCode(v string) *UpdateOTAModuleResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateOTAModuleResponseBody) SetErrorMessage(v string) *UpdateOTAModuleResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateOTAModuleResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateOTAModuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateOTAModuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateOTAModuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateOTAModuleResponse) SetHeaders(v map[string]*string) *UpdateOTAModuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateOTAModuleResponse) SetBody(v *UpdateOTAModuleResponseBody) *UpdateOTAModuleResponse {
	s.Body = v
	return s
}

type UpdateProductRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ProductName       *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s UpdateProductRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductRequest) GoString() string {
	return s.String()
}

func (s *UpdateProductRequest) SetApiProduct(v string) *UpdateProductRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateProductRequest) SetApiRevision(v string) *UpdateProductRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateProductRequest) SetIotInstanceId(v string) *UpdateProductRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateProductRequest) SetDescription(v string) *UpdateProductRequest {
	s.Description = &v
	return s
}

func (s *UpdateProductRequest) SetProductKey(v string) *UpdateProductRequest {
	s.ProductKey = &v
	return s
}

func (s *UpdateProductRequest) SetProductName(v string) *UpdateProductRequest {
	s.ProductName = &v
	return s
}

func (s *UpdateProductRequest) SetRealTenantId(v string) *UpdateProductRequest {
	s.RealTenantId = &v
	return s
}

func (s *UpdateProductRequest) SetRealTripartiteKey(v string) *UpdateProductRequest {
	s.RealTripartiteKey = &v
	return s
}

type UpdateProductResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateProductResponseBody) SetRequestId(v string) *UpdateProductResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateProductResponseBody) SetSuccess(v bool) *UpdateProductResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateProductResponseBody) SetCode(v string) *UpdateProductResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateProductResponseBody) SetErrorMessage(v string) *UpdateProductResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateProductResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateProductResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateProductResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductResponse) GoString() string {
	return s.String()
}

func (s *UpdateProductResponse) SetHeaders(v map[string]*string) *UpdateProductResponse {
	s.Headers = v
	return s
}

func (s *UpdateProductResponse) SetBody(v *UpdateProductResponseBody) *UpdateProductResponse {
	s.Body = v
	return s
}

type UpdateProductFilterConfigRequest struct {
	ApiProduct              *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision             *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId           *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey              *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	PropertyTimestampFilter *bool   `json:"PropertyTimestampFilter,omitempty" xml:"PropertyTimestampFilter,omitempty"`
	PropertyValueFilter     *bool   `json:"PropertyValueFilter,omitempty" xml:"PropertyValueFilter,omitempty"`
}

func (s UpdateProductFilterConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductFilterConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateProductFilterConfigRequest) SetApiProduct(v string) *UpdateProductFilterConfigRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateProductFilterConfigRequest) SetApiRevision(v string) *UpdateProductFilterConfigRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateProductFilterConfigRequest) SetIotInstanceId(v string) *UpdateProductFilterConfigRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateProductFilterConfigRequest) SetProductKey(v string) *UpdateProductFilterConfigRequest {
	s.ProductKey = &v
	return s
}

func (s *UpdateProductFilterConfigRequest) SetPropertyTimestampFilter(v bool) *UpdateProductFilterConfigRequest {
	s.PropertyTimestampFilter = &v
	return s
}

func (s *UpdateProductFilterConfigRequest) SetPropertyValueFilter(v bool) *UpdateProductFilterConfigRequest {
	s.PropertyValueFilter = &v
	return s
}

type UpdateProductFilterConfigResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateProductFilterConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductFilterConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateProductFilterConfigResponseBody) SetRequestId(v string) *UpdateProductFilterConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateProductFilterConfigResponseBody) SetSuccess(v bool) *UpdateProductFilterConfigResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateProductFilterConfigResponseBody) SetCode(v string) *UpdateProductFilterConfigResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateProductFilterConfigResponseBody) SetErrorMessage(v string) *UpdateProductFilterConfigResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateProductFilterConfigResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateProductFilterConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateProductFilterConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductFilterConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateProductFilterConfigResponse) SetHeaders(v map[string]*string) *UpdateProductFilterConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateProductFilterConfigResponse) SetBody(v *UpdateProductFilterConfigResponseBody) *UpdateProductFilterConfigResponse {
	s.Body = v
	return s
}

type UpdateProductTagsRequest struct {
	ApiProduct    *string                               `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string                               `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string                               `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string                               `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ProductTag    []*UpdateProductTagsRequestProductTag `json:"ProductTag,omitempty" xml:"ProductTag,omitempty" type:"Repeated"`
}

func (s UpdateProductTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductTagsRequest) GoString() string {
	return s.String()
}

func (s *UpdateProductTagsRequest) SetApiProduct(v string) *UpdateProductTagsRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateProductTagsRequest) SetApiRevision(v string) *UpdateProductTagsRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateProductTagsRequest) SetIotInstanceId(v string) *UpdateProductTagsRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateProductTagsRequest) SetProductKey(v string) *UpdateProductTagsRequest {
	s.ProductKey = &v
	return s
}

func (s *UpdateProductTagsRequest) SetProductTag(v []*UpdateProductTagsRequestProductTag) *UpdateProductTagsRequest {
	s.ProductTag = v
	return s
}

type UpdateProductTagsRequestProductTag struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s UpdateProductTagsRequestProductTag) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductTagsRequestProductTag) GoString() string {
	return s.String()
}

func (s *UpdateProductTagsRequestProductTag) SetTagValue(v string) *UpdateProductTagsRequestProductTag {
	s.TagValue = &v
	return s
}

func (s *UpdateProductTagsRequestProductTag) SetTagKey(v string) *UpdateProductTagsRequestProductTag {
	s.TagKey = &v
	return s
}

type UpdateProductTagsResponseBody struct {
	RequestId          *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success            *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage       *string                                          `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Code               *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	InvalidProductTags *UpdateProductTagsResponseBodyInvalidProductTags `json:"InvalidProductTags,omitempty" xml:"InvalidProductTags,omitempty" type:"Struct"`
}

func (s UpdateProductTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductTagsResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateProductTagsResponseBody) SetRequestId(v string) *UpdateProductTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateProductTagsResponseBody) SetSuccess(v bool) *UpdateProductTagsResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateProductTagsResponseBody) SetErrorMessage(v string) *UpdateProductTagsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateProductTagsResponseBody) SetCode(v string) *UpdateProductTagsResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateProductTagsResponseBody) SetInvalidProductTags(v *UpdateProductTagsResponseBodyInvalidProductTags) *UpdateProductTagsResponseBody {
	s.InvalidProductTags = v
	return s
}

type UpdateProductTagsResponseBodyInvalidProductTags struct {
	ProductTag []*UpdateProductTagsResponseBodyInvalidProductTagsProductTag `json:"ProductTag,omitempty" xml:"ProductTag,omitempty" type:"Repeated"`
}

func (s UpdateProductTagsResponseBodyInvalidProductTags) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductTagsResponseBodyInvalidProductTags) GoString() string {
	return s.String()
}

func (s *UpdateProductTagsResponseBodyInvalidProductTags) SetProductTag(v []*UpdateProductTagsResponseBodyInvalidProductTagsProductTag) *UpdateProductTagsResponseBodyInvalidProductTags {
	s.ProductTag = v
	return s
}

type UpdateProductTagsResponseBodyInvalidProductTagsProductTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s UpdateProductTagsResponseBodyInvalidProductTagsProductTag) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductTagsResponseBodyInvalidProductTagsProductTag) GoString() string {
	return s.String()
}

func (s *UpdateProductTagsResponseBodyInvalidProductTagsProductTag) SetTagKey(v string) *UpdateProductTagsResponseBodyInvalidProductTagsProductTag {
	s.TagKey = &v
	return s
}

func (s *UpdateProductTagsResponseBodyInvalidProductTagsProductTag) SetTagValue(v string) *UpdateProductTagsResponseBodyInvalidProductTagsProductTag {
	s.TagValue = &v
	return s
}

type UpdateProductTagsResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateProductTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateProductTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductTagsResponse) GoString() string {
	return s.String()
}

func (s *UpdateProductTagsResponse) SetHeaders(v map[string]*string) *UpdateProductTagsResponse {
	s.Headers = v
	return s
}

func (s *UpdateProductTagsResponse) SetBody(v *UpdateProductTagsResponseBody) *UpdateProductTagsResponse {
	s.Body = v
	return s
}

type UpdateProductTopicRequest struct {
	ApiProduct     *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision    *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId  *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	Desc           *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Operation      *string `json:"Operation,omitempty" xml:"Operation,omitempty"`
	TopicShortName *string `json:"TopicShortName,omitempty" xml:"TopicShortName,omitempty"`
	TopicId        *string `json:"TopicId,omitempty" xml:"TopicId,omitempty"`
}

func (s UpdateProductTopicRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductTopicRequest) GoString() string {
	return s.String()
}

func (s *UpdateProductTopicRequest) SetApiProduct(v string) *UpdateProductTopicRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateProductTopicRequest) SetApiRevision(v string) *UpdateProductTopicRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateProductTopicRequest) SetIotInstanceId(v string) *UpdateProductTopicRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateProductTopicRequest) SetDesc(v string) *UpdateProductTopicRequest {
	s.Desc = &v
	return s
}

func (s *UpdateProductTopicRequest) SetOperation(v string) *UpdateProductTopicRequest {
	s.Operation = &v
	return s
}

func (s *UpdateProductTopicRequest) SetTopicShortName(v string) *UpdateProductTopicRequest {
	s.TopicShortName = &v
	return s
}

func (s *UpdateProductTopicRequest) SetTopicId(v string) *UpdateProductTopicRequest {
	s.TopicId = &v
	return s
}

type UpdateProductTopicResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateProductTopicResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductTopicResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateProductTopicResponseBody) SetRequestId(v string) *UpdateProductTopicResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateProductTopicResponseBody) SetSuccess(v bool) *UpdateProductTopicResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateProductTopicResponseBody) SetCode(v string) *UpdateProductTopicResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateProductTopicResponseBody) SetErrorMessage(v string) *UpdateProductTopicResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateProductTopicResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateProductTopicResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateProductTopicResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProductTopicResponse) GoString() string {
	return s.String()
}

func (s *UpdateProductTopicResponse) SetHeaders(v map[string]*string) *UpdateProductTopicResponse {
	s.Headers = v
	return s
}

func (s *UpdateProductTopicResponse) SetBody(v *UpdateProductTopicResponseBody) *UpdateProductTopicResponse {
	s.Body = v
	return s
}

type UpdateRuleRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId        *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	Select        *string `json:"Select,omitempty" xml:"Select,omitempty"`
	ShortTopic    *string `json:"ShortTopic,omitempty" xml:"ShortTopic,omitempty"`
	Where         *string `json:"Where,omitempty" xml:"Where,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RuleDesc      *string `json:"RuleDesc,omitempty" xml:"RuleDesc,omitempty"`
	TopicType     *int32  `json:"TopicType,omitempty" xml:"TopicType,omitempty"`
	Topic         *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s UpdateRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateRuleRequest) SetApiProduct(v string) *UpdateRuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateRuleRequest) SetApiRevision(v string) *UpdateRuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateRuleRequest) SetIotInstanceId(v string) *UpdateRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateRuleRequest) SetRuleId(v int64) *UpdateRuleRequest {
	s.RuleId = &v
	return s
}

func (s *UpdateRuleRequest) SetSelect(v string) *UpdateRuleRequest {
	s.Select = &v
	return s
}

func (s *UpdateRuleRequest) SetShortTopic(v string) *UpdateRuleRequest {
	s.ShortTopic = &v
	return s
}

func (s *UpdateRuleRequest) SetWhere(v string) *UpdateRuleRequest {
	s.Where = &v
	return s
}

func (s *UpdateRuleRequest) SetProductKey(v string) *UpdateRuleRequest {
	s.ProductKey = &v
	return s
}

func (s *UpdateRuleRequest) SetName(v string) *UpdateRuleRequest {
	s.Name = &v
	return s
}

func (s *UpdateRuleRequest) SetRuleDesc(v string) *UpdateRuleRequest {
	s.RuleDesc = &v
	return s
}

func (s *UpdateRuleRequest) SetTopicType(v int32) *UpdateRuleRequest {
	s.TopicType = &v
	return s
}

func (s *UpdateRuleRequest) SetTopic(v string) *UpdateRuleRequest {
	s.Topic = &v
	return s
}

type UpdateRuleResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateRuleResponseBody) SetRequestId(v string) *UpdateRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateRuleResponseBody) SetSuccess(v bool) *UpdateRuleResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateRuleResponseBody) SetCode(v string) *UpdateRuleResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateRuleResponseBody) SetErrorMessage(v string) *UpdateRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateRuleResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateRuleResponse) SetHeaders(v map[string]*string) *UpdateRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateRuleResponse) SetBody(v *UpdateRuleResponseBody) *UpdateRuleResponse {
	s.Body = v
	return s
}

type UpdateRuleActionRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ActionId      *int64  `json:"ActionId,omitempty" xml:"ActionId,omitempty"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Configuration *string `json:"Configuration,omitempty" xml:"Configuration,omitempty"`
}

func (s UpdateRuleActionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleActionRequest) GoString() string {
	return s.String()
}

func (s *UpdateRuleActionRequest) SetApiProduct(v string) *UpdateRuleActionRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateRuleActionRequest) SetApiRevision(v string) *UpdateRuleActionRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateRuleActionRequest) SetIotInstanceId(v string) *UpdateRuleActionRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateRuleActionRequest) SetActionId(v int64) *UpdateRuleActionRequest {
	s.ActionId = &v
	return s
}

func (s *UpdateRuleActionRequest) SetType(v string) *UpdateRuleActionRequest {
	s.Type = &v
	return s
}

func (s *UpdateRuleActionRequest) SetConfiguration(v string) *UpdateRuleActionRequest {
	s.Configuration = &v
	return s
}

type UpdateRuleActionResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateRuleActionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleActionResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateRuleActionResponseBody) SetRequestId(v string) *UpdateRuleActionResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateRuleActionResponseBody) SetCode(v string) *UpdateRuleActionResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateRuleActionResponseBody) SetSuccess(v bool) *UpdateRuleActionResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateRuleActionResponseBody) SetErrorMessage(v string) *UpdateRuleActionResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateRuleActionResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateRuleActionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateRuleActionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRuleActionResponse) GoString() string {
	return s.String()
}

func (s *UpdateRuleActionResponse) SetHeaders(v map[string]*string) *UpdateRuleActionResponse {
	s.Headers = v
	return s
}

func (s *UpdateRuleActionResponse) SetBody(v *UpdateRuleActionResponseBody) *UpdateRuleActionResponse {
	s.Body = v
	return s
}

type UpdateSceneRuleRequest struct {
	ApiProduct      *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision     *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId   *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	RuleId          *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	RuleName        *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleContent     *string `json:"RuleContent,omitempty" xml:"RuleContent,omitempty"`
	RuleDescription *string `json:"RuleDescription,omitempty" xml:"RuleDescription,omitempty"`
}

func (s UpdateSceneRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateSceneRuleRequest) SetApiProduct(v string) *UpdateSceneRuleRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateSceneRuleRequest) SetApiRevision(v string) *UpdateSceneRuleRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateSceneRuleRequest) SetIotInstanceId(v string) *UpdateSceneRuleRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateSceneRuleRequest) SetRuleId(v string) *UpdateSceneRuleRequest {
	s.RuleId = &v
	return s
}

func (s *UpdateSceneRuleRequest) SetRuleName(v string) *UpdateSceneRuleRequest {
	s.RuleName = &v
	return s
}

func (s *UpdateSceneRuleRequest) SetRuleContent(v string) *UpdateSceneRuleRequest {
	s.RuleContent = &v
	return s
}

func (s *UpdateSceneRuleRequest) SetRuleDescription(v string) *UpdateSceneRuleRequest {
	s.RuleDescription = &v
	return s
}

type UpdateSceneRuleResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateSceneRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSceneRuleResponseBody) SetRequestId(v string) *UpdateSceneRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSceneRuleResponseBody) SetSuccess(v bool) *UpdateSceneRuleResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateSceneRuleResponseBody) SetCode(v string) *UpdateSceneRuleResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSceneRuleResponseBody) SetErrorMessage(v string) *UpdateSceneRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateSceneRuleResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateSceneRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSceneRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateSceneRuleResponse) SetHeaders(v map[string]*string) *UpdateSceneRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateSceneRuleResponse) SetBody(v *UpdateSceneRuleResponseBody) *UpdateSceneRuleResponse {
	s.Body = v
	return s
}

type UpdateSubscribeRelationRequest struct {
	ApiProduct              *string   `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision             *string   `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	DeviceStatusChangeFlag  *bool     `json:"DeviceStatusChangeFlag,omitempty" xml:"DeviceStatusChangeFlag,omitempty"`
	IotInstanceId           *string   `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ThingHistoryFlag        *bool     `json:"ThingHistoryFlag,omitempty" xml:"ThingHistoryFlag,omitempty"`
	ProductKey              *string   `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Type                    *string   `json:"Type,omitempty" xml:"Type,omitempty"`
	DeviceDataFlag          *bool     `json:"DeviceDataFlag,omitempty" xml:"DeviceDataFlag,omitempty"`
	ConsumerGroupIds        []*string `json:"ConsumerGroupIds,omitempty" xml:"ConsumerGroupIds,omitempty" type:"Repeated"`
	DeviceTopoLifeCycleFlag *bool     `json:"DeviceTopoLifeCycleFlag,omitempty" xml:"DeviceTopoLifeCycleFlag,omitempty"`
	FoundDeviceListFlag     *bool     `json:"FoundDeviceListFlag,omitempty" xml:"FoundDeviceListFlag,omitempty"`
	OtaEventFlag            *bool     `json:"OtaEventFlag,omitempty" xml:"OtaEventFlag,omitempty"`
	DeviceLifeCycleFlag     *bool     `json:"DeviceLifeCycleFlag,omitempty" xml:"DeviceLifeCycleFlag,omitempty"`
	MnsConfiguration        *string   `json:"MnsConfiguration,omitempty" xml:"MnsConfiguration,omitempty"`
	DeviceTagFlag           *bool     `json:"DeviceTagFlag,omitempty" xml:"DeviceTagFlag,omitempty"`
	OtaVersionFlag          *bool     `json:"OtaVersionFlag,omitempty" xml:"OtaVersionFlag,omitempty"`
	OtaJobFlag              *bool     `json:"OtaJobFlag,omitempty" xml:"OtaJobFlag,omitempty"`
}

func (s UpdateSubscribeRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSubscribeRelationRequest) GoString() string {
	return s.String()
}

func (s *UpdateSubscribeRelationRequest) SetApiProduct(v string) *UpdateSubscribeRelationRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetApiRevision(v string) *UpdateSubscribeRelationRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetDeviceStatusChangeFlag(v bool) *UpdateSubscribeRelationRequest {
	s.DeviceStatusChangeFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetIotInstanceId(v string) *UpdateSubscribeRelationRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetThingHistoryFlag(v bool) *UpdateSubscribeRelationRequest {
	s.ThingHistoryFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetProductKey(v string) *UpdateSubscribeRelationRequest {
	s.ProductKey = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetType(v string) *UpdateSubscribeRelationRequest {
	s.Type = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetDeviceDataFlag(v bool) *UpdateSubscribeRelationRequest {
	s.DeviceDataFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetConsumerGroupIds(v []*string) *UpdateSubscribeRelationRequest {
	s.ConsumerGroupIds = v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetDeviceTopoLifeCycleFlag(v bool) *UpdateSubscribeRelationRequest {
	s.DeviceTopoLifeCycleFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetFoundDeviceListFlag(v bool) *UpdateSubscribeRelationRequest {
	s.FoundDeviceListFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetOtaEventFlag(v bool) *UpdateSubscribeRelationRequest {
	s.OtaEventFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetDeviceLifeCycleFlag(v bool) *UpdateSubscribeRelationRequest {
	s.DeviceLifeCycleFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetMnsConfiguration(v string) *UpdateSubscribeRelationRequest {
	s.MnsConfiguration = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetDeviceTagFlag(v bool) *UpdateSubscribeRelationRequest {
	s.DeviceTagFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetOtaVersionFlag(v bool) *UpdateSubscribeRelationRequest {
	s.OtaVersionFlag = &v
	return s
}

func (s *UpdateSubscribeRelationRequest) SetOtaJobFlag(v bool) *UpdateSubscribeRelationRequest {
	s.OtaJobFlag = &v
	return s
}

type UpdateSubscribeRelationResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateSubscribeRelationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSubscribeRelationResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSubscribeRelationResponseBody) SetRequestId(v string) *UpdateSubscribeRelationResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSubscribeRelationResponseBody) SetSuccess(v bool) *UpdateSubscribeRelationResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateSubscribeRelationResponseBody) SetCode(v string) *UpdateSubscribeRelationResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSubscribeRelationResponseBody) SetErrorMessage(v string) *UpdateSubscribeRelationResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateSubscribeRelationResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateSubscribeRelationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSubscribeRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSubscribeRelationResponse) GoString() string {
	return s.String()
}

func (s *UpdateSubscribeRelationResponse) SetHeaders(v map[string]*string) *UpdateSubscribeRelationResponse {
	s.Headers = v
	return s
}

func (s *UpdateSubscribeRelationResponse) SetBody(v *UpdateSubscribeRelationResponseBody) *UpdateSubscribeRelationResponse {
	s.Body = v
	return s
}

type UpdateThingModelRequest struct {
	ApiProduct        *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision       *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	IotInstanceId     *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey        *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	Identifier        *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	ThingModelJson    *string `json:"ThingModelJson,omitempty" xml:"ThingModelJson,omitempty"`
	FunctionBlockId   *string `json:"FunctionBlockId,omitempty" xml:"FunctionBlockId,omitempty"`
	FunctionBlockName *string `json:"FunctionBlockName,omitempty" xml:"FunctionBlockName,omitempty"`
	RealTenantId      *string `json:"RealTenantId,omitempty" xml:"RealTenantId,omitempty"`
	RealTripartiteKey *string `json:"RealTripartiteKey,omitempty" xml:"RealTripartiteKey,omitempty"`
}

func (s UpdateThingModelRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateThingModelRequest) GoString() string {
	return s.String()
}

func (s *UpdateThingModelRequest) SetApiProduct(v string) *UpdateThingModelRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateThingModelRequest) SetApiRevision(v string) *UpdateThingModelRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateThingModelRequest) SetIotInstanceId(v string) *UpdateThingModelRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateThingModelRequest) SetProductKey(v string) *UpdateThingModelRequest {
	s.ProductKey = &v
	return s
}

func (s *UpdateThingModelRequest) SetIdentifier(v string) *UpdateThingModelRequest {
	s.Identifier = &v
	return s
}

func (s *UpdateThingModelRequest) SetThingModelJson(v string) *UpdateThingModelRequest {
	s.ThingModelJson = &v
	return s
}

func (s *UpdateThingModelRequest) SetFunctionBlockId(v string) *UpdateThingModelRequest {
	s.FunctionBlockId = &v
	return s
}

func (s *UpdateThingModelRequest) SetFunctionBlockName(v string) *UpdateThingModelRequest {
	s.FunctionBlockName = &v
	return s
}

func (s *UpdateThingModelRequest) SetRealTenantId(v string) *UpdateThingModelRequest {
	s.RealTenantId = &v
	return s
}

func (s *UpdateThingModelRequest) SetRealTripartiteKey(v string) *UpdateThingModelRequest {
	s.RealTripartiteKey = &v
	return s
}

type UpdateThingModelResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateThingModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateThingModelResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateThingModelResponseBody) SetRequestId(v string) *UpdateThingModelResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateThingModelResponseBody) SetSuccess(v bool) *UpdateThingModelResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateThingModelResponseBody) SetCode(v string) *UpdateThingModelResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateThingModelResponseBody) SetErrorMessage(v string) *UpdateThingModelResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateThingModelResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateThingModelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateThingModelResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateThingModelResponse) GoString() string {
	return s.String()
}

func (s *UpdateThingModelResponse) SetHeaders(v map[string]*string) *UpdateThingModelResponse {
	s.Headers = v
	return s
}

func (s *UpdateThingModelResponse) SetBody(v *UpdateThingModelResponseBody) *UpdateThingModelResponse {
	s.Body = v
	return s
}

type UpdateThingModelValidationConfigRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	ValidateType  *int32  `json:"ValidateType,omitempty" xml:"ValidateType,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
}

func (s UpdateThingModelValidationConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateThingModelValidationConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateThingModelValidationConfigRequest) SetApiProduct(v string) *UpdateThingModelValidationConfigRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateThingModelValidationConfigRequest) SetApiRevision(v string) *UpdateThingModelValidationConfigRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateThingModelValidationConfigRequest) SetValidateType(v int32) *UpdateThingModelValidationConfigRequest {
	s.ValidateType = &v
	return s
}

func (s *UpdateThingModelValidationConfigRequest) SetIotInstanceId(v string) *UpdateThingModelValidationConfigRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateThingModelValidationConfigRequest) SetProductKey(v string) *UpdateThingModelValidationConfigRequest {
	s.ProductKey = &v
	return s
}

type UpdateThingModelValidationConfigResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateThingModelValidationConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateThingModelValidationConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateThingModelValidationConfigResponseBody) SetRequestId(v string) *UpdateThingModelValidationConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateThingModelValidationConfigResponseBody) SetSuccess(v bool) *UpdateThingModelValidationConfigResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateThingModelValidationConfigResponseBody) SetCode(v string) *UpdateThingModelValidationConfigResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateThingModelValidationConfigResponseBody) SetErrorMessage(v string) *UpdateThingModelValidationConfigResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateThingModelValidationConfigResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateThingModelValidationConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateThingModelValidationConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateThingModelValidationConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateThingModelValidationConfigResponse) SetHeaders(v map[string]*string) *UpdateThingModelValidationConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateThingModelValidationConfigResponse) SetBody(v *UpdateThingModelValidationConfigResponseBody) *UpdateThingModelValidationConfigResponse {
	s.Body = v
	return s
}

type UpdateThingScriptRequest struct {
	ApiProduct    *string `json:"ApiProduct,omitempty" xml:"ApiProduct,omitempty"`
	ApiRevision   *string `json:"ApiRevision,omitempty" xml:"ApiRevision,omitempty"`
	ScriptContent *string `json:"ScriptContent,omitempty" xml:"ScriptContent,omitempty"`
	IotInstanceId *string `json:"IotInstanceId,omitempty" xml:"IotInstanceId,omitempty"`
	ProductKey    *string `json:"ProductKey,omitempty" xml:"ProductKey,omitempty"`
	ScriptType    *string `json:"ScriptType,omitempty" xml:"ScriptType,omitempty"`
}

func (s UpdateThingScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateThingScriptRequest) GoString() string {
	return s.String()
}

func (s *UpdateThingScriptRequest) SetApiProduct(v string) *UpdateThingScriptRequest {
	s.ApiProduct = &v
	return s
}

func (s *UpdateThingScriptRequest) SetApiRevision(v string) *UpdateThingScriptRequest {
	s.ApiRevision = &v
	return s
}

func (s *UpdateThingScriptRequest) SetScriptContent(v string) *UpdateThingScriptRequest {
	s.ScriptContent = &v
	return s
}

func (s *UpdateThingScriptRequest) SetIotInstanceId(v string) *UpdateThingScriptRequest {
	s.IotInstanceId = &v
	return s
}

func (s *UpdateThingScriptRequest) SetProductKey(v string) *UpdateThingScriptRequest {
	s.ProductKey = &v
	return s
}

func (s *UpdateThingScriptRequest) SetScriptType(v string) *UpdateThingScriptRequest {
	s.ScriptType = &v
	return s
}

type UpdateThingScriptResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UpdateThingScriptResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateThingScriptResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateThingScriptResponseBody) SetRequestId(v string) *UpdateThingScriptResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateThingScriptResponseBody) SetSuccess(v bool) *UpdateThingScriptResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateThingScriptResponseBody) SetCode(v string) *UpdateThingScriptResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateThingScriptResponseBody) SetErrorMessage(v string) *UpdateThingScriptResponseBody {
	s.ErrorMessage = &v
	return s
}

type UpdateThingScriptResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateThingScriptResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateThingScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateThingScriptResponse) GoString() string {
	return s.String()
}

func (s *UpdateThingScriptResponse) SetHeaders(v map[string]*string) *UpdateThingScriptResponse {
	s.Headers = v
	return s
}

func (s *UpdateThingScriptResponse) SetBody(v *UpdateThingScriptResponseBody) *UpdateThingScriptResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"ap-northeast-2-pop":          tea.String("iot.ap-northeast-1.aliyuncs.com"),
		"ap-south-1":                  tea.String("iot.ap-northeast-1.aliyuncs.com"),
		"ap-southeast-2":              tea.String("iot.ap-northeast-1.aliyuncs.com"),
		"ap-southeast-3":              tea.String("iot.ap-northeast-1.aliyuncs.com"),
		"ap-southeast-5":              tea.String("iot.ap-northeast-1.aliyuncs.com"),
		"cn-beijing":                  tea.String("iot.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("iot.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("iot.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("iot.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("iot.aliyuncs.com"),
		"cn-chengdu":                  tea.String("iot.aliyuncs.com"),
		"cn-edge-1":                   tea.String("iot.aliyuncs.com"),
		"cn-fujian":                   tea.String("iot.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("iot.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("iot.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("iot.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("iot.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("iot.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("iot.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("iot.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("iot.aliyuncs.com"),
		"cn-hongkong":                 tea.String("iot.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("iot.aliyuncs.com"),
		"cn-huhehaote":                tea.String("iot.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("iot.aliyuncs.com"),
		"cn-qingdao":                  tea.String("iot.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("iot.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("iot.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("iot.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("iot.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("iot.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("iot.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("iot.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("iot.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("iot.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("iot.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("iot.aliyuncs.com"),
		"cn-wuhan":                    tea.String("iot.aliyuncs.com"),
		"cn-yushanfang":               tea.String("iot.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("iot.aliyuncs.com"),
		"cn-zhangjiakou":              tea.String("iot.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("iot.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("iot.aliyuncs.com"),
		"eu-west-1":                   tea.String("iot.ap-northeast-1.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("iot.ap-northeast-1.aliyuncs.com"),
		"me-east-1":                   tea.String("iot.ap-northeast-1.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("iot.ap-northeast-1.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("iot"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchAddDeviceGroupRelationsWithOptions(request *BatchAddDeviceGroupRelationsRequest, runtime *util.RuntimeOptions) (_result *BatchAddDeviceGroupRelationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchAddDeviceGroupRelationsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchAddDeviceGroupRelations"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchAddDeviceGroupRelations(request *BatchAddDeviceGroupRelationsRequest) (_result *BatchAddDeviceGroupRelationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchAddDeviceGroupRelationsResponse{}
	_body, _err := client.BatchAddDeviceGroupRelationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchAddThingTopoWithOptions(request *BatchAddThingTopoRequest, runtime *util.RuntimeOptions) (_result *BatchAddThingTopoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchAddThingTopoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchAddThingTopo"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchAddThingTopo(request *BatchAddThingTopoRequest) (_result *BatchAddThingTopoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchAddThingTopoResponse{}
	_body, _err := client.BatchAddThingTopoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchBindDeviceToEdgeInstanceWithDriverWithOptions(request *BatchBindDeviceToEdgeInstanceWithDriverRequest, runtime *util.RuntimeOptions) (_result *BatchBindDeviceToEdgeInstanceWithDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchBindDeviceToEdgeInstanceWithDriverResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchBindDeviceToEdgeInstanceWithDriver"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchBindDeviceToEdgeInstanceWithDriver(request *BatchBindDeviceToEdgeInstanceWithDriverRequest) (_result *BatchBindDeviceToEdgeInstanceWithDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchBindDeviceToEdgeInstanceWithDriverResponse{}
	_body, _err := client.BatchBindDeviceToEdgeInstanceWithDriverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchCheckDeviceNamesWithOptions(request *BatchCheckDeviceNamesRequest, runtime *util.RuntimeOptions) (_result *BatchCheckDeviceNamesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchCheckDeviceNamesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchCheckDeviceNames"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchCheckDeviceNames(request *BatchCheckDeviceNamesRequest) (_result *BatchCheckDeviceNamesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchCheckDeviceNamesResponse{}
	_body, _err := client.BatchCheckDeviceNamesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchClearEdgeInstanceDeviceConfigWithOptions(request *BatchClearEdgeInstanceDeviceConfigRequest, runtime *util.RuntimeOptions) (_result *BatchClearEdgeInstanceDeviceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchClearEdgeInstanceDeviceConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchClearEdgeInstanceDeviceConfig"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchClearEdgeInstanceDeviceConfig(request *BatchClearEdgeInstanceDeviceConfigRequest) (_result *BatchClearEdgeInstanceDeviceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchClearEdgeInstanceDeviceConfigResponse{}
	_body, _err := client.BatchClearEdgeInstanceDeviceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchDeleteDeviceGroupRelationsWithOptions(request *BatchDeleteDeviceGroupRelationsRequest, runtime *util.RuntimeOptions) (_result *BatchDeleteDeviceGroupRelationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchDeleteDeviceGroupRelationsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchDeleteDeviceGroupRelations"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchDeleteDeviceGroupRelations(request *BatchDeleteDeviceGroupRelationsRequest) (_result *BatchDeleteDeviceGroupRelationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchDeleteDeviceGroupRelationsResponse{}
	_body, _err := client.BatchDeleteDeviceGroupRelationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchDeleteEdgeInstanceChannelWithOptions(request *BatchDeleteEdgeInstanceChannelRequest, runtime *util.RuntimeOptions) (_result *BatchDeleteEdgeInstanceChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchDeleteEdgeInstanceChannelResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchDeleteEdgeInstanceChannel"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchDeleteEdgeInstanceChannel(request *BatchDeleteEdgeInstanceChannelRequest) (_result *BatchDeleteEdgeInstanceChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchDeleteEdgeInstanceChannelResponse{}
	_body, _err := client.BatchDeleteEdgeInstanceChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetDeviceBindStatusWithOptions(request *BatchGetDeviceBindStatusRequest, runtime *util.RuntimeOptions) (_result *BatchGetDeviceBindStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchGetDeviceBindStatusResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchGetDeviceBindStatus"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetDeviceBindStatus(request *BatchGetDeviceBindStatusRequest) (_result *BatchGetDeviceBindStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetDeviceBindStatusResponse{}
	_body, _err := client.BatchGetDeviceBindStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetDeviceStateWithOptions(request *BatchGetDeviceStateRequest, runtime *util.RuntimeOptions) (_result *BatchGetDeviceStateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchGetDeviceStateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchGetDeviceState"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetDeviceState(request *BatchGetDeviceStateRequest) (_result *BatchGetDeviceStateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetDeviceStateResponse{}
	_body, _err := client.BatchGetDeviceStateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetEdgeDriverWithOptions(request *BatchGetEdgeDriverRequest, runtime *util.RuntimeOptions) (_result *BatchGetEdgeDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchGetEdgeDriverResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchGetEdgeDriver"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetEdgeDriver(request *BatchGetEdgeDriverRequest) (_result *BatchGetEdgeDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetEdgeDriverResponse{}
	_body, _err := client.BatchGetEdgeDriverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceChannelWithOptions(request *BatchGetEdgeInstanceChannelRequest, runtime *util.RuntimeOptions) (_result *BatchGetEdgeInstanceChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchGetEdgeInstanceChannelResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchGetEdgeInstanceChannel"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceChannel(request *BatchGetEdgeInstanceChannelRequest) (_result *BatchGetEdgeInstanceChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetEdgeInstanceChannelResponse{}
	_body, _err := client.BatchGetEdgeInstanceChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceDeviceChannelWithOptions(request *BatchGetEdgeInstanceDeviceChannelRequest, runtime *util.RuntimeOptions) (_result *BatchGetEdgeInstanceDeviceChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchGetEdgeInstanceDeviceChannelResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchGetEdgeInstanceDeviceChannel"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceDeviceChannel(request *BatchGetEdgeInstanceDeviceChannelRequest) (_result *BatchGetEdgeInstanceDeviceChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetEdgeInstanceDeviceChannelResponse{}
	_body, _err := client.BatchGetEdgeInstanceDeviceChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceDeviceConfigWithOptions(request *BatchGetEdgeInstanceDeviceConfigRequest, runtime *util.RuntimeOptions) (_result *BatchGetEdgeInstanceDeviceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchGetEdgeInstanceDeviceConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchGetEdgeInstanceDeviceConfig"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceDeviceConfig(request *BatchGetEdgeInstanceDeviceConfigRequest) (_result *BatchGetEdgeInstanceDeviceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetEdgeInstanceDeviceConfigResponse{}
	_body, _err := client.BatchGetEdgeInstanceDeviceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceDeviceDriverWithOptions(request *BatchGetEdgeInstanceDeviceDriverRequest, runtime *util.RuntimeOptions) (_result *BatchGetEdgeInstanceDeviceDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchGetEdgeInstanceDeviceDriverResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchGetEdgeInstanceDeviceDriver"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceDeviceDriver(request *BatchGetEdgeInstanceDeviceDriverRequest) (_result *BatchGetEdgeInstanceDeviceDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetEdgeInstanceDeviceDriverResponse{}
	_body, _err := client.BatchGetEdgeInstanceDeviceDriverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceDriverConfigsWithOptions(request *BatchGetEdgeInstanceDriverConfigsRequest, runtime *util.RuntimeOptions) (_result *BatchGetEdgeInstanceDriverConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchGetEdgeInstanceDriverConfigsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchGetEdgeInstanceDriverConfigs"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetEdgeInstanceDriverConfigs(request *BatchGetEdgeInstanceDriverConfigsRequest) (_result *BatchGetEdgeInstanceDriverConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetEdgeInstanceDriverConfigsResponse{}
	_body, _err := client.BatchGetEdgeInstanceDriverConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchPubWithOptions(request *BatchPubRequest, runtime *util.RuntimeOptions) (_result *BatchPubResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchPubResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchPub"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchPub(request *BatchPubRequest) (_result *BatchPubResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchPubResponse{}
	_body, _err := client.BatchPubWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchQueryDeviceDetailWithOptions(request *BatchQueryDeviceDetailRequest, runtime *util.RuntimeOptions) (_result *BatchQueryDeviceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchQueryDeviceDetailResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchQueryDeviceDetail"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchQueryDeviceDetail(request *BatchQueryDeviceDetailRequest) (_result *BatchQueryDeviceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchQueryDeviceDetailResponse{}
	_body, _err := client.BatchQueryDeviceDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchRegisterDeviceWithOptions(request *BatchRegisterDeviceRequest, runtime *util.RuntimeOptions) (_result *BatchRegisterDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchRegisterDeviceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchRegisterDevice"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchRegisterDevice(request *BatchRegisterDeviceRequest) (_result *BatchRegisterDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchRegisterDeviceResponse{}
	_body, _err := client.BatchRegisterDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchRegisterDeviceWithApplyIdWithOptions(request *BatchRegisterDeviceWithApplyIdRequest, runtime *util.RuntimeOptions) (_result *BatchRegisterDeviceWithApplyIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchRegisterDeviceWithApplyIdResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchRegisterDeviceWithApplyId"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchRegisterDeviceWithApplyId(request *BatchRegisterDeviceWithApplyIdRequest) (_result *BatchRegisterDeviceWithApplyIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchRegisterDeviceWithApplyIdResponse{}
	_body, _err := client.BatchRegisterDeviceWithApplyIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchSetEdgeInstanceDeviceChannelWithOptions(request *BatchSetEdgeInstanceDeviceChannelRequest, runtime *util.RuntimeOptions) (_result *BatchSetEdgeInstanceDeviceChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchSetEdgeInstanceDeviceChannelResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchSetEdgeInstanceDeviceChannel"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchSetEdgeInstanceDeviceChannel(request *BatchSetEdgeInstanceDeviceChannelRequest) (_result *BatchSetEdgeInstanceDeviceChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchSetEdgeInstanceDeviceChannelResponse{}
	_body, _err := client.BatchSetEdgeInstanceDeviceChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchSetEdgeInstanceDeviceConfigWithOptions(request *BatchSetEdgeInstanceDeviceConfigRequest, runtime *util.RuntimeOptions) (_result *BatchSetEdgeInstanceDeviceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchSetEdgeInstanceDeviceConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchSetEdgeInstanceDeviceConfig"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchSetEdgeInstanceDeviceConfig(request *BatchSetEdgeInstanceDeviceConfigRequest) (_result *BatchSetEdgeInstanceDeviceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchSetEdgeInstanceDeviceConfigResponse{}
	_body, _err := client.BatchSetEdgeInstanceDeviceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchUnbindDeviceFromEdgeInstanceWithOptions(request *BatchUnbindDeviceFromEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *BatchUnbindDeviceFromEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchUnbindDeviceFromEdgeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchUnbindDeviceFromEdgeInstance"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchUnbindDeviceFromEdgeInstance(request *BatchUnbindDeviceFromEdgeInstanceRequest) (_result *BatchUnbindDeviceFromEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchUnbindDeviceFromEdgeInstanceResponse{}
	_body, _err := client.BatchUnbindDeviceFromEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchUpdateDeviceNicknameWithOptions(request *BatchUpdateDeviceNicknameRequest, runtime *util.RuntimeOptions) (_result *BatchUpdateDeviceNicknameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BatchUpdateDeviceNicknameResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BatchUpdateDeviceNickname"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchUpdateDeviceNickname(request *BatchUpdateDeviceNicknameRequest) (_result *BatchUpdateDeviceNicknameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchUpdateDeviceNicknameResponse{}
	_body, _err := client.BatchUpdateDeviceNicknameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindApplicationToEdgeInstanceWithOptions(request *BindApplicationToEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *BindApplicationToEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BindApplicationToEdgeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BindApplicationToEdgeInstance"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindApplicationToEdgeInstance(request *BindApplicationToEdgeInstanceRequest) (_result *BindApplicationToEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindApplicationToEdgeInstanceResponse{}
	_body, _err := client.BindApplicationToEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindDriverToEdgeInstanceWithOptions(request *BindDriverToEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *BindDriverToEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BindDriverToEdgeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BindDriverToEdgeInstance"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindDriverToEdgeInstance(request *BindDriverToEdgeInstanceRequest) (_result *BindDriverToEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindDriverToEdgeInstanceResponse{}
	_body, _err := client.BindDriverToEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindGatewayToEdgeInstanceWithOptions(request *BindGatewayToEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *BindGatewayToEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BindGatewayToEdgeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BindGatewayToEdgeInstance"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindGatewayToEdgeInstance(request *BindGatewayToEdgeInstanceRequest) (_result *BindGatewayToEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindGatewayToEdgeInstanceResponse{}
	_body, _err := client.BindGatewayToEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindRoleToEdgeInstanceWithOptions(request *BindRoleToEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *BindRoleToEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BindRoleToEdgeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BindRoleToEdgeInstance"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindRoleToEdgeInstance(request *BindRoleToEdgeInstanceRequest) (_result *BindRoleToEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindRoleToEdgeInstanceResponse{}
	_body, _err := client.BindRoleToEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindSceneRuleToEdgeInstanceWithOptions(request *BindSceneRuleToEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *BindSceneRuleToEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BindSceneRuleToEdgeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BindSceneRuleToEdgeInstance"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindSceneRuleToEdgeInstance(request *BindSceneRuleToEdgeInstanceRequest) (_result *BindSceneRuleToEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindSceneRuleToEdgeInstanceResponse{}
	_body, _err := client.BindSceneRuleToEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelJobWithOptions(request *CancelJobRequest, runtime *util.RuntimeOptions) (_result *CancelJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CancelJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CancelJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelJob(request *CancelJobRequest) (_result *CancelJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelJobResponse{}
	_body, _err := client.CancelJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelOTAStrategyByJobWithOptions(request *CancelOTAStrategyByJobRequest, runtime *util.RuntimeOptions) (_result *CancelOTAStrategyByJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CancelOTAStrategyByJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CancelOTAStrategyByJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelOTAStrategyByJob(request *CancelOTAStrategyByJobRequest) (_result *CancelOTAStrategyByJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelOTAStrategyByJobResponse{}
	_body, _err := client.CancelOTAStrategyByJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelOTATaskByDeviceWithOptions(request *CancelOTATaskByDeviceRequest, runtime *util.RuntimeOptions) (_result *CancelOTATaskByDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CancelOTATaskByDeviceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CancelOTATaskByDevice"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelOTATaskByDevice(request *CancelOTATaskByDeviceRequest) (_result *CancelOTATaskByDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelOTATaskByDeviceResponse{}
	_body, _err := client.CancelOTATaskByDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelOTATaskByJobWithOptions(request *CancelOTATaskByJobRequest, runtime *util.RuntimeOptions) (_result *CancelOTATaskByJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CancelOTATaskByJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CancelOTATaskByJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelOTATaskByJob(request *CancelOTATaskByJobRequest) (_result *CancelOTATaskByJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelOTATaskByJobResponse{}
	_body, _err := client.CancelOTATaskByJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ClearEdgeInstanceDriverConfigsWithOptions(request *ClearEdgeInstanceDriverConfigsRequest, runtime *util.RuntimeOptions) (_result *ClearEdgeInstanceDriverConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ClearEdgeInstanceDriverConfigsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ClearEdgeInstanceDriverConfigs"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ClearEdgeInstanceDriverConfigs(request *ClearEdgeInstanceDriverConfigsRequest) (_result *ClearEdgeInstanceDriverConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ClearEdgeInstanceDriverConfigsResponse{}
	_body, _err := client.ClearEdgeInstanceDriverConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CloseEdgeInstanceDeploymentWithOptions(request *CloseEdgeInstanceDeploymentRequest, runtime *util.RuntimeOptions) (_result *CloseEdgeInstanceDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CloseEdgeInstanceDeploymentResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CloseEdgeInstanceDeployment"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CloseEdgeInstanceDeployment(request *CloseEdgeInstanceDeploymentRequest) (_result *CloseEdgeInstanceDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CloseEdgeInstanceDeploymentResponse{}
	_body, _err := client.CloseEdgeInstanceDeploymentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopyThingModelWithOptions(request *CopyThingModelRequest, runtime *util.RuntimeOptions) (_result *CopyThingModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CopyThingModelResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CopyThingModel"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopyThingModel(request *CopyThingModelRequest) (_result *CopyThingModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyThingModelResponse{}
	_body, _err := client.CopyThingModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateConsumerGroupWithOptions(request *CreateConsumerGroupRequest, runtime *util.RuntimeOptions) (_result *CreateConsumerGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateConsumerGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateConsumerGroup"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateConsumerGroup(request *CreateConsumerGroupRequest) (_result *CreateConsumerGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateConsumerGroupResponse{}
	_body, _err := client.CreateConsumerGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateConsumerGroupSubscribeRelationWithOptions(request *CreateConsumerGroupSubscribeRelationRequest, runtime *util.RuntimeOptions) (_result *CreateConsumerGroupSubscribeRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateConsumerGroupSubscribeRelationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateConsumerGroupSubscribeRelation"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateConsumerGroupSubscribeRelation(request *CreateConsumerGroupSubscribeRelationRequest) (_result *CreateConsumerGroupSubscribeRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateConsumerGroupSubscribeRelationResponse{}
	_body, _err := client.CreateConsumerGroupSubscribeRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDataAPIServiceWithOptions(request *CreateDataAPIServiceRequest, runtime *util.RuntimeOptions) (_result *CreateDataAPIServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDataAPIServiceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDataAPIService"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDataAPIService(request *CreateDataAPIServiceRequest) (_result *CreateDataAPIServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDataAPIServiceResponse{}
	_body, _err := client.CreateDataAPIServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDeviceDistributeJobWithOptions(request *CreateDeviceDistributeJobRequest, runtime *util.RuntimeOptions) (_result *CreateDeviceDistributeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDeviceDistributeJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDeviceDistributeJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDeviceDistributeJob(request *CreateDeviceDistributeJobRequest) (_result *CreateDeviceDistributeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDeviceDistributeJobResponse{}
	_body, _err := client.CreateDeviceDistributeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDeviceGroupWithOptions(request *CreateDeviceGroupRequest, runtime *util.RuntimeOptions) (_result *CreateDeviceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDeviceGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDeviceGroup"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDeviceGroup(request *CreateDeviceGroupRequest) (_result *CreateDeviceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDeviceGroupResponse{}
	_body, _err := client.CreateDeviceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEdgeDriverWithOptions(request *CreateEdgeDriverRequest, runtime *util.RuntimeOptions) (_result *CreateEdgeDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateEdgeDriverResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateEdgeDriver"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEdgeDriver(request *CreateEdgeDriverRequest) (_result *CreateEdgeDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEdgeDriverResponse{}
	_body, _err := client.CreateEdgeDriverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEdgeDriverVersionWithOptions(request *CreateEdgeDriverVersionRequest, runtime *util.RuntimeOptions) (_result *CreateEdgeDriverVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateEdgeDriverVersionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateEdgeDriverVersion"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEdgeDriverVersion(request *CreateEdgeDriverVersionRequest) (_result *CreateEdgeDriverVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEdgeDriverVersionResponse{}
	_body, _err := client.CreateEdgeDriverVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEdgeInstanceWithOptions(request *CreateEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateEdgeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateEdgeInstance"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEdgeInstance(request *CreateEdgeInstanceRequest) (_result *CreateEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEdgeInstanceResponse{}
	_body, _err := client.CreateEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEdgeInstanceChannelWithOptions(request *CreateEdgeInstanceChannelRequest, runtime *util.RuntimeOptions) (_result *CreateEdgeInstanceChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateEdgeInstanceChannelResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateEdgeInstanceChannel"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEdgeInstanceChannel(request *CreateEdgeInstanceChannelRequest) (_result *CreateEdgeInstanceChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEdgeInstanceChannelResponse{}
	_body, _err := client.CreateEdgeInstanceChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEdgeInstanceDeploymentWithOptions(request *CreateEdgeInstanceDeploymentRequest, runtime *util.RuntimeOptions) (_result *CreateEdgeInstanceDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateEdgeInstanceDeploymentResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateEdgeInstanceDeployment"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEdgeInstanceDeployment(request *CreateEdgeInstanceDeploymentRequest) (_result *CreateEdgeInstanceDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEdgeInstanceDeploymentResponse{}
	_body, _err := client.CreateEdgeInstanceDeploymentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEdgeOssPreSignedAddressWithOptions(request *CreateEdgeOssPreSignedAddressRequest, runtime *util.RuntimeOptions) (_result *CreateEdgeOssPreSignedAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateEdgeOssPreSignedAddressResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateEdgeOssPreSignedAddress"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEdgeOssPreSignedAddress(request *CreateEdgeOssPreSignedAddressRequest) (_result *CreateEdgeOssPreSignedAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEdgeOssPreSignedAddressResponse{}
	_body, _err := client.CreateEdgeOssPreSignedAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateJobWithOptions(request *CreateJobRequest, runtime *util.RuntimeOptions) (_result *CreateJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateJob(request *CreateJobRequest) (_result *CreateJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateJobResponse{}
	_body, _err := client.CreateJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLoRaNodesTaskWithOptions(request *CreateLoRaNodesTaskRequest, runtime *util.RuntimeOptions) (_result *CreateLoRaNodesTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateLoRaNodesTaskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateLoRaNodesTask"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLoRaNodesTask(request *CreateLoRaNodesTaskRequest) (_result *CreateLoRaNodesTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLoRaNodesTaskResponse{}
	_body, _err := client.CreateLoRaNodesTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOTADynamicUpgradeJobWithOptions(request *CreateOTADynamicUpgradeJobRequest, runtime *util.RuntimeOptions) (_result *CreateOTADynamicUpgradeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateOTADynamicUpgradeJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateOTADynamicUpgradeJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOTADynamicUpgradeJob(request *CreateOTADynamicUpgradeJobRequest) (_result *CreateOTADynamicUpgradeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOTADynamicUpgradeJobResponse{}
	_body, _err := client.CreateOTADynamicUpgradeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOTAFirmwareWithOptions(request *CreateOTAFirmwareRequest, runtime *util.RuntimeOptions) (_result *CreateOTAFirmwareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateOTAFirmwareResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateOTAFirmware"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOTAFirmware(request *CreateOTAFirmwareRequest) (_result *CreateOTAFirmwareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOTAFirmwareResponse{}
	_body, _err := client.CreateOTAFirmwareWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOTAModuleWithOptions(request *CreateOTAModuleRequest, runtime *util.RuntimeOptions) (_result *CreateOTAModuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateOTAModuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateOTAModule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOTAModule(request *CreateOTAModuleRequest) (_result *CreateOTAModuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOTAModuleResponse{}
	_body, _err := client.CreateOTAModuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOTAStaticUpgradeJobWithOptions(request *CreateOTAStaticUpgradeJobRequest, runtime *util.RuntimeOptions) (_result *CreateOTAStaticUpgradeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateOTAStaticUpgradeJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateOTAStaticUpgradeJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOTAStaticUpgradeJob(request *CreateOTAStaticUpgradeJobRequest) (_result *CreateOTAStaticUpgradeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOTAStaticUpgradeJobResponse{}
	_body, _err := client.CreateOTAStaticUpgradeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOTAVerifyJobWithOptions(request *CreateOTAVerifyJobRequest, runtime *util.RuntimeOptions) (_result *CreateOTAVerifyJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateOTAVerifyJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateOTAVerifyJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOTAVerifyJob(request *CreateOTAVerifyJobRequest) (_result *CreateOTAVerifyJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOTAVerifyJobResponse{}
	_body, _err := client.CreateOTAVerifyJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateProductWithOptions(request *CreateProductRequest, runtime *util.RuntimeOptions) (_result *CreateProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateProductResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateProduct"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateProduct(request *CreateProductRequest) (_result *CreateProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProductResponse{}
	_body, _err := client.CreateProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateProductDistributeJobWithOptions(request *CreateProductDistributeJobRequest, runtime *util.RuntimeOptions) (_result *CreateProductDistributeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateProductDistributeJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateProductDistributeJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateProductDistributeJob(request *CreateProductDistributeJobRequest) (_result *CreateProductDistributeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProductDistributeJobResponse{}
	_body, _err := client.CreateProductDistributeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateProductTagsWithOptions(request *CreateProductTagsRequest, runtime *util.RuntimeOptions) (_result *CreateProductTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateProductTagsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateProductTags"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateProductTags(request *CreateProductTagsRequest) (_result *CreateProductTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProductTagsResponse{}
	_body, _err := client.CreateProductTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateProductTopicWithOptions(request *CreateProductTopicRequest, runtime *util.RuntimeOptions) (_result *CreateProductTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateProductTopicResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateProductTopic"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateProductTopic(request *CreateProductTopicRequest) (_result *CreateProductTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProductTopicResponse{}
	_body, _err := client.CreateProductTopicWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRuleWithOptions(request *CreateRuleRequest, runtime *util.RuntimeOptions) (_result *CreateRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateRule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRule(request *CreateRuleRequest) (_result *CreateRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRuleResponse{}
	_body, _err := client.CreateRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRuleActionWithOptions(request *CreateRuleActionRequest, runtime *util.RuntimeOptions) (_result *CreateRuleActionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateRuleActionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateRuleAction"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRuleAction(request *CreateRuleActionRequest) (_result *CreateRuleActionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRuleActionResponse{}
	_body, _err := client.CreateRuleActionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateRulengDistributeJobWithOptions(request *CreateRulengDistributeJobRequest, runtime *util.RuntimeOptions) (_result *CreateRulengDistributeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateRulengDistributeJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateRulengDistributeJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateRulengDistributeJob(request *CreateRulengDistributeJobRequest) (_result *CreateRulengDistributeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRulengDistributeJobResponse{}
	_body, _err := client.CreateRulengDistributeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSceneRuleWithOptions(request *CreateSceneRuleRequest, runtime *util.RuntimeOptions) (_result *CreateSceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateSceneRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateSceneRule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSceneRule(request *CreateSceneRuleRequest) (_result *CreateSceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSceneRuleResponse{}
	_body, _err := client.CreateSceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSubscribeRelationWithOptions(request *CreateSubscribeRelationRequest, runtime *util.RuntimeOptions) (_result *CreateSubscribeRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateSubscribeRelationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateSubscribeRelation"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSubscribeRelation(request *CreateSubscribeRelationRequest) (_result *CreateSubscribeRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSubscribeRelationResponse{}
	_body, _err := client.CreateSubscribeRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateThingModelWithOptions(request *CreateThingModelRequest, runtime *util.RuntimeOptions) (_result *CreateThingModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateThingModelResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateThingModel"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateThingModel(request *CreateThingModelRequest) (_result *CreateThingModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateThingModelResponse{}
	_body, _err := client.CreateThingModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateThingScriptWithOptions(request *CreateThingScriptRequest, runtime *util.RuntimeOptions) (_result *CreateThingScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateThingScriptResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateThingScript"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateThingScript(request *CreateThingScriptRequest) (_result *CreateThingScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateThingScriptResponse{}
	_body, _err := client.CreateThingScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateTopicRouteTableWithOptions(request *CreateTopicRouteTableRequest, runtime *util.RuntimeOptions) (_result *CreateTopicRouteTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateTopicRouteTableResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateTopicRouteTable"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateTopicRouteTable(request *CreateTopicRouteTableRequest) (_result *CreateTopicRouteTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTopicRouteTableResponse{}
	_body, _err := client.CreateTopicRouteTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteConsumerGroupWithOptions(request *DeleteConsumerGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteConsumerGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteConsumerGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteConsumerGroup"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteConsumerGroup(request *DeleteConsumerGroupRequest) (_result *DeleteConsumerGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteConsumerGroupResponse{}
	_body, _err := client.DeleteConsumerGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteConsumerGroupSubscribeRelationWithOptions(request *DeleteConsumerGroupSubscribeRelationRequest, runtime *util.RuntimeOptions) (_result *DeleteConsumerGroupSubscribeRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteConsumerGroupSubscribeRelationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteConsumerGroupSubscribeRelation"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteConsumerGroupSubscribeRelation(request *DeleteConsumerGroupSubscribeRelationRequest) (_result *DeleteConsumerGroupSubscribeRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteConsumerGroupSubscribeRelationResponse{}
	_body, _err := client.DeleteConsumerGroupSubscribeRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDeviceWithOptions(request *DeleteDeviceRequest, runtime *util.RuntimeOptions) (_result *DeleteDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteDeviceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteDevice"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDevice(request *DeleteDeviceRequest) (_result *DeleteDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDeviceResponse{}
	_body, _err := client.DeleteDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDeviceDistributeJobWithOptions(request *DeleteDeviceDistributeJobRequest, runtime *util.RuntimeOptions) (_result *DeleteDeviceDistributeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteDeviceDistributeJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteDeviceDistributeJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDeviceDistributeJob(request *DeleteDeviceDistributeJobRequest) (_result *DeleteDeviceDistributeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDeviceDistributeJobResponse{}
	_body, _err := client.DeleteDeviceDistributeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDeviceFileWithOptions(request *DeleteDeviceFileRequest, runtime *util.RuntimeOptions) (_result *DeleteDeviceFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteDeviceFileResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteDeviceFile"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDeviceFile(request *DeleteDeviceFileRequest) (_result *DeleteDeviceFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDeviceFileResponse{}
	_body, _err := client.DeleteDeviceFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDeviceGroupWithOptions(request *DeleteDeviceGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteDeviceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteDeviceGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteDeviceGroup"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDeviceGroup(request *DeleteDeviceGroupRequest) (_result *DeleteDeviceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDeviceGroupResponse{}
	_body, _err := client.DeleteDeviceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDevicePropWithOptions(request *DeleteDevicePropRequest, runtime *util.RuntimeOptions) (_result *DeleteDevicePropResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteDevicePropResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteDeviceProp"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDeviceProp(request *DeleteDevicePropRequest) (_result *DeleteDevicePropResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDevicePropResponse{}
	_body, _err := client.DeleteDevicePropWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEdgeDriverWithOptions(request *DeleteEdgeDriverRequest, runtime *util.RuntimeOptions) (_result *DeleteEdgeDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteEdgeDriverResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteEdgeDriver"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEdgeDriver(request *DeleteEdgeDriverRequest) (_result *DeleteEdgeDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEdgeDriverResponse{}
	_body, _err := client.DeleteEdgeDriverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEdgeDriverVersionWithOptions(request *DeleteEdgeDriverVersionRequest, runtime *util.RuntimeOptions) (_result *DeleteEdgeDriverVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteEdgeDriverVersionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteEdgeDriverVersion"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEdgeDriverVersion(request *DeleteEdgeDriverVersionRequest) (_result *DeleteEdgeDriverVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEdgeDriverVersionResponse{}
	_body, _err := client.DeleteEdgeDriverVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEdgeInstanceWithOptions(request *DeleteEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteEdgeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteEdgeInstance"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEdgeInstance(request *DeleteEdgeInstanceRequest) (_result *DeleteEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEdgeInstanceResponse{}
	_body, _err := client.DeleteEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteJobWithOptions(request *DeleteJobRequest, runtime *util.RuntimeOptions) (_result *DeleteJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteJob(request *DeleteJobRequest) (_result *DeleteJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteJobResponse{}
	_body, _err := client.DeleteJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteOTAFirmwareWithOptions(request *DeleteOTAFirmwareRequest, runtime *util.RuntimeOptions) (_result *DeleteOTAFirmwareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteOTAFirmwareResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteOTAFirmware"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteOTAFirmware(request *DeleteOTAFirmwareRequest) (_result *DeleteOTAFirmwareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteOTAFirmwareResponse{}
	_body, _err := client.DeleteOTAFirmwareWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteOTAModuleWithOptions(request *DeleteOTAModuleRequest, runtime *util.RuntimeOptions) (_result *DeleteOTAModuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteOTAModuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteOTAModule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteOTAModule(request *DeleteOTAModuleRequest) (_result *DeleteOTAModuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteOTAModuleResponse{}
	_body, _err := client.DeleteOTAModuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteProductWithOptions(request *DeleteProductRequest, runtime *util.RuntimeOptions) (_result *DeleteProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteProductResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteProduct"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteProduct(request *DeleteProductRequest) (_result *DeleteProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteProductResponse{}
	_body, _err := client.DeleteProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteProductTagsWithOptions(request *DeleteProductTagsRequest, runtime *util.RuntimeOptions) (_result *DeleteProductTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteProductTagsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteProductTags"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteProductTags(request *DeleteProductTagsRequest) (_result *DeleteProductTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteProductTagsResponse{}
	_body, _err := client.DeleteProductTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteProductTopicWithOptions(request *DeleteProductTopicRequest, runtime *util.RuntimeOptions) (_result *DeleteProductTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteProductTopicResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteProductTopic"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteProductTopic(request *DeleteProductTopicRequest) (_result *DeleteProductTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteProductTopicResponse{}
	_body, _err := client.DeleteProductTopicWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRuleWithOptions(request *DeleteRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteRule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRule(request *DeleteRuleRequest) (_result *DeleteRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRuleResponse{}
	_body, _err := client.DeleteRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRuleActionWithOptions(request *DeleteRuleActionRequest, runtime *util.RuntimeOptions) (_result *DeleteRuleActionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteRuleActionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteRuleAction"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRuleAction(request *DeleteRuleActionRequest) (_result *DeleteRuleActionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRuleActionResponse{}
	_body, _err := client.DeleteRuleActionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSceneRuleWithOptions(request *DeleteSceneRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteSceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteSceneRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteSceneRule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSceneRule(request *DeleteSceneRuleRequest) (_result *DeleteSceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSceneRuleResponse{}
	_body, _err := client.DeleteSceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSubscribeRelationWithOptions(request *DeleteSubscribeRelationRequest, runtime *util.RuntimeOptions) (_result *DeleteSubscribeRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteSubscribeRelationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteSubscribeRelation"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSubscribeRelation(request *DeleteSubscribeRelationRequest) (_result *DeleteSubscribeRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSubscribeRelationResponse{}
	_body, _err := client.DeleteSubscribeRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteThingModelWithOptions(request *DeleteThingModelRequest, runtime *util.RuntimeOptions) (_result *DeleteThingModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteThingModelResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteThingModel"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteThingModel(request *DeleteThingModelRequest) (_result *DeleteThingModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteThingModelResponse{}
	_body, _err := client.DeleteThingModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteTopicRouteTableWithOptions(request *DeleteTopicRouteTableRequest, runtime *util.RuntimeOptions) (_result *DeleteTopicRouteTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteTopicRouteTableResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteTopicRouteTable"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteTopicRouteTable(request *DeleteTopicRouteTableRequest) (_result *DeleteTopicRouteTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTopicRouteTableResponse{}
	_body, _err := client.DeleteTopicRouteTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableSceneRuleWithOptions(request *DisableSceneRuleRequest, runtime *util.RuntimeOptions) (_result *DisableSceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DisableSceneRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DisableSceneRule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableSceneRule(request *DisableSceneRuleRequest) (_result *DisableSceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableSceneRuleResponse{}
	_body, _err := client.DisableSceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableThingWithOptions(request *DisableThingRequest, runtime *util.RuntimeOptions) (_result *DisableThingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DisableThingResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DisableThing"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableThing(request *DisableThingRequest) (_result *DisableThingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableThingResponse{}
	_body, _err := client.DisableThingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableSceneRuleWithOptions(request *EnableSceneRuleRequest, runtime *util.RuntimeOptions) (_result *EnableSceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &EnableSceneRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("EnableSceneRule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableSceneRule(request *EnableSceneRuleRequest) (_result *EnableSceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableSceneRuleResponse{}
	_body, _err := client.EnableSceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableThingWithOptions(request *EnableThingRequest, runtime *util.RuntimeOptions) (_result *EnableThingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &EnableThingResponse{}
	_body, _err := client.DoRPCRequest(tea.String("EnableThing"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableThing(request *EnableThingRequest) (_result *EnableThingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableThingResponse{}
	_body, _err := client.EnableThingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GenerateDeviceNameListURLWithOptions(request *GenerateDeviceNameListURLRequest, runtime *util.RuntimeOptions) (_result *GenerateDeviceNameListURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GenerateDeviceNameListURLResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GenerateDeviceNameListURL"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GenerateDeviceNameListURL(request *GenerateDeviceNameListURLRequest) (_result *GenerateDeviceNameListURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateDeviceNameListURLResponse{}
	_body, _err := client.GenerateDeviceNameListURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GenerateFileUploadURLWithOptions(request *GenerateFileUploadURLRequest, runtime *util.RuntimeOptions) (_result *GenerateFileUploadURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GenerateFileUploadURLResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GenerateFileUploadURL"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GenerateFileUploadURL(request *GenerateFileUploadURLRequest) (_result *GenerateFileUploadURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateFileUploadURLResponse{}
	_body, _err := client.GenerateFileUploadURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GenerateOTAUploadURLWithOptions(request *GenerateOTAUploadURLRequest, runtime *util.RuntimeOptions) (_result *GenerateOTAUploadURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GenerateOTAUploadURLResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GenerateOTAUploadURL"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GenerateOTAUploadURL(request *GenerateOTAUploadURLRequest) (_result *GenerateOTAUploadURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateOTAUploadURLResponse{}
	_body, _err := client.GenerateOTAUploadURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDataAPIServiceDetailWithOptions(request *GetDataAPIServiceDetailRequest, runtime *util.RuntimeOptions) (_result *GetDataAPIServiceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetDataAPIServiceDetailResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetDataAPIServiceDetail"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDataAPIServiceDetail(request *GetDataAPIServiceDetailRequest) (_result *GetDataAPIServiceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataAPIServiceDetailResponse{}
	_body, _err := client.GetDataAPIServiceDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDeviceShadowWithOptions(request *GetDeviceShadowRequest, runtime *util.RuntimeOptions) (_result *GetDeviceShadowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetDeviceShadowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetDeviceShadow"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDeviceShadow(request *GetDeviceShadowRequest) (_result *GetDeviceShadowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDeviceShadowResponse{}
	_body, _err := client.GetDeviceShadowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDeviceStatusWithOptions(request *GetDeviceStatusRequest, runtime *util.RuntimeOptions) (_result *GetDeviceStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetDeviceStatusResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetDeviceStatus"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDeviceStatus(request *GetDeviceStatusRequest) (_result *GetDeviceStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDeviceStatusResponse{}
	_body, _err := client.GetDeviceStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEdgeDriverVersionWithOptions(request *GetEdgeDriverVersionRequest, runtime *util.RuntimeOptions) (_result *GetEdgeDriverVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetEdgeDriverVersionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetEdgeDriverVersion"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEdgeDriverVersion(request *GetEdgeDriverVersionRequest) (_result *GetEdgeDriverVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEdgeDriverVersionResponse{}
	_body, _err := client.GetEdgeDriverVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEdgeInstanceWithOptions(request *GetEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *GetEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetEdgeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetEdgeInstance"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEdgeInstance(request *GetEdgeInstanceRequest) (_result *GetEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEdgeInstanceResponse{}
	_body, _err := client.GetEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEdgeInstanceDeploymentWithOptions(request *GetEdgeInstanceDeploymentRequest, runtime *util.RuntimeOptions) (_result *GetEdgeInstanceDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetEdgeInstanceDeploymentResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetEdgeInstanceDeployment"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEdgeInstanceDeployment(request *GetEdgeInstanceDeploymentRequest) (_result *GetEdgeInstanceDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEdgeInstanceDeploymentResponse{}
	_body, _err := client.GetEdgeInstanceDeploymentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetGatewayBySubDeviceWithOptions(request *GetGatewayBySubDeviceRequest, runtime *util.RuntimeOptions) (_result *GetGatewayBySubDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetGatewayBySubDeviceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetGatewayBySubDevice"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetGatewayBySubDevice(request *GetGatewayBySubDeviceRequest) (_result *GetGatewayBySubDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetGatewayBySubDeviceResponse{}
	_body, _err := client.GetGatewayBySubDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetLoraNodesTaskWithOptions(request *GetLoraNodesTaskRequest, runtime *util.RuntimeOptions) (_result *GetLoraNodesTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetLoraNodesTaskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetLoraNodesTask"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetLoraNodesTask(request *GetLoraNodesTaskRequest) (_result *GetLoraNodesTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLoraNodesTaskResponse{}
	_body, _err := client.GetLoraNodesTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetNodesAddingTaskWithOptions(request *GetNodesAddingTaskRequest, runtime *util.RuntimeOptions) (_result *GetNodesAddingTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetNodesAddingTaskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetNodesAddingTask"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetNodesAddingTask(request *GetNodesAddingTaskRequest) (_result *GetNodesAddingTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetNodesAddingTaskResponse{}
	_body, _err := client.GetNodesAddingTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRuleWithOptions(request *GetRuleRequest, runtime *util.RuntimeOptions) (_result *GetRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetRule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRule(request *GetRuleRequest) (_result *GetRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRuleResponse{}
	_body, _err := client.GetRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRuleActionWithOptions(request *GetRuleActionRequest, runtime *util.RuntimeOptions) (_result *GetRuleActionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetRuleActionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetRuleAction"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRuleAction(request *GetRuleActionRequest) (_result *GetRuleActionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRuleActionResponse{}
	_body, _err := client.GetRuleActionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSceneRuleWithOptions(request *GetSceneRuleRequest, runtime *util.RuntimeOptions) (_result *GetSceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetSceneRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetSceneRule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSceneRule(request *GetSceneRuleRequest) (_result *GetSceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSceneRuleResponse{}
	_body, _err := client.GetSceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetThingModelTslWithOptions(request *GetThingModelTslRequest, runtime *util.RuntimeOptions) (_result *GetThingModelTslResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetThingModelTslResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetThingModelTsl"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetThingModelTsl(request *GetThingModelTslRequest) (_result *GetThingModelTslResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetThingModelTslResponse{}
	_body, _err := client.GetThingModelTslWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetThingModelTslPublishedWithOptions(request *GetThingModelTslPublishedRequest, runtime *util.RuntimeOptions) (_result *GetThingModelTslPublishedResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetThingModelTslPublishedResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetThingModelTslPublished"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetThingModelTslPublished(request *GetThingModelTslPublishedRequest) (_result *GetThingModelTslPublishedResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetThingModelTslPublishedResponse{}
	_body, _err := client.GetThingModelTslPublishedWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetThingScriptWithOptions(request *GetThingScriptRequest, runtime *util.RuntimeOptions) (_result *GetThingScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetThingScriptResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetThingScript"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetThingScript(request *GetThingScriptRequest) (_result *GetThingScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetThingScriptResponse{}
	_body, _err := client.GetThingScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetThingTemplateWithOptions(request *GetThingTemplateRequest, runtime *util.RuntimeOptions) (_result *GetThingTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetThingTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetThingTemplate"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetThingTemplate(request *GetThingTemplateRequest) (_result *GetThingTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetThingTemplateResponse{}
	_body, _err := client.GetThingTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetThingTopoWithOptions(request *GetThingTopoRequest, runtime *util.RuntimeOptions) (_result *GetThingTopoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetThingTopoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetThingTopo"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetThingTopo(request *GetThingTopoRequest) (_result *GetThingTopoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetThingTopoResponse{}
	_body, _err := client.GetThingTopoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportThingModelTslWithOptions(request *ImportThingModelTslRequest, runtime *util.RuntimeOptions) (_result *ImportThingModelTslResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ImportThingModelTslResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ImportThingModelTsl"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportThingModelTsl(request *ImportThingModelTslRequest) (_result *ImportThingModelTslResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportThingModelTslResponse{}
	_body, _err := client.ImportThingModelTslWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InvokeDataAPIServiceWithOptions(request *InvokeDataAPIServiceRequest, runtime *util.RuntimeOptions) (_result *InvokeDataAPIServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &InvokeDataAPIServiceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("InvokeDataAPIService"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InvokeDataAPIService(request *InvokeDataAPIServiceRequest) (_result *InvokeDataAPIServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InvokeDataAPIServiceResponse{}
	_body, _err := client.InvokeDataAPIServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InvokeThingServiceWithOptions(request *InvokeThingServiceRequest, runtime *util.RuntimeOptions) (_result *InvokeThingServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &InvokeThingServiceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("InvokeThingService"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InvokeThingService(request *InvokeThingServiceRequest) (_result *InvokeThingServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InvokeThingServiceResponse{}
	_body, _err := client.InvokeThingServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InvokeThingsServiceWithOptions(request *InvokeThingsServiceRequest, runtime *util.RuntimeOptions) (_result *InvokeThingsServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &InvokeThingsServiceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("InvokeThingsService"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InvokeThingsService(request *InvokeThingsServiceRequest) (_result *InvokeThingsServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InvokeThingsServiceResponse{}
	_body, _err := client.InvokeThingsServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDeviceDistributeJobWithOptions(request *ListDeviceDistributeJobRequest, runtime *util.RuntimeOptions) (_result *ListDeviceDistributeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListDeviceDistributeJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListDeviceDistributeJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDeviceDistributeJob(request *ListDeviceDistributeJobRequest) (_result *ListDeviceDistributeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDeviceDistributeJobResponse{}
	_body, _err := client.ListDeviceDistributeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDistributedDeviceWithOptions(request *ListDistributedDeviceRequest, runtime *util.RuntimeOptions) (_result *ListDistributedDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListDistributedDeviceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListDistributedDevice"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDistributedDevice(request *ListDistributedDeviceRequest) (_result *ListDistributedDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDistributedDeviceResponse{}
	_body, _err := client.ListDistributedDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDistributedProductWithOptions(request *ListDistributedProductRequest, runtime *util.RuntimeOptions) (_result *ListDistributedProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListDistributedProductResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListDistributedProduct"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDistributedProduct(request *ListDistributedProductRequest) (_result *ListDistributedProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDistributedProductResponse{}
	_body, _err := client.ListDistributedProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListJobWithOptions(request *ListJobRequest, runtime *util.RuntimeOptions) (_result *ListJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListJob(request *ListJobRequest) (_result *ListJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListJobResponse{}
	_body, _err := client.ListJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListOTAFirmwareWithOptions(request *ListOTAFirmwareRequest, runtime *util.RuntimeOptions) (_result *ListOTAFirmwareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListOTAFirmwareResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListOTAFirmware"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListOTAFirmware(request *ListOTAFirmwareRequest) (_result *ListOTAFirmwareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOTAFirmwareResponse{}
	_body, _err := client.ListOTAFirmwareWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListOTAJobByDeviceWithOptions(request *ListOTAJobByDeviceRequest, runtime *util.RuntimeOptions) (_result *ListOTAJobByDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListOTAJobByDeviceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListOTAJobByDevice"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListOTAJobByDevice(request *ListOTAJobByDeviceRequest) (_result *ListOTAJobByDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOTAJobByDeviceResponse{}
	_body, _err := client.ListOTAJobByDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListOTAJobByFirmwareWithOptions(request *ListOTAJobByFirmwareRequest, runtime *util.RuntimeOptions) (_result *ListOTAJobByFirmwareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListOTAJobByFirmwareResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListOTAJobByFirmware"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListOTAJobByFirmware(request *ListOTAJobByFirmwareRequest) (_result *ListOTAJobByFirmwareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOTAJobByFirmwareResponse{}
	_body, _err := client.ListOTAJobByFirmwareWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListOTAModuleByProductWithOptions(request *ListOTAModuleByProductRequest, runtime *util.RuntimeOptions) (_result *ListOTAModuleByProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &ListOTAModuleByProductResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListOTAModuleByProduct"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListOTAModuleByProduct(request *ListOTAModuleByProductRequest) (_result *ListOTAModuleByProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOTAModuleByProductResponse{}
	_body, _err := client.ListOTAModuleByProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListOTAModuleVersionsByDeviceWithOptions(request *ListOTAModuleVersionsByDeviceRequest, runtime *util.RuntimeOptions) (_result *ListOTAModuleVersionsByDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListOTAModuleVersionsByDeviceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListOTAModuleVersionsByDevice"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListOTAModuleVersionsByDevice(request *ListOTAModuleVersionsByDeviceRequest) (_result *ListOTAModuleVersionsByDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOTAModuleVersionsByDeviceResponse{}
	_body, _err := client.ListOTAModuleVersionsByDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListOTATaskByJobWithOptions(request *ListOTATaskByJobRequest, runtime *util.RuntimeOptions) (_result *ListOTATaskByJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListOTATaskByJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListOTATaskByJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListOTATaskByJob(request *ListOTATaskByJobRequest) (_result *ListOTATaskByJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOTATaskByJobResponse{}
	_body, _err := client.ListOTATaskByJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListProductByTagsWithOptions(request *ListProductByTagsRequest, runtime *util.RuntimeOptions) (_result *ListProductByTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListProductByTagsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListProductByTags"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListProductByTags(request *ListProductByTagsRequest) (_result *ListProductByTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProductByTagsResponse{}
	_body, _err := client.ListProductByTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListProductTagsWithOptions(request *ListProductTagsRequest, runtime *util.RuntimeOptions) (_result *ListProductTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListProductTagsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListProductTags"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListProductTags(request *ListProductTagsRequest) (_result *ListProductTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProductTagsResponse{}
	_body, _err := client.ListProductTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRuleWithOptions(request *ListRuleRequest, runtime *util.RuntimeOptions) (_result *ListRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListRule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRule(request *ListRuleRequest) (_result *ListRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRuleResponse{}
	_body, _err := client.ListRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRuleActionsWithOptions(request *ListRuleActionsRequest, runtime *util.RuntimeOptions) (_result *ListRuleActionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListRuleActionsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListRuleActions"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRuleActions(request *ListRuleActionsRequest) (_result *ListRuleActionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRuleActionsResponse{}
	_body, _err := client.ListRuleActionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTaskWithOptions(request *ListTaskRequest, runtime *util.RuntimeOptions) (_result *ListTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListTaskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListTask"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTask(request *ListTaskRequest) (_result *ListTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTaskResponse{}
	_body, _err := client.ListTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTaskByPageWithOptions(request *ListTaskByPageRequest, runtime *util.RuntimeOptions) (_result *ListTaskByPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListTaskByPageResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListTaskByPage"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTaskByPage(request *ListTaskByPageRequest) (_result *ListTaskByPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTaskByPageResponse{}
	_body, _err := client.ListTaskByPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListThingModelVersionWithOptions(request *ListThingModelVersionRequest, runtime *util.RuntimeOptions) (_result *ListThingModelVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListThingModelVersionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListThingModelVersion"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListThingModelVersion(request *ListThingModelVersionRequest) (_result *ListThingModelVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListThingModelVersionResponse{}
	_body, _err := client.ListThingModelVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListThingTemplatesWithOptions(request *ListThingTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListThingTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListThingTemplatesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListThingTemplates"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListThingTemplates(request *ListThingTemplatesRequest) (_result *ListThingTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListThingTemplatesResponse{}
	_body, _err := client.ListThingTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) NotifyAddThingTopoWithOptions(request *NotifyAddThingTopoRequest, runtime *util.RuntimeOptions) (_result *NotifyAddThingTopoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &NotifyAddThingTopoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("NotifyAddThingTopo"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) NotifyAddThingTopo(request *NotifyAddThingTopoRequest) (_result *NotifyAddThingTopoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &NotifyAddThingTopoResponse{}
	_body, _err := client.NotifyAddThingTopoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenIotServiceWithOptions(request *OpenIotServiceRequest, runtime *util.RuntimeOptions) (_result *OpenIotServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &OpenIotServiceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("OpenIotService"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenIotService(request *OpenIotServiceRequest) (_result *OpenIotServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenIotServiceResponse{}
	_body, _err := client.OpenIotServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PubWithOptions(request *PubRequest, runtime *util.RuntimeOptions) (_result *PubResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &PubResponse{}
	_body, _err := client.DoRPCRequest(tea.String("Pub"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) Pub(request *PubRequest) (_result *PubResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PubResponse{}
	_body, _err := client.PubWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PubBroadcastWithOptions(request *PubBroadcastRequest, runtime *util.RuntimeOptions) (_result *PubBroadcastResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &PubBroadcastResponse{}
	_body, _err := client.DoRPCRequest(tea.String("PubBroadcast"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PubBroadcast(request *PubBroadcastRequest) (_result *PubBroadcastResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PubBroadcastResponse{}
	_body, _err := client.PubBroadcastWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PublishThingModelWithOptions(request *PublishThingModelRequest, runtime *util.RuntimeOptions) (_result *PublishThingModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &PublishThingModelResponse{}
	_body, _err := client.DoRPCRequest(tea.String("PublishThingModel"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PublishThingModel(request *PublishThingModelRequest) (_result *PublishThingModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PublishThingModelResponse{}
	_body, _err := client.PublishThingModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryAppDeviceListWithOptions(request *QueryAppDeviceListRequest, runtime *util.RuntimeOptions) (_result *QueryAppDeviceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryAppDeviceListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryAppDeviceList"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryAppDeviceList(request *QueryAppDeviceListRequest) (_result *QueryAppDeviceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAppDeviceListResponse{}
	_body, _err := client.QueryAppDeviceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryBatchRegisterDeviceStatusWithOptions(request *QueryBatchRegisterDeviceStatusRequest, runtime *util.RuntimeOptions) (_result *QueryBatchRegisterDeviceStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryBatchRegisterDeviceStatusResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryBatchRegisterDeviceStatus"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryBatchRegisterDeviceStatus(request *QueryBatchRegisterDeviceStatusRequest) (_result *QueryBatchRegisterDeviceStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryBatchRegisterDeviceStatusResponse{}
	_body, _err := client.QueryBatchRegisterDeviceStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryCertUrlByApplyIdWithOptions(request *QueryCertUrlByApplyIdRequest, runtime *util.RuntimeOptions) (_result *QueryCertUrlByApplyIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryCertUrlByApplyIdResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryCertUrlByApplyId"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryCertUrlByApplyId(request *QueryCertUrlByApplyIdRequest) (_result *QueryCertUrlByApplyIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCertUrlByApplyIdResponse{}
	_body, _err := client.QueryCertUrlByApplyIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryConsumerGroupByGroupIdWithOptions(request *QueryConsumerGroupByGroupIdRequest, runtime *util.RuntimeOptions) (_result *QueryConsumerGroupByGroupIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryConsumerGroupByGroupIdResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryConsumerGroupByGroupId"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryConsumerGroupByGroupId(request *QueryConsumerGroupByGroupIdRequest) (_result *QueryConsumerGroupByGroupIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryConsumerGroupByGroupIdResponse{}
	_body, _err := client.QueryConsumerGroupByGroupIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryConsumerGroupListWithOptions(request *QueryConsumerGroupListRequest, runtime *util.RuntimeOptions) (_result *QueryConsumerGroupListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryConsumerGroupListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryConsumerGroupList"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryConsumerGroupList(request *QueryConsumerGroupListRequest) (_result *QueryConsumerGroupListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryConsumerGroupListResponse{}
	_body, _err := client.QueryConsumerGroupListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryConsumerGroupStatusWithOptions(request *QueryConsumerGroupStatusRequest, runtime *util.RuntimeOptions) (_result *QueryConsumerGroupStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryConsumerGroupStatusResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryConsumerGroupStatus"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryConsumerGroupStatus(request *QueryConsumerGroupStatusRequest) (_result *QueryConsumerGroupStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryConsumerGroupStatusResponse{}
	_body, _err := client.QueryConsumerGroupStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDetailSceneRuleLogWithOptions(request *QueryDetailSceneRuleLogRequest, runtime *util.RuntimeOptions) (_result *QueryDetailSceneRuleLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDetailSceneRuleLogResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDetailSceneRuleLog"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDetailSceneRuleLog(request *QueryDetailSceneRuleLogRequest) (_result *QueryDetailSceneRuleLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDetailSceneRuleLogResponse{}
	_body, _err := client.QueryDetailSceneRuleLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceWithOptions(request *QueryDeviceRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDevice"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDevice(request *QueryDeviceRequest) (_result *QueryDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceResponse{}
	_body, _err := client.QueryDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceBySQLWithOptions(request *QueryDeviceBySQLRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceBySQLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceBySQLResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceBySQL"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceBySQL(request *QueryDeviceBySQLRequest) (_result *QueryDeviceBySQLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceBySQLResponse{}
	_body, _err := client.QueryDeviceBySQLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceByStatusWithOptions(request *QueryDeviceByStatusRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceByStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceByStatusResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceByStatus"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceByStatus(request *QueryDeviceByStatusRequest) (_result *QueryDeviceByStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceByStatusResponse{}
	_body, _err := client.QueryDeviceByStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceByTagsWithOptions(request *QueryDeviceByTagsRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceByTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceByTagsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceByTags"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceByTags(request *QueryDeviceByTagsRequest) (_result *QueryDeviceByTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceByTagsResponse{}
	_body, _err := client.QueryDeviceByTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceCertWithOptions(request *QueryDeviceCertRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceCertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceCertResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceCert"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceCert(request *QueryDeviceCertRequest) (_result *QueryDeviceCertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceCertResponse{}
	_body, _err := client.QueryDeviceCertWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceDesiredPropertyWithOptions(request *QueryDeviceDesiredPropertyRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceDesiredPropertyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceDesiredPropertyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceDesiredProperty"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceDesiredProperty(request *QueryDeviceDesiredPropertyRequest) (_result *QueryDeviceDesiredPropertyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceDesiredPropertyResponse{}
	_body, _err := client.QueryDeviceDesiredPropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceDetailWithOptions(request *QueryDeviceDetailRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceDetailResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceDetail"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceDetail(request *QueryDeviceDetailRequest) (_result *QueryDeviceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceDetailResponse{}
	_body, _err := client.QueryDeviceDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceDistributeDetailWithOptions(request *QueryDeviceDistributeDetailRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceDistributeDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceDistributeDetailResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceDistributeDetail"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceDistributeDetail(request *QueryDeviceDistributeDetailRequest) (_result *QueryDeviceDistributeDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceDistributeDetailResponse{}
	_body, _err := client.QueryDeviceDistributeDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceDistributeJobWithOptions(request *QueryDeviceDistributeJobRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceDistributeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceDistributeJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceDistributeJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceDistributeJob(request *QueryDeviceDistributeJobRequest) (_result *QueryDeviceDistributeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceDistributeJobResponse{}
	_body, _err := client.QueryDeviceDistributeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceEventDataWithOptions(request *QueryDeviceEventDataRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceEventDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceEventDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceEventData"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceEventData(request *QueryDeviceEventDataRequest) (_result *QueryDeviceEventDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceEventDataResponse{}
	_body, _err := client.QueryDeviceEventDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceFileWithOptions(request *QueryDeviceFileRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceFileResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceFile"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceFile(request *QueryDeviceFileRequest) (_result *QueryDeviceFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceFileResponse{}
	_body, _err := client.QueryDeviceFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceFileListWithOptions(request *QueryDeviceFileListRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceFileListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceFileListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceFileList"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceFileList(request *QueryDeviceFileListRequest) (_result *QueryDeviceFileListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceFileListResponse{}
	_body, _err := client.QueryDeviceFileListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceGroupByDeviceWithOptions(request *QueryDeviceGroupByDeviceRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceGroupByDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceGroupByDeviceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceGroupByDevice"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceGroupByDevice(request *QueryDeviceGroupByDeviceRequest) (_result *QueryDeviceGroupByDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceGroupByDeviceResponse{}
	_body, _err := client.QueryDeviceGroupByDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceGroupByTagsWithOptions(request *QueryDeviceGroupByTagsRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceGroupByTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceGroupByTagsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceGroupByTags"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceGroupByTags(request *QueryDeviceGroupByTagsRequest) (_result *QueryDeviceGroupByTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceGroupByTagsResponse{}
	_body, _err := client.QueryDeviceGroupByTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceGroupInfoWithOptions(request *QueryDeviceGroupInfoRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceGroupInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceGroupInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceGroupInfo"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceGroupInfo(request *QueryDeviceGroupInfoRequest) (_result *QueryDeviceGroupInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceGroupInfoResponse{}
	_body, _err := client.QueryDeviceGroupInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceGroupListWithOptions(request *QueryDeviceGroupListRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceGroupListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceGroupListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceGroupList"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceGroupList(request *QueryDeviceGroupListRequest) (_result *QueryDeviceGroupListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceGroupListResponse{}
	_body, _err := client.QueryDeviceGroupListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceGroupTagListWithOptions(request *QueryDeviceGroupTagListRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceGroupTagListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceGroupTagListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceGroupTagList"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceGroupTagList(request *QueryDeviceGroupTagListRequest) (_result *QueryDeviceGroupTagListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceGroupTagListResponse{}
	_body, _err := client.QueryDeviceGroupTagListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceListByDeviceGroupWithOptions(request *QueryDeviceListByDeviceGroupRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceListByDeviceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceListByDeviceGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceListByDeviceGroup"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceListByDeviceGroup(request *QueryDeviceListByDeviceGroupRequest) (_result *QueryDeviceListByDeviceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceListByDeviceGroupResponse{}
	_body, _err := client.QueryDeviceListByDeviceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceOriginalEventDataWithOptions(request *QueryDeviceOriginalEventDataRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceOriginalEventDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceOriginalEventDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceOriginalEventData"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceOriginalEventData(request *QueryDeviceOriginalEventDataRequest) (_result *QueryDeviceOriginalEventDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceOriginalEventDataResponse{}
	_body, _err := client.QueryDeviceOriginalEventDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceOriginalPropertyDataWithOptions(request *QueryDeviceOriginalPropertyDataRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceOriginalPropertyDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceOriginalPropertyDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceOriginalPropertyData"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceOriginalPropertyData(request *QueryDeviceOriginalPropertyDataRequest) (_result *QueryDeviceOriginalPropertyDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceOriginalPropertyDataResponse{}
	_body, _err := client.QueryDeviceOriginalPropertyDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceOriginalPropertyStatusWithOptions(request *QueryDeviceOriginalPropertyStatusRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceOriginalPropertyStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceOriginalPropertyStatusResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceOriginalPropertyStatus"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceOriginalPropertyStatus(request *QueryDeviceOriginalPropertyStatusRequest) (_result *QueryDeviceOriginalPropertyStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceOriginalPropertyStatusResponse{}
	_body, _err := client.QueryDeviceOriginalPropertyStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceOriginalServiceDataWithOptions(request *QueryDeviceOriginalServiceDataRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceOriginalServiceDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceOriginalServiceDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceOriginalServiceData"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceOriginalServiceData(request *QueryDeviceOriginalServiceDataRequest) (_result *QueryDeviceOriginalServiceDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceOriginalServiceDataResponse{}
	_body, _err := client.QueryDeviceOriginalServiceDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDevicePropWithOptions(request *QueryDevicePropRequest, runtime *util.RuntimeOptions) (_result *QueryDevicePropResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDevicePropResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceProp"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceProp(request *QueryDevicePropRequest) (_result *QueryDevicePropResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDevicePropResponse{}
	_body, _err := client.QueryDevicePropWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDevicePropertiesDataWithOptions(request *QueryDevicePropertiesDataRequest, runtime *util.RuntimeOptions) (_result *QueryDevicePropertiesDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDevicePropertiesDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDevicePropertiesData"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDevicePropertiesData(request *QueryDevicePropertiesDataRequest) (_result *QueryDevicePropertiesDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDevicePropertiesDataResponse{}
	_body, _err := client.QueryDevicePropertiesDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDevicePropertyDataWithOptions(request *QueryDevicePropertyDataRequest, runtime *util.RuntimeOptions) (_result *QueryDevicePropertyDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDevicePropertyDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDevicePropertyData"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDevicePropertyData(request *QueryDevicePropertyDataRequest) (_result *QueryDevicePropertyDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDevicePropertyDataResponse{}
	_body, _err := client.QueryDevicePropertyDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDevicePropertyStatusWithOptions(request *QueryDevicePropertyStatusRequest, runtime *util.RuntimeOptions) (_result *QueryDevicePropertyStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDevicePropertyStatusResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDevicePropertyStatus"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDevicePropertyStatus(request *QueryDevicePropertyStatusRequest) (_result *QueryDevicePropertyStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDevicePropertyStatusResponse{}
	_body, _err := client.QueryDevicePropertyStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceServiceDataWithOptions(request *QueryDeviceServiceDataRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceServiceDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceServiceDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceServiceData"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceServiceData(request *QueryDeviceServiceDataRequest) (_result *QueryDeviceServiceDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceServiceDataResponse{}
	_body, _err := client.QueryDeviceServiceDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryDeviceStatisticsWithOptions(request *QueryDeviceStatisticsRequest, runtime *util.RuntimeOptions) (_result *QueryDeviceStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryDeviceStatisticsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryDeviceStatistics"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryDeviceStatistics(request *QueryDeviceStatisticsRequest) (_result *QueryDeviceStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDeviceStatisticsResponse{}
	_body, _err := client.QueryDeviceStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeDriverWithOptions(request *QueryEdgeDriverRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryEdgeDriverResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryEdgeDriver"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeDriver(request *QueryEdgeDriverRequest) (_result *QueryEdgeDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeDriverResponse{}
	_body, _err := client.QueryEdgeDriverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeDriverVersionWithOptions(request *QueryEdgeDriverVersionRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeDriverVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryEdgeDriverVersionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryEdgeDriverVersion"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeDriverVersion(request *QueryEdgeDriverVersionRequest) (_result *QueryEdgeDriverVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeDriverVersionResponse{}
	_body, _err := client.QueryEdgeDriverVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeInstanceWithOptions(request *QueryEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryEdgeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryEdgeInstance"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeInstance(request *QueryEdgeInstanceRequest) (_result *QueryEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeInstanceResponse{}
	_body, _err := client.QueryEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeInstanceChannelWithOptions(request *QueryEdgeInstanceChannelRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeInstanceChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryEdgeInstanceChannelResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryEdgeInstanceChannel"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeInstanceChannel(request *QueryEdgeInstanceChannelRequest) (_result *QueryEdgeInstanceChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeInstanceChannelResponse{}
	_body, _err := client.QueryEdgeInstanceChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeInstanceDeviceWithOptions(request *QueryEdgeInstanceDeviceRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeInstanceDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryEdgeInstanceDeviceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryEdgeInstanceDevice"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeInstanceDevice(request *QueryEdgeInstanceDeviceRequest) (_result *QueryEdgeInstanceDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeInstanceDeviceResponse{}
	_body, _err := client.QueryEdgeInstanceDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeInstanceDeviceByDriverWithOptions(request *QueryEdgeInstanceDeviceByDriverRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeInstanceDeviceByDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryEdgeInstanceDeviceByDriverResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryEdgeInstanceDeviceByDriver"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeInstanceDeviceByDriver(request *QueryEdgeInstanceDeviceByDriverRequest) (_result *QueryEdgeInstanceDeviceByDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeInstanceDeviceByDriverResponse{}
	_body, _err := client.QueryEdgeInstanceDeviceByDriverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeInstanceDriverWithOptions(request *QueryEdgeInstanceDriverRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeInstanceDriverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryEdgeInstanceDriverResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryEdgeInstanceDriver"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeInstanceDriver(request *QueryEdgeInstanceDriverRequest) (_result *QueryEdgeInstanceDriverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeInstanceDriverResponse{}
	_body, _err := client.QueryEdgeInstanceDriverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeInstanceGatewayWithOptions(request *QueryEdgeInstanceGatewayRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeInstanceGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryEdgeInstanceGatewayResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryEdgeInstanceGateway"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeInstanceGateway(request *QueryEdgeInstanceGatewayRequest) (_result *QueryEdgeInstanceGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeInstanceGatewayResponse{}
	_body, _err := client.QueryEdgeInstanceGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeInstanceHistoricDeploymentWithOptions(request *QueryEdgeInstanceHistoricDeploymentRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeInstanceHistoricDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryEdgeInstanceHistoricDeploymentResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryEdgeInstanceHistoricDeployment"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeInstanceHistoricDeployment(request *QueryEdgeInstanceHistoricDeploymentRequest) (_result *QueryEdgeInstanceHistoricDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeInstanceHistoricDeploymentResponse{}
	_body, _err := client.QueryEdgeInstanceHistoricDeploymentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEdgeInstanceSceneRuleWithOptions(request *QueryEdgeInstanceSceneRuleRequest, runtime *util.RuntimeOptions) (_result *QueryEdgeInstanceSceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryEdgeInstanceSceneRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryEdgeInstanceSceneRule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEdgeInstanceSceneRule(request *QueryEdgeInstanceSceneRuleRequest) (_result *QueryEdgeInstanceSceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEdgeInstanceSceneRuleResponse{}
	_body, _err := client.QueryEdgeInstanceSceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryJobWithOptions(request *QueryJobRequest, runtime *util.RuntimeOptions) (_result *QueryJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryJob(request *QueryJobRequest) (_result *QueryJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryJobResponse{}
	_body, _err := client.QueryJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryJobStatisticsWithOptions(request *QueryJobStatisticsRequest, runtime *util.RuntimeOptions) (_result *QueryJobStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &QueryJobStatisticsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryJobStatistics"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryJobStatistics(request *QueryJobStatisticsRequest) (_result *QueryJobStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryJobStatisticsResponse{}
	_body, _err := client.QueryJobStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryLoRaJoinPermissionsWithOptions(request *QueryLoRaJoinPermissionsRequest, runtime *util.RuntimeOptions) (_result *QueryLoRaJoinPermissionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryLoRaJoinPermissionsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryLoRaJoinPermissions"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryLoRaJoinPermissions(request *QueryLoRaJoinPermissionsRequest) (_result *QueryLoRaJoinPermissionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryLoRaJoinPermissionsResponse{}
	_body, _err := client.QueryLoRaJoinPermissionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryOTAFirmwareWithOptions(request *QueryOTAFirmwareRequest, runtime *util.RuntimeOptions) (_result *QueryOTAFirmwareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryOTAFirmwareResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryOTAFirmware"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryOTAFirmware(request *QueryOTAFirmwareRequest) (_result *QueryOTAFirmwareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryOTAFirmwareResponse{}
	_body, _err := client.QueryOTAFirmwareWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryOTAJobWithOptions(request *QueryOTAJobRequest, runtime *util.RuntimeOptions) (_result *QueryOTAJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryOTAJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryOTAJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryOTAJob(request *QueryOTAJobRequest) (_result *QueryOTAJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryOTAJobResponse{}
	_body, _err := client.QueryOTAJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryPageByApplyIdWithOptions(request *QueryPageByApplyIdRequest, runtime *util.RuntimeOptions) (_result *QueryPageByApplyIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryPageByApplyIdResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryPageByApplyId"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryPageByApplyId(request *QueryPageByApplyIdRequest) (_result *QueryPageByApplyIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPageByApplyIdResponse{}
	_body, _err := client.QueryPageByApplyIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryProductWithOptions(request *QueryProductRequest, runtime *util.RuntimeOptions) (_result *QueryProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryProductResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryProduct"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryProduct(request *QueryProductRequest) (_result *QueryProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryProductResponse{}
	_body, _err := client.QueryProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryProductCertInfoWithOptions(request *QueryProductCertInfoRequest, runtime *util.RuntimeOptions) (_result *QueryProductCertInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryProductCertInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryProductCertInfo"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryProductCertInfo(request *QueryProductCertInfoRequest) (_result *QueryProductCertInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryProductCertInfoResponse{}
	_body, _err := client.QueryProductCertInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryProductListWithOptions(request *QueryProductListRequest, runtime *util.RuntimeOptions) (_result *QueryProductListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryProductListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryProductList"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryProductList(request *QueryProductListRequest) (_result *QueryProductListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryProductListResponse{}
	_body, _err := client.QueryProductListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryProductTopicWithOptions(request *QueryProductTopicRequest, runtime *util.RuntimeOptions) (_result *QueryProductTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryProductTopicResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryProductTopic"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryProductTopic(request *QueryProductTopicRequest) (_result *QueryProductTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryProductTopicResponse{}
	_body, _err := client.QueryProductTopicWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySceneRuleWithOptions(request *QuerySceneRuleRequest, runtime *util.RuntimeOptions) (_result *QuerySceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QuerySceneRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QuerySceneRule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySceneRule(request *QuerySceneRuleRequest) (_result *QuerySceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySceneRuleResponse{}
	_body, _err := client.QuerySceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySubscribeRelationWithOptions(request *QuerySubscribeRelationRequest, runtime *util.RuntimeOptions) (_result *QuerySubscribeRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QuerySubscribeRelationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QuerySubscribeRelation"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySubscribeRelation(request *QuerySubscribeRelationRequest) (_result *QuerySubscribeRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySubscribeRelationResponse{}
	_body, _err := client.QuerySubscribeRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySummarySceneRuleLogWithOptions(request *QuerySummarySceneRuleLogRequest, runtime *util.RuntimeOptions) (_result *QuerySummarySceneRuleLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QuerySummarySceneRuleLogResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QuerySummarySceneRuleLog"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySummarySceneRuleLog(request *QuerySummarySceneRuleLogRequest) (_result *QuerySummarySceneRuleLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySummarySceneRuleLogResponse{}
	_body, _err := client.QuerySummarySceneRuleLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySuperDeviceGroupWithOptions(request *QuerySuperDeviceGroupRequest, runtime *util.RuntimeOptions) (_result *QuerySuperDeviceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QuerySuperDeviceGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QuerySuperDeviceGroup"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySuperDeviceGroup(request *QuerySuperDeviceGroupRequest) (_result *QuerySuperDeviceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySuperDeviceGroupResponse{}
	_body, _err := client.QuerySuperDeviceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTaskWithOptions(request *QueryTaskRequest, runtime *util.RuntimeOptions) (_result *QueryTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryTaskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryTask"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTask(request *QueryTaskRequest) (_result *QueryTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTaskResponse{}
	_body, _err := client.QueryTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryThingModelWithOptions(request *QueryThingModelRequest, runtime *util.RuntimeOptions) (_result *QueryThingModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryThingModelResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryThingModel"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryThingModel(request *QueryThingModelRequest) (_result *QueryThingModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryThingModelResponse{}
	_body, _err := client.QueryThingModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryThingModelExtendConfigWithOptions(request *QueryThingModelExtendConfigRequest, runtime *util.RuntimeOptions) (_result *QueryThingModelExtendConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryThingModelExtendConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryThingModelExtendConfig"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryThingModelExtendConfig(request *QueryThingModelExtendConfigRequest) (_result *QueryThingModelExtendConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryThingModelExtendConfigResponse{}
	_body, _err := client.QueryThingModelExtendConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryThingModelExtendConfigPublishedWithOptions(request *QueryThingModelExtendConfigPublishedRequest, runtime *util.RuntimeOptions) (_result *QueryThingModelExtendConfigPublishedResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryThingModelExtendConfigPublishedResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryThingModelExtendConfigPublished"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryThingModelExtendConfigPublished(request *QueryThingModelExtendConfigPublishedRequest) (_result *QueryThingModelExtendConfigPublishedResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryThingModelExtendConfigPublishedResponse{}
	_body, _err := client.QueryThingModelExtendConfigPublishedWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryThingModelPublishedWithOptions(request *QueryThingModelPublishedRequest, runtime *util.RuntimeOptions) (_result *QueryThingModelPublishedResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryThingModelPublishedResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryThingModelPublished"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryThingModelPublished(request *QueryThingModelPublishedRequest) (_result *QueryThingModelPublishedResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryThingModelPublishedResponse{}
	_body, _err := client.QueryThingModelPublishedWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTopicReverseRouteTableWithOptions(request *QueryTopicReverseRouteTableRequest, runtime *util.RuntimeOptions) (_result *QueryTopicReverseRouteTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryTopicReverseRouteTableResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryTopicReverseRouteTable"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTopicReverseRouteTable(request *QueryTopicReverseRouteTableRequest) (_result *QueryTopicReverseRouteTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTopicReverseRouteTableResponse{}
	_body, _err := client.QueryTopicReverseRouteTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTopicRouteTableWithOptions(request *QueryTopicRouteTableRequest, runtime *util.RuntimeOptions) (_result *QueryTopicRouteTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryTopicRouteTableResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryTopicRouteTable"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTopicRouteTable(request *QueryTopicRouteTableRequest) (_result *QueryTopicRouteTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTopicRouteTableResponse{}
	_body, _err := client.QueryTopicRouteTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RegisterDeviceWithOptions(request *RegisterDeviceRequest, runtime *util.RuntimeOptions) (_result *RegisterDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RegisterDeviceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RegisterDevice"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RegisterDevice(request *RegisterDeviceRequest) (_result *RegisterDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RegisterDeviceResponse{}
	_body, _err := client.RegisterDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseEdgeDriverVersionWithOptions(request *ReleaseEdgeDriverVersionRequest, runtime *util.RuntimeOptions) (_result *ReleaseEdgeDriverVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReleaseEdgeDriverVersionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReleaseEdgeDriverVersion"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseEdgeDriverVersion(request *ReleaseEdgeDriverVersionRequest) (_result *ReleaseEdgeDriverVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseEdgeDriverVersionResponse{}
	_body, _err := client.ReleaseEdgeDriverVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveThingTopoWithOptions(request *RemoveThingTopoRequest, runtime *util.RuntimeOptions) (_result *RemoveThingTopoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RemoveThingTopoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RemoveThingTopo"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveThingTopo(request *RemoveThingTopoRequest) (_result *RemoveThingTopoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveThingTopoResponse{}
	_body, _err := client.RemoveThingTopoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReplaceEdgeInstanceGatewayWithOptions(request *ReplaceEdgeInstanceGatewayRequest, runtime *util.RuntimeOptions) (_result *ReplaceEdgeInstanceGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReplaceEdgeInstanceGatewayResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReplaceEdgeInstanceGateway"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReplaceEdgeInstanceGateway(request *ReplaceEdgeInstanceGatewayRequest) (_result *ReplaceEdgeInstanceGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReplaceEdgeInstanceGatewayResponse{}
	_body, _err := client.ReplaceEdgeInstanceGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetConsumerGroupPositionWithOptions(request *ResetConsumerGroupPositionRequest, runtime *util.RuntimeOptions) (_result *ResetConsumerGroupPositionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ResetConsumerGroupPositionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ResetConsumerGroupPosition"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetConsumerGroupPosition(request *ResetConsumerGroupPositionRequest) (_result *ResetConsumerGroupPositionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetConsumerGroupPositionResponse{}
	_body, _err := client.ResetConsumerGroupPositionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetThingWithOptions(request *ResetThingRequest, runtime *util.RuntimeOptions) (_result *ResetThingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ResetThingResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ResetThing"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetThing(request *ResetThingRequest) (_result *ResetThingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetThingResponse{}
	_body, _err := client.ResetThingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RRpcWithOptions(request *RRpcRequest, runtime *util.RuntimeOptions) (_result *RRpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RRpcResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RRpc"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RRpc(request *RRpcRequest) (_result *RRpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RRpcResponse{}
	_body, _err := client.RRpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveDevicePropWithOptions(request *SaveDevicePropRequest, runtime *util.RuntimeOptions) (_result *SaveDevicePropResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SaveDevicePropResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SaveDeviceProp"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveDeviceProp(request *SaveDevicePropRequest) (_result *SaveDevicePropResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveDevicePropResponse{}
	_body, _err := client.SaveDevicePropWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetDeviceDesiredPropertyWithOptions(request *SetDeviceDesiredPropertyRequest, runtime *util.RuntimeOptions) (_result *SetDeviceDesiredPropertyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetDeviceDesiredPropertyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetDeviceDesiredProperty"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetDeviceDesiredProperty(request *SetDeviceDesiredPropertyRequest) (_result *SetDeviceDesiredPropertyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDeviceDesiredPropertyResponse{}
	_body, _err := client.SetDeviceDesiredPropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetDeviceGroupTagsWithOptions(request *SetDeviceGroupTagsRequest, runtime *util.RuntimeOptions) (_result *SetDeviceGroupTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetDeviceGroupTagsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetDeviceGroupTags"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetDeviceGroupTags(request *SetDeviceGroupTagsRequest) (_result *SetDeviceGroupTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDeviceGroupTagsResponse{}
	_body, _err := client.SetDeviceGroupTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetDevicePropertyWithOptions(request *SetDevicePropertyRequest, runtime *util.RuntimeOptions) (_result *SetDevicePropertyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetDevicePropertyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetDeviceProperty"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetDeviceProperty(request *SetDevicePropertyRequest) (_result *SetDevicePropertyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDevicePropertyResponse{}
	_body, _err := client.SetDevicePropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetDevicesPropertyWithOptions(request *SetDevicesPropertyRequest, runtime *util.RuntimeOptions) (_result *SetDevicesPropertyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetDevicesPropertyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetDevicesProperty"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetDevicesProperty(request *SetDevicesPropertyRequest) (_result *SetDevicesPropertyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDevicesPropertyResponse{}
	_body, _err := client.SetDevicesPropertyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetEdgeInstanceDriverConfigsWithOptions(request *SetEdgeInstanceDriverConfigsRequest, runtime *util.RuntimeOptions) (_result *SetEdgeInstanceDriverConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetEdgeInstanceDriverConfigsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetEdgeInstanceDriverConfigs"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetEdgeInstanceDriverConfigs(request *SetEdgeInstanceDriverConfigsRequest) (_result *SetEdgeInstanceDriverConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetEdgeInstanceDriverConfigsResponse{}
	_body, _err := client.SetEdgeInstanceDriverConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetProductCertInfoWithOptions(request *SetProductCertInfoRequest, runtime *util.RuntimeOptions) (_result *SetProductCertInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetProductCertInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetProductCertInfo"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetProductCertInfo(request *SetProductCertInfoRequest) (_result *SetProductCertInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetProductCertInfoResponse{}
	_body, _err := client.SetProductCertInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SpeechByCombinationWithOptions(request *SpeechByCombinationRequest, runtime *util.RuntimeOptions) (_result *SpeechByCombinationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SpeechByCombinationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SpeechByCombination"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SpeechByCombination(request *SpeechByCombinationRequest) (_result *SpeechByCombinationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SpeechByCombinationResponse{}
	_body, _err := client.SpeechByCombinationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartCpuWithOptions(request *StartCpuRequest, runtime *util.RuntimeOptions) (_result *StartCpuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StartCpuResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StartCpu"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartCpu(request *StartCpuRequest) (_result *StartCpuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartCpuResponse{}
	_body, _err := client.StartCpuWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartRuleWithOptions(request *StartRuleRequest, runtime *util.RuntimeOptions) (_result *StartRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StartRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StartRule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartRule(request *StartRuleRequest) (_result *StartRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartRuleResponse{}
	_body, _err := client.StartRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopRuleWithOptions(request *StopRuleRequest, runtime *util.RuntimeOptions) (_result *StopRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StopRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StopRule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopRule(request *StopRuleRequest) (_result *StopRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopRuleResponse{}
	_body, _err := client.StopRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TriggerSceneRuleWithOptions(request *TriggerSceneRuleRequest, runtime *util.RuntimeOptions) (_result *TriggerSceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &TriggerSceneRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("TriggerSceneRule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TriggerSceneRule(request *TriggerSceneRuleRequest) (_result *TriggerSceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TriggerSceneRuleResponse{}
	_body, _err := client.TriggerSceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindApplicationFromEdgeInstanceWithOptions(request *UnbindApplicationFromEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *UnbindApplicationFromEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UnbindApplicationFromEdgeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UnbindApplicationFromEdgeInstance"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindApplicationFromEdgeInstance(request *UnbindApplicationFromEdgeInstanceRequest) (_result *UnbindApplicationFromEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindApplicationFromEdgeInstanceResponse{}
	_body, _err := client.UnbindApplicationFromEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindDriverFromEdgeInstanceWithOptions(request *UnbindDriverFromEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *UnbindDriverFromEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UnbindDriverFromEdgeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UnbindDriverFromEdgeInstance"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindDriverFromEdgeInstance(request *UnbindDriverFromEdgeInstanceRequest) (_result *UnbindDriverFromEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindDriverFromEdgeInstanceResponse{}
	_body, _err := client.UnbindDriverFromEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindRoleFromEdgeInstanceWithOptions(request *UnbindRoleFromEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *UnbindRoleFromEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UnbindRoleFromEdgeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UnbindRoleFromEdgeInstance"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindRoleFromEdgeInstance(request *UnbindRoleFromEdgeInstanceRequest) (_result *UnbindRoleFromEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindRoleFromEdgeInstanceResponse{}
	_body, _err := client.UnbindRoleFromEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindSceneRuleFromEdgeInstanceWithOptions(request *UnbindSceneRuleFromEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *UnbindSceneRuleFromEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UnbindSceneRuleFromEdgeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UnbindSceneRuleFromEdgeInstance"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindSceneRuleFromEdgeInstance(request *UnbindSceneRuleFromEdgeInstanceRequest) (_result *UnbindSceneRuleFromEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindSceneRuleFromEdgeInstanceResponse{}
	_body, _err := client.UnbindSceneRuleFromEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateConsumerGroupWithOptions(request *UpdateConsumerGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateConsumerGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateConsumerGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateConsumerGroup"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateConsumerGroup(request *UpdateConsumerGroupRequest) (_result *UpdateConsumerGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateConsumerGroupResponse{}
	_body, _err := client.UpdateConsumerGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDeviceGroupWithOptions(request *UpdateDeviceGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateDeviceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateDeviceGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateDeviceGroup"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDeviceGroup(request *UpdateDeviceGroupRequest) (_result *UpdateDeviceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDeviceGroupResponse{}
	_body, _err := client.UpdateDeviceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDeviceShadowWithOptions(request *UpdateDeviceShadowRequest, runtime *util.RuntimeOptions) (_result *UpdateDeviceShadowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateDeviceShadowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateDeviceShadow"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDeviceShadow(request *UpdateDeviceShadowRequest) (_result *UpdateDeviceShadowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDeviceShadowResponse{}
	_body, _err := client.UpdateDeviceShadowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateEdgeDriverVersionWithOptions(request *UpdateEdgeDriverVersionRequest, runtime *util.RuntimeOptions) (_result *UpdateEdgeDriverVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateEdgeDriverVersionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateEdgeDriverVersion"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateEdgeDriverVersion(request *UpdateEdgeDriverVersionRequest) (_result *UpdateEdgeDriverVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEdgeDriverVersionResponse{}
	_body, _err := client.UpdateEdgeDriverVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateEdgeInstanceWithOptions(request *UpdateEdgeInstanceRequest, runtime *util.RuntimeOptions) (_result *UpdateEdgeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateEdgeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateEdgeInstance"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateEdgeInstance(request *UpdateEdgeInstanceRequest) (_result *UpdateEdgeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEdgeInstanceResponse{}
	_body, _err := client.UpdateEdgeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateEdgeInstanceChannelWithOptions(request *UpdateEdgeInstanceChannelRequest, runtime *util.RuntimeOptions) (_result *UpdateEdgeInstanceChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateEdgeInstanceChannelResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateEdgeInstanceChannel"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateEdgeInstanceChannel(request *UpdateEdgeInstanceChannelRequest) (_result *UpdateEdgeInstanceChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEdgeInstanceChannelResponse{}
	_body, _err := client.UpdateEdgeInstanceChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateJobWithOptions(request *UpdateJobRequest, runtime *util.RuntimeOptions) (_result *UpdateJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateJob"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateJob(request *UpdateJobRequest) (_result *UpdateJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateJobResponse{}
	_body, _err := client.UpdateJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateOTAModuleWithOptions(request *UpdateOTAModuleRequest, runtime *util.RuntimeOptions) (_result *UpdateOTAModuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateOTAModuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateOTAModule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateOTAModule(request *UpdateOTAModuleRequest) (_result *UpdateOTAModuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateOTAModuleResponse{}
	_body, _err := client.UpdateOTAModuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateProductWithOptions(request *UpdateProductRequest, runtime *util.RuntimeOptions) (_result *UpdateProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateProductResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateProduct"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateProduct(request *UpdateProductRequest) (_result *UpdateProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateProductResponse{}
	_body, _err := client.UpdateProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateProductFilterConfigWithOptions(request *UpdateProductFilterConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateProductFilterConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateProductFilterConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateProductFilterConfig"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateProductFilterConfig(request *UpdateProductFilterConfigRequest) (_result *UpdateProductFilterConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateProductFilterConfigResponse{}
	_body, _err := client.UpdateProductFilterConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateProductTagsWithOptions(request *UpdateProductTagsRequest, runtime *util.RuntimeOptions) (_result *UpdateProductTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateProductTagsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateProductTags"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateProductTags(request *UpdateProductTagsRequest) (_result *UpdateProductTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateProductTagsResponse{}
	_body, _err := client.UpdateProductTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateProductTopicWithOptions(request *UpdateProductTopicRequest, runtime *util.RuntimeOptions) (_result *UpdateProductTopicResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateProductTopicResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateProductTopic"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateProductTopic(request *UpdateProductTopicRequest) (_result *UpdateProductTopicResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateProductTopicResponse{}
	_body, _err := client.UpdateProductTopicWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateRuleWithOptions(request *UpdateRuleRequest, runtime *util.RuntimeOptions) (_result *UpdateRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateRule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateRule(request *UpdateRuleRequest) (_result *UpdateRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateRuleResponse{}
	_body, _err := client.UpdateRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateRuleActionWithOptions(request *UpdateRuleActionRequest, runtime *util.RuntimeOptions) (_result *UpdateRuleActionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateRuleActionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateRuleAction"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateRuleAction(request *UpdateRuleActionRequest) (_result *UpdateRuleActionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateRuleActionResponse{}
	_body, _err := client.UpdateRuleActionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSceneRuleWithOptions(request *UpdateSceneRuleRequest, runtime *util.RuntimeOptions) (_result *UpdateSceneRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateSceneRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateSceneRule"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSceneRule(request *UpdateSceneRuleRequest) (_result *UpdateSceneRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSceneRuleResponse{}
	_body, _err := client.UpdateSceneRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSubscribeRelationWithOptions(request *UpdateSubscribeRelationRequest, runtime *util.RuntimeOptions) (_result *UpdateSubscribeRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateSubscribeRelationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateSubscribeRelation"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSubscribeRelation(request *UpdateSubscribeRelationRequest) (_result *UpdateSubscribeRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSubscribeRelationResponse{}
	_body, _err := client.UpdateSubscribeRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateThingModelWithOptions(request *UpdateThingModelRequest, runtime *util.RuntimeOptions) (_result *UpdateThingModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateThingModelResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateThingModel"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateThingModel(request *UpdateThingModelRequest) (_result *UpdateThingModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateThingModelResponse{}
	_body, _err := client.UpdateThingModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateThingModelValidationConfigWithOptions(request *UpdateThingModelValidationConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateThingModelValidationConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateThingModelValidationConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateThingModelValidationConfig"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateThingModelValidationConfig(request *UpdateThingModelValidationConfigRequest) (_result *UpdateThingModelValidationConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateThingModelValidationConfigResponse{}
	_body, _err := client.UpdateThingModelValidationConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateThingScriptWithOptions(request *UpdateThingScriptRequest, runtime *util.RuntimeOptions) (_result *UpdateThingScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateThingScriptResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateThingScript"), tea.String("2018-01-20"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateThingScript(request *UpdateThingScriptRequest) (_result *UpdateThingScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateThingScriptResponse{}
	_body, _err := client.UpdateThingScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
