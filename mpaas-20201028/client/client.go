// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AddMdsMiniConfigRequest struct {
	AppId                               *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMiniConfigAddJsonStr *string `json:"MpaasMappcenterMiniConfigAddJsonStr,omitempty" xml:"MpaasMappcenterMiniConfigAddJsonStr,omitempty"`
	TenantId                            *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                         *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s AddMdsMiniConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMdsMiniConfigRequest) GoString() string {
	return s.String()
}

func (s *AddMdsMiniConfigRequest) SetAppId(v string) *AddMdsMiniConfigRequest {
	s.AppId = &v
	return s
}

func (s *AddMdsMiniConfigRequest) SetMpaasMappcenterMiniConfigAddJsonStr(v string) *AddMdsMiniConfigRequest {
	s.MpaasMappcenterMiniConfigAddJsonStr = &v
	return s
}

func (s *AddMdsMiniConfigRequest) SetTenantId(v string) *AddMdsMiniConfigRequest {
	s.TenantId = &v
	return s
}

func (s *AddMdsMiniConfigRequest) SetWorkspaceId(v string) *AddMdsMiniConfigRequest {
	s.WorkspaceId = &v
	return s
}

type AddMdsMiniConfigResponseBody struct {
	RequestId     *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                    `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *AddMdsMiniConfigResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                    `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s AddMdsMiniConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMdsMiniConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddMdsMiniConfigResponseBody) SetRequestId(v string) *AddMdsMiniConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddMdsMiniConfigResponseBody) SetResultCode(v string) *AddMdsMiniConfigResponseBody {
	s.ResultCode = &v
	return s
}

func (s *AddMdsMiniConfigResponseBody) SetResultContent(v *AddMdsMiniConfigResponseBodyResultContent) *AddMdsMiniConfigResponseBody {
	s.ResultContent = v
	return s
}

func (s *AddMdsMiniConfigResponseBody) SetResultMessage(v string) *AddMdsMiniConfigResponseBody {
	s.ResultMessage = &v
	return s
}

type AddMdsMiniConfigResponseBodyResultContent struct {
	Data      *AddMdsMiniConfigResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddMdsMiniConfigResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s AddMdsMiniConfigResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *AddMdsMiniConfigResponseBodyResultContent) SetData(v *AddMdsMiniConfigResponseBodyResultContentData) *AddMdsMiniConfigResponseBodyResultContent {
	s.Data = v
	return s
}

func (s *AddMdsMiniConfigResponseBodyResultContent) SetRequestId(v string) *AddMdsMiniConfigResponseBodyResultContent {
	s.RequestId = &v
	return s
}

type AddMdsMiniConfigResponseBodyResultContentData struct {
	Content   *string `json:"Content,omitempty" xml:"Content,omitempty"`
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddMdsMiniConfigResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s AddMdsMiniConfigResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *AddMdsMiniConfigResponseBodyResultContentData) SetContent(v string) *AddMdsMiniConfigResponseBodyResultContentData {
	s.Content = &v
	return s
}

func (s *AddMdsMiniConfigResponseBodyResultContentData) SetErrorCode(v string) *AddMdsMiniConfigResponseBodyResultContentData {
	s.ErrorCode = &v
	return s
}

func (s *AddMdsMiniConfigResponseBodyResultContentData) SetRequestId(v string) *AddMdsMiniConfigResponseBodyResultContentData {
	s.RequestId = &v
	return s
}

func (s *AddMdsMiniConfigResponseBodyResultContentData) SetResultMsg(v string) *AddMdsMiniConfigResponseBodyResultContentData {
	s.ResultMsg = &v
	return s
}

func (s *AddMdsMiniConfigResponseBodyResultContentData) SetSuccess(v bool) *AddMdsMiniConfigResponseBodyResultContentData {
	s.Success = &v
	return s
}

type AddMdsMiniConfigResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddMdsMiniConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddMdsMiniConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMdsMiniConfigResponse) GoString() string {
	return s.String()
}

func (s *AddMdsMiniConfigResponse) SetHeaders(v map[string]*string) *AddMdsMiniConfigResponse {
	s.Headers = v
	return s
}

func (s *AddMdsMiniConfigResponse) SetStatusCode(v int32) *AddMdsMiniConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *AddMdsMiniConfigResponse) SetBody(v *AddMdsMiniConfigResponseBody) *AddMdsMiniConfigResponse {
	s.Body = v
	return s
}

type CancelPushSchedulerRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Type        *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	UniqueIds   *string `json:"UniqueIds,omitempty" xml:"UniqueIds,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CancelPushSchedulerRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelPushSchedulerRequest) GoString() string {
	return s.String()
}

func (s *CancelPushSchedulerRequest) SetAppId(v string) *CancelPushSchedulerRequest {
	s.AppId = &v
	return s
}

func (s *CancelPushSchedulerRequest) SetType(v int32) *CancelPushSchedulerRequest {
	s.Type = &v
	return s
}

func (s *CancelPushSchedulerRequest) SetUniqueIds(v string) *CancelPushSchedulerRequest {
	s.UniqueIds = &v
	return s
}

func (s *CancelPushSchedulerRequest) SetWorkspaceId(v string) *CancelPushSchedulerRequest {
	s.WorkspaceId = &v
	return s
}

type CancelPushSchedulerResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *string `json:"ResultContent,omitempty" xml:"ResultContent,omitempty"`
	ResultMessage *string `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CancelPushSchedulerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelPushSchedulerResponseBody) GoString() string {
	return s.String()
}

func (s *CancelPushSchedulerResponseBody) SetRequestId(v string) *CancelPushSchedulerResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelPushSchedulerResponseBody) SetResultCode(v string) *CancelPushSchedulerResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CancelPushSchedulerResponseBody) SetResultContent(v string) *CancelPushSchedulerResponseBody {
	s.ResultContent = &v
	return s
}

func (s *CancelPushSchedulerResponseBody) SetResultMessage(v string) *CancelPushSchedulerResponseBody {
	s.ResultMessage = &v
	return s
}

type CancelPushSchedulerResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CancelPushSchedulerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelPushSchedulerResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelPushSchedulerResponse) GoString() string {
	return s.String()
}

func (s *CancelPushSchedulerResponse) SetHeaders(v map[string]*string) *CancelPushSchedulerResponse {
	s.Headers = v
	return s
}

func (s *CancelPushSchedulerResponse) SetStatusCode(v int32) *CancelPushSchedulerResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelPushSchedulerResponse) SetBody(v *CancelPushSchedulerResponseBody) *CancelPushSchedulerResponse {
	s.Body = v
	return s
}

type ChangeMcubeMiniTaskStatusRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BizType     *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	PackageId   *int64  `json:"PackageId,omitempty" xml:"PackageId,omitempty"`
	TaskId      *int64  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskStatus  *int64  `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ChangeMcubeMiniTaskStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ChangeMcubeMiniTaskStatusRequest) GoString() string {
	return s.String()
}

func (s *ChangeMcubeMiniTaskStatusRequest) SetAppId(v string) *ChangeMcubeMiniTaskStatusRequest {
	s.AppId = &v
	return s
}

func (s *ChangeMcubeMiniTaskStatusRequest) SetBizType(v string) *ChangeMcubeMiniTaskStatusRequest {
	s.BizType = &v
	return s
}

func (s *ChangeMcubeMiniTaskStatusRequest) SetPackageId(v int64) *ChangeMcubeMiniTaskStatusRequest {
	s.PackageId = &v
	return s
}

func (s *ChangeMcubeMiniTaskStatusRequest) SetTaskId(v int64) *ChangeMcubeMiniTaskStatusRequest {
	s.TaskId = &v
	return s
}

func (s *ChangeMcubeMiniTaskStatusRequest) SetTaskStatus(v int64) *ChangeMcubeMiniTaskStatusRequest {
	s.TaskStatus = &v
	return s
}

func (s *ChangeMcubeMiniTaskStatusRequest) SetTenantId(v string) *ChangeMcubeMiniTaskStatusRequest {
	s.TenantId = &v
	return s
}

func (s *ChangeMcubeMiniTaskStatusRequest) SetWorkspaceId(v string) *ChangeMcubeMiniTaskStatusRequest {
	s.WorkspaceId = &v
	return s
}

type ChangeMcubeMiniTaskStatusResponseBody struct {
	ChangeMiniTaskStatusResult *ChangeMcubeMiniTaskStatusResponseBodyChangeMiniTaskStatusResult `json:"ChangeMiniTaskStatusResult,omitempty" xml:"ChangeMiniTaskStatusResult,omitempty" type:"Struct"`
	RequestId                  *string                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode                 *string                                                          `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage              *string                                                          `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ChangeMcubeMiniTaskStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ChangeMcubeMiniTaskStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ChangeMcubeMiniTaskStatusResponseBody) SetChangeMiniTaskStatusResult(v *ChangeMcubeMiniTaskStatusResponseBodyChangeMiniTaskStatusResult) *ChangeMcubeMiniTaskStatusResponseBody {
	s.ChangeMiniTaskStatusResult = v
	return s
}

func (s *ChangeMcubeMiniTaskStatusResponseBody) SetRequestId(v string) *ChangeMcubeMiniTaskStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *ChangeMcubeMiniTaskStatusResponseBody) SetResultCode(v string) *ChangeMcubeMiniTaskStatusResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ChangeMcubeMiniTaskStatusResponseBody) SetResultMessage(v string) *ChangeMcubeMiniTaskStatusResponseBody {
	s.ResultMessage = &v
	return s
}

type ChangeMcubeMiniTaskStatusResponseBodyChangeMiniTaskStatusResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ChangeMcubeMiniTaskStatusResponseBodyChangeMiniTaskStatusResult) String() string {
	return tea.Prettify(s)
}

func (s ChangeMcubeMiniTaskStatusResponseBodyChangeMiniTaskStatusResult) GoString() string {
	return s.String()
}

func (s *ChangeMcubeMiniTaskStatusResponseBodyChangeMiniTaskStatusResult) SetData(v string) *ChangeMcubeMiniTaskStatusResponseBodyChangeMiniTaskStatusResult {
	s.Data = &v
	return s
}

func (s *ChangeMcubeMiniTaskStatusResponseBodyChangeMiniTaskStatusResult) SetResultMsg(v string) *ChangeMcubeMiniTaskStatusResponseBodyChangeMiniTaskStatusResult {
	s.ResultMsg = &v
	return s
}

func (s *ChangeMcubeMiniTaskStatusResponseBodyChangeMiniTaskStatusResult) SetSuccess(v bool) *ChangeMcubeMiniTaskStatusResponseBodyChangeMiniTaskStatusResult {
	s.Success = &v
	return s
}

type ChangeMcubeMiniTaskStatusResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ChangeMcubeMiniTaskStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ChangeMcubeMiniTaskStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ChangeMcubeMiniTaskStatusResponse) GoString() string {
	return s.String()
}

func (s *ChangeMcubeMiniTaskStatusResponse) SetHeaders(v map[string]*string) *ChangeMcubeMiniTaskStatusResponse {
	s.Headers = v
	return s
}

func (s *ChangeMcubeMiniTaskStatusResponse) SetStatusCode(v int32) *ChangeMcubeMiniTaskStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ChangeMcubeMiniTaskStatusResponse) SetBody(v *ChangeMcubeMiniTaskStatusResponseBody) *ChangeMcubeMiniTaskStatusResponse {
	s.Body = v
	return s
}

type ChangeMcubeNebulaTaskStatusRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BizType     *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	PackageId   *string `json:"PackageId,omitempty" xml:"PackageId,omitempty"`
	TaskId      *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskStatus  *int32  `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ChangeMcubeNebulaTaskStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ChangeMcubeNebulaTaskStatusRequest) GoString() string {
	return s.String()
}

func (s *ChangeMcubeNebulaTaskStatusRequest) SetAppId(v string) *ChangeMcubeNebulaTaskStatusRequest {
	s.AppId = &v
	return s
}

func (s *ChangeMcubeNebulaTaskStatusRequest) SetBizType(v string) *ChangeMcubeNebulaTaskStatusRequest {
	s.BizType = &v
	return s
}

func (s *ChangeMcubeNebulaTaskStatusRequest) SetPackageId(v string) *ChangeMcubeNebulaTaskStatusRequest {
	s.PackageId = &v
	return s
}

func (s *ChangeMcubeNebulaTaskStatusRequest) SetTaskId(v string) *ChangeMcubeNebulaTaskStatusRequest {
	s.TaskId = &v
	return s
}

func (s *ChangeMcubeNebulaTaskStatusRequest) SetTaskStatus(v int32) *ChangeMcubeNebulaTaskStatusRequest {
	s.TaskStatus = &v
	return s
}

func (s *ChangeMcubeNebulaTaskStatusRequest) SetTenantId(v string) *ChangeMcubeNebulaTaskStatusRequest {
	s.TenantId = &v
	return s
}

func (s *ChangeMcubeNebulaTaskStatusRequest) SetWorkspaceId(v string) *ChangeMcubeNebulaTaskStatusRequest {
	s.WorkspaceId = &v
	return s
}

type ChangeMcubeNebulaTaskStatusResponseBody struct {
	ChangeMcubeNebulaTaskStatusResult *ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult `json:"ChangeMcubeNebulaTaskStatusResult,omitempty" xml:"ChangeMcubeNebulaTaskStatusResult,omitempty" type:"Struct"`
	RequestId                         *string                                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode                        *string                                                                   `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage                     *string                                                                   `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ChangeMcubeNebulaTaskStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ChangeMcubeNebulaTaskStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ChangeMcubeNebulaTaskStatusResponseBody) SetChangeMcubeNebulaTaskStatusResult(v *ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult) *ChangeMcubeNebulaTaskStatusResponseBody {
	s.ChangeMcubeNebulaTaskStatusResult = v
	return s
}

func (s *ChangeMcubeNebulaTaskStatusResponseBody) SetRequestId(v string) *ChangeMcubeNebulaTaskStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *ChangeMcubeNebulaTaskStatusResponseBody) SetResultCode(v string) *ChangeMcubeNebulaTaskStatusResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ChangeMcubeNebulaTaskStatusResponseBody) SetResultMessage(v string) *ChangeMcubeNebulaTaskStatusResponseBody {
	s.ResultMessage = &v
	return s
}

type ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult) String() string {
	return tea.Prettify(s)
}

func (s ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult) GoString() string {
	return s.String()
}

func (s *ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult) SetErrorCode(v string) *ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult {
	s.ErrorCode = &v
	return s
}

func (s *ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult) SetRequestId(v string) *ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult {
	s.RequestId = &v
	return s
}

func (s *ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult) SetResultMsg(v string) *ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult {
	s.ResultMsg = &v
	return s
}

func (s *ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult) SetSuccess(v bool) *ChangeMcubeNebulaTaskStatusResponseBodyChangeMcubeNebulaTaskStatusResult {
	s.Success = &v
	return s
}

type ChangeMcubeNebulaTaskStatusResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ChangeMcubeNebulaTaskStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ChangeMcubeNebulaTaskStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ChangeMcubeNebulaTaskStatusResponse) GoString() string {
	return s.String()
}

func (s *ChangeMcubeNebulaTaskStatusResponse) SetHeaders(v map[string]*string) *ChangeMcubeNebulaTaskStatusResponse {
	s.Headers = v
	return s
}

func (s *ChangeMcubeNebulaTaskStatusResponse) SetStatusCode(v int32) *ChangeMcubeNebulaTaskStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ChangeMcubeNebulaTaskStatusResponse) SetBody(v *ChangeMcubeNebulaTaskStatusResponseBody) *ChangeMcubeNebulaTaskStatusResponse {
	s.Body = v
	return s
}

type ChangeMcubePublicTaskStatusRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	TaskId      *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskStatus  *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ChangeMcubePublicTaskStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ChangeMcubePublicTaskStatusRequest) GoString() string {
	return s.String()
}

func (s *ChangeMcubePublicTaskStatusRequest) SetAppId(v string) *ChangeMcubePublicTaskStatusRequest {
	s.AppId = &v
	return s
}

func (s *ChangeMcubePublicTaskStatusRequest) SetTaskId(v string) *ChangeMcubePublicTaskStatusRequest {
	s.TaskId = &v
	return s
}

func (s *ChangeMcubePublicTaskStatusRequest) SetTaskStatus(v string) *ChangeMcubePublicTaskStatusRequest {
	s.TaskStatus = &v
	return s
}

func (s *ChangeMcubePublicTaskStatusRequest) SetTenantId(v string) *ChangeMcubePublicTaskStatusRequest {
	s.TenantId = &v
	return s
}

func (s *ChangeMcubePublicTaskStatusRequest) SetWorkspaceId(v string) *ChangeMcubePublicTaskStatusRequest {
	s.WorkspaceId = &v
	return s
}

type ChangeMcubePublicTaskStatusResponseBody struct {
	RequestId     *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                               `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *ChangeMcubePublicTaskStatusResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                               `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ChangeMcubePublicTaskStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ChangeMcubePublicTaskStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ChangeMcubePublicTaskStatusResponseBody) SetRequestId(v string) *ChangeMcubePublicTaskStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *ChangeMcubePublicTaskStatusResponseBody) SetResultCode(v string) *ChangeMcubePublicTaskStatusResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ChangeMcubePublicTaskStatusResponseBody) SetResultContent(v *ChangeMcubePublicTaskStatusResponseBodyResultContent) *ChangeMcubePublicTaskStatusResponseBody {
	s.ResultContent = v
	return s
}

func (s *ChangeMcubePublicTaskStatusResponseBody) SetResultMessage(v string) *ChangeMcubePublicTaskStatusResponseBody {
	s.ResultMessage = &v
	return s
}

type ChangeMcubePublicTaskStatusResponseBodyResultContent struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ChangeMcubePublicTaskStatusResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s ChangeMcubePublicTaskStatusResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *ChangeMcubePublicTaskStatusResponseBodyResultContent) SetData(v string) *ChangeMcubePublicTaskStatusResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *ChangeMcubePublicTaskStatusResponseBodyResultContent) SetErrorCode(v string) *ChangeMcubePublicTaskStatusResponseBodyResultContent {
	s.ErrorCode = &v
	return s
}

func (s *ChangeMcubePublicTaskStatusResponseBodyResultContent) SetRequestId(v string) *ChangeMcubePublicTaskStatusResponseBodyResultContent {
	s.RequestId = &v
	return s
}

func (s *ChangeMcubePublicTaskStatusResponseBodyResultContent) SetResultMsg(v string) *ChangeMcubePublicTaskStatusResponseBodyResultContent {
	s.ResultMsg = &v
	return s
}

func (s *ChangeMcubePublicTaskStatusResponseBodyResultContent) SetSuccess(v bool) *ChangeMcubePublicTaskStatusResponseBodyResultContent {
	s.Success = &v
	return s
}

type ChangeMcubePublicTaskStatusResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ChangeMcubePublicTaskStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ChangeMcubePublicTaskStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ChangeMcubePublicTaskStatusResponse) GoString() string {
	return s.String()
}

func (s *ChangeMcubePublicTaskStatusResponse) SetHeaders(v map[string]*string) *ChangeMcubePublicTaskStatusResponse {
	s.Headers = v
	return s
}

func (s *ChangeMcubePublicTaskStatusResponse) SetStatusCode(v int32) *ChangeMcubePublicTaskStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ChangeMcubePublicTaskStatusResponse) SetBody(v *ChangeMcubePublicTaskStatusResponseBody) *ChangeMcubePublicTaskStatusResponse {
	s.Body = v
	return s
}

type CopyMcdpGroupRequest struct {
	AppId                               *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMcdpGroupCopyJsonStr *string `json:"MpaasMappcenterMcdpGroupCopyJsonStr,omitempty" xml:"MpaasMappcenterMcdpGroupCopyJsonStr,omitempty"`
	TenantId                            *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                         *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CopyMcdpGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyMcdpGroupRequest) GoString() string {
	return s.String()
}

func (s *CopyMcdpGroupRequest) SetAppId(v string) *CopyMcdpGroupRequest {
	s.AppId = &v
	return s
}

func (s *CopyMcdpGroupRequest) SetMpaasMappcenterMcdpGroupCopyJsonStr(v string) *CopyMcdpGroupRequest {
	s.MpaasMappcenterMcdpGroupCopyJsonStr = &v
	return s
}

func (s *CopyMcdpGroupRequest) SetTenantId(v string) *CopyMcdpGroupRequest {
	s.TenantId = &v
	return s
}

func (s *CopyMcdpGroupRequest) SetWorkspaceId(v string) *CopyMcdpGroupRequest {
	s.WorkspaceId = &v
	return s
}

type CopyMcdpGroupResponseBody struct {
	RequestId     *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                 `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *CopyMcdpGroupResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                 `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CopyMcdpGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CopyMcdpGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CopyMcdpGroupResponseBody) SetRequestId(v string) *CopyMcdpGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CopyMcdpGroupResponseBody) SetResultCode(v string) *CopyMcdpGroupResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CopyMcdpGroupResponseBody) SetResultContent(v *CopyMcdpGroupResponseBodyResultContent) *CopyMcdpGroupResponseBody {
	s.ResultContent = v
	return s
}

func (s *CopyMcdpGroupResponseBody) SetResultMessage(v string) *CopyMcdpGroupResponseBody {
	s.ResultMessage = &v
	return s
}

type CopyMcdpGroupResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CopyMcdpGroupResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s CopyMcdpGroupResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *CopyMcdpGroupResponseBodyResultContent) SetCode(v string) *CopyMcdpGroupResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *CopyMcdpGroupResponseBodyResultContent) SetData(v string) *CopyMcdpGroupResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *CopyMcdpGroupResponseBodyResultContent) SetMessage(v string) *CopyMcdpGroupResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *CopyMcdpGroupResponseBodyResultContent) SetSuccess(v bool) *CopyMcdpGroupResponseBodyResultContent {
	s.Success = &v
	return s
}

type CopyMcdpGroupResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CopyMcdpGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CopyMcdpGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyMcdpGroupResponse) GoString() string {
	return s.String()
}

func (s *CopyMcdpGroupResponse) SetHeaders(v map[string]*string) *CopyMcdpGroupResponse {
	s.Headers = v
	return s
}

func (s *CopyMcdpGroupResponse) SetStatusCode(v int32) *CopyMcdpGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CopyMcdpGroupResponse) SetBody(v *CopyMcdpGroupResponseBody) *CopyMcdpGroupResponse {
	s.Body = v
	return s
}

type CreateMasCrowdRequest struct {
	AppId                                    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMcdpMasCrowdCreateJsonStr *string `json:"MpaasMappcenterMcdpMasCrowdCreateJsonStr,omitempty" xml:"MpaasMappcenterMcdpMasCrowdCreateJsonStr,omitempty"`
	TenantId                                 *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                              *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMasCrowdRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMasCrowdRequest) GoString() string {
	return s.String()
}

func (s *CreateMasCrowdRequest) SetAppId(v string) *CreateMasCrowdRequest {
	s.AppId = &v
	return s
}

func (s *CreateMasCrowdRequest) SetMpaasMappcenterMcdpMasCrowdCreateJsonStr(v string) *CreateMasCrowdRequest {
	s.MpaasMappcenterMcdpMasCrowdCreateJsonStr = &v
	return s
}

func (s *CreateMasCrowdRequest) SetTenantId(v string) *CreateMasCrowdRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMasCrowdRequest) SetWorkspaceId(v string) *CreateMasCrowdRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMasCrowdResponseBody struct {
	RequestId     *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                  `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *CreateMasCrowdResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                  `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMasCrowdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMasCrowdResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMasCrowdResponseBody) SetRequestId(v string) *CreateMasCrowdResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMasCrowdResponseBody) SetResultCode(v string) *CreateMasCrowdResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMasCrowdResponseBody) SetResultContent(v *CreateMasCrowdResponseBodyResultContent) *CreateMasCrowdResponseBody {
	s.ResultContent = v
	return s
}

func (s *CreateMasCrowdResponseBody) SetResultMessage(v string) *CreateMasCrowdResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMasCrowdResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMasCrowdResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s CreateMasCrowdResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *CreateMasCrowdResponseBodyResultContent) SetCode(v string) *CreateMasCrowdResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *CreateMasCrowdResponseBodyResultContent) SetData(v string) *CreateMasCrowdResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *CreateMasCrowdResponseBodyResultContent) SetMessage(v string) *CreateMasCrowdResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *CreateMasCrowdResponseBodyResultContent) SetSuccess(v bool) *CreateMasCrowdResponseBodyResultContent {
	s.Success = &v
	return s
}

type CreateMasCrowdResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMasCrowdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMasCrowdResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMasCrowdResponse) GoString() string {
	return s.String()
}

func (s *CreateMasCrowdResponse) SetHeaders(v map[string]*string) *CreateMasCrowdResponse {
	s.Headers = v
	return s
}

func (s *CreateMasCrowdResponse) SetStatusCode(v int32) *CreateMasCrowdResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMasCrowdResponse) SetBody(v *CreateMasCrowdResponseBody) *CreateMasCrowdResponse {
	s.Body = v
	return s
}

type CreateMasFunnelRequest struct {
	AppId                                     *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMcdpMasFunnelCreateJsonStr *string `json:"MpaasMappcenterMcdpMasFunnelCreateJsonStr,omitempty" xml:"MpaasMappcenterMcdpMasFunnelCreateJsonStr,omitempty"`
	TenantId                                  *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                               *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMasFunnelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMasFunnelRequest) GoString() string {
	return s.String()
}

func (s *CreateMasFunnelRequest) SetAppId(v string) *CreateMasFunnelRequest {
	s.AppId = &v
	return s
}

func (s *CreateMasFunnelRequest) SetMpaasMappcenterMcdpMasFunnelCreateJsonStr(v string) *CreateMasFunnelRequest {
	s.MpaasMappcenterMcdpMasFunnelCreateJsonStr = &v
	return s
}

func (s *CreateMasFunnelRequest) SetTenantId(v string) *CreateMasFunnelRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMasFunnelRequest) SetWorkspaceId(v string) *CreateMasFunnelRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMasFunnelResponseBody struct {
	RequestId     *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                   `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *CreateMasFunnelResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                   `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMasFunnelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMasFunnelResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMasFunnelResponseBody) SetRequestId(v string) *CreateMasFunnelResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMasFunnelResponseBody) SetResultCode(v string) *CreateMasFunnelResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMasFunnelResponseBody) SetResultContent(v *CreateMasFunnelResponseBodyResultContent) *CreateMasFunnelResponseBody {
	s.ResultContent = v
	return s
}

func (s *CreateMasFunnelResponseBody) SetResultMessage(v string) *CreateMasFunnelResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMasFunnelResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMasFunnelResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s CreateMasFunnelResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *CreateMasFunnelResponseBodyResultContent) SetCode(v string) *CreateMasFunnelResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *CreateMasFunnelResponseBodyResultContent) SetData(v string) *CreateMasFunnelResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *CreateMasFunnelResponseBodyResultContent) SetMessage(v string) *CreateMasFunnelResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *CreateMasFunnelResponseBodyResultContent) SetSuccess(v bool) *CreateMasFunnelResponseBodyResultContent {
	s.Success = &v
	return s
}

type CreateMasFunnelResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMasFunnelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMasFunnelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMasFunnelResponse) GoString() string {
	return s.String()
}

func (s *CreateMasFunnelResponse) SetHeaders(v map[string]*string) *CreateMasFunnelResponse {
	s.Headers = v
	return s
}

func (s *CreateMasFunnelResponse) SetStatusCode(v int32) *CreateMasFunnelResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMasFunnelResponse) SetBody(v *CreateMasFunnelResponseBody) *CreateMasFunnelResponse {
	s.Body = v
	return s
}

type CreateMcdpEventRequest struct {
	AppId                                 *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMcdpEventCreateJsonStr *string `json:"MpaasMappcenterMcdpEventCreateJsonStr,omitempty" xml:"MpaasMappcenterMcdpEventCreateJsonStr,omitempty"`
	TenantId                              *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                           *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMcdpEventRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpEventRequest) GoString() string {
	return s.String()
}

func (s *CreateMcdpEventRequest) SetAppId(v string) *CreateMcdpEventRequest {
	s.AppId = &v
	return s
}

func (s *CreateMcdpEventRequest) SetMpaasMappcenterMcdpEventCreateJsonStr(v string) *CreateMcdpEventRequest {
	s.MpaasMappcenterMcdpEventCreateJsonStr = &v
	return s
}

func (s *CreateMcdpEventRequest) SetTenantId(v string) *CreateMcdpEventRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMcdpEventRequest) SetWorkspaceId(v string) *CreateMcdpEventRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMcdpEventResponseBody struct {
	RequestId     *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                   `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *CreateMcdpEventResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                   `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMcdpEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpEventResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMcdpEventResponseBody) SetRequestId(v string) *CreateMcdpEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMcdpEventResponseBody) SetResultCode(v string) *CreateMcdpEventResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMcdpEventResponseBody) SetResultContent(v *CreateMcdpEventResponseBodyResultContent) *CreateMcdpEventResponseBody {
	s.ResultContent = v
	return s
}

func (s *CreateMcdpEventResponseBody) SetResultMessage(v string) *CreateMcdpEventResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMcdpEventResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMcdpEventResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpEventResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *CreateMcdpEventResponseBodyResultContent) SetCode(v string) *CreateMcdpEventResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *CreateMcdpEventResponseBodyResultContent) SetData(v string) *CreateMcdpEventResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *CreateMcdpEventResponseBodyResultContent) SetMessage(v string) *CreateMcdpEventResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *CreateMcdpEventResponseBodyResultContent) SetSuccess(v bool) *CreateMcdpEventResponseBodyResultContent {
	s.Success = &v
	return s
}

type CreateMcdpEventResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMcdpEventResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMcdpEventResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpEventResponse) GoString() string {
	return s.String()
}

func (s *CreateMcdpEventResponse) SetHeaders(v map[string]*string) *CreateMcdpEventResponse {
	s.Headers = v
	return s
}

func (s *CreateMcdpEventResponse) SetStatusCode(v int32) *CreateMcdpEventResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMcdpEventResponse) SetBody(v *CreateMcdpEventResponseBody) *CreateMcdpEventResponse {
	s.Body = v
	return s
}

type CreateMcdpEventAttributeRequest struct {
	AppId                                          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMcdpEventAttributeCreateJsonStr *string `json:"MpaasMappcenterMcdpEventAttributeCreateJsonStr,omitempty" xml:"MpaasMappcenterMcdpEventAttributeCreateJsonStr,omitempty"`
	TenantId                                       *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                                    *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMcdpEventAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpEventAttributeRequest) GoString() string {
	return s.String()
}

func (s *CreateMcdpEventAttributeRequest) SetAppId(v string) *CreateMcdpEventAttributeRequest {
	s.AppId = &v
	return s
}

func (s *CreateMcdpEventAttributeRequest) SetMpaasMappcenterMcdpEventAttributeCreateJsonStr(v string) *CreateMcdpEventAttributeRequest {
	s.MpaasMappcenterMcdpEventAttributeCreateJsonStr = &v
	return s
}

func (s *CreateMcdpEventAttributeRequest) SetTenantId(v string) *CreateMcdpEventAttributeRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMcdpEventAttributeRequest) SetWorkspaceId(v string) *CreateMcdpEventAttributeRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMcdpEventAttributeResponseBody struct {
	RequestId     *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                            `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *CreateMcdpEventAttributeResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                            `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMcdpEventAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpEventAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMcdpEventAttributeResponseBody) SetRequestId(v string) *CreateMcdpEventAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMcdpEventAttributeResponseBody) SetResultCode(v string) *CreateMcdpEventAttributeResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMcdpEventAttributeResponseBody) SetResultContent(v *CreateMcdpEventAttributeResponseBodyResultContent) *CreateMcdpEventAttributeResponseBody {
	s.ResultContent = v
	return s
}

func (s *CreateMcdpEventAttributeResponseBody) SetResultMessage(v string) *CreateMcdpEventAttributeResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMcdpEventAttributeResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMcdpEventAttributeResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpEventAttributeResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *CreateMcdpEventAttributeResponseBodyResultContent) SetCode(v string) *CreateMcdpEventAttributeResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *CreateMcdpEventAttributeResponseBodyResultContent) SetData(v string) *CreateMcdpEventAttributeResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *CreateMcdpEventAttributeResponseBodyResultContent) SetMessage(v string) *CreateMcdpEventAttributeResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *CreateMcdpEventAttributeResponseBodyResultContent) SetSuccess(v bool) *CreateMcdpEventAttributeResponseBodyResultContent {
	s.Success = &v
	return s
}

type CreateMcdpEventAttributeResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMcdpEventAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMcdpEventAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpEventAttributeResponse) GoString() string {
	return s.String()
}

func (s *CreateMcdpEventAttributeResponse) SetHeaders(v map[string]*string) *CreateMcdpEventAttributeResponse {
	s.Headers = v
	return s
}

func (s *CreateMcdpEventAttributeResponse) SetStatusCode(v int32) *CreateMcdpEventAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMcdpEventAttributeResponse) SetBody(v *CreateMcdpEventAttributeResponseBody) *CreateMcdpEventAttributeResponse {
	s.Body = v
	return s
}

type CreateMcdpGroupRequest struct {
	AppId                                 *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMcdpGroupCreateJsonStr *string `json:"MpaasMappcenterMcdpGroupCreateJsonStr,omitempty" xml:"MpaasMappcenterMcdpGroupCreateJsonStr,omitempty"`
	TenantId                              *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                           *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMcdpGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateMcdpGroupRequest) SetAppId(v string) *CreateMcdpGroupRequest {
	s.AppId = &v
	return s
}

func (s *CreateMcdpGroupRequest) SetMpaasMappcenterMcdpGroupCreateJsonStr(v string) *CreateMcdpGroupRequest {
	s.MpaasMappcenterMcdpGroupCreateJsonStr = &v
	return s
}

func (s *CreateMcdpGroupRequest) SetTenantId(v string) *CreateMcdpGroupRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMcdpGroupRequest) SetWorkspaceId(v string) *CreateMcdpGroupRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMcdpGroupResponseBody struct {
	RequestId     *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                   `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *CreateMcdpGroupResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                   `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMcdpGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMcdpGroupResponseBody) SetRequestId(v string) *CreateMcdpGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMcdpGroupResponseBody) SetResultCode(v string) *CreateMcdpGroupResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMcdpGroupResponseBody) SetResultContent(v *CreateMcdpGroupResponseBodyResultContent) *CreateMcdpGroupResponseBody {
	s.ResultContent = v
	return s
}

func (s *CreateMcdpGroupResponseBody) SetResultMessage(v string) *CreateMcdpGroupResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMcdpGroupResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMcdpGroupResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpGroupResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *CreateMcdpGroupResponseBodyResultContent) SetCode(v string) *CreateMcdpGroupResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *CreateMcdpGroupResponseBodyResultContent) SetData(v string) *CreateMcdpGroupResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *CreateMcdpGroupResponseBodyResultContent) SetMessage(v string) *CreateMcdpGroupResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *CreateMcdpGroupResponseBodyResultContent) SetSuccess(v bool) *CreateMcdpGroupResponseBodyResultContent {
	s.Success = &v
	return s
}

type CreateMcdpGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMcdpGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMcdpGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateMcdpGroupResponse) SetHeaders(v map[string]*string) *CreateMcdpGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateMcdpGroupResponse) SetStatusCode(v int32) *CreateMcdpGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMcdpGroupResponse) SetBody(v *CreateMcdpGroupResponseBody) *CreateMcdpGroupResponse {
	s.Body = v
	return s
}

type CreateMcdpMaterialRequest struct {
	AppId                                    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMcdpMaterialCreateJsonStr *string `json:"MpaasMappcenterMcdpMaterialCreateJsonStr,omitempty" xml:"MpaasMappcenterMcdpMaterialCreateJsonStr,omitempty"`
	TenantId                                 *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                              *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMcdpMaterialRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpMaterialRequest) GoString() string {
	return s.String()
}

func (s *CreateMcdpMaterialRequest) SetAppId(v string) *CreateMcdpMaterialRequest {
	s.AppId = &v
	return s
}

func (s *CreateMcdpMaterialRequest) SetMpaasMappcenterMcdpMaterialCreateJsonStr(v string) *CreateMcdpMaterialRequest {
	s.MpaasMappcenterMcdpMaterialCreateJsonStr = &v
	return s
}

func (s *CreateMcdpMaterialRequest) SetTenantId(v string) *CreateMcdpMaterialRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMcdpMaterialRequest) SetWorkspaceId(v string) *CreateMcdpMaterialRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMcdpMaterialResponseBody struct {
	RequestId     *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                      `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *CreateMcdpMaterialResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                      `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMcdpMaterialResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpMaterialResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMcdpMaterialResponseBody) SetRequestId(v string) *CreateMcdpMaterialResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMcdpMaterialResponseBody) SetResultCode(v string) *CreateMcdpMaterialResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMcdpMaterialResponseBody) SetResultContent(v *CreateMcdpMaterialResponseBodyResultContent) *CreateMcdpMaterialResponseBody {
	s.ResultContent = v
	return s
}

func (s *CreateMcdpMaterialResponseBody) SetResultMessage(v string) *CreateMcdpMaterialResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMcdpMaterialResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMcdpMaterialResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpMaterialResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *CreateMcdpMaterialResponseBodyResultContent) SetCode(v string) *CreateMcdpMaterialResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *CreateMcdpMaterialResponseBodyResultContent) SetData(v string) *CreateMcdpMaterialResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *CreateMcdpMaterialResponseBodyResultContent) SetMessage(v string) *CreateMcdpMaterialResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *CreateMcdpMaterialResponseBodyResultContent) SetSuccess(v bool) *CreateMcdpMaterialResponseBodyResultContent {
	s.Success = &v
	return s
}

type CreateMcdpMaterialResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMcdpMaterialResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMcdpMaterialResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpMaterialResponse) GoString() string {
	return s.String()
}

func (s *CreateMcdpMaterialResponse) SetHeaders(v map[string]*string) *CreateMcdpMaterialResponse {
	s.Headers = v
	return s
}

func (s *CreateMcdpMaterialResponse) SetStatusCode(v int32) *CreateMcdpMaterialResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMcdpMaterialResponse) SetBody(v *CreateMcdpMaterialResponseBody) *CreateMcdpMaterialResponse {
	s.Body = v
	return s
}

type CreateMcdpZoneRequest struct {
	AppId                                *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMcdpZoneCreateJsonStr *string `json:"MpaasMappcenterMcdpZoneCreateJsonStr,omitempty" xml:"MpaasMappcenterMcdpZoneCreateJsonStr,omitempty"`
	TenantId                             *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                          *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMcdpZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpZoneRequest) GoString() string {
	return s.String()
}

func (s *CreateMcdpZoneRequest) SetAppId(v string) *CreateMcdpZoneRequest {
	s.AppId = &v
	return s
}

func (s *CreateMcdpZoneRequest) SetMpaasMappcenterMcdpZoneCreateJsonStr(v string) *CreateMcdpZoneRequest {
	s.MpaasMappcenterMcdpZoneCreateJsonStr = &v
	return s
}

func (s *CreateMcdpZoneRequest) SetTenantId(v string) *CreateMcdpZoneRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMcdpZoneRequest) SetWorkspaceId(v string) *CreateMcdpZoneRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMcdpZoneResponseBody struct {
	RequestId     *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                  `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *CreateMcdpZoneResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                  `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMcdpZoneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpZoneResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMcdpZoneResponseBody) SetRequestId(v string) *CreateMcdpZoneResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMcdpZoneResponseBody) SetResultCode(v string) *CreateMcdpZoneResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMcdpZoneResponseBody) SetResultContent(v *CreateMcdpZoneResponseBodyResultContent) *CreateMcdpZoneResponseBody {
	s.ResultContent = v
	return s
}

func (s *CreateMcdpZoneResponseBody) SetResultMessage(v string) *CreateMcdpZoneResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMcdpZoneResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMcdpZoneResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpZoneResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *CreateMcdpZoneResponseBodyResultContent) SetCode(v string) *CreateMcdpZoneResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *CreateMcdpZoneResponseBodyResultContent) SetData(v string) *CreateMcdpZoneResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *CreateMcdpZoneResponseBodyResultContent) SetMessage(v string) *CreateMcdpZoneResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *CreateMcdpZoneResponseBodyResultContent) SetSuccess(v bool) *CreateMcdpZoneResponseBodyResultContent {
	s.Success = &v
	return s
}

type CreateMcdpZoneResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMcdpZoneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMcdpZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMcdpZoneResponse) GoString() string {
	return s.String()
}

func (s *CreateMcdpZoneResponse) SetHeaders(v map[string]*string) *CreateMcdpZoneResponse {
	s.Headers = v
	return s
}

func (s *CreateMcdpZoneResponse) SetStatusCode(v int32) *CreateMcdpZoneResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMcdpZoneResponse) SetBody(v *CreateMcdpZoneResponseBody) *CreateMcdpZoneResponse {
	s.Body = v
	return s
}

type CreateMcubeMiniAppRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	H5Id        *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	H5Name      *string `json:"H5Name,omitempty" xml:"H5Name,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMcubeMiniAppRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeMiniAppRequest) GoString() string {
	return s.String()
}

func (s *CreateMcubeMiniAppRequest) SetAppId(v string) *CreateMcubeMiniAppRequest {
	s.AppId = &v
	return s
}

func (s *CreateMcubeMiniAppRequest) SetH5Id(v string) *CreateMcubeMiniAppRequest {
	s.H5Id = &v
	return s
}

func (s *CreateMcubeMiniAppRequest) SetH5Name(v string) *CreateMcubeMiniAppRequest {
	s.H5Name = &v
	return s
}

func (s *CreateMcubeMiniAppRequest) SetTenantId(v string) *CreateMcubeMiniAppRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMcubeMiniAppRequest) SetWorkspaceId(v string) *CreateMcubeMiniAppRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMcubeMiniAppResponseBody struct {
	CreateMiniResult *CreateMcubeMiniAppResponseBodyCreateMiniResult `json:"CreateMiniResult,omitempty" xml:"CreateMiniResult,omitempty" type:"Struct"`
	RequestId        *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode       *string                                         `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage    *string                                         `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMcubeMiniAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeMiniAppResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMcubeMiniAppResponseBody) SetCreateMiniResult(v *CreateMcubeMiniAppResponseBodyCreateMiniResult) *CreateMcubeMiniAppResponseBody {
	s.CreateMiniResult = v
	return s
}

func (s *CreateMcubeMiniAppResponseBody) SetRequestId(v string) *CreateMcubeMiniAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMcubeMiniAppResponseBody) SetResultCode(v string) *CreateMcubeMiniAppResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMcubeMiniAppResponseBody) SetResultMessage(v string) *CreateMcubeMiniAppResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMcubeMiniAppResponseBodyCreateMiniResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMcubeMiniAppResponseBodyCreateMiniResult) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeMiniAppResponseBodyCreateMiniResult) GoString() string {
	return s.String()
}

func (s *CreateMcubeMiniAppResponseBodyCreateMiniResult) SetData(v string) *CreateMcubeMiniAppResponseBodyCreateMiniResult {
	s.Data = &v
	return s
}

func (s *CreateMcubeMiniAppResponseBodyCreateMiniResult) SetResultMsg(v string) *CreateMcubeMiniAppResponseBodyCreateMiniResult {
	s.ResultMsg = &v
	return s
}

func (s *CreateMcubeMiniAppResponseBodyCreateMiniResult) SetSuccess(v bool) *CreateMcubeMiniAppResponseBodyCreateMiniResult {
	s.Success = &v
	return s
}

type CreateMcubeMiniAppResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMcubeMiniAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMcubeMiniAppResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeMiniAppResponse) GoString() string {
	return s.String()
}

func (s *CreateMcubeMiniAppResponse) SetHeaders(v map[string]*string) *CreateMcubeMiniAppResponse {
	s.Headers = v
	return s
}

func (s *CreateMcubeMiniAppResponse) SetStatusCode(v int32) *CreateMcubeMiniAppResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMcubeMiniAppResponse) SetBody(v *CreateMcubeMiniAppResponseBody) *CreateMcubeMiniAppResponse {
	s.Body = v
	return s
}

type CreateMcubeMiniTaskRequest struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GreyConfigInfo  *string `json:"GreyConfigInfo,omitempty" xml:"GreyConfigInfo,omitempty"`
	GreyEndtimeData *string `json:"GreyEndtimeData,omitempty" xml:"GreyEndtimeData,omitempty"`
	GreyNum         *int64  `json:"GreyNum,omitempty" xml:"GreyNum,omitempty"`
	Memo            *string `json:"Memo,omitempty" xml:"Memo,omitempty"`
	PackageId       *int64  `json:"PackageId,omitempty" xml:"PackageId,omitempty"`
	PublishMode     *int64  `json:"PublishMode,omitempty" xml:"PublishMode,omitempty"`
	PublishType     *int64  `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	TenantId        *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WhitelistIds    *string `json:"WhitelistIds,omitempty" xml:"WhitelistIds,omitempty"`
	WorkspaceId     *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMcubeMiniTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeMiniTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateMcubeMiniTaskRequest) SetAppId(v string) *CreateMcubeMiniTaskRequest {
	s.AppId = &v
	return s
}

func (s *CreateMcubeMiniTaskRequest) SetGreyConfigInfo(v string) *CreateMcubeMiniTaskRequest {
	s.GreyConfigInfo = &v
	return s
}

func (s *CreateMcubeMiniTaskRequest) SetGreyEndtimeData(v string) *CreateMcubeMiniTaskRequest {
	s.GreyEndtimeData = &v
	return s
}

func (s *CreateMcubeMiniTaskRequest) SetGreyNum(v int64) *CreateMcubeMiniTaskRequest {
	s.GreyNum = &v
	return s
}

func (s *CreateMcubeMiniTaskRequest) SetMemo(v string) *CreateMcubeMiniTaskRequest {
	s.Memo = &v
	return s
}

func (s *CreateMcubeMiniTaskRequest) SetPackageId(v int64) *CreateMcubeMiniTaskRequest {
	s.PackageId = &v
	return s
}

func (s *CreateMcubeMiniTaskRequest) SetPublishMode(v int64) *CreateMcubeMiniTaskRequest {
	s.PublishMode = &v
	return s
}

func (s *CreateMcubeMiniTaskRequest) SetPublishType(v int64) *CreateMcubeMiniTaskRequest {
	s.PublishType = &v
	return s
}

func (s *CreateMcubeMiniTaskRequest) SetTenantId(v string) *CreateMcubeMiniTaskRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMcubeMiniTaskRequest) SetWhitelistIds(v string) *CreateMcubeMiniTaskRequest {
	s.WhitelistIds = &v
	return s
}

func (s *CreateMcubeMiniTaskRequest) SetWorkspaceId(v string) *CreateMcubeMiniTaskRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMcubeMiniTaskResponseBody struct {
	CreateMiniTaskResult *CreateMcubeMiniTaskResponseBodyCreateMiniTaskResult `json:"CreateMiniTaskResult,omitempty" xml:"CreateMiniTaskResult,omitempty" type:"Struct"`
	RequestId            *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode           *string                                              `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage        *string                                              `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMcubeMiniTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeMiniTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMcubeMiniTaskResponseBody) SetCreateMiniTaskResult(v *CreateMcubeMiniTaskResponseBodyCreateMiniTaskResult) *CreateMcubeMiniTaskResponseBody {
	s.CreateMiniTaskResult = v
	return s
}

func (s *CreateMcubeMiniTaskResponseBody) SetRequestId(v string) *CreateMcubeMiniTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMcubeMiniTaskResponseBody) SetResultCode(v string) *CreateMcubeMiniTaskResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMcubeMiniTaskResponseBody) SetResultMessage(v string) *CreateMcubeMiniTaskResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMcubeMiniTaskResponseBodyCreateMiniTaskResult struct {
	MiniTaskId *string `json:"MiniTaskId,omitempty" xml:"MiniTaskId,omitempty"`
	ResultMsg  *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success    *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMcubeMiniTaskResponseBodyCreateMiniTaskResult) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeMiniTaskResponseBodyCreateMiniTaskResult) GoString() string {
	return s.String()
}

func (s *CreateMcubeMiniTaskResponseBodyCreateMiniTaskResult) SetMiniTaskId(v string) *CreateMcubeMiniTaskResponseBodyCreateMiniTaskResult {
	s.MiniTaskId = &v
	return s
}

func (s *CreateMcubeMiniTaskResponseBodyCreateMiniTaskResult) SetResultMsg(v string) *CreateMcubeMiniTaskResponseBodyCreateMiniTaskResult {
	s.ResultMsg = &v
	return s
}

func (s *CreateMcubeMiniTaskResponseBodyCreateMiniTaskResult) SetSuccess(v bool) *CreateMcubeMiniTaskResponseBodyCreateMiniTaskResult {
	s.Success = &v
	return s
}

type CreateMcubeMiniTaskResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMcubeMiniTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMcubeMiniTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeMiniTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateMcubeMiniTaskResponse) SetHeaders(v map[string]*string) *CreateMcubeMiniTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateMcubeMiniTaskResponse) SetStatusCode(v int32) *CreateMcubeMiniTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMcubeMiniTaskResponse) SetBody(v *CreateMcubeMiniTaskResponseBody) *CreateMcubeMiniTaskResponse {
	s.Body = v
	return s
}

type CreateMcubeNebulaAppRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	H5Id        *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	H5Name      *string `json:"H5Name,omitempty" xml:"H5Name,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMcubeNebulaAppRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeNebulaAppRequest) GoString() string {
	return s.String()
}

func (s *CreateMcubeNebulaAppRequest) SetAppId(v string) *CreateMcubeNebulaAppRequest {
	s.AppId = &v
	return s
}

func (s *CreateMcubeNebulaAppRequest) SetH5Id(v string) *CreateMcubeNebulaAppRequest {
	s.H5Id = &v
	return s
}

func (s *CreateMcubeNebulaAppRequest) SetH5Name(v string) *CreateMcubeNebulaAppRequest {
	s.H5Name = &v
	return s
}

func (s *CreateMcubeNebulaAppRequest) SetTenantId(v string) *CreateMcubeNebulaAppRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMcubeNebulaAppRequest) SetWorkspaceId(v string) *CreateMcubeNebulaAppRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMcubeNebulaAppResponseBody struct {
	CreateNebulaAppResult *CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult `json:"CreateNebulaAppResult,omitempty" xml:"CreateNebulaAppResult,omitempty" type:"Struct"`
	RequestId             *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode            *string                                                `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage         *string                                                `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMcubeNebulaAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeNebulaAppResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMcubeNebulaAppResponseBody) SetCreateNebulaAppResult(v *CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult) *CreateMcubeNebulaAppResponseBody {
	s.CreateNebulaAppResult = v
	return s
}

func (s *CreateMcubeNebulaAppResponseBody) SetRequestId(v string) *CreateMcubeNebulaAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMcubeNebulaAppResponseBody) SetResultCode(v string) *CreateMcubeNebulaAppResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMcubeNebulaAppResponseBody) SetResultMessage(v string) *CreateMcubeNebulaAppResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult) GoString() string {
	return s.String()
}

func (s *CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult) SetErrorCode(v string) *CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult {
	s.ErrorCode = &v
	return s
}

func (s *CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult) SetRequestId(v string) *CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult {
	s.RequestId = &v
	return s
}

func (s *CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult) SetResultMsg(v string) *CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult {
	s.ResultMsg = &v
	return s
}

func (s *CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult) SetSuccess(v bool) *CreateMcubeNebulaAppResponseBodyCreateNebulaAppResult {
	s.Success = &v
	return s
}

type CreateMcubeNebulaAppResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMcubeNebulaAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMcubeNebulaAppResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeNebulaAppResponse) GoString() string {
	return s.String()
}

func (s *CreateMcubeNebulaAppResponse) SetHeaders(v map[string]*string) *CreateMcubeNebulaAppResponse {
	s.Headers = v
	return s
}

func (s *CreateMcubeNebulaAppResponse) SetStatusCode(v int32) *CreateMcubeNebulaAppResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMcubeNebulaAppResponse) SetBody(v *CreateMcubeNebulaAppResponseBody) *CreateMcubeNebulaAppResponse {
	s.Body = v
	return s
}

type CreateMcubeNebulaResourceRequest struct {
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AutoInstall      *int32  `json:"AutoInstall,omitempty" xml:"AutoInstall,omitempty"`
	ClientVersionMax *string `json:"ClientVersionMax,omitempty" xml:"ClientVersionMax,omitempty"`
	ClientVersionMin *string `json:"ClientVersionMin,omitempty" xml:"ClientVersionMin,omitempty"`
	CustomDomainName *string `json:"CustomDomainName,omitempty" xml:"CustomDomainName,omitempty"`
	ExtendInfo       *string `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty"`
	FileUrl          *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	H5Id             *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	H5Name           *string `json:"H5Name,omitempty" xml:"H5Name,omitempty"`
	H5Version        *string `json:"H5Version,omitempty" xml:"H5Version,omitempty"`
	InstallType      *int32  `json:"InstallType,omitempty" xml:"InstallType,omitempty"`
	MainUrl          *string `json:"MainUrl,omitempty" xml:"MainUrl,omitempty"`
	OnexFlag         *bool   `json:"OnexFlag,omitempty" xml:"OnexFlag,omitempty"`
	Platform         *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	RepeatNebula     *int32  `json:"RepeatNebula,omitempty" xml:"RepeatNebula,omitempty"`
	ResourceType     *int32  `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	SubUrl           *string `json:"SubUrl,omitempty" xml:"SubUrl,omitempty"`
	TenantId         *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Vhost            *string `json:"Vhost,omitempty" xml:"Vhost,omitempty"`
	WorkspaceId      *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMcubeNebulaResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeNebulaResourceRequest) GoString() string {
	return s.String()
}

func (s *CreateMcubeNebulaResourceRequest) SetAppId(v string) *CreateMcubeNebulaResourceRequest {
	s.AppId = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetAutoInstall(v int32) *CreateMcubeNebulaResourceRequest {
	s.AutoInstall = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetClientVersionMax(v string) *CreateMcubeNebulaResourceRequest {
	s.ClientVersionMax = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetClientVersionMin(v string) *CreateMcubeNebulaResourceRequest {
	s.ClientVersionMin = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetCustomDomainName(v string) *CreateMcubeNebulaResourceRequest {
	s.CustomDomainName = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetExtendInfo(v string) *CreateMcubeNebulaResourceRequest {
	s.ExtendInfo = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetFileUrl(v string) *CreateMcubeNebulaResourceRequest {
	s.FileUrl = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetH5Id(v string) *CreateMcubeNebulaResourceRequest {
	s.H5Id = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetH5Name(v string) *CreateMcubeNebulaResourceRequest {
	s.H5Name = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetH5Version(v string) *CreateMcubeNebulaResourceRequest {
	s.H5Version = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetInstallType(v int32) *CreateMcubeNebulaResourceRequest {
	s.InstallType = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetMainUrl(v string) *CreateMcubeNebulaResourceRequest {
	s.MainUrl = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetOnexFlag(v bool) *CreateMcubeNebulaResourceRequest {
	s.OnexFlag = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetPlatform(v string) *CreateMcubeNebulaResourceRequest {
	s.Platform = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetRepeatNebula(v int32) *CreateMcubeNebulaResourceRequest {
	s.RepeatNebula = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetResourceType(v int32) *CreateMcubeNebulaResourceRequest {
	s.ResourceType = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetSubUrl(v string) *CreateMcubeNebulaResourceRequest {
	s.SubUrl = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetTenantId(v string) *CreateMcubeNebulaResourceRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetVhost(v string) *CreateMcubeNebulaResourceRequest {
	s.Vhost = &v
	return s
}

func (s *CreateMcubeNebulaResourceRequest) SetWorkspaceId(v string) *CreateMcubeNebulaResourceRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMcubeNebulaResourceResponseBody struct {
	CreateMcubeNebulaResourceReslult *CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult `json:"CreateMcubeNebulaResourceReslult,omitempty" xml:"CreateMcubeNebulaResourceReslult,omitempty" type:"Struct"`
	RequestId                        *string                                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode                       *string                                                                `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage                    *string                                                                `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMcubeNebulaResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeNebulaResourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMcubeNebulaResourceResponseBody) SetCreateMcubeNebulaResourceReslult(v *CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult) *CreateMcubeNebulaResourceResponseBody {
	s.CreateMcubeNebulaResourceReslult = v
	return s
}

func (s *CreateMcubeNebulaResourceResponseBody) SetRequestId(v string) *CreateMcubeNebulaResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMcubeNebulaResourceResponseBody) SetResultCode(v string) *CreateMcubeNebulaResourceResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMcubeNebulaResourceResponseBody) SetResultMessage(v string) *CreateMcubeNebulaResourceResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult struct {
	ErrorCode        *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	NebulaResourceId *string `json:"NebulaResourceId,omitempty" xml:"NebulaResourceId,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg        *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success          *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult) GoString() string {
	return s.String()
}

func (s *CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult) SetErrorCode(v string) *CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult {
	s.ErrorCode = &v
	return s
}

func (s *CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult) SetNebulaResourceId(v string) *CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult {
	s.NebulaResourceId = &v
	return s
}

func (s *CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult) SetRequestId(v string) *CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult {
	s.RequestId = &v
	return s
}

func (s *CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult) SetResultMsg(v string) *CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult {
	s.ResultMsg = &v
	return s
}

func (s *CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult) SetSuccess(v bool) *CreateMcubeNebulaResourceResponseBodyCreateMcubeNebulaResourceReslult {
	s.Success = &v
	return s
}

type CreateMcubeNebulaResourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMcubeNebulaResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMcubeNebulaResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeNebulaResourceResponse) GoString() string {
	return s.String()
}

func (s *CreateMcubeNebulaResourceResponse) SetHeaders(v map[string]*string) *CreateMcubeNebulaResourceResponse {
	s.Headers = v
	return s
}

func (s *CreateMcubeNebulaResourceResponse) SetStatusCode(v int32) *CreateMcubeNebulaResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMcubeNebulaResourceResponse) SetBody(v *CreateMcubeNebulaResourceResponseBody) *CreateMcubeNebulaResourceResponse {
	s.Body = v
	return s
}

type CreateMcubeNebulaTaskRequest struct {
	AppCode          *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BizType          *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	Creator          *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	GmtCreate        *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified      *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GmtModifiedStr   *string `json:"GmtModifiedStr,omitempty" xml:"GmtModifiedStr,omitempty"`
	GreyConfigInfo   *string `json:"GreyConfigInfo,omitempty" xml:"GreyConfigInfo,omitempty"`
	GreyEndtime      *string `json:"GreyEndtime,omitempty" xml:"GreyEndtime,omitempty"`
	GreyEndtimeData  *string `json:"GreyEndtimeData,omitempty" xml:"GreyEndtimeData,omitempty"`
	GreyEndtimeStr   *string `json:"GreyEndtimeStr,omitempty" xml:"GreyEndtimeStr,omitempty"`
	GreyNum          *int32  `json:"GreyNum,omitempty" xml:"GreyNum,omitempty"`
	GreyUrl          *string `json:"GreyUrl,omitempty" xml:"GreyUrl,omitempty"`
	Id               *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Memo             *string `json:"Memo,omitempty" xml:"Memo,omitempty"`
	Modifier         *string `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	PackageId        *int64  `json:"PackageId,omitempty" xml:"PackageId,omitempty"`
	Percent          *int32  `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Platform         *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	ProductId        *string `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	ProductVersion   *string `json:"ProductVersion,omitempty" xml:"ProductVersion,omitempty"`
	PublishMode      *int32  `json:"PublishMode,omitempty" xml:"PublishMode,omitempty"`
	PublishType      *int32  `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	ReleaseVersion   *string `json:"ReleaseVersion,omitempty" xml:"ReleaseVersion,omitempty"`
	ResIds           *string `json:"ResIds,omitempty" xml:"ResIds,omitempty"`
	SerialVersionUID *int64  `json:"SerialVersionUID,omitempty" xml:"SerialVersionUID,omitempty"`
	Status           *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	SyncMode         *string `json:"SyncMode,omitempty" xml:"SyncMode,omitempty"`
	SyncResult       *string `json:"SyncResult,omitempty" xml:"SyncResult,omitempty"`
	TaskName         *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TaskStatus       *int32  `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	TaskType         *int32  `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	TaskVersion      *int64  `json:"TaskVersion,omitempty" xml:"TaskVersion,omitempty"`
	TenantId         *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	UpgradeNoticeNum *int64  `json:"UpgradeNoticeNum,omitempty" xml:"UpgradeNoticeNum,omitempty"`
	UpgradeProgress  *string `json:"UpgradeProgress,omitempty" xml:"UpgradeProgress,omitempty"`
	WhitelistIds     *string `json:"WhitelistIds,omitempty" xml:"WhitelistIds,omitempty"`
	WorkspaceId      *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMcubeNebulaTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeNebulaTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateMcubeNebulaTaskRequest) SetAppCode(v string) *CreateMcubeNebulaTaskRequest {
	s.AppCode = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetAppId(v string) *CreateMcubeNebulaTaskRequest {
	s.AppId = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetBizType(v string) *CreateMcubeNebulaTaskRequest {
	s.BizType = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetCreator(v string) *CreateMcubeNebulaTaskRequest {
	s.Creator = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetGmtCreate(v string) *CreateMcubeNebulaTaskRequest {
	s.GmtCreate = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetGmtModified(v string) *CreateMcubeNebulaTaskRequest {
	s.GmtModified = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetGmtModifiedStr(v string) *CreateMcubeNebulaTaskRequest {
	s.GmtModifiedStr = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetGreyConfigInfo(v string) *CreateMcubeNebulaTaskRequest {
	s.GreyConfigInfo = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetGreyEndtime(v string) *CreateMcubeNebulaTaskRequest {
	s.GreyEndtime = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetGreyEndtimeData(v string) *CreateMcubeNebulaTaskRequest {
	s.GreyEndtimeData = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetGreyEndtimeStr(v string) *CreateMcubeNebulaTaskRequest {
	s.GreyEndtimeStr = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetGreyNum(v int32) *CreateMcubeNebulaTaskRequest {
	s.GreyNum = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetGreyUrl(v string) *CreateMcubeNebulaTaskRequest {
	s.GreyUrl = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetId(v int64) *CreateMcubeNebulaTaskRequest {
	s.Id = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetMemo(v string) *CreateMcubeNebulaTaskRequest {
	s.Memo = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetModifier(v string) *CreateMcubeNebulaTaskRequest {
	s.Modifier = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetPackageId(v int64) *CreateMcubeNebulaTaskRequest {
	s.PackageId = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetPercent(v int32) *CreateMcubeNebulaTaskRequest {
	s.Percent = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetPlatform(v string) *CreateMcubeNebulaTaskRequest {
	s.Platform = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetProductId(v string) *CreateMcubeNebulaTaskRequest {
	s.ProductId = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetProductVersion(v string) *CreateMcubeNebulaTaskRequest {
	s.ProductVersion = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetPublishMode(v int32) *CreateMcubeNebulaTaskRequest {
	s.PublishMode = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetPublishType(v int32) *CreateMcubeNebulaTaskRequest {
	s.PublishType = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetReleaseVersion(v string) *CreateMcubeNebulaTaskRequest {
	s.ReleaseVersion = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetResIds(v string) *CreateMcubeNebulaTaskRequest {
	s.ResIds = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetSerialVersionUID(v int64) *CreateMcubeNebulaTaskRequest {
	s.SerialVersionUID = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetStatus(v int32) *CreateMcubeNebulaTaskRequest {
	s.Status = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetSyncMode(v string) *CreateMcubeNebulaTaskRequest {
	s.SyncMode = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetSyncResult(v string) *CreateMcubeNebulaTaskRequest {
	s.SyncResult = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetTaskName(v string) *CreateMcubeNebulaTaskRequest {
	s.TaskName = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetTaskStatus(v int32) *CreateMcubeNebulaTaskRequest {
	s.TaskStatus = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetTaskType(v int32) *CreateMcubeNebulaTaskRequest {
	s.TaskType = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetTaskVersion(v int64) *CreateMcubeNebulaTaskRequest {
	s.TaskVersion = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetTenantId(v string) *CreateMcubeNebulaTaskRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetUpgradeNoticeNum(v int64) *CreateMcubeNebulaTaskRequest {
	s.UpgradeNoticeNum = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetUpgradeProgress(v string) *CreateMcubeNebulaTaskRequest {
	s.UpgradeProgress = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetWhitelistIds(v string) *CreateMcubeNebulaTaskRequest {
	s.WhitelistIds = &v
	return s
}

func (s *CreateMcubeNebulaTaskRequest) SetWorkspaceId(v string) *CreateMcubeNebulaTaskRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMcubeNebulaTaskResponseBody struct {
	CreateMcubeNebulaTaskResult *CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult `json:"CreateMcubeNebulaTaskResult,omitempty" xml:"CreateMcubeNebulaTaskResult,omitempty" type:"Struct"`
	RequestId                   *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode                  *string                                                       `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage               *string                                                       `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMcubeNebulaTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeNebulaTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMcubeNebulaTaskResponseBody) SetCreateMcubeNebulaTaskResult(v *CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult) *CreateMcubeNebulaTaskResponseBody {
	s.CreateMcubeNebulaTaskResult = v
	return s
}

func (s *CreateMcubeNebulaTaskResponseBody) SetRequestId(v string) *CreateMcubeNebulaTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMcubeNebulaTaskResponseBody) SetResultCode(v string) *CreateMcubeNebulaTaskResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMcubeNebulaTaskResponseBody) SetResultMessage(v string) *CreateMcubeNebulaTaskResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	NebulaTaskId *string `json:"NebulaTaskId,omitempty" xml:"NebulaTaskId,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg    *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult) GoString() string {
	return s.String()
}

func (s *CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult) SetErrorCode(v string) *CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult {
	s.ErrorCode = &v
	return s
}

func (s *CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult) SetNebulaTaskId(v string) *CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult {
	s.NebulaTaskId = &v
	return s
}

func (s *CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult) SetRequestId(v string) *CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult {
	s.RequestId = &v
	return s
}

func (s *CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult) SetResultMsg(v string) *CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult {
	s.ResultMsg = &v
	return s
}

func (s *CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult) SetSuccess(v bool) *CreateMcubeNebulaTaskResponseBodyCreateMcubeNebulaTaskResult {
	s.Success = &v
	return s
}

type CreateMcubeNebulaTaskResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMcubeNebulaTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMcubeNebulaTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeNebulaTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateMcubeNebulaTaskResponse) SetHeaders(v map[string]*string) *CreateMcubeNebulaTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateMcubeNebulaTaskResponse) SetStatusCode(v int32) *CreateMcubeNebulaTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMcubeNebulaTaskResponse) SetBody(v *CreateMcubeNebulaTaskResponseBody) *CreateMcubeNebulaTaskResponse {
	s.Body = v
	return s
}

type CreateMcubeUpgradePackageRequest struct {
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppVersion       *string `json:"AppVersion,omitempty" xml:"AppVersion,omitempty"`
	AppstoreUrl      *string `json:"AppstoreUrl,omitempty" xml:"AppstoreUrl,omitempty"`
	BundleId         *string `json:"BundleId,omitempty" xml:"BundleId,omitempty"`
	CustomDomainName *string `json:"CustomDomainName,omitempty" xml:"CustomDomainName,omitempty"`
	Desc             *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	DownloadUrl      *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	FileUrl          *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	IconFileUrl      *string `json:"IconFileUrl,omitempty" xml:"IconFileUrl,omitempty"`
	InstallAmount    *int32  `json:"InstallAmount,omitempty" xml:"InstallAmount,omitempty"`
	IosSymbolfileUrl *string `json:"IosSymbolfileUrl,omitempty" xml:"IosSymbolfileUrl,omitempty"`
	IsEnterprise     *int32  `json:"IsEnterprise,omitempty" xml:"IsEnterprise,omitempty"`
	NeedCheck        *int32  `json:"NeedCheck,omitempty" xml:"NeedCheck,omitempty"`
	OnexFlag         *bool   `json:"OnexFlag,omitempty" xml:"OnexFlag,omitempty"`
	Platform         *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	TenantId         *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	ValidDays        *int32  `json:"ValidDays,omitempty" xml:"ValidDays,omitempty"`
	WorkspaceId      *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMcubeUpgradePackageRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeUpgradePackageRequest) GoString() string {
	return s.String()
}

func (s *CreateMcubeUpgradePackageRequest) SetAppId(v string) *CreateMcubeUpgradePackageRequest {
	s.AppId = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetAppVersion(v string) *CreateMcubeUpgradePackageRequest {
	s.AppVersion = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetAppstoreUrl(v string) *CreateMcubeUpgradePackageRequest {
	s.AppstoreUrl = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetBundleId(v string) *CreateMcubeUpgradePackageRequest {
	s.BundleId = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetCustomDomainName(v string) *CreateMcubeUpgradePackageRequest {
	s.CustomDomainName = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetDesc(v string) *CreateMcubeUpgradePackageRequest {
	s.Desc = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetDownloadUrl(v string) *CreateMcubeUpgradePackageRequest {
	s.DownloadUrl = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetFileUrl(v string) *CreateMcubeUpgradePackageRequest {
	s.FileUrl = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetIconFileUrl(v string) *CreateMcubeUpgradePackageRequest {
	s.IconFileUrl = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetInstallAmount(v int32) *CreateMcubeUpgradePackageRequest {
	s.InstallAmount = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetIosSymbolfileUrl(v string) *CreateMcubeUpgradePackageRequest {
	s.IosSymbolfileUrl = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetIsEnterprise(v int32) *CreateMcubeUpgradePackageRequest {
	s.IsEnterprise = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetNeedCheck(v int32) *CreateMcubeUpgradePackageRequest {
	s.NeedCheck = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetOnexFlag(v bool) *CreateMcubeUpgradePackageRequest {
	s.OnexFlag = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetPlatform(v string) *CreateMcubeUpgradePackageRequest {
	s.Platform = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetTenantId(v string) *CreateMcubeUpgradePackageRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetValidDays(v int32) *CreateMcubeUpgradePackageRequest {
	s.ValidDays = &v
	return s
}

func (s *CreateMcubeUpgradePackageRequest) SetWorkspaceId(v string) *CreateMcubeUpgradePackageRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMcubeUpgradePackageResponseBody struct {
	RequestId     *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                             `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *CreateMcubeUpgradePackageResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                             `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMcubeUpgradePackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeUpgradePackageResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMcubeUpgradePackageResponseBody) SetRequestId(v string) *CreateMcubeUpgradePackageResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMcubeUpgradePackageResponseBody) SetResultCode(v string) *CreateMcubeUpgradePackageResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMcubeUpgradePackageResponseBody) SetResultContent(v *CreateMcubeUpgradePackageResponseBodyResultContent) *CreateMcubeUpgradePackageResponseBody {
	s.ResultContent = v
	return s
}

func (s *CreateMcubeUpgradePackageResponseBody) SetResultMessage(v string) *CreateMcubeUpgradePackageResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMcubeUpgradePackageResponseBodyResultContent struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMcubeUpgradePackageResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeUpgradePackageResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *CreateMcubeUpgradePackageResponseBodyResultContent) SetData(v string) *CreateMcubeUpgradePackageResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *CreateMcubeUpgradePackageResponseBodyResultContent) SetErrorCode(v string) *CreateMcubeUpgradePackageResponseBodyResultContent {
	s.ErrorCode = &v
	return s
}

func (s *CreateMcubeUpgradePackageResponseBodyResultContent) SetRequestId(v string) *CreateMcubeUpgradePackageResponseBodyResultContent {
	s.RequestId = &v
	return s
}

func (s *CreateMcubeUpgradePackageResponseBodyResultContent) SetResultMsg(v string) *CreateMcubeUpgradePackageResponseBodyResultContent {
	s.ResultMsg = &v
	return s
}

func (s *CreateMcubeUpgradePackageResponseBodyResultContent) SetSuccess(v bool) *CreateMcubeUpgradePackageResponseBodyResultContent {
	s.Success = &v
	return s
}

type CreateMcubeUpgradePackageResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMcubeUpgradePackageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMcubeUpgradePackageResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeUpgradePackageResponse) GoString() string {
	return s.String()
}

func (s *CreateMcubeUpgradePackageResponse) SetHeaders(v map[string]*string) *CreateMcubeUpgradePackageResponse {
	s.Headers = v
	return s
}

func (s *CreateMcubeUpgradePackageResponse) SetStatusCode(v int32) *CreateMcubeUpgradePackageResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMcubeUpgradePackageResponse) SetBody(v *CreateMcubeUpgradePackageResponseBody) *CreateMcubeUpgradePackageResponse {
	s.Body = v
	return s
}

type CreateMcubeUpgradeTaskRequest struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GreyConfigInfo  *string `json:"GreyConfigInfo,omitempty" xml:"GreyConfigInfo,omitempty"`
	GreyEndtimeData *string `json:"GreyEndtimeData,omitempty" xml:"GreyEndtimeData,omitempty"`
	GreyNum         *int32  `json:"GreyNum,omitempty" xml:"GreyNum,omitempty"`
	HistoryForce    *int32  `json:"HistoryForce,omitempty" xml:"HistoryForce,omitempty"`
	Memo            *string `json:"Memo,omitempty" xml:"Memo,omitempty"`
	PackageInfoId   *int64  `json:"PackageInfoId,omitempty" xml:"PackageInfoId,omitempty"`
	PublishMode     *int32  `json:"PublishMode,omitempty" xml:"PublishMode,omitempty"`
	PublishType     *int32  `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	TenantId        *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	UpgradeContent  *string `json:"UpgradeContent,omitempty" xml:"UpgradeContent,omitempty"`
	UpgradeType     *int32  `json:"UpgradeType,omitempty" xml:"UpgradeType,omitempty"`
	WhitelistIds    *string `json:"WhitelistIds,omitempty" xml:"WhitelistIds,omitempty"`
	WorkspaceId     *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMcubeUpgradeTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeUpgradeTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateMcubeUpgradeTaskRequest) SetAppId(v string) *CreateMcubeUpgradeTaskRequest {
	s.AppId = &v
	return s
}

func (s *CreateMcubeUpgradeTaskRequest) SetGreyConfigInfo(v string) *CreateMcubeUpgradeTaskRequest {
	s.GreyConfigInfo = &v
	return s
}

func (s *CreateMcubeUpgradeTaskRequest) SetGreyEndtimeData(v string) *CreateMcubeUpgradeTaskRequest {
	s.GreyEndtimeData = &v
	return s
}

func (s *CreateMcubeUpgradeTaskRequest) SetGreyNum(v int32) *CreateMcubeUpgradeTaskRequest {
	s.GreyNum = &v
	return s
}

func (s *CreateMcubeUpgradeTaskRequest) SetHistoryForce(v int32) *CreateMcubeUpgradeTaskRequest {
	s.HistoryForce = &v
	return s
}

func (s *CreateMcubeUpgradeTaskRequest) SetMemo(v string) *CreateMcubeUpgradeTaskRequest {
	s.Memo = &v
	return s
}

func (s *CreateMcubeUpgradeTaskRequest) SetPackageInfoId(v int64) *CreateMcubeUpgradeTaskRequest {
	s.PackageInfoId = &v
	return s
}

func (s *CreateMcubeUpgradeTaskRequest) SetPublishMode(v int32) *CreateMcubeUpgradeTaskRequest {
	s.PublishMode = &v
	return s
}

func (s *CreateMcubeUpgradeTaskRequest) SetPublishType(v int32) *CreateMcubeUpgradeTaskRequest {
	s.PublishType = &v
	return s
}

func (s *CreateMcubeUpgradeTaskRequest) SetTenantId(v string) *CreateMcubeUpgradeTaskRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMcubeUpgradeTaskRequest) SetUpgradeContent(v string) *CreateMcubeUpgradeTaskRequest {
	s.UpgradeContent = &v
	return s
}

func (s *CreateMcubeUpgradeTaskRequest) SetUpgradeType(v int32) *CreateMcubeUpgradeTaskRequest {
	s.UpgradeType = &v
	return s
}

func (s *CreateMcubeUpgradeTaskRequest) SetWhitelistIds(v string) *CreateMcubeUpgradeTaskRequest {
	s.WhitelistIds = &v
	return s
}

func (s *CreateMcubeUpgradeTaskRequest) SetWorkspaceId(v string) *CreateMcubeUpgradeTaskRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMcubeUpgradeTaskResponseBody struct {
	CreateTaskResult *CreateMcubeUpgradeTaskResponseBodyCreateTaskResult `json:"CreateTaskResult,omitempty" xml:"CreateTaskResult,omitempty" type:"Struct"`
	RequestId        *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode       *string                                             `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage    *string                                             `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMcubeUpgradeTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeUpgradeTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMcubeUpgradeTaskResponseBody) SetCreateTaskResult(v *CreateMcubeUpgradeTaskResponseBodyCreateTaskResult) *CreateMcubeUpgradeTaskResponseBody {
	s.CreateTaskResult = v
	return s
}

func (s *CreateMcubeUpgradeTaskResponseBody) SetRequestId(v string) *CreateMcubeUpgradeTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMcubeUpgradeTaskResponseBody) SetResultCode(v string) *CreateMcubeUpgradeTaskResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMcubeUpgradeTaskResponseBody) SetResultMessage(v string) *CreateMcubeUpgradeTaskResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMcubeUpgradeTaskResponseBodyCreateTaskResult struct {
	ErrorCode     *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg     *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success       *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	UpgradeTaskId *string `json:"upgradeTaskId,omitempty" xml:"upgradeTaskId,omitempty"`
}

func (s CreateMcubeUpgradeTaskResponseBodyCreateTaskResult) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeUpgradeTaskResponseBodyCreateTaskResult) GoString() string {
	return s.String()
}

func (s *CreateMcubeUpgradeTaskResponseBodyCreateTaskResult) SetErrorCode(v string) *CreateMcubeUpgradeTaskResponseBodyCreateTaskResult {
	s.ErrorCode = &v
	return s
}

func (s *CreateMcubeUpgradeTaskResponseBodyCreateTaskResult) SetRequestId(v string) *CreateMcubeUpgradeTaskResponseBodyCreateTaskResult {
	s.RequestId = &v
	return s
}

func (s *CreateMcubeUpgradeTaskResponseBodyCreateTaskResult) SetResultMsg(v string) *CreateMcubeUpgradeTaskResponseBodyCreateTaskResult {
	s.ResultMsg = &v
	return s
}

func (s *CreateMcubeUpgradeTaskResponseBodyCreateTaskResult) SetSuccess(v bool) *CreateMcubeUpgradeTaskResponseBodyCreateTaskResult {
	s.Success = &v
	return s
}

func (s *CreateMcubeUpgradeTaskResponseBodyCreateTaskResult) SetUpgradeTaskId(v string) *CreateMcubeUpgradeTaskResponseBodyCreateTaskResult {
	s.UpgradeTaskId = &v
	return s
}

type CreateMcubeUpgradeTaskResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMcubeUpgradeTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMcubeUpgradeTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeUpgradeTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateMcubeUpgradeTaskResponse) SetHeaders(v map[string]*string) *CreateMcubeUpgradeTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateMcubeUpgradeTaskResponse) SetStatusCode(v int32) *CreateMcubeUpgradeTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMcubeUpgradeTaskResponse) SetBody(v *CreateMcubeUpgradeTaskResponseBody) *CreateMcubeUpgradeTaskResponse {
	s.Body = v
	return s
}

type CreateMcubeVhostRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Vhost       *string `json:"Vhost,omitempty" xml:"Vhost,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMcubeVhostRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeVhostRequest) GoString() string {
	return s.String()
}

func (s *CreateMcubeVhostRequest) SetAppId(v string) *CreateMcubeVhostRequest {
	s.AppId = &v
	return s
}

func (s *CreateMcubeVhostRequest) SetTenantId(v string) *CreateMcubeVhostRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMcubeVhostRequest) SetVhost(v string) *CreateMcubeVhostRequest {
	s.Vhost = &v
	return s
}

func (s *CreateMcubeVhostRequest) SetWorkspaceId(v string) *CreateMcubeVhostRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMcubeVhostResponseBody struct {
	CreateVhostResult *CreateMcubeVhostResponseBodyCreateVhostResult `json:"CreateVhostResult,omitempty" xml:"CreateVhostResult,omitempty" type:"Struct"`
	RequestId         *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode        *string                                        `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage     *string                                        `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMcubeVhostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeVhostResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMcubeVhostResponseBody) SetCreateVhostResult(v *CreateMcubeVhostResponseBodyCreateVhostResult) *CreateMcubeVhostResponseBody {
	s.CreateVhostResult = v
	return s
}

func (s *CreateMcubeVhostResponseBody) SetRequestId(v string) *CreateMcubeVhostResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMcubeVhostResponseBody) SetResultCode(v string) *CreateMcubeVhostResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMcubeVhostResponseBody) SetResultMessage(v string) *CreateMcubeVhostResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMcubeVhostResponseBodyCreateVhostResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMcubeVhostResponseBodyCreateVhostResult) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeVhostResponseBodyCreateVhostResult) GoString() string {
	return s.String()
}

func (s *CreateMcubeVhostResponseBodyCreateVhostResult) SetData(v string) *CreateMcubeVhostResponseBodyCreateVhostResult {
	s.Data = &v
	return s
}

func (s *CreateMcubeVhostResponseBodyCreateVhostResult) SetResultMsg(v string) *CreateMcubeVhostResponseBodyCreateVhostResult {
	s.ResultMsg = &v
	return s
}

func (s *CreateMcubeVhostResponseBodyCreateVhostResult) SetSuccess(v bool) *CreateMcubeVhostResponseBodyCreateVhostResult {
	s.Success = &v
	return s
}

type CreateMcubeVhostResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMcubeVhostResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMcubeVhostResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeVhostResponse) GoString() string {
	return s.String()
}

func (s *CreateMcubeVhostResponse) SetHeaders(v map[string]*string) *CreateMcubeVhostResponse {
	s.Headers = v
	return s
}

func (s *CreateMcubeVhostResponse) SetStatusCode(v int32) *CreateMcubeVhostResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMcubeVhostResponse) SetBody(v *CreateMcubeVhostResponseBody) *CreateMcubeVhostResponse {
	s.Body = v
	return s
}

type CreateMcubeWhitelistRequest struct {
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	TenantId      *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WhiteListName *string `json:"WhiteListName,omitempty" xml:"WhiteListName,omitempty"`
	WhitelistType *string `json:"WhitelistType,omitempty" xml:"WhitelistType,omitempty"`
	WorkspaceId   *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMcubeWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeWhitelistRequest) GoString() string {
	return s.String()
}

func (s *CreateMcubeWhitelistRequest) SetAppId(v string) *CreateMcubeWhitelistRequest {
	s.AppId = &v
	return s
}

func (s *CreateMcubeWhitelistRequest) SetTenantId(v string) *CreateMcubeWhitelistRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMcubeWhitelistRequest) SetWhiteListName(v string) *CreateMcubeWhitelistRequest {
	s.WhiteListName = &v
	return s
}

func (s *CreateMcubeWhitelistRequest) SetWhitelistType(v string) *CreateMcubeWhitelistRequest {
	s.WhitelistType = &v
	return s
}

func (s *CreateMcubeWhitelistRequest) SetWorkspaceId(v string) *CreateMcubeWhitelistRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMcubeWhitelistResponseBody struct {
	CreateWhitelistResult *CreateMcubeWhitelistResponseBodyCreateWhitelistResult `json:"CreateWhitelistResult,omitempty" xml:"CreateWhitelistResult,omitempty" type:"Struct"`
	RequestId             *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode            *string                                                `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage         *string                                                `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMcubeWhitelistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeWhitelistResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMcubeWhitelistResponseBody) SetCreateWhitelistResult(v *CreateMcubeWhitelistResponseBodyCreateWhitelistResult) *CreateMcubeWhitelistResponseBody {
	s.CreateWhitelistResult = v
	return s
}

func (s *CreateMcubeWhitelistResponseBody) SetRequestId(v string) *CreateMcubeWhitelistResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMcubeWhitelistResponseBody) SetResultCode(v string) *CreateMcubeWhitelistResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMcubeWhitelistResponseBody) SetResultMessage(v string) *CreateMcubeWhitelistResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMcubeWhitelistResponseBodyCreateWhitelistResult struct {
	ResultMsg   *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success     *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	WhitelistId *string `json:"WhitelistId,omitempty" xml:"WhitelistId,omitempty"`
}

func (s CreateMcubeWhitelistResponseBodyCreateWhitelistResult) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeWhitelistResponseBodyCreateWhitelistResult) GoString() string {
	return s.String()
}

func (s *CreateMcubeWhitelistResponseBodyCreateWhitelistResult) SetResultMsg(v string) *CreateMcubeWhitelistResponseBodyCreateWhitelistResult {
	s.ResultMsg = &v
	return s
}

func (s *CreateMcubeWhitelistResponseBodyCreateWhitelistResult) SetSuccess(v bool) *CreateMcubeWhitelistResponseBodyCreateWhitelistResult {
	s.Success = &v
	return s
}

func (s *CreateMcubeWhitelistResponseBodyCreateWhitelistResult) SetWhitelistId(v string) *CreateMcubeWhitelistResponseBodyCreateWhitelistResult {
	s.WhitelistId = &v
	return s
}

type CreateMcubeWhitelistResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMcubeWhitelistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMcubeWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeWhitelistResponse) GoString() string {
	return s.String()
}

func (s *CreateMcubeWhitelistResponse) SetHeaders(v map[string]*string) *CreateMcubeWhitelistResponse {
	s.Headers = v
	return s
}

func (s *CreateMcubeWhitelistResponse) SetStatusCode(v int32) *CreateMcubeWhitelistResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMcubeWhitelistResponse) SetBody(v *CreateMcubeWhitelistResponseBody) *CreateMcubeWhitelistResponse {
	s.Body = v
	return s
}

type CreateMcubeWhitelistForIdeRequest struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	TenantId       *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	UserId         *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	WhitelistValue *string `json:"WhitelistValue,omitempty" xml:"WhitelistValue,omitempty"`
	WorkspaceId    *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMcubeWhitelistForIdeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeWhitelistForIdeRequest) GoString() string {
	return s.String()
}

func (s *CreateMcubeWhitelistForIdeRequest) SetAppId(v string) *CreateMcubeWhitelistForIdeRequest {
	s.AppId = &v
	return s
}

func (s *CreateMcubeWhitelistForIdeRequest) SetTenantId(v string) *CreateMcubeWhitelistForIdeRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMcubeWhitelistForIdeRequest) SetUserId(v string) *CreateMcubeWhitelistForIdeRequest {
	s.UserId = &v
	return s
}

func (s *CreateMcubeWhitelistForIdeRequest) SetWhitelistValue(v string) *CreateMcubeWhitelistForIdeRequest {
	s.WhitelistValue = &v
	return s
}

func (s *CreateMcubeWhitelistForIdeRequest) SetWorkspaceId(v string) *CreateMcubeWhitelistForIdeRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMcubeWhitelistForIdeResponseBody struct {
	CreateWhitelistForIdeResult *CreateMcubeWhitelistForIdeResponseBodyCreateWhitelistForIdeResult `json:"CreateWhitelistForIdeResult,omitempty" xml:"CreateWhitelistForIdeResult,omitempty" type:"Struct"`
	RequestId                   *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode                  *string                                                            `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage               *string                                                            `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMcubeWhitelistForIdeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeWhitelistForIdeResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMcubeWhitelistForIdeResponseBody) SetCreateWhitelistForIdeResult(v *CreateMcubeWhitelistForIdeResponseBodyCreateWhitelistForIdeResult) *CreateMcubeWhitelistForIdeResponseBody {
	s.CreateWhitelistForIdeResult = v
	return s
}

func (s *CreateMcubeWhitelistForIdeResponseBody) SetRequestId(v string) *CreateMcubeWhitelistForIdeResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMcubeWhitelistForIdeResponseBody) SetResultCode(v string) *CreateMcubeWhitelistForIdeResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMcubeWhitelistForIdeResponseBody) SetResultMessage(v string) *CreateMcubeWhitelistForIdeResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMcubeWhitelistForIdeResponseBodyCreateWhitelistForIdeResult struct {
	ResultMsg   *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success     *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	WhitelistId *string `json:"WhitelistId,omitempty" xml:"WhitelistId,omitempty"`
}

func (s CreateMcubeWhitelistForIdeResponseBodyCreateWhitelistForIdeResult) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeWhitelistForIdeResponseBodyCreateWhitelistForIdeResult) GoString() string {
	return s.String()
}

func (s *CreateMcubeWhitelistForIdeResponseBodyCreateWhitelistForIdeResult) SetResultMsg(v string) *CreateMcubeWhitelistForIdeResponseBodyCreateWhitelistForIdeResult {
	s.ResultMsg = &v
	return s
}

func (s *CreateMcubeWhitelistForIdeResponseBodyCreateWhitelistForIdeResult) SetSuccess(v bool) *CreateMcubeWhitelistForIdeResponseBodyCreateWhitelistForIdeResult {
	s.Success = &v
	return s
}

func (s *CreateMcubeWhitelistForIdeResponseBodyCreateWhitelistForIdeResult) SetWhitelistId(v string) *CreateMcubeWhitelistForIdeResponseBodyCreateWhitelistForIdeResult {
	s.WhitelistId = &v
	return s
}

type CreateMcubeWhitelistForIdeResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMcubeWhitelistForIdeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMcubeWhitelistForIdeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMcubeWhitelistForIdeResponse) GoString() string {
	return s.String()
}

func (s *CreateMcubeWhitelistForIdeResponse) SetHeaders(v map[string]*string) *CreateMcubeWhitelistForIdeResponse {
	s.Headers = v
	return s
}

func (s *CreateMcubeWhitelistForIdeResponse) SetStatusCode(v int32) *CreateMcubeWhitelistForIdeResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMcubeWhitelistForIdeResponse) SetBody(v *CreateMcubeWhitelistForIdeResponseBody) *CreateMcubeWhitelistForIdeResponse {
	s.Body = v
	return s
}

type CreateMdsMiniprogramTaskRequest struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	GreyConfigInfo  *string `json:"GreyConfigInfo,omitempty" xml:"GreyConfigInfo,omitempty"`
	GreyEndtimeData *string `json:"GreyEndtimeData,omitempty" xml:"GreyEndtimeData,omitempty"`
	GreyNum         *string `json:"GreyNum,omitempty" xml:"GreyNum,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Memo            *string `json:"Memo,omitempty" xml:"Memo,omitempty"`
	PackageId       *int64  `json:"PackageId,omitempty" xml:"PackageId,omitempty"`
	PublishMode     *string `json:"PublishMode,omitempty" xml:"PublishMode,omitempty"`
	PublishType     *int64  `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	SyncMode        *string `json:"SyncMode,omitempty" xml:"SyncMode,omitempty"`
	TenantId        *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WhitelistIds    *string `json:"WhitelistIds,omitempty" xml:"WhitelistIds,omitempty"`
	WorkspaceId     *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMdsMiniprogramTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMdsMiniprogramTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateMdsMiniprogramTaskRequest) SetAppId(v string) *CreateMdsMiniprogramTaskRequest {
	s.AppId = &v
	return s
}

func (s *CreateMdsMiniprogramTaskRequest) SetGreyConfigInfo(v string) *CreateMdsMiniprogramTaskRequest {
	s.GreyConfigInfo = &v
	return s
}

func (s *CreateMdsMiniprogramTaskRequest) SetGreyEndtimeData(v string) *CreateMdsMiniprogramTaskRequest {
	s.GreyEndtimeData = &v
	return s
}

func (s *CreateMdsMiniprogramTaskRequest) SetGreyNum(v string) *CreateMdsMiniprogramTaskRequest {
	s.GreyNum = &v
	return s
}

func (s *CreateMdsMiniprogramTaskRequest) SetId(v int64) *CreateMdsMiniprogramTaskRequest {
	s.Id = &v
	return s
}

func (s *CreateMdsMiniprogramTaskRequest) SetMemo(v string) *CreateMdsMiniprogramTaskRequest {
	s.Memo = &v
	return s
}

func (s *CreateMdsMiniprogramTaskRequest) SetPackageId(v int64) *CreateMdsMiniprogramTaskRequest {
	s.PackageId = &v
	return s
}

func (s *CreateMdsMiniprogramTaskRequest) SetPublishMode(v string) *CreateMdsMiniprogramTaskRequest {
	s.PublishMode = &v
	return s
}

func (s *CreateMdsMiniprogramTaskRequest) SetPublishType(v int64) *CreateMdsMiniprogramTaskRequest {
	s.PublishType = &v
	return s
}

func (s *CreateMdsMiniprogramTaskRequest) SetSyncMode(v string) *CreateMdsMiniprogramTaskRequest {
	s.SyncMode = &v
	return s
}

func (s *CreateMdsMiniprogramTaskRequest) SetTenantId(v string) *CreateMdsMiniprogramTaskRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMdsMiniprogramTaskRequest) SetWhitelistIds(v string) *CreateMdsMiniprogramTaskRequest {
	s.WhitelistIds = &v
	return s
}

func (s *CreateMdsMiniprogramTaskRequest) SetWorkspaceId(v string) *CreateMdsMiniprogramTaskRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMdsMiniprogramTaskResponseBody struct {
	RequestId     *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                            `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *CreateMdsMiniprogramTaskResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                            `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMdsMiniprogramTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMdsMiniprogramTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMdsMiniprogramTaskResponseBody) SetRequestId(v string) *CreateMdsMiniprogramTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMdsMiniprogramTaskResponseBody) SetResultCode(v string) *CreateMdsMiniprogramTaskResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMdsMiniprogramTaskResponseBody) SetResultContent(v *CreateMdsMiniprogramTaskResponseBodyResultContent) *CreateMdsMiniprogramTaskResponseBody {
	s.ResultContent = v
	return s
}

func (s *CreateMdsMiniprogramTaskResponseBody) SetResultMessage(v string) *CreateMdsMiniprogramTaskResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMdsMiniprogramTaskResponseBodyResultContent struct {
	Data      *CreateMdsMiniprogramTaskResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateMdsMiniprogramTaskResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s CreateMdsMiniprogramTaskResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *CreateMdsMiniprogramTaskResponseBodyResultContent) SetData(v *CreateMdsMiniprogramTaskResponseBodyResultContentData) *CreateMdsMiniprogramTaskResponseBodyResultContent {
	s.Data = v
	return s
}

func (s *CreateMdsMiniprogramTaskResponseBodyResultContent) SetRequestId(v string) *CreateMdsMiniprogramTaskResponseBodyResultContent {
	s.RequestId = &v
	return s
}

type CreateMdsMiniprogramTaskResponseBodyResultContentData struct {
	Content   *string `json:"Content,omitempty" xml:"Content,omitempty"`
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMdsMiniprogramTaskResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s CreateMdsMiniprogramTaskResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *CreateMdsMiniprogramTaskResponseBodyResultContentData) SetContent(v string) *CreateMdsMiniprogramTaskResponseBodyResultContentData {
	s.Content = &v
	return s
}

func (s *CreateMdsMiniprogramTaskResponseBodyResultContentData) SetErrorCode(v string) *CreateMdsMiniprogramTaskResponseBodyResultContentData {
	s.ErrorCode = &v
	return s
}

func (s *CreateMdsMiniprogramTaskResponseBodyResultContentData) SetRequestId(v string) *CreateMdsMiniprogramTaskResponseBodyResultContentData {
	s.RequestId = &v
	return s
}

func (s *CreateMdsMiniprogramTaskResponseBodyResultContentData) SetResultMsg(v string) *CreateMdsMiniprogramTaskResponseBodyResultContentData {
	s.ResultMsg = &v
	return s
}

func (s *CreateMdsMiniprogramTaskResponseBodyResultContentData) SetSuccess(v bool) *CreateMdsMiniprogramTaskResponseBodyResultContentData {
	s.Success = &v
	return s
}

type CreateMdsMiniprogramTaskResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMdsMiniprogramTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMdsMiniprogramTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMdsMiniprogramTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateMdsMiniprogramTaskResponse) SetHeaders(v map[string]*string) *CreateMdsMiniprogramTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateMdsMiniprogramTaskResponse) SetStatusCode(v int32) *CreateMdsMiniprogramTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMdsMiniprogramTaskResponse) SetBody(v *CreateMdsMiniprogramTaskResponseBody) *CreateMdsMiniprogramTaskResponse {
	s.Body = v
	return s
}

type CreateMsaEnhanceRequest struct {
	AppId                                  *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMsaEnhanceCreateJsonStr *string `json:"MpaasMappcenterMsaEnhanceCreateJsonStr,omitempty" xml:"MpaasMappcenterMsaEnhanceCreateJsonStr,omitempty"`
	TenantId                               *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                            *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateMsaEnhanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMsaEnhanceRequest) GoString() string {
	return s.String()
}

func (s *CreateMsaEnhanceRequest) SetAppId(v string) *CreateMsaEnhanceRequest {
	s.AppId = &v
	return s
}

func (s *CreateMsaEnhanceRequest) SetMpaasMappcenterMsaEnhanceCreateJsonStr(v string) *CreateMsaEnhanceRequest {
	s.MpaasMappcenterMsaEnhanceCreateJsonStr = &v
	return s
}

func (s *CreateMsaEnhanceRequest) SetTenantId(v string) *CreateMsaEnhanceRequest {
	s.TenantId = &v
	return s
}

func (s *CreateMsaEnhanceRequest) SetWorkspaceId(v string) *CreateMsaEnhanceRequest {
	s.WorkspaceId = &v
	return s
}

type CreateMsaEnhanceResponseBody struct {
	RequestId     *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                    `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *CreateMsaEnhanceResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                    `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateMsaEnhanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMsaEnhanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMsaEnhanceResponseBody) SetRequestId(v string) *CreateMsaEnhanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMsaEnhanceResponseBody) SetResultCode(v string) *CreateMsaEnhanceResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateMsaEnhanceResponseBody) SetResultContent(v *CreateMsaEnhanceResponseBodyResultContent) *CreateMsaEnhanceResponseBody {
	s.ResultContent = v
	return s
}

func (s *CreateMsaEnhanceResponseBody) SetResultMessage(v string) *CreateMsaEnhanceResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateMsaEnhanceResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMsaEnhanceResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s CreateMsaEnhanceResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *CreateMsaEnhanceResponseBodyResultContent) SetCode(v string) *CreateMsaEnhanceResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *CreateMsaEnhanceResponseBodyResultContent) SetData(v string) *CreateMsaEnhanceResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *CreateMsaEnhanceResponseBodyResultContent) SetMessage(v string) *CreateMsaEnhanceResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *CreateMsaEnhanceResponseBodyResultContent) SetSuccess(v bool) *CreateMsaEnhanceResponseBodyResultContent {
	s.Success = &v
	return s
}

type CreateMsaEnhanceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMsaEnhanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMsaEnhanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMsaEnhanceResponse) GoString() string {
	return s.String()
}

func (s *CreateMsaEnhanceResponse) SetHeaders(v map[string]*string) *CreateMsaEnhanceResponse {
	s.Headers = v
	return s
}

func (s *CreateMsaEnhanceResponse) SetStatusCode(v int32) *CreateMsaEnhanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMsaEnhanceResponse) SetBody(v *CreateMsaEnhanceResponseBody) *CreateMsaEnhanceResponse {
	s.Body = v
	return s
}

type CreateOpenGlobalDataRequest struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppMaxVersion  *string `json:"AppMaxVersion,omitempty" xml:"AppMaxVersion,omitempty"`
	AppMinVersion  *string `json:"AppMinVersion,omitempty" xml:"AppMinVersion,omitempty"`
	BizType        *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ExtAttrStr     *string `json:"ExtAttrStr,omitempty" xml:"ExtAttrStr,omitempty"`
	MaxUid         *int64  `json:"MaxUid,omitempty" xml:"MaxUid,omitempty"`
	MinUid         *int64  `json:"MinUid,omitempty" xml:"MinUid,omitempty"`
	OsType         *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	Payload        *string `json:"Payload,omitempty" xml:"Payload,omitempty"`
	ThirdMsgId     *string `json:"ThirdMsgId,omitempty" xml:"ThirdMsgId,omitempty"`
	Uids           *string `json:"Uids,omitempty" xml:"Uids,omitempty"`
	ValidTimeEnd   *int64  `json:"ValidTimeEnd,omitempty" xml:"ValidTimeEnd,omitempty"`
	ValidTimeStart *int64  `json:"ValidTimeStart,omitempty" xml:"ValidTimeStart,omitempty"`
	WorkspaceId    *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateOpenGlobalDataRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOpenGlobalDataRequest) GoString() string {
	return s.String()
}

func (s *CreateOpenGlobalDataRequest) SetAppId(v string) *CreateOpenGlobalDataRequest {
	s.AppId = &v
	return s
}

func (s *CreateOpenGlobalDataRequest) SetAppMaxVersion(v string) *CreateOpenGlobalDataRequest {
	s.AppMaxVersion = &v
	return s
}

func (s *CreateOpenGlobalDataRequest) SetAppMinVersion(v string) *CreateOpenGlobalDataRequest {
	s.AppMinVersion = &v
	return s
}

func (s *CreateOpenGlobalDataRequest) SetBizType(v string) *CreateOpenGlobalDataRequest {
	s.BizType = &v
	return s
}

func (s *CreateOpenGlobalDataRequest) SetExtAttrStr(v string) *CreateOpenGlobalDataRequest {
	s.ExtAttrStr = &v
	return s
}

func (s *CreateOpenGlobalDataRequest) SetMaxUid(v int64) *CreateOpenGlobalDataRequest {
	s.MaxUid = &v
	return s
}

func (s *CreateOpenGlobalDataRequest) SetMinUid(v int64) *CreateOpenGlobalDataRequest {
	s.MinUid = &v
	return s
}

func (s *CreateOpenGlobalDataRequest) SetOsType(v string) *CreateOpenGlobalDataRequest {
	s.OsType = &v
	return s
}

func (s *CreateOpenGlobalDataRequest) SetPayload(v string) *CreateOpenGlobalDataRequest {
	s.Payload = &v
	return s
}

func (s *CreateOpenGlobalDataRequest) SetThirdMsgId(v string) *CreateOpenGlobalDataRequest {
	s.ThirdMsgId = &v
	return s
}

func (s *CreateOpenGlobalDataRequest) SetUids(v string) *CreateOpenGlobalDataRequest {
	s.Uids = &v
	return s
}

func (s *CreateOpenGlobalDataRequest) SetValidTimeEnd(v int64) *CreateOpenGlobalDataRequest {
	s.ValidTimeEnd = &v
	return s
}

func (s *CreateOpenGlobalDataRequest) SetValidTimeStart(v int64) *CreateOpenGlobalDataRequest {
	s.ValidTimeStart = &v
	return s
}

func (s *CreateOpenGlobalDataRequest) SetWorkspaceId(v string) *CreateOpenGlobalDataRequest {
	s.WorkspaceId = &v
	return s
}

type CreateOpenGlobalDataResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result        *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
	ResultCode    *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage *string `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateOpenGlobalDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOpenGlobalDataResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOpenGlobalDataResponseBody) SetRequestId(v string) *CreateOpenGlobalDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOpenGlobalDataResponseBody) SetResult(v bool) *CreateOpenGlobalDataResponseBody {
	s.Result = &v
	return s
}

func (s *CreateOpenGlobalDataResponseBody) SetResultCode(v string) *CreateOpenGlobalDataResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateOpenGlobalDataResponseBody) SetResultMessage(v string) *CreateOpenGlobalDataResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateOpenGlobalDataResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateOpenGlobalDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateOpenGlobalDataResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOpenGlobalDataResponse) GoString() string {
	return s.String()
}

func (s *CreateOpenGlobalDataResponse) SetHeaders(v map[string]*string) *CreateOpenGlobalDataResponse {
	s.Headers = v
	return s
}

func (s *CreateOpenGlobalDataResponse) SetStatusCode(v int32) *CreateOpenGlobalDataResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOpenGlobalDataResponse) SetBody(v *CreateOpenGlobalDataResponseBody) *CreateOpenGlobalDataResponse {
	s.Body = v
	return s
}

type CreateOpenSingleDataRequest struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppMaxVersion  *string `json:"AppMaxVersion,omitempty" xml:"AppMaxVersion,omitempty"`
	AppMinVersion  *string `json:"AppMinVersion,omitempty" xml:"AppMinVersion,omitempty"`
	BizType        *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	CheckOnline    *bool   `json:"CheckOnline,omitempty" xml:"CheckOnline,omitempty"`
	ExtAttrStr     *string `json:"ExtAttrStr,omitempty" xml:"ExtAttrStr,omitempty"`
	LinkToken      *string `json:"LinkToken,omitempty" xml:"LinkToken,omitempty"`
	OsType         *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	Payload        *string `json:"Payload,omitempty" xml:"Payload,omitempty"`
	ThirdMsgId     *string `json:"ThirdMsgId,omitempty" xml:"ThirdMsgId,omitempty"`
	ValidTimeEnd   *int64  `json:"ValidTimeEnd,omitempty" xml:"ValidTimeEnd,omitempty"`
	ValidTimeStart *int64  `json:"ValidTimeStart,omitempty" xml:"ValidTimeStart,omitempty"`
	WorkspaceId    *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateOpenSingleDataRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOpenSingleDataRequest) GoString() string {
	return s.String()
}

func (s *CreateOpenSingleDataRequest) SetAppId(v string) *CreateOpenSingleDataRequest {
	s.AppId = &v
	return s
}

func (s *CreateOpenSingleDataRequest) SetAppMaxVersion(v string) *CreateOpenSingleDataRequest {
	s.AppMaxVersion = &v
	return s
}

func (s *CreateOpenSingleDataRequest) SetAppMinVersion(v string) *CreateOpenSingleDataRequest {
	s.AppMinVersion = &v
	return s
}

func (s *CreateOpenSingleDataRequest) SetBizType(v string) *CreateOpenSingleDataRequest {
	s.BizType = &v
	return s
}

func (s *CreateOpenSingleDataRequest) SetCheckOnline(v bool) *CreateOpenSingleDataRequest {
	s.CheckOnline = &v
	return s
}

func (s *CreateOpenSingleDataRequest) SetExtAttrStr(v string) *CreateOpenSingleDataRequest {
	s.ExtAttrStr = &v
	return s
}

func (s *CreateOpenSingleDataRequest) SetLinkToken(v string) *CreateOpenSingleDataRequest {
	s.LinkToken = &v
	return s
}

func (s *CreateOpenSingleDataRequest) SetOsType(v string) *CreateOpenSingleDataRequest {
	s.OsType = &v
	return s
}

func (s *CreateOpenSingleDataRequest) SetPayload(v string) *CreateOpenSingleDataRequest {
	s.Payload = &v
	return s
}

func (s *CreateOpenSingleDataRequest) SetThirdMsgId(v string) *CreateOpenSingleDataRequest {
	s.ThirdMsgId = &v
	return s
}

func (s *CreateOpenSingleDataRequest) SetValidTimeEnd(v int64) *CreateOpenSingleDataRequest {
	s.ValidTimeEnd = &v
	return s
}

func (s *CreateOpenSingleDataRequest) SetValidTimeStart(v int64) *CreateOpenSingleDataRequest {
	s.ValidTimeStart = &v
	return s
}

func (s *CreateOpenSingleDataRequest) SetWorkspaceId(v string) *CreateOpenSingleDataRequest {
	s.WorkspaceId = &v
	return s
}

type CreateOpenSingleDataResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result        *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
	ResultCode    *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage *string `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s CreateOpenSingleDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOpenSingleDataResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOpenSingleDataResponseBody) SetRequestId(v string) *CreateOpenSingleDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOpenSingleDataResponseBody) SetResult(v bool) *CreateOpenSingleDataResponseBody {
	s.Result = &v
	return s
}

func (s *CreateOpenSingleDataResponseBody) SetResultCode(v string) *CreateOpenSingleDataResponseBody {
	s.ResultCode = &v
	return s
}

func (s *CreateOpenSingleDataResponseBody) SetResultMessage(v string) *CreateOpenSingleDataResponseBody {
	s.ResultMessage = &v
	return s
}

type CreateOpenSingleDataResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateOpenSingleDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateOpenSingleDataResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOpenSingleDataResponse) GoString() string {
	return s.String()
}

func (s *CreateOpenSingleDataResponse) SetHeaders(v map[string]*string) *CreateOpenSingleDataResponse {
	s.Headers = v
	return s
}

func (s *CreateOpenSingleDataResponse) SetStatusCode(v int32) *CreateOpenSingleDataResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOpenSingleDataResponse) SetBody(v *CreateOpenSingleDataResponseBody) *CreateOpenSingleDataResponse {
	s.Body = v
	return s
}

type DeleteCubecardWhitelistContentRequest struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	TenantId       *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WhitelistId    *string `json:"WhitelistId,omitempty" xml:"WhitelistId,omitempty"`
	WhitelistValue *string `json:"WhitelistValue,omitempty" xml:"WhitelistValue,omitempty"`
	WorkspaceId    *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteCubecardWhitelistContentRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCubecardWhitelistContentRequest) GoString() string {
	return s.String()
}

func (s *DeleteCubecardWhitelistContentRequest) SetAppId(v string) *DeleteCubecardWhitelistContentRequest {
	s.AppId = &v
	return s
}

func (s *DeleteCubecardWhitelistContentRequest) SetTenantId(v string) *DeleteCubecardWhitelistContentRequest {
	s.TenantId = &v
	return s
}

func (s *DeleteCubecardWhitelistContentRequest) SetWhitelistId(v string) *DeleteCubecardWhitelistContentRequest {
	s.WhitelistId = &v
	return s
}

func (s *DeleteCubecardWhitelistContentRequest) SetWhitelistValue(v string) *DeleteCubecardWhitelistContentRequest {
	s.WhitelistValue = &v
	return s
}

func (s *DeleteCubecardWhitelistContentRequest) SetWorkspaceId(v string) *DeleteCubecardWhitelistContentRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteCubecardWhitelistContentResponseBody struct {
	RequestId     *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                                  `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *DeleteCubecardWhitelistContentResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                                  `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s DeleteCubecardWhitelistContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCubecardWhitelistContentResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCubecardWhitelistContentResponseBody) SetRequestId(v string) *DeleteCubecardWhitelistContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCubecardWhitelistContentResponseBody) SetResultCode(v string) *DeleteCubecardWhitelistContentResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DeleteCubecardWhitelistContentResponseBody) SetResultContent(v *DeleteCubecardWhitelistContentResponseBodyResultContent) *DeleteCubecardWhitelistContentResponseBody {
	s.ResultContent = v
	return s
}

func (s *DeleteCubecardWhitelistContentResponseBody) SetResultMessage(v string) *DeleteCubecardWhitelistContentResponseBody {
	s.ResultMessage = &v
	return s
}

type DeleteCubecardWhitelistContentResponseBodyResultContent struct {
	Data      *DeleteCubecardWhitelistContentResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCubecardWhitelistContentResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s DeleteCubecardWhitelistContentResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *DeleteCubecardWhitelistContentResponseBodyResultContent) SetData(v *DeleteCubecardWhitelistContentResponseBodyResultContentData) *DeleteCubecardWhitelistContentResponseBodyResultContent {
	s.Data = v
	return s
}

func (s *DeleteCubecardWhitelistContentResponseBodyResultContent) SetRequestId(v string) *DeleteCubecardWhitelistContentResponseBodyResultContent {
	s.RequestId = &v
	return s
}

type DeleteCubecardWhitelistContentResponseBodyResultContentData struct {
	Content   *string `json:"Content,omitempty" xml:"Content,omitempty"`
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteCubecardWhitelistContentResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s DeleteCubecardWhitelistContentResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *DeleteCubecardWhitelistContentResponseBodyResultContentData) SetContent(v string) *DeleteCubecardWhitelistContentResponseBodyResultContentData {
	s.Content = &v
	return s
}

func (s *DeleteCubecardWhitelistContentResponseBodyResultContentData) SetErrorCode(v string) *DeleteCubecardWhitelistContentResponseBodyResultContentData {
	s.ErrorCode = &v
	return s
}

func (s *DeleteCubecardWhitelistContentResponseBodyResultContentData) SetResultMsg(v string) *DeleteCubecardWhitelistContentResponseBodyResultContentData {
	s.ResultMsg = &v
	return s
}

func (s *DeleteCubecardWhitelistContentResponseBodyResultContentData) SetSuccess(v bool) *DeleteCubecardWhitelistContentResponseBodyResultContentData {
	s.Success = &v
	return s
}

type DeleteCubecardWhitelistContentResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteCubecardWhitelistContentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCubecardWhitelistContentResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCubecardWhitelistContentResponse) GoString() string {
	return s.String()
}

func (s *DeleteCubecardWhitelistContentResponse) SetHeaders(v map[string]*string) *DeleteCubecardWhitelistContentResponse {
	s.Headers = v
	return s
}

func (s *DeleteCubecardWhitelistContentResponse) SetStatusCode(v int32) *DeleteCubecardWhitelistContentResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCubecardWhitelistContentResponse) SetBody(v *DeleteCubecardWhitelistContentResponseBody) *DeleteCubecardWhitelistContentResponse {
	s.Body = v
	return s
}

type DeleteMcdpAimRequest struct {
	AppId                               *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMcdpAimDeleteJsonStr *string `json:"MpaasMappcenterMcdpAimDeleteJsonStr,omitempty" xml:"MpaasMappcenterMcdpAimDeleteJsonStr,omitempty"`
	TenantId                            *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                         *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteMcdpAimRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpAimRequest) GoString() string {
	return s.String()
}

func (s *DeleteMcdpAimRequest) SetAppId(v string) *DeleteMcdpAimRequest {
	s.AppId = &v
	return s
}

func (s *DeleteMcdpAimRequest) SetMpaasMappcenterMcdpAimDeleteJsonStr(v string) *DeleteMcdpAimRequest {
	s.MpaasMappcenterMcdpAimDeleteJsonStr = &v
	return s
}

func (s *DeleteMcdpAimRequest) SetTenantId(v string) *DeleteMcdpAimRequest {
	s.TenantId = &v
	return s
}

func (s *DeleteMcdpAimRequest) SetWorkspaceId(v string) *DeleteMcdpAimRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteMcdpAimResponseBody struct {
	RequestId     *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                 `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *DeleteMcdpAimResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                 `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s DeleteMcdpAimResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpAimResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMcdpAimResponseBody) SetRequestId(v string) *DeleteMcdpAimResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMcdpAimResponseBody) SetResultCode(v string) *DeleteMcdpAimResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DeleteMcdpAimResponseBody) SetResultContent(v *DeleteMcdpAimResponseBodyResultContent) *DeleteMcdpAimResponseBody {
	s.ResultContent = v
	return s
}

func (s *DeleteMcdpAimResponseBody) SetResultMessage(v string) *DeleteMcdpAimResponseBody {
	s.ResultMessage = &v
	return s
}

type DeleteMcdpAimResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMcdpAimResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpAimResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *DeleteMcdpAimResponseBodyResultContent) SetCode(v string) *DeleteMcdpAimResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *DeleteMcdpAimResponseBodyResultContent) SetData(v string) *DeleteMcdpAimResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *DeleteMcdpAimResponseBodyResultContent) SetMessage(v string) *DeleteMcdpAimResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *DeleteMcdpAimResponseBodyResultContent) SetSuccess(v bool) *DeleteMcdpAimResponseBodyResultContent {
	s.Success = &v
	return s
}

type DeleteMcdpAimResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMcdpAimResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMcdpAimResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpAimResponse) GoString() string {
	return s.String()
}

func (s *DeleteMcdpAimResponse) SetHeaders(v map[string]*string) *DeleteMcdpAimResponse {
	s.Headers = v
	return s
}

func (s *DeleteMcdpAimResponse) SetStatusCode(v int32) *DeleteMcdpAimResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMcdpAimResponse) SetBody(v *DeleteMcdpAimResponseBody) *DeleteMcdpAimResponse {
	s.Body = v
	return s
}

type DeleteMcdpCrowdRequest struct {
	AppId                                 *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMcdpCrowdDeleteJsonStr *string `json:"MpaasMappcenterMcdpCrowdDeleteJsonStr,omitempty" xml:"MpaasMappcenterMcdpCrowdDeleteJsonStr,omitempty"`
	TenantId                              *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                           *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteMcdpCrowdRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpCrowdRequest) GoString() string {
	return s.String()
}

func (s *DeleteMcdpCrowdRequest) SetAppId(v string) *DeleteMcdpCrowdRequest {
	s.AppId = &v
	return s
}

func (s *DeleteMcdpCrowdRequest) SetMpaasMappcenterMcdpCrowdDeleteJsonStr(v string) *DeleteMcdpCrowdRequest {
	s.MpaasMappcenterMcdpCrowdDeleteJsonStr = &v
	return s
}

func (s *DeleteMcdpCrowdRequest) SetTenantId(v string) *DeleteMcdpCrowdRequest {
	s.TenantId = &v
	return s
}

func (s *DeleteMcdpCrowdRequest) SetWorkspaceId(v string) *DeleteMcdpCrowdRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteMcdpCrowdResponseBody struct {
	RequestId     *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                   `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *DeleteMcdpCrowdResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                   `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s DeleteMcdpCrowdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpCrowdResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMcdpCrowdResponseBody) SetRequestId(v string) *DeleteMcdpCrowdResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMcdpCrowdResponseBody) SetResultCode(v string) *DeleteMcdpCrowdResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DeleteMcdpCrowdResponseBody) SetResultContent(v *DeleteMcdpCrowdResponseBodyResultContent) *DeleteMcdpCrowdResponseBody {
	s.ResultContent = v
	return s
}

func (s *DeleteMcdpCrowdResponseBody) SetResultMessage(v string) *DeleteMcdpCrowdResponseBody {
	s.ResultMessage = &v
	return s
}

type DeleteMcdpCrowdResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMcdpCrowdResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpCrowdResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *DeleteMcdpCrowdResponseBodyResultContent) SetCode(v string) *DeleteMcdpCrowdResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *DeleteMcdpCrowdResponseBodyResultContent) SetData(v string) *DeleteMcdpCrowdResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *DeleteMcdpCrowdResponseBodyResultContent) SetMessage(v string) *DeleteMcdpCrowdResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *DeleteMcdpCrowdResponseBodyResultContent) SetSuccess(v bool) *DeleteMcdpCrowdResponseBodyResultContent {
	s.Success = &v
	return s
}

type DeleteMcdpCrowdResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMcdpCrowdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMcdpCrowdResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpCrowdResponse) GoString() string {
	return s.String()
}

func (s *DeleteMcdpCrowdResponse) SetHeaders(v map[string]*string) *DeleteMcdpCrowdResponse {
	s.Headers = v
	return s
}

func (s *DeleteMcdpCrowdResponse) SetStatusCode(v int32) *DeleteMcdpCrowdResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMcdpCrowdResponse) SetBody(v *DeleteMcdpCrowdResponseBody) *DeleteMcdpCrowdResponse {
	s.Body = v
	return s
}

type DeleteMcdpEventAttributeByIdRequest struct {
	AppId                                          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMcdpEventAttributeDeleteJsonStr *string `json:"MpaasMappcenterMcdpEventAttributeDeleteJsonStr,omitempty" xml:"MpaasMappcenterMcdpEventAttributeDeleteJsonStr,omitempty"`
	TenantId                                       *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                                    *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteMcdpEventAttributeByIdRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpEventAttributeByIdRequest) GoString() string {
	return s.String()
}

func (s *DeleteMcdpEventAttributeByIdRequest) SetAppId(v string) *DeleteMcdpEventAttributeByIdRequest {
	s.AppId = &v
	return s
}

func (s *DeleteMcdpEventAttributeByIdRequest) SetMpaasMappcenterMcdpEventAttributeDeleteJsonStr(v string) *DeleteMcdpEventAttributeByIdRequest {
	s.MpaasMappcenterMcdpEventAttributeDeleteJsonStr = &v
	return s
}

func (s *DeleteMcdpEventAttributeByIdRequest) SetTenantId(v string) *DeleteMcdpEventAttributeByIdRequest {
	s.TenantId = &v
	return s
}

func (s *DeleteMcdpEventAttributeByIdRequest) SetWorkspaceId(v string) *DeleteMcdpEventAttributeByIdRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteMcdpEventAttributeByIdResponseBody struct {
	RequestId     *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                                `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *DeleteMcdpEventAttributeByIdResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                                `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s DeleteMcdpEventAttributeByIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpEventAttributeByIdResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMcdpEventAttributeByIdResponseBody) SetRequestId(v string) *DeleteMcdpEventAttributeByIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMcdpEventAttributeByIdResponseBody) SetResultCode(v string) *DeleteMcdpEventAttributeByIdResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DeleteMcdpEventAttributeByIdResponseBody) SetResultContent(v *DeleteMcdpEventAttributeByIdResponseBodyResultContent) *DeleteMcdpEventAttributeByIdResponseBody {
	s.ResultContent = v
	return s
}

func (s *DeleteMcdpEventAttributeByIdResponseBody) SetResultMessage(v string) *DeleteMcdpEventAttributeByIdResponseBody {
	s.ResultMessage = &v
	return s
}

type DeleteMcdpEventAttributeByIdResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMcdpEventAttributeByIdResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpEventAttributeByIdResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *DeleteMcdpEventAttributeByIdResponseBodyResultContent) SetCode(v string) *DeleteMcdpEventAttributeByIdResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *DeleteMcdpEventAttributeByIdResponseBodyResultContent) SetData(v string) *DeleteMcdpEventAttributeByIdResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *DeleteMcdpEventAttributeByIdResponseBodyResultContent) SetMessage(v string) *DeleteMcdpEventAttributeByIdResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *DeleteMcdpEventAttributeByIdResponseBodyResultContent) SetSuccess(v bool) *DeleteMcdpEventAttributeByIdResponseBodyResultContent {
	s.Success = &v
	return s
}

type DeleteMcdpEventAttributeByIdResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMcdpEventAttributeByIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMcdpEventAttributeByIdResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpEventAttributeByIdResponse) GoString() string {
	return s.String()
}

func (s *DeleteMcdpEventAttributeByIdResponse) SetHeaders(v map[string]*string) *DeleteMcdpEventAttributeByIdResponse {
	s.Headers = v
	return s
}

func (s *DeleteMcdpEventAttributeByIdResponse) SetStatusCode(v int32) *DeleteMcdpEventAttributeByIdResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMcdpEventAttributeByIdResponse) SetBody(v *DeleteMcdpEventAttributeByIdResponseBody) *DeleteMcdpEventAttributeByIdResponse {
	s.Body = v
	return s
}

type DeleteMcdpEventByIdRequest struct {
	AppId                                 *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMcdpEventDeleteJsonStr *string `json:"MpaasMappcenterMcdpEventDeleteJsonStr,omitempty" xml:"MpaasMappcenterMcdpEventDeleteJsonStr,omitempty"`
	TenantId                              *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                           *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteMcdpEventByIdRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpEventByIdRequest) GoString() string {
	return s.String()
}

func (s *DeleteMcdpEventByIdRequest) SetAppId(v string) *DeleteMcdpEventByIdRequest {
	s.AppId = &v
	return s
}

func (s *DeleteMcdpEventByIdRequest) SetMpaasMappcenterMcdpEventDeleteJsonStr(v string) *DeleteMcdpEventByIdRequest {
	s.MpaasMappcenterMcdpEventDeleteJsonStr = &v
	return s
}

func (s *DeleteMcdpEventByIdRequest) SetTenantId(v string) *DeleteMcdpEventByIdRequest {
	s.TenantId = &v
	return s
}

func (s *DeleteMcdpEventByIdRequest) SetWorkspaceId(v string) *DeleteMcdpEventByIdRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteMcdpEventByIdResponseBody struct {
	RequestId     *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                       `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *DeleteMcdpEventByIdResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                       `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s DeleteMcdpEventByIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpEventByIdResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMcdpEventByIdResponseBody) SetRequestId(v string) *DeleteMcdpEventByIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMcdpEventByIdResponseBody) SetResultCode(v string) *DeleteMcdpEventByIdResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DeleteMcdpEventByIdResponseBody) SetResultContent(v *DeleteMcdpEventByIdResponseBodyResultContent) *DeleteMcdpEventByIdResponseBody {
	s.ResultContent = v
	return s
}

func (s *DeleteMcdpEventByIdResponseBody) SetResultMessage(v string) *DeleteMcdpEventByIdResponseBody {
	s.ResultMessage = &v
	return s
}

type DeleteMcdpEventByIdResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMcdpEventByIdResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpEventByIdResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *DeleteMcdpEventByIdResponseBodyResultContent) SetCode(v string) *DeleteMcdpEventByIdResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *DeleteMcdpEventByIdResponseBodyResultContent) SetData(v string) *DeleteMcdpEventByIdResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *DeleteMcdpEventByIdResponseBodyResultContent) SetMessage(v string) *DeleteMcdpEventByIdResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *DeleteMcdpEventByIdResponseBodyResultContent) SetSuccess(v bool) *DeleteMcdpEventByIdResponseBodyResultContent {
	s.Success = &v
	return s
}

type DeleteMcdpEventByIdResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMcdpEventByIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMcdpEventByIdResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpEventByIdResponse) GoString() string {
	return s.String()
}

func (s *DeleteMcdpEventByIdResponse) SetHeaders(v map[string]*string) *DeleteMcdpEventByIdResponse {
	s.Headers = v
	return s
}

func (s *DeleteMcdpEventByIdResponse) SetStatusCode(v int32) *DeleteMcdpEventByIdResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMcdpEventByIdResponse) SetBody(v *DeleteMcdpEventByIdResponseBody) *DeleteMcdpEventByIdResponse {
	s.Body = v
	return s
}

type DeleteMcdpMaterialRequest struct {
	AppId                                    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMcdpMaterialDeleteJsonStr *string `json:"MpaasMappcenterMcdpMaterialDeleteJsonStr,omitempty" xml:"MpaasMappcenterMcdpMaterialDeleteJsonStr,omitempty"`
	TenantId                                 *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                              *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteMcdpMaterialRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpMaterialRequest) GoString() string {
	return s.String()
}

func (s *DeleteMcdpMaterialRequest) SetAppId(v string) *DeleteMcdpMaterialRequest {
	s.AppId = &v
	return s
}

func (s *DeleteMcdpMaterialRequest) SetMpaasMappcenterMcdpMaterialDeleteJsonStr(v string) *DeleteMcdpMaterialRequest {
	s.MpaasMappcenterMcdpMaterialDeleteJsonStr = &v
	return s
}

func (s *DeleteMcdpMaterialRequest) SetTenantId(v string) *DeleteMcdpMaterialRequest {
	s.TenantId = &v
	return s
}

func (s *DeleteMcdpMaterialRequest) SetWorkspaceId(v string) *DeleteMcdpMaterialRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteMcdpMaterialResponseBody struct {
	RequestId     *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                      `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *DeleteMcdpMaterialResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                      `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s DeleteMcdpMaterialResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpMaterialResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMcdpMaterialResponseBody) SetRequestId(v string) *DeleteMcdpMaterialResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMcdpMaterialResponseBody) SetResultCode(v string) *DeleteMcdpMaterialResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DeleteMcdpMaterialResponseBody) SetResultContent(v *DeleteMcdpMaterialResponseBodyResultContent) *DeleteMcdpMaterialResponseBody {
	s.ResultContent = v
	return s
}

func (s *DeleteMcdpMaterialResponseBody) SetResultMessage(v string) *DeleteMcdpMaterialResponseBody {
	s.ResultMessage = &v
	return s
}

type DeleteMcdpMaterialResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMcdpMaterialResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpMaterialResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *DeleteMcdpMaterialResponseBodyResultContent) SetCode(v string) *DeleteMcdpMaterialResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *DeleteMcdpMaterialResponseBodyResultContent) SetData(v string) *DeleteMcdpMaterialResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *DeleteMcdpMaterialResponseBodyResultContent) SetMessage(v string) *DeleteMcdpMaterialResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *DeleteMcdpMaterialResponseBodyResultContent) SetSuccess(v bool) *DeleteMcdpMaterialResponseBodyResultContent {
	s.Success = &v
	return s
}

type DeleteMcdpMaterialResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMcdpMaterialResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMcdpMaterialResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpMaterialResponse) GoString() string {
	return s.String()
}

func (s *DeleteMcdpMaterialResponse) SetHeaders(v map[string]*string) *DeleteMcdpMaterialResponse {
	s.Headers = v
	return s
}

func (s *DeleteMcdpMaterialResponse) SetStatusCode(v int32) *DeleteMcdpMaterialResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMcdpMaterialResponse) SetBody(v *DeleteMcdpMaterialResponseBody) *DeleteMcdpMaterialResponse {
	s.Body = v
	return s
}

type DeleteMcdpZoneRequest struct {
	AppId                                *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMcdpZoneDeleteJsonStr *string `json:"MpaasMappcenterMcdpZoneDeleteJsonStr,omitempty" xml:"MpaasMappcenterMcdpZoneDeleteJsonStr,omitempty"`
	TenantId                             *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                          *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteMcdpZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpZoneRequest) GoString() string {
	return s.String()
}

func (s *DeleteMcdpZoneRequest) SetAppId(v string) *DeleteMcdpZoneRequest {
	s.AppId = &v
	return s
}

func (s *DeleteMcdpZoneRequest) SetMpaasMappcenterMcdpZoneDeleteJsonStr(v string) *DeleteMcdpZoneRequest {
	s.MpaasMappcenterMcdpZoneDeleteJsonStr = &v
	return s
}

func (s *DeleteMcdpZoneRequest) SetTenantId(v string) *DeleteMcdpZoneRequest {
	s.TenantId = &v
	return s
}

func (s *DeleteMcdpZoneRequest) SetWorkspaceId(v string) *DeleteMcdpZoneRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteMcdpZoneResponseBody struct {
	RequestId     *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                  `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *DeleteMcdpZoneResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                  `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s DeleteMcdpZoneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpZoneResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMcdpZoneResponseBody) SetRequestId(v string) *DeleteMcdpZoneResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMcdpZoneResponseBody) SetResultCode(v string) *DeleteMcdpZoneResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DeleteMcdpZoneResponseBody) SetResultContent(v *DeleteMcdpZoneResponseBodyResultContent) *DeleteMcdpZoneResponseBody {
	s.ResultContent = v
	return s
}

func (s *DeleteMcdpZoneResponseBody) SetResultMessage(v string) *DeleteMcdpZoneResponseBody {
	s.ResultMessage = &v
	return s
}

type DeleteMcdpZoneResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMcdpZoneResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpZoneResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *DeleteMcdpZoneResponseBodyResultContent) SetCode(v string) *DeleteMcdpZoneResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *DeleteMcdpZoneResponseBodyResultContent) SetData(v string) *DeleteMcdpZoneResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *DeleteMcdpZoneResponseBodyResultContent) SetMessage(v string) *DeleteMcdpZoneResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *DeleteMcdpZoneResponseBodyResultContent) SetSuccess(v bool) *DeleteMcdpZoneResponseBodyResultContent {
	s.Success = &v
	return s
}

type DeleteMcdpZoneResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMcdpZoneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMcdpZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcdpZoneResponse) GoString() string {
	return s.String()
}

func (s *DeleteMcdpZoneResponse) SetHeaders(v map[string]*string) *DeleteMcdpZoneResponse {
	s.Headers = v
	return s
}

func (s *DeleteMcdpZoneResponse) SetStatusCode(v int32) *DeleteMcdpZoneResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMcdpZoneResponse) SetBody(v *DeleteMcdpZoneResponseBody) *DeleteMcdpZoneResponse {
	s.Body = v
	return s
}

type DeleteMcubeMiniAppRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	H5Id        *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteMcubeMiniAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcubeMiniAppRequest) GoString() string {
	return s.String()
}

func (s *DeleteMcubeMiniAppRequest) SetAppId(v string) *DeleteMcubeMiniAppRequest {
	s.AppId = &v
	return s
}

func (s *DeleteMcubeMiniAppRequest) SetH5Id(v string) *DeleteMcubeMiniAppRequest {
	s.H5Id = &v
	return s
}

func (s *DeleteMcubeMiniAppRequest) SetTenantId(v string) *DeleteMcubeMiniAppRequest {
	s.TenantId = &v
	return s
}

func (s *DeleteMcubeMiniAppRequest) SetWorkspaceId(v string) *DeleteMcubeMiniAppRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteMcubeMiniAppResponseBody struct {
	DeleteMiniResult *DeleteMcubeMiniAppResponseBodyDeleteMiniResult `json:"DeleteMiniResult,omitempty" xml:"DeleteMiniResult,omitempty" type:"Struct"`
	RequestId        *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode       *string                                         `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage    *string                                         `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s DeleteMcubeMiniAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcubeMiniAppResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMcubeMiniAppResponseBody) SetDeleteMiniResult(v *DeleteMcubeMiniAppResponseBodyDeleteMiniResult) *DeleteMcubeMiniAppResponseBody {
	s.DeleteMiniResult = v
	return s
}

func (s *DeleteMcubeMiniAppResponseBody) SetRequestId(v string) *DeleteMcubeMiniAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMcubeMiniAppResponseBody) SetResultCode(v string) *DeleteMcubeMiniAppResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DeleteMcubeMiniAppResponseBody) SetResultMessage(v string) *DeleteMcubeMiniAppResponseBody {
	s.ResultMessage = &v
	return s
}

type DeleteMcubeMiniAppResponseBodyDeleteMiniResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMcubeMiniAppResponseBodyDeleteMiniResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcubeMiniAppResponseBodyDeleteMiniResult) GoString() string {
	return s.String()
}

func (s *DeleteMcubeMiniAppResponseBodyDeleteMiniResult) SetData(v string) *DeleteMcubeMiniAppResponseBodyDeleteMiniResult {
	s.Data = &v
	return s
}

func (s *DeleteMcubeMiniAppResponseBodyDeleteMiniResult) SetResultMsg(v string) *DeleteMcubeMiniAppResponseBodyDeleteMiniResult {
	s.ResultMsg = &v
	return s
}

func (s *DeleteMcubeMiniAppResponseBodyDeleteMiniResult) SetSuccess(v bool) *DeleteMcubeMiniAppResponseBodyDeleteMiniResult {
	s.Success = &v
	return s
}

type DeleteMcubeMiniAppResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMcubeMiniAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMcubeMiniAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcubeMiniAppResponse) GoString() string {
	return s.String()
}

func (s *DeleteMcubeMiniAppResponse) SetHeaders(v map[string]*string) *DeleteMcubeMiniAppResponse {
	s.Headers = v
	return s
}

func (s *DeleteMcubeMiniAppResponse) SetStatusCode(v int32) *DeleteMcubeMiniAppResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMcubeMiniAppResponse) SetBody(v *DeleteMcubeMiniAppResponseBody) *DeleteMcubeMiniAppResponse {
	s.Body = v
	return s
}

type DeleteMcubeNebulaAppRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	H5Id        *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteMcubeNebulaAppRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcubeNebulaAppRequest) GoString() string {
	return s.String()
}

func (s *DeleteMcubeNebulaAppRequest) SetAppId(v string) *DeleteMcubeNebulaAppRequest {
	s.AppId = &v
	return s
}

func (s *DeleteMcubeNebulaAppRequest) SetH5Id(v string) *DeleteMcubeNebulaAppRequest {
	s.H5Id = &v
	return s
}

func (s *DeleteMcubeNebulaAppRequest) SetTenantId(v string) *DeleteMcubeNebulaAppRequest {
	s.TenantId = &v
	return s
}

func (s *DeleteMcubeNebulaAppRequest) SetWorkspaceId(v string) *DeleteMcubeNebulaAppRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteMcubeNebulaAppResponseBody struct {
	DeleteMcubeNebulaAppResult *DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult `json:"DeleteMcubeNebulaAppResult,omitempty" xml:"DeleteMcubeNebulaAppResult,omitempty" type:"Struct"`
	RequestId                  *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode                 *string                                                     `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage              *string                                                     `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s DeleteMcubeNebulaAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcubeNebulaAppResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMcubeNebulaAppResponseBody) SetDeleteMcubeNebulaAppResult(v *DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult) *DeleteMcubeNebulaAppResponseBody {
	s.DeleteMcubeNebulaAppResult = v
	return s
}

func (s *DeleteMcubeNebulaAppResponseBody) SetRequestId(v string) *DeleteMcubeNebulaAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMcubeNebulaAppResponseBody) SetResultCode(v string) *DeleteMcubeNebulaAppResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DeleteMcubeNebulaAppResponseBody) SetResultMessage(v string) *DeleteMcubeNebulaAppResponseBody {
	s.ResultMessage = &v
	return s
}

type DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult) GoString() string {
	return s.String()
}

func (s *DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult) SetErrorCode(v string) *DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult {
	s.ErrorCode = &v
	return s
}

func (s *DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult) SetRequestId(v string) *DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult {
	s.RequestId = &v
	return s
}

func (s *DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult) SetResultMsg(v string) *DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult {
	s.ResultMsg = &v
	return s
}

func (s *DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult) SetSuccess(v bool) *DeleteMcubeNebulaAppResponseBodyDeleteMcubeNebulaAppResult {
	s.Success = &v
	return s
}

type DeleteMcubeNebulaAppResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMcubeNebulaAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMcubeNebulaAppResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcubeNebulaAppResponse) GoString() string {
	return s.String()
}

func (s *DeleteMcubeNebulaAppResponse) SetHeaders(v map[string]*string) *DeleteMcubeNebulaAppResponse {
	s.Headers = v
	return s
}

func (s *DeleteMcubeNebulaAppResponse) SetStatusCode(v int32) *DeleteMcubeNebulaAppResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMcubeNebulaAppResponse) SetBody(v *DeleteMcubeNebulaAppResponseBody) *DeleteMcubeNebulaAppResponse {
	s.Body = v
	return s
}

type DeleteMcubeUpgradeResourceRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Platform    *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteMcubeUpgradeResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcubeUpgradeResourceRequest) GoString() string {
	return s.String()
}

func (s *DeleteMcubeUpgradeResourceRequest) SetAppId(v string) *DeleteMcubeUpgradeResourceRequest {
	s.AppId = &v
	return s
}

func (s *DeleteMcubeUpgradeResourceRequest) SetId(v string) *DeleteMcubeUpgradeResourceRequest {
	s.Id = &v
	return s
}

func (s *DeleteMcubeUpgradeResourceRequest) SetPlatform(v string) *DeleteMcubeUpgradeResourceRequest {
	s.Platform = &v
	return s
}

func (s *DeleteMcubeUpgradeResourceRequest) SetTenantId(v string) *DeleteMcubeUpgradeResourceRequest {
	s.TenantId = &v
	return s
}

func (s *DeleteMcubeUpgradeResourceRequest) SetWorkspaceId(v string) *DeleteMcubeUpgradeResourceRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteMcubeUpgradeResourceResponseBody struct {
	DeleteResult  *DeleteMcubeUpgradeResourceResponseBodyDeleteResult `json:"DeleteResult,omitempty" xml:"DeleteResult,omitempty" type:"Struct"`
	RequestId     *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                             `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage *string                                             `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s DeleteMcubeUpgradeResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcubeUpgradeResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMcubeUpgradeResourceResponseBody) SetDeleteResult(v *DeleteMcubeUpgradeResourceResponseBodyDeleteResult) *DeleteMcubeUpgradeResourceResponseBody {
	s.DeleteResult = v
	return s
}

func (s *DeleteMcubeUpgradeResourceResponseBody) SetRequestId(v string) *DeleteMcubeUpgradeResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMcubeUpgradeResourceResponseBody) SetResultCode(v string) *DeleteMcubeUpgradeResourceResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DeleteMcubeUpgradeResourceResponseBody) SetResultMessage(v string) *DeleteMcubeUpgradeResourceResponseBody {
	s.ResultMessage = &v
	return s
}

type DeleteMcubeUpgradeResourceResponseBodyDeleteResult struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMcubeUpgradeResourceResponseBodyDeleteResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcubeUpgradeResourceResponseBodyDeleteResult) GoString() string {
	return s.String()
}

func (s *DeleteMcubeUpgradeResourceResponseBodyDeleteResult) SetErrorCode(v string) *DeleteMcubeUpgradeResourceResponseBodyDeleteResult {
	s.ErrorCode = &v
	return s
}

func (s *DeleteMcubeUpgradeResourceResponseBodyDeleteResult) SetRequestId(v string) *DeleteMcubeUpgradeResourceResponseBodyDeleteResult {
	s.RequestId = &v
	return s
}

func (s *DeleteMcubeUpgradeResourceResponseBodyDeleteResult) SetResultMsg(v string) *DeleteMcubeUpgradeResourceResponseBodyDeleteResult {
	s.ResultMsg = &v
	return s
}

func (s *DeleteMcubeUpgradeResourceResponseBodyDeleteResult) SetSuccess(v bool) *DeleteMcubeUpgradeResourceResponseBodyDeleteResult {
	s.Success = &v
	return s
}

type DeleteMcubeUpgradeResourceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMcubeUpgradeResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMcubeUpgradeResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcubeUpgradeResourceResponse) GoString() string {
	return s.String()
}

func (s *DeleteMcubeUpgradeResourceResponse) SetHeaders(v map[string]*string) *DeleteMcubeUpgradeResourceResponse {
	s.Headers = v
	return s
}

func (s *DeleteMcubeUpgradeResourceResponse) SetStatusCode(v int32) *DeleteMcubeUpgradeResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMcubeUpgradeResourceResponse) SetBody(v *DeleteMcubeUpgradeResourceResponseBody) *DeleteMcubeUpgradeResourceResponse {
	s.Body = v
	return s
}

type DeleteMcubeWhitelistRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteMcubeWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcubeWhitelistRequest) GoString() string {
	return s.String()
}

func (s *DeleteMcubeWhitelistRequest) SetAppId(v string) *DeleteMcubeWhitelistRequest {
	s.AppId = &v
	return s
}

func (s *DeleteMcubeWhitelistRequest) SetId(v int64) *DeleteMcubeWhitelistRequest {
	s.Id = &v
	return s
}

func (s *DeleteMcubeWhitelistRequest) SetTenantId(v string) *DeleteMcubeWhitelistRequest {
	s.TenantId = &v
	return s
}

func (s *DeleteMcubeWhitelistRequest) SetWorkspaceId(v string) *DeleteMcubeWhitelistRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteMcubeWhitelistResponseBody struct {
	DeleteWhitelistResult *DeleteMcubeWhitelistResponseBodyDeleteWhitelistResult `json:"DeleteWhitelistResult,omitempty" xml:"DeleteWhitelistResult,omitempty" type:"Struct"`
	RequestId             *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode            *string                                                `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage         *string                                                `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s DeleteMcubeWhitelistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcubeWhitelistResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMcubeWhitelistResponseBody) SetDeleteWhitelistResult(v *DeleteMcubeWhitelistResponseBodyDeleteWhitelistResult) *DeleteMcubeWhitelistResponseBody {
	s.DeleteWhitelistResult = v
	return s
}

func (s *DeleteMcubeWhitelistResponseBody) SetRequestId(v string) *DeleteMcubeWhitelistResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMcubeWhitelistResponseBody) SetResultCode(v string) *DeleteMcubeWhitelistResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DeleteMcubeWhitelistResponseBody) SetResultMessage(v string) *DeleteMcubeWhitelistResponseBody {
	s.ResultMessage = &v
	return s
}

type DeleteMcubeWhitelistResponseBodyDeleteWhitelistResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMcubeWhitelistResponseBodyDeleteWhitelistResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcubeWhitelistResponseBodyDeleteWhitelistResult) GoString() string {
	return s.String()
}

func (s *DeleteMcubeWhitelistResponseBodyDeleteWhitelistResult) SetData(v string) *DeleteMcubeWhitelistResponseBodyDeleteWhitelistResult {
	s.Data = &v
	return s
}

func (s *DeleteMcubeWhitelistResponseBodyDeleteWhitelistResult) SetResultMsg(v string) *DeleteMcubeWhitelistResponseBodyDeleteWhitelistResult {
	s.ResultMsg = &v
	return s
}

func (s *DeleteMcubeWhitelistResponseBodyDeleteWhitelistResult) SetSuccess(v bool) *DeleteMcubeWhitelistResponseBodyDeleteWhitelistResult {
	s.Success = &v
	return s
}

type DeleteMcubeWhitelistResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMcubeWhitelistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMcubeWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcubeWhitelistResponse) GoString() string {
	return s.String()
}

func (s *DeleteMcubeWhitelistResponse) SetHeaders(v map[string]*string) *DeleteMcubeWhitelistResponse {
	s.Headers = v
	return s
}

func (s *DeleteMcubeWhitelistResponse) SetStatusCode(v int32) *DeleteMcubeWhitelistResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMcubeWhitelistResponse) SetBody(v *DeleteMcubeWhitelistResponseBody) *DeleteMcubeWhitelistResponse {
	s.Body = v
	return s
}

type DeleteMdsWhitelistContentRequest struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	TenantId       *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WhitelistId    *string `json:"WhitelistId,omitempty" xml:"WhitelistId,omitempty"`
	WhitelistValue *string `json:"WhitelistValue,omitempty" xml:"WhitelistValue,omitempty"`
	WorkspaceId    *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteMdsWhitelistContentRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMdsWhitelistContentRequest) GoString() string {
	return s.String()
}

func (s *DeleteMdsWhitelistContentRequest) SetAppId(v string) *DeleteMdsWhitelistContentRequest {
	s.AppId = &v
	return s
}

func (s *DeleteMdsWhitelistContentRequest) SetTenantId(v string) *DeleteMdsWhitelistContentRequest {
	s.TenantId = &v
	return s
}

func (s *DeleteMdsWhitelistContentRequest) SetWhitelistId(v string) *DeleteMdsWhitelistContentRequest {
	s.WhitelistId = &v
	return s
}

func (s *DeleteMdsWhitelistContentRequest) SetWhitelistValue(v string) *DeleteMdsWhitelistContentRequest {
	s.WhitelistValue = &v
	return s
}

func (s *DeleteMdsWhitelistContentRequest) SetWorkspaceId(v string) *DeleteMdsWhitelistContentRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteMdsWhitelistContentResponseBody struct {
	RequestId     *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                             `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *DeleteMdsWhitelistContentResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                             `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s DeleteMdsWhitelistContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMdsWhitelistContentResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMdsWhitelistContentResponseBody) SetRequestId(v string) *DeleteMdsWhitelistContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMdsWhitelistContentResponseBody) SetResultCode(v string) *DeleteMdsWhitelistContentResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DeleteMdsWhitelistContentResponseBody) SetResultContent(v *DeleteMdsWhitelistContentResponseBodyResultContent) *DeleteMdsWhitelistContentResponseBody {
	s.ResultContent = v
	return s
}

func (s *DeleteMdsWhitelistContentResponseBody) SetResultMessage(v string) *DeleteMdsWhitelistContentResponseBody {
	s.ResultMessage = &v
	return s
}

type DeleteMdsWhitelistContentResponseBodyResultContent struct {
	Data      *DeleteMdsWhitelistContentResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMdsWhitelistContentResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s DeleteMdsWhitelistContentResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *DeleteMdsWhitelistContentResponseBodyResultContent) SetData(v *DeleteMdsWhitelistContentResponseBodyResultContentData) *DeleteMdsWhitelistContentResponseBodyResultContent {
	s.Data = v
	return s
}

func (s *DeleteMdsWhitelistContentResponseBodyResultContent) SetRequestId(v string) *DeleteMdsWhitelistContentResponseBodyResultContent {
	s.RequestId = &v
	return s
}

type DeleteMdsWhitelistContentResponseBodyResultContentData struct {
	Content   *string `json:"Content,omitempty" xml:"Content,omitempty"`
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMdsWhitelistContentResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s DeleteMdsWhitelistContentResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *DeleteMdsWhitelistContentResponseBodyResultContentData) SetContent(v string) *DeleteMdsWhitelistContentResponseBodyResultContentData {
	s.Content = &v
	return s
}

func (s *DeleteMdsWhitelistContentResponseBodyResultContentData) SetErrorCode(v string) *DeleteMdsWhitelistContentResponseBodyResultContentData {
	s.ErrorCode = &v
	return s
}

func (s *DeleteMdsWhitelistContentResponseBodyResultContentData) SetResultMsg(v string) *DeleteMdsWhitelistContentResponseBodyResultContentData {
	s.ResultMsg = &v
	return s
}

func (s *DeleteMdsWhitelistContentResponseBodyResultContentData) SetSuccess(v bool) *DeleteMdsWhitelistContentResponseBodyResultContentData {
	s.Success = &v
	return s
}

type DeleteMdsWhitelistContentResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMdsWhitelistContentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMdsWhitelistContentResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMdsWhitelistContentResponse) GoString() string {
	return s.String()
}

func (s *DeleteMdsWhitelistContentResponse) SetHeaders(v map[string]*string) *DeleteMdsWhitelistContentResponse {
	s.Headers = v
	return s
}

func (s *DeleteMdsWhitelistContentResponse) SetStatusCode(v int32) *DeleteMdsWhitelistContentResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMdsWhitelistContentResponse) SetBody(v *DeleteMdsWhitelistContentResponseBody) *DeleteMdsWhitelistContentResponse {
	s.Body = v
	return s
}

type ExistMcubeRsaKeyRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ExistMcubeRsaKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s ExistMcubeRsaKeyRequest) GoString() string {
	return s.String()
}

func (s *ExistMcubeRsaKeyRequest) SetAppId(v string) *ExistMcubeRsaKeyRequest {
	s.AppId = &v
	return s
}

func (s *ExistMcubeRsaKeyRequest) SetTenantId(v string) *ExistMcubeRsaKeyRequest {
	s.TenantId = &v
	return s
}

func (s *ExistMcubeRsaKeyRequest) SetWorkspaceId(v string) *ExistMcubeRsaKeyRequest {
	s.WorkspaceId = &v
	return s
}

type ExistMcubeRsaKeyResponseBody struct {
	CheckRsaKeyResult *ExistMcubeRsaKeyResponseBodyCheckRsaKeyResult `json:"CheckRsaKeyResult,omitempty" xml:"CheckRsaKeyResult,omitempty" type:"Struct"`
	RequestId         *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode        *string                                        `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage     *string                                        `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ExistMcubeRsaKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExistMcubeRsaKeyResponseBody) GoString() string {
	return s.String()
}

func (s *ExistMcubeRsaKeyResponseBody) SetCheckRsaKeyResult(v *ExistMcubeRsaKeyResponseBodyCheckRsaKeyResult) *ExistMcubeRsaKeyResponseBody {
	s.CheckRsaKeyResult = v
	return s
}

func (s *ExistMcubeRsaKeyResponseBody) SetRequestId(v string) *ExistMcubeRsaKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExistMcubeRsaKeyResponseBody) SetResultCode(v string) *ExistMcubeRsaKeyResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ExistMcubeRsaKeyResponseBody) SetResultMessage(v string) *ExistMcubeRsaKeyResponseBody {
	s.ResultMessage = &v
	return s
}

type ExistMcubeRsaKeyResponseBodyCheckRsaKeyResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ExistMcubeRsaKeyResponseBodyCheckRsaKeyResult) String() string {
	return tea.Prettify(s)
}

func (s ExistMcubeRsaKeyResponseBodyCheckRsaKeyResult) GoString() string {
	return s.String()
}

func (s *ExistMcubeRsaKeyResponseBodyCheckRsaKeyResult) SetData(v string) *ExistMcubeRsaKeyResponseBodyCheckRsaKeyResult {
	s.Data = &v
	return s
}

func (s *ExistMcubeRsaKeyResponseBodyCheckRsaKeyResult) SetResultMsg(v string) *ExistMcubeRsaKeyResponseBodyCheckRsaKeyResult {
	s.ResultMsg = &v
	return s
}

func (s *ExistMcubeRsaKeyResponseBodyCheckRsaKeyResult) SetSuccess(v bool) *ExistMcubeRsaKeyResponseBodyCheckRsaKeyResult {
	s.Success = &v
	return s
}

type ExistMcubeRsaKeyResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ExistMcubeRsaKeyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExistMcubeRsaKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s ExistMcubeRsaKeyResponse) GoString() string {
	return s.String()
}

func (s *ExistMcubeRsaKeyResponse) SetHeaders(v map[string]*string) *ExistMcubeRsaKeyResponse {
	s.Headers = v
	return s
}

func (s *ExistMcubeRsaKeyResponse) SetStatusCode(v int32) *ExistMcubeRsaKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *ExistMcubeRsaKeyResponse) SetBody(v *ExistMcubeRsaKeyResponseBody) *ExistMcubeRsaKeyResponse {
	s.Body = v
	return s
}

type ExportMappCenterAppConfigRequest struct {
	ApkFileUrl    *string `json:"ApkFileUrl,omitempty" xml:"ApkFileUrl,omitempty"`
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	CertRsaBase64 *string `json:"CertRsaBase64,omitempty" xml:"CertRsaBase64,omitempty"`
	Identifier    *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	OnexFlag      *bool   `json:"OnexFlag,omitempty" xml:"OnexFlag,omitempty"`
	SystemType    *string `json:"SystemType,omitempty" xml:"SystemType,omitempty"`
	WorkspaceId   *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ExportMappCenterAppConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportMappCenterAppConfigRequest) GoString() string {
	return s.String()
}

func (s *ExportMappCenterAppConfigRequest) SetApkFileUrl(v string) *ExportMappCenterAppConfigRequest {
	s.ApkFileUrl = &v
	return s
}

func (s *ExportMappCenterAppConfigRequest) SetAppId(v string) *ExportMappCenterAppConfigRequest {
	s.AppId = &v
	return s
}

func (s *ExportMappCenterAppConfigRequest) SetCertRsaBase64(v string) *ExportMappCenterAppConfigRequest {
	s.CertRsaBase64 = &v
	return s
}

func (s *ExportMappCenterAppConfigRequest) SetIdentifier(v string) *ExportMappCenterAppConfigRequest {
	s.Identifier = &v
	return s
}

func (s *ExportMappCenterAppConfigRequest) SetOnexFlag(v bool) *ExportMappCenterAppConfigRequest {
	s.OnexFlag = &v
	return s
}

func (s *ExportMappCenterAppConfigRequest) SetSystemType(v string) *ExportMappCenterAppConfigRequest {
	s.SystemType = &v
	return s
}

func (s *ExportMappCenterAppConfigRequest) SetWorkspaceId(v string) *ExportMappCenterAppConfigRequest {
	s.WorkspaceId = &v
	return s
}

type ExportMappCenterAppConfigResponseBody struct {
	ExportMappCenterAppConfigResult *ExportMappCenterAppConfigResponseBodyExportMappCenterAppConfigResult `json:"ExportMappCenterAppConfigResult,omitempty" xml:"ExportMappCenterAppConfigResult,omitempty" type:"Struct"`
	RequestId                       *string                                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode                      *string                                                               `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage                   *string                                                               `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ExportMappCenterAppConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportMappCenterAppConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ExportMappCenterAppConfigResponseBody) SetExportMappCenterAppConfigResult(v *ExportMappCenterAppConfigResponseBodyExportMappCenterAppConfigResult) *ExportMappCenterAppConfigResponseBody {
	s.ExportMappCenterAppConfigResult = v
	return s
}

func (s *ExportMappCenterAppConfigResponseBody) SetRequestId(v string) *ExportMappCenterAppConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExportMappCenterAppConfigResponseBody) SetResultCode(v string) *ExportMappCenterAppConfigResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ExportMappCenterAppConfigResponseBody) SetResultMessage(v string) *ExportMappCenterAppConfigResponseBody {
	s.ResultMessage = &v
	return s
}

type ExportMappCenterAppConfigResponseBodyExportMappCenterAppConfigResult struct {
	ConfigDownloadUrl *string `json:"ConfigDownloadUrl,omitempty" xml:"ConfigDownloadUrl,omitempty"`
	ResultMsg         *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success           *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ExportMappCenterAppConfigResponseBodyExportMappCenterAppConfigResult) String() string {
	return tea.Prettify(s)
}

func (s ExportMappCenterAppConfigResponseBodyExportMappCenterAppConfigResult) GoString() string {
	return s.String()
}

func (s *ExportMappCenterAppConfigResponseBodyExportMappCenterAppConfigResult) SetConfigDownloadUrl(v string) *ExportMappCenterAppConfigResponseBodyExportMappCenterAppConfigResult {
	s.ConfigDownloadUrl = &v
	return s
}

func (s *ExportMappCenterAppConfigResponseBodyExportMappCenterAppConfigResult) SetResultMsg(v string) *ExportMappCenterAppConfigResponseBodyExportMappCenterAppConfigResult {
	s.ResultMsg = &v
	return s
}

func (s *ExportMappCenterAppConfigResponseBodyExportMappCenterAppConfigResult) SetSuccess(v bool) *ExportMappCenterAppConfigResponseBodyExportMappCenterAppConfigResult {
	s.Success = &v
	return s
}

type ExportMappCenterAppConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ExportMappCenterAppConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExportMappCenterAppConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportMappCenterAppConfigResponse) GoString() string {
	return s.String()
}

func (s *ExportMappCenterAppConfigResponse) SetHeaders(v map[string]*string) *ExportMappCenterAppConfigResponse {
	s.Headers = v
	return s
}

func (s *ExportMappCenterAppConfigResponse) SetStatusCode(v int32) *ExportMappCenterAppConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportMappCenterAppConfigResponse) SetBody(v *ExportMappCenterAppConfigResponseBody) *ExportMappCenterAppConfigResponse {
	s.Body = v
	return s
}

type GetFileTokenForUploadToMsaRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	OnexFlag    *bool   `json:"OnexFlag,omitempty" xml:"OnexFlag,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetFileTokenForUploadToMsaRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFileTokenForUploadToMsaRequest) GoString() string {
	return s.String()
}

func (s *GetFileTokenForUploadToMsaRequest) SetAppId(v string) *GetFileTokenForUploadToMsaRequest {
	s.AppId = &v
	return s
}

func (s *GetFileTokenForUploadToMsaRequest) SetOnexFlag(v bool) *GetFileTokenForUploadToMsaRequest {
	s.OnexFlag = &v
	return s
}

func (s *GetFileTokenForUploadToMsaRequest) SetTenantId(v string) *GetFileTokenForUploadToMsaRequest {
	s.TenantId = &v
	return s
}

func (s *GetFileTokenForUploadToMsaRequest) SetWorkspaceId(v string) *GetFileTokenForUploadToMsaRequest {
	s.WorkspaceId = &v
	return s
}

type GetFileTokenForUploadToMsaResponseBody struct {
	RequestId     *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                              `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *GetFileTokenForUploadToMsaResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                              `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s GetFileTokenForUploadToMsaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFileTokenForUploadToMsaResponseBody) GoString() string {
	return s.String()
}

func (s *GetFileTokenForUploadToMsaResponseBody) SetRequestId(v string) *GetFileTokenForUploadToMsaResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFileTokenForUploadToMsaResponseBody) SetResultCode(v string) *GetFileTokenForUploadToMsaResponseBody {
	s.ResultCode = &v
	return s
}

func (s *GetFileTokenForUploadToMsaResponseBody) SetResultContent(v *GetFileTokenForUploadToMsaResponseBodyResultContent) *GetFileTokenForUploadToMsaResponseBody {
	s.ResultContent = v
	return s
}

func (s *GetFileTokenForUploadToMsaResponseBody) SetResultMessage(v string) *GetFileTokenForUploadToMsaResponseBody {
	s.ResultMessage = &v
	return s
}

type GetFileTokenForUploadToMsaResponseBodyResultContent struct {
	Content   *GetFileTokenForUploadToMsaResponseBodyResultContentContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	ErrorCode *string                                                     `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg *string                                                     `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *string                                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetFileTokenForUploadToMsaResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s GetFileTokenForUploadToMsaResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *GetFileTokenForUploadToMsaResponseBodyResultContent) SetContent(v *GetFileTokenForUploadToMsaResponseBodyResultContentContent) *GetFileTokenForUploadToMsaResponseBodyResultContent {
	s.Content = v
	return s
}

func (s *GetFileTokenForUploadToMsaResponseBodyResultContent) SetErrorCode(v string) *GetFileTokenForUploadToMsaResponseBodyResultContent {
	s.ErrorCode = &v
	return s
}

func (s *GetFileTokenForUploadToMsaResponseBodyResultContent) SetRequestId(v string) *GetFileTokenForUploadToMsaResponseBodyResultContent {
	s.RequestId = &v
	return s
}

func (s *GetFileTokenForUploadToMsaResponseBodyResultContent) SetResultMsg(v string) *GetFileTokenForUploadToMsaResponseBodyResultContent {
	s.ResultMsg = &v
	return s
}

func (s *GetFileTokenForUploadToMsaResponseBodyResultContent) SetSuccess(v string) *GetFileTokenForUploadToMsaResponseBodyResultContent {
	s.Success = &v
	return s
}

type GetFileTokenForUploadToMsaResponseBodyResultContentContent struct {
	Accessid  *string `json:"Accessid,omitempty" xml:"Accessid,omitempty"`
	Dir       *string `json:"Dir,omitempty" xml:"Dir,omitempty"`
	Expire    *string `json:"Expire,omitempty" xml:"Expire,omitempty"`
	Host      *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Policy    *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Signature *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
}

func (s GetFileTokenForUploadToMsaResponseBodyResultContentContent) String() string {
	return tea.Prettify(s)
}

func (s GetFileTokenForUploadToMsaResponseBodyResultContentContent) GoString() string {
	return s.String()
}

func (s *GetFileTokenForUploadToMsaResponseBodyResultContentContent) SetAccessid(v string) *GetFileTokenForUploadToMsaResponseBodyResultContentContent {
	s.Accessid = &v
	return s
}

func (s *GetFileTokenForUploadToMsaResponseBodyResultContentContent) SetDir(v string) *GetFileTokenForUploadToMsaResponseBodyResultContentContent {
	s.Dir = &v
	return s
}

func (s *GetFileTokenForUploadToMsaResponseBodyResultContentContent) SetExpire(v string) *GetFileTokenForUploadToMsaResponseBodyResultContentContent {
	s.Expire = &v
	return s
}

func (s *GetFileTokenForUploadToMsaResponseBodyResultContentContent) SetHost(v string) *GetFileTokenForUploadToMsaResponseBodyResultContentContent {
	s.Host = &v
	return s
}

func (s *GetFileTokenForUploadToMsaResponseBodyResultContentContent) SetPolicy(v string) *GetFileTokenForUploadToMsaResponseBodyResultContentContent {
	s.Policy = &v
	return s
}

func (s *GetFileTokenForUploadToMsaResponseBodyResultContentContent) SetSignature(v string) *GetFileTokenForUploadToMsaResponseBodyResultContentContent {
	s.Signature = &v
	return s
}

type GetFileTokenForUploadToMsaResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetFileTokenForUploadToMsaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetFileTokenForUploadToMsaResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFileTokenForUploadToMsaResponse) GoString() string {
	return s.String()
}

func (s *GetFileTokenForUploadToMsaResponse) SetHeaders(v map[string]*string) *GetFileTokenForUploadToMsaResponse {
	s.Headers = v
	return s
}

func (s *GetFileTokenForUploadToMsaResponse) SetStatusCode(v int32) *GetFileTokenForUploadToMsaResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFileTokenForUploadToMsaResponse) SetBody(v *GetFileTokenForUploadToMsaResponseBody) *GetFileTokenForUploadToMsaResponse {
	s.Body = v
	return s
}

type GetLogUrlInMsaRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetLogUrlInMsaRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLogUrlInMsaRequest) GoString() string {
	return s.String()
}

func (s *GetLogUrlInMsaRequest) SetAppId(v string) *GetLogUrlInMsaRequest {
	s.AppId = &v
	return s
}

func (s *GetLogUrlInMsaRequest) SetId(v int64) *GetLogUrlInMsaRequest {
	s.Id = &v
	return s
}

func (s *GetLogUrlInMsaRequest) SetTenantId(v string) *GetLogUrlInMsaRequest {
	s.TenantId = &v
	return s
}

func (s *GetLogUrlInMsaRequest) SetWorkspaceId(v string) *GetLogUrlInMsaRequest {
	s.WorkspaceId = &v
	return s
}

type GetLogUrlInMsaResponseBody struct {
	RequestId     *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                  `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *GetLogUrlInMsaResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                  `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s GetLogUrlInMsaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLogUrlInMsaResponseBody) GoString() string {
	return s.String()
}

func (s *GetLogUrlInMsaResponseBody) SetRequestId(v string) *GetLogUrlInMsaResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetLogUrlInMsaResponseBody) SetResultCode(v string) *GetLogUrlInMsaResponseBody {
	s.ResultCode = &v
	return s
}

func (s *GetLogUrlInMsaResponseBody) SetResultContent(v *GetLogUrlInMsaResponseBodyResultContent) *GetLogUrlInMsaResponseBody {
	s.ResultContent = v
	return s
}

func (s *GetLogUrlInMsaResponseBody) SetResultMessage(v string) *GetLogUrlInMsaResponseBody {
	s.ResultMessage = &v
	return s
}

type GetLogUrlInMsaResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetLogUrlInMsaResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s GetLogUrlInMsaResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *GetLogUrlInMsaResponseBodyResultContent) SetCode(v string) *GetLogUrlInMsaResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *GetLogUrlInMsaResponseBodyResultContent) SetData(v string) *GetLogUrlInMsaResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *GetLogUrlInMsaResponseBodyResultContent) SetMessage(v string) *GetLogUrlInMsaResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *GetLogUrlInMsaResponseBodyResultContent) SetSuccess(v bool) *GetLogUrlInMsaResponseBodyResultContent {
	s.Success = &v
	return s
}

type GetLogUrlInMsaResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetLogUrlInMsaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetLogUrlInMsaResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLogUrlInMsaResponse) GoString() string {
	return s.String()
}

func (s *GetLogUrlInMsaResponse) SetHeaders(v map[string]*string) *GetLogUrlInMsaResponse {
	s.Headers = v
	return s
}

func (s *GetLogUrlInMsaResponse) SetStatusCode(v int32) *GetLogUrlInMsaResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLogUrlInMsaResponse) SetBody(v *GetLogUrlInMsaResponseBody) *GetLogUrlInMsaResponse {
	s.Body = v
	return s
}

type GetMcubeFileTokenRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	OnexFlag    *bool   `json:"OnexFlag,omitempty" xml:"OnexFlag,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetMcubeFileTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeFileTokenRequest) GoString() string {
	return s.String()
}

func (s *GetMcubeFileTokenRequest) SetAppId(v string) *GetMcubeFileTokenRequest {
	s.AppId = &v
	return s
}

func (s *GetMcubeFileTokenRequest) SetOnexFlag(v bool) *GetMcubeFileTokenRequest {
	s.OnexFlag = &v
	return s
}

func (s *GetMcubeFileTokenRequest) SetTenantId(v string) *GetMcubeFileTokenRequest {
	s.TenantId = &v
	return s
}

func (s *GetMcubeFileTokenRequest) SetWorkspaceId(v string) *GetMcubeFileTokenRequest {
	s.WorkspaceId = &v
	return s
}

type GetMcubeFileTokenResponseBody struct {
	GetFileTokenResult *GetMcubeFileTokenResponseBodyGetFileTokenResult `json:"GetFileTokenResult,omitempty" xml:"GetFileTokenResult,omitempty" type:"Struct"`
	RequestId          *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode         *string                                          `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage      *string                                          `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s GetMcubeFileTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeFileTokenResponseBody) GoString() string {
	return s.String()
}

func (s *GetMcubeFileTokenResponseBody) SetGetFileTokenResult(v *GetMcubeFileTokenResponseBodyGetFileTokenResult) *GetMcubeFileTokenResponseBody {
	s.GetFileTokenResult = v
	return s
}

func (s *GetMcubeFileTokenResponseBody) SetRequestId(v string) *GetMcubeFileTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMcubeFileTokenResponseBody) SetResultCode(v string) *GetMcubeFileTokenResponseBody {
	s.ResultCode = &v
	return s
}

func (s *GetMcubeFileTokenResponseBody) SetResultMessage(v string) *GetMcubeFileTokenResponseBody {
	s.ResultMessage = &v
	return s
}

type GetMcubeFileTokenResponseBodyGetFileTokenResult struct {
	FileToken *GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken `json:"FileToken,omitempty" xml:"FileToken,omitempty" type:"Struct"`
	ResultMsg *string                                                   `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool                                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMcubeFileTokenResponseBodyGetFileTokenResult) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeFileTokenResponseBodyGetFileTokenResult) GoString() string {
	return s.String()
}

func (s *GetMcubeFileTokenResponseBodyGetFileTokenResult) SetFileToken(v *GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken) *GetMcubeFileTokenResponseBodyGetFileTokenResult {
	s.FileToken = v
	return s
}

func (s *GetMcubeFileTokenResponseBodyGetFileTokenResult) SetResultMsg(v string) *GetMcubeFileTokenResponseBodyGetFileTokenResult {
	s.ResultMsg = &v
	return s
}

func (s *GetMcubeFileTokenResponseBodyGetFileTokenResult) SetSuccess(v bool) *GetMcubeFileTokenResponseBodyGetFileTokenResult {
	s.Success = &v
	return s
}

type GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken struct {
	Accessid  *string `json:"Accessid,omitempty" xml:"Accessid,omitempty"`
	Dir       *string `json:"Dir,omitempty" xml:"Dir,omitempty"`
	Expire    *string `json:"Expire,omitempty" xml:"Expire,omitempty"`
	Host      *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Policy    *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Signature *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
}

func (s GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken) GoString() string {
	return s.String()
}

func (s *GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken) SetAccessid(v string) *GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken {
	s.Accessid = &v
	return s
}

func (s *GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken) SetDir(v string) *GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken {
	s.Dir = &v
	return s
}

func (s *GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken) SetExpire(v string) *GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken {
	s.Expire = &v
	return s
}

func (s *GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken) SetHost(v string) *GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken {
	s.Host = &v
	return s
}

func (s *GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken) SetPolicy(v string) *GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken {
	s.Policy = &v
	return s
}

func (s *GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken) SetSignature(v string) *GetMcubeFileTokenResponseBodyGetFileTokenResultFileToken {
	s.Signature = &v
	return s
}

type GetMcubeFileTokenResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMcubeFileTokenResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMcubeFileTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeFileTokenResponse) GoString() string {
	return s.String()
}

func (s *GetMcubeFileTokenResponse) SetHeaders(v map[string]*string) *GetMcubeFileTokenResponse {
	s.Headers = v
	return s
}

func (s *GetMcubeFileTokenResponse) SetStatusCode(v int32) *GetMcubeFileTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMcubeFileTokenResponse) SetBody(v *GetMcubeFileTokenResponseBody) *GetMcubeFileTokenResponse {
	s.Body = v
	return s
}

type GetMcubeNebulaResourceRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetMcubeNebulaResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeNebulaResourceRequest) GoString() string {
	return s.String()
}

func (s *GetMcubeNebulaResourceRequest) SetAppId(v string) *GetMcubeNebulaResourceRequest {
	s.AppId = &v
	return s
}

func (s *GetMcubeNebulaResourceRequest) SetId(v string) *GetMcubeNebulaResourceRequest {
	s.Id = &v
	return s
}

func (s *GetMcubeNebulaResourceRequest) SetTenantId(v string) *GetMcubeNebulaResourceRequest {
	s.TenantId = &v
	return s
}

func (s *GetMcubeNebulaResourceRequest) SetWorkspaceId(v string) *GetMcubeNebulaResourceRequest {
	s.WorkspaceId = &v
	return s
}

type GetMcubeNebulaResourceResponseBody struct {
	GetNebulaResourceResult *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult `json:"GetNebulaResourceResult,omitempty" xml:"GetNebulaResourceResult,omitempty" type:"Struct"`
	RequestId               *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode              *string                                                    `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage           *string                                                    `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s GetMcubeNebulaResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeNebulaResourceResponseBody) GoString() string {
	return s.String()
}

func (s *GetMcubeNebulaResourceResponseBody) SetGetNebulaResourceResult(v *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult) *GetMcubeNebulaResourceResponseBody {
	s.GetNebulaResourceResult = v
	return s
}

func (s *GetMcubeNebulaResourceResponseBody) SetRequestId(v string) *GetMcubeNebulaResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBody) SetResultCode(v string) *GetMcubeNebulaResourceResponseBody {
	s.ResultCode = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBody) SetResultMessage(v string) *GetMcubeNebulaResourceResponseBody {
	s.ResultMessage = &v
	return s
}

type GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult struct {
	ErrorCode          *string                                                                      `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	NebulaResourceInfo *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo `json:"NebulaResourceInfo,omitempty" xml:"NebulaResourceInfo,omitempty" type:"Struct"`
	RequestId          *string                                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg          *string                                                                      `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success            *bool                                                                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult) GoString() string {
	return s.String()
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult) SetErrorCode(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult {
	s.ErrorCode = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult) SetNebulaResourceInfo(v *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult {
	s.NebulaResourceInfo = v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult) SetRequestId(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult {
	s.RequestId = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult) SetResultMsg(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult {
	s.ResultMsg = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult) SetSuccess(v bool) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResult {
	s.Success = &v
	return s
}

type GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo struct {
	AppCode          *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AutoInstall      *int32  `json:"AutoInstall,omitempty" xml:"AutoInstall,omitempty"`
	ClientVersionMax *string `json:"ClientVersionMax,omitempty" xml:"ClientVersionMax,omitempty"`
	ClientVersionMin *string `json:"ClientVersionMin,omitempty" xml:"ClientVersionMin,omitempty"`
	Creator          *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	DownloadUrl      *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	ExtendInfo       *string `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty"`
	ExtraData        *string `json:"ExtraData,omitempty" xml:"ExtraData,omitempty"`
	FallbackBaseUrl  *string `json:"FallbackBaseUrl,omitempty" xml:"FallbackBaseUrl,omitempty"`
	FileSize         *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	GmtCreate        *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified      *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	H5Id             *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	H5Name           *string `json:"H5Name,omitempty" xml:"H5Name,omitempty"`
	H5Version        *string `json:"H5Version,omitempty" xml:"H5Version,omitempty"`
	Id               *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	InstallType      *int32  `json:"InstallType,omitempty" xml:"InstallType,omitempty"`
	MainUrl          *string `json:"MainUrl,omitempty" xml:"MainUrl,omitempty"`
	Memo             *string `json:"Memo,omitempty" xml:"Memo,omitempty"`
	MetaId           *int64  `json:"MetaId,omitempty" xml:"MetaId,omitempty"`
	Modifier         *string `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	PackageType      *int32  `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	Platform         *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	PublishPeriod    *int32  `json:"PublishPeriod,omitempty" xml:"PublishPeriod,omitempty"`
	ResourceType     *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Status           *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Vhost            *string `json:"Vhost,omitempty" xml:"Vhost,omitempty"`
}

func (s GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) GoString() string {
	return s.String()
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetAppCode(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.AppCode = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetAutoInstall(v int32) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.AutoInstall = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetClientVersionMax(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.ClientVersionMax = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetClientVersionMin(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.ClientVersionMin = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetCreator(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.Creator = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetDownloadUrl(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.DownloadUrl = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetExtendInfo(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.ExtendInfo = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetExtraData(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.ExtraData = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetFallbackBaseUrl(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.FallbackBaseUrl = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetFileSize(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.FileSize = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetGmtCreate(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.GmtCreate = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetGmtModified(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.GmtModified = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetH5Id(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.H5Id = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetH5Name(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.H5Name = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetH5Version(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.H5Version = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetId(v int64) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.Id = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetInstallType(v int32) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.InstallType = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetMainUrl(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.MainUrl = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetMemo(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.Memo = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetMetaId(v int64) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.MetaId = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetModifier(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.Modifier = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetPackageType(v int32) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.PackageType = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetPlatform(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.Platform = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetPublishPeriod(v int32) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.PublishPeriod = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetResourceType(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.ResourceType = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetStatus(v int32) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.Status = &v
	return s
}

func (s *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo) SetVhost(v string) *GetMcubeNebulaResourceResponseBodyGetNebulaResourceResultNebulaResourceInfo {
	s.Vhost = &v
	return s
}

type GetMcubeNebulaResourceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMcubeNebulaResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMcubeNebulaResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeNebulaResourceResponse) GoString() string {
	return s.String()
}

func (s *GetMcubeNebulaResourceResponse) SetHeaders(v map[string]*string) *GetMcubeNebulaResourceResponse {
	s.Headers = v
	return s
}

func (s *GetMcubeNebulaResourceResponse) SetStatusCode(v int32) *GetMcubeNebulaResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMcubeNebulaResourceResponse) SetBody(v *GetMcubeNebulaResourceResponseBody) *GetMcubeNebulaResourceResponse {
	s.Body = v
	return s
}

type GetMcubeNebulaTaskDetailRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	TaskId      *int64  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetMcubeNebulaTaskDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeNebulaTaskDetailRequest) GoString() string {
	return s.String()
}

func (s *GetMcubeNebulaTaskDetailRequest) SetAppId(v string) *GetMcubeNebulaTaskDetailRequest {
	s.AppId = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailRequest) SetTaskId(v int64) *GetMcubeNebulaTaskDetailRequest {
	s.TaskId = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailRequest) SetTenantId(v string) *GetMcubeNebulaTaskDetailRequest {
	s.TenantId = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailRequest) SetWorkspaceId(v string) *GetMcubeNebulaTaskDetailRequest {
	s.WorkspaceId = &v
	return s
}

type GetMcubeNebulaTaskDetailResponseBody struct {
	GetMcubeNebulaTaskDetailResult *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult `json:"GetMcubeNebulaTaskDetailResult,omitempty" xml:"GetMcubeNebulaTaskDetailResult,omitempty" type:"Struct"`
	RequestId                      *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode                     *string                                                             `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage                  *string                                                             `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s GetMcubeNebulaTaskDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeNebulaTaskDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetMcubeNebulaTaskDetailResponseBody) SetGetMcubeNebulaTaskDetailResult(v *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult) *GetMcubeNebulaTaskDetailResponseBody {
	s.GetMcubeNebulaTaskDetailResult = v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBody) SetRequestId(v string) *GetMcubeNebulaTaskDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBody) SetResultCode(v string) *GetMcubeNebulaTaskDetailResponseBody {
	s.ResultCode = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBody) SetResultMessage(v string) *GetMcubeNebulaTaskDetailResponseBody {
	s.ResultMessage = &v
	return s
}

type GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult struct {
	ErrorCode        *string                                                                             `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	NebulaTaskDetail *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail `json:"NebulaTaskDetail,omitempty" xml:"NebulaTaskDetail,omitempty" type:"Struct"`
	RequestId        *string                                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg        *string                                                                             `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success          *bool                                                                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult) GoString() string {
	return s.String()
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult) SetErrorCode(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult {
	s.ErrorCode = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult) SetNebulaTaskDetail(v *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult {
	s.NebulaTaskDetail = v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult) SetRequestId(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult {
	s.RequestId = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult) SetResultMsg(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult {
	s.ResultMsg = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult) SetSuccess(v bool) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResult {
	s.Success = &v
	return s
}

type GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail struct {
	AppCode          *string                                                                                           `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AppId            *string                                                                                           `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Atomic           *int32                                                                                            `json:"Atomic,omitempty" xml:"Atomic,omitempty"`
	BaseInfoId       *int64                                                                                            `json:"BaseInfoId,omitempty" xml:"BaseInfoId,omitempty"`
	BizType          *string                                                                                           `json:"BizType,omitempty" xml:"BizType,omitempty"`
	Creator          *string                                                                                           `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Cronexpress      *int32                                                                                            `json:"Cronexpress,omitempty" xml:"Cronexpress,omitempty"`
	DownloadUrl      *string                                                                                           `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	ExtraData        *string                                                                                           `json:"ExtraData,omitempty" xml:"ExtraData,omitempty"`
	FileSize         *string                                                                                           `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	FullRepair       *int32                                                                                            `json:"FullRepair,omitempty" xml:"FullRepair,omitempty"`
	GmtCreate        *string                                                                                           `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified      *string                                                                                           `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GmtModifiedStr   *string                                                                                           `json:"GmtModifiedStr,omitempty" xml:"GmtModifiedStr,omitempty"`
	GreyConfigInfo   *string                                                                                           `json:"GreyConfigInfo,omitempty" xml:"GreyConfigInfo,omitempty"`
	GreyEndtime      *string                                                                                           `json:"GreyEndtime,omitempty" xml:"GreyEndtime,omitempty"`
	GreyEndtimeData  *string                                                                                           `json:"GreyEndtimeData,omitempty" xml:"GreyEndtimeData,omitempty"`
	GreyEndtimeStr   *string                                                                                           `json:"GreyEndtimeStr,omitempty" xml:"GreyEndtimeStr,omitempty"`
	GreyNum          *int32                                                                                            `json:"GreyNum,omitempty" xml:"GreyNum,omitempty"`
	GreyUrl          *string                                                                                           `json:"GreyUrl,omitempty" xml:"GreyUrl,omitempty"`
	Id               *int64                                                                                            `json:"Id,omitempty" xml:"Id,omitempty"`
	IssueDesc        *string                                                                                           `json:"IssueDesc,omitempty" xml:"IssueDesc,omitempty"`
	Memo             *string                                                                                           `json:"Memo,omitempty" xml:"Memo,omitempty"`
	Modifier         *string                                                                                           `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	OssPath          *string                                                                                           `json:"OssPath,omitempty" xml:"OssPath,omitempty"`
	PackageId        *int64                                                                                            `json:"PackageId,omitempty" xml:"PackageId,omitempty"`
	Percent          *int32                                                                                            `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Platform         *string                                                                                           `json:"Platform,omitempty" xml:"Platform,omitempty"`
	ProductId        *string                                                                                           `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	ProductVersion   *string                                                                                           `json:"ProductVersion,omitempty" xml:"ProductVersion,omitempty"`
	PublishMode      *int32                                                                                            `json:"PublishMode,omitempty" xml:"PublishMode,omitempty"`
	PublishPeriod    *int32                                                                                            `json:"PublishPeriod,omitempty" xml:"PublishPeriod,omitempty"`
	PublishType      *int32                                                                                            `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	QuickRollback    *int32                                                                                            `json:"QuickRollback,omitempty" xml:"QuickRollback,omitempty"`
	ReleaseVersion   *string                                                                                           `json:"ReleaseVersion,omitempty" xml:"ReleaseVersion,omitempty"`
	RuleJsonList     []*GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList `json:"RuleJsonList,omitempty" xml:"RuleJsonList,omitempty" type:"Repeated"`
	SourceId         *string                                                                                           `json:"SourceId,omitempty" xml:"SourceId,omitempty"`
	SourceName       *string                                                                                           `json:"SourceName,omitempty" xml:"SourceName,omitempty"`
	SourceType       *string                                                                                           `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	Status           *int32                                                                                            `json:"Status,omitempty" xml:"Status,omitempty"`
	SyncResult       *string                                                                                           `json:"SyncResult,omitempty" xml:"SyncResult,omitempty"`
	SyncType         *int32                                                                                            `json:"SyncType,omitempty" xml:"SyncType,omitempty"`
	TaskName         *string                                                                                           `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TaskStatus       *int32                                                                                            `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	TaskType         *int32                                                                                            `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	TaskVersion      *int64                                                                                            `json:"TaskVersion,omitempty" xml:"TaskVersion,omitempty"`
	UpgradeNoticeNum *int64                                                                                            `json:"UpgradeNoticeNum,omitempty" xml:"UpgradeNoticeNum,omitempty"`
	UpgradeProgress  *string                                                                                           `json:"UpgradeProgress,omitempty" xml:"UpgradeProgress,omitempty"`
	WhitelistIds     *string                                                                                           `json:"WhitelistIds,omitempty" xml:"WhitelistIds,omitempty"`
	WorkspaceId      *string                                                                                           `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) GoString() string {
	return s.String()
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetAppCode(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.AppCode = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetAppId(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.AppId = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetAtomic(v int32) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.Atomic = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetBaseInfoId(v int64) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.BaseInfoId = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetBizType(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.BizType = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetCreator(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.Creator = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetCronexpress(v int32) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.Cronexpress = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetDownloadUrl(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.DownloadUrl = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetExtraData(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.ExtraData = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetFileSize(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.FileSize = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetFullRepair(v int32) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.FullRepair = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetGmtCreate(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.GmtCreate = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetGmtModified(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.GmtModified = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetGmtModifiedStr(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.GmtModifiedStr = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetGreyConfigInfo(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.GreyConfigInfo = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetGreyEndtime(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.GreyEndtime = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetGreyEndtimeData(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.GreyEndtimeData = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetGreyEndtimeStr(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.GreyEndtimeStr = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetGreyNum(v int32) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.GreyNum = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetGreyUrl(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.GreyUrl = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetId(v int64) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.Id = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetIssueDesc(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.IssueDesc = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetMemo(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.Memo = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetModifier(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.Modifier = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetOssPath(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.OssPath = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetPackageId(v int64) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.PackageId = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetPercent(v int32) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.Percent = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetPlatform(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.Platform = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetProductId(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.ProductId = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetProductVersion(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.ProductVersion = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetPublishMode(v int32) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.PublishMode = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetPublishPeriod(v int32) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.PublishPeriod = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetPublishType(v int32) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.PublishType = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetQuickRollback(v int32) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.QuickRollback = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetReleaseVersion(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.ReleaseVersion = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetRuleJsonList(v []*GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.RuleJsonList = v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetSourceId(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.SourceId = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetSourceName(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.SourceName = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetSourceType(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.SourceType = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetStatus(v int32) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.Status = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetSyncResult(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.SyncResult = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetSyncType(v int32) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.SyncType = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetTaskName(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.TaskName = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetTaskStatus(v int32) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.TaskStatus = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetTaskType(v int32) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.TaskType = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetTaskVersion(v int64) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.TaskVersion = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetUpgradeNoticeNum(v int64) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.UpgradeNoticeNum = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetUpgradeProgress(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.UpgradeProgress = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetWhitelistIds(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.WhitelistIds = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail) SetWorkspaceId(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetail {
	s.WorkspaceId = &v
	return s
}

type GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList struct {
	Operation   *string `json:"Operation,omitempty" xml:"Operation,omitempty"`
	RuleElement *string `json:"RuleElement,omitempty" xml:"RuleElement,omitempty"`
	RuleType    *string `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	Value       *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList) GoString() string {
	return s.String()
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList) SetOperation(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList {
	s.Operation = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList) SetRuleElement(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList {
	s.RuleElement = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList) SetRuleType(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList {
	s.RuleType = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList) SetValue(v string) *GetMcubeNebulaTaskDetailResponseBodyGetMcubeNebulaTaskDetailResultNebulaTaskDetailRuleJsonList {
	s.Value = &v
	return s
}

type GetMcubeNebulaTaskDetailResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMcubeNebulaTaskDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMcubeNebulaTaskDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeNebulaTaskDetailResponse) GoString() string {
	return s.String()
}

func (s *GetMcubeNebulaTaskDetailResponse) SetHeaders(v map[string]*string) *GetMcubeNebulaTaskDetailResponse {
	s.Headers = v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponse) SetStatusCode(v int32) *GetMcubeNebulaTaskDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMcubeNebulaTaskDetailResponse) SetBody(v *GetMcubeNebulaTaskDetailResponseBody) *GetMcubeNebulaTaskDetailResponse {
	s.Body = v
	return s
}

type GetMcubeUpgradePackageInfoRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	PackageId   *int64  `json:"PackageId,omitempty" xml:"PackageId,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetMcubeUpgradePackageInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeUpgradePackageInfoRequest) GoString() string {
	return s.String()
}

func (s *GetMcubeUpgradePackageInfoRequest) SetAppId(v string) *GetMcubeUpgradePackageInfoRequest {
	s.AppId = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoRequest) SetPackageId(v int64) *GetMcubeUpgradePackageInfoRequest {
	s.PackageId = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoRequest) SetTenantId(v string) *GetMcubeUpgradePackageInfoRequest {
	s.TenantId = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoRequest) SetWorkspaceId(v string) *GetMcubeUpgradePackageInfoRequest {
	s.WorkspaceId = &v
	return s
}

type GetMcubeUpgradePackageInfoResponseBody struct {
	GetPackageResult *GetMcubeUpgradePackageInfoResponseBodyGetPackageResult `json:"GetPackageResult,omitempty" xml:"GetPackageResult,omitempty" type:"Struct"`
	RequestId        *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode       *string                                                 `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage    *string                                                 `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s GetMcubeUpgradePackageInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeUpgradePackageInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetMcubeUpgradePackageInfoResponseBody) SetGetPackageResult(v *GetMcubeUpgradePackageInfoResponseBodyGetPackageResult) *GetMcubeUpgradePackageInfoResponseBody {
	s.GetPackageResult = v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBody) SetRequestId(v string) *GetMcubeUpgradePackageInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBody) SetResultCode(v string) *GetMcubeUpgradePackageInfoResponseBody {
	s.ResultCode = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBody) SetResultMessage(v string) *GetMcubeUpgradePackageInfoResponseBody {
	s.ResultMessage = &v
	return s
}

type GetMcubeUpgradePackageInfoResponseBodyGetPackageResult struct {
	ErrorCode   *string                                                            `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	PackageInfo *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfo `json:"PackageInfo,omitempty" xml:"PackageInfo,omitempty" type:"Struct"`
	RequestId   *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg   *string                                                            `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success     *bool                                                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMcubeUpgradePackageInfoResponseBodyGetPackageResult) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeUpgradePackageInfoResponseBodyGetPackageResult) GoString() string {
	return s.String()
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResult) SetErrorCode(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResult {
	s.ErrorCode = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResult) SetPackageInfo(v *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfo) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResult {
	s.PackageInfo = v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResult) SetRequestId(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResult {
	s.RequestId = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResult) SetResultMsg(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResult {
	s.ResultMsg = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResult) SetSuccess(v bool) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResult {
	s.Success = &v
	return s
}

type GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfo struct {
	MobileTestFlightConfigDO *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO `json:"MobileTestFlightConfigDO,omitempty" xml:"MobileTestFlightConfigDO,omitempty" type:"Struct"`
	UpgradeBaseInfoDO        *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO        `json:"UpgradeBaseInfoDO,omitempty" xml:"UpgradeBaseInfoDO,omitempty" type:"Struct"`
}

func (s GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfo) GoString() string {
	return s.String()
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfo) SetMobileTestFlightConfigDO(v *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfo {
	s.MobileTestFlightConfigDO = v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfo) SetUpgradeBaseInfoDO(v *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfo {
	s.UpgradeBaseInfoDO = v
	return s
}

type GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO struct {
	GmtCreate     *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified   *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id            *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	InstallAmount *int32  `json:"InstallAmount,omitempty" xml:"InstallAmount,omitempty"`
	InvalidTime   *string `json:"InvalidTime,omitempty" xml:"InvalidTime,omitempty"`
	UpgradeId     *int64  `json:"UpgradeId,omitempty" xml:"UpgradeId,omitempty"`
}

func (s GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO) GoString() string {
	return s.String()
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO) SetGmtCreate(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO {
	s.GmtCreate = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO) SetGmtModified(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO {
	s.GmtModified = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO) SetId(v int64) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO {
	s.Id = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO) SetInstallAmount(v int32) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO {
	s.InstallAmount = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO) SetInvalidTime(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO {
	s.InvalidTime = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO) SetUpgradeId(v int64) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoMobileTestFlightConfigDO {
	s.UpgradeId = &v
	return s
}

type GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO struct {
	AllowCreateTask  *bool   `json:"AllowCreateTask,omitempty" xml:"AllowCreateTask,omitempty"`
	AppCode          *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AppstoreUrl      *string `json:"AppstoreUrl,omitempty" xml:"AppstoreUrl,omitempty"`
	BackLog          *string `json:"BackLog,omitempty" xml:"BackLog,omitempty"`
	ChangeLog        *string `json:"ChangeLog,omitempty" xml:"ChangeLog,omitempty"`
	ClientFileSize   *int32  `json:"ClientFileSize,omitempty" xml:"ClientFileSize,omitempty"`
	ClientName       *string `json:"ClientName,omitempty" xml:"ClientName,omitempty"`
	CpId             *string `json:"CpId,omitempty" xml:"CpId,omitempty"`
	Creator          *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	DownloadUrl      *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	GlobalVariables  *string `json:"GlobalVariables,omitempty" xml:"GlobalVariables,omitempty"`
	GmtCreate        *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtCreateStr     *string `json:"GmtCreateStr,omitempty" xml:"GmtCreateStr,omitempty"`
	GmtModified      *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GmtModifiedStr   *string `json:"GmtModifiedStr,omitempty" xml:"GmtModifiedStr,omitempty"`
	Id               *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	InnerVersion     *string `json:"InnerVersion,omitempty" xml:"InnerVersion,omitempty"`
	IosSymbol        *string `json:"IosSymbol,omitempty" xml:"IosSymbol,omitempty"`
	IsEnterprise     *int32  `json:"IsEnterprise,omitempty" xml:"IsEnterprise,omitempty"`
	IsRc             *int32  `json:"IsRc,omitempty" xml:"IsRc,omitempty"`
	IsRelease        *int32  `json:"IsRelease,omitempty" xml:"IsRelease,omitempty"`
	MaxVersion       *string `json:"MaxVersion,omitempty" xml:"MaxVersion,omitempty"`
	Md5              *string `json:"Md5,omitempty" xml:"Md5,omitempty"`
	Modifier         *string `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	NeedCheck        *int32  `json:"NeedCheck,omitempty" xml:"NeedCheck,omitempty"`
	OssPath          *string `json:"OssPath,omitempty" xml:"OssPath,omitempty"`
	PackageType      *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	Platform         *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	ProductId        *string `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	ProductName      *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	ProductVersion   *string `json:"ProductVersion,omitempty" xml:"ProductVersion,omitempty"`
	PublishPeriod    *int32  `json:"PublishPeriod,omitempty" xml:"PublishPeriod,omitempty"`
	QrcodeUrl        *string `json:"QrcodeUrl,omitempty" xml:"QrcodeUrl,omitempty"`
	ReleaseType      *string `json:"ReleaseType,omitempty" xml:"ReleaseType,omitempty"`
	ReleaseWindow    *string `json:"ReleaseWindow,omitempty" xml:"ReleaseWindow,omitempty"`
	ScmDownloadUrl   *string `json:"ScmDownloadUrl,omitempty" xml:"ScmDownloadUrl,omitempty"`
	ServerVersion    *int32  `json:"ServerVersion,omitempty" xml:"ServerVersion,omitempty"`
	VerificationCode *string `json:"VerificationCode,omitempty" xml:"VerificationCode,omitempty"`
	VerifyResult     *int32  `json:"VerifyResult,omitempty" xml:"VerifyResult,omitempty"`
	VersionCode      *string `json:"VersionCode,omitempty" xml:"VersionCode,omitempty"`
}

func (s GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) GoString() string {
	return s.String()
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetAllowCreateTask(v bool) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.AllowCreateTask = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetAppCode(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.AppCode = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetAppstoreUrl(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.AppstoreUrl = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetBackLog(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.BackLog = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetChangeLog(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.ChangeLog = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetClientFileSize(v int32) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.ClientFileSize = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetClientName(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.ClientName = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetCpId(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.CpId = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetCreator(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.Creator = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetDownloadUrl(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.DownloadUrl = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetGlobalVariables(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.GlobalVariables = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetGmtCreate(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.GmtCreate = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetGmtCreateStr(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.GmtCreateStr = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetGmtModified(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.GmtModified = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetGmtModifiedStr(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.GmtModifiedStr = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetId(v int64) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.Id = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetInnerVersion(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.InnerVersion = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetIosSymbol(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.IosSymbol = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetIsEnterprise(v int32) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.IsEnterprise = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetIsRc(v int32) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.IsRc = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetIsRelease(v int32) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.IsRelease = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetMaxVersion(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.MaxVersion = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetMd5(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.Md5 = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetModifier(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.Modifier = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetNeedCheck(v int32) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.NeedCheck = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetOssPath(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.OssPath = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetPackageType(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.PackageType = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetPlatform(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.Platform = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetProductId(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.ProductId = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetProductName(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.ProductName = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetProductVersion(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.ProductVersion = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetPublishPeriod(v int32) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.PublishPeriod = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetQrcodeUrl(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.QrcodeUrl = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetReleaseType(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.ReleaseType = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetReleaseWindow(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.ReleaseWindow = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetScmDownloadUrl(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.ScmDownloadUrl = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetServerVersion(v int32) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.ServerVersion = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetVerificationCode(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.VerificationCode = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetVerifyResult(v int32) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.VerifyResult = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO) SetVersionCode(v string) *GetMcubeUpgradePackageInfoResponseBodyGetPackageResultPackageInfoUpgradeBaseInfoDO {
	s.VersionCode = &v
	return s
}

type GetMcubeUpgradePackageInfoResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMcubeUpgradePackageInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMcubeUpgradePackageInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeUpgradePackageInfoResponse) GoString() string {
	return s.String()
}

func (s *GetMcubeUpgradePackageInfoResponse) SetHeaders(v map[string]*string) *GetMcubeUpgradePackageInfoResponse {
	s.Headers = v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponse) SetStatusCode(v int32) *GetMcubeUpgradePackageInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMcubeUpgradePackageInfoResponse) SetBody(v *GetMcubeUpgradePackageInfoResponseBody) *GetMcubeUpgradePackageInfoResponse {
	s.Body = v
	return s
}

type GetMcubeUpgradeTaskInfoRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	TaskId      *int64  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetMcubeUpgradeTaskInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeUpgradeTaskInfoRequest) GoString() string {
	return s.String()
}

func (s *GetMcubeUpgradeTaskInfoRequest) SetAppId(v string) *GetMcubeUpgradeTaskInfoRequest {
	s.AppId = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoRequest) SetTaskId(v int64) *GetMcubeUpgradeTaskInfoRequest {
	s.TaskId = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoRequest) SetTenantId(v string) *GetMcubeUpgradeTaskInfoRequest {
	s.TenantId = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoRequest) SetWorkspaceId(v string) *GetMcubeUpgradeTaskInfoRequest {
	s.WorkspaceId = &v
	return s
}

type GetMcubeUpgradeTaskInfoResponseBody struct {
	GetTaskResult *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult `json:"GetTaskResult,omitempty" xml:"GetTaskResult,omitempty" type:"Struct"`
	RequestId     *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                           `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage *string                                           `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s GetMcubeUpgradeTaskInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeUpgradeTaskInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetMcubeUpgradeTaskInfoResponseBody) SetGetTaskResult(v *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult) *GetMcubeUpgradeTaskInfoResponseBody {
	s.GetTaskResult = v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBody) SetRequestId(v string) *GetMcubeUpgradeTaskInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBody) SetResultCode(v string) *GetMcubeUpgradeTaskInfoResponseBody {
	s.ResultCode = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBody) SetResultMessage(v string) *GetMcubeUpgradeTaskInfoResponseBody {
	s.ResultMessage = &v
	return s
}

type GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult struct {
	ErrorCode *string                                                   `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg *string                                                   `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool                                                     `json:"Success,omitempty" xml:"Success,omitempty"`
	TaskInfo  *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo `json:"TaskInfo,omitempty" xml:"TaskInfo,omitempty" type:"Struct"`
}

func (s GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult) GoString() string {
	return s.String()
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult) SetErrorCode(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult {
	s.ErrorCode = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult) SetRequestId(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult {
	s.RequestId = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult) SetResultMsg(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult {
	s.ResultMsg = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult) SetSuccess(v bool) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult {
	s.Success = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult) SetTaskInfo(v *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResult {
	s.TaskInfo = v
	return s
}

type GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo struct {
	AppCode          *string                                                                 `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AppId            *string                                                                 `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppstoreUrl      *string                                                                 `json:"AppstoreUrl,omitempty" xml:"AppstoreUrl,omitempty"`
	Creater          *string                                                                 `json:"Creater,omitempty" xml:"Creater,omitempty"`
	Creator          *string                                                                 `json:"Creator,omitempty" xml:"Creator,omitempty"`
	DownloadUrl      *string                                                                 `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	GreyConfigInfo   *string                                                                 `json:"GreyConfigInfo,omitempty" xml:"GreyConfigInfo,omitempty"`
	GreyEndtimeData  *string                                                                 `json:"GreyEndtimeData,omitempty" xml:"GreyEndtimeData,omitempty"`
	GreyNum          *int32                                                                  `json:"GreyNum,omitempty" xml:"GreyNum,omitempty"`
	HistoryForce     *int32                                                                  `json:"HistoryForce,omitempty" xml:"HistoryForce,omitempty"`
	Id               *int64                                                                  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsEnterprise     *int32                                                                  `json:"IsEnterprise,omitempty" xml:"IsEnterprise,omitempty"`
	IsOfficial       *int32                                                                  `json:"IsOfficial,omitempty" xml:"IsOfficial,omitempty"`
	IsRc             *int32                                                                  `json:"IsRc,omitempty" xml:"IsRc,omitempty"`
	IsRelease        *int32                                                                  `json:"IsRelease,omitempty" xml:"IsRelease,omitempty"`
	Memo             *string                                                                 `json:"Memo,omitempty" xml:"Memo,omitempty"`
	Modifier         *string                                                                 `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	NetType          *string                                                                 `json:"NetType,omitempty" xml:"NetType,omitempty"`
	OsVersion        *string                                                                 `json:"OsVersion,omitempty" xml:"OsVersion,omitempty"`
	PackageInfoId    *int64                                                                  `json:"PackageInfoId,omitempty" xml:"PackageInfoId,omitempty"`
	PackageType      *string                                                                 `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	Platform         *string                                                                 `json:"Platform,omitempty" xml:"Platform,omitempty"`
	ProductId        *string                                                                 `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	PublishMode      *int32                                                                  `json:"PublishMode,omitempty" xml:"PublishMode,omitempty"`
	PublishType      *int32                                                                  `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	PushContent      *string                                                                 `json:"PushContent,omitempty" xml:"PushContent,omitempty"`
	QrcodeUrl        *string                                                                 `json:"QrcodeUrl,omitempty" xml:"QrcodeUrl,omitempty"`
	RuleJsonList     []*GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList `json:"RuleJsonList,omitempty" xml:"RuleJsonList,omitempty" type:"Repeated"`
	SilentType       *int32                                                                  `json:"SilentType,omitempty" xml:"SilentType,omitempty"`
	TaskStatus       *int32                                                                  `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	UpgradeContent   *string                                                                 `json:"UpgradeContent,omitempty" xml:"UpgradeContent,omitempty"`
	UpgradeType      *int32                                                                  `json:"UpgradeType,omitempty" xml:"UpgradeType,omitempty"`
	UpgradeValidTime *int32                                                                  `json:"UpgradeValidTime,omitempty" xml:"UpgradeValidTime,omitempty"`
	Whitelist        []*GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist    `json:"Whitelist,omitempty" xml:"Whitelist,omitempty" type:"Repeated"`
	WhitelistIds     *string                                                                 `json:"WhitelistIds,omitempty" xml:"WhitelistIds,omitempty"`
	WorkspaceId      *string                                                                 `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) GoString() string {
	return s.String()
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetAppCode(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.AppCode = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetAppId(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.AppId = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetAppstoreUrl(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.AppstoreUrl = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetCreater(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.Creater = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetCreator(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.Creator = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetDownloadUrl(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.DownloadUrl = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetGreyConfigInfo(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.GreyConfigInfo = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetGreyEndtimeData(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.GreyEndtimeData = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetGreyNum(v int32) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.GreyNum = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetHistoryForce(v int32) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.HistoryForce = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetId(v int64) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.Id = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetIsEnterprise(v int32) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.IsEnterprise = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetIsOfficial(v int32) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.IsOfficial = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetIsRc(v int32) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.IsRc = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetIsRelease(v int32) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.IsRelease = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetMemo(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.Memo = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetModifier(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.Modifier = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetNetType(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.NetType = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetOsVersion(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.OsVersion = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetPackageInfoId(v int64) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.PackageInfoId = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetPackageType(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.PackageType = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetPlatform(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.Platform = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetProductId(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.ProductId = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetPublishMode(v int32) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.PublishMode = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetPublishType(v int32) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.PublishType = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetPushContent(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.PushContent = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetQrcodeUrl(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.QrcodeUrl = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetRuleJsonList(v []*GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.RuleJsonList = v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetSilentType(v int32) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.SilentType = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetTaskStatus(v int32) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.TaskStatus = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetUpgradeContent(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.UpgradeContent = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetUpgradeType(v int32) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.UpgradeType = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetUpgradeValidTime(v int32) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.UpgradeValidTime = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetWhitelist(v []*GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.Whitelist = v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetWhitelistIds(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.WhitelistIds = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo) SetWorkspaceId(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfo {
	s.WorkspaceId = &v
	return s
}

type GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList struct {
	Operation   *string `json:"Operation,omitempty" xml:"Operation,omitempty"`
	RuleElement *string `json:"RuleElement,omitempty" xml:"RuleElement,omitempty"`
	RuleType    *string `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	Value       *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList) GoString() string {
	return s.String()
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList) SetOperation(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList {
	s.Operation = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList) SetRuleElement(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList {
	s.RuleElement = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList) SetRuleType(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList {
	s.RuleType = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList) SetValue(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoRuleJsonList {
	s.Value = &v
	return s
}

type GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist struct {
	AppCode        *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	Id             *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IdType         *string `json:"IdType,omitempty" xml:"IdType,omitempty"`
	Platform       *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	Status         *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	UserType       *string `json:"UserType,omitempty" xml:"UserType,omitempty"`
	WhiteListCount *int64  `json:"WhiteListCount,omitempty" xml:"WhiteListCount,omitempty"`
	WhiteListName  *string `json:"WhiteListName,omitempty" xml:"WhiteListName,omitempty"`
	WhitelistType  *string `json:"WhitelistType,omitempty" xml:"WhitelistType,omitempty"`
}

func (s GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist) GoString() string {
	return s.String()
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist) SetAppCode(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist {
	s.AppCode = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist) SetId(v int64) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist {
	s.Id = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist) SetIdType(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist {
	s.IdType = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist) SetPlatform(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist {
	s.Platform = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist) SetStatus(v int32) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist {
	s.Status = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist) SetUserType(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist {
	s.UserType = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist) SetWhiteListCount(v int64) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist {
	s.WhiteListCount = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist) SetWhiteListName(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist {
	s.WhiteListName = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist) SetWhitelistType(v string) *GetMcubeUpgradeTaskInfoResponseBodyGetTaskResultTaskInfoWhitelist {
	s.WhitelistType = &v
	return s
}

type GetMcubeUpgradeTaskInfoResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMcubeUpgradeTaskInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMcubeUpgradeTaskInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMcubeUpgradeTaskInfoResponse) GoString() string {
	return s.String()
}

func (s *GetMcubeUpgradeTaskInfoResponse) SetHeaders(v map[string]*string) *GetMcubeUpgradeTaskInfoResponse {
	s.Headers = v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponse) SetStatusCode(v int32) *GetMcubeUpgradeTaskInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMcubeUpgradeTaskInfoResponse) SetBody(v *GetMcubeUpgradeTaskInfoResponseBody) *GetMcubeUpgradeTaskInfoResponse {
	s.Body = v
	return s
}

type GetMdsMiniConfigRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	H5Id        *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetMdsMiniConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMdsMiniConfigRequest) GoString() string {
	return s.String()
}

func (s *GetMdsMiniConfigRequest) SetAppId(v string) *GetMdsMiniConfigRequest {
	s.AppId = &v
	return s
}

func (s *GetMdsMiniConfigRequest) SetH5Id(v string) *GetMdsMiniConfigRequest {
	s.H5Id = &v
	return s
}

func (s *GetMdsMiniConfigRequest) SetTenantId(v string) *GetMdsMiniConfigRequest {
	s.TenantId = &v
	return s
}

func (s *GetMdsMiniConfigRequest) SetWorkspaceId(v string) *GetMdsMiniConfigRequest {
	s.WorkspaceId = &v
	return s
}

type GetMdsMiniConfigResponseBody struct {
	RequestId     *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                    `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *GetMdsMiniConfigResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                    `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s GetMdsMiniConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMdsMiniConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetMdsMiniConfigResponseBody) SetRequestId(v string) *GetMdsMiniConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMdsMiniConfigResponseBody) SetResultCode(v string) *GetMdsMiniConfigResponseBody {
	s.ResultCode = &v
	return s
}

func (s *GetMdsMiniConfigResponseBody) SetResultContent(v *GetMdsMiniConfigResponseBodyResultContent) *GetMdsMiniConfigResponseBody {
	s.ResultContent = v
	return s
}

func (s *GetMdsMiniConfigResponseBody) SetResultMessage(v string) *GetMdsMiniConfigResponseBody {
	s.ResultMessage = &v
	return s
}

type GetMdsMiniConfigResponseBodyResultContent struct {
	Data      *GetMdsMiniConfigResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMdsMiniConfigResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s GetMdsMiniConfigResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *GetMdsMiniConfigResponseBodyResultContent) SetData(v *GetMdsMiniConfigResponseBodyResultContentData) *GetMdsMiniConfigResponseBodyResultContent {
	s.Data = v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContent) SetRequestId(v string) *GetMdsMiniConfigResponseBodyResultContent {
	s.RequestId = &v
	return s
}

type GetMdsMiniConfigResponseBodyResultContentData struct {
	Content   *GetMdsMiniConfigResponseBodyResultContentDataContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	RequestId *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg *string                                               `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool                                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMdsMiniConfigResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s GetMdsMiniConfigResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *GetMdsMiniConfigResponseBodyResultContentData) SetContent(v *GetMdsMiniConfigResponseBodyResultContentDataContent) *GetMdsMiniConfigResponseBodyResultContentData {
	s.Content = v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentData) SetRequestId(v string) *GetMdsMiniConfigResponseBodyResultContentData {
	s.RequestId = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentData) SetResultMsg(v string) *GetMdsMiniConfigResponseBodyResultContentData {
	s.ResultMsg = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentData) SetSuccess(v bool) *GetMdsMiniConfigResponseBodyResultContentData {
	s.Success = &v
	return s
}

type GetMdsMiniConfigResponseBodyResultContentDataContent struct {
	ApiConfigList           []*GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList           `json:"ApiConfigList,omitempty" xml:"ApiConfigList,omitempty" type:"Repeated"`
	AppCode                 *string                                                                        `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	EnableServerDomainCount *string                                                                        `json:"EnableServerDomainCount,omitempty" xml:"EnableServerDomainCount,omitempty"`
	H5Id                    *string                                                                        `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	H5Name                  *string                                                                        `json:"H5Name,omitempty" xml:"H5Name,omitempty"`
	PrivilegeSwitch         *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch           `json:"PrivilegeSwitch,omitempty" xml:"PrivilegeSwitch,omitempty" type:"Struct"`
	ServerDomainConfigList  []*GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList  `json:"ServerDomainConfigList,omitempty" xml:"ServerDomainConfigList,omitempty" type:"Repeated"`
	WebviewDomainConfigList []*GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList `json:"WebviewDomainConfigList,omitempty" xml:"WebviewDomainConfigList,omitempty" type:"Repeated"`
}

func (s GetMdsMiniConfigResponseBodyResultContentDataContent) String() string {
	return tea.Prettify(s)
}

func (s GetMdsMiniConfigResponseBodyResultContentDataContent) GoString() string {
	return s.String()
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContent) SetApiConfigList(v []*GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList) *GetMdsMiniConfigResponseBodyResultContentDataContent {
	s.ApiConfigList = v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContent) SetAppCode(v string) *GetMdsMiniConfigResponseBodyResultContentDataContent {
	s.AppCode = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContent) SetEnableServerDomainCount(v string) *GetMdsMiniConfigResponseBodyResultContentDataContent {
	s.EnableServerDomainCount = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContent) SetH5Id(v string) *GetMdsMiniConfigResponseBodyResultContentDataContent {
	s.H5Id = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContent) SetH5Name(v string) *GetMdsMiniConfigResponseBodyResultContentDataContent {
	s.H5Name = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContent) SetPrivilegeSwitch(v *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch) *GetMdsMiniConfigResponseBodyResultContentDataContent {
	s.PrivilegeSwitch = v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContent) SetServerDomainConfigList(v []*GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList) *GetMdsMiniConfigResponseBodyResultContentDataContent {
	s.ServerDomainConfigList = v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContent) SetWebviewDomainConfigList(v []*GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList) *GetMdsMiniConfigResponseBodyResultContentDataContent {
	s.WebviewDomainConfigList = v
	return s
}

type GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList struct {
	AppCode      *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	ConfigStatus *int64  `json:"ConfigStatus,omitempty" xml:"ConfigStatus,omitempty"`
	ConfigType   *string `json:"ConfigType,omitempty" xml:"ConfigType,omitempty"`
	ConfigValue  *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtCreate    *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified  *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	H5Id         *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	H5Name       *string `json:"H5Name,omitempty" xml:"H5Name,omitempty"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList) String() string {
	return tea.Prettify(s)
}

func (s GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList) GoString() string {
	return s.String()
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList) SetAppCode(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList {
	s.AppCode = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList) SetConfigStatus(v int64) *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList {
	s.ConfigStatus = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList) SetConfigType(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList {
	s.ConfigType = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList) SetConfigValue(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList {
	s.ConfigValue = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList) SetDescription(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList {
	s.Description = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList) SetGmtCreate(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList {
	s.GmtCreate = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList) SetGmtModified(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList {
	s.GmtModified = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList) SetH5Id(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList {
	s.H5Id = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList) SetH5Name(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList {
	s.H5Name = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList) SetId(v int64) *GetMdsMiniConfigResponseBodyResultContentDataContentApiConfigList {
	s.Id = &v
	return s
}

type GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch struct {
	AppCode      *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	ConfigStatus *int64  `json:"ConfigStatus,omitempty" xml:"ConfigStatus,omitempty"`
	ConfigType   *string `json:"ConfigType,omitempty" xml:"ConfigType,omitempty"`
	ConfigValue  *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtCreate    *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified  *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	H5Id         *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	H5Name       *string `json:"H5Name,omitempty" xml:"H5Name,omitempty"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch) String() string {
	return tea.Prettify(s)
}

func (s GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch) GoString() string {
	return s.String()
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch) SetAppCode(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch {
	s.AppCode = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch) SetConfigStatus(v int64) *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch {
	s.ConfigStatus = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch) SetConfigType(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch {
	s.ConfigType = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch) SetConfigValue(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch {
	s.ConfigValue = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch) SetDescription(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch {
	s.Description = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch) SetGmtCreate(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch {
	s.GmtCreate = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch) SetGmtModified(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch {
	s.GmtModified = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch) SetH5Id(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch {
	s.H5Id = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch) SetH5Name(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch {
	s.H5Name = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch) SetId(v int64) *GetMdsMiniConfigResponseBodyResultContentDataContentPrivilegeSwitch {
	s.Id = &v
	return s
}

type GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList struct {
	AppCode      *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	ConfigStatus *int64  `json:"ConfigStatus,omitempty" xml:"ConfigStatus,omitempty"`
	ConfigType   *string `json:"ConfigType,omitempty" xml:"ConfigType,omitempty"`
	ConfigValue  *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtCreate    *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified  *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	H5Id         *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	H5Name       *string `json:"H5Name,omitempty" xml:"H5Name,omitempty"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList) String() string {
	return tea.Prettify(s)
}

func (s GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList) GoString() string {
	return s.String()
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList) SetAppCode(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList {
	s.AppCode = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList) SetConfigStatus(v int64) *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList {
	s.ConfigStatus = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList) SetConfigType(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList {
	s.ConfigType = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList) SetConfigValue(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList {
	s.ConfigValue = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList) SetDescription(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList {
	s.Description = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList) SetGmtCreate(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList {
	s.GmtCreate = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList) SetGmtModified(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList {
	s.GmtModified = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList) SetH5Id(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList {
	s.H5Id = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList) SetH5Name(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList {
	s.H5Name = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList) SetId(v int64) *GetMdsMiniConfigResponseBodyResultContentDataContentServerDomainConfigList {
	s.Id = &v
	return s
}

type GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList struct {
	AppCode      *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	ConfigStatus *int64  `json:"ConfigStatus,omitempty" xml:"ConfigStatus,omitempty"`
	ConfigType   *string `json:"ConfigType,omitempty" xml:"ConfigType,omitempty"`
	ConfigValue  *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtCreate    *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified  *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	H5Id         *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	H5Name       *string `json:"H5Name,omitempty" xml:"H5Name,omitempty"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList) String() string {
	return tea.Prettify(s)
}

func (s GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList) GoString() string {
	return s.String()
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList) SetAppCode(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList {
	s.AppCode = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList) SetConfigStatus(v int64) *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList {
	s.ConfigStatus = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList) SetConfigType(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList {
	s.ConfigType = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList) SetConfigValue(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList {
	s.ConfigValue = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList) SetDescription(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList {
	s.Description = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList) SetGmtCreate(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList {
	s.GmtCreate = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList) SetGmtModified(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList {
	s.GmtModified = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList) SetH5Id(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList {
	s.H5Id = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList) SetH5Name(v string) *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList {
	s.H5Name = &v
	return s
}

func (s *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList) SetId(v int64) *GetMdsMiniConfigResponseBodyResultContentDataContentWebviewDomainConfigList {
	s.Id = &v
	return s
}

type GetMdsMiniConfigResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMdsMiniConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMdsMiniConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMdsMiniConfigResponse) GoString() string {
	return s.String()
}

func (s *GetMdsMiniConfigResponse) SetHeaders(v map[string]*string) *GetMdsMiniConfigResponse {
	s.Headers = v
	return s
}

func (s *GetMdsMiniConfigResponse) SetStatusCode(v int32) *GetMdsMiniConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMdsMiniConfigResponse) SetBody(v *GetMdsMiniConfigResponseBody) *GetMdsMiniConfigResponse {
	s.Body = v
	return s
}

type GetUserAppDonwloadUrlInMsaRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetUserAppDonwloadUrlInMsaRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppDonwloadUrlInMsaRequest) GoString() string {
	return s.String()
}

func (s *GetUserAppDonwloadUrlInMsaRequest) SetAppId(v string) *GetUserAppDonwloadUrlInMsaRequest {
	s.AppId = &v
	return s
}

func (s *GetUserAppDonwloadUrlInMsaRequest) SetId(v int64) *GetUserAppDonwloadUrlInMsaRequest {
	s.Id = &v
	return s
}

func (s *GetUserAppDonwloadUrlInMsaRequest) SetTenantId(v string) *GetUserAppDonwloadUrlInMsaRequest {
	s.TenantId = &v
	return s
}

func (s *GetUserAppDonwloadUrlInMsaRequest) SetWorkspaceId(v string) *GetUserAppDonwloadUrlInMsaRequest {
	s.WorkspaceId = &v
	return s
}

type GetUserAppDonwloadUrlInMsaResponseBody struct {
	RequestId     *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                              `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *GetUserAppDonwloadUrlInMsaResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                              `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s GetUserAppDonwloadUrlInMsaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppDonwloadUrlInMsaResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserAppDonwloadUrlInMsaResponseBody) SetRequestId(v string) *GetUserAppDonwloadUrlInMsaResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserAppDonwloadUrlInMsaResponseBody) SetResultCode(v string) *GetUserAppDonwloadUrlInMsaResponseBody {
	s.ResultCode = &v
	return s
}

func (s *GetUserAppDonwloadUrlInMsaResponseBody) SetResultContent(v *GetUserAppDonwloadUrlInMsaResponseBodyResultContent) *GetUserAppDonwloadUrlInMsaResponseBody {
	s.ResultContent = v
	return s
}

func (s *GetUserAppDonwloadUrlInMsaResponseBody) SetResultMessage(v string) *GetUserAppDonwloadUrlInMsaResponseBody {
	s.ResultMessage = &v
	return s
}

type GetUserAppDonwloadUrlInMsaResponseBodyResultContent struct {
	Code    *string                                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *GetUserAppDonwloadUrlInMsaResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool                                                    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetUserAppDonwloadUrlInMsaResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppDonwloadUrlInMsaResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *GetUserAppDonwloadUrlInMsaResponseBodyResultContent) SetCode(v string) *GetUserAppDonwloadUrlInMsaResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *GetUserAppDonwloadUrlInMsaResponseBodyResultContent) SetData(v *GetUserAppDonwloadUrlInMsaResponseBodyResultContentData) *GetUserAppDonwloadUrlInMsaResponseBodyResultContent {
	s.Data = v
	return s
}

func (s *GetUserAppDonwloadUrlInMsaResponseBodyResultContent) SetMessage(v string) *GetUserAppDonwloadUrlInMsaResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *GetUserAppDonwloadUrlInMsaResponseBodyResultContent) SetSuccess(v bool) *GetUserAppDonwloadUrlInMsaResponseBodyResultContent {
	s.Success = &v
	return s
}

type GetUserAppDonwloadUrlInMsaResponseBodyResultContentData struct {
	Filename *string `json:"Filename,omitempty" xml:"Filename,omitempty"`
	Url      *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetUserAppDonwloadUrlInMsaResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppDonwloadUrlInMsaResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *GetUserAppDonwloadUrlInMsaResponseBodyResultContentData) SetFilename(v string) *GetUserAppDonwloadUrlInMsaResponseBodyResultContentData {
	s.Filename = &v
	return s
}

func (s *GetUserAppDonwloadUrlInMsaResponseBodyResultContentData) SetUrl(v string) *GetUserAppDonwloadUrlInMsaResponseBodyResultContentData {
	s.Url = &v
	return s
}

type GetUserAppDonwloadUrlInMsaResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetUserAppDonwloadUrlInMsaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetUserAppDonwloadUrlInMsaResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppDonwloadUrlInMsaResponse) GoString() string {
	return s.String()
}

func (s *GetUserAppDonwloadUrlInMsaResponse) SetHeaders(v map[string]*string) *GetUserAppDonwloadUrlInMsaResponse {
	s.Headers = v
	return s
}

func (s *GetUserAppDonwloadUrlInMsaResponse) SetStatusCode(v int32) *GetUserAppDonwloadUrlInMsaResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUserAppDonwloadUrlInMsaResponse) SetBody(v *GetUserAppDonwloadUrlInMsaResponseBody) *GetUserAppDonwloadUrlInMsaResponse {
	s.Body = v
	return s
}

type GetUserAppEnhanceProcessInMsaRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetUserAppEnhanceProcessInMsaRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppEnhanceProcessInMsaRequest) GoString() string {
	return s.String()
}

func (s *GetUserAppEnhanceProcessInMsaRequest) SetAppId(v string) *GetUserAppEnhanceProcessInMsaRequest {
	s.AppId = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaRequest) SetId(v int64) *GetUserAppEnhanceProcessInMsaRequest {
	s.Id = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaRequest) SetTenantId(v string) *GetUserAppEnhanceProcessInMsaRequest {
	s.TenantId = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaRequest) SetWorkspaceId(v string) *GetUserAppEnhanceProcessInMsaRequest {
	s.WorkspaceId = &v
	return s
}

type GetUserAppEnhanceProcessInMsaResponseBody struct {
	RequestId     *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                                 `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *GetUserAppEnhanceProcessInMsaResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                                 `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s GetUserAppEnhanceProcessInMsaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppEnhanceProcessInMsaResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserAppEnhanceProcessInMsaResponseBody) SetRequestId(v string) *GetUserAppEnhanceProcessInMsaResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBody) SetResultCode(v string) *GetUserAppEnhanceProcessInMsaResponseBody {
	s.ResultCode = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBody) SetResultContent(v *GetUserAppEnhanceProcessInMsaResponseBodyResultContent) *GetUserAppEnhanceProcessInMsaResponseBody {
	s.ResultContent = v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBody) SetResultMessage(v string) *GetUserAppEnhanceProcessInMsaResponseBody {
	s.ResultMessage = &v
	return s
}

type GetUserAppEnhanceProcessInMsaResponseBodyResultContent struct {
	Code    *string                                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool                                                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetUserAppEnhanceProcessInMsaResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppEnhanceProcessInMsaResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContent) SetCode(v string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContent) SetData(v *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) *GetUserAppEnhanceProcessInMsaResponseBodyResultContent {
	s.Data = v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContent) SetMessage(v string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContent) SetSuccess(v bool) *GetUserAppEnhanceProcessInMsaResponseBodyResultContent {
	s.Success = &v
	return s
}

type GetUserAppEnhanceProcessInMsaResponseBodyResultContentData struct {
	AfterMd5            *string                                                                     `json:"AfterMd5,omitempty" xml:"AfterMd5,omitempty"`
	AfterSize           *int64                                                                      `json:"AfterSize,omitempty" xml:"AfterSize,omitempty"`
	AppCode             *string                                                                     `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AppPackage          *string                                                                     `json:"AppPackage,omitempty" xml:"AppPackage,omitempty"`
	AssetsFileList      []*string                                                                   `json:"AssetsFileList,omitempty" xml:"AssetsFileList,omitempty" type:"Repeated"`
	BeforeMd5           *string                                                                     `json:"BeforeMd5,omitempty" xml:"BeforeMd5,omitempty"`
	BeforeSize          *int64                                                                      `json:"BeforeSize,omitempty" xml:"BeforeSize,omitempty"`
	ClassForest         []*string                                                                   `json:"ClassForest,omitempty" xml:"ClassForest,omitempty" type:"Repeated"`
	EnhanceMapping      []*GetUserAppEnhanceProcessInMsaResponseBodyResultContentDataEnhanceMapping `json:"EnhanceMapping,omitempty" xml:"EnhanceMapping,omitempty" type:"Repeated"`
	EnhanceRules        []*string                                                                   `json:"EnhanceRules,omitempty" xml:"EnhanceRules,omitempty" type:"Repeated"`
	EnhancedAssetsFiles []*string                                                                   `json:"EnhancedAssetsFiles,omitempty" xml:"EnhancedAssetsFiles,omitempty" type:"Repeated"`
	EnhancedClasses     []*string                                                                   `json:"EnhancedClasses,omitempty" xml:"EnhancedClasses,omitempty" type:"Repeated"`
	EnhancedSoFiles     []*string                                                                   `json:"EnhancedSoFiles,omitempty" xml:"EnhancedSoFiles,omitempty" type:"Repeated"`
	Id                  *int64                                                                      `json:"Id,omitempty" xml:"Id,omitempty"`
	Label               *string                                                                     `json:"Label,omitempty" xml:"Label,omitempty"`
	Progress            *int64                                                                      `json:"Progress,omitempty" xml:"Progress,omitempty"`
	SoFileList          []*string                                                                   `json:"SoFileList,omitempty" xml:"SoFileList,omitempty" type:"Repeated"`
	Status              *int64                                                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskType            *string                                                                     `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	VersionCode         *string                                                                     `json:"VersionCode,omitempty" xml:"VersionCode,omitempty"`
	VersionName         *string                                                                     `json:"VersionName,omitempty" xml:"VersionName,omitempty"`
}

func (s GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetAfterMd5(v string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.AfterMd5 = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetAfterSize(v int64) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.AfterSize = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetAppCode(v string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.AppCode = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetAppPackage(v string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.AppPackage = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetAssetsFileList(v []*string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.AssetsFileList = v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetBeforeMd5(v string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.BeforeMd5 = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetBeforeSize(v int64) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.BeforeSize = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetClassForest(v []*string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.ClassForest = v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetEnhanceMapping(v []*GetUserAppEnhanceProcessInMsaResponseBodyResultContentDataEnhanceMapping) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.EnhanceMapping = v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetEnhanceRules(v []*string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.EnhanceRules = v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetEnhancedAssetsFiles(v []*string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.EnhancedAssetsFiles = v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetEnhancedClasses(v []*string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.EnhancedClasses = v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetEnhancedSoFiles(v []*string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.EnhancedSoFiles = v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetId(v int64) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.Id = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetLabel(v string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.Label = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetProgress(v int64) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.Progress = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetSoFileList(v []*string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.SoFileList = v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetStatus(v int64) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.Status = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetTaskType(v string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.TaskType = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetVersionCode(v string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.VersionCode = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData) SetVersionName(v string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentData {
	s.VersionName = &v
	return s
}

type GetUserAppEnhanceProcessInMsaResponseBodyResultContentDataEnhanceMapping struct {
	Info   *string `json:"Info,omitempty" xml:"Info,omitempty"`
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetUserAppEnhanceProcessInMsaResponseBodyResultContentDataEnhanceMapping) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppEnhanceProcessInMsaResponseBodyResultContentDataEnhanceMapping) GoString() string {
	return s.String()
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentDataEnhanceMapping) SetInfo(v string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentDataEnhanceMapping {
	s.Info = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentDataEnhanceMapping) SetReason(v string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentDataEnhanceMapping {
	s.Reason = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponseBodyResultContentDataEnhanceMapping) SetType(v string) *GetUserAppEnhanceProcessInMsaResponseBodyResultContentDataEnhanceMapping {
	s.Type = &v
	return s
}

type GetUserAppEnhanceProcessInMsaResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetUserAppEnhanceProcessInMsaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetUserAppEnhanceProcessInMsaResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppEnhanceProcessInMsaResponse) GoString() string {
	return s.String()
}

func (s *GetUserAppEnhanceProcessInMsaResponse) SetHeaders(v map[string]*string) *GetUserAppEnhanceProcessInMsaResponse {
	s.Headers = v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponse) SetStatusCode(v int32) *GetUserAppEnhanceProcessInMsaResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUserAppEnhanceProcessInMsaResponse) SetBody(v *GetUserAppEnhanceProcessInMsaResponseBody) *GetUserAppEnhanceProcessInMsaResponse {
	s.Body = v
	return s
}

type GetUserAppUploadProcessInMsaRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetUserAppUploadProcessInMsaRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppUploadProcessInMsaRequest) GoString() string {
	return s.String()
}

func (s *GetUserAppUploadProcessInMsaRequest) SetAppId(v string) *GetUserAppUploadProcessInMsaRequest {
	s.AppId = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaRequest) SetId(v int64) *GetUserAppUploadProcessInMsaRequest {
	s.Id = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaRequest) SetTenantId(v string) *GetUserAppUploadProcessInMsaRequest {
	s.TenantId = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaRequest) SetWorkspaceId(v string) *GetUserAppUploadProcessInMsaRequest {
	s.WorkspaceId = &v
	return s
}

type GetUserAppUploadProcessInMsaResponseBody struct {
	RequestId     *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                                `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *GetUserAppUploadProcessInMsaResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                                `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s GetUserAppUploadProcessInMsaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppUploadProcessInMsaResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserAppUploadProcessInMsaResponseBody) SetRequestId(v string) *GetUserAppUploadProcessInMsaResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBody) SetResultCode(v string) *GetUserAppUploadProcessInMsaResponseBody {
	s.ResultCode = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBody) SetResultContent(v *GetUserAppUploadProcessInMsaResponseBodyResultContent) *GetUserAppUploadProcessInMsaResponseBody {
	s.ResultContent = v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBody) SetResultMessage(v string) *GetUserAppUploadProcessInMsaResponseBody {
	s.ResultMessage = &v
	return s
}

type GetUserAppUploadProcessInMsaResponseBodyResultContent struct {
	Code    *string                                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *GetUserAppUploadProcessInMsaResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool                                                      `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetUserAppUploadProcessInMsaResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppUploadProcessInMsaResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContent) SetCode(v string) *GetUserAppUploadProcessInMsaResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContent) SetData(v *GetUserAppUploadProcessInMsaResponseBodyResultContentData) *GetUserAppUploadProcessInMsaResponseBodyResultContent {
	s.Data = v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContent) SetMessage(v string) *GetUserAppUploadProcessInMsaResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContent) SetSuccess(v bool) *GetUserAppUploadProcessInMsaResponseBodyResultContent {
	s.Success = &v
	return s
}

type GetUserAppUploadProcessInMsaResponseBodyResultContentData struct {
	ApkInfo       *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo `json:"ApkInfo,omitempty" xml:"ApkInfo,omitempty" type:"Struct"`
	EnhanceTaskId *int64                                                            `json:"EnhanceTaskId,omitempty" xml:"EnhanceTaskId,omitempty"`
	Id            *int64                                                            `json:"Id,omitempty" xml:"Id,omitempty"`
	Progress      *int64                                                            `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status        *int64                                                            `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetUserAppUploadProcessInMsaResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppUploadProcessInMsaResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentData) SetApkInfo(v *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) *GetUserAppUploadProcessInMsaResponseBodyResultContentData {
	s.ApkInfo = v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentData) SetEnhanceTaskId(v int64) *GetUserAppUploadProcessInMsaResponseBodyResultContentData {
	s.EnhanceTaskId = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentData) SetId(v int64) *GetUserAppUploadProcessInMsaResponseBodyResultContentData {
	s.Id = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentData) SetProgress(v int64) *GetUserAppUploadProcessInMsaResponseBodyResultContentData {
	s.Progress = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentData) SetStatus(v int64) *GetUserAppUploadProcessInMsaResponseBodyResultContentData {
	s.Status = &v
	return s
}

type GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo struct {
	AfterMd5            *string                                                                           `json:"AfterMd5,omitempty" xml:"AfterMd5,omitempty"`
	AfterSize           *int64                                                                            `json:"AfterSize,omitempty" xml:"AfterSize,omitempty"`
	AppCode             *string                                                                           `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AppPackage          *string                                                                           `json:"AppPackage,omitempty" xml:"AppPackage,omitempty"`
	AssetsFileList      []*string                                                                         `json:"AssetsFileList,omitempty" xml:"AssetsFileList,omitempty" type:"Repeated"`
	BeforeMd5           *string                                                                           `json:"BeforeMd5,omitempty" xml:"BeforeMd5,omitempty"`
	BeforeSize          *int64                                                                            `json:"BeforeSize,omitempty" xml:"BeforeSize,omitempty"`
	ClassForest         *string                                                                           `json:"ClassForest,omitempty" xml:"ClassForest,omitempty"`
	EnhanceMapping      []*GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfoEnhanceMapping `json:"EnhanceMapping,omitempty" xml:"EnhanceMapping,omitempty" type:"Repeated"`
	EnhanceRules        []*string                                                                         `json:"EnhanceRules,omitempty" xml:"EnhanceRules,omitempty" type:"Repeated"`
	EnhancedAssetsFiles []*string                                                                         `json:"EnhancedAssetsFiles,omitempty" xml:"EnhancedAssetsFiles,omitempty" type:"Repeated"`
	EnhancedClasses     []*string                                                                         `json:"EnhancedClasses,omitempty" xml:"EnhancedClasses,omitempty" type:"Repeated"`
	EnhancedSoFiles     []*string                                                                         `json:"EnhancedSoFiles,omitempty" xml:"EnhancedSoFiles,omitempty" type:"Repeated"`
	Id                  *int64                                                                            `json:"Id,omitempty" xml:"Id,omitempty"`
	Label               *string                                                                           `json:"Label,omitempty" xml:"Label,omitempty"`
	Progress            *int64                                                                            `json:"Progress,omitempty" xml:"Progress,omitempty"`
	SoFileList          []*string                                                                         `json:"SoFileList,omitempty" xml:"SoFileList,omitempty" type:"Repeated"`
	Status              *int64                                                                            `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskType            *string                                                                           `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	VersionCode         *string                                                                           `json:"VersionCode,omitempty" xml:"VersionCode,omitempty"`
	VersionName         *string                                                                           `json:"VersionName,omitempty" xml:"VersionName,omitempty"`
}

func (s GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) GoString() string {
	return s.String()
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetAfterMd5(v string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.AfterMd5 = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetAfterSize(v int64) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.AfterSize = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetAppCode(v string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.AppCode = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetAppPackage(v string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.AppPackage = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetAssetsFileList(v []*string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.AssetsFileList = v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetBeforeMd5(v string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.BeforeMd5 = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetBeforeSize(v int64) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.BeforeSize = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetClassForest(v string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.ClassForest = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetEnhanceMapping(v []*GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfoEnhanceMapping) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.EnhanceMapping = v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetEnhanceRules(v []*string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.EnhanceRules = v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetEnhancedAssetsFiles(v []*string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.EnhancedAssetsFiles = v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetEnhancedClasses(v []*string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.EnhancedClasses = v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetEnhancedSoFiles(v []*string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.EnhancedSoFiles = v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetId(v int64) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.Id = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetLabel(v string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.Label = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetProgress(v int64) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.Progress = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetSoFileList(v []*string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.SoFileList = v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetStatus(v int64) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.Status = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetTaskType(v string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.TaskType = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetVersionCode(v string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.VersionCode = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo) SetVersionName(v string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfo {
	s.VersionName = &v
	return s
}

type GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfoEnhanceMapping struct {
	Info   *string `json:"Info,omitempty" xml:"Info,omitempty"`
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfoEnhanceMapping) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfoEnhanceMapping) GoString() string {
	return s.String()
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfoEnhanceMapping) SetInfo(v string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfoEnhanceMapping {
	s.Info = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfoEnhanceMapping) SetReason(v string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfoEnhanceMapping {
	s.Reason = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfoEnhanceMapping) SetType(v string) *GetUserAppUploadProcessInMsaResponseBodyResultContentDataApkInfoEnhanceMapping {
	s.Type = &v
	return s
}

type GetUserAppUploadProcessInMsaResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetUserAppUploadProcessInMsaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetUserAppUploadProcessInMsaResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserAppUploadProcessInMsaResponse) GoString() string {
	return s.String()
}

func (s *GetUserAppUploadProcessInMsaResponse) SetHeaders(v map[string]*string) *GetUserAppUploadProcessInMsaResponse {
	s.Headers = v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponse) SetStatusCode(v int32) *GetUserAppUploadProcessInMsaResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUserAppUploadProcessInMsaResponse) SetBody(v *GetUserAppUploadProcessInMsaResponseBody) *GetUserAppUploadProcessInMsaResponse {
	s.Body = v
	return s
}

type ListMappCenterAppsResponseBody struct {
	ListMappCenterAppResult *ListMappCenterAppsResponseBodyListMappCenterAppResult `json:"ListMappCenterAppResult,omitempty" xml:"ListMappCenterAppResult,omitempty" type:"Struct"`
	RequestId               *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode              *string                                                `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage           *string                                                `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ListMappCenterAppsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMappCenterAppsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMappCenterAppsResponseBody) SetListMappCenterAppResult(v *ListMappCenterAppsResponseBodyListMappCenterAppResult) *ListMappCenterAppsResponseBody {
	s.ListMappCenterAppResult = v
	return s
}

func (s *ListMappCenterAppsResponseBody) SetRequestId(v string) *ListMappCenterAppsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMappCenterAppsResponseBody) SetResultCode(v string) *ListMappCenterAppsResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ListMappCenterAppsResponseBody) SetResultMessage(v string) *ListMappCenterAppsResponseBody {
	s.ResultMessage = &v
	return s
}

type ListMappCenterAppsResponseBodyListMappCenterAppResult struct {
	MappCenterAppList []*ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList `json:"MappCenterAppList,omitempty" xml:"MappCenterAppList,omitempty" type:"Repeated"`
	ResultMsg         *string                                                                   `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success           *bool                                                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListMappCenterAppsResponseBodyListMappCenterAppResult) String() string {
	return tea.Prettify(s)
}

func (s ListMappCenterAppsResponseBodyListMappCenterAppResult) GoString() string {
	return s.String()
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResult) SetMappCenterAppList(v []*ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) *ListMappCenterAppsResponseBodyListMappCenterAppResult {
	s.MappCenterAppList = v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResult) SetResultMsg(v string) *ListMappCenterAppsResponseBodyListMappCenterAppResult {
	s.ResultMsg = &v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResult) SetSuccess(v bool) *ListMappCenterAppsResponseBodyListMappCenterAppResult {
	s.Success = &v
	return s
}

type ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList struct {
	AndroidConfig *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListAndroidConfig `json:"AndroidConfig,omitempty" xml:"AndroidConfig,omitempty" type:"Struct"`
	AppDesc       *string                                                                              `json:"AppDesc,omitempty" xml:"AppDesc,omitempty"`
	AppIcon       *string                                                                              `json:"AppIcon,omitempty" xml:"AppIcon,omitempty"`
	AppId         *string                                                                              `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName       *string                                                                              `json:"AppName,omitempty" xml:"AppName,omitempty"`
	AppSecret     *string                                                                              `json:"AppSecret,omitempty" xml:"AppSecret,omitempty"`
	Creator       *string                                                                              `json:"Creator,omitempty" xml:"Creator,omitempty"`
	GmtCreate     *string                                                                              `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified   *string                                                                              `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id            *int64                                                                               `json:"Id,omitempty" xml:"Id,omitempty"`
	IosConfig     *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListIosConfig     `json:"IosConfig,omitempty" xml:"IosConfig,omitempty" type:"Struct"`
	Modifier      *string                                                                              `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	MonitorJson   *string                                                                              `json:"MonitorJson,omitempty" xml:"MonitorJson,omitempty"`
	Status        *int64                                                                               `json:"Status,omitempty" xml:"Status,omitempty"`
	TenantId      *string                                                                              `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Type          *int64                                                                               `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) String() string {
	return tea.Prettify(s)
}

func (s ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) GoString() string {
	return s.String()
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) SetAndroidConfig(v *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListAndroidConfig) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList {
	s.AndroidConfig = v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) SetAppDesc(v string) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList {
	s.AppDesc = &v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) SetAppIcon(v string) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList {
	s.AppIcon = &v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) SetAppId(v string) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList {
	s.AppId = &v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) SetAppName(v string) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList {
	s.AppName = &v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) SetAppSecret(v string) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList {
	s.AppSecret = &v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) SetCreator(v string) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList {
	s.Creator = &v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) SetGmtCreate(v string) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList {
	s.GmtCreate = &v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) SetGmtModified(v string) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList {
	s.GmtModified = &v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) SetId(v int64) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList {
	s.Id = &v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) SetIosConfig(v *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListIosConfig) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList {
	s.IosConfig = v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) SetModifier(v string) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList {
	s.Modifier = &v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) SetMonitorJson(v string) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList {
	s.MonitorJson = &v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) SetStatus(v int64) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList {
	s.Status = &v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) SetTenantId(v string) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList {
	s.TenantId = &v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList) SetType(v int64) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppList {
	s.Type = &v
	return s
}

type ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListAndroidConfig struct {
	CertRSA     *string `json:"CertRSA,omitempty" xml:"CertRSA,omitempty"`
	PackageName *string `json:"PackageName,omitempty" xml:"PackageName,omitempty"`
}

func (s ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListAndroidConfig) String() string {
	return tea.Prettify(s)
}

func (s ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListAndroidConfig) GoString() string {
	return s.String()
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListAndroidConfig) SetCertRSA(v string) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListAndroidConfig {
	s.CertRSA = &v
	return s
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListAndroidConfig) SetPackageName(v string) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListAndroidConfig {
	s.PackageName = &v
	return s
}

type ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListIosConfig struct {
	BundleId *string `json:"BundleId,omitempty" xml:"BundleId,omitempty"`
}

func (s ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListIosConfig) String() string {
	return tea.Prettify(s)
}

func (s ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListIosConfig) GoString() string {
	return s.String()
}

func (s *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListIosConfig) SetBundleId(v string) *ListMappCenterAppsResponseBodyListMappCenterAppResultMappCenterAppListIosConfig {
	s.BundleId = &v
	return s
}

type ListMappCenterAppsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMappCenterAppsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMappCenterAppsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMappCenterAppsResponse) GoString() string {
	return s.String()
}

func (s *ListMappCenterAppsResponse) SetHeaders(v map[string]*string) *ListMappCenterAppsResponse {
	s.Headers = v
	return s
}

func (s *ListMappCenterAppsResponse) SetStatusCode(v int32) *ListMappCenterAppsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMappCenterAppsResponse) SetBody(v *ListMappCenterAppsResponseBody) *ListMappCenterAppsResponse {
	s.Body = v
	return s
}

type ListMappCenterWorkspacesResponseBody struct {
	ListMappCenterWorkspaceResult *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult `json:"ListMappCenterWorkspaceResult,omitempty" xml:"ListMappCenterWorkspaceResult,omitempty" type:"Struct"`
	RequestId                     *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode                    *string                                                            `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage                 *string                                                            `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ListMappCenterWorkspacesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMappCenterWorkspacesResponseBody) GoString() string {
	return s.String()
}

func (s *ListMappCenterWorkspacesResponseBody) SetListMappCenterWorkspaceResult(v *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult) *ListMappCenterWorkspacesResponseBody {
	s.ListMappCenterWorkspaceResult = v
	return s
}

func (s *ListMappCenterWorkspacesResponseBody) SetRequestId(v string) *ListMappCenterWorkspacesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMappCenterWorkspacesResponseBody) SetResultCode(v string) *ListMappCenterWorkspacesResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ListMappCenterWorkspacesResponseBody) SetResultMessage(v string) *ListMappCenterWorkspacesResponseBody {
	s.ResultMessage = &v
	return s
}

type ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult struct {
	MappCenterWorkspaceList []*ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList `json:"MappCenterWorkspaceList,omitempty" xml:"MappCenterWorkspaceList,omitempty" type:"Repeated"`
	ResultMsg               *string                                                                                     `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success                 *bool                                                                                       `json:"Success,omitempty" xml:"Success,omitempty"`
	UserId                  *string                                                                                     `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult) String() string {
	return tea.Prettify(s)
}

func (s ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult) GoString() string {
	return s.String()
}

func (s *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult) SetMappCenterWorkspaceList(v []*ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList) *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult {
	s.MappCenterWorkspaceList = v
	return s
}

func (s *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult) SetResultMsg(v string) *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult {
	s.ResultMsg = &v
	return s
}

func (s *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult) SetSuccess(v bool) *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult {
	s.Success = &v
	return s
}

func (s *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult) SetUserId(v string) *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResult {
	s.UserId = &v
	return s
}

type ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList struct {
	CompatibleId *string `json:"CompatibleId,omitempty" xml:"CompatibleId,omitempty"`
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DisplayName  *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Id           *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Region       *string `json:"Region,omitempty" xml:"Region,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TenantId     *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Uid          *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
	UpdateTime   *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	WorkspaceId  *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
	Zones        *string `json:"Zones,omitempty" xml:"Zones,omitempty"`
}

func (s ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList) String() string {
	return tea.Prettify(s)
}

func (s ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList) GoString() string {
	return s.String()
}

func (s *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList) SetCompatibleId(v string) *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList {
	s.CompatibleId = &v
	return s
}

func (s *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList) SetCreateTime(v string) *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList {
	s.CreateTime = &v
	return s
}

func (s *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList) SetDisplayName(v string) *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList {
	s.DisplayName = &v
	return s
}

func (s *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList) SetId(v string) *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList {
	s.Id = &v
	return s
}

func (s *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList) SetRegion(v string) *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList {
	s.Region = &v
	return s
}

func (s *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList) SetStatus(v string) *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList {
	s.Status = &v
	return s
}

func (s *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList) SetTenantId(v string) *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList {
	s.TenantId = &v
	return s
}

func (s *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList) SetType(v string) *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList {
	s.Type = &v
	return s
}

func (s *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList) SetUid(v int64) *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList {
	s.Uid = &v
	return s
}

func (s *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList) SetUpdateTime(v string) *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList {
	s.UpdateTime = &v
	return s
}

func (s *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList) SetWorkspaceId(v string) *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList {
	s.WorkspaceId = &v
	return s
}

func (s *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList) SetZones(v string) *ListMappCenterWorkspacesResponseBodyListMappCenterWorkspaceResultMappCenterWorkspaceList {
	s.Zones = &v
	return s
}

type ListMappCenterWorkspacesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMappCenterWorkspacesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMappCenterWorkspacesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMappCenterWorkspacesResponse) GoString() string {
	return s.String()
}

func (s *ListMappCenterWorkspacesResponse) SetHeaders(v map[string]*string) *ListMappCenterWorkspacesResponse {
	s.Headers = v
	return s
}

func (s *ListMappCenterWorkspacesResponse) SetStatusCode(v int32) *ListMappCenterWorkspacesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMappCenterWorkspacesResponse) SetBody(v *ListMappCenterWorkspacesResponseBody) *ListMappCenterWorkspacesResponse {
	s.Body = v
	return s
}

type ListMcdpAimRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EmptyTag    *string `json:"EmptyTag,omitempty" xml:"EmptyTag,omitempty"`
	Keyword     *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNo      *int64  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize    *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Sort        *string `json:"Sort,omitempty" xml:"Sort,omitempty"`
	SortField   *string `json:"SortField,omitempty" xml:"SortField,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListMcdpAimRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMcdpAimRequest) GoString() string {
	return s.String()
}

func (s *ListMcdpAimRequest) SetAppId(v string) *ListMcdpAimRequest {
	s.AppId = &v
	return s
}

func (s *ListMcdpAimRequest) SetEmptyTag(v string) *ListMcdpAimRequest {
	s.EmptyTag = &v
	return s
}

func (s *ListMcdpAimRequest) SetKeyword(v string) *ListMcdpAimRequest {
	s.Keyword = &v
	return s
}

func (s *ListMcdpAimRequest) SetName(v string) *ListMcdpAimRequest {
	s.Name = &v
	return s
}

func (s *ListMcdpAimRequest) SetPageNo(v int64) *ListMcdpAimRequest {
	s.PageNo = &v
	return s
}

func (s *ListMcdpAimRequest) SetPageSize(v int64) *ListMcdpAimRequest {
	s.PageSize = &v
	return s
}

func (s *ListMcdpAimRequest) SetSort(v string) *ListMcdpAimRequest {
	s.Sort = &v
	return s
}

func (s *ListMcdpAimRequest) SetSortField(v string) *ListMcdpAimRequest {
	s.SortField = &v
	return s
}

func (s *ListMcdpAimRequest) SetTenantId(v string) *ListMcdpAimRequest {
	s.TenantId = &v
	return s
}

func (s *ListMcdpAimRequest) SetType(v string) *ListMcdpAimRequest {
	s.Type = &v
	return s
}

func (s *ListMcdpAimRequest) SetWorkspaceId(v string) *ListMcdpAimRequest {
	s.WorkspaceId = &v
	return s
}

type ListMcdpAimResponseBody struct {
	RequestId     *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                               `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *ListMcdpAimResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                               `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ListMcdpAimResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMcdpAimResponseBody) GoString() string {
	return s.String()
}

func (s *ListMcdpAimResponseBody) SetRequestId(v string) *ListMcdpAimResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMcdpAimResponseBody) SetResultCode(v string) *ListMcdpAimResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ListMcdpAimResponseBody) SetResultContent(v *ListMcdpAimResponseBodyResultContent) *ListMcdpAimResponseBody {
	s.ResultContent = v
	return s
}

func (s *ListMcdpAimResponseBody) SetResultMessage(v string) *ListMcdpAimResponseBody {
	s.ResultMessage = &v
	return s
}

type ListMcdpAimResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListMcdpAimResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s ListMcdpAimResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *ListMcdpAimResponseBodyResultContent) SetCode(v string) *ListMcdpAimResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *ListMcdpAimResponseBodyResultContent) SetData(v string) *ListMcdpAimResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *ListMcdpAimResponseBodyResultContent) SetMessage(v string) *ListMcdpAimResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *ListMcdpAimResponseBodyResultContent) SetSuccess(v bool) *ListMcdpAimResponseBodyResultContent {
	s.Success = &v
	return s
}

type ListMcdpAimResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMcdpAimResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMcdpAimResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMcdpAimResponse) GoString() string {
	return s.String()
}

func (s *ListMcdpAimResponse) SetHeaders(v map[string]*string) *ListMcdpAimResponse {
	s.Headers = v
	return s
}

func (s *ListMcdpAimResponse) SetStatusCode(v int32) *ListMcdpAimResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMcdpAimResponse) SetBody(v *ListMcdpAimResponseBody) *ListMcdpAimResponse {
	s.Body = v
	return s
}

type ListMcubeMiniAppsRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Keyword     *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	PageNum     *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListMcubeMiniAppsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeMiniAppsRequest) GoString() string {
	return s.String()
}

func (s *ListMcubeMiniAppsRequest) SetAppId(v string) *ListMcubeMiniAppsRequest {
	s.AppId = &v
	return s
}

func (s *ListMcubeMiniAppsRequest) SetKeyword(v string) *ListMcubeMiniAppsRequest {
	s.Keyword = &v
	return s
}

func (s *ListMcubeMiniAppsRequest) SetPageNum(v int32) *ListMcubeMiniAppsRequest {
	s.PageNum = &v
	return s
}

func (s *ListMcubeMiniAppsRequest) SetPageSize(v int32) *ListMcubeMiniAppsRequest {
	s.PageSize = &v
	return s
}

func (s *ListMcubeMiniAppsRequest) SetTenantId(v string) *ListMcubeMiniAppsRequest {
	s.TenantId = &v
	return s
}

func (s *ListMcubeMiniAppsRequest) SetWorkspaceId(v string) *ListMcubeMiniAppsRequest {
	s.WorkspaceId = &v
	return s
}

type ListMcubeMiniAppsResponseBody struct {
	ListMiniResult *ListMcubeMiniAppsResponseBodyListMiniResult `json:"ListMiniResult,omitempty" xml:"ListMiniResult,omitempty" type:"Struct"`
	RequestId      *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode     *string                                      `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                      `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ListMcubeMiniAppsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeMiniAppsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMcubeMiniAppsResponseBody) SetListMiniResult(v *ListMcubeMiniAppsResponseBodyListMiniResult) *ListMcubeMiniAppsResponseBody {
	s.ListMiniResult = v
	return s
}

func (s *ListMcubeMiniAppsResponseBody) SetRequestId(v string) *ListMcubeMiniAppsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMcubeMiniAppsResponseBody) SetResultCode(v string) *ListMcubeMiniAppsResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ListMcubeMiniAppsResponseBody) SetResultMessage(v string) *ListMcubeMiniAppsResponseBody {
	s.ResultMessage = &v
	return s
}

type ListMcubeMiniAppsResponseBodyListMiniResult struct {
	CurrentPage     *int32                                                        `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	HasMore         *bool                                                         `json:"HasMore,omitempty" xml:"HasMore,omitempty"`
	MiniProgramList []*ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList `json:"MiniProgramList,omitempty" xml:"MiniProgramList,omitempty" type:"Repeated"`
	PageSize        *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResultMsg       *string                                                       `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success         *bool                                                         `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount      *int64                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListMcubeMiniAppsResponseBodyListMiniResult) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeMiniAppsResponseBodyListMiniResult) GoString() string {
	return s.String()
}

func (s *ListMcubeMiniAppsResponseBodyListMiniResult) SetCurrentPage(v int32) *ListMcubeMiniAppsResponseBodyListMiniResult {
	s.CurrentPage = &v
	return s
}

func (s *ListMcubeMiniAppsResponseBodyListMiniResult) SetHasMore(v bool) *ListMcubeMiniAppsResponseBodyListMiniResult {
	s.HasMore = &v
	return s
}

func (s *ListMcubeMiniAppsResponseBodyListMiniResult) SetMiniProgramList(v []*ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList) *ListMcubeMiniAppsResponseBodyListMiniResult {
	s.MiniProgramList = v
	return s
}

func (s *ListMcubeMiniAppsResponseBodyListMiniResult) SetPageSize(v int32) *ListMcubeMiniAppsResponseBodyListMiniResult {
	s.PageSize = &v
	return s
}

func (s *ListMcubeMiniAppsResponseBodyListMiniResult) SetResultMsg(v string) *ListMcubeMiniAppsResponseBodyListMiniResult {
	s.ResultMsg = &v
	return s
}

func (s *ListMcubeMiniAppsResponseBodyListMiniResult) SetSuccess(v bool) *ListMcubeMiniAppsResponseBodyListMiniResult {
	s.Success = &v
	return s
}

func (s *ListMcubeMiniAppsResponseBodyListMiniResult) SetTotalCount(v int64) *ListMcubeMiniAppsResponseBodyListMiniResult {
	s.TotalCount = &v
	return s
}

type ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList struct {
	AppCode     *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	GmtCreate   *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	H5Id        *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	H5Name      *string `json:"H5Name,omitempty" xml:"H5Name,omitempty"`
}

func (s ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList) GoString() string {
	return s.String()
}

func (s *ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList) SetAppCode(v string) *ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList {
	s.AppCode = &v
	return s
}

func (s *ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList) SetGmtCreate(v string) *ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList {
	s.GmtCreate = &v
	return s
}

func (s *ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList) SetGmtModified(v string) *ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList {
	s.GmtModified = &v
	return s
}

func (s *ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList) SetH5Id(v string) *ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList {
	s.H5Id = &v
	return s
}

func (s *ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList) SetH5Name(v string) *ListMcubeMiniAppsResponseBodyListMiniResultMiniProgramList {
	s.H5Name = &v
	return s
}

type ListMcubeMiniAppsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMcubeMiniAppsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMcubeMiniAppsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeMiniAppsResponse) GoString() string {
	return s.String()
}

func (s *ListMcubeMiniAppsResponse) SetHeaders(v map[string]*string) *ListMcubeMiniAppsResponse {
	s.Headers = v
	return s
}

func (s *ListMcubeMiniAppsResponse) SetStatusCode(v int32) *ListMcubeMiniAppsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMcubeMiniAppsResponse) SetBody(v *ListMcubeMiniAppsResponseBody) *ListMcubeMiniAppsResponse {
	s.Body = v
	return s
}

type ListMcubeMiniPackagesRequest struct {
	AppId        *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	H5Id         *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	PackageTypes *string `json:"PackageTypes,omitempty" xml:"PackageTypes,omitempty"`
	PageNum      *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TenantId     *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId  *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListMcubeMiniPackagesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeMiniPackagesRequest) GoString() string {
	return s.String()
}

func (s *ListMcubeMiniPackagesRequest) SetAppId(v string) *ListMcubeMiniPackagesRequest {
	s.AppId = &v
	return s
}

func (s *ListMcubeMiniPackagesRequest) SetH5Id(v string) *ListMcubeMiniPackagesRequest {
	s.H5Id = &v
	return s
}

func (s *ListMcubeMiniPackagesRequest) SetPackageTypes(v string) *ListMcubeMiniPackagesRequest {
	s.PackageTypes = &v
	return s
}

func (s *ListMcubeMiniPackagesRequest) SetPageNum(v int32) *ListMcubeMiniPackagesRequest {
	s.PageNum = &v
	return s
}

func (s *ListMcubeMiniPackagesRequest) SetPageSize(v int32) *ListMcubeMiniPackagesRequest {
	s.PageSize = &v
	return s
}

func (s *ListMcubeMiniPackagesRequest) SetTenantId(v string) *ListMcubeMiniPackagesRequest {
	s.TenantId = &v
	return s
}

func (s *ListMcubeMiniPackagesRequest) SetWorkspaceId(v string) *ListMcubeMiniPackagesRequest {
	s.WorkspaceId = &v
	return s
}

type ListMcubeMiniPackagesResponseBody struct {
	ListMiniPackageResult *ListMcubeMiniPackagesResponseBodyListMiniPackageResult `json:"ListMiniPackageResult,omitempty" xml:"ListMiniPackageResult,omitempty" type:"Struct"`
	RequestId             *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode            *string                                                 `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage         *string                                                 `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ListMcubeMiniPackagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeMiniPackagesResponseBody) GoString() string {
	return s.String()
}

func (s *ListMcubeMiniPackagesResponseBody) SetListMiniPackageResult(v *ListMcubeMiniPackagesResponseBodyListMiniPackageResult) *ListMcubeMiniPackagesResponseBody {
	s.ListMiniPackageResult = v
	return s
}

func (s *ListMcubeMiniPackagesResponseBody) SetRequestId(v string) *ListMcubeMiniPackagesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBody) SetResultCode(v string) *ListMcubeMiniPackagesResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBody) SetResultMessage(v string) *ListMcubeMiniPackagesResponseBody {
	s.ResultMessage = &v
	return s
}

type ListMcubeMiniPackagesResponseBodyListMiniPackageResult struct {
	CurrentPage     *int32                                                                   `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	HasMore         *bool                                                                    `json:"HasMore,omitempty" xml:"HasMore,omitempty"`
	MiniPackageList []*ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList `json:"MiniPackageList,omitempty" xml:"MiniPackageList,omitempty" type:"Repeated"`
	PageSize        *int32                                                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResultMsg       *string                                                                  `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success         *bool                                                                    `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount      *int64                                                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListMcubeMiniPackagesResponseBodyListMiniPackageResult) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeMiniPackagesResponseBodyListMiniPackageResult) GoString() string {
	return s.String()
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResult) SetCurrentPage(v int32) *ListMcubeMiniPackagesResponseBodyListMiniPackageResult {
	s.CurrentPage = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResult) SetHasMore(v bool) *ListMcubeMiniPackagesResponseBodyListMiniPackageResult {
	s.HasMore = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResult) SetMiniPackageList(v []*ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) *ListMcubeMiniPackagesResponseBodyListMiniPackageResult {
	s.MiniPackageList = v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResult) SetPageSize(v int32) *ListMcubeMiniPackagesResponseBodyListMiniPackageResult {
	s.PageSize = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResult) SetResultMsg(v string) *ListMcubeMiniPackagesResponseBodyListMiniPackageResult {
	s.ResultMsg = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResult) SetSuccess(v bool) *ListMcubeMiniPackagesResponseBodyListMiniPackageResult {
	s.Success = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResult) SetTotalCount(v int64) *ListMcubeMiniPackagesResponseBodyListMiniPackageResult {
	s.TotalCount = &v
	return s
}

type ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList struct {
	AppCode          *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AutoInstall      *int64  `json:"AutoInstall,omitempty" xml:"AutoInstall,omitempty"`
	ClientVersionMax *string `json:"ClientVersionMax,omitempty" xml:"ClientVersionMax,omitempty"`
	ClientVersionMin *string `json:"ClientVersionMin,omitempty" xml:"ClientVersionMin,omitempty"`
	DownloadUrl      *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	ExtendInfo       *string `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty"`
	ExtraData        *string `json:"ExtraData,omitempty" xml:"ExtraData,omitempty"`
	FallbackBaseUrl  *string `json:"FallbackBaseUrl,omitempty" xml:"FallbackBaseUrl,omitempty"`
	GmtCreate        *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified      *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	H5Id             *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	H5Name           *string `json:"H5Name,omitempty" xml:"H5Name,omitempty"`
	H5Version        *string `json:"H5Version,omitempty" xml:"H5Version,omitempty"`
	Id               *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	InstallType      *int64  `json:"InstallType,omitempty" xml:"InstallType,omitempty"`
	MainUrl          *string `json:"MainUrl,omitempty" xml:"MainUrl,omitempty"`
	Memo             *string `json:"Memo,omitempty" xml:"Memo,omitempty"`
	PackageType      *int64  `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	Platform         *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	PublishPeriod    *int64  `json:"PublishPeriod,omitempty" xml:"PublishPeriod,omitempty"`
	ResourceType     *int64  `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Status           *int64  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) GoString() string {
	return s.String()
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetAppCode(v string) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.AppCode = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetAutoInstall(v int64) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.AutoInstall = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetClientVersionMax(v string) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.ClientVersionMax = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetClientVersionMin(v string) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.ClientVersionMin = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetDownloadUrl(v string) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.DownloadUrl = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetExtendInfo(v string) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.ExtendInfo = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetExtraData(v string) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.ExtraData = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetFallbackBaseUrl(v string) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.FallbackBaseUrl = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetGmtCreate(v string) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.GmtCreate = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetGmtModified(v string) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.GmtModified = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetH5Id(v string) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.H5Id = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetH5Name(v string) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.H5Name = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetH5Version(v string) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.H5Version = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetId(v int64) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.Id = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetInstallType(v int64) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.InstallType = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetMainUrl(v string) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.MainUrl = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetMemo(v string) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.Memo = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetPackageType(v int64) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.PackageType = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetPlatform(v string) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.Platform = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetPublishPeriod(v int64) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.PublishPeriod = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetResourceType(v int64) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.ResourceType = &v
	return s
}

func (s *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList) SetStatus(v int64) *ListMcubeMiniPackagesResponseBodyListMiniPackageResultMiniPackageList {
	s.Status = &v
	return s
}

type ListMcubeMiniPackagesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMcubeMiniPackagesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMcubeMiniPackagesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeMiniPackagesResponse) GoString() string {
	return s.String()
}

func (s *ListMcubeMiniPackagesResponse) SetHeaders(v map[string]*string) *ListMcubeMiniPackagesResponse {
	s.Headers = v
	return s
}

func (s *ListMcubeMiniPackagesResponse) SetStatusCode(v int32) *ListMcubeMiniPackagesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMcubeMiniPackagesResponse) SetBody(v *ListMcubeMiniPackagesResponseBody) *ListMcubeMiniPackagesResponse {
	s.Body = v
	return s
}

type ListMcubeMiniTasksRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListMcubeMiniTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeMiniTasksRequest) GoString() string {
	return s.String()
}

func (s *ListMcubeMiniTasksRequest) SetAppId(v string) *ListMcubeMiniTasksRequest {
	s.AppId = &v
	return s
}

func (s *ListMcubeMiniTasksRequest) SetId(v string) *ListMcubeMiniTasksRequest {
	s.Id = &v
	return s
}

func (s *ListMcubeMiniTasksRequest) SetTenantId(v string) *ListMcubeMiniTasksRequest {
	s.TenantId = &v
	return s
}

func (s *ListMcubeMiniTasksRequest) SetWorkspaceId(v string) *ListMcubeMiniTasksRequest {
	s.WorkspaceId = &v
	return s
}

type ListMcubeMiniTasksResponseBody struct {
	ListMiniTaskResult *ListMcubeMiniTasksResponseBodyListMiniTaskResult `json:"ListMiniTaskResult,omitempty" xml:"ListMiniTaskResult,omitempty" type:"Struct"`
	RequestId          *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode         *string                                           `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage      *string                                           `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ListMcubeMiniTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeMiniTasksResponseBody) GoString() string {
	return s.String()
}

func (s *ListMcubeMiniTasksResponseBody) SetListMiniTaskResult(v *ListMcubeMiniTasksResponseBodyListMiniTaskResult) *ListMcubeMiniTasksResponseBody {
	s.ListMiniTaskResult = v
	return s
}

func (s *ListMcubeMiniTasksResponseBody) SetRequestId(v string) *ListMcubeMiniTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBody) SetResultCode(v string) *ListMcubeMiniTasksResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBody) SetResultMessage(v string) *ListMcubeMiniTasksResponseBody {
	s.ResultMessage = &v
	return s
}

type ListMcubeMiniTasksResponseBodyListMiniTaskResult struct {
	MiniTaskList []*ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList `json:"MiniTaskList,omitempty" xml:"MiniTaskList,omitempty" type:"Repeated"`
	ResultMsg    *string                                                         `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success      *bool                                                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListMcubeMiniTasksResponseBodyListMiniTaskResult) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeMiniTasksResponseBodyListMiniTaskResult) GoString() string {
	return s.String()
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResult) SetMiniTaskList(v []*ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) *ListMcubeMiniTasksResponseBodyListMiniTaskResult {
	s.MiniTaskList = v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResult) SetResultMsg(v string) *ListMcubeMiniTasksResponseBodyListMiniTaskResult {
	s.ResultMsg = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResult) SetSuccess(v bool) *ListMcubeMiniTasksResponseBodyListMiniTaskResult {
	s.Success = &v
	return s
}

type ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList struct {
	AppCode         *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	GmtCreate       *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified     *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GreyConfigInfo  *string `json:"GreyConfigInfo,omitempty" xml:"GreyConfigInfo,omitempty"`
	GreyEndtime     *string `json:"GreyEndtime,omitempty" xml:"GreyEndtime,omitempty"`
	GreyEndtimeData *string `json:"GreyEndtimeData,omitempty" xml:"GreyEndtimeData,omitempty"`
	GreyNum         *int64  `json:"GreyNum,omitempty" xml:"GreyNum,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Memo            *string `json:"Memo,omitempty" xml:"Memo,omitempty"`
	PackageId       *int64  `json:"PackageId,omitempty" xml:"PackageId,omitempty"`
	Platform        *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	ProductVersion  *string `json:"ProductVersion,omitempty" xml:"ProductVersion,omitempty"`
	PublishMode     *int64  `json:"PublishMode,omitempty" xml:"PublishMode,omitempty"`
	PublishType     *int64  `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskStatus      *int64  `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	WhitelistIds    *string `json:"WhitelistIds,omitempty" xml:"WhitelistIds,omitempty"`
}

func (s ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) GoString() string {
	return s.String()
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetAppCode(v string) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.AppCode = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetGmtCreate(v string) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.GmtCreate = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetGmtModified(v string) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.GmtModified = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetGreyConfigInfo(v string) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.GreyConfigInfo = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetGreyEndtime(v string) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.GreyEndtime = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetGreyEndtimeData(v string) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.GreyEndtimeData = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetGreyNum(v int64) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.GreyNum = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetId(v int64) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.Id = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetMemo(v string) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.Memo = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetPackageId(v int64) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.PackageId = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetPlatform(v string) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.Platform = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetProductVersion(v string) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.ProductVersion = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetPublishMode(v int64) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.PublishMode = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetPublishType(v int64) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.PublishType = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetStatus(v string) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.Status = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetTaskStatus(v int64) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.TaskStatus = &v
	return s
}

func (s *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList) SetWhitelistIds(v string) *ListMcubeMiniTasksResponseBodyListMiniTaskResultMiniTaskList {
	s.WhitelistIds = &v
	return s
}

type ListMcubeMiniTasksResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMcubeMiniTasksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMcubeMiniTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeMiniTasksResponse) GoString() string {
	return s.String()
}

func (s *ListMcubeMiniTasksResponse) SetHeaders(v map[string]*string) *ListMcubeMiniTasksResponse {
	s.Headers = v
	return s
}

func (s *ListMcubeMiniTasksResponse) SetStatusCode(v int32) *ListMcubeMiniTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMcubeMiniTasksResponse) SetBody(v *ListMcubeMiniTasksResponseBody) *ListMcubeMiniTasksResponse {
	s.Body = v
	return s
}

type ListMcubeNebulaAppsRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Keyword     *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	PageNum     *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListMcubeNebulaAppsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeNebulaAppsRequest) GoString() string {
	return s.String()
}

func (s *ListMcubeNebulaAppsRequest) SetAppId(v string) *ListMcubeNebulaAppsRequest {
	s.AppId = &v
	return s
}

func (s *ListMcubeNebulaAppsRequest) SetKeyword(v string) *ListMcubeNebulaAppsRequest {
	s.Keyword = &v
	return s
}

func (s *ListMcubeNebulaAppsRequest) SetPageNum(v int32) *ListMcubeNebulaAppsRequest {
	s.PageNum = &v
	return s
}

func (s *ListMcubeNebulaAppsRequest) SetPageSize(v int32) *ListMcubeNebulaAppsRequest {
	s.PageSize = &v
	return s
}

func (s *ListMcubeNebulaAppsRequest) SetTenantId(v string) *ListMcubeNebulaAppsRequest {
	s.TenantId = &v
	return s
}

func (s *ListMcubeNebulaAppsRequest) SetWorkspaceId(v string) *ListMcubeNebulaAppsRequest {
	s.WorkspaceId = &v
	return s
}

type ListMcubeNebulaAppsResponseBody struct {
	ListMcubeNebulaAppsResult *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult `json:"ListMcubeNebulaAppsResult,omitempty" xml:"ListMcubeNebulaAppsResult,omitempty" type:"Struct"`
	RequestId                 *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode                *string                                                   `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage             *string                                                   `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ListMcubeNebulaAppsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeNebulaAppsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMcubeNebulaAppsResponseBody) SetListMcubeNebulaAppsResult(v *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult) *ListMcubeNebulaAppsResponseBody {
	s.ListMcubeNebulaAppsResult = v
	return s
}

func (s *ListMcubeNebulaAppsResponseBody) SetRequestId(v string) *ListMcubeNebulaAppsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMcubeNebulaAppsResponseBody) SetResultCode(v string) *ListMcubeNebulaAppsResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ListMcubeNebulaAppsResponseBody) SetResultMessage(v string) *ListMcubeNebulaAppsResponseBody {
	s.ResultMessage = &v
	return s
}

type ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult struct {
	CurrentPage    *int32                                                                    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	ErrorCode      *string                                                                   `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	HasMore        *bool                                                                     `json:"HasMore,omitempty" xml:"HasMore,omitempty"`
	NebulaAppInfos []*ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResultNebulaAppInfos `json:"NebulaAppInfos,omitempty" xml:"NebulaAppInfos,omitempty" type:"Repeated"`
	PageSize       *int32                                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg      *string                                                                   `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success        *bool                                                                     `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount     *int64                                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult) GoString() string {
	return s.String()
}

func (s *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult) SetCurrentPage(v int32) *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult {
	s.CurrentPage = &v
	return s
}

func (s *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult) SetErrorCode(v string) *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult {
	s.ErrorCode = &v
	return s
}

func (s *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult) SetHasMore(v bool) *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult {
	s.HasMore = &v
	return s
}

func (s *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult) SetNebulaAppInfos(v []*ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResultNebulaAppInfos) *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult {
	s.NebulaAppInfos = v
	return s
}

func (s *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult) SetPageSize(v int32) *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult {
	s.PageSize = &v
	return s
}

func (s *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult) SetRequestId(v string) *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult {
	s.RequestId = &v
	return s
}

func (s *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult) SetResultMsg(v string) *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult {
	s.ResultMsg = &v
	return s
}

func (s *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult) SetSuccess(v bool) *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult {
	s.Success = &v
	return s
}

func (s *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult) SetTotalCount(v int64) *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResult {
	s.TotalCount = &v
	return s
}

type ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResultNebulaAppInfos struct {
	H5Id   *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	H5Name *string `json:"H5Name,omitempty" xml:"H5Name,omitempty"`
}

func (s ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResultNebulaAppInfos) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResultNebulaAppInfos) GoString() string {
	return s.String()
}

func (s *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResultNebulaAppInfos) SetH5Id(v string) *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResultNebulaAppInfos {
	s.H5Id = &v
	return s
}

func (s *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResultNebulaAppInfos) SetH5Name(v string) *ListMcubeNebulaAppsResponseBodyListMcubeNebulaAppsResultNebulaAppInfos {
	s.H5Name = &v
	return s
}

type ListMcubeNebulaAppsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMcubeNebulaAppsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMcubeNebulaAppsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeNebulaAppsResponse) GoString() string {
	return s.String()
}

func (s *ListMcubeNebulaAppsResponse) SetHeaders(v map[string]*string) *ListMcubeNebulaAppsResponse {
	s.Headers = v
	return s
}

func (s *ListMcubeNebulaAppsResponse) SetStatusCode(v int32) *ListMcubeNebulaAppsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMcubeNebulaAppsResponse) SetBody(v *ListMcubeNebulaAppsResponseBody) *ListMcubeNebulaAppsResponse {
	s.Body = v
	return s
}

type ListMcubeNebulaResourcesRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	H5Id        *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	PageNum     *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListMcubeNebulaResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeNebulaResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListMcubeNebulaResourcesRequest) SetAppId(v string) *ListMcubeNebulaResourcesRequest {
	s.AppId = &v
	return s
}

func (s *ListMcubeNebulaResourcesRequest) SetH5Id(v string) *ListMcubeNebulaResourcesRequest {
	s.H5Id = &v
	return s
}

func (s *ListMcubeNebulaResourcesRequest) SetPageNum(v int32) *ListMcubeNebulaResourcesRequest {
	s.PageNum = &v
	return s
}

func (s *ListMcubeNebulaResourcesRequest) SetPageSize(v int32) *ListMcubeNebulaResourcesRequest {
	s.PageSize = &v
	return s
}

func (s *ListMcubeNebulaResourcesRequest) SetTenantId(v string) *ListMcubeNebulaResourcesRequest {
	s.TenantId = &v
	return s
}

func (s *ListMcubeNebulaResourcesRequest) SetWorkspaceId(v string) *ListMcubeNebulaResourcesRequest {
	s.WorkspaceId = &v
	return s
}

type ListMcubeNebulaResourcesResponseBody struct {
	ListMcubeNebulaResourceResult *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult `json:"ListMcubeNebulaResourceResult,omitempty" xml:"ListMcubeNebulaResourceResult,omitempty" type:"Struct"`
	RequestId                     *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode                    *string                                                            `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage                 *string                                                            `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ListMcubeNebulaResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeNebulaResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListMcubeNebulaResourcesResponseBody) SetListMcubeNebulaResourceResult(v *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult) *ListMcubeNebulaResourcesResponseBody {
	s.ListMcubeNebulaResourceResult = v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBody) SetRequestId(v string) *ListMcubeNebulaResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBody) SetResultCode(v string) *ListMcubeNebulaResourcesResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBody) SetResultMessage(v string) *ListMcubeNebulaResourcesResponseBody {
	s.ResultMessage = &v
	return s
}

type ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult struct {
	CurrentPage        *int32                                                                                 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	ErrorCode          *string                                                                                `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	HasMore            *bool                                                                                  `json:"HasMore,omitempty" xml:"HasMore,omitempty"`
	NebulaResourceInfo []*ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo `json:"NebulaResourceInfo,omitempty" xml:"NebulaResourceInfo,omitempty" type:"Repeated"`
	PageSize           *int32                                                                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId          *string                                                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg          *string                                                                                `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success            *bool                                                                                  `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount         *int64                                                                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult) GoString() string {
	return s.String()
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult) SetCurrentPage(v int32) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult {
	s.CurrentPage = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult) SetErrorCode(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult {
	s.ErrorCode = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult) SetHasMore(v bool) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult {
	s.HasMore = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult) SetNebulaResourceInfo(v []*ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult {
	s.NebulaResourceInfo = v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult) SetPageSize(v int32) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult {
	s.PageSize = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult) SetRequestId(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult {
	s.RequestId = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult) SetResultMsg(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult {
	s.ResultMsg = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult) SetSuccess(v bool) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult {
	s.Success = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult) SetTotalCount(v int64) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResult {
	s.TotalCount = &v
	return s
}

type ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo struct {
	AppCode          *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AutoInstall      *int32  `json:"AutoInstall,omitempty" xml:"AutoInstall,omitempty"`
	ClientVersionMax *string `json:"ClientVersionMax,omitempty" xml:"ClientVersionMax,omitempty"`
	ClientVersionMin *string `json:"ClientVersionMin,omitempty" xml:"ClientVersionMin,omitempty"`
	Creator          *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	DebugUrl         *string `json:"DebugUrl,omitempty" xml:"DebugUrl,omitempty"`
	DownloadUrl      *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	ExtendInfo       *string `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty"`
	ExtraData        *string `json:"ExtraData,omitempty" xml:"ExtraData,omitempty"`
	FallbackBaseUrl  *string `json:"FallbackBaseUrl,omitempty" xml:"FallbackBaseUrl,omitempty"`
	FileSize         *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	GmtCreate        *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified      *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	H5Id             *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	H5Name           *string `json:"H5Name,omitempty" xml:"H5Name,omitempty"`
	H5Version        *string `json:"H5Version,omitempty" xml:"H5Version,omitempty"`
	Id               *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	InstallType      *int32  `json:"InstallType,omitempty" xml:"InstallType,omitempty"`
	LazyLoad         *int32  `json:"LazyLoad,omitempty" xml:"LazyLoad,omitempty"`
	MainUrl          *string `json:"MainUrl,omitempty" xml:"MainUrl,omitempty"`
	Md5              *string `json:"Md5,omitempty" xml:"Md5,omitempty"`
	Memo             *string `json:"Memo,omitempty" xml:"Memo,omitempty"`
	MetaId           *int64  `json:"MetaId,omitempty" xml:"MetaId,omitempty"`
	Modifier         *string `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	PackageType      *int32  `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	Platform         *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	PublishPeriod    *int32  `json:"PublishPeriod,omitempty" xml:"PublishPeriod,omitempty"`
	ReleaseVersion   *string `json:"ReleaseVersion,omitempty" xml:"ReleaseVersion,omitempty"`
	ResourceType     *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Status           *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Vhost            *string `json:"Vhost,omitempty" xml:"Vhost,omitempty"`
}

func (s ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) GoString() string {
	return s.String()
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetAppCode(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.AppCode = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetAutoInstall(v int32) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.AutoInstall = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetClientVersionMax(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.ClientVersionMax = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetClientVersionMin(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.ClientVersionMin = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetCreator(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.Creator = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetDebugUrl(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.DebugUrl = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetDownloadUrl(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.DownloadUrl = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetExtendInfo(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.ExtendInfo = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetExtraData(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.ExtraData = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetFallbackBaseUrl(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.FallbackBaseUrl = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetFileSize(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.FileSize = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetGmtCreate(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.GmtCreate = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetGmtModified(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.GmtModified = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetH5Id(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.H5Id = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetH5Name(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.H5Name = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetH5Version(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.H5Version = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetId(v int64) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.Id = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetInstallType(v int32) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.InstallType = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetLazyLoad(v int32) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.LazyLoad = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetMainUrl(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.MainUrl = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetMd5(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.Md5 = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetMemo(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.Memo = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetMetaId(v int64) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.MetaId = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetModifier(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.Modifier = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetPackageType(v int32) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.PackageType = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetPlatform(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.Platform = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetPublishPeriod(v int32) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.PublishPeriod = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetReleaseVersion(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.ReleaseVersion = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetResourceType(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.ResourceType = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetStatus(v int32) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.Status = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo) SetVhost(v string) *ListMcubeNebulaResourcesResponseBodyListMcubeNebulaResourceResultNebulaResourceInfo {
	s.Vhost = &v
	return s
}

type ListMcubeNebulaResourcesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMcubeNebulaResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMcubeNebulaResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeNebulaResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListMcubeNebulaResourcesResponse) SetHeaders(v map[string]*string) *ListMcubeNebulaResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListMcubeNebulaResourcesResponse) SetStatusCode(v int32) *ListMcubeNebulaResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMcubeNebulaResourcesResponse) SetBody(v *ListMcubeNebulaResourcesResponseBody) *ListMcubeNebulaResourcesResponse {
	s.Body = v
	return s
}

type ListMcubeNebulaTasksRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListMcubeNebulaTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeNebulaTasksRequest) GoString() string {
	return s.String()
}

func (s *ListMcubeNebulaTasksRequest) SetAppId(v string) *ListMcubeNebulaTasksRequest {
	s.AppId = &v
	return s
}

func (s *ListMcubeNebulaTasksRequest) SetId(v int64) *ListMcubeNebulaTasksRequest {
	s.Id = &v
	return s
}

func (s *ListMcubeNebulaTasksRequest) SetTenantId(v string) *ListMcubeNebulaTasksRequest {
	s.TenantId = &v
	return s
}

func (s *ListMcubeNebulaTasksRequest) SetWorkspaceId(v string) *ListMcubeNebulaTasksRequest {
	s.WorkspaceId = &v
	return s
}

type ListMcubeNebulaTasksResponseBody struct {
	ListMcubeNebulaTaskResult *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult `json:"ListMcubeNebulaTaskResult,omitempty" xml:"ListMcubeNebulaTaskResult,omitempty" type:"Struct"`
	RequestId                 *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode                *string                                                    `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage             *string                                                    `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ListMcubeNebulaTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeNebulaTasksResponseBody) GoString() string {
	return s.String()
}

func (s *ListMcubeNebulaTasksResponseBody) SetListMcubeNebulaTaskResult(v *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult) *ListMcubeNebulaTasksResponseBody {
	s.ListMcubeNebulaTaskResult = v
	return s
}

func (s *ListMcubeNebulaTasksResponseBody) SetRequestId(v string) *ListMcubeNebulaTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBody) SetResultCode(v string) *ListMcubeNebulaTasksResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBody) SetResultMessage(v string) *ListMcubeNebulaTasksResponseBody {
	s.ResultMessage = &v
	return s
}

type ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult struct {
	ErrorCode      *string                                                                    `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	NebulaTaskInfo []*ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo `json:"NebulaTaskInfo,omitempty" xml:"NebulaTaskInfo,omitempty" type:"Repeated"`
	RequestId      *string                                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg      *string                                                                    `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success        *bool                                                                      `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult) GoString() string {
	return s.String()
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult) SetErrorCode(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult {
	s.ErrorCode = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult) SetNebulaTaskInfo(v []*ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult {
	s.NebulaTaskInfo = v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult) SetRequestId(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult {
	s.RequestId = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult) SetResultMsg(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult {
	s.ResultMsg = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult) SetSuccess(v bool) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResult {
	s.Success = &v
	return s
}

type ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo struct {
	AppCode          *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	BizType          *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	Creator          *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	GmtCreate        *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified      *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GmtModifiedStr   *string `json:"GmtModifiedStr,omitempty" xml:"GmtModifiedStr,omitempty"`
	GreyConfigInfo   *string `json:"GreyConfigInfo,omitempty" xml:"GreyConfigInfo,omitempty"`
	GreyEndtime      *string `json:"GreyEndtime,omitempty" xml:"GreyEndtime,omitempty"`
	GreyEndtimeData  *string `json:"GreyEndtimeData,omitempty" xml:"GreyEndtimeData,omitempty"`
	GreyEndtimeStr   *string `json:"GreyEndtimeStr,omitempty" xml:"GreyEndtimeStr,omitempty"`
	GreyNum          *int32  `json:"GreyNum,omitempty" xml:"GreyNum,omitempty"`
	GreyUrl          *string `json:"GreyUrl,omitempty" xml:"GreyUrl,omitempty"`
	Id               *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Memo             *string `json:"Memo,omitempty" xml:"Memo,omitempty"`
	Modifier         *string `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	PackageId        *int64  `json:"PackageId,omitempty" xml:"PackageId,omitempty"`
	Percent          *int32  `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Platform         *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	ProductId        *string `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	ProductVersion   *string `json:"ProductVersion,omitempty" xml:"ProductVersion,omitempty"`
	PublishMode      *int32  `json:"PublishMode,omitempty" xml:"PublishMode,omitempty"`
	PublishType      *int32  `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	ReleaseVersion   *string `json:"ReleaseVersion,omitempty" xml:"ReleaseVersion,omitempty"`
	Status           *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	SyncResult       *string `json:"SyncResult,omitempty" xml:"SyncResult,omitempty"`
	TaskName         *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TaskStatus       *int32  `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	TaskType         *int32  `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	TaskVersion      *int64  `json:"TaskVersion,omitempty" xml:"TaskVersion,omitempty"`
	UpgradeNoticeNum *int64  `json:"UpgradeNoticeNum,omitempty" xml:"UpgradeNoticeNum,omitempty"`
	UpgradeProgress  *string `json:"UpgradeProgress,omitempty" xml:"UpgradeProgress,omitempty"`
	WhitelistIds     *string `json:"WhitelistIds,omitempty" xml:"WhitelistIds,omitempty"`
}

func (s ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) GoString() string {
	return s.String()
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetAppCode(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.AppCode = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetBizType(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.BizType = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetCreator(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.Creator = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetGmtCreate(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.GmtCreate = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetGmtModified(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.GmtModified = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetGmtModifiedStr(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.GmtModifiedStr = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetGreyConfigInfo(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.GreyConfigInfo = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetGreyEndtime(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.GreyEndtime = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetGreyEndtimeData(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.GreyEndtimeData = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetGreyEndtimeStr(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.GreyEndtimeStr = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetGreyNum(v int32) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.GreyNum = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetGreyUrl(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.GreyUrl = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetId(v int64) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.Id = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetMemo(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.Memo = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetModifier(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.Modifier = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetPackageId(v int64) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.PackageId = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetPercent(v int32) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.Percent = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetPlatform(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.Platform = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetProductId(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.ProductId = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetProductVersion(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.ProductVersion = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetPublishMode(v int32) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.PublishMode = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetPublishType(v int32) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.PublishType = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetReleaseVersion(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.ReleaseVersion = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetStatus(v int32) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.Status = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetSyncResult(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.SyncResult = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetTaskName(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.TaskName = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetTaskStatus(v int32) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.TaskStatus = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetTaskType(v int32) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.TaskType = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetTaskVersion(v int64) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.TaskVersion = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetUpgradeNoticeNum(v int64) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.UpgradeNoticeNum = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetUpgradeProgress(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.UpgradeProgress = &v
	return s
}

func (s *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo) SetWhitelistIds(v string) *ListMcubeNebulaTasksResponseBodyListMcubeNebulaTaskResultNebulaTaskInfo {
	s.WhitelistIds = &v
	return s
}

type ListMcubeNebulaTasksResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMcubeNebulaTasksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMcubeNebulaTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeNebulaTasksResponse) GoString() string {
	return s.String()
}

func (s *ListMcubeNebulaTasksResponse) SetHeaders(v map[string]*string) *ListMcubeNebulaTasksResponse {
	s.Headers = v
	return s
}

func (s *ListMcubeNebulaTasksResponse) SetStatusCode(v int32) *ListMcubeNebulaTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMcubeNebulaTasksResponse) SetBody(v *ListMcubeNebulaTasksResponseBody) *ListMcubeNebulaTasksResponse {
	s.Body = v
	return s
}

type ListMcubeUpgradePackagesRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	PageNum     *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListMcubeUpgradePackagesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeUpgradePackagesRequest) GoString() string {
	return s.String()
}

func (s *ListMcubeUpgradePackagesRequest) SetAppId(v string) *ListMcubeUpgradePackagesRequest {
	s.AppId = &v
	return s
}

func (s *ListMcubeUpgradePackagesRequest) SetPageNum(v int32) *ListMcubeUpgradePackagesRequest {
	s.PageNum = &v
	return s
}

func (s *ListMcubeUpgradePackagesRequest) SetPageSize(v int32) *ListMcubeUpgradePackagesRequest {
	s.PageSize = &v
	return s
}

func (s *ListMcubeUpgradePackagesRequest) SetTenantId(v string) *ListMcubeUpgradePackagesRequest {
	s.TenantId = &v
	return s
}

func (s *ListMcubeUpgradePackagesRequest) SetWorkspaceId(v string) *ListMcubeUpgradePackagesRequest {
	s.WorkspaceId = &v
	return s
}

type ListMcubeUpgradePackagesResponseBody struct {
	ListPackagesResult *ListMcubeUpgradePackagesResponseBodyListPackagesResult `json:"ListPackagesResult,omitempty" xml:"ListPackagesResult,omitempty" type:"Struct"`
	RequestId          *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode         *string                                                 `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage      *string                                                 `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ListMcubeUpgradePackagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeUpgradePackagesResponseBody) GoString() string {
	return s.String()
}

func (s *ListMcubeUpgradePackagesResponseBody) SetListPackagesResult(v *ListMcubeUpgradePackagesResponseBodyListPackagesResult) *ListMcubeUpgradePackagesResponseBody {
	s.ListPackagesResult = v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBody) SetRequestId(v string) *ListMcubeUpgradePackagesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBody) SetResultCode(v string) *ListMcubeUpgradePackagesResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBody) SetResultMessage(v string) *ListMcubeUpgradePackagesResponseBody {
	s.ResultMessage = &v
	return s
}

type ListMcubeUpgradePackagesResponseBodyListPackagesResult struct {
	CurrentPage *int32                                                            `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	ErrorCode   *string                                                           `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	HasMore     *bool                                                             `json:"HasMore,omitempty" xml:"HasMore,omitempty"`
	Packages    []*ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages `json:"Packages,omitempty" xml:"Packages,omitempty" type:"Repeated"`
	PageSize    *int32                                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg   *string                                                           `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success     *bool                                                             `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListMcubeUpgradePackagesResponseBodyListPackagesResult) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeUpgradePackagesResponseBodyListPackagesResult) GoString() string {
	return s.String()
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResult) SetCurrentPage(v int32) *ListMcubeUpgradePackagesResponseBodyListPackagesResult {
	s.CurrentPage = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResult) SetErrorCode(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResult {
	s.ErrorCode = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResult) SetHasMore(v bool) *ListMcubeUpgradePackagesResponseBodyListPackagesResult {
	s.HasMore = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResult) SetPackages(v []*ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) *ListMcubeUpgradePackagesResponseBodyListPackagesResult {
	s.Packages = v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResult) SetPageSize(v int32) *ListMcubeUpgradePackagesResponseBodyListPackagesResult {
	s.PageSize = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResult) SetRequestId(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResult {
	s.RequestId = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResult) SetResultMsg(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResult {
	s.ResultMsg = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResult) SetSuccess(v bool) *ListMcubeUpgradePackagesResponseBodyListPackagesResult {
	s.Success = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResult) SetTotalCount(v int64) *ListMcubeUpgradePackagesResponseBodyListPackagesResult {
	s.TotalCount = &v
	return s
}

type ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages struct {
	AllowCreateTask  *bool   `json:"AllowCreateTask,omitempty" xml:"AllowCreateTask,omitempty"`
	AppCode          *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AppstoreUrl      *string `json:"AppstoreUrl,omitempty" xml:"AppstoreUrl,omitempty"`
	BackLog          *string `json:"BackLog,omitempty" xml:"BackLog,omitempty"`
	ChangeLog        *string `json:"ChangeLog,omitempty" xml:"ChangeLog,omitempty"`
	ClientFileSize   *int32  `json:"ClientFileSize,omitempty" xml:"ClientFileSize,omitempty"`
	ClientName       *string `json:"ClientName,omitempty" xml:"ClientName,omitempty"`
	CpId             *string `json:"CpId,omitempty" xml:"CpId,omitempty"`
	Creator          *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	DownloadUrl      *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	GlobalVariables  *string `json:"GlobalVariables,omitempty" xml:"GlobalVariables,omitempty"`
	GmtCreate        *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtCreateStr     *string `json:"GmtCreateStr,omitempty" xml:"GmtCreateStr,omitempty"`
	GmtModified      *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GmtModifiedStr   *string `json:"GmtModifiedStr,omitempty" xml:"GmtModifiedStr,omitempty"`
	Id               *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	InnerVersion     *string `json:"InnerVersion,omitempty" xml:"InnerVersion,omitempty"`
	IosSymbol        *string `json:"IosSymbol,omitempty" xml:"IosSymbol,omitempty"`
	IsEnterprise     *int32  `json:"IsEnterprise,omitempty" xml:"IsEnterprise,omitempty"`
	IsRc             *int32  `json:"IsRc,omitempty" xml:"IsRc,omitempty"`
	IsRelease        *int32  `json:"IsRelease,omitempty" xml:"IsRelease,omitempty"`
	MaxVersion       *string `json:"MaxVersion,omitempty" xml:"MaxVersion,omitempty"`
	Md5              *string `json:"Md5,omitempty" xml:"Md5,omitempty"`
	Modifier         *string `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	NeedCheck        *int32  `json:"NeedCheck,omitempty" xml:"NeedCheck,omitempty"`
	OssPath          *string `json:"OssPath,omitempty" xml:"OssPath,omitempty"`
	PackageType      *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	Platform         *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	ProductId        *string `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	ProductName      *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	ProductVersion   *string `json:"ProductVersion,omitempty" xml:"ProductVersion,omitempty"`
	PublishPeriod    *int32  `json:"PublishPeriod,omitempty" xml:"PublishPeriod,omitempty"`
	QrcodeUrl        *string `json:"QrcodeUrl,omitempty" xml:"QrcodeUrl,omitempty"`
	ReleaseType      *string `json:"ReleaseType,omitempty" xml:"ReleaseType,omitempty"`
	ReleaseWindow    *string `json:"ReleaseWindow,omitempty" xml:"ReleaseWindow,omitempty"`
	ScmDownloadUrl   *string `json:"ScmDownloadUrl,omitempty" xml:"ScmDownloadUrl,omitempty"`
	ServerVersion    *int32  `json:"ServerVersion,omitempty" xml:"ServerVersion,omitempty"`
	VerificationCode *string `json:"VerificationCode,omitempty" xml:"VerificationCode,omitempty"`
	VerifyResult     *int32  `json:"VerifyResult,omitempty" xml:"VerifyResult,omitempty"`
	VersionCode      *string `json:"VersionCode,omitempty" xml:"VersionCode,omitempty"`
}

func (s ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) GoString() string {
	return s.String()
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetAllowCreateTask(v bool) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.AllowCreateTask = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetAppCode(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.AppCode = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetAppstoreUrl(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.AppstoreUrl = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetBackLog(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.BackLog = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetChangeLog(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.ChangeLog = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetClientFileSize(v int32) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.ClientFileSize = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetClientName(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.ClientName = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetCpId(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.CpId = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetCreator(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.Creator = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetDownloadUrl(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.DownloadUrl = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetGlobalVariables(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.GlobalVariables = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetGmtCreate(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.GmtCreate = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetGmtCreateStr(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.GmtCreateStr = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetGmtModified(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.GmtModified = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetGmtModifiedStr(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.GmtModifiedStr = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetId(v int64) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.Id = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetInnerVersion(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.InnerVersion = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetIosSymbol(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.IosSymbol = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetIsEnterprise(v int32) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.IsEnterprise = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetIsRc(v int32) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.IsRc = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetIsRelease(v int32) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.IsRelease = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetMaxVersion(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.MaxVersion = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetMd5(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.Md5 = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetModifier(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.Modifier = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetNeedCheck(v int32) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.NeedCheck = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetOssPath(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.OssPath = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetPackageType(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.PackageType = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetPlatform(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.Platform = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetProductId(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.ProductId = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetProductName(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.ProductName = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetProductVersion(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.ProductVersion = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetPublishPeriod(v int32) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.PublishPeriod = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetQrcodeUrl(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.QrcodeUrl = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetReleaseType(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.ReleaseType = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetReleaseWindow(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.ReleaseWindow = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetScmDownloadUrl(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.ScmDownloadUrl = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetServerVersion(v int32) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.ServerVersion = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetVerificationCode(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.VerificationCode = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetVerifyResult(v int32) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.VerifyResult = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages) SetVersionCode(v string) *ListMcubeUpgradePackagesResponseBodyListPackagesResultPackages {
	s.VersionCode = &v
	return s
}

type ListMcubeUpgradePackagesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMcubeUpgradePackagesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMcubeUpgradePackagesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeUpgradePackagesResponse) GoString() string {
	return s.String()
}

func (s *ListMcubeUpgradePackagesResponse) SetHeaders(v map[string]*string) *ListMcubeUpgradePackagesResponse {
	s.Headers = v
	return s
}

func (s *ListMcubeUpgradePackagesResponse) SetStatusCode(v int32) *ListMcubeUpgradePackagesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMcubeUpgradePackagesResponse) SetBody(v *ListMcubeUpgradePackagesResponseBody) *ListMcubeUpgradePackagesResponse {
	s.Body = v
	return s
}

type ListMcubeUpgradeTasksRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	PackageId   *string `json:"PackageId,omitempty" xml:"PackageId,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListMcubeUpgradeTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeUpgradeTasksRequest) GoString() string {
	return s.String()
}

func (s *ListMcubeUpgradeTasksRequest) SetAppId(v string) *ListMcubeUpgradeTasksRequest {
	s.AppId = &v
	return s
}

func (s *ListMcubeUpgradeTasksRequest) SetPackageId(v string) *ListMcubeUpgradeTasksRequest {
	s.PackageId = &v
	return s
}

func (s *ListMcubeUpgradeTasksRequest) SetTenantId(v string) *ListMcubeUpgradeTasksRequest {
	s.TenantId = &v
	return s
}

func (s *ListMcubeUpgradeTasksRequest) SetWorkspaceId(v string) *ListMcubeUpgradeTasksRequest {
	s.WorkspaceId = &v
	return s
}

type ListMcubeUpgradeTasksResponseBody struct {
	ListTaskResult *ListMcubeUpgradeTasksResponseBodyListTaskResult `json:"ListTaskResult,omitempty" xml:"ListTaskResult,omitempty" type:"Struct"`
	RequestId      *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode     *string                                          `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                          `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ListMcubeUpgradeTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeUpgradeTasksResponseBody) GoString() string {
	return s.String()
}

func (s *ListMcubeUpgradeTasksResponseBody) SetListTaskResult(v *ListMcubeUpgradeTasksResponseBodyListTaskResult) *ListMcubeUpgradeTasksResponseBody {
	s.ListTaskResult = v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBody) SetRequestId(v string) *ListMcubeUpgradeTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBody) SetResultCode(v string) *ListMcubeUpgradeTasksResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBody) SetResultMessage(v string) *ListMcubeUpgradeTasksResponseBody {
	s.ResultMessage = &v
	return s
}

type ListMcubeUpgradeTasksResponseBodyListTaskResult struct {
	ErrorCode *string                                                    `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg *string                                                    `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool                                                      `json:"Success,omitempty" xml:"Success,omitempty"`
	TaskInfo  []*ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo `json:"TaskInfo,omitempty" xml:"TaskInfo,omitempty" type:"Repeated"`
}

func (s ListMcubeUpgradeTasksResponseBodyListTaskResult) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeUpgradeTasksResponseBodyListTaskResult) GoString() string {
	return s.String()
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResult) SetErrorCode(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResult {
	s.ErrorCode = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResult) SetRequestId(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResult {
	s.RequestId = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResult) SetResultMsg(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResult {
	s.ResultMsg = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResult) SetSuccess(v bool) *ListMcubeUpgradeTasksResponseBodyListTaskResult {
	s.Success = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResult) SetTaskInfo(v []*ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) *ListMcubeUpgradeTasksResponseBodyListTaskResult {
	s.TaskInfo = v
	return s
}

type ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo struct {
	AppCode            *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	Creator            *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	DevicePercent      *int32  `json:"DevicePercent,omitempty" xml:"DevicePercent,omitempty"`
	ExecutionOrder     *int32  `json:"ExecutionOrder,omitempty" xml:"ExecutionOrder,omitempty"`
	GmtCreate          *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtCreateStr       *string `json:"GmtCreateStr,omitempty" xml:"GmtCreateStr,omitempty"`
	GmtModified        *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GmtModifiedStr     *string `json:"GmtModifiedStr,omitempty" xml:"GmtModifiedStr,omitempty"`
	GreyConfigInfo     *string `json:"GreyConfigInfo,omitempty" xml:"GreyConfigInfo,omitempty"`
	GreyEndtime        *string `json:"GreyEndtime,omitempty" xml:"GreyEndtime,omitempty"`
	GreyNotice         *int32  `json:"GreyNotice,omitempty" xml:"GreyNotice,omitempty"`
	GreyNum            *int32  `json:"GreyNum,omitempty" xml:"GreyNum,omitempty"`
	GreyPausePoint     *int32  `json:"GreyPausePoint,omitempty" xml:"GreyPausePoint,omitempty"`
	GreyPauseType      *int32  `json:"GreyPauseType,omitempty" xml:"GreyPauseType,omitempty"`
	GreyUv             *int32  `json:"GreyUv,omitempty" xml:"GreyUv,omitempty"`
	HistoryForce       *int32  `json:"HistoryForce,omitempty" xml:"HistoryForce,omitempty"`
	HuobanNoticeId     *string `json:"HuobanNoticeId,omitempty" xml:"HuobanNoticeId,omitempty"`
	HuobanUrl          *string `json:"HuobanUrl,omitempty" xml:"HuobanUrl,omitempty"`
	Id                 *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	InnerVersion       *string `json:"InnerVersion,omitempty" xml:"InnerVersion,omitempty"`
	IsEnterprise       *int32  `json:"IsEnterprise,omitempty" xml:"IsEnterprise,omitempty"`
	IsOfficial         *int32  `json:"IsOfficial,omitempty" xml:"IsOfficial,omitempty"`
	IsPush             *int32  `json:"IsPush,omitempty" xml:"IsPush,omitempty"`
	IsRelease          *int32  `json:"IsRelease,omitempty" xml:"IsRelease,omitempty"`
	MaxVersion         *string `json:"MaxVersion,omitempty" xml:"MaxVersion,omitempty"`
	Memo               *string `json:"Memo,omitempty" xml:"Memo,omitempty"`
	Modifier           *string `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	PackageInfoId      *int64  `json:"PackageInfoId,omitempty" xml:"PackageInfoId,omitempty"`
	Platform           *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	ProductId          *string `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	ProductVersion     *string `json:"ProductVersion,omitempty" xml:"ProductVersion,omitempty"`
	PublishMode        *int32  `json:"PublishMode,omitempty" xml:"PublishMode,omitempty"`
	PublishType        *int32  `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	PushContent        *string `json:"PushContent,omitempty" xml:"PushContent,omitempty"`
	RealGreyEndtime    *string `json:"RealGreyEndtime,omitempty" xml:"RealGreyEndtime,omitempty"`
	RealGreyEndtimeStr *string `json:"RealGreyEndtimeStr,omitempty" xml:"RealGreyEndtimeStr,omitempty"`
	RealGreyEndtype    *int32  `json:"RealGreyEndtype,omitempty" xml:"RealGreyEndtype,omitempty"`
	RealGreyNum        *int32  `json:"RealGreyNum,omitempty" xml:"RealGreyNum,omitempty"`
	RealGreyUv         *int32  `json:"RealGreyUv,omitempty" xml:"RealGreyUv,omitempty"`
	SilentType         *int32  `json:"SilentType,omitempty" xml:"SilentType,omitempty"`
	SyncResult         *string `json:"SyncResult,omitempty" xml:"SyncResult,omitempty"`
	TaskStatus         *int32  `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	UpgradeContent     *string `json:"UpgradeContent,omitempty" xml:"UpgradeContent,omitempty"`
	UpgradeType        *int32  `json:"UpgradeType,omitempty" xml:"UpgradeType,omitempty"`
	UpgradeValidTime   *int32  `json:"UpgradeValidTime,omitempty" xml:"UpgradeValidTime,omitempty"`
	WhitelistIds       *string `json:"WhitelistIds,omitempty" xml:"WhitelistIds,omitempty"`
}

func (s ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) GoString() string {
	return s.String()
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetAppCode(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.AppCode = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetCreator(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.Creator = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetDevicePercent(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.DevicePercent = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetExecutionOrder(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.ExecutionOrder = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetGmtCreate(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.GmtCreate = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetGmtCreateStr(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.GmtCreateStr = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetGmtModified(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.GmtModified = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetGmtModifiedStr(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.GmtModifiedStr = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetGreyConfigInfo(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.GreyConfigInfo = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetGreyEndtime(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.GreyEndtime = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetGreyNotice(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.GreyNotice = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetGreyNum(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.GreyNum = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetGreyPausePoint(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.GreyPausePoint = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetGreyPauseType(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.GreyPauseType = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetGreyUv(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.GreyUv = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetHistoryForce(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.HistoryForce = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetHuobanNoticeId(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.HuobanNoticeId = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetHuobanUrl(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.HuobanUrl = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetId(v int64) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.Id = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetInnerVersion(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.InnerVersion = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetIsEnterprise(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.IsEnterprise = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetIsOfficial(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.IsOfficial = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetIsPush(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.IsPush = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetIsRelease(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.IsRelease = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetMaxVersion(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.MaxVersion = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetMemo(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.Memo = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetModifier(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.Modifier = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetPackageInfoId(v int64) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.PackageInfoId = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetPlatform(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.Platform = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetProductId(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.ProductId = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetProductVersion(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.ProductVersion = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetPublishMode(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.PublishMode = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetPublishType(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.PublishType = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetPushContent(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.PushContent = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetRealGreyEndtime(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.RealGreyEndtime = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetRealGreyEndtimeStr(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.RealGreyEndtimeStr = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetRealGreyEndtype(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.RealGreyEndtype = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetRealGreyNum(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.RealGreyNum = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetRealGreyUv(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.RealGreyUv = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetSilentType(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.SilentType = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetSyncResult(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.SyncResult = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetTaskStatus(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.TaskStatus = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetUpgradeContent(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.UpgradeContent = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetUpgradeType(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.UpgradeType = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetUpgradeValidTime(v int32) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.UpgradeValidTime = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo) SetWhitelistIds(v string) *ListMcubeUpgradeTasksResponseBodyListTaskResultTaskInfo {
	s.WhitelistIds = &v
	return s
}

type ListMcubeUpgradeTasksResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMcubeUpgradeTasksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMcubeUpgradeTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeUpgradeTasksResponse) GoString() string {
	return s.String()
}

func (s *ListMcubeUpgradeTasksResponse) SetHeaders(v map[string]*string) *ListMcubeUpgradeTasksResponse {
	s.Headers = v
	return s
}

func (s *ListMcubeUpgradeTasksResponse) SetStatusCode(v int32) *ListMcubeUpgradeTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMcubeUpgradeTasksResponse) SetBody(v *ListMcubeUpgradeTasksResponseBody) *ListMcubeUpgradeTasksResponse {
	s.Body = v
	return s
}

type ListMcubeWhitelistsRequest struct {
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	PageNum       *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TenantId      *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WhitelistName *string `json:"WhitelistName,omitempty" xml:"WhitelistName,omitempty"`
	WorkspaceId   *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListMcubeWhitelistsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeWhitelistsRequest) GoString() string {
	return s.String()
}

func (s *ListMcubeWhitelistsRequest) SetAppId(v string) *ListMcubeWhitelistsRequest {
	s.AppId = &v
	return s
}

func (s *ListMcubeWhitelistsRequest) SetPageNum(v int32) *ListMcubeWhitelistsRequest {
	s.PageNum = &v
	return s
}

func (s *ListMcubeWhitelistsRequest) SetPageSize(v int32) *ListMcubeWhitelistsRequest {
	s.PageSize = &v
	return s
}

func (s *ListMcubeWhitelistsRequest) SetTenantId(v string) *ListMcubeWhitelistsRequest {
	s.TenantId = &v
	return s
}

func (s *ListMcubeWhitelistsRequest) SetWhitelistName(v string) *ListMcubeWhitelistsRequest {
	s.WhitelistName = &v
	return s
}

func (s *ListMcubeWhitelistsRequest) SetWorkspaceId(v string) *ListMcubeWhitelistsRequest {
	s.WorkspaceId = &v
	return s
}

type ListMcubeWhitelistsResponseBody struct {
	ListWhitelistResult *ListMcubeWhitelistsResponseBodyListWhitelistResult `json:"ListWhitelistResult,omitempty" xml:"ListWhitelistResult,omitempty" type:"Struct"`
	RequestId           *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode          *string                                             `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage       *string                                             `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ListMcubeWhitelistsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeWhitelistsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMcubeWhitelistsResponseBody) SetListWhitelistResult(v *ListMcubeWhitelistsResponseBodyListWhitelistResult) *ListMcubeWhitelistsResponseBody {
	s.ListWhitelistResult = v
	return s
}

func (s *ListMcubeWhitelistsResponseBody) SetRequestId(v string) *ListMcubeWhitelistsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMcubeWhitelistsResponseBody) SetResultCode(v string) *ListMcubeWhitelistsResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ListMcubeWhitelistsResponseBody) SetResultMessage(v string) *ListMcubeWhitelistsResponseBody {
	s.ResultMessage = &v
	return s
}

type ListMcubeWhitelistsResponseBodyListWhitelistResult struct {
	CurrentPage *int32                                                          `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	HasMore     *bool                                                           `json:"HasMore,omitempty" xml:"HasMore,omitempty"`
	PageSize    *int32                                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResultMsg   *string                                                         `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success     *bool                                                           `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalCount  *int64                                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	Whitelists  []*ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists `json:"Whitelists,omitempty" xml:"Whitelists,omitempty" type:"Repeated"`
}

func (s ListMcubeWhitelistsResponseBodyListWhitelistResult) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeWhitelistsResponseBodyListWhitelistResult) GoString() string {
	return s.String()
}

func (s *ListMcubeWhitelistsResponseBodyListWhitelistResult) SetCurrentPage(v int32) *ListMcubeWhitelistsResponseBodyListWhitelistResult {
	s.CurrentPage = &v
	return s
}

func (s *ListMcubeWhitelistsResponseBodyListWhitelistResult) SetHasMore(v bool) *ListMcubeWhitelistsResponseBodyListWhitelistResult {
	s.HasMore = &v
	return s
}

func (s *ListMcubeWhitelistsResponseBodyListWhitelistResult) SetPageSize(v int32) *ListMcubeWhitelistsResponseBodyListWhitelistResult {
	s.PageSize = &v
	return s
}

func (s *ListMcubeWhitelistsResponseBodyListWhitelistResult) SetResultMsg(v string) *ListMcubeWhitelistsResponseBodyListWhitelistResult {
	s.ResultMsg = &v
	return s
}

func (s *ListMcubeWhitelistsResponseBodyListWhitelistResult) SetSuccess(v bool) *ListMcubeWhitelistsResponseBodyListWhitelistResult {
	s.Success = &v
	return s
}

func (s *ListMcubeWhitelistsResponseBodyListWhitelistResult) SetTotalCount(v int64) *ListMcubeWhitelistsResponseBodyListWhitelistResult {
	s.TotalCount = &v
	return s
}

func (s *ListMcubeWhitelistsResponseBodyListWhitelistResult) SetWhitelists(v []*ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists) *ListMcubeWhitelistsResponseBodyListWhitelistResult {
	s.Whitelists = v
	return s
}

type ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists struct {
	AppCode        *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	GmtCreate      *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified    *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id             *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	WhiteListCount *int64  `json:"WhiteListCount,omitempty" xml:"WhiteListCount,omitempty"`
	WhiteListName  *string `json:"WhiteListName,omitempty" xml:"WhiteListName,omitempty"`
	WhitelistType  *string `json:"WhitelistType,omitempty" xml:"WhitelistType,omitempty"`
}

func (s ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists) GoString() string {
	return s.String()
}

func (s *ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists) SetAppCode(v string) *ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists {
	s.AppCode = &v
	return s
}

func (s *ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists) SetGmtCreate(v string) *ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists {
	s.GmtCreate = &v
	return s
}

func (s *ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists) SetGmtModified(v string) *ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists {
	s.GmtModified = &v
	return s
}

func (s *ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists) SetId(v int64) *ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists {
	s.Id = &v
	return s
}

func (s *ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists) SetWhiteListCount(v int64) *ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists {
	s.WhiteListCount = &v
	return s
}

func (s *ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists) SetWhiteListName(v string) *ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists {
	s.WhiteListName = &v
	return s
}

func (s *ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists) SetWhitelistType(v string) *ListMcubeWhitelistsResponseBodyListWhitelistResultWhitelists {
	s.WhitelistType = &v
	return s
}

type ListMcubeWhitelistsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMcubeWhitelistsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMcubeWhitelistsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMcubeWhitelistsResponse) GoString() string {
	return s.String()
}

func (s *ListMcubeWhitelistsResponse) SetHeaders(v map[string]*string) *ListMcubeWhitelistsResponse {
	s.Headers = v
	return s
}

func (s *ListMcubeWhitelistsResponse) SetStatusCode(v int32) *ListMcubeWhitelistsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMcubeWhitelistsResponse) SetBody(v *ListMcubeWhitelistsResponseBody) *ListMcubeWhitelistsResponse {
	s.Body = v
	return s
}

type ListMgsApiRequest struct {
	ApiStatus     *string `json:"ApiStatus,omitempty" xml:"ApiStatus,omitempty"`
	ApiType       *string `json:"ApiType,omitempty" xml:"ApiType,omitempty"`
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Format        *string `json:"Format,omitempty" xml:"Format,omitempty"`
	Host          *string `json:"Host,omitempty" xml:"Host,omitempty"`
	NeedEncrypt   *string `json:"NeedEncrypt,omitempty" xml:"NeedEncrypt,omitempty"`
	NeedEtag      *string `json:"NeedEtag,omitempty" xml:"NeedEtag,omitempty"`
	NeedSign      *string `json:"NeedSign,omitempty" xml:"NeedSign,omitempty"`
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	OptFuzzy      *string `json:"OptFuzzy,omitempty" xml:"OptFuzzy,omitempty"`
	PageIndex     *int64  `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	PageSize      *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SysId         *int64  `json:"SysId,omitempty" xml:"SysId,omitempty"`
	SysName       *string `json:"SysName,omitempty" xml:"SysName,omitempty"`
	TenantId      *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId   *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListMgsApiRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMgsApiRequest) GoString() string {
	return s.String()
}

func (s *ListMgsApiRequest) SetApiStatus(v string) *ListMgsApiRequest {
	s.ApiStatus = &v
	return s
}

func (s *ListMgsApiRequest) SetApiType(v string) *ListMgsApiRequest {
	s.ApiType = &v
	return s
}

func (s *ListMgsApiRequest) SetAppId(v string) *ListMgsApiRequest {
	s.AppId = &v
	return s
}

func (s *ListMgsApiRequest) SetFormat(v string) *ListMgsApiRequest {
	s.Format = &v
	return s
}

func (s *ListMgsApiRequest) SetHost(v string) *ListMgsApiRequest {
	s.Host = &v
	return s
}

func (s *ListMgsApiRequest) SetNeedEncrypt(v string) *ListMgsApiRequest {
	s.NeedEncrypt = &v
	return s
}

func (s *ListMgsApiRequest) SetNeedEtag(v string) *ListMgsApiRequest {
	s.NeedEtag = &v
	return s
}

func (s *ListMgsApiRequest) SetNeedSign(v string) *ListMgsApiRequest {
	s.NeedSign = &v
	return s
}

func (s *ListMgsApiRequest) SetOperationType(v string) *ListMgsApiRequest {
	s.OperationType = &v
	return s
}

func (s *ListMgsApiRequest) SetOptFuzzy(v string) *ListMgsApiRequest {
	s.OptFuzzy = &v
	return s
}

func (s *ListMgsApiRequest) SetPageIndex(v int64) *ListMgsApiRequest {
	s.PageIndex = &v
	return s
}

func (s *ListMgsApiRequest) SetPageSize(v int64) *ListMgsApiRequest {
	s.PageSize = &v
	return s
}

func (s *ListMgsApiRequest) SetSysId(v int64) *ListMgsApiRequest {
	s.SysId = &v
	return s
}

func (s *ListMgsApiRequest) SetSysName(v string) *ListMgsApiRequest {
	s.SysName = &v
	return s
}

func (s *ListMgsApiRequest) SetTenantId(v string) *ListMgsApiRequest {
	s.TenantId = &v
	return s
}

func (s *ListMgsApiRequest) SetWorkspaceId(v string) *ListMgsApiRequest {
	s.WorkspaceId = &v
	return s
}

type ListMgsApiResponseBody struct {
	RequestId     *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                              `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *ListMgsApiResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                              `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s ListMgsApiResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMgsApiResponseBody) GoString() string {
	return s.String()
}

func (s *ListMgsApiResponseBody) SetRequestId(v string) *ListMgsApiResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMgsApiResponseBody) SetResultCode(v string) *ListMgsApiResponseBody {
	s.ResultCode = &v
	return s
}

func (s *ListMgsApiResponseBody) SetResultContent(v *ListMgsApiResponseBodyResultContent) *ListMgsApiResponseBody {
	s.ResultContent = v
	return s
}

func (s *ListMgsApiResponseBody) SetResultMessage(v string) *ListMgsApiResponseBody {
	s.ResultMessage = &v
	return s
}

type ListMgsApiResponseBodyResultContent struct {
	ErrorMessage *string                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Success      *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
	Value        []*ListMgsApiResponseBodyResultContentValue `json:"Value,omitempty" xml:"Value,omitempty" type:"Repeated"`
}

func (s ListMgsApiResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s ListMgsApiResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *ListMgsApiResponseBodyResultContent) SetErrorMessage(v string) *ListMgsApiResponseBodyResultContent {
	s.ErrorMessage = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContent) SetSuccess(v bool) *ListMgsApiResponseBodyResultContent {
	s.Success = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContent) SetValue(v []*ListMgsApiResponseBodyResultContentValue) *ListMgsApiResponseBodyResultContent {
	s.Value = v
	return s
}

type ListMgsApiResponseBodyResultContentValue struct {
	ApiInvoker         *ListMgsApiResponseBodyResultContentValueApiInvoker         `json:"ApiInvoker,omitempty" xml:"ApiInvoker,omitempty" type:"Struct"`
	ApiName            *string                                                     `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiStatus          *string                                                     `json:"ApiStatus,omitempty" xml:"ApiStatus,omitempty"`
	ApiType            *string                                                     `json:"ApiType,omitempty" xml:"ApiType,omitempty"`
	AppId              *string                                                     `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AuthRuleName       *string                                                     `json:"AuthRuleName,omitempty" xml:"AuthRuleName,omitempty"`
	CacheRule          *ListMgsApiResponseBodyResultContentValueCacheRule          `json:"CacheRule,omitempty" xml:"CacheRule,omitempty" type:"Struct"`
	Charset            *string                                                     `json:"Charset,omitempty" xml:"Charset,omitempty"`
	CircuitBreakerRule *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule `json:"CircuitBreakerRule,omitempty" xml:"CircuitBreakerRule,omitempty" type:"Struct"`
	ContentType        *string                                                     `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	Description        *string                                                     `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtCreate          *string                                                     `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified        *string                                                     `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HeaderRule         []*ListMgsApiResponseBodyResultContentValueHeaderRule       `json:"HeaderRule,omitempty" xml:"HeaderRule,omitempty" type:"Repeated"`
	HeaderRules        []*ListMgsApiResponseBodyResultContentValueHeaderRules      `json:"HeaderRules,omitempty" xml:"HeaderRules,omitempty" type:"Repeated"`
	Host               *string                                                     `json:"Host,omitempty" xml:"Host,omitempty"`
	Id                 *int64                                                      `json:"Id,omitempty" xml:"Id,omitempty"`
	InterfaceType      *string                                                     `json:"InterfaceType,omitempty" xml:"InterfaceType,omitempty"`
	LimitRule          *ListMgsApiResponseBodyResultContentValueLimitRule          `json:"LimitRule,omitempty" xml:"LimitRule,omitempty" type:"Struct"`
	Method             *string                                                     `json:"Method,omitempty" xml:"Method,omitempty"`
	MethodName         *string                                                     `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	MigrateRule        *ListMgsApiResponseBodyResultContentValueMigrateRule        `json:"MigrateRule,omitempty" xml:"MigrateRule,omitempty" type:"Struct"`
	MockRule           *ListMgsApiResponseBodyResultContentValueMockRule           `json:"MockRule,omitempty" xml:"MockRule,omitempty" type:"Struct"`
	NeedETag           *string                                                     `json:"NeedETag,omitempty" xml:"NeedETag,omitempty"`
	NeedEncrypt        *string                                                     `json:"NeedEncrypt,omitempty" xml:"NeedEncrypt,omitempty"`
	NeedJsonp          *string                                                     `json:"NeedJsonp,omitempty" xml:"NeedJsonp,omitempty"`
	NeedSign           *string                                                     `json:"NeedSign,omitempty" xml:"NeedSign,omitempty"`
	OperationType      *string                                                     `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	ParamGetMethod     *string                                                     `json:"ParamGetMethod,omitempty" xml:"ParamGetMethod,omitempty"`
	Path               *string                                                     `json:"Path,omitempty" xml:"Path,omitempty"`
	RequestBodyModel   *string                                                     `json:"RequestBodyModel,omitempty" xml:"RequestBodyModel,omitempty"`
	RequestParams      []*ListMgsApiResponseBodyResultContentValueRequestParams    `json:"RequestParams,omitempty" xml:"RequestParams,omitempty" type:"Repeated"`
	ResponseBodyModel  *string                                                     `json:"ResponseBodyModel,omitempty" xml:"ResponseBodyModel,omitempty"`
	SysId              *int64                                                      `json:"SysId,omitempty" xml:"SysId,omitempty"`
	SysName            *string                                                     `json:"SysName,omitempty" xml:"SysName,omitempty"`
	Timeout            *string                                                     `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	WorkspaceId        *string                                                     `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListMgsApiResponseBodyResultContentValue) String() string {
	return tea.Prettify(s)
}

func (s ListMgsApiResponseBodyResultContentValue) GoString() string {
	return s.String()
}

func (s *ListMgsApiResponseBodyResultContentValue) SetApiInvoker(v *ListMgsApiResponseBodyResultContentValueApiInvoker) *ListMgsApiResponseBodyResultContentValue {
	s.ApiInvoker = v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetApiName(v string) *ListMgsApiResponseBodyResultContentValue {
	s.ApiName = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetApiStatus(v string) *ListMgsApiResponseBodyResultContentValue {
	s.ApiStatus = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetApiType(v string) *ListMgsApiResponseBodyResultContentValue {
	s.ApiType = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetAppId(v string) *ListMgsApiResponseBodyResultContentValue {
	s.AppId = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetAuthRuleName(v string) *ListMgsApiResponseBodyResultContentValue {
	s.AuthRuleName = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetCacheRule(v *ListMgsApiResponseBodyResultContentValueCacheRule) *ListMgsApiResponseBodyResultContentValue {
	s.CacheRule = v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetCharset(v string) *ListMgsApiResponseBodyResultContentValue {
	s.Charset = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetCircuitBreakerRule(v *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule) *ListMgsApiResponseBodyResultContentValue {
	s.CircuitBreakerRule = v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetContentType(v string) *ListMgsApiResponseBodyResultContentValue {
	s.ContentType = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetDescription(v string) *ListMgsApiResponseBodyResultContentValue {
	s.Description = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetGmtCreate(v string) *ListMgsApiResponseBodyResultContentValue {
	s.GmtCreate = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetGmtModified(v string) *ListMgsApiResponseBodyResultContentValue {
	s.GmtModified = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetHeaderRule(v []*ListMgsApiResponseBodyResultContentValueHeaderRule) *ListMgsApiResponseBodyResultContentValue {
	s.HeaderRule = v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetHeaderRules(v []*ListMgsApiResponseBodyResultContentValueHeaderRules) *ListMgsApiResponseBodyResultContentValue {
	s.HeaderRules = v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetHost(v string) *ListMgsApiResponseBodyResultContentValue {
	s.Host = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetId(v int64) *ListMgsApiResponseBodyResultContentValue {
	s.Id = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetInterfaceType(v string) *ListMgsApiResponseBodyResultContentValue {
	s.InterfaceType = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetLimitRule(v *ListMgsApiResponseBodyResultContentValueLimitRule) *ListMgsApiResponseBodyResultContentValue {
	s.LimitRule = v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetMethod(v string) *ListMgsApiResponseBodyResultContentValue {
	s.Method = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetMethodName(v string) *ListMgsApiResponseBodyResultContentValue {
	s.MethodName = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetMigrateRule(v *ListMgsApiResponseBodyResultContentValueMigrateRule) *ListMgsApiResponseBodyResultContentValue {
	s.MigrateRule = v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetMockRule(v *ListMgsApiResponseBodyResultContentValueMockRule) *ListMgsApiResponseBodyResultContentValue {
	s.MockRule = v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetNeedETag(v string) *ListMgsApiResponseBodyResultContentValue {
	s.NeedETag = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetNeedEncrypt(v string) *ListMgsApiResponseBodyResultContentValue {
	s.NeedEncrypt = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetNeedJsonp(v string) *ListMgsApiResponseBodyResultContentValue {
	s.NeedJsonp = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetNeedSign(v string) *ListMgsApiResponseBodyResultContentValue {
	s.NeedSign = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetOperationType(v string) *ListMgsApiResponseBodyResultContentValue {
	s.OperationType = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetParamGetMethod(v string) *ListMgsApiResponseBodyResultContentValue {
	s.ParamGetMethod = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetPath(v string) *ListMgsApiResponseBodyResultContentValue {
	s.Path = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetRequestBodyModel(v string) *ListMgsApiResponseBodyResultContentValue {
	s.RequestBodyModel = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetRequestParams(v []*ListMgsApiResponseBodyResultContentValueRequestParams) *ListMgsApiResponseBodyResultContentValue {
	s.RequestParams = v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetResponseBodyModel(v string) *ListMgsApiResponseBodyResultContentValue {
	s.ResponseBodyModel = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetSysId(v int64) *ListMgsApiResponseBodyResultContentValue {
	s.SysId = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetSysName(v string) *ListMgsApiResponseBodyResultContentValue {
	s.SysName = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetTimeout(v string) *ListMgsApiResponseBodyResultContentValue {
	s.Timeout = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValue) SetWorkspaceId(v string) *ListMgsApiResponseBodyResultContentValue {
	s.WorkspaceId = &v
	return s
}

type ListMgsApiResponseBodyResultContentValueApiInvoker struct {
	HttpInvoker *ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker `json:"HttpInvoker,omitempty" xml:"HttpInvoker,omitempty" type:"Struct"`
	RpcInvoker  *string                                                        `json:"RpcInvoker,omitempty" xml:"RpcInvoker,omitempty"`
}

func (s ListMgsApiResponseBodyResultContentValueApiInvoker) String() string {
	return tea.Prettify(s)
}

func (s ListMgsApiResponseBodyResultContentValueApiInvoker) GoString() string {
	return s.String()
}

func (s *ListMgsApiResponseBodyResultContentValueApiInvoker) SetHttpInvoker(v *ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker) *ListMgsApiResponseBodyResultContentValueApiInvoker {
	s.HttpInvoker = v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueApiInvoker) SetRpcInvoker(v string) *ListMgsApiResponseBodyResultContentValueApiInvoker {
	s.RpcInvoker = &v
	return s
}

type ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker struct {
	Charset     *string `json:"Charset,omitempty" xml:"Charset,omitempty"`
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	Host        *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Method      *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Path        *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker) String() string {
	return tea.Prettify(s)
}

func (s ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker) GoString() string {
	return s.String()
}

func (s *ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker) SetCharset(v string) *ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker {
	s.Charset = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker) SetContentType(v string) *ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker {
	s.ContentType = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker) SetHost(v string) *ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker {
	s.Host = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker) SetMethod(v string) *ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker {
	s.Method = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker) SetPath(v string) *ListMgsApiResponseBodyResultContentValueApiInvokerHttpInvoker {
	s.Path = &v
	return s
}

type ListMgsApiResponseBodyResultContentValueCacheRule struct {
	CacheKey  *string `json:"CacheKey,omitempty" xml:"CacheKey,omitempty"`
	NeedCache *bool   `json:"NeedCache,omitempty" xml:"NeedCache,omitempty"`
	Ttl       *int64  `json:"Ttl,omitempty" xml:"Ttl,omitempty"`
}

func (s ListMgsApiResponseBodyResultContentValueCacheRule) String() string {
	return tea.Prettify(s)
}

func (s ListMgsApiResponseBodyResultContentValueCacheRule) GoString() string {
	return s.String()
}

func (s *ListMgsApiResponseBodyResultContentValueCacheRule) SetCacheKey(v string) *ListMgsApiResponseBodyResultContentValueCacheRule {
	s.CacheKey = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueCacheRule) SetNeedCache(v bool) *ListMgsApiResponseBodyResultContentValueCacheRule {
	s.NeedCache = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueCacheRule) SetTtl(v int64) *ListMgsApiResponseBodyResultContentValueCacheRule {
	s.Ttl = &v
	return s
}

type ListMgsApiResponseBodyResultContentValueCircuitBreakerRule struct {
	AppId              *string  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DefaultResponse    *string  `json:"DefaultResponse,omitempty" xml:"DefaultResponse,omitempty"`
	ErrorThreshold     *int64   `json:"ErrorThreshold,omitempty" xml:"ErrorThreshold,omitempty"`
	Id                 *int64   `json:"Id,omitempty" xml:"Id,omitempty"`
	Model              *string  `json:"Model,omitempty" xml:"Model,omitempty"`
	OpenTimeoutSeconds *int64   `json:"OpenTimeoutSeconds,omitempty" xml:"OpenTimeoutSeconds,omitempty"`
	SlowRatioThreshold *float64 `json:"SlowRatioThreshold,omitempty" xml:"SlowRatioThreshold,omitempty"`
	SwitchStatus       *string  `json:"SwitchStatus,omitempty" xml:"SwitchStatus,omitempty"`
	WindowsInSeconds   *int64   `json:"WindowsInSeconds,omitempty" xml:"WindowsInSeconds,omitempty"`
	WorkspaceId        *string  `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListMgsApiResponseBodyResultContentValueCircuitBreakerRule) String() string {
	return tea.Prettify(s)
}

func (s ListMgsApiResponseBodyResultContentValueCircuitBreakerRule) GoString() string {
	return s.String()
}

func (s *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule) SetAppId(v string) *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule {
	s.AppId = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule) SetDefaultResponse(v string) *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule {
	s.DefaultResponse = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule) SetErrorThreshold(v int64) *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule {
	s.ErrorThreshold = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule) SetId(v int64) *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule {
	s.Id = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule) SetModel(v string) *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule {
	s.Model = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule) SetOpenTimeoutSeconds(v int64) *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule {
	s.OpenTimeoutSeconds = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule) SetSlowRatioThreshold(v float64) *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule {
	s.SlowRatioThreshold = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule) SetSwitchStatus(v string) *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule {
	s.SwitchStatus = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule) SetWindowsInSeconds(v int64) *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule {
	s.WindowsInSeconds = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule) SetWorkspaceId(v string) *ListMgsApiResponseBodyResultContentValueCircuitBreakerRule {
	s.WorkspaceId = &v
	return s
}

type ListMgsApiResponseBodyResultContentValueHeaderRule struct {
	HeaderKey *string `json:"HeaderKey,omitempty" xml:"HeaderKey,omitempty"`
	Location  *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Value     *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListMgsApiResponseBodyResultContentValueHeaderRule) String() string {
	return tea.Prettify(s)
}

func (s ListMgsApiResponseBodyResultContentValueHeaderRule) GoString() string {
	return s.String()
}

func (s *ListMgsApiResponseBodyResultContentValueHeaderRule) SetHeaderKey(v string) *ListMgsApiResponseBodyResultContentValueHeaderRule {
	s.HeaderKey = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueHeaderRule) SetLocation(v string) *ListMgsApiResponseBodyResultContentValueHeaderRule {
	s.Location = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueHeaderRule) SetType(v string) *ListMgsApiResponseBodyResultContentValueHeaderRule {
	s.Type = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueHeaderRule) SetValue(v string) *ListMgsApiResponseBodyResultContentValueHeaderRule {
	s.Value = &v
	return s
}

type ListMgsApiResponseBodyResultContentValueHeaderRules struct {
	HeaderKey *string `json:"HeaderKey,omitempty" xml:"HeaderKey,omitempty"`
	Location  *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Value     *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListMgsApiResponseBodyResultContentValueHeaderRules) String() string {
	return tea.Prettify(s)
}

func (s ListMgsApiResponseBodyResultContentValueHeaderRules) GoString() string {
	return s.String()
}

func (s *ListMgsApiResponseBodyResultContentValueHeaderRules) SetHeaderKey(v string) *ListMgsApiResponseBodyResultContentValueHeaderRules {
	s.HeaderKey = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueHeaderRules) SetLocation(v string) *ListMgsApiResponseBodyResultContentValueHeaderRules {
	s.Location = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueHeaderRules) SetType(v string) *ListMgsApiResponseBodyResultContentValueHeaderRules {
	s.Type = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueHeaderRules) SetValue(v string) *ListMgsApiResponseBodyResultContentValueHeaderRules {
	s.Value = &v
	return s
}

type ListMgsApiResponseBodyResultContentValueLimitRule struct {
	DefaultResponse *string `json:"DefaultResponse,omitempty" xml:"DefaultResponse,omitempty"`
	I18nResponse    *string `json:"I18nResponse,omitempty" xml:"I18nResponse,omitempty"`
	Interval        *int64  `json:"Interval,omitempty" xml:"Interval,omitempty"`
	Limit           *int64  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	Mode            *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s ListMgsApiResponseBodyResultContentValueLimitRule) String() string {
	return tea.Prettify(s)
}

func (s ListMgsApiResponseBodyResultContentValueLimitRule) GoString() string {
	return s.String()
}

func (s *ListMgsApiResponseBodyResultContentValueLimitRule) SetDefaultResponse(v string) *ListMgsApiResponseBodyResultContentValueLimitRule {
	s.DefaultResponse = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueLimitRule) SetI18nResponse(v string) *ListMgsApiResponseBodyResultContentValueLimitRule {
	s.I18nResponse = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueLimitRule) SetInterval(v int64) *ListMgsApiResponseBodyResultContentValueLimitRule {
	s.Interval = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueLimitRule) SetLimit(v int64) *ListMgsApiResponseBodyResultContentValueLimitRule {
	s.Limit = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueLimitRule) SetMode(v string) *ListMgsApiResponseBodyResultContentValueLimitRule {
	s.Mode = &v
	return s
}

type ListMgsApiResponseBodyResultContentValueMigrateRule struct {
	FlowPercent          *int64  `json:"FlowPercent,omitempty" xml:"FlowPercent,omitempty"`
	NeedMigrate          *bool   `json:"NeedMigrate,omitempty" xml:"NeedMigrate,omitempty"`
	NeedSwitchCompletely *bool   `json:"NeedSwitchCompletely,omitempty" xml:"NeedSwitchCompletely,omitempty"`
	SysId                *int64  `json:"SysId,omitempty" xml:"SysId,omitempty"`
	SysName              *string `json:"SysName,omitempty" xml:"SysName,omitempty"`
	UpstreamType         *string `json:"UpstreamType,omitempty" xml:"UpstreamType,omitempty"`
}

func (s ListMgsApiResponseBodyResultContentValueMigrateRule) String() string {
	return tea.Prettify(s)
}

func (s ListMgsApiResponseBodyResultContentValueMigrateRule) GoString() string {
	return s.String()
}

func (s *ListMgsApiResponseBodyResultContentValueMigrateRule) SetFlowPercent(v int64) *ListMgsApiResponseBodyResultContentValueMigrateRule {
	s.FlowPercent = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueMigrateRule) SetNeedMigrate(v bool) *ListMgsApiResponseBodyResultContentValueMigrateRule {
	s.NeedMigrate = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueMigrateRule) SetNeedSwitchCompletely(v bool) *ListMgsApiResponseBodyResultContentValueMigrateRule {
	s.NeedSwitchCompletely = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueMigrateRule) SetSysId(v int64) *ListMgsApiResponseBodyResultContentValueMigrateRule {
	s.SysId = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueMigrateRule) SetSysName(v string) *ListMgsApiResponseBodyResultContentValueMigrateRule {
	s.SysName = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueMigrateRule) SetUpstreamType(v string) *ListMgsApiResponseBodyResultContentValueMigrateRule {
	s.UpstreamType = &v
	return s
}

type ListMgsApiResponseBodyResultContentValueMockRule struct {
	MockData   *string `json:"MockData,omitempty" xml:"MockData,omitempty"`
	NeedMock   *bool   `json:"NeedMock,omitempty" xml:"NeedMock,omitempty"`
	Percentage *int64  `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListMgsApiResponseBodyResultContentValueMockRule) String() string {
	return tea.Prettify(s)
}

func (s ListMgsApiResponseBodyResultContentValueMockRule) GoString() string {
	return s.String()
}

func (s *ListMgsApiResponseBodyResultContentValueMockRule) SetMockData(v string) *ListMgsApiResponseBodyResultContentValueMockRule {
	s.MockData = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueMockRule) SetNeedMock(v bool) *ListMgsApiResponseBodyResultContentValueMockRule {
	s.NeedMock = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueMockRule) SetPercentage(v int64) *ListMgsApiResponseBodyResultContentValueMockRule {
	s.Percentage = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueMockRule) SetType(v string) *ListMgsApiResponseBodyResultContentValueMockRule {
	s.Type = &v
	return s
}

type ListMgsApiResponseBodyResultContentValueRequestParams struct {
	ApiId        *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	AppId        *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DefaultValue *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Location     *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RefType      *string `json:"RefType,omitempty" xml:"RefType,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
	WorkspaceId  *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListMgsApiResponseBodyResultContentValueRequestParams) String() string {
	return tea.Prettify(s)
}

func (s ListMgsApiResponseBodyResultContentValueRequestParams) GoString() string {
	return s.String()
}

func (s *ListMgsApiResponseBodyResultContentValueRequestParams) SetApiId(v string) *ListMgsApiResponseBodyResultContentValueRequestParams {
	s.ApiId = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueRequestParams) SetAppId(v string) *ListMgsApiResponseBodyResultContentValueRequestParams {
	s.AppId = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueRequestParams) SetDefaultValue(v string) *ListMgsApiResponseBodyResultContentValueRequestParams {
	s.DefaultValue = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueRequestParams) SetDescription(v string) *ListMgsApiResponseBodyResultContentValueRequestParams {
	s.Description = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueRequestParams) SetId(v int64) *ListMgsApiResponseBodyResultContentValueRequestParams {
	s.Id = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueRequestParams) SetLocation(v string) *ListMgsApiResponseBodyResultContentValueRequestParams {
	s.Location = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueRequestParams) SetName(v string) *ListMgsApiResponseBodyResultContentValueRequestParams {
	s.Name = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueRequestParams) SetRefType(v string) *ListMgsApiResponseBodyResultContentValueRequestParams {
	s.RefType = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueRequestParams) SetType(v string) *ListMgsApiResponseBodyResultContentValueRequestParams {
	s.Type = &v
	return s
}

func (s *ListMgsApiResponseBodyResultContentValueRequestParams) SetWorkspaceId(v string) *ListMgsApiResponseBodyResultContentValueRequestParams {
	s.WorkspaceId = &v
	return s
}

type ListMgsApiResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMgsApiResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMgsApiResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMgsApiResponse) GoString() string {
	return s.String()
}

func (s *ListMgsApiResponse) SetHeaders(v map[string]*string) *ListMgsApiResponse {
	s.Headers = v
	return s
}

func (s *ListMgsApiResponse) SetStatusCode(v int32) *ListMgsApiResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMgsApiResponse) SetBody(v *ListMgsApiResponseBody) *ListMgsApiResponse {
	s.Body = v
	return s
}

type LogMsaQueryRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OnexFlag    *string `json:"OnexFlag,omitempty" xml:"OnexFlag,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s LogMsaQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s LogMsaQueryRequest) GoString() string {
	return s.String()
}

func (s *LogMsaQueryRequest) SetAppId(v string) *LogMsaQueryRequest {
	s.AppId = &v
	return s
}

func (s *LogMsaQueryRequest) SetId(v string) *LogMsaQueryRequest {
	s.Id = &v
	return s
}

func (s *LogMsaQueryRequest) SetOnexFlag(v string) *LogMsaQueryRequest {
	s.OnexFlag = &v
	return s
}

func (s *LogMsaQueryRequest) SetTenantId(v string) *LogMsaQueryRequest {
	s.TenantId = &v
	return s
}

func (s *LogMsaQueryRequest) SetWorkspaceId(v string) *LogMsaQueryRequest {
	s.WorkspaceId = &v
	return s
}

type LogMsaQueryResponseBody struct {
	RequestId     *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                               `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *LogMsaQueryResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                               `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s LogMsaQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LogMsaQueryResponseBody) GoString() string {
	return s.String()
}

func (s *LogMsaQueryResponseBody) SetRequestId(v string) *LogMsaQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *LogMsaQueryResponseBody) SetResultCode(v string) *LogMsaQueryResponseBody {
	s.ResultCode = &v
	return s
}

func (s *LogMsaQueryResponseBody) SetResultContent(v *LogMsaQueryResponseBodyResultContent) *LogMsaQueryResponseBody {
	s.ResultContent = v
	return s
}

func (s *LogMsaQueryResponseBody) SetResultMessage(v string) *LogMsaQueryResponseBody {
	s.ResultMessage = &v
	return s
}

type LogMsaQueryResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s LogMsaQueryResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s LogMsaQueryResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *LogMsaQueryResponseBodyResultContent) SetCode(v string) *LogMsaQueryResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *LogMsaQueryResponseBodyResultContent) SetData(v string) *LogMsaQueryResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *LogMsaQueryResponseBodyResultContent) SetMessage(v string) *LogMsaQueryResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *LogMsaQueryResponseBodyResultContent) SetSuccess(v bool) *LogMsaQueryResponseBodyResultContent {
	s.Success = &v
	return s
}

type LogMsaQueryResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *LogMsaQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s LogMsaQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s LogMsaQueryResponse) GoString() string {
	return s.String()
}

func (s *LogMsaQueryResponse) SetHeaders(v map[string]*string) *LogMsaQueryResponse {
	s.Headers = v
	return s
}

func (s *LogMsaQueryResponse) SetStatusCode(v int32) *LogMsaQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *LogMsaQueryResponse) SetBody(v *LogMsaQueryResponseBody) *LogMsaQueryResponse {
	s.Body = v
	return s
}

type MTRSOCRServiceRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ImageRaw    *string `json:"ImageRaw,omitempty" xml:"ImageRaw,omitempty"`
	Mask        *bool   `json:"Mask,omitempty" xml:"Mask,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s MTRSOCRServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s MTRSOCRServiceRequest) GoString() string {
	return s.String()
}

func (s *MTRSOCRServiceRequest) SetAppId(v string) *MTRSOCRServiceRequest {
	s.AppId = &v
	return s
}

func (s *MTRSOCRServiceRequest) SetImageRaw(v string) *MTRSOCRServiceRequest {
	s.ImageRaw = &v
	return s
}

func (s *MTRSOCRServiceRequest) SetMask(v bool) *MTRSOCRServiceRequest {
	s.Mask = &v
	return s
}

func (s *MTRSOCRServiceRequest) SetTenantId(v string) *MTRSOCRServiceRequest {
	s.TenantId = &v
	return s
}

func (s *MTRSOCRServiceRequest) SetType(v string) *MTRSOCRServiceRequest {
	s.Type = &v
	return s
}

func (s *MTRSOCRServiceRequest) SetWorkspaceId(v string) *MTRSOCRServiceRequest {
	s.WorkspaceId = &v
	return s
}

type MTRSOCRServiceResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Msg       *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Status    *bool   `json:"Status,omitempty" xml:"Status,omitempty"`
	TraceId   *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s MTRSOCRServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MTRSOCRServiceResponseBody) GoString() string {
	return s.String()
}

func (s *MTRSOCRServiceResponseBody) SetCode(v string) *MTRSOCRServiceResponseBody {
	s.Code = &v
	return s
}

func (s *MTRSOCRServiceResponseBody) SetMsg(v string) *MTRSOCRServiceResponseBody {
	s.Msg = &v
	return s
}

func (s *MTRSOCRServiceResponseBody) SetRequestId(v string) *MTRSOCRServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *MTRSOCRServiceResponseBody) SetResult(v string) *MTRSOCRServiceResponseBody {
	s.Result = &v
	return s
}

func (s *MTRSOCRServiceResponseBody) SetStatus(v bool) *MTRSOCRServiceResponseBody {
	s.Status = &v
	return s
}

func (s *MTRSOCRServiceResponseBody) SetTraceId(v string) *MTRSOCRServiceResponseBody {
	s.TraceId = &v
	return s
}

type MTRSOCRServiceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *MTRSOCRServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s MTRSOCRServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s MTRSOCRServiceResponse) GoString() string {
	return s.String()
}

func (s *MTRSOCRServiceResponse) SetHeaders(v map[string]*string) *MTRSOCRServiceResponse {
	s.Headers = v
	return s
}

func (s *MTRSOCRServiceResponse) SetStatusCode(v int32) *MTRSOCRServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *MTRSOCRServiceResponse) SetBody(v *MTRSOCRServiceResponseBody) *MTRSOCRServiceResponse {
	s.Body = v
	return s
}

type OpenApiAddActiveCodeRequest struct {
	AppId                                   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMqcpOpenApiAddActiveCodeReqJsonStr *string `json:"MpaasMqcpOpenApiAddActiveCodeReqJsonStr,omitempty" xml:"MpaasMqcpOpenApiAddActiveCodeReqJsonStr,omitempty"`
	TenantId                                *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                             *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s OpenApiAddActiveCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenApiAddActiveCodeRequest) GoString() string {
	return s.String()
}

func (s *OpenApiAddActiveCodeRequest) SetAppId(v string) *OpenApiAddActiveCodeRequest {
	s.AppId = &v
	return s
}

func (s *OpenApiAddActiveCodeRequest) SetMpaasMqcpOpenApiAddActiveCodeReqJsonStr(v string) *OpenApiAddActiveCodeRequest {
	s.MpaasMqcpOpenApiAddActiveCodeReqJsonStr = &v
	return s
}

func (s *OpenApiAddActiveCodeRequest) SetTenantId(v string) *OpenApiAddActiveCodeRequest {
	s.TenantId = &v
	return s
}

func (s *OpenApiAddActiveCodeRequest) SetWorkspaceId(v string) *OpenApiAddActiveCodeRequest {
	s.WorkspaceId = &v
	return s
}

type OpenApiAddActiveCodeResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *string `json:"ResultContent,omitempty" xml:"ResultContent,omitempty"`
}

func (s OpenApiAddActiveCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenApiAddActiveCodeResponseBody) GoString() string {
	return s.String()
}

func (s *OpenApiAddActiveCodeResponseBody) SetRequestId(v string) *OpenApiAddActiveCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *OpenApiAddActiveCodeResponseBody) SetResultCode(v string) *OpenApiAddActiveCodeResponseBody {
	s.ResultCode = &v
	return s
}

func (s *OpenApiAddActiveCodeResponseBody) SetResultContent(v string) *OpenApiAddActiveCodeResponseBody {
	s.ResultContent = &v
	return s
}

type OpenApiAddActiveCodeResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OpenApiAddActiveCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OpenApiAddActiveCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenApiAddActiveCodeResponse) GoString() string {
	return s.String()
}

func (s *OpenApiAddActiveCodeResponse) SetHeaders(v map[string]*string) *OpenApiAddActiveCodeResponse {
	s.Headers = v
	return s
}

func (s *OpenApiAddActiveCodeResponse) SetStatusCode(v int32) *OpenApiAddActiveCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenApiAddActiveCodeResponse) SetBody(v *OpenApiAddActiveCodeResponseBody) *OpenApiAddActiveCodeResponse {
	s.Body = v
	return s
}

type OpenApiAddActiveSceneRequest struct {
	AppId                                    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMqcpOpenApiAddActiveSceneReqJsonStr *string `json:"MpaasMqcpOpenApiAddActiveSceneReqJsonStr,omitempty" xml:"MpaasMqcpOpenApiAddActiveSceneReqJsonStr,omitempty"`
	TenantId                                 *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                              *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s OpenApiAddActiveSceneRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenApiAddActiveSceneRequest) GoString() string {
	return s.String()
}

func (s *OpenApiAddActiveSceneRequest) SetAppId(v string) *OpenApiAddActiveSceneRequest {
	s.AppId = &v
	return s
}

func (s *OpenApiAddActiveSceneRequest) SetMpaasMqcpOpenApiAddActiveSceneReqJsonStr(v string) *OpenApiAddActiveSceneRequest {
	s.MpaasMqcpOpenApiAddActiveSceneReqJsonStr = &v
	return s
}

func (s *OpenApiAddActiveSceneRequest) SetTenantId(v string) *OpenApiAddActiveSceneRequest {
	s.TenantId = &v
	return s
}

func (s *OpenApiAddActiveSceneRequest) SetWorkspaceId(v string) *OpenApiAddActiveSceneRequest {
	s.WorkspaceId = &v
	return s
}

type OpenApiAddActiveSceneResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *string `json:"ResultContent,omitempty" xml:"ResultContent,omitempty"`
}

func (s OpenApiAddActiveSceneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenApiAddActiveSceneResponseBody) GoString() string {
	return s.String()
}

func (s *OpenApiAddActiveSceneResponseBody) SetRequestId(v string) *OpenApiAddActiveSceneResponseBody {
	s.RequestId = &v
	return s
}

func (s *OpenApiAddActiveSceneResponseBody) SetResultCode(v string) *OpenApiAddActiveSceneResponseBody {
	s.ResultCode = &v
	return s
}

func (s *OpenApiAddActiveSceneResponseBody) SetResultContent(v string) *OpenApiAddActiveSceneResponseBody {
	s.ResultContent = &v
	return s
}

type OpenApiAddActiveSceneResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OpenApiAddActiveSceneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OpenApiAddActiveSceneResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenApiAddActiveSceneResponse) GoString() string {
	return s.String()
}

func (s *OpenApiAddActiveSceneResponse) SetHeaders(v map[string]*string) *OpenApiAddActiveSceneResponse {
	s.Headers = v
	return s
}

func (s *OpenApiAddActiveSceneResponse) SetStatusCode(v int32) *OpenApiAddActiveSceneResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenApiAddActiveSceneResponse) SetBody(v *OpenApiAddActiveSceneResponseBody) *OpenApiAddActiveSceneResponse {
	s.Body = v
	return s
}

type OpenApiCallbackRequest struct {
	AppId                                  *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMqcpOpenApiCallbackRequestJsonStr *string `json:"MpaasMqcpOpenApiCallbackRequestJsonStr,omitempty" xml:"MpaasMqcpOpenApiCallbackRequestJsonStr,omitempty"`
	TenantId                               *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                            *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s OpenApiCallbackRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenApiCallbackRequest) GoString() string {
	return s.String()
}

func (s *OpenApiCallbackRequest) SetAppId(v string) *OpenApiCallbackRequest {
	s.AppId = &v
	return s
}

func (s *OpenApiCallbackRequest) SetMpaasMqcpOpenApiCallbackRequestJsonStr(v string) *OpenApiCallbackRequest {
	s.MpaasMqcpOpenApiCallbackRequestJsonStr = &v
	return s
}

func (s *OpenApiCallbackRequest) SetTenantId(v string) *OpenApiCallbackRequest {
	s.TenantId = &v
	return s
}

func (s *OpenApiCallbackRequest) SetWorkspaceId(v string) *OpenApiCallbackRequest {
	s.WorkspaceId = &v
	return s
}

type OpenApiCallbackResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *string `json:"ResultContent,omitempty" xml:"ResultContent,omitempty"`
}

func (s OpenApiCallbackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenApiCallbackResponseBody) GoString() string {
	return s.String()
}

func (s *OpenApiCallbackResponseBody) SetRequestId(v string) *OpenApiCallbackResponseBody {
	s.RequestId = &v
	return s
}

func (s *OpenApiCallbackResponseBody) SetResultCode(v string) *OpenApiCallbackResponseBody {
	s.ResultCode = &v
	return s
}

func (s *OpenApiCallbackResponseBody) SetResultContent(v string) *OpenApiCallbackResponseBody {
	s.ResultContent = &v
	return s
}

type OpenApiCallbackResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OpenApiCallbackResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OpenApiCallbackResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenApiCallbackResponse) GoString() string {
	return s.String()
}

func (s *OpenApiCallbackResponse) SetHeaders(v map[string]*string) *OpenApiCallbackResponse {
	s.Headers = v
	return s
}

func (s *OpenApiCallbackResponse) SetStatusCode(v int32) *OpenApiCallbackResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenApiCallbackResponse) SetBody(v *OpenApiCallbackResponseBody) *OpenApiCallbackResponse {
	s.Body = v
	return s
}

type OpenApiDecodeRequest struct {
	AppId                                *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMqcpOpenApiDecodeRequestJsonStr *string `json:"MpaasMqcpOpenApiDecodeRequestJsonStr,omitempty" xml:"MpaasMqcpOpenApiDecodeRequestJsonStr,omitempty"`
	TenantId                             *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                          *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s OpenApiDecodeRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenApiDecodeRequest) GoString() string {
	return s.String()
}

func (s *OpenApiDecodeRequest) SetAppId(v string) *OpenApiDecodeRequest {
	s.AppId = &v
	return s
}

func (s *OpenApiDecodeRequest) SetMpaasMqcpOpenApiDecodeRequestJsonStr(v string) *OpenApiDecodeRequest {
	s.MpaasMqcpOpenApiDecodeRequestJsonStr = &v
	return s
}

func (s *OpenApiDecodeRequest) SetTenantId(v string) *OpenApiDecodeRequest {
	s.TenantId = &v
	return s
}

func (s *OpenApiDecodeRequest) SetWorkspaceId(v string) *OpenApiDecodeRequest {
	s.WorkspaceId = &v
	return s
}

type OpenApiDecodeResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *string `json:"ResultContent,omitempty" xml:"ResultContent,omitempty"`
}

func (s OpenApiDecodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenApiDecodeResponseBody) GoString() string {
	return s.String()
}

func (s *OpenApiDecodeResponseBody) SetRequestId(v string) *OpenApiDecodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *OpenApiDecodeResponseBody) SetResultCode(v string) *OpenApiDecodeResponseBody {
	s.ResultCode = &v
	return s
}

func (s *OpenApiDecodeResponseBody) SetResultContent(v string) *OpenApiDecodeResponseBody {
	s.ResultContent = &v
	return s
}

type OpenApiDecodeResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OpenApiDecodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OpenApiDecodeResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenApiDecodeResponse) GoString() string {
	return s.String()
}

func (s *OpenApiDecodeResponse) SetHeaders(v map[string]*string) *OpenApiDecodeResponse {
	s.Headers = v
	return s
}

func (s *OpenApiDecodeResponse) SetStatusCode(v int32) *OpenApiDecodeResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenApiDecodeResponse) SetBody(v *OpenApiDecodeResponseBody) *OpenApiDecodeResponse {
	s.Body = v
	return s
}

type OpenApiDeleteActiveCodeRequest struct {
	AppId                                      *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMqcpOpenApiDeleteActiveCodeReqJsonStr *string `json:"MpaasMqcpOpenApiDeleteActiveCodeReqJsonStr,omitempty" xml:"MpaasMqcpOpenApiDeleteActiveCodeReqJsonStr,omitempty"`
	TenantId                                   *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                                *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s OpenApiDeleteActiveCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenApiDeleteActiveCodeRequest) GoString() string {
	return s.String()
}

func (s *OpenApiDeleteActiveCodeRequest) SetAppId(v string) *OpenApiDeleteActiveCodeRequest {
	s.AppId = &v
	return s
}

func (s *OpenApiDeleteActiveCodeRequest) SetMpaasMqcpOpenApiDeleteActiveCodeReqJsonStr(v string) *OpenApiDeleteActiveCodeRequest {
	s.MpaasMqcpOpenApiDeleteActiveCodeReqJsonStr = &v
	return s
}

func (s *OpenApiDeleteActiveCodeRequest) SetTenantId(v string) *OpenApiDeleteActiveCodeRequest {
	s.TenantId = &v
	return s
}

func (s *OpenApiDeleteActiveCodeRequest) SetWorkspaceId(v string) *OpenApiDeleteActiveCodeRequest {
	s.WorkspaceId = &v
	return s
}

type OpenApiDeleteActiveCodeResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *string `json:"ResultContent,omitempty" xml:"ResultContent,omitempty"`
}

func (s OpenApiDeleteActiveCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenApiDeleteActiveCodeResponseBody) GoString() string {
	return s.String()
}

func (s *OpenApiDeleteActiveCodeResponseBody) SetRequestId(v string) *OpenApiDeleteActiveCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *OpenApiDeleteActiveCodeResponseBody) SetResultCode(v string) *OpenApiDeleteActiveCodeResponseBody {
	s.ResultCode = &v
	return s
}

func (s *OpenApiDeleteActiveCodeResponseBody) SetResultContent(v string) *OpenApiDeleteActiveCodeResponseBody {
	s.ResultContent = &v
	return s
}

type OpenApiDeleteActiveCodeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OpenApiDeleteActiveCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OpenApiDeleteActiveCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenApiDeleteActiveCodeResponse) GoString() string {
	return s.String()
}

func (s *OpenApiDeleteActiveCodeResponse) SetHeaders(v map[string]*string) *OpenApiDeleteActiveCodeResponse {
	s.Headers = v
	return s
}

func (s *OpenApiDeleteActiveCodeResponse) SetStatusCode(v int32) *OpenApiDeleteActiveCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenApiDeleteActiveCodeResponse) SetBody(v *OpenApiDeleteActiveCodeResponseBody) *OpenApiDeleteActiveCodeResponse {
	s.Body = v
	return s
}

type OpenApiEncodeRequest struct {
	AppId                                *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMqcpOpenApiEncodeRequestJsonStr *string `json:"MpaasMqcpOpenApiEncodeRequestJsonStr,omitempty" xml:"MpaasMqcpOpenApiEncodeRequestJsonStr,omitempty"`
	TenantId                             *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                          *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s OpenApiEncodeRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenApiEncodeRequest) GoString() string {
	return s.String()
}

func (s *OpenApiEncodeRequest) SetAppId(v string) *OpenApiEncodeRequest {
	s.AppId = &v
	return s
}

func (s *OpenApiEncodeRequest) SetMpaasMqcpOpenApiEncodeRequestJsonStr(v string) *OpenApiEncodeRequest {
	s.MpaasMqcpOpenApiEncodeRequestJsonStr = &v
	return s
}

func (s *OpenApiEncodeRequest) SetTenantId(v string) *OpenApiEncodeRequest {
	s.TenantId = &v
	return s
}

func (s *OpenApiEncodeRequest) SetWorkspaceId(v string) *OpenApiEncodeRequest {
	s.WorkspaceId = &v
	return s
}

type OpenApiEncodeResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *string `json:"ResultContent,omitempty" xml:"ResultContent,omitempty"`
}

func (s OpenApiEncodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenApiEncodeResponseBody) GoString() string {
	return s.String()
}

func (s *OpenApiEncodeResponseBody) SetRequestId(v string) *OpenApiEncodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *OpenApiEncodeResponseBody) SetResultCode(v string) *OpenApiEncodeResponseBody {
	s.ResultCode = &v
	return s
}

func (s *OpenApiEncodeResponseBody) SetResultContent(v string) *OpenApiEncodeResponseBody {
	s.ResultContent = &v
	return s
}

type OpenApiEncodeResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OpenApiEncodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OpenApiEncodeResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenApiEncodeResponse) GoString() string {
	return s.String()
}

func (s *OpenApiEncodeResponse) SetHeaders(v map[string]*string) *OpenApiEncodeResponse {
	s.Headers = v
	return s
}

func (s *OpenApiEncodeResponse) SetStatusCode(v int32) *OpenApiEncodeResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenApiEncodeResponse) SetBody(v *OpenApiEncodeResponseBody) *OpenApiEncodeResponse {
	s.Body = v
	return s
}

type OpenApiQueryActiveCodeRequest struct {
	AppId                                     *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMqcpOpenApiQueryActiveCodeReqJsonStr *string `json:"MpaasMqcpOpenApiQueryActiveCodeReqJsonStr,omitempty" xml:"MpaasMqcpOpenApiQueryActiveCodeReqJsonStr,omitempty"`
	TenantId                                  *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                               *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s OpenApiQueryActiveCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenApiQueryActiveCodeRequest) GoString() string {
	return s.String()
}

func (s *OpenApiQueryActiveCodeRequest) SetAppId(v string) *OpenApiQueryActiveCodeRequest {
	s.AppId = &v
	return s
}

func (s *OpenApiQueryActiveCodeRequest) SetMpaasMqcpOpenApiQueryActiveCodeReqJsonStr(v string) *OpenApiQueryActiveCodeRequest {
	s.MpaasMqcpOpenApiQueryActiveCodeReqJsonStr = &v
	return s
}

func (s *OpenApiQueryActiveCodeRequest) SetTenantId(v string) *OpenApiQueryActiveCodeRequest {
	s.TenantId = &v
	return s
}

func (s *OpenApiQueryActiveCodeRequest) SetWorkspaceId(v string) *OpenApiQueryActiveCodeRequest {
	s.WorkspaceId = &v
	return s
}

type OpenApiQueryActiveCodeResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *string `json:"ResultContent,omitempty" xml:"ResultContent,omitempty"`
	ResultMessage *string `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s OpenApiQueryActiveCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenApiQueryActiveCodeResponseBody) GoString() string {
	return s.String()
}

func (s *OpenApiQueryActiveCodeResponseBody) SetRequestId(v string) *OpenApiQueryActiveCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *OpenApiQueryActiveCodeResponseBody) SetResultCode(v string) *OpenApiQueryActiveCodeResponseBody {
	s.ResultCode = &v
	return s
}

func (s *OpenApiQueryActiveCodeResponseBody) SetResultContent(v string) *OpenApiQueryActiveCodeResponseBody {
	s.ResultContent = &v
	return s
}

func (s *OpenApiQueryActiveCodeResponseBody) SetResultMessage(v string) *OpenApiQueryActiveCodeResponseBody {
	s.ResultMessage = &v
	return s
}

type OpenApiQueryActiveCodeResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OpenApiQueryActiveCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OpenApiQueryActiveCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenApiQueryActiveCodeResponse) GoString() string {
	return s.String()
}

func (s *OpenApiQueryActiveCodeResponse) SetHeaders(v map[string]*string) *OpenApiQueryActiveCodeResponse {
	s.Headers = v
	return s
}

func (s *OpenApiQueryActiveCodeResponse) SetStatusCode(v int32) *OpenApiQueryActiveCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenApiQueryActiveCodeResponse) SetBody(v *OpenApiQueryActiveCodeResponseBody) *OpenApiQueryActiveCodeResponse {
	s.Body = v
	return s
}

type OpenApiQueryActiveSceneRequest struct {
	AppId                                      *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMqcpOpenApiQueryActiveSceneReqJsonStr *string `json:"MpaasMqcpOpenApiQueryActiveSceneReqJsonStr,omitempty" xml:"MpaasMqcpOpenApiQueryActiveSceneReqJsonStr,omitempty"`
	TenantId                                   *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                                *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s OpenApiQueryActiveSceneRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenApiQueryActiveSceneRequest) GoString() string {
	return s.String()
}

func (s *OpenApiQueryActiveSceneRequest) SetAppId(v string) *OpenApiQueryActiveSceneRequest {
	s.AppId = &v
	return s
}

func (s *OpenApiQueryActiveSceneRequest) SetMpaasMqcpOpenApiQueryActiveSceneReqJsonStr(v string) *OpenApiQueryActiveSceneRequest {
	s.MpaasMqcpOpenApiQueryActiveSceneReqJsonStr = &v
	return s
}

func (s *OpenApiQueryActiveSceneRequest) SetTenantId(v string) *OpenApiQueryActiveSceneRequest {
	s.TenantId = &v
	return s
}

func (s *OpenApiQueryActiveSceneRequest) SetWorkspaceId(v string) *OpenApiQueryActiveSceneRequest {
	s.WorkspaceId = &v
	return s
}

type OpenApiQueryActiveSceneResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *string `json:"ResultContent,omitempty" xml:"ResultContent,omitempty"`
}

func (s OpenApiQueryActiveSceneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenApiQueryActiveSceneResponseBody) GoString() string {
	return s.String()
}

func (s *OpenApiQueryActiveSceneResponseBody) SetRequestId(v string) *OpenApiQueryActiveSceneResponseBody {
	s.RequestId = &v
	return s
}

func (s *OpenApiQueryActiveSceneResponseBody) SetResultCode(v string) *OpenApiQueryActiveSceneResponseBody {
	s.ResultCode = &v
	return s
}

func (s *OpenApiQueryActiveSceneResponseBody) SetResultContent(v string) *OpenApiQueryActiveSceneResponseBody {
	s.ResultContent = &v
	return s
}

type OpenApiQueryActiveSceneResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OpenApiQueryActiveSceneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OpenApiQueryActiveSceneResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenApiQueryActiveSceneResponse) GoString() string {
	return s.String()
}

func (s *OpenApiQueryActiveSceneResponse) SetHeaders(v map[string]*string) *OpenApiQueryActiveSceneResponse {
	s.Headers = v
	return s
}

func (s *OpenApiQueryActiveSceneResponse) SetStatusCode(v int32) *OpenApiQueryActiveSceneResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenApiQueryActiveSceneResponse) SetBody(v *OpenApiQueryActiveSceneResponseBody) *OpenApiQueryActiveSceneResponse {
	s.Body = v
	return s
}

type OpenApiUniqueEncodeRequest struct {
	AppId                                      *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMqcpOpenApiUniqueEncodeRequestJsonStr *string `json:"MpaasMqcpOpenApiUniqueEncodeRequestJsonStr,omitempty" xml:"MpaasMqcpOpenApiUniqueEncodeRequestJsonStr,omitempty"`
	TenantId                                   *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                                *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s OpenApiUniqueEncodeRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenApiUniqueEncodeRequest) GoString() string {
	return s.String()
}

func (s *OpenApiUniqueEncodeRequest) SetAppId(v string) *OpenApiUniqueEncodeRequest {
	s.AppId = &v
	return s
}

func (s *OpenApiUniqueEncodeRequest) SetMpaasMqcpOpenApiUniqueEncodeRequestJsonStr(v string) *OpenApiUniqueEncodeRequest {
	s.MpaasMqcpOpenApiUniqueEncodeRequestJsonStr = &v
	return s
}

func (s *OpenApiUniqueEncodeRequest) SetTenantId(v string) *OpenApiUniqueEncodeRequest {
	s.TenantId = &v
	return s
}

func (s *OpenApiUniqueEncodeRequest) SetWorkspaceId(v string) *OpenApiUniqueEncodeRequest {
	s.WorkspaceId = &v
	return s
}

type OpenApiUniqueEncodeResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *string `json:"ResultContent,omitempty" xml:"ResultContent,omitempty"`
}

func (s OpenApiUniqueEncodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenApiUniqueEncodeResponseBody) GoString() string {
	return s.String()
}

func (s *OpenApiUniqueEncodeResponseBody) SetRequestId(v string) *OpenApiUniqueEncodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *OpenApiUniqueEncodeResponseBody) SetResultCode(v string) *OpenApiUniqueEncodeResponseBody {
	s.ResultCode = &v
	return s
}

func (s *OpenApiUniqueEncodeResponseBody) SetResultContent(v string) *OpenApiUniqueEncodeResponseBody {
	s.ResultContent = &v
	return s
}

type OpenApiUniqueEncodeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OpenApiUniqueEncodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OpenApiUniqueEncodeResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenApiUniqueEncodeResponse) GoString() string {
	return s.String()
}

func (s *OpenApiUniqueEncodeResponse) SetHeaders(v map[string]*string) *OpenApiUniqueEncodeResponse {
	s.Headers = v
	return s
}

func (s *OpenApiUniqueEncodeResponse) SetStatusCode(v int32) *OpenApiUniqueEncodeResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenApiUniqueEncodeResponse) SetBody(v *OpenApiUniqueEncodeResponseBody) *OpenApiUniqueEncodeResponse {
	s.Body = v
	return s
}

type OpenApiUpdateActiveCodeRequest struct {
	AppId                                      *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMqcpOpenApiUpdateActiveCodeReqJsonStr *string `json:"MpaasMqcpOpenApiUpdateActiveCodeReqJsonStr,omitempty" xml:"MpaasMqcpOpenApiUpdateActiveCodeReqJsonStr,omitempty"`
	TenantId                                   *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                                *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s OpenApiUpdateActiveCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenApiUpdateActiveCodeRequest) GoString() string {
	return s.String()
}

func (s *OpenApiUpdateActiveCodeRequest) SetAppId(v string) *OpenApiUpdateActiveCodeRequest {
	s.AppId = &v
	return s
}

func (s *OpenApiUpdateActiveCodeRequest) SetMpaasMqcpOpenApiUpdateActiveCodeReqJsonStr(v string) *OpenApiUpdateActiveCodeRequest {
	s.MpaasMqcpOpenApiUpdateActiveCodeReqJsonStr = &v
	return s
}

func (s *OpenApiUpdateActiveCodeRequest) SetTenantId(v string) *OpenApiUpdateActiveCodeRequest {
	s.TenantId = &v
	return s
}

func (s *OpenApiUpdateActiveCodeRequest) SetWorkspaceId(v string) *OpenApiUpdateActiveCodeRequest {
	s.WorkspaceId = &v
	return s
}

type OpenApiUpdateActiveCodeResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *string `json:"ResultContent,omitempty" xml:"ResultContent,omitempty"`
}

func (s OpenApiUpdateActiveCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenApiUpdateActiveCodeResponseBody) GoString() string {
	return s.String()
}

func (s *OpenApiUpdateActiveCodeResponseBody) SetRequestId(v string) *OpenApiUpdateActiveCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *OpenApiUpdateActiveCodeResponseBody) SetResultCode(v string) *OpenApiUpdateActiveCodeResponseBody {
	s.ResultCode = &v
	return s
}

func (s *OpenApiUpdateActiveCodeResponseBody) SetResultContent(v string) *OpenApiUpdateActiveCodeResponseBody {
	s.ResultContent = &v
	return s
}

type OpenApiUpdateActiveCodeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OpenApiUpdateActiveCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OpenApiUpdateActiveCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenApiUpdateActiveCodeResponse) GoString() string {
	return s.String()
}

func (s *OpenApiUpdateActiveCodeResponse) SetHeaders(v map[string]*string) *OpenApiUpdateActiveCodeResponse {
	s.Headers = v
	return s
}

func (s *OpenApiUpdateActiveCodeResponse) SetStatusCode(v int32) *OpenApiUpdateActiveCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenApiUpdateActiveCodeResponse) SetBody(v *OpenApiUpdateActiveCodeResponseBody) *OpenApiUpdateActiveCodeResponse {
	s.Body = v
	return s
}

type OpenApiUpdateActiveSceneRequest struct {
	AppId                                       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMqcpOpenApiUpdateActiveSceneReqJsonStr *string `json:"MpaasMqcpOpenApiUpdateActiveSceneReqJsonStr,omitempty" xml:"MpaasMqcpOpenApiUpdateActiveSceneReqJsonStr,omitempty"`
	TenantId                                    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                                 *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s OpenApiUpdateActiveSceneRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenApiUpdateActiveSceneRequest) GoString() string {
	return s.String()
}

func (s *OpenApiUpdateActiveSceneRequest) SetAppId(v string) *OpenApiUpdateActiveSceneRequest {
	s.AppId = &v
	return s
}

func (s *OpenApiUpdateActiveSceneRequest) SetMpaasMqcpOpenApiUpdateActiveSceneReqJsonStr(v string) *OpenApiUpdateActiveSceneRequest {
	s.MpaasMqcpOpenApiUpdateActiveSceneReqJsonStr = &v
	return s
}

func (s *OpenApiUpdateActiveSceneRequest) SetTenantId(v string) *OpenApiUpdateActiveSceneRequest {
	s.TenantId = &v
	return s
}

func (s *OpenApiUpdateActiveSceneRequest) SetWorkspaceId(v string) *OpenApiUpdateActiveSceneRequest {
	s.WorkspaceId = &v
	return s
}

type OpenApiUpdateActiveSceneResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *string `json:"ResultContent,omitempty" xml:"ResultContent,omitempty"`
}

func (s OpenApiUpdateActiveSceneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenApiUpdateActiveSceneResponseBody) GoString() string {
	return s.String()
}

func (s *OpenApiUpdateActiveSceneResponseBody) SetRequestId(v string) *OpenApiUpdateActiveSceneResponseBody {
	s.RequestId = &v
	return s
}

func (s *OpenApiUpdateActiveSceneResponseBody) SetResultCode(v string) *OpenApiUpdateActiveSceneResponseBody {
	s.ResultCode = &v
	return s
}

func (s *OpenApiUpdateActiveSceneResponseBody) SetResultContent(v string) *OpenApiUpdateActiveSceneResponseBody {
	s.ResultContent = &v
	return s
}

type OpenApiUpdateActiveSceneResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OpenApiUpdateActiveSceneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OpenApiUpdateActiveSceneResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenApiUpdateActiveSceneResponse) GoString() string {
	return s.String()
}

func (s *OpenApiUpdateActiveSceneResponse) SetHeaders(v map[string]*string) *OpenApiUpdateActiveSceneResponse {
	s.Headers = v
	return s
}

func (s *OpenApiUpdateActiveSceneResponse) SetStatusCode(v int32) *OpenApiUpdateActiveSceneResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenApiUpdateActiveSceneResponse) SetBody(v *OpenApiUpdateActiveSceneResponseBody) *OpenApiUpdateActiveSceneResponse {
	s.Body = v
	return s
}

type PushBindRequest struct {
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DeliveryToken *string `json:"DeliveryToken,omitempty" xml:"DeliveryToken,omitempty"`
	OsType        *int32  `json:"OsType,omitempty" xml:"OsType,omitempty"`
	PhoneNumber   *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	WorkspaceId   *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s PushBindRequest) String() string {
	return tea.Prettify(s)
}

func (s PushBindRequest) GoString() string {
	return s.String()
}

func (s *PushBindRequest) SetAppId(v string) *PushBindRequest {
	s.AppId = &v
	return s
}

func (s *PushBindRequest) SetDeliveryToken(v string) *PushBindRequest {
	s.DeliveryToken = &v
	return s
}

func (s *PushBindRequest) SetOsType(v int32) *PushBindRequest {
	s.OsType = &v
	return s
}

func (s *PushBindRequest) SetPhoneNumber(v string) *PushBindRequest {
	s.PhoneNumber = &v
	return s
}

func (s *PushBindRequest) SetUserId(v string) *PushBindRequest {
	s.UserId = &v
	return s
}

func (s *PushBindRequest) SetWorkspaceId(v string) *PushBindRequest {
	s.WorkspaceId = &v
	return s
}

type PushBindResponseBody struct {
	PushResult    *PushBindResponseBodyPushResult `json:"PushResult,omitempty" xml:"PushResult,omitempty" type:"Struct"`
	RequestId     *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                         `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage *string                         `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s PushBindResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PushBindResponseBody) GoString() string {
	return s.String()
}

func (s *PushBindResponseBody) SetPushResult(v *PushBindResponseBodyPushResult) *PushBindResponseBody {
	s.PushResult = v
	return s
}

func (s *PushBindResponseBody) SetRequestId(v string) *PushBindResponseBody {
	s.RequestId = &v
	return s
}

func (s *PushBindResponseBody) SetResultCode(v string) *PushBindResponseBody {
	s.ResultCode = &v
	return s
}

func (s *PushBindResponseBody) SetResultMessage(v string) *PushBindResponseBody {
	s.ResultMessage = &v
	return s
}

type PushBindResponseBodyPushResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PushBindResponseBodyPushResult) String() string {
	return tea.Prettify(s)
}

func (s PushBindResponseBodyPushResult) GoString() string {
	return s.String()
}

func (s *PushBindResponseBodyPushResult) SetData(v string) *PushBindResponseBodyPushResult {
	s.Data = &v
	return s
}

func (s *PushBindResponseBodyPushResult) SetResultMsg(v string) *PushBindResponseBodyPushResult {
	s.ResultMsg = &v
	return s
}

func (s *PushBindResponseBodyPushResult) SetSuccess(v bool) *PushBindResponseBodyPushResult {
	s.Success = &v
	return s
}

type PushBindResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PushBindResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PushBindResponse) String() string {
	return tea.Prettify(s)
}

func (s PushBindResponse) GoString() string {
	return s.String()
}

func (s *PushBindResponse) SetHeaders(v map[string]*string) *PushBindResponse {
	s.Headers = v
	return s
}

func (s *PushBindResponse) SetStatusCode(v int32) *PushBindResponse {
	s.StatusCode = &v
	return s
}

func (s *PushBindResponse) SetBody(v *PushBindResponseBody) *PushBindResponse {
	s.Body = v
	return s
}

type PushBroadcastRequest struct {
	AndroidChannel       *int32                 `json:"AndroidChannel,omitempty" xml:"AndroidChannel,omitempty"`
	AppId                *string                `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BindPeriod           *int32                 `json:"BindPeriod,omitempty" xml:"BindPeriod,omitempty"`
	ChannelId            *string                `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	Classification       *string                `json:"Classification,omitempty" xml:"Classification,omitempty"`
	DeliveryType         *int64                 `json:"DeliveryType,omitempty" xml:"DeliveryType,omitempty"`
	ExpiredSeconds       *int64                 `json:"ExpiredSeconds,omitempty" xml:"ExpiredSeconds,omitempty"`
	ExtendedParams       *string                `json:"ExtendedParams,omitempty" xml:"ExtendedParams,omitempty"`
	MiChannelId          *string                `json:"MiChannelId,omitempty" xml:"MiChannelId,omitempty"`
	Msgkey               *string                `json:"Msgkey,omitempty" xml:"Msgkey,omitempty"`
	NotifyType           *string                `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	PushAction           *int64                 `json:"PushAction,omitempty" xml:"PushAction,omitempty"`
	PushStatus           *int64                 `json:"PushStatus,omitempty" xml:"PushStatus,omitempty"`
	Silent               *int64                 `json:"Silent,omitempty" xml:"Silent,omitempty"`
	StrategyContent      *string                `json:"StrategyContent,omitempty" xml:"StrategyContent,omitempty"`
	StrategyType         *int32                 `json:"StrategyType,omitempty" xml:"StrategyType,omitempty"`
	TaskName             *string                `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TemplateKeyValue     *string                `json:"TemplateKeyValue,omitempty" xml:"TemplateKeyValue,omitempty"`
	TemplateName         *string                `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	ThirdChannelCategory map[string]interface{} `json:"ThirdChannelCategory,omitempty" xml:"ThirdChannelCategory,omitempty"`
	UnBindPeriod         *int64                 `json:"UnBindPeriod,omitempty" xml:"UnBindPeriod,omitempty"`
	WorkspaceId          *string                `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s PushBroadcastRequest) String() string {
	return tea.Prettify(s)
}

func (s PushBroadcastRequest) GoString() string {
	return s.String()
}

func (s *PushBroadcastRequest) SetAndroidChannel(v int32) *PushBroadcastRequest {
	s.AndroidChannel = &v
	return s
}

func (s *PushBroadcastRequest) SetAppId(v string) *PushBroadcastRequest {
	s.AppId = &v
	return s
}

func (s *PushBroadcastRequest) SetBindPeriod(v int32) *PushBroadcastRequest {
	s.BindPeriod = &v
	return s
}

func (s *PushBroadcastRequest) SetChannelId(v string) *PushBroadcastRequest {
	s.ChannelId = &v
	return s
}

func (s *PushBroadcastRequest) SetClassification(v string) *PushBroadcastRequest {
	s.Classification = &v
	return s
}

func (s *PushBroadcastRequest) SetDeliveryType(v int64) *PushBroadcastRequest {
	s.DeliveryType = &v
	return s
}

func (s *PushBroadcastRequest) SetExpiredSeconds(v int64) *PushBroadcastRequest {
	s.ExpiredSeconds = &v
	return s
}

func (s *PushBroadcastRequest) SetExtendedParams(v string) *PushBroadcastRequest {
	s.ExtendedParams = &v
	return s
}

func (s *PushBroadcastRequest) SetMiChannelId(v string) *PushBroadcastRequest {
	s.MiChannelId = &v
	return s
}

func (s *PushBroadcastRequest) SetMsgkey(v string) *PushBroadcastRequest {
	s.Msgkey = &v
	return s
}

func (s *PushBroadcastRequest) SetNotifyType(v string) *PushBroadcastRequest {
	s.NotifyType = &v
	return s
}

func (s *PushBroadcastRequest) SetPushAction(v int64) *PushBroadcastRequest {
	s.PushAction = &v
	return s
}

func (s *PushBroadcastRequest) SetPushStatus(v int64) *PushBroadcastRequest {
	s.PushStatus = &v
	return s
}

func (s *PushBroadcastRequest) SetSilent(v int64) *PushBroadcastRequest {
	s.Silent = &v
	return s
}

func (s *PushBroadcastRequest) SetStrategyContent(v string) *PushBroadcastRequest {
	s.StrategyContent = &v
	return s
}

func (s *PushBroadcastRequest) SetStrategyType(v int32) *PushBroadcastRequest {
	s.StrategyType = &v
	return s
}

func (s *PushBroadcastRequest) SetTaskName(v string) *PushBroadcastRequest {
	s.TaskName = &v
	return s
}

func (s *PushBroadcastRequest) SetTemplateKeyValue(v string) *PushBroadcastRequest {
	s.TemplateKeyValue = &v
	return s
}

func (s *PushBroadcastRequest) SetTemplateName(v string) *PushBroadcastRequest {
	s.TemplateName = &v
	return s
}

func (s *PushBroadcastRequest) SetThirdChannelCategory(v map[string]interface{}) *PushBroadcastRequest {
	s.ThirdChannelCategory = v
	return s
}

func (s *PushBroadcastRequest) SetUnBindPeriod(v int64) *PushBroadcastRequest {
	s.UnBindPeriod = &v
	return s
}

func (s *PushBroadcastRequest) SetWorkspaceId(v string) *PushBroadcastRequest {
	s.WorkspaceId = &v
	return s
}

type PushBroadcastShrinkRequest struct {
	AndroidChannel             *int32  `json:"AndroidChannel,omitempty" xml:"AndroidChannel,omitempty"`
	AppId                      *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BindPeriod                 *int32  `json:"BindPeriod,omitempty" xml:"BindPeriod,omitempty"`
	ChannelId                  *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	Classification             *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	DeliveryType               *int64  `json:"DeliveryType,omitempty" xml:"DeliveryType,omitempty"`
	ExpiredSeconds             *int64  `json:"ExpiredSeconds,omitempty" xml:"ExpiredSeconds,omitempty"`
	ExtendedParams             *string `json:"ExtendedParams,omitempty" xml:"ExtendedParams,omitempty"`
	MiChannelId                *string `json:"MiChannelId,omitempty" xml:"MiChannelId,omitempty"`
	Msgkey                     *string `json:"Msgkey,omitempty" xml:"Msgkey,omitempty"`
	NotifyType                 *string `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	PushAction                 *int64  `json:"PushAction,omitempty" xml:"PushAction,omitempty"`
	PushStatus                 *int64  `json:"PushStatus,omitempty" xml:"PushStatus,omitempty"`
	Silent                     *int64  `json:"Silent,omitempty" xml:"Silent,omitempty"`
	StrategyContent            *string `json:"StrategyContent,omitempty" xml:"StrategyContent,omitempty"`
	StrategyType               *int32  `json:"StrategyType,omitempty" xml:"StrategyType,omitempty"`
	TaskName                   *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TemplateKeyValue           *string `json:"TemplateKeyValue,omitempty" xml:"TemplateKeyValue,omitempty"`
	TemplateName               *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	ThirdChannelCategoryShrink *string `json:"ThirdChannelCategory,omitempty" xml:"ThirdChannelCategory,omitempty"`
	UnBindPeriod               *int64  `json:"UnBindPeriod,omitempty" xml:"UnBindPeriod,omitempty"`
	WorkspaceId                *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s PushBroadcastShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s PushBroadcastShrinkRequest) GoString() string {
	return s.String()
}

func (s *PushBroadcastShrinkRequest) SetAndroidChannel(v int32) *PushBroadcastShrinkRequest {
	s.AndroidChannel = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetAppId(v string) *PushBroadcastShrinkRequest {
	s.AppId = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetBindPeriod(v int32) *PushBroadcastShrinkRequest {
	s.BindPeriod = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetChannelId(v string) *PushBroadcastShrinkRequest {
	s.ChannelId = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetClassification(v string) *PushBroadcastShrinkRequest {
	s.Classification = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetDeliveryType(v int64) *PushBroadcastShrinkRequest {
	s.DeliveryType = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetExpiredSeconds(v int64) *PushBroadcastShrinkRequest {
	s.ExpiredSeconds = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetExtendedParams(v string) *PushBroadcastShrinkRequest {
	s.ExtendedParams = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetMiChannelId(v string) *PushBroadcastShrinkRequest {
	s.MiChannelId = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetMsgkey(v string) *PushBroadcastShrinkRequest {
	s.Msgkey = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetNotifyType(v string) *PushBroadcastShrinkRequest {
	s.NotifyType = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetPushAction(v int64) *PushBroadcastShrinkRequest {
	s.PushAction = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetPushStatus(v int64) *PushBroadcastShrinkRequest {
	s.PushStatus = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetSilent(v int64) *PushBroadcastShrinkRequest {
	s.Silent = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetStrategyContent(v string) *PushBroadcastShrinkRequest {
	s.StrategyContent = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetStrategyType(v int32) *PushBroadcastShrinkRequest {
	s.StrategyType = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetTaskName(v string) *PushBroadcastShrinkRequest {
	s.TaskName = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetTemplateKeyValue(v string) *PushBroadcastShrinkRequest {
	s.TemplateKeyValue = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetTemplateName(v string) *PushBroadcastShrinkRequest {
	s.TemplateName = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetThirdChannelCategoryShrink(v string) *PushBroadcastShrinkRequest {
	s.ThirdChannelCategoryShrink = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetUnBindPeriod(v int64) *PushBroadcastShrinkRequest {
	s.UnBindPeriod = &v
	return s
}

func (s *PushBroadcastShrinkRequest) SetWorkspaceId(v string) *PushBroadcastShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type PushBroadcastResponseBody struct {
	PushResult    *PushBroadcastResponseBodyPushResult `json:"PushResult,omitempty" xml:"PushResult,omitempty" type:"Struct"`
	RequestId     *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                              `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage *string                              `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s PushBroadcastResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PushBroadcastResponseBody) GoString() string {
	return s.String()
}

func (s *PushBroadcastResponseBody) SetPushResult(v *PushBroadcastResponseBodyPushResult) *PushBroadcastResponseBody {
	s.PushResult = v
	return s
}

func (s *PushBroadcastResponseBody) SetRequestId(v string) *PushBroadcastResponseBody {
	s.RequestId = &v
	return s
}

func (s *PushBroadcastResponseBody) SetResultCode(v string) *PushBroadcastResponseBody {
	s.ResultCode = &v
	return s
}

func (s *PushBroadcastResponseBody) SetResultMessage(v string) *PushBroadcastResponseBody {
	s.ResultMessage = &v
	return s
}

type PushBroadcastResponseBodyPushResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PushBroadcastResponseBodyPushResult) String() string {
	return tea.Prettify(s)
}

func (s PushBroadcastResponseBodyPushResult) GoString() string {
	return s.String()
}

func (s *PushBroadcastResponseBodyPushResult) SetData(v string) *PushBroadcastResponseBodyPushResult {
	s.Data = &v
	return s
}

func (s *PushBroadcastResponseBodyPushResult) SetResultMsg(v string) *PushBroadcastResponseBodyPushResult {
	s.ResultMsg = &v
	return s
}

func (s *PushBroadcastResponseBodyPushResult) SetSuccess(v bool) *PushBroadcastResponseBodyPushResult {
	s.Success = &v
	return s
}

type PushBroadcastResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PushBroadcastResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PushBroadcastResponse) String() string {
	return tea.Prettify(s)
}

func (s PushBroadcastResponse) GoString() string {
	return s.String()
}

func (s *PushBroadcastResponse) SetHeaders(v map[string]*string) *PushBroadcastResponse {
	s.Headers = v
	return s
}

func (s *PushBroadcastResponse) SetStatusCode(v int32) *PushBroadcastResponse {
	s.StatusCode = &v
	return s
}

func (s *PushBroadcastResponse) SetBody(v *PushBroadcastResponseBody) *PushBroadcastResponse {
	s.Body = v
	return s
}

type PushMultipleRequest struct {
	AppId                *string                         `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ChannelId            *string                         `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	Classification       *string                         `json:"Classification,omitempty" xml:"Classification,omitempty"`
	DeliveryType         *int64                          `json:"DeliveryType,omitempty" xml:"DeliveryType,omitempty"`
	ExpiredSeconds       *int64                          `json:"ExpiredSeconds,omitempty" xml:"ExpiredSeconds,omitempty"`
	ExtendedParams       *string                         `json:"ExtendedParams,omitempty" xml:"ExtendedParams,omitempty"`
	MiChannelId          *string                         `json:"MiChannelId,omitempty" xml:"MiChannelId,omitempty"`
	NotifyType           *string                         `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	PushAction           *int64                          `json:"PushAction,omitempty" xml:"PushAction,omitempty"`
	Silent               *int64                          `json:"Silent,omitempty" xml:"Silent,omitempty"`
	StrategyContent      *string                         `json:"StrategyContent,omitempty" xml:"StrategyContent,omitempty"`
	StrategyType         *int32                          `json:"StrategyType,omitempty" xml:"StrategyType,omitempty"`
	TargetMsg            []*PushMultipleRequestTargetMsg `json:"TargetMsg,omitempty" xml:"TargetMsg,omitempty" type:"Repeated"`
	TaskName             *string                         `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TemplateName         *string                         `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	ThirdChannelCategory map[string]interface{}          `json:"ThirdChannelCategory,omitempty" xml:"ThirdChannelCategory,omitempty"`
	WorkspaceId          *string                         `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s PushMultipleRequest) String() string {
	return tea.Prettify(s)
}

func (s PushMultipleRequest) GoString() string {
	return s.String()
}

func (s *PushMultipleRequest) SetAppId(v string) *PushMultipleRequest {
	s.AppId = &v
	return s
}

func (s *PushMultipleRequest) SetChannelId(v string) *PushMultipleRequest {
	s.ChannelId = &v
	return s
}

func (s *PushMultipleRequest) SetClassification(v string) *PushMultipleRequest {
	s.Classification = &v
	return s
}

func (s *PushMultipleRequest) SetDeliveryType(v int64) *PushMultipleRequest {
	s.DeliveryType = &v
	return s
}

func (s *PushMultipleRequest) SetExpiredSeconds(v int64) *PushMultipleRequest {
	s.ExpiredSeconds = &v
	return s
}

func (s *PushMultipleRequest) SetExtendedParams(v string) *PushMultipleRequest {
	s.ExtendedParams = &v
	return s
}

func (s *PushMultipleRequest) SetMiChannelId(v string) *PushMultipleRequest {
	s.MiChannelId = &v
	return s
}

func (s *PushMultipleRequest) SetNotifyType(v string) *PushMultipleRequest {
	s.NotifyType = &v
	return s
}

func (s *PushMultipleRequest) SetPushAction(v int64) *PushMultipleRequest {
	s.PushAction = &v
	return s
}

func (s *PushMultipleRequest) SetSilent(v int64) *PushMultipleRequest {
	s.Silent = &v
	return s
}

func (s *PushMultipleRequest) SetStrategyContent(v string) *PushMultipleRequest {
	s.StrategyContent = &v
	return s
}

func (s *PushMultipleRequest) SetStrategyType(v int32) *PushMultipleRequest {
	s.StrategyType = &v
	return s
}

func (s *PushMultipleRequest) SetTargetMsg(v []*PushMultipleRequestTargetMsg) *PushMultipleRequest {
	s.TargetMsg = v
	return s
}

func (s *PushMultipleRequest) SetTaskName(v string) *PushMultipleRequest {
	s.TaskName = &v
	return s
}

func (s *PushMultipleRequest) SetTemplateName(v string) *PushMultipleRequest {
	s.TemplateName = &v
	return s
}

func (s *PushMultipleRequest) SetThirdChannelCategory(v map[string]interface{}) *PushMultipleRequest {
	s.ThirdChannelCategory = v
	return s
}

func (s *PushMultipleRequest) SetWorkspaceId(v string) *PushMultipleRequest {
	s.WorkspaceId = &v
	return s
}

type PushMultipleRequestTargetMsg struct {
	ExtendedParams   *string `json:"ExtendedParams,omitempty" xml:"ExtendedParams,omitempty"`
	MsgKey           *string `json:"MsgKey,omitempty" xml:"MsgKey,omitempty"`
	Target           *string `json:"Target,omitempty" xml:"Target,omitempty"`
	TemplateKeyValue *string `json:"TemplateKeyValue,omitempty" xml:"TemplateKeyValue,omitempty"`
}

func (s PushMultipleRequestTargetMsg) String() string {
	return tea.Prettify(s)
}

func (s PushMultipleRequestTargetMsg) GoString() string {
	return s.String()
}

func (s *PushMultipleRequestTargetMsg) SetExtendedParams(v string) *PushMultipleRequestTargetMsg {
	s.ExtendedParams = &v
	return s
}

func (s *PushMultipleRequestTargetMsg) SetMsgKey(v string) *PushMultipleRequestTargetMsg {
	s.MsgKey = &v
	return s
}

func (s *PushMultipleRequestTargetMsg) SetTarget(v string) *PushMultipleRequestTargetMsg {
	s.Target = &v
	return s
}

func (s *PushMultipleRequestTargetMsg) SetTemplateKeyValue(v string) *PushMultipleRequestTargetMsg {
	s.TemplateKeyValue = &v
	return s
}

type PushMultipleShrinkRequest struct {
	AppId                      *string                               `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ChannelId                  *string                               `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	Classification             *string                               `json:"Classification,omitempty" xml:"Classification,omitempty"`
	DeliveryType               *int64                                `json:"DeliveryType,omitempty" xml:"DeliveryType,omitempty"`
	ExpiredSeconds             *int64                                `json:"ExpiredSeconds,omitempty" xml:"ExpiredSeconds,omitempty"`
	ExtendedParams             *string                               `json:"ExtendedParams,omitempty" xml:"ExtendedParams,omitempty"`
	MiChannelId                *string                               `json:"MiChannelId,omitempty" xml:"MiChannelId,omitempty"`
	NotifyType                 *string                               `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	PushAction                 *int64                                `json:"PushAction,omitempty" xml:"PushAction,omitempty"`
	Silent                     *int64                                `json:"Silent,omitempty" xml:"Silent,omitempty"`
	StrategyContent            *string                               `json:"StrategyContent,omitempty" xml:"StrategyContent,omitempty"`
	StrategyType               *int32                                `json:"StrategyType,omitempty" xml:"StrategyType,omitempty"`
	TargetMsg                  []*PushMultipleShrinkRequestTargetMsg `json:"TargetMsg,omitempty" xml:"TargetMsg,omitempty" type:"Repeated"`
	TaskName                   *string                               `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TemplateName               *string                               `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	ThirdChannelCategoryShrink *string                               `json:"ThirdChannelCategory,omitempty" xml:"ThirdChannelCategory,omitempty"`
	WorkspaceId                *string                               `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s PushMultipleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s PushMultipleShrinkRequest) GoString() string {
	return s.String()
}

func (s *PushMultipleShrinkRequest) SetAppId(v string) *PushMultipleShrinkRequest {
	s.AppId = &v
	return s
}

func (s *PushMultipleShrinkRequest) SetChannelId(v string) *PushMultipleShrinkRequest {
	s.ChannelId = &v
	return s
}

func (s *PushMultipleShrinkRequest) SetClassification(v string) *PushMultipleShrinkRequest {
	s.Classification = &v
	return s
}

func (s *PushMultipleShrinkRequest) SetDeliveryType(v int64) *PushMultipleShrinkRequest {
	s.DeliveryType = &v
	return s
}

func (s *PushMultipleShrinkRequest) SetExpiredSeconds(v int64) *PushMultipleShrinkRequest {
	s.ExpiredSeconds = &v
	return s
}

func (s *PushMultipleShrinkRequest) SetExtendedParams(v string) *PushMultipleShrinkRequest {
	s.ExtendedParams = &v
	return s
}

func (s *PushMultipleShrinkRequest) SetMiChannelId(v string) *PushMultipleShrinkRequest {
	s.MiChannelId = &v
	return s
}

func (s *PushMultipleShrinkRequest) SetNotifyType(v string) *PushMultipleShrinkRequest {
	s.NotifyType = &v
	return s
}

func (s *PushMultipleShrinkRequest) SetPushAction(v int64) *PushMultipleShrinkRequest {
	s.PushAction = &v
	return s
}

func (s *PushMultipleShrinkRequest) SetSilent(v int64) *PushMultipleShrinkRequest {
	s.Silent = &v
	return s
}

func (s *PushMultipleShrinkRequest) SetStrategyContent(v string) *PushMultipleShrinkRequest {
	s.StrategyContent = &v
	return s
}

func (s *PushMultipleShrinkRequest) SetStrategyType(v int32) *PushMultipleShrinkRequest {
	s.StrategyType = &v
	return s
}

func (s *PushMultipleShrinkRequest) SetTargetMsg(v []*PushMultipleShrinkRequestTargetMsg) *PushMultipleShrinkRequest {
	s.TargetMsg = v
	return s
}

func (s *PushMultipleShrinkRequest) SetTaskName(v string) *PushMultipleShrinkRequest {
	s.TaskName = &v
	return s
}

func (s *PushMultipleShrinkRequest) SetTemplateName(v string) *PushMultipleShrinkRequest {
	s.TemplateName = &v
	return s
}

func (s *PushMultipleShrinkRequest) SetThirdChannelCategoryShrink(v string) *PushMultipleShrinkRequest {
	s.ThirdChannelCategoryShrink = &v
	return s
}

func (s *PushMultipleShrinkRequest) SetWorkspaceId(v string) *PushMultipleShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type PushMultipleShrinkRequestTargetMsg struct {
	ExtendedParams   *string `json:"ExtendedParams,omitempty" xml:"ExtendedParams,omitempty"`
	MsgKey           *string `json:"MsgKey,omitempty" xml:"MsgKey,omitempty"`
	Target           *string `json:"Target,omitempty" xml:"Target,omitempty"`
	TemplateKeyValue *string `json:"TemplateKeyValue,omitempty" xml:"TemplateKeyValue,omitempty"`
}

func (s PushMultipleShrinkRequestTargetMsg) String() string {
	return tea.Prettify(s)
}

func (s PushMultipleShrinkRequestTargetMsg) GoString() string {
	return s.String()
}

func (s *PushMultipleShrinkRequestTargetMsg) SetExtendedParams(v string) *PushMultipleShrinkRequestTargetMsg {
	s.ExtendedParams = &v
	return s
}

func (s *PushMultipleShrinkRequestTargetMsg) SetMsgKey(v string) *PushMultipleShrinkRequestTargetMsg {
	s.MsgKey = &v
	return s
}

func (s *PushMultipleShrinkRequestTargetMsg) SetTarget(v string) *PushMultipleShrinkRequestTargetMsg {
	s.Target = &v
	return s
}

func (s *PushMultipleShrinkRequestTargetMsg) SetTemplateKeyValue(v string) *PushMultipleShrinkRequestTargetMsg {
	s.TemplateKeyValue = &v
	return s
}

type PushMultipleResponseBody struct {
	PushResult    *PushMultipleResponseBodyPushResult `json:"PushResult,omitempty" xml:"PushResult,omitempty" type:"Struct"`
	RequestId     *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                             `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage *string                             `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s PushMultipleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PushMultipleResponseBody) GoString() string {
	return s.String()
}

func (s *PushMultipleResponseBody) SetPushResult(v *PushMultipleResponseBodyPushResult) *PushMultipleResponseBody {
	s.PushResult = v
	return s
}

func (s *PushMultipleResponseBody) SetRequestId(v string) *PushMultipleResponseBody {
	s.RequestId = &v
	return s
}

func (s *PushMultipleResponseBody) SetResultCode(v string) *PushMultipleResponseBody {
	s.ResultCode = &v
	return s
}

func (s *PushMultipleResponseBody) SetResultMessage(v string) *PushMultipleResponseBody {
	s.ResultMessage = &v
	return s
}

type PushMultipleResponseBodyPushResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PushMultipleResponseBodyPushResult) String() string {
	return tea.Prettify(s)
}

func (s PushMultipleResponseBodyPushResult) GoString() string {
	return s.String()
}

func (s *PushMultipleResponseBodyPushResult) SetData(v string) *PushMultipleResponseBodyPushResult {
	s.Data = &v
	return s
}

func (s *PushMultipleResponseBodyPushResult) SetResultMsg(v string) *PushMultipleResponseBodyPushResult {
	s.ResultMsg = &v
	return s
}

func (s *PushMultipleResponseBodyPushResult) SetSuccess(v bool) *PushMultipleResponseBodyPushResult {
	s.Success = &v
	return s
}

type PushMultipleResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PushMultipleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PushMultipleResponse) String() string {
	return tea.Prettify(s)
}

func (s PushMultipleResponse) GoString() string {
	return s.String()
}

func (s *PushMultipleResponse) SetHeaders(v map[string]*string) *PushMultipleResponse {
	s.Headers = v
	return s
}

func (s *PushMultipleResponse) SetStatusCode(v int32) *PushMultipleResponse {
	s.StatusCode = &v
	return s
}

func (s *PushMultipleResponse) SetBody(v *PushMultipleResponseBody) *PushMultipleResponse {
	s.Body = v
	return s
}

type PushReportRequest struct {
	AppId                   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppVersion              *string `json:"AppVersion,omitempty" xml:"AppVersion,omitempty"`
	Channel                 *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	ConnectType             *string `json:"ConnectType,omitempty" xml:"ConnectType,omitempty"`
	DeliveryToken           *string `json:"DeliveryToken,omitempty" xml:"DeliveryToken,omitempty"`
	Imei                    *string `json:"Imei,omitempty" xml:"Imei,omitempty"`
	Imsi                    *string `json:"Imsi,omitempty" xml:"Imsi,omitempty"`
	Model                   *string `json:"Model,omitempty" xml:"Model,omitempty"`
	OsType                  *int32  `json:"OsType,omitempty" xml:"OsType,omitempty"`
	PushVersion             *string `json:"PushVersion,omitempty" xml:"PushVersion,omitempty"`
	ThirdChannel            *int32  `json:"ThirdChannel,omitempty" xml:"ThirdChannel,omitempty"`
	ThirdChannelDeviceToken *string `json:"ThirdChannelDeviceToken,omitempty" xml:"ThirdChannelDeviceToken,omitempty"`
	WorkspaceId             *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s PushReportRequest) String() string {
	return tea.Prettify(s)
}

func (s PushReportRequest) GoString() string {
	return s.String()
}

func (s *PushReportRequest) SetAppId(v string) *PushReportRequest {
	s.AppId = &v
	return s
}

func (s *PushReportRequest) SetAppVersion(v string) *PushReportRequest {
	s.AppVersion = &v
	return s
}

func (s *PushReportRequest) SetChannel(v string) *PushReportRequest {
	s.Channel = &v
	return s
}

func (s *PushReportRequest) SetConnectType(v string) *PushReportRequest {
	s.ConnectType = &v
	return s
}

func (s *PushReportRequest) SetDeliveryToken(v string) *PushReportRequest {
	s.DeliveryToken = &v
	return s
}

func (s *PushReportRequest) SetImei(v string) *PushReportRequest {
	s.Imei = &v
	return s
}

func (s *PushReportRequest) SetImsi(v string) *PushReportRequest {
	s.Imsi = &v
	return s
}

func (s *PushReportRequest) SetModel(v string) *PushReportRequest {
	s.Model = &v
	return s
}

func (s *PushReportRequest) SetOsType(v int32) *PushReportRequest {
	s.OsType = &v
	return s
}

func (s *PushReportRequest) SetPushVersion(v string) *PushReportRequest {
	s.PushVersion = &v
	return s
}

func (s *PushReportRequest) SetThirdChannel(v int32) *PushReportRequest {
	s.ThirdChannel = &v
	return s
}

func (s *PushReportRequest) SetThirdChannelDeviceToken(v string) *PushReportRequest {
	s.ThirdChannelDeviceToken = &v
	return s
}

func (s *PushReportRequest) SetWorkspaceId(v string) *PushReportRequest {
	s.WorkspaceId = &v
	return s
}

type PushReportResponseBody struct {
	PushResult    *PushReportResponseBodyPushResult `json:"PushResult,omitempty" xml:"PushResult,omitempty" type:"Struct"`
	RequestId     *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                           `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage *string                           `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s PushReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PushReportResponseBody) GoString() string {
	return s.String()
}

func (s *PushReportResponseBody) SetPushResult(v *PushReportResponseBodyPushResult) *PushReportResponseBody {
	s.PushResult = v
	return s
}

func (s *PushReportResponseBody) SetRequestId(v string) *PushReportResponseBody {
	s.RequestId = &v
	return s
}

func (s *PushReportResponseBody) SetResultCode(v string) *PushReportResponseBody {
	s.ResultCode = &v
	return s
}

func (s *PushReportResponseBody) SetResultMessage(v string) *PushReportResponseBody {
	s.ResultMessage = &v
	return s
}

type PushReportResponseBodyPushResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PushReportResponseBodyPushResult) String() string {
	return tea.Prettify(s)
}

func (s PushReportResponseBodyPushResult) GoString() string {
	return s.String()
}

func (s *PushReportResponseBodyPushResult) SetData(v string) *PushReportResponseBodyPushResult {
	s.Data = &v
	return s
}

func (s *PushReportResponseBodyPushResult) SetResultMsg(v string) *PushReportResponseBodyPushResult {
	s.ResultMsg = &v
	return s
}

func (s *PushReportResponseBodyPushResult) SetSuccess(v bool) *PushReportResponseBodyPushResult {
	s.Success = &v
	return s
}

type PushReportResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PushReportResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PushReportResponse) String() string {
	return tea.Prettify(s)
}

func (s PushReportResponse) GoString() string {
	return s.String()
}

func (s *PushReportResponse) SetHeaders(v map[string]*string) *PushReportResponse {
	s.Headers = v
	return s
}

func (s *PushReportResponse) SetStatusCode(v int32) *PushReportResponse {
	s.StatusCode = &v
	return s
}

func (s *PushReportResponse) SetBody(v *PushReportResponseBody) *PushReportResponse {
	s.Body = v
	return s
}

type PushSimpleRequest struct {
	AppId                *string                `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ChannelId            *string                `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	Classification       *string                `json:"Classification,omitempty" xml:"Classification,omitempty"`
	Content              *string                `json:"Content,omitempty" xml:"Content,omitempty"`
	DeliveryType         *int64                 `json:"DeliveryType,omitempty" xml:"DeliveryType,omitempty"`
	ExpiredSeconds       *int64                 `json:"ExpiredSeconds,omitempty" xml:"ExpiredSeconds,omitempty"`
	ExtendedParams       *string                `json:"ExtendedParams,omitempty" xml:"ExtendedParams,omitempty"`
	IconUrls             *string                `json:"IconUrls,omitempty" xml:"IconUrls,omitempty"`
	ImageUrls            *string                `json:"ImageUrls,omitempty" xml:"ImageUrls,omitempty"`
	MiChannelId          *string                `json:"MiChannelId,omitempty" xml:"MiChannelId,omitempty"`
	NotifyType           *string                `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	PushAction           *int64                 `json:"PushAction,omitempty" xml:"PushAction,omitempty"`
	PushStyle            *int32                 `json:"PushStyle,omitempty" xml:"PushStyle,omitempty"`
	Silent               *int64                 `json:"Silent,omitempty" xml:"Silent,omitempty"`
	SmsSignName          *string                `json:"SmsSignName,omitempty" xml:"SmsSignName,omitempty"`
	SmsStrategy          *int32                 `json:"SmsStrategy,omitempty" xml:"SmsStrategy,omitempty"`
	SmsTemplateCode      *string                `json:"SmsTemplateCode,omitempty" xml:"SmsTemplateCode,omitempty"`
	SmsTemplateParam     *string                `json:"SmsTemplateParam,omitempty" xml:"SmsTemplateParam,omitempty"`
	StrategyContent      *string                `json:"StrategyContent,omitempty" xml:"StrategyContent,omitempty"`
	StrategyType         *int32                 `json:"StrategyType,omitempty" xml:"StrategyType,omitempty"`
	TargetMsgkey         *string                `json:"TargetMsgkey,omitempty" xml:"TargetMsgkey,omitempty"`
	TaskName             *string                `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	ThirdChannelCategory map[string]interface{} `json:"ThirdChannelCategory,omitempty" xml:"ThirdChannelCategory,omitempty"`
	Title                *string                `json:"Title,omitempty" xml:"Title,omitempty"`
	Uri                  *string                `json:"Uri,omitempty" xml:"Uri,omitempty"`
	WorkspaceId          *string                `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s PushSimpleRequest) String() string {
	return tea.Prettify(s)
}

func (s PushSimpleRequest) GoString() string {
	return s.String()
}

func (s *PushSimpleRequest) SetAppId(v string) *PushSimpleRequest {
	s.AppId = &v
	return s
}

func (s *PushSimpleRequest) SetChannelId(v string) *PushSimpleRequest {
	s.ChannelId = &v
	return s
}

func (s *PushSimpleRequest) SetClassification(v string) *PushSimpleRequest {
	s.Classification = &v
	return s
}

func (s *PushSimpleRequest) SetContent(v string) *PushSimpleRequest {
	s.Content = &v
	return s
}

func (s *PushSimpleRequest) SetDeliveryType(v int64) *PushSimpleRequest {
	s.DeliveryType = &v
	return s
}

func (s *PushSimpleRequest) SetExpiredSeconds(v int64) *PushSimpleRequest {
	s.ExpiredSeconds = &v
	return s
}

func (s *PushSimpleRequest) SetExtendedParams(v string) *PushSimpleRequest {
	s.ExtendedParams = &v
	return s
}

func (s *PushSimpleRequest) SetIconUrls(v string) *PushSimpleRequest {
	s.IconUrls = &v
	return s
}

func (s *PushSimpleRequest) SetImageUrls(v string) *PushSimpleRequest {
	s.ImageUrls = &v
	return s
}

func (s *PushSimpleRequest) SetMiChannelId(v string) *PushSimpleRequest {
	s.MiChannelId = &v
	return s
}

func (s *PushSimpleRequest) SetNotifyType(v string) *PushSimpleRequest {
	s.NotifyType = &v
	return s
}

func (s *PushSimpleRequest) SetPushAction(v int64) *PushSimpleRequest {
	s.PushAction = &v
	return s
}

func (s *PushSimpleRequest) SetPushStyle(v int32) *PushSimpleRequest {
	s.PushStyle = &v
	return s
}

func (s *PushSimpleRequest) SetSilent(v int64) *PushSimpleRequest {
	s.Silent = &v
	return s
}

func (s *PushSimpleRequest) SetSmsSignName(v string) *PushSimpleRequest {
	s.SmsSignName = &v
	return s
}

func (s *PushSimpleRequest) SetSmsStrategy(v int32) *PushSimpleRequest {
	s.SmsStrategy = &v
	return s
}

func (s *PushSimpleRequest) SetSmsTemplateCode(v string) *PushSimpleRequest {
	s.SmsTemplateCode = &v
	return s
}

func (s *PushSimpleRequest) SetSmsTemplateParam(v string) *PushSimpleRequest {
	s.SmsTemplateParam = &v
	return s
}

func (s *PushSimpleRequest) SetStrategyContent(v string) *PushSimpleRequest {
	s.StrategyContent = &v
	return s
}

func (s *PushSimpleRequest) SetStrategyType(v int32) *PushSimpleRequest {
	s.StrategyType = &v
	return s
}

func (s *PushSimpleRequest) SetTargetMsgkey(v string) *PushSimpleRequest {
	s.TargetMsgkey = &v
	return s
}

func (s *PushSimpleRequest) SetTaskName(v string) *PushSimpleRequest {
	s.TaskName = &v
	return s
}

func (s *PushSimpleRequest) SetThirdChannelCategory(v map[string]interface{}) *PushSimpleRequest {
	s.ThirdChannelCategory = v
	return s
}

func (s *PushSimpleRequest) SetTitle(v string) *PushSimpleRequest {
	s.Title = &v
	return s
}

func (s *PushSimpleRequest) SetUri(v string) *PushSimpleRequest {
	s.Uri = &v
	return s
}

func (s *PushSimpleRequest) SetWorkspaceId(v string) *PushSimpleRequest {
	s.WorkspaceId = &v
	return s
}

type PushSimpleShrinkRequest struct {
	AppId                      *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ChannelId                  *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	Classification             *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	Content                    *string `json:"Content,omitempty" xml:"Content,omitempty"`
	DeliveryType               *int64  `json:"DeliveryType,omitempty" xml:"DeliveryType,omitempty"`
	ExpiredSeconds             *int64  `json:"ExpiredSeconds,omitempty" xml:"ExpiredSeconds,omitempty"`
	ExtendedParams             *string `json:"ExtendedParams,omitempty" xml:"ExtendedParams,omitempty"`
	IconUrls                   *string `json:"IconUrls,omitempty" xml:"IconUrls,omitempty"`
	ImageUrls                  *string `json:"ImageUrls,omitempty" xml:"ImageUrls,omitempty"`
	MiChannelId                *string `json:"MiChannelId,omitempty" xml:"MiChannelId,omitempty"`
	NotifyType                 *string `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	PushAction                 *int64  `json:"PushAction,omitempty" xml:"PushAction,omitempty"`
	PushStyle                  *int32  `json:"PushStyle,omitempty" xml:"PushStyle,omitempty"`
	Silent                     *int64  `json:"Silent,omitempty" xml:"Silent,omitempty"`
	SmsSignName                *string `json:"SmsSignName,omitempty" xml:"SmsSignName,omitempty"`
	SmsStrategy                *int32  `json:"SmsStrategy,omitempty" xml:"SmsStrategy,omitempty"`
	SmsTemplateCode            *string `json:"SmsTemplateCode,omitempty" xml:"SmsTemplateCode,omitempty"`
	SmsTemplateParam           *string `json:"SmsTemplateParam,omitempty" xml:"SmsTemplateParam,omitempty"`
	StrategyContent            *string `json:"StrategyContent,omitempty" xml:"StrategyContent,omitempty"`
	StrategyType               *int32  `json:"StrategyType,omitempty" xml:"StrategyType,omitempty"`
	TargetMsgkey               *string `json:"TargetMsgkey,omitempty" xml:"TargetMsgkey,omitempty"`
	TaskName                   *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	ThirdChannelCategoryShrink *string `json:"ThirdChannelCategory,omitempty" xml:"ThirdChannelCategory,omitempty"`
	Title                      *string `json:"Title,omitempty" xml:"Title,omitempty"`
	Uri                        *string `json:"Uri,omitempty" xml:"Uri,omitempty"`
	WorkspaceId                *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s PushSimpleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s PushSimpleShrinkRequest) GoString() string {
	return s.String()
}

func (s *PushSimpleShrinkRequest) SetAppId(v string) *PushSimpleShrinkRequest {
	s.AppId = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetChannelId(v string) *PushSimpleShrinkRequest {
	s.ChannelId = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetClassification(v string) *PushSimpleShrinkRequest {
	s.Classification = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetContent(v string) *PushSimpleShrinkRequest {
	s.Content = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetDeliveryType(v int64) *PushSimpleShrinkRequest {
	s.DeliveryType = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetExpiredSeconds(v int64) *PushSimpleShrinkRequest {
	s.ExpiredSeconds = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetExtendedParams(v string) *PushSimpleShrinkRequest {
	s.ExtendedParams = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetIconUrls(v string) *PushSimpleShrinkRequest {
	s.IconUrls = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetImageUrls(v string) *PushSimpleShrinkRequest {
	s.ImageUrls = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetMiChannelId(v string) *PushSimpleShrinkRequest {
	s.MiChannelId = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetNotifyType(v string) *PushSimpleShrinkRequest {
	s.NotifyType = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetPushAction(v int64) *PushSimpleShrinkRequest {
	s.PushAction = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetPushStyle(v int32) *PushSimpleShrinkRequest {
	s.PushStyle = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetSilent(v int64) *PushSimpleShrinkRequest {
	s.Silent = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetSmsSignName(v string) *PushSimpleShrinkRequest {
	s.SmsSignName = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetSmsStrategy(v int32) *PushSimpleShrinkRequest {
	s.SmsStrategy = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetSmsTemplateCode(v string) *PushSimpleShrinkRequest {
	s.SmsTemplateCode = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetSmsTemplateParam(v string) *PushSimpleShrinkRequest {
	s.SmsTemplateParam = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetStrategyContent(v string) *PushSimpleShrinkRequest {
	s.StrategyContent = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetStrategyType(v int32) *PushSimpleShrinkRequest {
	s.StrategyType = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetTargetMsgkey(v string) *PushSimpleShrinkRequest {
	s.TargetMsgkey = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetTaskName(v string) *PushSimpleShrinkRequest {
	s.TaskName = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetThirdChannelCategoryShrink(v string) *PushSimpleShrinkRequest {
	s.ThirdChannelCategoryShrink = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetTitle(v string) *PushSimpleShrinkRequest {
	s.Title = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetUri(v string) *PushSimpleShrinkRequest {
	s.Uri = &v
	return s
}

func (s *PushSimpleShrinkRequest) SetWorkspaceId(v string) *PushSimpleShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type PushSimpleResponseBody struct {
	PushResult    *PushSimpleResponseBodyPushResult `json:"PushResult,omitempty" xml:"PushResult,omitempty" type:"Struct"`
	RequestId     *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                           `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage *string                           `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s PushSimpleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PushSimpleResponseBody) GoString() string {
	return s.String()
}

func (s *PushSimpleResponseBody) SetPushResult(v *PushSimpleResponseBodyPushResult) *PushSimpleResponseBody {
	s.PushResult = v
	return s
}

func (s *PushSimpleResponseBody) SetRequestId(v string) *PushSimpleResponseBody {
	s.RequestId = &v
	return s
}

func (s *PushSimpleResponseBody) SetResultCode(v string) *PushSimpleResponseBody {
	s.ResultCode = &v
	return s
}

func (s *PushSimpleResponseBody) SetResultMessage(v string) *PushSimpleResponseBody {
	s.ResultMessage = &v
	return s
}

type PushSimpleResponseBodyPushResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PushSimpleResponseBodyPushResult) String() string {
	return tea.Prettify(s)
}

func (s PushSimpleResponseBodyPushResult) GoString() string {
	return s.String()
}

func (s *PushSimpleResponseBodyPushResult) SetData(v string) *PushSimpleResponseBodyPushResult {
	s.Data = &v
	return s
}

func (s *PushSimpleResponseBodyPushResult) SetResultMsg(v string) *PushSimpleResponseBodyPushResult {
	s.ResultMsg = &v
	return s
}

func (s *PushSimpleResponseBodyPushResult) SetSuccess(v bool) *PushSimpleResponseBodyPushResult {
	s.Success = &v
	return s
}

type PushSimpleResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PushSimpleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PushSimpleResponse) String() string {
	return tea.Prettify(s)
}

func (s PushSimpleResponse) GoString() string {
	return s.String()
}

func (s *PushSimpleResponse) SetHeaders(v map[string]*string) *PushSimpleResponse {
	s.Headers = v
	return s
}

func (s *PushSimpleResponse) SetStatusCode(v int32) *PushSimpleResponse {
	s.StatusCode = &v
	return s
}

func (s *PushSimpleResponse) SetBody(v *PushSimpleResponseBody) *PushSimpleResponse {
	s.Body = v
	return s
}

type PushTemplateRequest struct {
	AppId                *string                `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ChannelId            *string                `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	Classification       *string                `json:"Classification,omitempty" xml:"Classification,omitempty"`
	DeliveryType         *int64                 `json:"DeliveryType,omitempty" xml:"DeliveryType,omitempty"`
	ExpiredSeconds       *int64                 `json:"ExpiredSeconds,omitempty" xml:"ExpiredSeconds,omitempty"`
	ExtendedParams       *string                `json:"ExtendedParams,omitempty" xml:"ExtendedParams,omitempty"`
	MiChannelId          *string                `json:"MiChannelId,omitempty" xml:"MiChannelId,omitempty"`
	NotifyType           *string                `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	PushAction           *int64                 `json:"PushAction,omitempty" xml:"PushAction,omitempty"`
	Silent               *int64                 `json:"Silent,omitempty" xml:"Silent,omitempty"`
	SmsSignName          *string                `json:"SmsSignName,omitempty" xml:"SmsSignName,omitempty"`
	SmsStrategy          *int32                 `json:"SmsStrategy,omitempty" xml:"SmsStrategy,omitempty"`
	SmsTemplateCode      *string                `json:"SmsTemplateCode,omitempty" xml:"SmsTemplateCode,omitempty"`
	SmsTemplateParam     *string                `json:"SmsTemplateParam,omitempty" xml:"SmsTemplateParam,omitempty"`
	StrategyContent      *string                `json:"StrategyContent,omitempty" xml:"StrategyContent,omitempty"`
	StrategyType         *int32                 `json:"StrategyType,omitempty" xml:"StrategyType,omitempty"`
	TargetMsgkey         *string                `json:"TargetMsgkey,omitempty" xml:"TargetMsgkey,omitempty"`
	TaskName             *string                `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TemplateKeyValue     *string                `json:"TemplateKeyValue,omitempty" xml:"TemplateKeyValue,omitempty"`
	TemplateName         *string                `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	ThirdChannelCategory map[string]interface{} `json:"ThirdChannelCategory,omitempty" xml:"ThirdChannelCategory,omitempty"`
	WorkspaceId          *string                `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s PushTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s PushTemplateRequest) GoString() string {
	return s.String()
}

func (s *PushTemplateRequest) SetAppId(v string) *PushTemplateRequest {
	s.AppId = &v
	return s
}

func (s *PushTemplateRequest) SetChannelId(v string) *PushTemplateRequest {
	s.ChannelId = &v
	return s
}

func (s *PushTemplateRequest) SetClassification(v string) *PushTemplateRequest {
	s.Classification = &v
	return s
}

func (s *PushTemplateRequest) SetDeliveryType(v int64) *PushTemplateRequest {
	s.DeliveryType = &v
	return s
}

func (s *PushTemplateRequest) SetExpiredSeconds(v int64) *PushTemplateRequest {
	s.ExpiredSeconds = &v
	return s
}

func (s *PushTemplateRequest) SetExtendedParams(v string) *PushTemplateRequest {
	s.ExtendedParams = &v
	return s
}

func (s *PushTemplateRequest) SetMiChannelId(v string) *PushTemplateRequest {
	s.MiChannelId = &v
	return s
}

func (s *PushTemplateRequest) SetNotifyType(v string) *PushTemplateRequest {
	s.NotifyType = &v
	return s
}

func (s *PushTemplateRequest) SetPushAction(v int64) *PushTemplateRequest {
	s.PushAction = &v
	return s
}

func (s *PushTemplateRequest) SetSilent(v int64) *PushTemplateRequest {
	s.Silent = &v
	return s
}

func (s *PushTemplateRequest) SetSmsSignName(v string) *PushTemplateRequest {
	s.SmsSignName = &v
	return s
}

func (s *PushTemplateRequest) SetSmsStrategy(v int32) *PushTemplateRequest {
	s.SmsStrategy = &v
	return s
}

func (s *PushTemplateRequest) SetSmsTemplateCode(v string) *PushTemplateRequest {
	s.SmsTemplateCode = &v
	return s
}

func (s *PushTemplateRequest) SetSmsTemplateParam(v string) *PushTemplateRequest {
	s.SmsTemplateParam = &v
	return s
}

func (s *PushTemplateRequest) SetStrategyContent(v string) *PushTemplateRequest {
	s.StrategyContent = &v
	return s
}

func (s *PushTemplateRequest) SetStrategyType(v int32) *PushTemplateRequest {
	s.StrategyType = &v
	return s
}

func (s *PushTemplateRequest) SetTargetMsgkey(v string) *PushTemplateRequest {
	s.TargetMsgkey = &v
	return s
}

func (s *PushTemplateRequest) SetTaskName(v string) *PushTemplateRequest {
	s.TaskName = &v
	return s
}

func (s *PushTemplateRequest) SetTemplateKeyValue(v string) *PushTemplateRequest {
	s.TemplateKeyValue = &v
	return s
}

func (s *PushTemplateRequest) SetTemplateName(v string) *PushTemplateRequest {
	s.TemplateName = &v
	return s
}

func (s *PushTemplateRequest) SetThirdChannelCategory(v map[string]interface{}) *PushTemplateRequest {
	s.ThirdChannelCategory = v
	return s
}

func (s *PushTemplateRequest) SetWorkspaceId(v string) *PushTemplateRequest {
	s.WorkspaceId = &v
	return s
}

type PushTemplateShrinkRequest struct {
	AppId                      *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ChannelId                  *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	Classification             *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	DeliveryType               *int64  `json:"DeliveryType,omitempty" xml:"DeliveryType,omitempty"`
	ExpiredSeconds             *int64  `json:"ExpiredSeconds,omitempty" xml:"ExpiredSeconds,omitempty"`
	ExtendedParams             *string `json:"ExtendedParams,omitempty" xml:"ExtendedParams,omitempty"`
	MiChannelId                *string `json:"MiChannelId,omitempty" xml:"MiChannelId,omitempty"`
	NotifyType                 *string `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	PushAction                 *int64  `json:"PushAction,omitempty" xml:"PushAction,omitempty"`
	Silent                     *int64  `json:"Silent,omitempty" xml:"Silent,omitempty"`
	SmsSignName                *string `json:"SmsSignName,omitempty" xml:"SmsSignName,omitempty"`
	SmsStrategy                *int32  `json:"SmsStrategy,omitempty" xml:"SmsStrategy,omitempty"`
	SmsTemplateCode            *string `json:"SmsTemplateCode,omitempty" xml:"SmsTemplateCode,omitempty"`
	SmsTemplateParam           *string `json:"SmsTemplateParam,omitempty" xml:"SmsTemplateParam,omitempty"`
	StrategyContent            *string `json:"StrategyContent,omitempty" xml:"StrategyContent,omitempty"`
	StrategyType               *int32  `json:"StrategyType,omitempty" xml:"StrategyType,omitempty"`
	TargetMsgkey               *string `json:"TargetMsgkey,omitempty" xml:"TargetMsgkey,omitempty"`
	TaskName                   *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TemplateKeyValue           *string `json:"TemplateKeyValue,omitempty" xml:"TemplateKeyValue,omitempty"`
	TemplateName               *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	ThirdChannelCategoryShrink *string `json:"ThirdChannelCategory,omitempty" xml:"ThirdChannelCategory,omitempty"`
	WorkspaceId                *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s PushTemplateShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s PushTemplateShrinkRequest) GoString() string {
	return s.String()
}

func (s *PushTemplateShrinkRequest) SetAppId(v string) *PushTemplateShrinkRequest {
	s.AppId = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetChannelId(v string) *PushTemplateShrinkRequest {
	s.ChannelId = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetClassification(v string) *PushTemplateShrinkRequest {
	s.Classification = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetDeliveryType(v int64) *PushTemplateShrinkRequest {
	s.DeliveryType = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetExpiredSeconds(v int64) *PushTemplateShrinkRequest {
	s.ExpiredSeconds = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetExtendedParams(v string) *PushTemplateShrinkRequest {
	s.ExtendedParams = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetMiChannelId(v string) *PushTemplateShrinkRequest {
	s.MiChannelId = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetNotifyType(v string) *PushTemplateShrinkRequest {
	s.NotifyType = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetPushAction(v int64) *PushTemplateShrinkRequest {
	s.PushAction = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetSilent(v int64) *PushTemplateShrinkRequest {
	s.Silent = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetSmsSignName(v string) *PushTemplateShrinkRequest {
	s.SmsSignName = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetSmsStrategy(v int32) *PushTemplateShrinkRequest {
	s.SmsStrategy = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetSmsTemplateCode(v string) *PushTemplateShrinkRequest {
	s.SmsTemplateCode = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetSmsTemplateParam(v string) *PushTemplateShrinkRequest {
	s.SmsTemplateParam = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetStrategyContent(v string) *PushTemplateShrinkRequest {
	s.StrategyContent = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetStrategyType(v int32) *PushTemplateShrinkRequest {
	s.StrategyType = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetTargetMsgkey(v string) *PushTemplateShrinkRequest {
	s.TargetMsgkey = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetTaskName(v string) *PushTemplateShrinkRequest {
	s.TaskName = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetTemplateKeyValue(v string) *PushTemplateShrinkRequest {
	s.TemplateKeyValue = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetTemplateName(v string) *PushTemplateShrinkRequest {
	s.TemplateName = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetThirdChannelCategoryShrink(v string) *PushTemplateShrinkRequest {
	s.ThirdChannelCategoryShrink = &v
	return s
}

func (s *PushTemplateShrinkRequest) SetWorkspaceId(v string) *PushTemplateShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type PushTemplateResponseBody struct {
	PushResult    *PushTemplateResponseBodyPushResult `json:"PushResult,omitempty" xml:"PushResult,omitempty" type:"Struct"`
	RequestId     *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                             `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage *string                             `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s PushTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PushTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *PushTemplateResponseBody) SetPushResult(v *PushTemplateResponseBodyPushResult) *PushTemplateResponseBody {
	s.PushResult = v
	return s
}

func (s *PushTemplateResponseBody) SetRequestId(v string) *PushTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *PushTemplateResponseBody) SetResultCode(v string) *PushTemplateResponseBody {
	s.ResultCode = &v
	return s
}

func (s *PushTemplateResponseBody) SetResultMessage(v string) *PushTemplateResponseBody {
	s.ResultMessage = &v
	return s
}

type PushTemplateResponseBodyPushResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PushTemplateResponseBodyPushResult) String() string {
	return tea.Prettify(s)
}

func (s PushTemplateResponseBodyPushResult) GoString() string {
	return s.String()
}

func (s *PushTemplateResponseBodyPushResult) SetData(v string) *PushTemplateResponseBodyPushResult {
	s.Data = &v
	return s
}

func (s *PushTemplateResponseBodyPushResult) SetResultMsg(v string) *PushTemplateResponseBodyPushResult {
	s.ResultMsg = &v
	return s
}

func (s *PushTemplateResponseBodyPushResult) SetSuccess(v bool) *PushTemplateResponseBodyPushResult {
	s.Success = &v
	return s
}

type PushTemplateResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PushTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PushTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s PushTemplateResponse) GoString() string {
	return s.String()
}

func (s *PushTemplateResponse) SetHeaders(v map[string]*string) *PushTemplateResponse {
	s.Headers = v
	return s
}

func (s *PushTemplateResponse) SetStatusCode(v int32) *PushTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *PushTemplateResponse) SetBody(v *PushTemplateResponseBody) *PushTemplateResponse {
	s.Body = v
	return s
}

type PushUnBindRequest struct {
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DeliveryToken *string `json:"DeliveryToken,omitempty" xml:"DeliveryToken,omitempty"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	WorkspaceId   *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s PushUnBindRequest) String() string {
	return tea.Prettify(s)
}

func (s PushUnBindRequest) GoString() string {
	return s.String()
}

func (s *PushUnBindRequest) SetAppId(v string) *PushUnBindRequest {
	s.AppId = &v
	return s
}

func (s *PushUnBindRequest) SetDeliveryToken(v string) *PushUnBindRequest {
	s.DeliveryToken = &v
	return s
}

func (s *PushUnBindRequest) SetUserId(v string) *PushUnBindRequest {
	s.UserId = &v
	return s
}

func (s *PushUnBindRequest) SetWorkspaceId(v string) *PushUnBindRequest {
	s.WorkspaceId = &v
	return s
}

type PushUnBindResponseBody struct {
	PushResult    *PushUnBindResponseBodyPushResult `json:"PushResult,omitempty" xml:"PushResult,omitempty" type:"Struct"`
	RequestId     *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                           `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage *string                           `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s PushUnBindResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PushUnBindResponseBody) GoString() string {
	return s.String()
}

func (s *PushUnBindResponseBody) SetPushResult(v *PushUnBindResponseBodyPushResult) *PushUnBindResponseBody {
	s.PushResult = v
	return s
}

func (s *PushUnBindResponseBody) SetRequestId(v string) *PushUnBindResponseBody {
	s.RequestId = &v
	return s
}

func (s *PushUnBindResponseBody) SetResultCode(v string) *PushUnBindResponseBody {
	s.ResultCode = &v
	return s
}

func (s *PushUnBindResponseBody) SetResultMessage(v string) *PushUnBindResponseBody {
	s.ResultMessage = &v
	return s
}

type PushUnBindResponseBodyPushResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PushUnBindResponseBodyPushResult) String() string {
	return tea.Prettify(s)
}

func (s PushUnBindResponseBodyPushResult) GoString() string {
	return s.String()
}

func (s *PushUnBindResponseBodyPushResult) SetData(v string) *PushUnBindResponseBodyPushResult {
	s.Data = &v
	return s
}

func (s *PushUnBindResponseBodyPushResult) SetResultMsg(v string) *PushUnBindResponseBodyPushResult {
	s.ResultMsg = &v
	return s
}

func (s *PushUnBindResponseBodyPushResult) SetSuccess(v bool) *PushUnBindResponseBodyPushResult {
	s.Success = &v
	return s
}

type PushUnBindResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PushUnBindResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PushUnBindResponse) String() string {
	return tea.Prettify(s)
}

func (s PushUnBindResponse) GoString() string {
	return s.String()
}

func (s *PushUnBindResponse) SetHeaders(v map[string]*string) *PushUnBindResponse {
	s.Headers = v
	return s
}

func (s *PushUnBindResponse) SetStatusCode(v int32) *PushUnBindResponse {
	s.StatusCode = &v
	return s
}

func (s *PushUnBindResponse) SetBody(v *PushUnBindResponseBody) *PushUnBindResponse {
	s.Body = v
	return s
}

type QueryMappCenterAppRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMappCenterAppRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMappCenterAppRequest) GoString() string {
	return s.String()
}

func (s *QueryMappCenterAppRequest) SetAppId(v string) *QueryMappCenterAppRequest {
	s.AppId = &v
	return s
}

func (s *QueryMappCenterAppRequest) SetWorkspaceId(v string) *QueryMappCenterAppRequest {
	s.WorkspaceId = &v
	return s
}

type QueryMappCenterAppResponseBody struct {
	QueryMappCenterAppResult *QueryMappCenterAppResponseBodyQueryMappCenterAppResult `json:"QueryMappCenterAppResult,omitempty" xml:"QueryMappCenterAppResult,omitempty" type:"Struct"`
	RequestId                *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode               *string                                                 `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage            *string                                                 `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s QueryMappCenterAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMappCenterAppResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMappCenterAppResponseBody) SetQueryMappCenterAppResult(v *QueryMappCenterAppResponseBodyQueryMappCenterAppResult) *QueryMappCenterAppResponseBody {
	s.QueryMappCenterAppResult = v
	return s
}

func (s *QueryMappCenterAppResponseBody) SetRequestId(v string) *QueryMappCenterAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMappCenterAppResponseBody) SetResultCode(v string) *QueryMappCenterAppResponseBody {
	s.ResultCode = &v
	return s
}

func (s *QueryMappCenterAppResponseBody) SetResultMessage(v string) *QueryMappCenterAppResponseBody {
	s.ResultMessage = &v
	return s
}

type QueryMappCenterAppResponseBodyQueryMappCenterAppResult struct {
	MappCenterApp *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp `json:"MappCenterApp,omitempty" xml:"MappCenterApp,omitempty" type:"Struct"`
	ResultMsg     *string                                                              `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success       *bool                                                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryMappCenterAppResponseBodyQueryMappCenterAppResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMappCenterAppResponseBodyQueryMappCenterAppResult) GoString() string {
	return s.String()
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResult) SetMappCenterApp(v *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) *QueryMappCenterAppResponseBodyQueryMappCenterAppResult {
	s.MappCenterApp = v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResult) SetResultMsg(v string) *QueryMappCenterAppResponseBodyQueryMappCenterAppResult {
	s.ResultMsg = &v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResult) SetSuccess(v bool) *QueryMappCenterAppResponseBodyQueryMappCenterAppResult {
	s.Success = &v
	return s
}

type QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp struct {
	AndroidConfig *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppAndroidConfig `json:"AndroidConfig,omitempty" xml:"AndroidConfig,omitempty" type:"Struct"`
	AppDesc       *string                                                                           `json:"AppDesc,omitempty" xml:"AppDesc,omitempty"`
	AppIcon       *string                                                                           `json:"AppIcon,omitempty" xml:"AppIcon,omitempty"`
	AppId         *string                                                                           `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName       *string                                                                           `json:"AppName,omitempty" xml:"AppName,omitempty"`
	AppSecret     *string                                                                           `json:"AppSecret,omitempty" xml:"AppSecret,omitempty"`
	Creator       *string                                                                           `json:"Creator,omitempty" xml:"Creator,omitempty"`
	GmtCreate     *string                                                                           `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified   *string                                                                           `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id            *int64                                                                            `json:"Id,omitempty" xml:"Id,omitempty"`
	IosConfig     *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppIosConfig     `json:"IosConfig,omitempty" xml:"IosConfig,omitempty" type:"Struct"`
	Modifier      *string                                                                           `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	MonitorJson   *string                                                                           `json:"MonitorJson,omitempty" xml:"MonitorJson,omitempty"`
	Status        *int64                                                                            `json:"Status,omitempty" xml:"Status,omitempty"`
	TenantId      *string                                                                           `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Type          *int64                                                                            `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) String() string {
	return tea.Prettify(s)
}

func (s QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) GoString() string {
	return s.String()
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) SetAndroidConfig(v *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppAndroidConfig) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp {
	s.AndroidConfig = v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) SetAppDesc(v string) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp {
	s.AppDesc = &v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) SetAppIcon(v string) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp {
	s.AppIcon = &v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) SetAppId(v string) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp {
	s.AppId = &v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) SetAppName(v string) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp {
	s.AppName = &v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) SetAppSecret(v string) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp {
	s.AppSecret = &v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) SetCreator(v string) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp {
	s.Creator = &v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) SetGmtCreate(v string) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp {
	s.GmtCreate = &v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) SetGmtModified(v string) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp {
	s.GmtModified = &v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) SetId(v int64) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp {
	s.Id = &v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) SetIosConfig(v *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppIosConfig) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp {
	s.IosConfig = v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) SetModifier(v string) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp {
	s.Modifier = &v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) SetMonitorJson(v string) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp {
	s.MonitorJson = &v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) SetStatus(v int64) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp {
	s.Status = &v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) SetTenantId(v string) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp {
	s.TenantId = &v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp) SetType(v int64) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterApp {
	s.Type = &v
	return s
}

type QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppAndroidConfig struct {
	CertRSA     *string `json:"CertRSA,omitempty" xml:"CertRSA,omitempty"`
	PackageName *string `json:"PackageName,omitempty" xml:"PackageName,omitempty"`
}

func (s QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppAndroidConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppAndroidConfig) GoString() string {
	return s.String()
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppAndroidConfig) SetCertRSA(v string) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppAndroidConfig {
	s.CertRSA = &v
	return s
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppAndroidConfig) SetPackageName(v string) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppAndroidConfig {
	s.PackageName = &v
	return s
}

type QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppIosConfig struct {
	BundleId *string `json:"BundleId,omitempty" xml:"BundleId,omitempty"`
}

func (s QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppIosConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppIosConfig) GoString() string {
	return s.String()
}

func (s *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppIosConfig) SetBundleId(v string) *QueryMappCenterAppResponseBodyQueryMappCenterAppResultMappCenterAppIosConfig {
	s.BundleId = &v
	return s
}

type QueryMappCenterAppResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryMappCenterAppResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMappCenterAppResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMappCenterAppResponse) GoString() string {
	return s.String()
}

func (s *QueryMappCenterAppResponse) SetHeaders(v map[string]*string) *QueryMappCenterAppResponse {
	s.Headers = v
	return s
}

func (s *QueryMappCenterAppResponse) SetStatusCode(v int32) *QueryMappCenterAppResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMappCenterAppResponse) SetBody(v *QueryMappCenterAppResponseBody) *QueryMappCenterAppResponse {
	s.Body = v
	return s
}

type QueryMcdpAimRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMcdpAimRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMcdpAimRequest) GoString() string {
	return s.String()
}

func (s *QueryMcdpAimRequest) SetAppId(v string) *QueryMcdpAimRequest {
	s.AppId = &v
	return s
}

func (s *QueryMcdpAimRequest) SetId(v int64) *QueryMcdpAimRequest {
	s.Id = &v
	return s
}

func (s *QueryMcdpAimRequest) SetTenantId(v string) *QueryMcdpAimRequest {
	s.TenantId = &v
	return s
}

func (s *QueryMcdpAimRequest) SetWorkspaceId(v string) *QueryMcdpAimRequest {
	s.WorkspaceId = &v
	return s
}

type QueryMcdpAimResponseBody struct {
	RequestId     *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *QueryMcdpAimResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s QueryMcdpAimResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMcdpAimResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMcdpAimResponseBody) SetRequestId(v string) *QueryMcdpAimResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMcdpAimResponseBody) SetResultCode(v string) *QueryMcdpAimResponseBody {
	s.ResultCode = &v
	return s
}

func (s *QueryMcdpAimResponseBody) SetResultContent(v *QueryMcdpAimResponseBodyResultContent) *QueryMcdpAimResponseBody {
	s.ResultContent = v
	return s
}

func (s *QueryMcdpAimResponseBody) SetResultMessage(v string) *QueryMcdpAimResponseBody {
	s.ResultMessage = &v
	return s
}

type QueryMcdpAimResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryMcdpAimResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s QueryMcdpAimResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *QueryMcdpAimResponseBodyResultContent) SetCode(v string) *QueryMcdpAimResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *QueryMcdpAimResponseBodyResultContent) SetData(v string) *QueryMcdpAimResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *QueryMcdpAimResponseBodyResultContent) SetMessage(v string) *QueryMcdpAimResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *QueryMcdpAimResponseBodyResultContent) SetSuccess(v bool) *QueryMcdpAimResponseBodyResultContent {
	s.Success = &v
	return s
}

type QueryMcdpAimResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryMcdpAimResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMcdpAimResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMcdpAimResponse) GoString() string {
	return s.String()
}

func (s *QueryMcdpAimResponse) SetHeaders(v map[string]*string) *QueryMcdpAimResponse {
	s.Headers = v
	return s
}

func (s *QueryMcdpAimResponse) SetStatusCode(v int32) *QueryMcdpAimResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMcdpAimResponse) SetBody(v *QueryMcdpAimResponseBody) *QueryMcdpAimResponse {
	s.Body = v
	return s
}

type QueryMcdpZoneRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMcdpZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMcdpZoneRequest) GoString() string {
	return s.String()
}

func (s *QueryMcdpZoneRequest) SetAppId(v string) *QueryMcdpZoneRequest {
	s.AppId = &v
	return s
}

func (s *QueryMcdpZoneRequest) SetId(v int64) *QueryMcdpZoneRequest {
	s.Id = &v
	return s
}

func (s *QueryMcdpZoneRequest) SetTenantId(v string) *QueryMcdpZoneRequest {
	s.TenantId = &v
	return s
}

func (s *QueryMcdpZoneRequest) SetWorkspaceId(v string) *QueryMcdpZoneRequest {
	s.WorkspaceId = &v
	return s
}

type QueryMcdpZoneResponseBody struct {
	RequestId     *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                 `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *QueryMcdpZoneResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                 `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s QueryMcdpZoneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMcdpZoneResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMcdpZoneResponseBody) SetRequestId(v string) *QueryMcdpZoneResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMcdpZoneResponseBody) SetResultCode(v string) *QueryMcdpZoneResponseBody {
	s.ResultCode = &v
	return s
}

func (s *QueryMcdpZoneResponseBody) SetResultContent(v *QueryMcdpZoneResponseBodyResultContent) *QueryMcdpZoneResponseBody {
	s.ResultContent = v
	return s
}

func (s *QueryMcdpZoneResponseBody) SetResultMessage(v string) *QueryMcdpZoneResponseBody {
	s.ResultMessage = &v
	return s
}

type QueryMcdpZoneResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryMcdpZoneResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s QueryMcdpZoneResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *QueryMcdpZoneResponseBodyResultContent) SetCode(v string) *QueryMcdpZoneResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *QueryMcdpZoneResponseBodyResultContent) SetData(v string) *QueryMcdpZoneResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *QueryMcdpZoneResponseBodyResultContent) SetMessage(v string) *QueryMcdpZoneResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *QueryMcdpZoneResponseBodyResultContent) SetSuccess(v bool) *QueryMcdpZoneResponseBodyResultContent {
	s.Success = &v
	return s
}

type QueryMcdpZoneResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryMcdpZoneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMcdpZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMcdpZoneResponse) GoString() string {
	return s.String()
}

func (s *QueryMcdpZoneResponse) SetHeaders(v map[string]*string) *QueryMcdpZoneResponse {
	s.Headers = v
	return s
}

func (s *QueryMcdpZoneResponse) SetStatusCode(v int32) *QueryMcdpZoneResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMcdpZoneResponse) SetBody(v *QueryMcdpZoneResponseBody) *QueryMcdpZoneResponse {
	s.Body = v
	return s
}

type QueryMcubeMiniPackageRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	H5Id        *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMcubeMiniPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMcubeMiniPackageRequest) GoString() string {
	return s.String()
}

func (s *QueryMcubeMiniPackageRequest) SetAppId(v string) *QueryMcubeMiniPackageRequest {
	s.AppId = &v
	return s
}

func (s *QueryMcubeMiniPackageRequest) SetH5Id(v string) *QueryMcubeMiniPackageRequest {
	s.H5Id = &v
	return s
}

func (s *QueryMcubeMiniPackageRequest) SetId(v string) *QueryMcubeMiniPackageRequest {
	s.Id = &v
	return s
}

func (s *QueryMcubeMiniPackageRequest) SetTenantId(v string) *QueryMcubeMiniPackageRequest {
	s.TenantId = &v
	return s
}

func (s *QueryMcubeMiniPackageRequest) SetWorkspaceId(v string) *QueryMcubeMiniPackageRequest {
	s.WorkspaceId = &v
	return s
}

type QueryMcubeMiniPackageResponseBody struct {
	QueryMiniPackageResult *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResult `json:"QueryMiniPackageResult,omitempty" xml:"QueryMiniPackageResult,omitempty" type:"Struct"`
	RequestId              *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode             *string                                                  `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage          *string                                                  `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s QueryMcubeMiniPackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMcubeMiniPackageResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMcubeMiniPackageResponseBody) SetQueryMiniPackageResult(v *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResult) *QueryMcubeMiniPackageResponseBody {
	s.QueryMiniPackageResult = v
	return s
}

func (s *QueryMcubeMiniPackageResponseBody) SetRequestId(v string) *QueryMcubeMiniPackageResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBody) SetResultCode(v string) *QueryMcubeMiniPackageResponseBody {
	s.ResultCode = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBody) SetResultMessage(v string) *QueryMcubeMiniPackageResponseBody {
	s.ResultMessage = &v
	return s
}

type QueryMcubeMiniPackageResponseBodyQueryMiniPackageResult struct {
	MiniPackageInfo *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo `json:"MiniPackageInfo,omitempty" xml:"MiniPackageInfo,omitempty" type:"Struct"`
	ResultMsg       *string                                                                 `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success         *bool                                                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryMcubeMiniPackageResponseBodyQueryMiniPackageResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMcubeMiniPackageResponseBodyQueryMiniPackageResult) GoString() string {
	return s.String()
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResult) SetMiniPackageInfo(v *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResult {
	s.MiniPackageInfo = v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResult) SetResultMsg(v string) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResult {
	s.ResultMsg = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResult) SetSuccess(v bool) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResult {
	s.Success = &v
	return s
}

type QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo struct {
	AppCode          *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AutoInstall      *int64  `json:"AutoInstall,omitempty" xml:"AutoInstall,omitempty"`
	ClientVersionMax *string `json:"ClientVersionMax,omitempty" xml:"ClientVersionMax,omitempty"`
	ClientVersionMin *string `json:"ClientVersionMin,omitempty" xml:"ClientVersionMin,omitempty"`
	DownloadUrl      *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	ExtendInfo       *string `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty"`
	ExtraData        *string `json:"ExtraData,omitempty" xml:"ExtraData,omitempty"`
	FallbackBaseUrl  *string `json:"FallbackBaseUrl,omitempty" xml:"FallbackBaseUrl,omitempty"`
	GmtCreate        *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified      *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	H5Id             *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	H5Name           *string `json:"H5Name,omitempty" xml:"H5Name,omitempty"`
	H5Version        *string `json:"H5Version,omitempty" xml:"H5Version,omitempty"`
	Id               *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	InstallType      *int64  `json:"InstallType,omitempty" xml:"InstallType,omitempty"`
	MainUrl          *string `json:"MainUrl,omitempty" xml:"MainUrl,omitempty"`
	Memo             *string `json:"Memo,omitempty" xml:"Memo,omitempty"`
	PackageType      *int64  `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	Platform         *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	PublishPeriod    *int64  `json:"PublishPeriod,omitempty" xml:"PublishPeriod,omitempty"`
	ResourceType     *int64  `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Status           *int64  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) GoString() string {
	return s.String()
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetAppCode(v string) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.AppCode = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetAutoInstall(v int64) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.AutoInstall = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetClientVersionMax(v string) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.ClientVersionMax = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetClientVersionMin(v string) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.ClientVersionMin = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetDownloadUrl(v string) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.DownloadUrl = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetExtendInfo(v string) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.ExtendInfo = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetExtraData(v string) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.ExtraData = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetFallbackBaseUrl(v string) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.FallbackBaseUrl = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetGmtCreate(v string) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.GmtCreate = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetGmtModified(v string) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.GmtModified = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetH5Id(v string) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.H5Id = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetH5Name(v string) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.H5Name = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetH5Version(v string) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.H5Version = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetId(v int64) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.Id = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetInstallType(v int64) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.InstallType = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetMainUrl(v string) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.MainUrl = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetMemo(v string) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.Memo = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetPackageType(v int64) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.PackageType = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetPlatform(v string) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.Platform = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetPublishPeriod(v int64) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.PublishPeriod = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetResourceType(v int64) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.ResourceType = &v
	return s
}

func (s *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo) SetStatus(v int64) *QueryMcubeMiniPackageResponseBodyQueryMiniPackageResultMiniPackageInfo {
	s.Status = &v
	return s
}

type QueryMcubeMiniPackageResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryMcubeMiniPackageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMcubeMiniPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMcubeMiniPackageResponse) GoString() string {
	return s.String()
}

func (s *QueryMcubeMiniPackageResponse) SetHeaders(v map[string]*string) *QueryMcubeMiniPackageResponse {
	s.Headers = v
	return s
}

func (s *QueryMcubeMiniPackageResponse) SetStatusCode(v int32) *QueryMcubeMiniPackageResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMcubeMiniPackageResponse) SetBody(v *QueryMcubeMiniPackageResponseBody) *QueryMcubeMiniPackageResponse {
	s.Body = v
	return s
}

type QueryMcubeMiniTaskRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	TaskId      *int64  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMcubeMiniTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMcubeMiniTaskRequest) GoString() string {
	return s.String()
}

func (s *QueryMcubeMiniTaskRequest) SetAppId(v string) *QueryMcubeMiniTaskRequest {
	s.AppId = &v
	return s
}

func (s *QueryMcubeMiniTaskRequest) SetTaskId(v int64) *QueryMcubeMiniTaskRequest {
	s.TaskId = &v
	return s
}

func (s *QueryMcubeMiniTaskRequest) SetTenantId(v string) *QueryMcubeMiniTaskRequest {
	s.TenantId = &v
	return s
}

func (s *QueryMcubeMiniTaskRequest) SetWorkspaceId(v string) *QueryMcubeMiniTaskRequest {
	s.WorkspaceId = &v
	return s
}

type QueryMcubeMiniTaskResponseBody struct {
	QueryMiniTaskResult *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResult `json:"QueryMiniTaskResult,omitempty" xml:"QueryMiniTaskResult,omitempty" type:"Struct"`
	RequestId           *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode          *string                                            `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage       *string                                            `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s QueryMcubeMiniTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMcubeMiniTaskResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMcubeMiniTaskResponseBody) SetQueryMiniTaskResult(v *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResult) *QueryMcubeMiniTaskResponseBody {
	s.QueryMiniTaskResult = v
	return s
}

func (s *QueryMcubeMiniTaskResponseBody) SetRequestId(v string) *QueryMcubeMiniTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBody) SetResultCode(v string) *QueryMcubeMiniTaskResponseBody {
	s.ResultCode = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBody) SetResultMessage(v string) *QueryMcubeMiniTaskResponseBody {
	s.ResultMessage = &v
	return s
}

type QueryMcubeMiniTaskResponseBodyQueryMiniTaskResult struct {
	MiniTaskInfo *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo `json:"MiniTaskInfo,omitempty" xml:"MiniTaskInfo,omitempty" type:"Struct"`
	ResultMsg    *string                                                        `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success      *bool                                                          `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryMcubeMiniTaskResponseBodyQueryMiniTaskResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMcubeMiniTaskResponseBodyQueryMiniTaskResult) GoString() string {
	return s.String()
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResult) SetMiniTaskInfo(v *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResult {
	s.MiniTaskInfo = v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResult) SetResultMsg(v string) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResult {
	s.ResultMsg = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResult) SetSuccess(v bool) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResult {
	s.Success = &v
	return s
}

type QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo struct {
	AppCode         *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	GmtCreate       *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified     *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	GreyConfigInfo  *string `json:"GreyConfigInfo,omitempty" xml:"GreyConfigInfo,omitempty"`
	GreyEndtime     *string `json:"GreyEndtime,omitempty" xml:"GreyEndtime,omitempty"`
	GreyEndtimeData *string `json:"GreyEndtimeData,omitempty" xml:"GreyEndtimeData,omitempty"`
	GreyNum         *int64  `json:"GreyNum,omitempty" xml:"GreyNum,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Memo            *string `json:"Memo,omitempty" xml:"Memo,omitempty"`
	PackageId       *int64  `json:"PackageId,omitempty" xml:"PackageId,omitempty"`
	Platform        *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	ProductVersion  *string `json:"ProductVersion,omitempty" xml:"ProductVersion,omitempty"`
	PublishMode     *int64  `json:"PublishMode,omitempty" xml:"PublishMode,omitempty"`
	PublishType     *int64  `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskStatus      *int64  `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	WhitelistIds    *string `json:"WhitelistIds,omitempty" xml:"WhitelistIds,omitempty"`
}

func (s QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) GoString() string {
	return s.String()
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetAppCode(v string) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.AppCode = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetGmtCreate(v string) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.GmtCreate = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetGmtModified(v string) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.GmtModified = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetGreyConfigInfo(v string) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.GreyConfigInfo = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetGreyEndtime(v string) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.GreyEndtime = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetGreyEndtimeData(v string) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.GreyEndtimeData = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetGreyNum(v int64) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.GreyNum = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetId(v int64) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.Id = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetMemo(v string) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.Memo = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetPackageId(v int64) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.PackageId = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetPlatform(v string) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.Platform = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetProductVersion(v string) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.ProductVersion = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetPublishMode(v int64) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.PublishMode = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetPublishType(v int64) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.PublishType = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetStatus(v string) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.Status = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetTaskStatus(v int64) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.TaskStatus = &v
	return s
}

func (s *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo) SetWhitelistIds(v string) *QueryMcubeMiniTaskResponseBodyQueryMiniTaskResultMiniTaskInfo {
	s.WhitelistIds = &v
	return s
}

type QueryMcubeMiniTaskResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryMcubeMiniTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMcubeMiniTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMcubeMiniTaskResponse) GoString() string {
	return s.String()
}

func (s *QueryMcubeMiniTaskResponse) SetHeaders(v map[string]*string) *QueryMcubeMiniTaskResponse {
	s.Headers = v
	return s
}

func (s *QueryMcubeMiniTaskResponse) SetStatusCode(v int32) *QueryMcubeMiniTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMcubeMiniTaskResponse) SetBody(v *QueryMcubeMiniTaskResponseBody) *QueryMcubeMiniTaskResponse {
	s.Body = v
	return s
}

type QueryMcubeVhostRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMcubeVhostRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMcubeVhostRequest) GoString() string {
	return s.String()
}

func (s *QueryMcubeVhostRequest) SetAppId(v string) *QueryMcubeVhostRequest {
	s.AppId = &v
	return s
}

func (s *QueryMcubeVhostRequest) SetTenantId(v string) *QueryMcubeVhostRequest {
	s.TenantId = &v
	return s
}

func (s *QueryMcubeVhostRequest) SetWorkspaceId(v string) *QueryMcubeVhostRequest {
	s.WorkspaceId = &v
	return s
}

type QueryMcubeVhostResponseBody struct {
	QueryVhostResult *QueryMcubeVhostResponseBodyQueryVhostResult `json:"QueryVhostResult,omitempty" xml:"QueryVhostResult,omitempty" type:"Struct"`
	RequestId        *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode       *string                                      `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage    *string                                      `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s QueryMcubeVhostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMcubeVhostResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMcubeVhostResponseBody) SetQueryVhostResult(v *QueryMcubeVhostResponseBodyQueryVhostResult) *QueryMcubeVhostResponseBody {
	s.QueryVhostResult = v
	return s
}

func (s *QueryMcubeVhostResponseBody) SetRequestId(v string) *QueryMcubeVhostResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMcubeVhostResponseBody) SetResultCode(v string) *QueryMcubeVhostResponseBody {
	s.ResultCode = &v
	return s
}

func (s *QueryMcubeVhostResponseBody) SetResultMessage(v string) *QueryMcubeVhostResponseBody {
	s.ResultMessage = &v
	return s
}

type QueryMcubeVhostResponseBodyQueryVhostResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryMcubeVhostResponseBodyQueryVhostResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMcubeVhostResponseBodyQueryVhostResult) GoString() string {
	return s.String()
}

func (s *QueryMcubeVhostResponseBodyQueryVhostResult) SetData(v string) *QueryMcubeVhostResponseBodyQueryVhostResult {
	s.Data = &v
	return s
}

func (s *QueryMcubeVhostResponseBodyQueryVhostResult) SetResultMsg(v string) *QueryMcubeVhostResponseBodyQueryVhostResult {
	s.ResultMsg = &v
	return s
}

func (s *QueryMcubeVhostResponseBodyQueryVhostResult) SetSuccess(v bool) *QueryMcubeVhostResponseBodyQueryVhostResult {
	s.Success = &v
	return s
}

type QueryMcubeVhostResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryMcubeVhostResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMcubeVhostResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMcubeVhostResponse) GoString() string {
	return s.String()
}

func (s *QueryMcubeVhostResponse) SetHeaders(v map[string]*string) *QueryMcubeVhostResponse {
	s.Headers = v
	return s
}

func (s *QueryMcubeVhostResponse) SetStatusCode(v int32) *QueryMcubeVhostResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMcubeVhostResponse) SetBody(v *QueryMcubeVhostResponseBody) *QueryMcubeVhostResponse {
	s.Body = v
	return s
}

type QueryMdsUpgradeTaskDetailRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	TaskId      *int64  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMdsUpgradeTaskDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMdsUpgradeTaskDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryMdsUpgradeTaskDetailRequest) SetAppId(v string) *QueryMdsUpgradeTaskDetailRequest {
	s.AppId = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailRequest) SetTaskId(v int64) *QueryMdsUpgradeTaskDetailRequest {
	s.TaskId = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailRequest) SetTenantId(v string) *QueryMdsUpgradeTaskDetailRequest {
	s.TenantId = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailRequest) SetWorkspaceId(v string) *QueryMdsUpgradeTaskDetailRequest {
	s.WorkspaceId = &v
	return s
}

type QueryMdsUpgradeTaskDetailResponseBody struct {
	RequestId     *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                             `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *QueryMdsUpgradeTaskDetailResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                             `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s QueryMdsUpgradeTaskDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMdsUpgradeTaskDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMdsUpgradeTaskDetailResponseBody) SetRequestId(v string) *QueryMdsUpgradeTaskDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBody) SetResultCode(v string) *QueryMdsUpgradeTaskDetailResponseBody {
	s.ResultCode = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBody) SetResultContent(v *QueryMdsUpgradeTaskDetailResponseBodyResultContent) *QueryMdsUpgradeTaskDetailResponseBody {
	s.ResultContent = v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBody) SetResultMessage(v string) *QueryMdsUpgradeTaskDetailResponseBody {
	s.ResultMessage = &v
	return s
}

type QueryMdsUpgradeTaskDetailResponseBodyResultContent struct {
	Data      *QueryMdsUpgradeTaskDetailResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMdsUpgradeTaskDetailResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s QueryMdsUpgradeTaskDetailResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContent) SetData(v *QueryMdsUpgradeTaskDetailResponseBodyResultContentData) *QueryMdsUpgradeTaskDetailResponseBodyResultContent {
	s.Data = v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContent) SetRequestId(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContent {
	s.RequestId = &v
	return s
}

type QueryMdsUpgradeTaskDetailResponseBodyResultContentData struct {
	Content   *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	ErrorCode *string                                                        `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultMsg *string                                                        `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool                                                          `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryMdsUpgradeTaskDetailResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s QueryMdsUpgradeTaskDetailResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentData) SetContent(v *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) *QueryMdsUpgradeTaskDetailResponseBodyResultContentData {
	s.Content = v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentData) SetErrorCode(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentData {
	s.ErrorCode = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentData) SetRequestId(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentData {
	s.RequestId = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentData) SetResultMsg(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentData {
	s.ResultMsg = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentData) SetSuccess(v bool) *QueryMdsUpgradeTaskDetailResponseBodyResultContentData {
	s.Success = &v
	return s
}

type QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent struct {
	AppCode             *string                                                                      `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AppId               *string                                                                      `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Appstoreurl         *string                                                                      `json:"Appstoreurl,omitempty" xml:"Appstoreurl,omitempty"`
	ChannelContains     *string                                                                      `json:"ChannelContains,omitempty" xml:"ChannelContains,omitempty"`
	ChannelExcludes     *string                                                                      `json:"ChannelExcludes,omitempty" xml:"ChannelExcludes,omitempty"`
	CityContains        *string                                                                      `json:"CityContains,omitempty" xml:"CityContains,omitempty"`
	CityExcludes        *string                                                                      `json:"CityExcludes,omitempty" xml:"CityExcludes,omitempty"`
	Creator             *string                                                                      `json:"Creator,omitempty" xml:"Creator,omitempty"`
	DeviceGreyNum       *int64                                                                       `json:"DeviceGreyNum,omitempty" xml:"DeviceGreyNum,omitempty"`
	DevicePercent       *int64                                                                       `json:"DevicePercent,omitempty" xml:"DevicePercent,omitempty"`
	DownloadUrl         *string                                                                      `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	ExecutionOrder      *int64                                                                       `json:"ExecutionOrder,omitempty" xml:"ExecutionOrder,omitempty"`
	GmtCreateStr        *string                                                                      `json:"GmtCreateStr,omitempty" xml:"GmtCreateStr,omitempty"`
	GreyConfigInfo      *string                                                                      `json:"GreyConfigInfo,omitempty" xml:"GreyConfigInfo,omitempty"`
	GreyEndtimeData     *string                                                                      `json:"GreyEndtimeData,omitempty" xml:"GreyEndtimeData,omitempty"`
	GreyNotice          *int64                                                                       `json:"GreyNotice,omitempty" xml:"GreyNotice,omitempty"`
	GreyNum             *int64                                                                       `json:"GreyNum,omitempty" xml:"GreyNum,omitempty"`
	GreyUv              *int64                                                                       `json:"GreyUv,omitempty" xml:"GreyUv,omitempty"`
	Id                  *int64                                                                       `json:"Id,omitempty" xml:"Id,omitempty"`
	InnerVersion        *string                                                                      `json:"InnerVersion,omitempty" xml:"InnerVersion,omitempty"`
	IsEnterprise        *int64                                                                       `json:"IsEnterprise,omitempty" xml:"IsEnterprise,omitempty"`
	IsOfficial          *int64                                                                       `json:"IsOfficial,omitempty" xml:"IsOfficial,omitempty"`
	IsPush              *int64                                                                       `json:"IsPush,omitempty" xml:"IsPush,omitempty"`
	IsRc                *int64                                                                       `json:"IsRc,omitempty" xml:"IsRc,omitempty"`
	IsRelease           *int64                                                                       `json:"IsRelease,omitempty" xml:"IsRelease,omitempty"`
	Memo                *string                                                                      `json:"Memo,omitempty" xml:"Memo,omitempty"`
	MobileModelContains *string                                                                      `json:"MobileModelContains,omitempty" xml:"MobileModelContains,omitempty"`
	MobileModelExcludes *string                                                                      `json:"MobileModelExcludes,omitempty" xml:"MobileModelExcludes,omitempty"`
	Modifier            *string                                                                      `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	NetType             *string                                                                      `json:"NetType,omitempty" xml:"NetType,omitempty"`
	OsVersion           *string                                                                      `json:"OsVersion,omitempty" xml:"OsVersion,omitempty"`
	PackageInfoId       *int64                                                                       `json:"PackageInfoId,omitempty" xml:"PackageInfoId,omitempty"`
	PackageType         *string                                                                      `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	Platform            *string                                                                      `json:"Platform,omitempty" xml:"Platform,omitempty"`
	ProductId           *string                                                                      `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	ProductVersion      *string                                                                      `json:"ProductVersion,omitempty" xml:"ProductVersion,omitempty"`
	PublishMode         *int64                                                                       `json:"PublishMode,omitempty" xml:"PublishMode,omitempty"`
	PublishType         *int64                                                                       `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	PushContent         *string                                                                      `json:"PushContent,omitempty" xml:"PushContent,omitempty"`
	QrcodeUrl           *string                                                                      `json:"QrcodeUrl,omitempty" xml:"QrcodeUrl,omitempty"`
	ReleaseType         *string                                                                      `json:"ReleaseType,omitempty" xml:"ReleaseType,omitempty"`
	RuleJsonList        []*QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList `json:"RuleJsonList,omitempty" xml:"RuleJsonList,omitempty" type:"Repeated"`
	SilentType          *int64                                                                       `json:"SilentType,omitempty" xml:"SilentType,omitempty"`
	SyncMode            *string                                                                      `json:"SyncMode,omitempty" xml:"SyncMode,omitempty"`
	SyncResult          *string                                                                      `json:"SyncResult,omitempty" xml:"SyncResult,omitempty"`
	TaskStatus          *int64                                                                       `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	UpgradeContent      *string                                                                      `json:"UpgradeContent,omitempty" xml:"UpgradeContent,omitempty"`
	UpgradeType         *int64                                                                       `json:"UpgradeType,omitempty" xml:"UpgradeType,omitempty"`
	UpgradeValidTime    *int64                                                                       `json:"UpgradeValidTime,omitempty" xml:"UpgradeValidTime,omitempty"`
	Whitelist           []*QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist    `json:"Whitelist,omitempty" xml:"Whitelist,omitempty" type:"Repeated"`
	WhitelistIds        *string                                                                      `json:"WhitelistIds,omitempty" xml:"WhitelistIds,omitempty"`
}

func (s QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) String() string {
	return tea.Prettify(s)
}

func (s QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) GoString() string {
	return s.String()
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetAppCode(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.AppCode = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetAppId(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.AppId = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetAppstoreurl(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.Appstoreurl = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetChannelContains(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.ChannelContains = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetChannelExcludes(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.ChannelExcludes = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetCityContains(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.CityContains = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetCityExcludes(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.CityExcludes = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetCreator(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.Creator = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetDeviceGreyNum(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.DeviceGreyNum = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetDevicePercent(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.DevicePercent = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetDownloadUrl(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.DownloadUrl = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetExecutionOrder(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.ExecutionOrder = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetGmtCreateStr(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.GmtCreateStr = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetGreyConfigInfo(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.GreyConfigInfo = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetGreyEndtimeData(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.GreyEndtimeData = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetGreyNotice(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.GreyNotice = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetGreyNum(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.GreyNum = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetGreyUv(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.GreyUv = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetId(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.Id = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetInnerVersion(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.InnerVersion = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetIsEnterprise(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.IsEnterprise = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetIsOfficial(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.IsOfficial = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetIsPush(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.IsPush = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetIsRc(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.IsRc = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetIsRelease(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.IsRelease = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetMemo(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.Memo = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetMobileModelContains(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.MobileModelContains = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetMobileModelExcludes(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.MobileModelExcludes = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetModifier(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.Modifier = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetNetType(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.NetType = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetOsVersion(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.OsVersion = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetPackageInfoId(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.PackageInfoId = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetPackageType(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.PackageType = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetPlatform(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.Platform = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetProductId(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.ProductId = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetProductVersion(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.ProductVersion = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetPublishMode(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.PublishMode = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetPublishType(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.PublishType = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetPushContent(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.PushContent = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetQrcodeUrl(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.QrcodeUrl = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetReleaseType(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.ReleaseType = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetRuleJsonList(v []*QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.RuleJsonList = v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetSilentType(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.SilentType = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetSyncMode(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.SyncMode = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetSyncResult(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.SyncResult = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetTaskStatus(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.TaskStatus = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetUpgradeContent(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.UpgradeContent = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetUpgradeType(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.UpgradeType = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetUpgradeValidTime(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.UpgradeValidTime = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetWhitelist(v []*QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.Whitelist = v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent) SetWhitelistIds(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContent {
	s.WhitelistIds = &v
	return s
}

type QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList struct {
	Operation   *string `json:"Operation,omitempty" xml:"Operation,omitempty"`
	RuleElement *string `json:"RuleElement,omitempty" xml:"RuleElement,omitempty"`
	RuleType    *string `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	Value       *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList) String() string {
	return tea.Prettify(s)
}

func (s QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList) GoString() string {
	return s.String()
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList) SetOperation(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList {
	s.Operation = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList) SetRuleElement(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList {
	s.RuleElement = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList) SetRuleType(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList {
	s.RuleType = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList) SetValue(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentRuleJsonList {
	s.Value = &v
	return s
}

type QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist struct {
	AppCode        *string `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	Business       *string `json:"Business,omitempty" xml:"Business,omitempty"`
	GmtModified    *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id             *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IdType         *string `json:"IdType,omitempty" xml:"IdType,omitempty"`
	Platform       *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	Status         *int64  `json:"Status,omitempty" xml:"Status,omitempty"`
	WhiteListCount *int64  `json:"WhiteListCount,omitempty" xml:"WhiteListCount,omitempty"`
	WhiteListName  *string `json:"WhiteListName,omitempty" xml:"WhiteListName,omitempty"`
}

func (s QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist) String() string {
	return tea.Prettify(s)
}

func (s QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist) GoString() string {
	return s.String()
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist) SetAppCode(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist {
	s.AppCode = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist) SetBusiness(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist {
	s.Business = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist) SetGmtModified(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist {
	s.GmtModified = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist) SetId(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist {
	s.Id = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist) SetIdType(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist {
	s.IdType = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist) SetPlatform(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist {
	s.Platform = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist) SetStatus(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist {
	s.Status = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist) SetWhiteListCount(v int64) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist {
	s.WhiteListCount = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist) SetWhiteListName(v string) *QueryMdsUpgradeTaskDetailResponseBodyResultContentDataContentWhitelist {
	s.WhiteListName = &v
	return s
}

type QueryMdsUpgradeTaskDetailResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryMdsUpgradeTaskDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMdsUpgradeTaskDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMdsUpgradeTaskDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryMdsUpgradeTaskDetailResponse) SetHeaders(v map[string]*string) *QueryMdsUpgradeTaskDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponse) SetStatusCode(v int32) *QueryMdsUpgradeTaskDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMdsUpgradeTaskDetailResponse) SetBody(v *QueryMdsUpgradeTaskDetailResponseBody) *QueryMdsUpgradeTaskDetailResponse {
	s.Body = v
	return s
}

type QueryMgsApipageRequest struct {
	ApiStatus     *string `json:"ApiStatus,omitempty" xml:"ApiStatus,omitempty"`
	ApiType       *string `json:"ApiType,omitempty" xml:"ApiType,omitempty"`
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Format        *string `json:"Format,omitempty" xml:"Format,omitempty"`
	Host          *string `json:"Host,omitempty" xml:"Host,omitempty"`
	NeedEncrypt   *string `json:"NeedEncrypt,omitempty" xml:"NeedEncrypt,omitempty"`
	NeedEtag      *string `json:"NeedEtag,omitempty" xml:"NeedEtag,omitempty"`
	NeedSign      *string `json:"NeedSign,omitempty" xml:"NeedSign,omitempty"`
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	OptFuzzy      *string `json:"OptFuzzy,omitempty" xml:"OptFuzzy,omitempty"`
	PageIndex     *int64  `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	PageSize      *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SysId         *int64  `json:"SysId,omitempty" xml:"SysId,omitempty"`
	SysName       *string `json:"SysName,omitempty" xml:"SysName,omitempty"`
	TenantId      *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId   *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMgsApipageRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApipageRequest) GoString() string {
	return s.String()
}

func (s *QueryMgsApipageRequest) SetApiStatus(v string) *QueryMgsApipageRequest {
	s.ApiStatus = &v
	return s
}

func (s *QueryMgsApipageRequest) SetApiType(v string) *QueryMgsApipageRequest {
	s.ApiType = &v
	return s
}

func (s *QueryMgsApipageRequest) SetAppId(v string) *QueryMgsApipageRequest {
	s.AppId = &v
	return s
}

func (s *QueryMgsApipageRequest) SetFormat(v string) *QueryMgsApipageRequest {
	s.Format = &v
	return s
}

func (s *QueryMgsApipageRequest) SetHost(v string) *QueryMgsApipageRequest {
	s.Host = &v
	return s
}

func (s *QueryMgsApipageRequest) SetNeedEncrypt(v string) *QueryMgsApipageRequest {
	s.NeedEncrypt = &v
	return s
}

func (s *QueryMgsApipageRequest) SetNeedEtag(v string) *QueryMgsApipageRequest {
	s.NeedEtag = &v
	return s
}

func (s *QueryMgsApipageRequest) SetNeedSign(v string) *QueryMgsApipageRequest {
	s.NeedSign = &v
	return s
}

func (s *QueryMgsApipageRequest) SetOperationType(v string) *QueryMgsApipageRequest {
	s.OperationType = &v
	return s
}

func (s *QueryMgsApipageRequest) SetOptFuzzy(v string) *QueryMgsApipageRequest {
	s.OptFuzzy = &v
	return s
}

func (s *QueryMgsApipageRequest) SetPageIndex(v int64) *QueryMgsApipageRequest {
	s.PageIndex = &v
	return s
}

func (s *QueryMgsApipageRequest) SetPageSize(v int64) *QueryMgsApipageRequest {
	s.PageSize = &v
	return s
}

func (s *QueryMgsApipageRequest) SetSysId(v int64) *QueryMgsApipageRequest {
	s.SysId = &v
	return s
}

func (s *QueryMgsApipageRequest) SetSysName(v string) *QueryMgsApipageRequest {
	s.SysName = &v
	return s
}

func (s *QueryMgsApipageRequest) SetTenantId(v string) *QueryMgsApipageRequest {
	s.TenantId = &v
	return s
}

func (s *QueryMgsApipageRequest) SetWorkspaceId(v string) *QueryMgsApipageRequest {
	s.WorkspaceId = &v
	return s
}

type QueryMgsApipageResponseBody struct {
	RequestId     *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                   `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *QueryMgsApipageResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                   `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s QueryMgsApipageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApipageResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMgsApipageResponseBody) SetRequestId(v string) *QueryMgsApipageResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMgsApipageResponseBody) SetResultCode(v string) *QueryMgsApipageResponseBody {
	s.ResultCode = &v
	return s
}

func (s *QueryMgsApipageResponseBody) SetResultContent(v *QueryMgsApipageResponseBodyResultContent) *QueryMgsApipageResponseBody {
	s.ResultContent = v
	return s
}

func (s *QueryMgsApipageResponseBody) SetResultMessage(v string) *QueryMgsApipageResponseBody {
	s.ResultMessage = &v
	return s
}

type QueryMgsApipageResponseBodyResultContent struct {
	Current  *int64                                          `json:"Current,omitempty" xml:"Current,omitempty"`
	List     []*QueryMgsApipageResponseBodyResultContentList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageSize *int64                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Total    *int64                                          `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QueryMgsApipageResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApipageResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *QueryMgsApipageResponseBodyResultContent) SetCurrent(v int64) *QueryMgsApipageResponseBodyResultContent {
	s.Current = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContent) SetList(v []*QueryMgsApipageResponseBodyResultContentList) *QueryMgsApipageResponseBodyResultContent {
	s.List = v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContent) SetPageSize(v int64) *QueryMgsApipageResponseBodyResultContent {
	s.PageSize = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContent) SetTotal(v int64) *QueryMgsApipageResponseBodyResultContent {
	s.Total = &v
	return s
}

type QueryMgsApipageResponseBodyResultContentList struct {
	ApiInvoker         *QueryMgsApipageResponseBodyResultContentListApiInvoker         `json:"ApiInvoker,omitempty" xml:"ApiInvoker,omitempty" type:"Struct"`
	ApiName            *string                                                         `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiStatus          *string                                                         `json:"ApiStatus,omitempty" xml:"ApiStatus,omitempty"`
	ApiType            *string                                                         `json:"ApiType,omitempty" xml:"ApiType,omitempty"`
	AppId              *string                                                         `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AuthRuleName       *string                                                         `json:"AuthRuleName,omitempty" xml:"AuthRuleName,omitempty"`
	CacheRule          *QueryMgsApipageResponseBodyResultContentListCacheRule          `json:"CacheRule,omitempty" xml:"CacheRule,omitempty" type:"Struct"`
	Charset            *string                                                         `json:"Charset,omitempty" xml:"Charset,omitempty"`
	CircuitBreakerRule *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule `json:"CircuitBreakerRule,omitempty" xml:"CircuitBreakerRule,omitempty" type:"Struct"`
	ContentType        *string                                                         `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	Description        *string                                                         `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtCreate          *string                                                         `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified        *string                                                         `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HeaderRule         []*QueryMgsApipageResponseBodyResultContentListHeaderRule       `json:"HeaderRule,omitempty" xml:"HeaderRule,omitempty" type:"Repeated"`
	HeaderRules        []*QueryMgsApipageResponseBodyResultContentListHeaderRules      `json:"HeaderRules,omitempty" xml:"HeaderRules,omitempty" type:"Repeated"`
	Host               *string                                                         `json:"Host,omitempty" xml:"Host,omitempty"`
	Id                 *int64                                                          `json:"Id,omitempty" xml:"Id,omitempty"`
	InterfaceType      *string                                                         `json:"InterfaceType,omitempty" xml:"InterfaceType,omitempty"`
	LimitRule          *QueryMgsApipageResponseBodyResultContentListLimitRule          `json:"LimitRule,omitempty" xml:"LimitRule,omitempty" type:"Struct"`
	Method             *string                                                         `json:"Method,omitempty" xml:"Method,omitempty"`
	MethodName         *string                                                         `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	MigrateRule        *QueryMgsApipageResponseBodyResultContentListMigrateRule        `json:"MigrateRule,omitempty" xml:"MigrateRule,omitempty" type:"Struct"`
	MockRule           *QueryMgsApipageResponseBodyResultContentListMockRule           `json:"MockRule,omitempty" xml:"MockRule,omitempty" type:"Struct"`
	NeedETag           *string                                                         `json:"NeedETag,omitempty" xml:"NeedETag,omitempty"`
	NeedEncrypt        *string                                                         `json:"NeedEncrypt,omitempty" xml:"NeedEncrypt,omitempty"`
	NeedJsonp          *string                                                         `json:"NeedJsonp,omitempty" xml:"NeedJsonp,omitempty"`
	NeedSign           *string                                                         `json:"NeedSign,omitempty" xml:"NeedSign,omitempty"`
	OperationType      *string                                                         `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	ParamGetMethod     *string                                                         `json:"ParamGetMethod,omitempty" xml:"ParamGetMethod,omitempty"`
	Path               *string                                                         `json:"Path,omitempty" xml:"Path,omitempty"`
	RequestBodyModel   *string                                                         `json:"RequestBodyModel,omitempty" xml:"RequestBodyModel,omitempty"`
	RequestParams      []*QueryMgsApipageResponseBodyResultContentListRequestParams    `json:"RequestParams,omitempty" xml:"RequestParams,omitempty" type:"Repeated"`
	ResponseBodyModel  *string                                                         `json:"ResponseBodyModel,omitempty" xml:"ResponseBodyModel,omitempty"`
	SysId              *int64                                                          `json:"SysId,omitempty" xml:"SysId,omitempty"`
	SysName            *string                                                         `json:"SysName,omitempty" xml:"SysName,omitempty"`
	Timeout            *string                                                         `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	WorkspaceId        *string                                                         `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMgsApipageResponseBodyResultContentList) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApipageResponseBodyResultContentList) GoString() string {
	return s.String()
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetApiInvoker(v *QueryMgsApipageResponseBodyResultContentListApiInvoker) *QueryMgsApipageResponseBodyResultContentList {
	s.ApiInvoker = v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetApiName(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.ApiName = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetApiStatus(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.ApiStatus = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetApiType(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.ApiType = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetAppId(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.AppId = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetAuthRuleName(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.AuthRuleName = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetCacheRule(v *QueryMgsApipageResponseBodyResultContentListCacheRule) *QueryMgsApipageResponseBodyResultContentList {
	s.CacheRule = v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetCharset(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.Charset = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetCircuitBreakerRule(v *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule) *QueryMgsApipageResponseBodyResultContentList {
	s.CircuitBreakerRule = v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetContentType(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.ContentType = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetDescription(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.Description = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetGmtCreate(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.GmtCreate = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetGmtModified(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.GmtModified = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetHeaderRule(v []*QueryMgsApipageResponseBodyResultContentListHeaderRule) *QueryMgsApipageResponseBodyResultContentList {
	s.HeaderRule = v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetHeaderRules(v []*QueryMgsApipageResponseBodyResultContentListHeaderRules) *QueryMgsApipageResponseBodyResultContentList {
	s.HeaderRules = v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetHost(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.Host = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetId(v int64) *QueryMgsApipageResponseBodyResultContentList {
	s.Id = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetInterfaceType(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.InterfaceType = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetLimitRule(v *QueryMgsApipageResponseBodyResultContentListLimitRule) *QueryMgsApipageResponseBodyResultContentList {
	s.LimitRule = v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetMethod(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.Method = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetMethodName(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.MethodName = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetMigrateRule(v *QueryMgsApipageResponseBodyResultContentListMigrateRule) *QueryMgsApipageResponseBodyResultContentList {
	s.MigrateRule = v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetMockRule(v *QueryMgsApipageResponseBodyResultContentListMockRule) *QueryMgsApipageResponseBodyResultContentList {
	s.MockRule = v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetNeedETag(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.NeedETag = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetNeedEncrypt(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.NeedEncrypt = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetNeedJsonp(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.NeedJsonp = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetNeedSign(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.NeedSign = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetOperationType(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.OperationType = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetParamGetMethod(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.ParamGetMethod = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetPath(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.Path = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetRequestBodyModel(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.RequestBodyModel = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetRequestParams(v []*QueryMgsApipageResponseBodyResultContentListRequestParams) *QueryMgsApipageResponseBodyResultContentList {
	s.RequestParams = v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetResponseBodyModel(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.ResponseBodyModel = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetSysId(v int64) *QueryMgsApipageResponseBodyResultContentList {
	s.SysId = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetSysName(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.SysName = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetTimeout(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.Timeout = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentList) SetWorkspaceId(v string) *QueryMgsApipageResponseBodyResultContentList {
	s.WorkspaceId = &v
	return s
}

type QueryMgsApipageResponseBodyResultContentListApiInvoker struct {
	HttpInvoker *QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker `json:"HttpInvoker,omitempty" xml:"HttpInvoker,omitempty" type:"Struct"`
	RpcInvoker  *string                                                            `json:"RpcInvoker,omitempty" xml:"RpcInvoker,omitempty"`
}

func (s QueryMgsApipageResponseBodyResultContentListApiInvoker) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApipageResponseBodyResultContentListApiInvoker) GoString() string {
	return s.String()
}

func (s *QueryMgsApipageResponseBodyResultContentListApiInvoker) SetHttpInvoker(v *QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker) *QueryMgsApipageResponseBodyResultContentListApiInvoker {
	s.HttpInvoker = v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListApiInvoker) SetRpcInvoker(v string) *QueryMgsApipageResponseBodyResultContentListApiInvoker {
	s.RpcInvoker = &v
	return s
}

type QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker struct {
	Charset     *string `json:"Charset,omitempty" xml:"Charset,omitempty"`
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	Host        *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Method      *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Path        *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker) GoString() string {
	return s.String()
}

func (s *QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker) SetCharset(v string) *QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker {
	s.Charset = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker) SetContentType(v string) *QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker {
	s.ContentType = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker) SetHost(v string) *QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker {
	s.Host = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker) SetMethod(v string) *QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker {
	s.Method = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker) SetPath(v string) *QueryMgsApipageResponseBodyResultContentListApiInvokerHttpInvoker {
	s.Path = &v
	return s
}

type QueryMgsApipageResponseBodyResultContentListCacheRule struct {
	CacheKey  *string `json:"CacheKey,omitempty" xml:"CacheKey,omitempty"`
	NeedCache *bool   `json:"NeedCache,omitempty" xml:"NeedCache,omitempty"`
	Ttl       *int64  `json:"Ttl,omitempty" xml:"Ttl,omitempty"`
}

func (s QueryMgsApipageResponseBodyResultContentListCacheRule) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApipageResponseBodyResultContentListCacheRule) GoString() string {
	return s.String()
}

func (s *QueryMgsApipageResponseBodyResultContentListCacheRule) SetCacheKey(v string) *QueryMgsApipageResponseBodyResultContentListCacheRule {
	s.CacheKey = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListCacheRule) SetNeedCache(v bool) *QueryMgsApipageResponseBodyResultContentListCacheRule {
	s.NeedCache = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListCacheRule) SetTtl(v int64) *QueryMgsApipageResponseBodyResultContentListCacheRule {
	s.Ttl = &v
	return s
}

type QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule struct {
	AppId              *string  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DefaultResponse    *string  `json:"DefaultResponse,omitempty" xml:"DefaultResponse,omitempty"`
	ErrorThreshold     *int64   `json:"ErrorThreshold,omitempty" xml:"ErrorThreshold,omitempty"`
	Id                 *int64   `json:"Id,omitempty" xml:"Id,omitempty"`
	Model              *string  `json:"Model,omitempty" xml:"Model,omitempty"`
	OpenTimeoutSeconds *int64   `json:"OpenTimeoutSeconds,omitempty" xml:"OpenTimeoutSeconds,omitempty"`
	SlowRatioThreshold *float64 `json:"SlowRatioThreshold,omitempty" xml:"SlowRatioThreshold,omitempty"`
	SwitchStatus       *string  `json:"SwitchStatus,omitempty" xml:"SwitchStatus,omitempty"`
	WindowsInSeconds   *int64   `json:"WindowsInSeconds,omitempty" xml:"WindowsInSeconds,omitempty"`
	WorkspaceId        *string  `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule) GoString() string {
	return s.String()
}

func (s *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule) SetAppId(v string) *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule {
	s.AppId = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule) SetDefaultResponse(v string) *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule {
	s.DefaultResponse = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule) SetErrorThreshold(v int64) *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule {
	s.ErrorThreshold = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule) SetId(v int64) *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule {
	s.Id = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule) SetModel(v string) *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule {
	s.Model = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule) SetOpenTimeoutSeconds(v int64) *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule {
	s.OpenTimeoutSeconds = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule) SetSlowRatioThreshold(v float64) *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule {
	s.SlowRatioThreshold = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule) SetSwitchStatus(v string) *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule {
	s.SwitchStatus = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule) SetWindowsInSeconds(v int64) *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule {
	s.WindowsInSeconds = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule) SetWorkspaceId(v string) *QueryMgsApipageResponseBodyResultContentListCircuitBreakerRule {
	s.WorkspaceId = &v
	return s
}

type QueryMgsApipageResponseBodyResultContentListHeaderRule struct {
	HeaderKey *string `json:"HeaderKey,omitempty" xml:"HeaderKey,omitempty"`
	Location  *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Value     *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryMgsApipageResponseBodyResultContentListHeaderRule) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApipageResponseBodyResultContentListHeaderRule) GoString() string {
	return s.String()
}

func (s *QueryMgsApipageResponseBodyResultContentListHeaderRule) SetHeaderKey(v string) *QueryMgsApipageResponseBodyResultContentListHeaderRule {
	s.HeaderKey = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListHeaderRule) SetLocation(v string) *QueryMgsApipageResponseBodyResultContentListHeaderRule {
	s.Location = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListHeaderRule) SetType(v string) *QueryMgsApipageResponseBodyResultContentListHeaderRule {
	s.Type = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListHeaderRule) SetValue(v string) *QueryMgsApipageResponseBodyResultContentListHeaderRule {
	s.Value = &v
	return s
}

type QueryMgsApipageResponseBodyResultContentListHeaderRules struct {
	HeaderKey *string `json:"HeaderKey,omitempty" xml:"HeaderKey,omitempty"`
	Location  *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Value     *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryMgsApipageResponseBodyResultContentListHeaderRules) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApipageResponseBodyResultContentListHeaderRules) GoString() string {
	return s.String()
}

func (s *QueryMgsApipageResponseBodyResultContentListHeaderRules) SetHeaderKey(v string) *QueryMgsApipageResponseBodyResultContentListHeaderRules {
	s.HeaderKey = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListHeaderRules) SetLocation(v string) *QueryMgsApipageResponseBodyResultContentListHeaderRules {
	s.Location = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListHeaderRules) SetType(v string) *QueryMgsApipageResponseBodyResultContentListHeaderRules {
	s.Type = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListHeaderRules) SetValue(v string) *QueryMgsApipageResponseBodyResultContentListHeaderRules {
	s.Value = &v
	return s
}

type QueryMgsApipageResponseBodyResultContentListLimitRule struct {
	DefaultResponse *string `json:"DefaultResponse,omitempty" xml:"DefaultResponse,omitempty"`
	I18nResponse    *string `json:"I18nResponse,omitempty" xml:"I18nResponse,omitempty"`
	Interval        *int64  `json:"Interval,omitempty" xml:"Interval,omitempty"`
	Limit           *int64  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	Mode            *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s QueryMgsApipageResponseBodyResultContentListLimitRule) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApipageResponseBodyResultContentListLimitRule) GoString() string {
	return s.String()
}

func (s *QueryMgsApipageResponseBodyResultContentListLimitRule) SetDefaultResponse(v string) *QueryMgsApipageResponseBodyResultContentListLimitRule {
	s.DefaultResponse = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListLimitRule) SetI18nResponse(v string) *QueryMgsApipageResponseBodyResultContentListLimitRule {
	s.I18nResponse = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListLimitRule) SetInterval(v int64) *QueryMgsApipageResponseBodyResultContentListLimitRule {
	s.Interval = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListLimitRule) SetLimit(v int64) *QueryMgsApipageResponseBodyResultContentListLimitRule {
	s.Limit = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListLimitRule) SetMode(v string) *QueryMgsApipageResponseBodyResultContentListLimitRule {
	s.Mode = &v
	return s
}

type QueryMgsApipageResponseBodyResultContentListMigrateRule struct {
	FlowPercent          *int64  `json:"FlowPercent,omitempty" xml:"FlowPercent,omitempty"`
	NeedMigrate          *bool   `json:"NeedMigrate,omitempty" xml:"NeedMigrate,omitempty"`
	NeedSwitchCompletely *bool   `json:"NeedSwitchCompletely,omitempty" xml:"NeedSwitchCompletely,omitempty"`
	SysId                *int64  `json:"SysId,omitempty" xml:"SysId,omitempty"`
	SysName              *string `json:"SysName,omitempty" xml:"SysName,omitempty"`
	UpstreamType         *string `json:"UpstreamType,omitempty" xml:"UpstreamType,omitempty"`
}

func (s QueryMgsApipageResponseBodyResultContentListMigrateRule) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApipageResponseBodyResultContentListMigrateRule) GoString() string {
	return s.String()
}

func (s *QueryMgsApipageResponseBodyResultContentListMigrateRule) SetFlowPercent(v int64) *QueryMgsApipageResponseBodyResultContentListMigrateRule {
	s.FlowPercent = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListMigrateRule) SetNeedMigrate(v bool) *QueryMgsApipageResponseBodyResultContentListMigrateRule {
	s.NeedMigrate = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListMigrateRule) SetNeedSwitchCompletely(v bool) *QueryMgsApipageResponseBodyResultContentListMigrateRule {
	s.NeedSwitchCompletely = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListMigrateRule) SetSysId(v int64) *QueryMgsApipageResponseBodyResultContentListMigrateRule {
	s.SysId = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListMigrateRule) SetSysName(v string) *QueryMgsApipageResponseBodyResultContentListMigrateRule {
	s.SysName = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListMigrateRule) SetUpstreamType(v string) *QueryMgsApipageResponseBodyResultContentListMigrateRule {
	s.UpstreamType = &v
	return s
}

type QueryMgsApipageResponseBodyResultContentListMockRule struct {
	MockData   *string `json:"MockData,omitempty" xml:"MockData,omitempty"`
	NeedMock   *bool   `json:"NeedMock,omitempty" xml:"NeedMock,omitempty"`
	Percentage *int64  `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryMgsApipageResponseBodyResultContentListMockRule) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApipageResponseBodyResultContentListMockRule) GoString() string {
	return s.String()
}

func (s *QueryMgsApipageResponseBodyResultContentListMockRule) SetMockData(v string) *QueryMgsApipageResponseBodyResultContentListMockRule {
	s.MockData = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListMockRule) SetNeedMock(v bool) *QueryMgsApipageResponseBodyResultContentListMockRule {
	s.NeedMock = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListMockRule) SetPercentage(v int64) *QueryMgsApipageResponseBodyResultContentListMockRule {
	s.Percentage = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListMockRule) SetType(v string) *QueryMgsApipageResponseBodyResultContentListMockRule {
	s.Type = &v
	return s
}

type QueryMgsApipageResponseBodyResultContentListRequestParams struct {
	ApiId        *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	AppId        *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DefaultValue *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Location     *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RefType      *string `json:"RefType,omitempty" xml:"RefType,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
	WorkspaceId  *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMgsApipageResponseBodyResultContentListRequestParams) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApipageResponseBodyResultContentListRequestParams) GoString() string {
	return s.String()
}

func (s *QueryMgsApipageResponseBodyResultContentListRequestParams) SetApiId(v string) *QueryMgsApipageResponseBodyResultContentListRequestParams {
	s.ApiId = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListRequestParams) SetAppId(v string) *QueryMgsApipageResponseBodyResultContentListRequestParams {
	s.AppId = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListRequestParams) SetDefaultValue(v string) *QueryMgsApipageResponseBodyResultContentListRequestParams {
	s.DefaultValue = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListRequestParams) SetDescription(v string) *QueryMgsApipageResponseBodyResultContentListRequestParams {
	s.Description = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListRequestParams) SetId(v int64) *QueryMgsApipageResponseBodyResultContentListRequestParams {
	s.Id = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListRequestParams) SetLocation(v string) *QueryMgsApipageResponseBodyResultContentListRequestParams {
	s.Location = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListRequestParams) SetName(v string) *QueryMgsApipageResponseBodyResultContentListRequestParams {
	s.Name = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListRequestParams) SetRefType(v string) *QueryMgsApipageResponseBodyResultContentListRequestParams {
	s.RefType = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListRequestParams) SetType(v string) *QueryMgsApipageResponseBodyResultContentListRequestParams {
	s.Type = &v
	return s
}

func (s *QueryMgsApipageResponseBodyResultContentListRequestParams) SetWorkspaceId(v string) *QueryMgsApipageResponseBodyResultContentListRequestParams {
	s.WorkspaceId = &v
	return s
}

type QueryMgsApipageResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryMgsApipageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMgsApipageResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApipageResponse) GoString() string {
	return s.String()
}

func (s *QueryMgsApipageResponse) SetHeaders(v map[string]*string) *QueryMgsApipageResponse {
	s.Headers = v
	return s
}

func (s *QueryMgsApipageResponse) SetStatusCode(v int32) *QueryMgsApipageResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMgsApipageResponse) SetBody(v *QueryMgsApipageResponseBody) *QueryMgsApipageResponse {
	s.Body = v
	return s
}

type QueryMgsApirestRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Format      *string `json:"Format,omitempty" xml:"Format,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMgsApirestRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApirestRequest) GoString() string {
	return s.String()
}

func (s *QueryMgsApirestRequest) SetAppId(v string) *QueryMgsApirestRequest {
	s.AppId = &v
	return s
}

func (s *QueryMgsApirestRequest) SetFormat(v string) *QueryMgsApirestRequest {
	s.Format = &v
	return s
}

func (s *QueryMgsApirestRequest) SetId(v int64) *QueryMgsApirestRequest {
	s.Id = &v
	return s
}

func (s *QueryMgsApirestRequest) SetTenantId(v string) *QueryMgsApirestRequest {
	s.TenantId = &v
	return s
}

func (s *QueryMgsApirestRequest) SetType(v string) *QueryMgsApirestRequest {
	s.Type = &v
	return s
}

func (s *QueryMgsApirestRequest) SetWorkspaceId(v string) *QueryMgsApirestRequest {
	s.WorkspaceId = &v
	return s
}

type QueryMgsApirestResponseBody struct {
	RequestId     *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                   `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *QueryMgsApirestResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                   `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s QueryMgsApirestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApirestResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMgsApirestResponseBody) SetRequestId(v string) *QueryMgsApirestResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMgsApirestResponseBody) SetResultCode(v string) *QueryMgsApirestResponseBody {
	s.ResultCode = &v
	return s
}

func (s *QueryMgsApirestResponseBody) SetResultContent(v *QueryMgsApirestResponseBodyResultContent) *QueryMgsApirestResponseBody {
	s.ResultContent = v
	return s
}

func (s *QueryMgsApirestResponseBody) SetResultMessage(v string) *QueryMgsApirestResponseBody {
	s.ResultMessage = &v
	return s
}

type QueryMgsApirestResponseBodyResultContent struct {
	ErrorMessage *string                                        `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Success      *bool                                          `json:"Success,omitempty" xml:"Success,omitempty"`
	Value        *QueryMgsApirestResponseBodyResultContentValue `json:"Value,omitempty" xml:"Value,omitempty" type:"Struct"`
}

func (s QueryMgsApirestResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApirestResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *QueryMgsApirestResponseBodyResultContent) SetErrorMessage(v string) *QueryMgsApirestResponseBodyResultContent {
	s.ErrorMessage = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContent) SetSuccess(v bool) *QueryMgsApirestResponseBodyResultContent {
	s.Success = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContent) SetValue(v *QueryMgsApirestResponseBodyResultContentValue) *QueryMgsApirestResponseBodyResultContent {
	s.Value = v
	return s
}

type QueryMgsApirestResponseBodyResultContentValue struct {
	ApiInvoker         *QueryMgsApirestResponseBodyResultContentValueApiInvoker         `json:"ApiInvoker,omitempty" xml:"ApiInvoker,omitempty" type:"Struct"`
	ApiName            *string                                                          `json:"ApiName,omitempty" xml:"ApiName,omitempty"`
	ApiStatus          *string                                                          `json:"ApiStatus,omitempty" xml:"ApiStatus,omitempty"`
	ApiType            *string                                                          `json:"ApiType,omitempty" xml:"ApiType,omitempty"`
	AppId              *string                                                          `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AuthRuleName       *string                                                          `json:"AuthRuleName,omitempty" xml:"AuthRuleName,omitempty"`
	CacheRule          *QueryMgsApirestResponseBodyResultContentValueCacheRule          `json:"CacheRule,omitempty" xml:"CacheRule,omitempty" type:"Struct"`
	Charset            *string                                                          `json:"Charset,omitempty" xml:"Charset,omitempty"`
	CircuitBreakerRule *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule `json:"CircuitBreakerRule,omitempty" xml:"CircuitBreakerRule,omitempty" type:"Struct"`
	ContentType        *string                                                          `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	DefaultLimitRule   *QueryMgsApirestResponseBodyResultContentValueDefaultLimitRule   `json:"DefaultLimitRule,omitempty" xml:"DefaultLimitRule,omitempty" type:"Struct"`
	Description        *string                                                          `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtCreate          *string                                                          `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified        *string                                                          `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HeaderRule         []*QueryMgsApirestResponseBodyResultContentValueHeaderRule       `json:"HeaderRule,omitempty" xml:"HeaderRule,omitempty" type:"Repeated"`
	HeaderRules        []*QueryMgsApirestResponseBodyResultContentValueHeaderRules      `json:"HeaderRules,omitempty" xml:"HeaderRules,omitempty" type:"Repeated"`
	Host               *string                                                          `json:"Host,omitempty" xml:"Host,omitempty"`
	Id                 *int64                                                           `json:"Id,omitempty" xml:"Id,omitempty"`
	InterfaceType      *string                                                          `json:"InterfaceType,omitempty" xml:"InterfaceType,omitempty"`
	LimitRule          *QueryMgsApirestResponseBodyResultContentValueLimitRule          `json:"LimitRule,omitempty" xml:"LimitRule,omitempty" type:"Struct"`
	Method             *string                                                          `json:"Method,omitempty" xml:"Method,omitempty"`
	MethodName         *string                                                          `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	MigrateRule        *QueryMgsApirestResponseBodyResultContentValueMigrateRule        `json:"MigrateRule,omitempty" xml:"MigrateRule,omitempty" type:"Struct"`
	MockRule           *QueryMgsApirestResponseBodyResultContentValueMockRule           `json:"MockRule,omitempty" xml:"MockRule,omitempty" type:"Struct"`
	NeedETag           *string                                                          `json:"NeedETag,omitempty" xml:"NeedETag,omitempty"`
	NeedEncrypt        *string                                                          `json:"NeedEncrypt,omitempty" xml:"NeedEncrypt,omitempty"`
	NeedJsonp          *string                                                          `json:"NeedJsonp,omitempty" xml:"NeedJsonp,omitempty"`
	NeedSign           *string                                                          `json:"NeedSign,omitempty" xml:"NeedSign,omitempty"`
	OperationType      *string                                                          `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	ParamGetMethod     *string                                                          `json:"ParamGetMethod,omitempty" xml:"ParamGetMethod,omitempty"`
	Path               *string                                                          `json:"Path,omitempty" xml:"Path,omitempty"`
	RequestBodyModel   *string                                                          `json:"RequestBodyModel,omitempty" xml:"RequestBodyModel,omitempty"`
	RequestParams      []*QueryMgsApirestResponseBodyResultContentValueRequestParams    `json:"RequestParams,omitempty" xml:"RequestParams,omitempty" type:"Repeated"`
	ResponseBodyModel  *string                                                          `json:"ResponseBodyModel,omitempty" xml:"ResponseBodyModel,omitempty"`
	SysId              *int64                                                           `json:"SysId,omitempty" xml:"SysId,omitempty"`
	SysName            *string                                                          `json:"SysName,omitempty" xml:"SysName,omitempty"`
	Timeout            *string                                                          `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	WorkspaceId        *string                                                          `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMgsApirestResponseBodyResultContentValue) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApirestResponseBodyResultContentValue) GoString() string {
	return s.String()
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetApiInvoker(v *QueryMgsApirestResponseBodyResultContentValueApiInvoker) *QueryMgsApirestResponseBodyResultContentValue {
	s.ApiInvoker = v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetApiName(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.ApiName = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetApiStatus(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.ApiStatus = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetApiType(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.ApiType = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetAppId(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.AppId = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetAuthRuleName(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.AuthRuleName = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetCacheRule(v *QueryMgsApirestResponseBodyResultContentValueCacheRule) *QueryMgsApirestResponseBodyResultContentValue {
	s.CacheRule = v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetCharset(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.Charset = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetCircuitBreakerRule(v *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule) *QueryMgsApirestResponseBodyResultContentValue {
	s.CircuitBreakerRule = v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetContentType(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.ContentType = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetDefaultLimitRule(v *QueryMgsApirestResponseBodyResultContentValueDefaultLimitRule) *QueryMgsApirestResponseBodyResultContentValue {
	s.DefaultLimitRule = v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetDescription(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.Description = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetGmtCreate(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.GmtCreate = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetGmtModified(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.GmtModified = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetHeaderRule(v []*QueryMgsApirestResponseBodyResultContentValueHeaderRule) *QueryMgsApirestResponseBodyResultContentValue {
	s.HeaderRule = v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetHeaderRules(v []*QueryMgsApirestResponseBodyResultContentValueHeaderRules) *QueryMgsApirestResponseBodyResultContentValue {
	s.HeaderRules = v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetHost(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.Host = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetId(v int64) *QueryMgsApirestResponseBodyResultContentValue {
	s.Id = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetInterfaceType(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.InterfaceType = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetLimitRule(v *QueryMgsApirestResponseBodyResultContentValueLimitRule) *QueryMgsApirestResponseBodyResultContentValue {
	s.LimitRule = v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetMethod(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.Method = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetMethodName(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.MethodName = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetMigrateRule(v *QueryMgsApirestResponseBodyResultContentValueMigrateRule) *QueryMgsApirestResponseBodyResultContentValue {
	s.MigrateRule = v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetMockRule(v *QueryMgsApirestResponseBodyResultContentValueMockRule) *QueryMgsApirestResponseBodyResultContentValue {
	s.MockRule = v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetNeedETag(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.NeedETag = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetNeedEncrypt(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.NeedEncrypt = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetNeedJsonp(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.NeedJsonp = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetNeedSign(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.NeedSign = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetOperationType(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.OperationType = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetParamGetMethod(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.ParamGetMethod = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetPath(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.Path = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetRequestBodyModel(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.RequestBodyModel = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetRequestParams(v []*QueryMgsApirestResponseBodyResultContentValueRequestParams) *QueryMgsApirestResponseBodyResultContentValue {
	s.RequestParams = v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetResponseBodyModel(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.ResponseBodyModel = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetSysId(v int64) *QueryMgsApirestResponseBodyResultContentValue {
	s.SysId = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetSysName(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.SysName = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetTimeout(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.Timeout = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValue) SetWorkspaceId(v string) *QueryMgsApirestResponseBodyResultContentValue {
	s.WorkspaceId = &v
	return s
}

type QueryMgsApirestResponseBodyResultContentValueApiInvoker struct {
	HttpInvoker *QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker `json:"HttpInvoker,omitempty" xml:"HttpInvoker,omitempty" type:"Struct"`
	RpcInvoker  *string                                                             `json:"RpcInvoker,omitempty" xml:"RpcInvoker,omitempty"`
}

func (s QueryMgsApirestResponseBodyResultContentValueApiInvoker) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApirestResponseBodyResultContentValueApiInvoker) GoString() string {
	return s.String()
}

func (s *QueryMgsApirestResponseBodyResultContentValueApiInvoker) SetHttpInvoker(v *QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker) *QueryMgsApirestResponseBodyResultContentValueApiInvoker {
	s.HttpInvoker = v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueApiInvoker) SetRpcInvoker(v string) *QueryMgsApirestResponseBodyResultContentValueApiInvoker {
	s.RpcInvoker = &v
	return s
}

type QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker struct {
	Charset     *string `json:"Charset,omitempty" xml:"Charset,omitempty"`
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	Host        *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Method      *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Path        *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker) GoString() string {
	return s.String()
}

func (s *QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker) SetCharset(v string) *QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker {
	s.Charset = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker) SetContentType(v string) *QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker {
	s.ContentType = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker) SetHost(v string) *QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker {
	s.Host = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker) SetMethod(v string) *QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker {
	s.Method = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker) SetPath(v string) *QueryMgsApirestResponseBodyResultContentValueApiInvokerHttpInvoker {
	s.Path = &v
	return s
}

type QueryMgsApirestResponseBodyResultContentValueCacheRule struct {
	CacheKey  *string `json:"CacheKey,omitempty" xml:"CacheKey,omitempty"`
	NeedCache *bool   `json:"NeedCache,omitempty" xml:"NeedCache,omitempty"`
	Ttl       *int64  `json:"Ttl,omitempty" xml:"Ttl,omitempty"`
}

func (s QueryMgsApirestResponseBodyResultContentValueCacheRule) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApirestResponseBodyResultContentValueCacheRule) GoString() string {
	return s.String()
}

func (s *QueryMgsApirestResponseBodyResultContentValueCacheRule) SetCacheKey(v string) *QueryMgsApirestResponseBodyResultContentValueCacheRule {
	s.CacheKey = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueCacheRule) SetNeedCache(v bool) *QueryMgsApirestResponseBodyResultContentValueCacheRule {
	s.NeedCache = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueCacheRule) SetTtl(v int64) *QueryMgsApirestResponseBodyResultContentValueCacheRule {
	s.Ttl = &v
	return s
}

type QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule struct {
	AppId              *string  `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DefaultResponse    *string  `json:"DefaultResponse,omitempty" xml:"DefaultResponse,omitempty"`
	ErrorThreshold     *int64   `json:"ErrorThreshold,omitempty" xml:"ErrorThreshold,omitempty"`
	Id                 *int64   `json:"Id,omitempty" xml:"Id,omitempty"`
	Model              *string  `json:"Model,omitempty" xml:"Model,omitempty"`
	OpenTimeoutSeconds *int64   `json:"OpenTimeoutSeconds,omitempty" xml:"OpenTimeoutSeconds,omitempty"`
	SlowRatioThreshold *float64 `json:"SlowRatioThreshold,omitempty" xml:"SlowRatioThreshold,omitempty"`
	SwitchStatus       *string  `json:"SwitchStatus,omitempty" xml:"SwitchStatus,omitempty"`
	WindowsInSeconds   *int64   `json:"WindowsInSeconds,omitempty" xml:"WindowsInSeconds,omitempty"`
	WorkspaceId        *string  `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule) GoString() string {
	return s.String()
}

func (s *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule) SetAppId(v string) *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule {
	s.AppId = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule) SetDefaultResponse(v string) *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule {
	s.DefaultResponse = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule) SetErrorThreshold(v int64) *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule {
	s.ErrorThreshold = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule) SetId(v int64) *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule {
	s.Id = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule) SetModel(v string) *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule {
	s.Model = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule) SetOpenTimeoutSeconds(v int64) *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule {
	s.OpenTimeoutSeconds = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule) SetSlowRatioThreshold(v float64) *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule {
	s.SlowRatioThreshold = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule) SetSwitchStatus(v string) *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule {
	s.SwitchStatus = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule) SetWindowsInSeconds(v int64) *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule {
	s.WindowsInSeconds = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule) SetWorkspaceId(v string) *QueryMgsApirestResponseBodyResultContentValueCircuitBreakerRule {
	s.WorkspaceId = &v
	return s
}

type QueryMgsApirestResponseBodyResultContentValueDefaultLimitRule struct {
	ConfigId     *int32 `json:"ConfigId,omitempty" xml:"ConfigId,omitempty"`
	DefaultLimit *bool  `json:"DefaultLimit,omitempty" xml:"DefaultLimit,omitempty"`
}

func (s QueryMgsApirestResponseBodyResultContentValueDefaultLimitRule) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApirestResponseBodyResultContentValueDefaultLimitRule) GoString() string {
	return s.String()
}

func (s *QueryMgsApirestResponseBodyResultContentValueDefaultLimitRule) SetConfigId(v int32) *QueryMgsApirestResponseBodyResultContentValueDefaultLimitRule {
	s.ConfigId = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueDefaultLimitRule) SetDefaultLimit(v bool) *QueryMgsApirestResponseBodyResultContentValueDefaultLimitRule {
	s.DefaultLimit = &v
	return s
}

type QueryMgsApirestResponseBodyResultContentValueHeaderRule struct {
	HeaderKey *string `json:"HeaderKey,omitempty" xml:"HeaderKey,omitempty"`
	Location  *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Value     *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryMgsApirestResponseBodyResultContentValueHeaderRule) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApirestResponseBodyResultContentValueHeaderRule) GoString() string {
	return s.String()
}

func (s *QueryMgsApirestResponseBodyResultContentValueHeaderRule) SetHeaderKey(v string) *QueryMgsApirestResponseBodyResultContentValueHeaderRule {
	s.HeaderKey = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueHeaderRule) SetLocation(v string) *QueryMgsApirestResponseBodyResultContentValueHeaderRule {
	s.Location = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueHeaderRule) SetType(v string) *QueryMgsApirestResponseBodyResultContentValueHeaderRule {
	s.Type = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueHeaderRule) SetValue(v string) *QueryMgsApirestResponseBodyResultContentValueHeaderRule {
	s.Value = &v
	return s
}

type QueryMgsApirestResponseBodyResultContentValueHeaderRules struct {
	HeaderKey *string `json:"HeaderKey,omitempty" xml:"HeaderKey,omitempty"`
	Location  *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Value     *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryMgsApirestResponseBodyResultContentValueHeaderRules) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApirestResponseBodyResultContentValueHeaderRules) GoString() string {
	return s.String()
}

func (s *QueryMgsApirestResponseBodyResultContentValueHeaderRules) SetHeaderKey(v string) *QueryMgsApirestResponseBodyResultContentValueHeaderRules {
	s.HeaderKey = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueHeaderRules) SetLocation(v string) *QueryMgsApirestResponseBodyResultContentValueHeaderRules {
	s.Location = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueHeaderRules) SetType(v string) *QueryMgsApirestResponseBodyResultContentValueHeaderRules {
	s.Type = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueHeaderRules) SetValue(v string) *QueryMgsApirestResponseBodyResultContentValueHeaderRules {
	s.Value = &v
	return s
}

type QueryMgsApirestResponseBodyResultContentValueLimitRule struct {
	DefaultResponse *string `json:"DefaultResponse,omitempty" xml:"DefaultResponse,omitempty"`
	I18nResponse    *string `json:"I18nResponse,omitempty" xml:"I18nResponse,omitempty"`
	Interval        *int64  `json:"Interval,omitempty" xml:"Interval,omitempty"`
	Limit           *int64  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	Mode            *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s QueryMgsApirestResponseBodyResultContentValueLimitRule) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApirestResponseBodyResultContentValueLimitRule) GoString() string {
	return s.String()
}

func (s *QueryMgsApirestResponseBodyResultContentValueLimitRule) SetDefaultResponse(v string) *QueryMgsApirestResponseBodyResultContentValueLimitRule {
	s.DefaultResponse = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueLimitRule) SetI18nResponse(v string) *QueryMgsApirestResponseBodyResultContentValueLimitRule {
	s.I18nResponse = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueLimitRule) SetInterval(v int64) *QueryMgsApirestResponseBodyResultContentValueLimitRule {
	s.Interval = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueLimitRule) SetLimit(v int64) *QueryMgsApirestResponseBodyResultContentValueLimitRule {
	s.Limit = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueLimitRule) SetMode(v string) *QueryMgsApirestResponseBodyResultContentValueLimitRule {
	s.Mode = &v
	return s
}

type QueryMgsApirestResponseBodyResultContentValueMigrateRule struct {
	FlowPercent          *int64  `json:"FlowPercent,omitempty" xml:"FlowPercent,omitempty"`
	NeedMigrate          *bool   `json:"NeedMigrate,omitempty" xml:"NeedMigrate,omitempty"`
	NeedSwitchCompletely *bool   `json:"NeedSwitchCompletely,omitempty" xml:"NeedSwitchCompletely,omitempty"`
	SysId                *int64  `json:"SysId,omitempty" xml:"SysId,omitempty"`
	SysName              *string `json:"SysName,omitempty" xml:"SysName,omitempty"`
	UpstreamType         *string `json:"UpstreamType,omitempty" xml:"UpstreamType,omitempty"`
}

func (s QueryMgsApirestResponseBodyResultContentValueMigrateRule) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApirestResponseBodyResultContentValueMigrateRule) GoString() string {
	return s.String()
}

func (s *QueryMgsApirestResponseBodyResultContentValueMigrateRule) SetFlowPercent(v int64) *QueryMgsApirestResponseBodyResultContentValueMigrateRule {
	s.FlowPercent = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueMigrateRule) SetNeedMigrate(v bool) *QueryMgsApirestResponseBodyResultContentValueMigrateRule {
	s.NeedMigrate = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueMigrateRule) SetNeedSwitchCompletely(v bool) *QueryMgsApirestResponseBodyResultContentValueMigrateRule {
	s.NeedSwitchCompletely = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueMigrateRule) SetSysId(v int64) *QueryMgsApirestResponseBodyResultContentValueMigrateRule {
	s.SysId = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueMigrateRule) SetSysName(v string) *QueryMgsApirestResponseBodyResultContentValueMigrateRule {
	s.SysName = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueMigrateRule) SetUpstreamType(v string) *QueryMgsApirestResponseBodyResultContentValueMigrateRule {
	s.UpstreamType = &v
	return s
}

type QueryMgsApirestResponseBodyResultContentValueMockRule struct {
	MockData   *string `json:"MockData,omitempty" xml:"MockData,omitempty"`
	NeedMock   *bool   `json:"NeedMock,omitempty" xml:"NeedMock,omitempty"`
	Percentage *int64  `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryMgsApirestResponseBodyResultContentValueMockRule) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApirestResponseBodyResultContentValueMockRule) GoString() string {
	return s.String()
}

func (s *QueryMgsApirestResponseBodyResultContentValueMockRule) SetMockData(v string) *QueryMgsApirestResponseBodyResultContentValueMockRule {
	s.MockData = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueMockRule) SetNeedMock(v bool) *QueryMgsApirestResponseBodyResultContentValueMockRule {
	s.NeedMock = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueMockRule) SetPercentage(v int64) *QueryMgsApirestResponseBodyResultContentValueMockRule {
	s.Percentage = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueMockRule) SetType(v string) *QueryMgsApirestResponseBodyResultContentValueMockRule {
	s.Type = &v
	return s
}

type QueryMgsApirestResponseBodyResultContentValueRequestParams struct {
	ApiId        *string `json:"ApiId,omitempty" xml:"ApiId,omitempty"`
	AppId        *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DefaultValue *string `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Location     *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RefType      *string `json:"RefType,omitempty" xml:"RefType,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
	WorkspaceId  *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMgsApirestResponseBodyResultContentValueRequestParams) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApirestResponseBodyResultContentValueRequestParams) GoString() string {
	return s.String()
}

func (s *QueryMgsApirestResponseBodyResultContentValueRequestParams) SetApiId(v string) *QueryMgsApirestResponseBodyResultContentValueRequestParams {
	s.ApiId = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueRequestParams) SetAppId(v string) *QueryMgsApirestResponseBodyResultContentValueRequestParams {
	s.AppId = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueRequestParams) SetDefaultValue(v string) *QueryMgsApirestResponseBodyResultContentValueRequestParams {
	s.DefaultValue = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueRequestParams) SetDescription(v string) *QueryMgsApirestResponseBodyResultContentValueRequestParams {
	s.Description = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueRequestParams) SetId(v int64) *QueryMgsApirestResponseBodyResultContentValueRequestParams {
	s.Id = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueRequestParams) SetLocation(v string) *QueryMgsApirestResponseBodyResultContentValueRequestParams {
	s.Location = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueRequestParams) SetName(v string) *QueryMgsApirestResponseBodyResultContentValueRequestParams {
	s.Name = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueRequestParams) SetRefType(v string) *QueryMgsApirestResponseBodyResultContentValueRequestParams {
	s.RefType = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueRequestParams) SetType(v string) *QueryMgsApirestResponseBodyResultContentValueRequestParams {
	s.Type = &v
	return s
}

func (s *QueryMgsApirestResponseBodyResultContentValueRequestParams) SetWorkspaceId(v string) *QueryMgsApirestResponseBodyResultContentValueRequestParams {
	s.WorkspaceId = &v
	return s
}

type QueryMgsApirestResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryMgsApirestResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMgsApirestResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsApirestResponse) GoString() string {
	return s.String()
}

func (s *QueryMgsApirestResponse) SetHeaders(v map[string]*string) *QueryMgsApirestResponse {
	s.Headers = v
	return s
}

func (s *QueryMgsApirestResponse) SetStatusCode(v int32) *QueryMgsApirestResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMgsApirestResponse) SetBody(v *QueryMgsApirestResponseBody) *QueryMgsApirestResponse {
	s.Body = v
	return s
}

type QueryMgsTestreqbodyautogenRequest struct {
	AppId                                            *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Format                                           *string `json:"Format,omitempty" xml:"Format,omitempty"`
	MpaasMappcenterMgsTestreqbodyautogenQueryJsonStr *string `json:"MpaasMappcenterMgsTestreqbodyautogenQueryJsonStr,omitempty" xml:"MpaasMappcenterMgsTestreqbodyautogenQueryJsonStr,omitempty"`
	TenantId                                         *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                                      *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMgsTestreqbodyautogenRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsTestreqbodyautogenRequest) GoString() string {
	return s.String()
}

func (s *QueryMgsTestreqbodyautogenRequest) SetAppId(v string) *QueryMgsTestreqbodyautogenRequest {
	s.AppId = &v
	return s
}

func (s *QueryMgsTestreqbodyautogenRequest) SetFormat(v string) *QueryMgsTestreqbodyautogenRequest {
	s.Format = &v
	return s
}

func (s *QueryMgsTestreqbodyautogenRequest) SetMpaasMappcenterMgsTestreqbodyautogenQueryJsonStr(v string) *QueryMgsTestreqbodyautogenRequest {
	s.MpaasMappcenterMgsTestreqbodyautogenQueryJsonStr = &v
	return s
}

func (s *QueryMgsTestreqbodyautogenRequest) SetTenantId(v string) *QueryMgsTestreqbodyautogenRequest {
	s.TenantId = &v
	return s
}

func (s *QueryMgsTestreqbodyautogenRequest) SetWorkspaceId(v string) *QueryMgsTestreqbodyautogenRequest {
	s.WorkspaceId = &v
	return s
}

type QueryMgsTestreqbodyautogenResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *string `json:"ResultContent,omitempty" xml:"ResultContent,omitempty"`
	ResultMessage *string `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s QueryMgsTestreqbodyautogenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsTestreqbodyautogenResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMgsTestreqbodyautogenResponseBody) SetRequestId(v string) *QueryMgsTestreqbodyautogenResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMgsTestreqbodyautogenResponseBody) SetResultCode(v string) *QueryMgsTestreqbodyautogenResponseBody {
	s.ResultCode = &v
	return s
}

func (s *QueryMgsTestreqbodyautogenResponseBody) SetResultContent(v string) *QueryMgsTestreqbodyautogenResponseBody {
	s.ResultContent = &v
	return s
}

func (s *QueryMgsTestreqbodyautogenResponseBody) SetResultMessage(v string) *QueryMgsTestreqbodyautogenResponseBody {
	s.ResultMessage = &v
	return s
}

type QueryMgsTestreqbodyautogenResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryMgsTestreqbodyautogenResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMgsTestreqbodyautogenResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMgsTestreqbodyautogenResponse) GoString() string {
	return s.String()
}

func (s *QueryMgsTestreqbodyautogenResponse) SetHeaders(v map[string]*string) *QueryMgsTestreqbodyautogenResponse {
	s.Headers = v
	return s
}

func (s *QueryMgsTestreqbodyautogenResponse) SetStatusCode(v int32) *QueryMgsTestreqbodyautogenResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMgsTestreqbodyautogenResponse) SetBody(v *QueryMgsTestreqbodyautogenResponseBody) *QueryMgsTestreqbodyautogenResponse {
	s.Body = v
	return s
}

type QueryMpsSchedulerListRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EndTime     *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageNumber  *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime   *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Type        *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	UniqueId    *string `json:"UniqueId,omitempty" xml:"UniqueId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryMpsSchedulerListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMpsSchedulerListRequest) GoString() string {
	return s.String()
}

func (s *QueryMpsSchedulerListRequest) SetAppId(v string) *QueryMpsSchedulerListRequest {
	s.AppId = &v
	return s
}

func (s *QueryMpsSchedulerListRequest) SetEndTime(v int64) *QueryMpsSchedulerListRequest {
	s.EndTime = &v
	return s
}

func (s *QueryMpsSchedulerListRequest) SetPageNumber(v int32) *QueryMpsSchedulerListRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryMpsSchedulerListRequest) SetPageSize(v int32) *QueryMpsSchedulerListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryMpsSchedulerListRequest) SetStartTime(v int64) *QueryMpsSchedulerListRequest {
	s.StartTime = &v
	return s
}

func (s *QueryMpsSchedulerListRequest) SetType(v int32) *QueryMpsSchedulerListRequest {
	s.Type = &v
	return s
}

func (s *QueryMpsSchedulerListRequest) SetUniqueId(v string) *QueryMpsSchedulerListRequest {
	s.UniqueId = &v
	return s
}

func (s *QueryMpsSchedulerListRequest) SetWorkspaceId(v string) *QueryMpsSchedulerListRequest {
	s.WorkspaceId = &v
	return s
}

type QueryMpsSchedulerListResponseBody struct {
	RequestId     *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                         `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *QueryMpsSchedulerListResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                         `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s QueryMpsSchedulerListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMpsSchedulerListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMpsSchedulerListResponseBody) SetRequestId(v string) *QueryMpsSchedulerListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMpsSchedulerListResponseBody) SetResultCode(v string) *QueryMpsSchedulerListResponseBody {
	s.ResultCode = &v
	return s
}

func (s *QueryMpsSchedulerListResponseBody) SetResultContent(v *QueryMpsSchedulerListResponseBodyResultContent) *QueryMpsSchedulerListResponseBody {
	s.ResultContent = v
	return s
}

func (s *QueryMpsSchedulerListResponseBody) SetResultMessage(v string) *QueryMpsSchedulerListResponseBody {
	s.ResultMessage = &v
	return s
}

type QueryMpsSchedulerListResponseBodyResultContent struct {
	Data *QueryMpsSchedulerListResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryMpsSchedulerListResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s QueryMpsSchedulerListResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *QueryMpsSchedulerListResponseBodyResultContent) SetData(v *QueryMpsSchedulerListResponseBodyResultContentData) *QueryMpsSchedulerListResponseBodyResultContent {
	s.Data = v
	return s
}

type QueryMpsSchedulerListResponseBodyResultContentData struct {
	List       []*QueryMpsSchedulerListResponseBodyResultContentDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	TotalCount *int32                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryMpsSchedulerListResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s QueryMpsSchedulerListResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *QueryMpsSchedulerListResponseBodyResultContentData) SetList(v []*QueryMpsSchedulerListResponseBodyResultContentDataList) *QueryMpsSchedulerListResponseBodyResultContentData {
	s.List = v
	return s
}

func (s *QueryMpsSchedulerListResponseBodyResultContentData) SetTotalCount(v int32) *QueryMpsSchedulerListResponseBodyResultContentData {
	s.TotalCount = &v
	return s
}

type QueryMpsSchedulerListResponseBodyResultContentDataList struct {
	CreateType     *int32  `json:"CreateType,omitempty" xml:"CreateType,omitempty"`
	DeliveryType   *int32  `json:"DeliveryType,omitempty" xml:"DeliveryType,omitempty"`
	ExecutedStatus *string `json:"ExecutedStatus,omitempty" xml:"ExecutedStatus,omitempty"`
	GmtCreate      *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	ParentId       *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	PushContent    *string `json:"PushContent,omitempty" xml:"PushContent,omitempty"`
	PushTime       *int64  `json:"PushTime,omitempty" xml:"PushTime,omitempty"`
	PushTitle      *string `json:"PushTitle,omitempty" xml:"PushTitle,omitempty"`
	StrategyType   *int32  `json:"StrategyType,omitempty" xml:"StrategyType,omitempty"`
	Type           *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	UniqueId       *string `json:"UniqueId,omitempty" xml:"UniqueId,omitempty"`
}

func (s QueryMpsSchedulerListResponseBodyResultContentDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryMpsSchedulerListResponseBodyResultContentDataList) GoString() string {
	return s.String()
}

func (s *QueryMpsSchedulerListResponseBodyResultContentDataList) SetCreateType(v int32) *QueryMpsSchedulerListResponseBodyResultContentDataList {
	s.CreateType = &v
	return s
}

func (s *QueryMpsSchedulerListResponseBodyResultContentDataList) SetDeliveryType(v int32) *QueryMpsSchedulerListResponseBodyResultContentDataList {
	s.DeliveryType = &v
	return s
}

func (s *QueryMpsSchedulerListResponseBodyResultContentDataList) SetExecutedStatus(v string) *QueryMpsSchedulerListResponseBodyResultContentDataList {
	s.ExecutedStatus = &v
	return s
}

func (s *QueryMpsSchedulerListResponseBodyResultContentDataList) SetGmtCreate(v int64) *QueryMpsSchedulerListResponseBodyResultContentDataList {
	s.GmtCreate = &v
	return s
}

func (s *QueryMpsSchedulerListResponseBodyResultContentDataList) SetParentId(v string) *QueryMpsSchedulerListResponseBodyResultContentDataList {
	s.ParentId = &v
	return s
}

func (s *QueryMpsSchedulerListResponseBodyResultContentDataList) SetPushContent(v string) *QueryMpsSchedulerListResponseBodyResultContentDataList {
	s.PushContent = &v
	return s
}

func (s *QueryMpsSchedulerListResponseBodyResultContentDataList) SetPushTime(v int64) *QueryMpsSchedulerListResponseBodyResultContentDataList {
	s.PushTime = &v
	return s
}

func (s *QueryMpsSchedulerListResponseBodyResultContentDataList) SetPushTitle(v string) *QueryMpsSchedulerListResponseBodyResultContentDataList {
	s.PushTitle = &v
	return s
}

func (s *QueryMpsSchedulerListResponseBodyResultContentDataList) SetStrategyType(v int32) *QueryMpsSchedulerListResponseBodyResultContentDataList {
	s.StrategyType = &v
	return s
}

func (s *QueryMpsSchedulerListResponseBodyResultContentDataList) SetType(v int32) *QueryMpsSchedulerListResponseBodyResultContentDataList {
	s.Type = &v
	return s
}

func (s *QueryMpsSchedulerListResponseBodyResultContentDataList) SetUniqueId(v string) *QueryMpsSchedulerListResponseBodyResultContentDataList {
	s.UniqueId = &v
	return s
}

type QueryMpsSchedulerListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryMpsSchedulerListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMpsSchedulerListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMpsSchedulerListResponse) GoString() string {
	return s.String()
}

func (s *QueryMpsSchedulerListResponse) SetHeaders(v map[string]*string) *QueryMpsSchedulerListResponse {
	s.Headers = v
	return s
}

func (s *QueryMpsSchedulerListResponse) SetStatusCode(v int32) *QueryMpsSchedulerListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMpsSchedulerListResponse) SetBody(v *QueryMpsSchedulerListResponseBody) *QueryMpsSchedulerListResponse {
	s.Body = v
	return s
}

type QueryPushAnalysisCoreIndexRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Channel     *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	EndTime     *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Platform    *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	StartTime   *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TaskId      *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryPushAnalysisCoreIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPushAnalysisCoreIndexRequest) GoString() string {
	return s.String()
}

func (s *QueryPushAnalysisCoreIndexRequest) SetAppId(v string) *QueryPushAnalysisCoreIndexRequest {
	s.AppId = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexRequest) SetChannel(v string) *QueryPushAnalysisCoreIndexRequest {
	s.Channel = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexRequest) SetEndTime(v int64) *QueryPushAnalysisCoreIndexRequest {
	s.EndTime = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexRequest) SetPlatform(v string) *QueryPushAnalysisCoreIndexRequest {
	s.Platform = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexRequest) SetStartTime(v int64) *QueryPushAnalysisCoreIndexRequest {
	s.StartTime = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexRequest) SetTaskId(v string) *QueryPushAnalysisCoreIndexRequest {
	s.TaskId = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexRequest) SetType(v string) *QueryPushAnalysisCoreIndexRequest {
	s.Type = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexRequest) SetWorkspaceId(v string) *QueryPushAnalysisCoreIndexRequest {
	s.WorkspaceId = &v
	return s
}

type QueryPushAnalysisCoreIndexResponseBody struct {
	RequestId     *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                              `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *QueryPushAnalysisCoreIndexResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                              `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s QueryPushAnalysisCoreIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPushAnalysisCoreIndexResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPushAnalysisCoreIndexResponseBody) SetRequestId(v string) *QueryPushAnalysisCoreIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexResponseBody) SetResultCode(v string) *QueryPushAnalysisCoreIndexResponseBody {
	s.ResultCode = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexResponseBody) SetResultContent(v *QueryPushAnalysisCoreIndexResponseBodyResultContent) *QueryPushAnalysisCoreIndexResponseBody {
	s.ResultContent = v
	return s
}

func (s *QueryPushAnalysisCoreIndexResponseBody) SetResultMessage(v string) *QueryPushAnalysisCoreIndexResponseBody {
	s.ResultMessage = &v
	return s
}

type QueryPushAnalysisCoreIndexResponseBodyResultContent struct {
	Data *QueryPushAnalysisCoreIndexResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryPushAnalysisCoreIndexResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s QueryPushAnalysisCoreIndexResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *QueryPushAnalysisCoreIndexResponseBodyResultContent) SetData(v *QueryPushAnalysisCoreIndexResponseBodyResultContentData) *QueryPushAnalysisCoreIndexResponseBodyResultContent {
	s.Data = v
	return s
}

type QueryPushAnalysisCoreIndexResponseBodyResultContentData struct {
	ArrivalNum   *float32 `json:"ArrivalNum,omitempty" xml:"ArrivalNum,omitempty"`
	ArrivalRate  *float32 `json:"ArrivalRate,omitempty" xml:"ArrivalRate,omitempty"`
	IgnoreNum    *float32 `json:"IgnoreNum,omitempty" xml:"IgnoreNum,omitempty"`
	IgnoreRate   *float32 `json:"IgnoreRate,omitempty" xml:"IgnoreRate,omitempty"`
	OpenNum      *float32 `json:"OpenNum,omitempty" xml:"OpenNum,omitempty"`
	OpenRate     *float32 `json:"OpenRate,omitempty" xml:"OpenRate,omitempty"`
	PushNum      *float32 `json:"PushNum,omitempty" xml:"PushNum,omitempty"`
	PushTotalNum *float32 `json:"PushTotalNum,omitempty" xml:"PushTotalNum,omitempty"`
}

func (s QueryPushAnalysisCoreIndexResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s QueryPushAnalysisCoreIndexResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *QueryPushAnalysisCoreIndexResponseBodyResultContentData) SetArrivalNum(v float32) *QueryPushAnalysisCoreIndexResponseBodyResultContentData {
	s.ArrivalNum = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexResponseBodyResultContentData) SetArrivalRate(v float32) *QueryPushAnalysisCoreIndexResponseBodyResultContentData {
	s.ArrivalRate = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexResponseBodyResultContentData) SetIgnoreNum(v float32) *QueryPushAnalysisCoreIndexResponseBodyResultContentData {
	s.IgnoreNum = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexResponseBodyResultContentData) SetIgnoreRate(v float32) *QueryPushAnalysisCoreIndexResponseBodyResultContentData {
	s.IgnoreRate = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexResponseBodyResultContentData) SetOpenNum(v float32) *QueryPushAnalysisCoreIndexResponseBodyResultContentData {
	s.OpenNum = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexResponseBodyResultContentData) SetOpenRate(v float32) *QueryPushAnalysisCoreIndexResponseBodyResultContentData {
	s.OpenRate = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexResponseBodyResultContentData) SetPushNum(v float32) *QueryPushAnalysisCoreIndexResponseBodyResultContentData {
	s.PushNum = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexResponseBodyResultContentData) SetPushTotalNum(v float32) *QueryPushAnalysisCoreIndexResponseBodyResultContentData {
	s.PushTotalNum = &v
	return s
}

type QueryPushAnalysisCoreIndexResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryPushAnalysisCoreIndexResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryPushAnalysisCoreIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPushAnalysisCoreIndexResponse) GoString() string {
	return s.String()
}

func (s *QueryPushAnalysisCoreIndexResponse) SetHeaders(v map[string]*string) *QueryPushAnalysisCoreIndexResponse {
	s.Headers = v
	return s
}

func (s *QueryPushAnalysisCoreIndexResponse) SetStatusCode(v int32) *QueryPushAnalysisCoreIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryPushAnalysisCoreIndexResponse) SetBody(v *QueryPushAnalysisCoreIndexResponseBody) *QueryPushAnalysisCoreIndexResponse {
	s.Body = v
	return s
}

type QueryPushAnalysisTaskDetailRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	TaskId      *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryPushAnalysisTaskDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPushAnalysisTaskDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryPushAnalysisTaskDetailRequest) SetAppId(v string) *QueryPushAnalysisTaskDetailRequest {
	s.AppId = &v
	return s
}

func (s *QueryPushAnalysisTaskDetailRequest) SetTaskId(v string) *QueryPushAnalysisTaskDetailRequest {
	s.TaskId = &v
	return s
}

func (s *QueryPushAnalysisTaskDetailRequest) SetWorkspaceId(v string) *QueryPushAnalysisTaskDetailRequest {
	s.WorkspaceId = &v
	return s
}

type QueryPushAnalysisTaskDetailResponseBody struct {
	RequestId     *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                               `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *QueryPushAnalysisTaskDetailResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                               `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s QueryPushAnalysisTaskDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPushAnalysisTaskDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPushAnalysisTaskDetailResponseBody) SetRequestId(v string) *QueryPushAnalysisTaskDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPushAnalysisTaskDetailResponseBody) SetResultCode(v string) *QueryPushAnalysisTaskDetailResponseBody {
	s.ResultCode = &v
	return s
}

func (s *QueryPushAnalysisTaskDetailResponseBody) SetResultContent(v *QueryPushAnalysisTaskDetailResponseBodyResultContent) *QueryPushAnalysisTaskDetailResponseBody {
	s.ResultContent = v
	return s
}

func (s *QueryPushAnalysisTaskDetailResponseBody) SetResultMessage(v string) *QueryPushAnalysisTaskDetailResponseBody {
	s.ResultMessage = &v
	return s
}

type QueryPushAnalysisTaskDetailResponseBodyResultContent struct {
	Data *QueryPushAnalysisTaskDetailResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryPushAnalysisTaskDetailResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s QueryPushAnalysisTaskDetailResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *QueryPushAnalysisTaskDetailResponseBodyResultContent) SetData(v *QueryPushAnalysisTaskDetailResponseBodyResultContentData) *QueryPushAnalysisTaskDetailResponseBodyResultContent {
	s.Data = v
	return s
}

type QueryPushAnalysisTaskDetailResponseBodyResultContentData struct {
	Duration       *string  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	EndTime        *int64   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PushArrivalNum *float32 `json:"PushArrivalNum,omitempty" xml:"PushArrivalNum,omitempty"`
	PushNum        *float32 `json:"PushNum,omitempty" xml:"PushNum,omitempty"`
	PushSuccessNum *float32 `json:"PushSuccessNum,omitempty" xml:"PushSuccessNum,omitempty"`
	StartTime      *int64   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TaskId         *int64   `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s QueryPushAnalysisTaskDetailResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s QueryPushAnalysisTaskDetailResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *QueryPushAnalysisTaskDetailResponseBodyResultContentData) SetDuration(v string) *QueryPushAnalysisTaskDetailResponseBodyResultContentData {
	s.Duration = &v
	return s
}

func (s *QueryPushAnalysisTaskDetailResponseBodyResultContentData) SetEndTime(v int64) *QueryPushAnalysisTaskDetailResponseBodyResultContentData {
	s.EndTime = &v
	return s
}

func (s *QueryPushAnalysisTaskDetailResponseBodyResultContentData) SetPushArrivalNum(v float32) *QueryPushAnalysisTaskDetailResponseBodyResultContentData {
	s.PushArrivalNum = &v
	return s
}

func (s *QueryPushAnalysisTaskDetailResponseBodyResultContentData) SetPushNum(v float32) *QueryPushAnalysisTaskDetailResponseBodyResultContentData {
	s.PushNum = &v
	return s
}

func (s *QueryPushAnalysisTaskDetailResponseBodyResultContentData) SetPushSuccessNum(v float32) *QueryPushAnalysisTaskDetailResponseBodyResultContentData {
	s.PushSuccessNum = &v
	return s
}

func (s *QueryPushAnalysisTaskDetailResponseBodyResultContentData) SetStartTime(v int64) *QueryPushAnalysisTaskDetailResponseBodyResultContentData {
	s.StartTime = &v
	return s
}

func (s *QueryPushAnalysisTaskDetailResponseBodyResultContentData) SetTaskId(v int64) *QueryPushAnalysisTaskDetailResponseBodyResultContentData {
	s.TaskId = &v
	return s
}

type QueryPushAnalysisTaskDetailResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryPushAnalysisTaskDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryPushAnalysisTaskDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPushAnalysisTaskDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryPushAnalysisTaskDetailResponse) SetHeaders(v map[string]*string) *QueryPushAnalysisTaskDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryPushAnalysisTaskDetailResponse) SetStatusCode(v int32) *QueryPushAnalysisTaskDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryPushAnalysisTaskDetailResponse) SetBody(v *QueryPushAnalysisTaskDetailResponseBody) *QueryPushAnalysisTaskDetailResponse {
	s.Body = v
	return s
}

type QueryPushAnalysisTaskListRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	PageNumber  *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime   *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TaskId      *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskName    *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryPushAnalysisTaskListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPushAnalysisTaskListRequest) GoString() string {
	return s.String()
}

func (s *QueryPushAnalysisTaskListRequest) SetAppId(v string) *QueryPushAnalysisTaskListRequest {
	s.AppId = &v
	return s
}

func (s *QueryPushAnalysisTaskListRequest) SetPageNumber(v int32) *QueryPushAnalysisTaskListRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryPushAnalysisTaskListRequest) SetPageSize(v int32) *QueryPushAnalysisTaskListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryPushAnalysisTaskListRequest) SetStartTime(v int64) *QueryPushAnalysisTaskListRequest {
	s.StartTime = &v
	return s
}

func (s *QueryPushAnalysisTaskListRequest) SetTaskId(v string) *QueryPushAnalysisTaskListRequest {
	s.TaskId = &v
	return s
}

func (s *QueryPushAnalysisTaskListRequest) SetTaskName(v string) *QueryPushAnalysisTaskListRequest {
	s.TaskName = &v
	return s
}

func (s *QueryPushAnalysisTaskListRequest) SetWorkspaceId(v string) *QueryPushAnalysisTaskListRequest {
	s.WorkspaceId = &v
	return s
}

type QueryPushAnalysisTaskListResponseBody struct {
	RequestId     *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                             `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *QueryPushAnalysisTaskListResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                             `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s QueryPushAnalysisTaskListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPushAnalysisTaskListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPushAnalysisTaskListResponseBody) SetRequestId(v string) *QueryPushAnalysisTaskListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPushAnalysisTaskListResponseBody) SetResultCode(v string) *QueryPushAnalysisTaskListResponseBody {
	s.ResultCode = &v
	return s
}

func (s *QueryPushAnalysisTaskListResponseBody) SetResultContent(v *QueryPushAnalysisTaskListResponseBodyResultContent) *QueryPushAnalysisTaskListResponseBody {
	s.ResultContent = v
	return s
}

func (s *QueryPushAnalysisTaskListResponseBody) SetResultMessage(v string) *QueryPushAnalysisTaskListResponseBody {
	s.ResultMessage = &v
	return s
}

type QueryPushAnalysisTaskListResponseBodyResultContent struct {
	Data []*QueryPushAnalysisTaskListResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
}

func (s QueryPushAnalysisTaskListResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s QueryPushAnalysisTaskListResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *QueryPushAnalysisTaskListResponseBodyResultContent) SetData(v []*QueryPushAnalysisTaskListResponseBodyResultContentData) *QueryPushAnalysisTaskListResponseBodyResultContent {
	s.Data = v
	return s
}

type QueryPushAnalysisTaskListResponseBodyResultContentData struct {
	GmtCreate    *int64                                                        `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	List         []*QueryPushAnalysisTaskListResponseBodyResultContentDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	TaskId       *string                                                       `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskName     *string                                                       `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TemplateId   *string                                                       `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateName *string                                                       `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	Type         *int64                                                        `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryPushAnalysisTaskListResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s QueryPushAnalysisTaskListResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *QueryPushAnalysisTaskListResponseBodyResultContentData) SetGmtCreate(v int64) *QueryPushAnalysisTaskListResponseBodyResultContentData {
	s.GmtCreate = &v
	return s
}

func (s *QueryPushAnalysisTaskListResponseBodyResultContentData) SetList(v []*QueryPushAnalysisTaskListResponseBodyResultContentDataList) *QueryPushAnalysisTaskListResponseBodyResultContentData {
	s.List = v
	return s
}

func (s *QueryPushAnalysisTaskListResponseBodyResultContentData) SetTaskId(v string) *QueryPushAnalysisTaskListResponseBodyResultContentData {
	s.TaskId = &v
	return s
}

func (s *QueryPushAnalysisTaskListResponseBodyResultContentData) SetTaskName(v string) *QueryPushAnalysisTaskListResponseBodyResultContentData {
	s.TaskName = &v
	return s
}

func (s *QueryPushAnalysisTaskListResponseBodyResultContentData) SetTemplateId(v string) *QueryPushAnalysisTaskListResponseBodyResultContentData {
	s.TemplateId = &v
	return s
}

func (s *QueryPushAnalysisTaskListResponseBodyResultContentData) SetTemplateName(v string) *QueryPushAnalysisTaskListResponseBodyResultContentData {
	s.TemplateName = &v
	return s
}

func (s *QueryPushAnalysisTaskListResponseBodyResultContentData) SetType(v int64) *QueryPushAnalysisTaskListResponseBodyResultContentData {
	s.Type = &v
	return s
}

type QueryPushAnalysisTaskListResponseBodyResultContentDataList struct {
	GmtCreate    *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	TaskId       *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskName     *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TemplateId   *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	Type         *int64  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryPushAnalysisTaskListResponseBodyResultContentDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryPushAnalysisTaskListResponseBodyResultContentDataList) GoString() string {
	return s.String()
}

func (s *QueryPushAnalysisTaskListResponseBodyResultContentDataList) SetGmtCreate(v int64) *QueryPushAnalysisTaskListResponseBodyResultContentDataList {
	s.GmtCreate = &v
	return s
}

func (s *QueryPushAnalysisTaskListResponseBodyResultContentDataList) SetTaskId(v string) *QueryPushAnalysisTaskListResponseBodyResultContentDataList {
	s.TaskId = &v
	return s
}

func (s *QueryPushAnalysisTaskListResponseBodyResultContentDataList) SetTaskName(v string) *QueryPushAnalysisTaskListResponseBodyResultContentDataList {
	s.TaskName = &v
	return s
}

func (s *QueryPushAnalysisTaskListResponseBodyResultContentDataList) SetTemplateId(v string) *QueryPushAnalysisTaskListResponseBodyResultContentDataList {
	s.TemplateId = &v
	return s
}

func (s *QueryPushAnalysisTaskListResponseBodyResultContentDataList) SetTemplateName(v string) *QueryPushAnalysisTaskListResponseBodyResultContentDataList {
	s.TemplateName = &v
	return s
}

func (s *QueryPushAnalysisTaskListResponseBodyResultContentDataList) SetType(v int64) *QueryPushAnalysisTaskListResponseBodyResultContentDataList {
	s.Type = &v
	return s
}

type QueryPushAnalysisTaskListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryPushAnalysisTaskListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryPushAnalysisTaskListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPushAnalysisTaskListResponse) GoString() string {
	return s.String()
}

func (s *QueryPushAnalysisTaskListResponse) SetHeaders(v map[string]*string) *QueryPushAnalysisTaskListResponse {
	s.Headers = v
	return s
}

func (s *QueryPushAnalysisTaskListResponse) SetStatusCode(v int32) *QueryPushAnalysisTaskListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryPushAnalysisTaskListResponse) SetBody(v *QueryPushAnalysisTaskListResponseBody) *QueryPushAnalysisTaskListResponse {
	s.Body = v
	return s
}

type QueryPushSchedulerListRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EndTime     *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageNumber  *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime   *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Type        *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	UniqueId    *string `json:"UniqueId,omitempty" xml:"UniqueId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s QueryPushSchedulerListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPushSchedulerListRequest) GoString() string {
	return s.String()
}

func (s *QueryPushSchedulerListRequest) SetAppId(v string) *QueryPushSchedulerListRequest {
	s.AppId = &v
	return s
}

func (s *QueryPushSchedulerListRequest) SetEndTime(v int64) *QueryPushSchedulerListRequest {
	s.EndTime = &v
	return s
}

func (s *QueryPushSchedulerListRequest) SetPageNumber(v int32) *QueryPushSchedulerListRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryPushSchedulerListRequest) SetPageSize(v int32) *QueryPushSchedulerListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryPushSchedulerListRequest) SetStartTime(v int64) *QueryPushSchedulerListRequest {
	s.StartTime = &v
	return s
}

func (s *QueryPushSchedulerListRequest) SetType(v int32) *QueryPushSchedulerListRequest {
	s.Type = &v
	return s
}

func (s *QueryPushSchedulerListRequest) SetUniqueId(v string) *QueryPushSchedulerListRequest {
	s.UniqueId = &v
	return s
}

func (s *QueryPushSchedulerListRequest) SetWorkspaceId(v string) *QueryPushSchedulerListRequest {
	s.WorkspaceId = &v
	return s
}

type QueryPushSchedulerListResponseBody struct {
	RequestId     *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                          `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *QueryPushSchedulerListResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                          `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s QueryPushSchedulerListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPushSchedulerListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPushSchedulerListResponseBody) SetRequestId(v string) *QueryPushSchedulerListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPushSchedulerListResponseBody) SetResultCode(v string) *QueryPushSchedulerListResponseBody {
	s.ResultCode = &v
	return s
}

func (s *QueryPushSchedulerListResponseBody) SetResultContent(v *QueryPushSchedulerListResponseBodyResultContent) *QueryPushSchedulerListResponseBody {
	s.ResultContent = v
	return s
}

func (s *QueryPushSchedulerListResponseBody) SetResultMessage(v string) *QueryPushSchedulerListResponseBody {
	s.ResultMessage = &v
	return s
}

type QueryPushSchedulerListResponseBodyResultContent struct {
	Data *QueryPushSchedulerListResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s QueryPushSchedulerListResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s QueryPushSchedulerListResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *QueryPushSchedulerListResponseBodyResultContent) SetData(v *QueryPushSchedulerListResponseBodyResultContentData) *QueryPushSchedulerListResponseBodyResultContent {
	s.Data = v
	return s
}

type QueryPushSchedulerListResponseBodyResultContentData struct {
	List       []*QueryPushSchedulerListResponseBodyResultContentDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	TotalCount *int32                                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryPushSchedulerListResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s QueryPushSchedulerListResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *QueryPushSchedulerListResponseBodyResultContentData) SetList(v []*QueryPushSchedulerListResponseBodyResultContentDataList) *QueryPushSchedulerListResponseBodyResultContentData {
	s.List = v
	return s
}

func (s *QueryPushSchedulerListResponseBodyResultContentData) SetTotalCount(v int32) *QueryPushSchedulerListResponseBodyResultContentData {
	s.TotalCount = &v
	return s
}

type QueryPushSchedulerListResponseBodyResultContentDataList struct {
	CreateType     *int32  `json:"CreateType,omitempty" xml:"CreateType,omitempty"`
	DeliveryType   *int32  `json:"DeliveryType,omitempty" xml:"DeliveryType,omitempty"`
	ExecutedStatus *string `json:"ExecutedStatus,omitempty" xml:"ExecutedStatus,omitempty"`
	GmtCreate      *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	ParentId       *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	PushContent    *string `json:"PushContent,omitempty" xml:"PushContent,omitempty"`
	PushTime       *int64  `json:"PushTime,omitempty" xml:"PushTime,omitempty"`
	PushTitle      *string `json:"PushTitle,omitempty" xml:"PushTitle,omitempty"`
	StrategyType   *int32  `json:"StrategyType,omitempty" xml:"StrategyType,omitempty"`
	Type           *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	UniqueId       *string `json:"UniqueId,omitempty" xml:"UniqueId,omitempty"`
}

func (s QueryPushSchedulerListResponseBodyResultContentDataList) String() string {
	return tea.Prettify(s)
}

func (s QueryPushSchedulerListResponseBodyResultContentDataList) GoString() string {
	return s.String()
}

func (s *QueryPushSchedulerListResponseBodyResultContentDataList) SetCreateType(v int32) *QueryPushSchedulerListResponseBodyResultContentDataList {
	s.CreateType = &v
	return s
}

func (s *QueryPushSchedulerListResponseBodyResultContentDataList) SetDeliveryType(v int32) *QueryPushSchedulerListResponseBodyResultContentDataList {
	s.DeliveryType = &v
	return s
}

func (s *QueryPushSchedulerListResponseBodyResultContentDataList) SetExecutedStatus(v string) *QueryPushSchedulerListResponseBodyResultContentDataList {
	s.ExecutedStatus = &v
	return s
}

func (s *QueryPushSchedulerListResponseBodyResultContentDataList) SetGmtCreate(v int64) *QueryPushSchedulerListResponseBodyResultContentDataList {
	s.GmtCreate = &v
	return s
}

func (s *QueryPushSchedulerListResponseBodyResultContentDataList) SetParentId(v string) *QueryPushSchedulerListResponseBodyResultContentDataList {
	s.ParentId = &v
	return s
}

func (s *QueryPushSchedulerListResponseBodyResultContentDataList) SetPushContent(v string) *QueryPushSchedulerListResponseBodyResultContentDataList {
	s.PushContent = &v
	return s
}

func (s *QueryPushSchedulerListResponseBodyResultContentDataList) SetPushTime(v int64) *QueryPushSchedulerListResponseBodyResultContentDataList {
	s.PushTime = &v
	return s
}

func (s *QueryPushSchedulerListResponseBodyResultContentDataList) SetPushTitle(v string) *QueryPushSchedulerListResponseBodyResultContentDataList {
	s.PushTitle = &v
	return s
}

func (s *QueryPushSchedulerListResponseBodyResultContentDataList) SetStrategyType(v int32) *QueryPushSchedulerListResponseBodyResultContentDataList {
	s.StrategyType = &v
	return s
}

func (s *QueryPushSchedulerListResponseBodyResultContentDataList) SetType(v int32) *QueryPushSchedulerListResponseBodyResultContentDataList {
	s.Type = &v
	return s
}

func (s *QueryPushSchedulerListResponseBodyResultContentDataList) SetUniqueId(v string) *QueryPushSchedulerListResponseBodyResultContentDataList {
	s.UniqueId = &v
	return s
}

type QueryPushSchedulerListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryPushSchedulerListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryPushSchedulerListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPushSchedulerListResponse) GoString() string {
	return s.String()
}

func (s *QueryPushSchedulerListResponse) SetHeaders(v map[string]*string) *QueryPushSchedulerListResponse {
	s.Headers = v
	return s
}

func (s *QueryPushSchedulerListResponse) SetStatusCode(v int32) *QueryPushSchedulerListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryPushSchedulerListResponse) SetBody(v *QueryPushSchedulerListResponseBody) *QueryPushSchedulerListResponse {
	s.Body = v
	return s
}

type RevokePushMessageRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MessageId   *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	TargetId    *string `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RevokePushMessageRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokePushMessageRequest) GoString() string {
	return s.String()
}

func (s *RevokePushMessageRequest) SetAppId(v string) *RevokePushMessageRequest {
	s.AppId = &v
	return s
}

func (s *RevokePushMessageRequest) SetMessageId(v string) *RevokePushMessageRequest {
	s.MessageId = &v
	return s
}

func (s *RevokePushMessageRequest) SetTargetId(v string) *RevokePushMessageRequest {
	s.TargetId = &v
	return s
}

func (s *RevokePushMessageRequest) SetWorkspaceId(v string) *RevokePushMessageRequest {
	s.WorkspaceId = &v
	return s
}

type RevokePushMessageResponseBody struct {
	PushResult    *RevokePushMessageResponseBodyPushResult `json:"PushResult,omitempty" xml:"PushResult,omitempty" type:"Struct"`
	RequestId     *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                  `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage *string                                  `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s RevokePushMessageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokePushMessageResponseBody) GoString() string {
	return s.String()
}

func (s *RevokePushMessageResponseBody) SetPushResult(v *RevokePushMessageResponseBodyPushResult) *RevokePushMessageResponseBody {
	s.PushResult = v
	return s
}

func (s *RevokePushMessageResponseBody) SetRequestId(v string) *RevokePushMessageResponseBody {
	s.RequestId = &v
	return s
}

func (s *RevokePushMessageResponseBody) SetResultCode(v string) *RevokePushMessageResponseBody {
	s.ResultCode = &v
	return s
}

func (s *RevokePushMessageResponseBody) SetResultMessage(v string) *RevokePushMessageResponseBody {
	s.ResultMessage = &v
	return s
}

type RevokePushMessageResponseBodyPushResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RevokePushMessageResponseBodyPushResult) String() string {
	return tea.Prettify(s)
}

func (s RevokePushMessageResponseBodyPushResult) GoString() string {
	return s.String()
}

func (s *RevokePushMessageResponseBodyPushResult) SetData(v string) *RevokePushMessageResponseBodyPushResult {
	s.Data = &v
	return s
}

func (s *RevokePushMessageResponseBodyPushResult) SetResultMsg(v string) *RevokePushMessageResponseBodyPushResult {
	s.ResultMsg = &v
	return s
}

func (s *RevokePushMessageResponseBodyPushResult) SetSuccess(v bool) *RevokePushMessageResponseBodyPushResult {
	s.Success = &v
	return s
}

type RevokePushMessageResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RevokePushMessageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RevokePushMessageResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokePushMessageResponse) GoString() string {
	return s.String()
}

func (s *RevokePushMessageResponse) SetHeaders(v map[string]*string) *RevokePushMessageResponse {
	s.Headers = v
	return s
}

func (s *RevokePushMessageResponse) SetStatusCode(v int32) *RevokePushMessageResponse {
	s.StatusCode = &v
	return s
}

func (s *RevokePushMessageResponse) SetBody(v *RevokePushMessageResponseBody) *RevokePushMessageResponse {
	s.Body = v
	return s
}

type RevokePushTaskRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	TaskId      *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RevokePushTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokePushTaskRequest) GoString() string {
	return s.String()
}

func (s *RevokePushTaskRequest) SetAppId(v string) *RevokePushTaskRequest {
	s.AppId = &v
	return s
}

func (s *RevokePushTaskRequest) SetTaskId(v string) *RevokePushTaskRequest {
	s.TaskId = &v
	return s
}

func (s *RevokePushTaskRequest) SetWorkspaceId(v string) *RevokePushTaskRequest {
	s.WorkspaceId = &v
	return s
}

type RevokePushTaskResponseBody struct {
	PushResult    *RevokePushTaskResponseBodyPushResult `json:"PushResult,omitempty" xml:"PushResult,omitempty" type:"Struct"`
	RequestId     *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                               `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage *string                               `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s RevokePushTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokePushTaskResponseBody) GoString() string {
	return s.String()
}

func (s *RevokePushTaskResponseBody) SetPushResult(v *RevokePushTaskResponseBodyPushResult) *RevokePushTaskResponseBody {
	s.PushResult = v
	return s
}

func (s *RevokePushTaskResponseBody) SetRequestId(v string) *RevokePushTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *RevokePushTaskResponseBody) SetResultCode(v string) *RevokePushTaskResponseBody {
	s.ResultCode = &v
	return s
}

func (s *RevokePushTaskResponseBody) SetResultMessage(v string) *RevokePushTaskResponseBody {
	s.ResultMessage = &v
	return s
}

type RevokePushTaskResponseBodyPushResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RevokePushTaskResponseBodyPushResult) String() string {
	return tea.Prettify(s)
}

func (s RevokePushTaskResponseBodyPushResult) GoString() string {
	return s.String()
}

func (s *RevokePushTaskResponseBodyPushResult) SetData(v string) *RevokePushTaskResponseBodyPushResult {
	s.Data = &v
	return s
}

func (s *RevokePushTaskResponseBodyPushResult) SetResultMsg(v string) *RevokePushTaskResponseBodyPushResult {
	s.ResultMsg = &v
	return s
}

func (s *RevokePushTaskResponseBodyPushResult) SetSuccess(v bool) *RevokePushTaskResponseBodyPushResult {
	s.Success = &v
	return s
}

type RevokePushTaskResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RevokePushTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RevokePushTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokePushTaskResponse) GoString() string {
	return s.String()
}

func (s *RevokePushTaskResponse) SetHeaders(v map[string]*string) *RevokePushTaskResponse {
	s.Headers = v
	return s
}

func (s *RevokePushTaskResponse) SetStatusCode(v int32) *RevokePushTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *RevokePushTaskResponse) SetBody(v *RevokePushTaskResponseBody) *RevokePushTaskResponse {
	s.Body = v
	return s
}

type RunMsaDiffRequest struct {
	AppId                            *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMsaDiffRunJsonStr *string `json:"MpaasMappcenterMsaDiffRunJsonStr,omitempty" xml:"MpaasMappcenterMsaDiffRunJsonStr,omitempty"`
	TenantId                         *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                      *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s RunMsaDiffRequest) String() string {
	return tea.Prettify(s)
}

func (s RunMsaDiffRequest) GoString() string {
	return s.String()
}

func (s *RunMsaDiffRequest) SetAppId(v string) *RunMsaDiffRequest {
	s.AppId = &v
	return s
}

func (s *RunMsaDiffRequest) SetMpaasMappcenterMsaDiffRunJsonStr(v string) *RunMsaDiffRequest {
	s.MpaasMappcenterMsaDiffRunJsonStr = &v
	return s
}

func (s *RunMsaDiffRequest) SetTenantId(v string) *RunMsaDiffRequest {
	s.TenantId = &v
	return s
}

func (s *RunMsaDiffRequest) SetWorkspaceId(v string) *RunMsaDiffRequest {
	s.WorkspaceId = &v
	return s
}

type RunMsaDiffResponseBody struct {
	RequestId     *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                              `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *RunMsaDiffResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                              `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s RunMsaDiffResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunMsaDiffResponseBody) GoString() string {
	return s.String()
}

func (s *RunMsaDiffResponseBody) SetRequestId(v string) *RunMsaDiffResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunMsaDiffResponseBody) SetResultCode(v string) *RunMsaDiffResponseBody {
	s.ResultCode = &v
	return s
}

func (s *RunMsaDiffResponseBody) SetResultContent(v *RunMsaDiffResponseBodyResultContent) *RunMsaDiffResponseBody {
	s.ResultContent = v
	return s
}

func (s *RunMsaDiffResponseBody) SetResultMessage(v string) *RunMsaDiffResponseBody {
	s.ResultMessage = &v
	return s
}

type RunMsaDiffResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RunMsaDiffResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s RunMsaDiffResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *RunMsaDiffResponseBodyResultContent) SetCode(v string) *RunMsaDiffResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *RunMsaDiffResponseBodyResultContent) SetData(v string) *RunMsaDiffResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *RunMsaDiffResponseBodyResultContent) SetMessage(v string) *RunMsaDiffResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *RunMsaDiffResponseBodyResultContent) SetSuccess(v bool) *RunMsaDiffResponseBodyResultContent {
	s.Success = &v
	return s
}

type RunMsaDiffResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RunMsaDiffResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RunMsaDiffResponse) String() string {
	return tea.Prettify(s)
}

func (s RunMsaDiffResponse) GoString() string {
	return s.String()
}

func (s *RunMsaDiffResponse) SetHeaders(v map[string]*string) *RunMsaDiffResponse {
	s.Headers = v
	return s
}

func (s *RunMsaDiffResponse) SetStatusCode(v int32) *RunMsaDiffResponse {
	s.StatusCode = &v
	return s
}

func (s *RunMsaDiffResponse) SetBody(v *RunMsaDiffResponseBody) *RunMsaDiffResponse {
	s.Body = v
	return s
}

type SaveMgsApirestRequest struct {
	AppId                                *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MpaasMappcenterMgsApirestSaveJsonStr *string `json:"MpaasMappcenterMgsApirestSaveJsonStr,omitempty" xml:"MpaasMappcenterMgsApirestSaveJsonStr,omitempty"`
	TenantId                             *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId                          *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s SaveMgsApirestRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveMgsApirestRequest) GoString() string {
	return s.String()
}

func (s *SaveMgsApirestRequest) SetAppId(v string) *SaveMgsApirestRequest {
	s.AppId = &v
	return s
}

func (s *SaveMgsApirestRequest) SetMpaasMappcenterMgsApirestSaveJsonStr(v string) *SaveMgsApirestRequest {
	s.MpaasMappcenterMgsApirestSaveJsonStr = &v
	return s
}

func (s *SaveMgsApirestRequest) SetTenantId(v string) *SaveMgsApirestRequest {
	s.TenantId = &v
	return s
}

func (s *SaveMgsApirestRequest) SetWorkspaceId(v string) *SaveMgsApirestRequest {
	s.WorkspaceId = &v
	return s
}

type SaveMgsApirestResponseBody struct {
	RequestId     *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                  `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *SaveMgsApirestResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                  `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s SaveMgsApirestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveMgsApirestResponseBody) GoString() string {
	return s.String()
}

func (s *SaveMgsApirestResponseBody) SetRequestId(v string) *SaveMgsApirestResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveMgsApirestResponseBody) SetResultCode(v string) *SaveMgsApirestResponseBody {
	s.ResultCode = &v
	return s
}

func (s *SaveMgsApirestResponseBody) SetResultContent(v *SaveMgsApirestResponseBodyResultContent) *SaveMgsApirestResponseBody {
	s.ResultContent = v
	return s
}

func (s *SaveMgsApirestResponseBody) SetResultMessage(v string) *SaveMgsApirestResponseBody {
	s.ResultMessage = &v
	return s
}

type SaveMgsApirestResponseBodyResultContent struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Value        *bool   `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SaveMgsApirestResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s SaveMgsApirestResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *SaveMgsApirestResponseBodyResultContent) SetErrorMessage(v string) *SaveMgsApirestResponseBodyResultContent {
	s.ErrorMessage = &v
	return s
}

func (s *SaveMgsApirestResponseBodyResultContent) SetSuccess(v bool) *SaveMgsApirestResponseBodyResultContent {
	s.Success = &v
	return s
}

func (s *SaveMgsApirestResponseBodyResultContent) SetValue(v bool) *SaveMgsApirestResponseBodyResultContent {
	s.Value = &v
	return s
}

type SaveMgsApirestResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SaveMgsApirestResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveMgsApirestResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveMgsApirestResponse) GoString() string {
	return s.String()
}

func (s *SaveMgsApirestResponse) SetHeaders(v map[string]*string) *SaveMgsApirestResponse {
	s.Headers = v
	return s
}

func (s *SaveMgsApirestResponse) SetStatusCode(v int32) *SaveMgsApirestResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveMgsApirestResponse) SetBody(v *SaveMgsApirestResponseBody) *SaveMgsApirestResponse {
	s.Body = v
	return s
}

type StartUserAppAsyncEnhanceInMsaRequest struct {
	ApkProtector        *bool   `json:"ApkProtector,omitempty" xml:"ApkProtector,omitempty"`
	AppId               *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AssetsFileList      *string `json:"AssetsFileList,omitempty" xml:"AssetsFileList,omitempty"`
	Classes             *string `json:"Classes,omitempty" xml:"Classes,omitempty"`
	DalvikDebugger      *int32  `json:"DalvikDebugger,omitempty" xml:"DalvikDebugger,omitempty"`
	EmulatorEnvironment *int32  `json:"EmulatorEnvironment,omitempty" xml:"EmulatorEnvironment,omitempty"`
	Id                  *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	JavaHook            *int32  `json:"JavaHook,omitempty" xml:"JavaHook,omitempty"`
	MemoryDump          *int32  `json:"MemoryDump,omitempty" xml:"MemoryDump,omitempty"`
	NativeDebugger      *int32  `json:"NativeDebugger,omitempty" xml:"NativeDebugger,omitempty"`
	NativeHook          *int32  `json:"NativeHook,omitempty" xml:"NativeHook,omitempty"`
	PackageTampered     *int32  `json:"PackageTampered,omitempty" xml:"PackageTampered,omitempty"`
	Root                *int32  `json:"Root,omitempty" xml:"Root,omitempty"`
	RunMode             *string `json:"RunMode,omitempty" xml:"RunMode,omitempty"`
	SoFileList          *string `json:"SoFileList,omitempty" xml:"SoFileList,omitempty"`
	TaskType            *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	TenantId            *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	TotalSwitch         *bool   `json:"TotalSwitch,omitempty" xml:"TotalSwitch,omitempty"`
	UseAShield          *bool   `json:"UseAShield,omitempty" xml:"UseAShield,omitempty"`
	WorkspaceId         *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s StartUserAppAsyncEnhanceInMsaRequest) String() string {
	return tea.Prettify(s)
}

func (s StartUserAppAsyncEnhanceInMsaRequest) GoString() string {
	return s.String()
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetApkProtector(v bool) *StartUserAppAsyncEnhanceInMsaRequest {
	s.ApkProtector = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetAppId(v string) *StartUserAppAsyncEnhanceInMsaRequest {
	s.AppId = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetAssetsFileList(v string) *StartUserAppAsyncEnhanceInMsaRequest {
	s.AssetsFileList = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetClasses(v string) *StartUserAppAsyncEnhanceInMsaRequest {
	s.Classes = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetDalvikDebugger(v int32) *StartUserAppAsyncEnhanceInMsaRequest {
	s.DalvikDebugger = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetEmulatorEnvironment(v int32) *StartUserAppAsyncEnhanceInMsaRequest {
	s.EmulatorEnvironment = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetId(v int64) *StartUserAppAsyncEnhanceInMsaRequest {
	s.Id = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetJavaHook(v int32) *StartUserAppAsyncEnhanceInMsaRequest {
	s.JavaHook = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetMemoryDump(v int32) *StartUserAppAsyncEnhanceInMsaRequest {
	s.MemoryDump = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetNativeDebugger(v int32) *StartUserAppAsyncEnhanceInMsaRequest {
	s.NativeDebugger = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetNativeHook(v int32) *StartUserAppAsyncEnhanceInMsaRequest {
	s.NativeHook = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetPackageTampered(v int32) *StartUserAppAsyncEnhanceInMsaRequest {
	s.PackageTampered = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetRoot(v int32) *StartUserAppAsyncEnhanceInMsaRequest {
	s.Root = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetRunMode(v string) *StartUserAppAsyncEnhanceInMsaRequest {
	s.RunMode = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetSoFileList(v string) *StartUserAppAsyncEnhanceInMsaRequest {
	s.SoFileList = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetTaskType(v string) *StartUserAppAsyncEnhanceInMsaRequest {
	s.TaskType = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetTenantId(v string) *StartUserAppAsyncEnhanceInMsaRequest {
	s.TenantId = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetTotalSwitch(v bool) *StartUserAppAsyncEnhanceInMsaRequest {
	s.TotalSwitch = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetUseAShield(v bool) *StartUserAppAsyncEnhanceInMsaRequest {
	s.UseAShield = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaRequest) SetWorkspaceId(v string) *StartUserAppAsyncEnhanceInMsaRequest {
	s.WorkspaceId = &v
	return s
}

type StartUserAppAsyncEnhanceInMsaResponseBody struct {
	RequestId     *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                                 `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *StartUserAppAsyncEnhanceInMsaResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                                 `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s StartUserAppAsyncEnhanceInMsaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartUserAppAsyncEnhanceInMsaResponseBody) GoString() string {
	return s.String()
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBody) SetRequestId(v string) *StartUserAppAsyncEnhanceInMsaResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBody) SetResultCode(v string) *StartUserAppAsyncEnhanceInMsaResponseBody {
	s.ResultCode = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBody) SetResultContent(v *StartUserAppAsyncEnhanceInMsaResponseBodyResultContent) *StartUserAppAsyncEnhanceInMsaResponseBody {
	s.ResultContent = v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBody) SetResultMessage(v string) *StartUserAppAsyncEnhanceInMsaResponseBody {
	s.ResultMessage = &v
	return s
}

type StartUserAppAsyncEnhanceInMsaResponseBodyResultContent struct {
	Code    *string                                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool                                                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StartUserAppAsyncEnhanceInMsaResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s StartUserAppAsyncEnhanceInMsaResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContent) SetCode(v string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContent) SetData(v *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContent {
	s.Data = v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContent) SetMessage(v string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContent) SetSuccess(v bool) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContent {
	s.Success = &v
	return s
}

type StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData struct {
	AfterMd5            *string                                                                     `json:"AfterMd5,omitempty" xml:"AfterMd5,omitempty"`
	AfterSize           *int64                                                                      `json:"AfterSize,omitempty" xml:"AfterSize,omitempty"`
	AppCode             *string                                                                     `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AppPackage          *string                                                                     `json:"AppPackage,omitempty" xml:"AppPackage,omitempty"`
	AssetsFileList      []*string                                                                   `json:"AssetsFileList,omitempty" xml:"AssetsFileList,omitempty" type:"Repeated"`
	BeforeMd5           *string                                                                     `json:"BeforeMd5,omitempty" xml:"BeforeMd5,omitempty"`
	BeforeSize          *int64                                                                      `json:"BeforeSize,omitempty" xml:"BeforeSize,omitempty"`
	ClassForest         *string                                                                     `json:"ClassForest,omitempty" xml:"ClassForest,omitempty"`
	EnhanceMapping      []*StartUserAppAsyncEnhanceInMsaResponseBodyResultContentDataEnhanceMapping `json:"EnhanceMapping,omitempty" xml:"EnhanceMapping,omitempty" type:"Repeated"`
	EnhanceRules        []*string                                                                   `json:"EnhanceRules,omitempty" xml:"EnhanceRules,omitempty" type:"Repeated"`
	EnhancedAssetsFiles []*string                                                                   `json:"EnhancedAssetsFiles,omitempty" xml:"EnhancedAssetsFiles,omitempty" type:"Repeated"`
	EnhancedClasses     []*string                                                                   `json:"EnhancedClasses,omitempty" xml:"EnhancedClasses,omitempty" type:"Repeated"`
	EnhancedSoFiles     []*string                                                                   `json:"EnhancedSoFiles,omitempty" xml:"EnhancedSoFiles,omitempty" type:"Repeated"`
	Id                  *int64                                                                      `json:"Id,omitempty" xml:"Id,omitempty"`
	Label               *string                                                                     `json:"Label,omitempty" xml:"Label,omitempty"`
	Progress            *int64                                                                      `json:"Progress,omitempty" xml:"Progress,omitempty"`
	SoFileList          []*string                                                                   `json:"SoFileList,omitempty" xml:"SoFileList,omitempty" type:"Repeated"`
	Status              *int64                                                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskType            *string                                                                     `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	VersionCode         *string                                                                     `json:"VersionCode,omitempty" xml:"VersionCode,omitempty"`
	VersionName         *string                                                                     `json:"VersionName,omitempty" xml:"VersionName,omitempty"`
}

func (s StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetAfterMd5(v string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.AfterMd5 = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetAfterSize(v int64) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.AfterSize = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetAppCode(v string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.AppCode = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetAppPackage(v string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.AppPackage = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetAssetsFileList(v []*string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.AssetsFileList = v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetBeforeMd5(v string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.BeforeMd5 = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetBeforeSize(v int64) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.BeforeSize = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetClassForest(v string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.ClassForest = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetEnhanceMapping(v []*StartUserAppAsyncEnhanceInMsaResponseBodyResultContentDataEnhanceMapping) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.EnhanceMapping = v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetEnhanceRules(v []*string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.EnhanceRules = v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetEnhancedAssetsFiles(v []*string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.EnhancedAssetsFiles = v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetEnhancedClasses(v []*string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.EnhancedClasses = v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetEnhancedSoFiles(v []*string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.EnhancedSoFiles = v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetId(v int64) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.Id = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetLabel(v string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.Label = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetProgress(v int64) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.Progress = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetSoFileList(v []*string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.SoFileList = v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetStatus(v int64) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.Status = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetTaskType(v string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.TaskType = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetVersionCode(v string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.VersionCode = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData) SetVersionName(v string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentData {
	s.VersionName = &v
	return s
}

type StartUserAppAsyncEnhanceInMsaResponseBodyResultContentDataEnhanceMapping struct {
	Info   *string `json:"Info,omitempty" xml:"Info,omitempty"`
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s StartUserAppAsyncEnhanceInMsaResponseBodyResultContentDataEnhanceMapping) String() string {
	return tea.Prettify(s)
}

func (s StartUserAppAsyncEnhanceInMsaResponseBodyResultContentDataEnhanceMapping) GoString() string {
	return s.String()
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentDataEnhanceMapping) SetInfo(v string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentDataEnhanceMapping {
	s.Info = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentDataEnhanceMapping) SetReason(v string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentDataEnhanceMapping {
	s.Reason = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentDataEnhanceMapping) SetType(v string) *StartUserAppAsyncEnhanceInMsaResponseBodyResultContentDataEnhanceMapping {
	s.Type = &v
	return s
}

type StartUserAppAsyncEnhanceInMsaResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartUserAppAsyncEnhanceInMsaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartUserAppAsyncEnhanceInMsaResponse) String() string {
	return tea.Prettify(s)
}

func (s StartUserAppAsyncEnhanceInMsaResponse) GoString() string {
	return s.String()
}

func (s *StartUserAppAsyncEnhanceInMsaResponse) SetHeaders(v map[string]*string) *StartUserAppAsyncEnhanceInMsaResponse {
	s.Headers = v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponse) SetStatusCode(v int32) *StartUserAppAsyncEnhanceInMsaResponse {
	s.StatusCode = &v
	return s
}

func (s *StartUserAppAsyncEnhanceInMsaResponse) SetBody(v *StartUserAppAsyncEnhanceInMsaResponseBody) *StartUserAppAsyncEnhanceInMsaResponse {
	s.Body = v
	return s
}

type UpdateMcubeWhitelistRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	KeyIds      *string `json:"KeyIds,omitempty" xml:"KeyIds,omitempty"`
	OnexFlag    *bool   `json:"OnexFlag,omitempty" xml:"OnexFlag,omitempty"`
	OssUrl      *string `json:"OssUrl,omitempty" xml:"OssUrl,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpdateMcubeWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMcubeWhitelistRequest) GoString() string {
	return s.String()
}

func (s *UpdateMcubeWhitelistRequest) SetAppId(v string) *UpdateMcubeWhitelistRequest {
	s.AppId = &v
	return s
}

func (s *UpdateMcubeWhitelistRequest) SetId(v string) *UpdateMcubeWhitelistRequest {
	s.Id = &v
	return s
}

func (s *UpdateMcubeWhitelistRequest) SetKeyIds(v string) *UpdateMcubeWhitelistRequest {
	s.KeyIds = &v
	return s
}

func (s *UpdateMcubeWhitelistRequest) SetOnexFlag(v bool) *UpdateMcubeWhitelistRequest {
	s.OnexFlag = &v
	return s
}

func (s *UpdateMcubeWhitelistRequest) SetOssUrl(v string) *UpdateMcubeWhitelistRequest {
	s.OssUrl = &v
	return s
}

func (s *UpdateMcubeWhitelistRequest) SetTenantId(v string) *UpdateMcubeWhitelistRequest {
	s.TenantId = &v
	return s
}

func (s *UpdateMcubeWhitelistRequest) SetWorkspaceId(v string) *UpdateMcubeWhitelistRequest {
	s.WorkspaceId = &v
	return s
}

type UpdateMcubeWhitelistResponseBody struct {
	AddWhitelistResult *UpdateMcubeWhitelistResponseBodyAddWhitelistResult `json:"AddWhitelistResult,omitempty" xml:"AddWhitelistResult,omitempty" type:"Struct"`
	RequestId          *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode         *string                                             `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage      *string                                             `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s UpdateMcubeWhitelistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMcubeWhitelistResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMcubeWhitelistResponseBody) SetAddWhitelistResult(v *UpdateMcubeWhitelistResponseBodyAddWhitelistResult) *UpdateMcubeWhitelistResponseBody {
	s.AddWhitelistResult = v
	return s
}

func (s *UpdateMcubeWhitelistResponseBody) SetRequestId(v string) *UpdateMcubeWhitelistResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMcubeWhitelistResponseBody) SetResultCode(v string) *UpdateMcubeWhitelistResponseBody {
	s.ResultCode = &v
	return s
}

func (s *UpdateMcubeWhitelistResponseBody) SetResultMessage(v string) *UpdateMcubeWhitelistResponseBody {
	s.ResultMessage = &v
	return s
}

type UpdateMcubeWhitelistResponseBodyAddWhitelistResult struct {
	AddWhitelistInfo *UpdateMcubeWhitelistResponseBodyAddWhitelistResultAddWhitelistInfo `json:"AddWhitelistInfo,omitempty" xml:"AddWhitelistInfo,omitempty" type:"Struct"`
	ResultMsg        *string                                                             `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success          *bool                                                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateMcubeWhitelistResponseBodyAddWhitelistResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateMcubeWhitelistResponseBodyAddWhitelistResult) GoString() string {
	return s.String()
}

func (s *UpdateMcubeWhitelistResponseBodyAddWhitelistResult) SetAddWhitelistInfo(v *UpdateMcubeWhitelistResponseBodyAddWhitelistResultAddWhitelistInfo) *UpdateMcubeWhitelistResponseBodyAddWhitelistResult {
	s.AddWhitelistInfo = v
	return s
}

func (s *UpdateMcubeWhitelistResponseBodyAddWhitelistResult) SetResultMsg(v string) *UpdateMcubeWhitelistResponseBodyAddWhitelistResult {
	s.ResultMsg = &v
	return s
}

func (s *UpdateMcubeWhitelistResponseBodyAddWhitelistResult) SetSuccess(v bool) *UpdateMcubeWhitelistResponseBodyAddWhitelistResult {
	s.Success = &v
	return s
}

type UpdateMcubeWhitelistResponseBodyAddWhitelistResultAddWhitelistInfo struct {
	FailNum     *int64  `json:"FailNum,omitempty" xml:"FailNum,omitempty"`
	FailUserIds *string `json:"FailUserIds,omitempty" xml:"FailUserIds,omitempty"`
	SuccessNum  *int64  `json:"SuccessNum,omitempty" xml:"SuccessNum,omitempty"`
}

func (s UpdateMcubeWhitelistResponseBodyAddWhitelistResultAddWhitelistInfo) String() string {
	return tea.Prettify(s)
}

func (s UpdateMcubeWhitelistResponseBodyAddWhitelistResultAddWhitelistInfo) GoString() string {
	return s.String()
}

func (s *UpdateMcubeWhitelistResponseBodyAddWhitelistResultAddWhitelistInfo) SetFailNum(v int64) *UpdateMcubeWhitelistResponseBodyAddWhitelistResultAddWhitelistInfo {
	s.FailNum = &v
	return s
}

func (s *UpdateMcubeWhitelistResponseBodyAddWhitelistResultAddWhitelistInfo) SetFailUserIds(v string) *UpdateMcubeWhitelistResponseBodyAddWhitelistResultAddWhitelistInfo {
	s.FailUserIds = &v
	return s
}

func (s *UpdateMcubeWhitelistResponseBodyAddWhitelistResultAddWhitelistInfo) SetSuccessNum(v int64) *UpdateMcubeWhitelistResponseBodyAddWhitelistResultAddWhitelistInfo {
	s.SuccessNum = &v
	return s
}

type UpdateMcubeWhitelistResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateMcubeWhitelistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMcubeWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMcubeWhitelistResponse) GoString() string {
	return s.String()
}

func (s *UpdateMcubeWhitelistResponse) SetHeaders(v map[string]*string) *UpdateMcubeWhitelistResponse {
	s.Headers = v
	return s
}

func (s *UpdateMcubeWhitelistResponse) SetStatusCode(v int32) *UpdateMcubeWhitelistResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMcubeWhitelistResponse) SetBody(v *UpdateMcubeWhitelistResponseBody) *UpdateMcubeWhitelistResponse {
	s.Body = v
	return s
}

type UpdateMpaasAppInfoRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName     *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	IconFileUrl *string `json:"IconFileUrl,omitempty" xml:"IconFileUrl,omitempty"`
	Identifier  *string `json:"Identifier,omitempty" xml:"Identifier,omitempty"`
	OnexFlag    *bool   `json:"OnexFlag,omitempty" xml:"OnexFlag,omitempty"`
	SystemType  *string `json:"SystemType,omitempty" xml:"SystemType,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s UpdateMpaasAppInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMpaasAppInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateMpaasAppInfoRequest) SetAppId(v string) *UpdateMpaasAppInfoRequest {
	s.AppId = &v
	return s
}

func (s *UpdateMpaasAppInfoRequest) SetAppName(v string) *UpdateMpaasAppInfoRequest {
	s.AppName = &v
	return s
}

func (s *UpdateMpaasAppInfoRequest) SetIconFileUrl(v string) *UpdateMpaasAppInfoRequest {
	s.IconFileUrl = &v
	return s
}

func (s *UpdateMpaasAppInfoRequest) SetIdentifier(v string) *UpdateMpaasAppInfoRequest {
	s.Identifier = &v
	return s
}

func (s *UpdateMpaasAppInfoRequest) SetOnexFlag(v bool) *UpdateMpaasAppInfoRequest {
	s.OnexFlag = &v
	return s
}

func (s *UpdateMpaasAppInfoRequest) SetSystemType(v string) *UpdateMpaasAppInfoRequest {
	s.SystemType = &v
	return s
}

func (s *UpdateMpaasAppInfoRequest) SetTenantId(v string) *UpdateMpaasAppInfoRequest {
	s.TenantId = &v
	return s
}

type UpdateMpaasAppInfoResponseBody struct {
	RequestId     *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                      `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *UpdateMpaasAppInfoResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                      `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s UpdateMpaasAppInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMpaasAppInfoResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMpaasAppInfoResponseBody) SetRequestId(v string) *UpdateMpaasAppInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMpaasAppInfoResponseBody) SetResultCode(v string) *UpdateMpaasAppInfoResponseBody {
	s.ResultCode = &v
	return s
}

func (s *UpdateMpaasAppInfoResponseBody) SetResultContent(v *UpdateMpaasAppInfoResponseBodyResultContent) *UpdateMpaasAppInfoResponseBody {
	s.ResultContent = v
	return s
}

func (s *UpdateMpaasAppInfoResponseBody) SetResultMessage(v string) *UpdateMpaasAppInfoResponseBody {
	s.ResultMessage = &v
	return s
}

type UpdateMpaasAppInfoResponseBodyResultContent struct {
	Data      *UpdateMpaasAppInfoResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMpaasAppInfoResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s UpdateMpaasAppInfoResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *UpdateMpaasAppInfoResponseBodyResultContent) SetData(v *UpdateMpaasAppInfoResponseBodyResultContentData) *UpdateMpaasAppInfoResponseBodyResultContent {
	s.Data = v
	return s
}

func (s *UpdateMpaasAppInfoResponseBodyResultContent) SetRequestId(v string) *UpdateMpaasAppInfoResponseBodyResultContent {
	s.RequestId = &v
	return s
}

type UpdateMpaasAppInfoResponseBodyResultContentData struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateMpaasAppInfoResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s UpdateMpaasAppInfoResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *UpdateMpaasAppInfoResponseBodyResultContentData) SetAppId(v string) *UpdateMpaasAppInfoResponseBodyResultContentData {
	s.AppId = &v
	return s
}

func (s *UpdateMpaasAppInfoResponseBodyResultContentData) SetCode(v string) *UpdateMpaasAppInfoResponseBodyResultContentData {
	s.Code = &v
	return s
}

func (s *UpdateMpaasAppInfoResponseBodyResultContentData) SetData(v string) *UpdateMpaasAppInfoResponseBodyResultContentData {
	s.Data = &v
	return s
}

func (s *UpdateMpaasAppInfoResponseBodyResultContentData) SetMessage(v string) *UpdateMpaasAppInfoResponseBodyResultContentData {
	s.Message = &v
	return s
}

func (s *UpdateMpaasAppInfoResponseBodyResultContentData) SetSuccess(v bool) *UpdateMpaasAppInfoResponseBodyResultContentData {
	s.Success = &v
	return s
}

type UpdateMpaasAppInfoResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateMpaasAppInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMpaasAppInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMpaasAppInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateMpaasAppInfoResponse) SetHeaders(v map[string]*string) *UpdateMpaasAppInfoResponse {
	s.Headers = v
	return s
}

func (s *UpdateMpaasAppInfoResponse) SetStatusCode(v int32) *UpdateMpaasAppInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMpaasAppInfoResponse) SetBody(v *UpdateMpaasAppInfoResponseBody) *UpdateMpaasAppInfoResponse {
	s.Body = v
	return s
}

type UploadBitcodeToMsaRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Bitcode     *string `json:"Bitcode,omitempty" xml:"Bitcode,omitempty"`
	CodeVersion *string `json:"CodeVersion,omitempty" xml:"CodeVersion,omitempty"`
	License     *string `json:"License,omitempty" xml:"License,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UploadBitcodeToMsaRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadBitcodeToMsaRequest) GoString() string {
	return s.String()
}

func (s *UploadBitcodeToMsaRequest) SetAppId(v string) *UploadBitcodeToMsaRequest {
	s.AppId = &v
	return s
}

func (s *UploadBitcodeToMsaRequest) SetBitcode(v string) *UploadBitcodeToMsaRequest {
	s.Bitcode = &v
	return s
}

func (s *UploadBitcodeToMsaRequest) SetCodeVersion(v string) *UploadBitcodeToMsaRequest {
	s.CodeVersion = &v
	return s
}

func (s *UploadBitcodeToMsaRequest) SetLicense(v string) *UploadBitcodeToMsaRequest {
	s.License = &v
	return s
}

func (s *UploadBitcodeToMsaRequest) SetTenantId(v string) *UploadBitcodeToMsaRequest {
	s.TenantId = &v
	return s
}

func (s *UploadBitcodeToMsaRequest) SetType(v string) *UploadBitcodeToMsaRequest {
	s.Type = &v
	return s
}

func (s *UploadBitcodeToMsaRequest) SetWorkspaceId(v string) *UploadBitcodeToMsaRequest {
	s.WorkspaceId = &v
	return s
}

type UploadBitcodeToMsaResponseBody struct {
	RequestId     *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                      `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *UploadBitcodeToMsaResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                      `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s UploadBitcodeToMsaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadBitcodeToMsaResponseBody) GoString() string {
	return s.String()
}

func (s *UploadBitcodeToMsaResponseBody) SetRequestId(v string) *UploadBitcodeToMsaResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadBitcodeToMsaResponseBody) SetResultCode(v string) *UploadBitcodeToMsaResponseBody {
	s.ResultCode = &v
	return s
}

func (s *UploadBitcodeToMsaResponseBody) SetResultContent(v *UploadBitcodeToMsaResponseBodyResultContent) *UploadBitcodeToMsaResponseBody {
	s.ResultContent = v
	return s
}

func (s *UploadBitcodeToMsaResponseBody) SetResultMessage(v string) *UploadBitcodeToMsaResponseBody {
	s.ResultMessage = &v
	return s
}

type UploadBitcodeToMsaResponseBodyResultContent struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UploadBitcodeToMsaResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s UploadBitcodeToMsaResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *UploadBitcodeToMsaResponseBodyResultContent) SetCode(v string) *UploadBitcodeToMsaResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *UploadBitcodeToMsaResponseBodyResultContent) SetData(v string) *UploadBitcodeToMsaResponseBodyResultContent {
	s.Data = &v
	return s
}

func (s *UploadBitcodeToMsaResponseBodyResultContent) SetMessage(v string) *UploadBitcodeToMsaResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *UploadBitcodeToMsaResponseBodyResultContent) SetSuccess(v bool) *UploadBitcodeToMsaResponseBodyResultContent {
	s.Success = &v
	return s
}

type UploadBitcodeToMsaResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UploadBitcodeToMsaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UploadBitcodeToMsaResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadBitcodeToMsaResponse) GoString() string {
	return s.String()
}

func (s *UploadBitcodeToMsaResponse) SetHeaders(v map[string]*string) *UploadBitcodeToMsaResponse {
	s.Headers = v
	return s
}

func (s *UploadBitcodeToMsaResponse) SetStatusCode(v int32) *UploadBitcodeToMsaResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadBitcodeToMsaResponse) SetBody(v *UploadBitcodeToMsaResponseBody) *UploadBitcodeToMsaResponse {
	s.Body = v
	return s
}

type UploadMcubeMiniPackageRequest struct {
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AutoInstall      *int64  `json:"AutoInstall,omitempty" xml:"AutoInstall,omitempty"`
	ClientVersionMax *string `json:"ClientVersionMax,omitempty" xml:"ClientVersionMax,omitempty"`
	ClientVersionMin *string `json:"ClientVersionMin,omitempty" xml:"ClientVersionMin,omitempty"`
	EnableKeepAlive  *string `json:"EnableKeepAlive,omitempty" xml:"EnableKeepAlive,omitempty"`
	EnableOptionMenu *string `json:"EnableOptionMenu,omitempty" xml:"EnableOptionMenu,omitempty"`
	EnableTabBar     *int64  `json:"EnableTabBar,omitempty" xml:"EnableTabBar,omitempty"`
	ExtendInfo       *string `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty"`
	H5Id             *string `json:"H5Id,omitempty" xml:"H5Id,omitempty"`
	H5Name           *string `json:"H5Name,omitempty" xml:"H5Name,omitempty"`
	H5Version        *string `json:"H5Version,omitempty" xml:"H5Version,omitempty"`
	IconFileUrl      *string `json:"IconFileUrl,omitempty" xml:"IconFileUrl,omitempty"`
	IconUrl          *string `json:"IconUrl,omitempty" xml:"IconUrl,omitempty"`
	InstallType      *int64  `json:"InstallType,omitempty" xml:"InstallType,omitempty"`
	MainUrl          *string `json:"MainUrl,omitempty" xml:"MainUrl,omitempty"`
	OnexFlag         *bool   `json:"OnexFlag,omitempty" xml:"OnexFlag,omitempty"`
	PackageType      *int64  `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	Platform         *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	ResourceFileUrl  *string `json:"ResourceFileUrl,omitempty" xml:"ResourceFileUrl,omitempty"`
	ResourceType     *int64  `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TenantId         *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	UserId           *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Uuid             *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	Vhost            *string `json:"Vhost,omitempty" xml:"Vhost,omitempty"`
	WorkspaceId      *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UploadMcubeMiniPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadMcubeMiniPackageRequest) GoString() string {
	return s.String()
}

func (s *UploadMcubeMiniPackageRequest) SetAppId(v string) *UploadMcubeMiniPackageRequest {
	s.AppId = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetAutoInstall(v int64) *UploadMcubeMiniPackageRequest {
	s.AutoInstall = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetClientVersionMax(v string) *UploadMcubeMiniPackageRequest {
	s.ClientVersionMax = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetClientVersionMin(v string) *UploadMcubeMiniPackageRequest {
	s.ClientVersionMin = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetEnableKeepAlive(v string) *UploadMcubeMiniPackageRequest {
	s.EnableKeepAlive = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetEnableOptionMenu(v string) *UploadMcubeMiniPackageRequest {
	s.EnableOptionMenu = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetEnableTabBar(v int64) *UploadMcubeMiniPackageRequest {
	s.EnableTabBar = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetExtendInfo(v string) *UploadMcubeMiniPackageRequest {
	s.ExtendInfo = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetH5Id(v string) *UploadMcubeMiniPackageRequest {
	s.H5Id = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetH5Name(v string) *UploadMcubeMiniPackageRequest {
	s.H5Name = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetH5Version(v string) *UploadMcubeMiniPackageRequest {
	s.H5Version = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetIconFileUrl(v string) *UploadMcubeMiniPackageRequest {
	s.IconFileUrl = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetIconUrl(v string) *UploadMcubeMiniPackageRequest {
	s.IconUrl = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetInstallType(v int64) *UploadMcubeMiniPackageRequest {
	s.InstallType = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetMainUrl(v string) *UploadMcubeMiniPackageRequest {
	s.MainUrl = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetOnexFlag(v bool) *UploadMcubeMiniPackageRequest {
	s.OnexFlag = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetPackageType(v int64) *UploadMcubeMiniPackageRequest {
	s.PackageType = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetPlatform(v string) *UploadMcubeMiniPackageRequest {
	s.Platform = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetResourceFileUrl(v string) *UploadMcubeMiniPackageRequest {
	s.ResourceFileUrl = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetResourceType(v int64) *UploadMcubeMiniPackageRequest {
	s.ResourceType = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetTenantId(v string) *UploadMcubeMiniPackageRequest {
	s.TenantId = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetUserId(v string) *UploadMcubeMiniPackageRequest {
	s.UserId = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetUuid(v string) *UploadMcubeMiniPackageRequest {
	s.Uuid = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetVhost(v string) *UploadMcubeMiniPackageRequest {
	s.Vhost = &v
	return s
}

func (s *UploadMcubeMiniPackageRequest) SetWorkspaceId(v string) *UploadMcubeMiniPackageRequest {
	s.WorkspaceId = &v
	return s
}

type UploadMcubeMiniPackageResponseBody struct {
	RequestId               *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode              *string                                                    `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage           *string                                                    `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	UploadMiniPackageResult *UploadMcubeMiniPackageResponseBodyUploadMiniPackageResult `json:"UploadMiniPackageResult,omitempty" xml:"UploadMiniPackageResult,omitempty" type:"Struct"`
}

func (s UploadMcubeMiniPackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadMcubeMiniPackageResponseBody) GoString() string {
	return s.String()
}

func (s *UploadMcubeMiniPackageResponseBody) SetRequestId(v string) *UploadMcubeMiniPackageResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadMcubeMiniPackageResponseBody) SetResultCode(v string) *UploadMcubeMiniPackageResponseBody {
	s.ResultCode = &v
	return s
}

func (s *UploadMcubeMiniPackageResponseBody) SetResultMessage(v string) *UploadMcubeMiniPackageResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *UploadMcubeMiniPackageResponseBody) SetUploadMiniPackageResult(v *UploadMcubeMiniPackageResponseBodyUploadMiniPackageResult) *UploadMcubeMiniPackageResponseBody {
	s.UploadMiniPackageResult = v
	return s
}

type UploadMcubeMiniPackageResponseBodyUploadMiniPackageResult struct {
	ResultMsg           *string                                                                       `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	ReturnPackageResult *UploadMcubeMiniPackageResponseBodyUploadMiniPackageResultReturnPackageResult `json:"ReturnPackageResult,omitempty" xml:"ReturnPackageResult,omitempty" type:"Struct"`
	Success             *bool                                                                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UploadMcubeMiniPackageResponseBodyUploadMiniPackageResult) String() string {
	return tea.Prettify(s)
}

func (s UploadMcubeMiniPackageResponseBodyUploadMiniPackageResult) GoString() string {
	return s.String()
}

func (s *UploadMcubeMiniPackageResponseBodyUploadMiniPackageResult) SetResultMsg(v string) *UploadMcubeMiniPackageResponseBodyUploadMiniPackageResult {
	s.ResultMsg = &v
	return s
}

func (s *UploadMcubeMiniPackageResponseBodyUploadMiniPackageResult) SetReturnPackageResult(v *UploadMcubeMiniPackageResponseBodyUploadMiniPackageResultReturnPackageResult) *UploadMcubeMiniPackageResponseBodyUploadMiniPackageResult {
	s.ReturnPackageResult = v
	return s
}

func (s *UploadMcubeMiniPackageResponseBodyUploadMiniPackageResult) SetSuccess(v bool) *UploadMcubeMiniPackageResponseBodyUploadMiniPackageResult {
	s.Success = &v
	return s
}

type UploadMcubeMiniPackageResponseBodyUploadMiniPackageResultReturnPackageResult struct {
	DebugUrl  *string `json:"DebugUrl,omitempty" xml:"DebugUrl,omitempty"`
	PackageId *string `json:"PackageId,omitempty" xml:"PackageId,omitempty"`
	UserId    *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s UploadMcubeMiniPackageResponseBodyUploadMiniPackageResultReturnPackageResult) String() string {
	return tea.Prettify(s)
}

func (s UploadMcubeMiniPackageResponseBodyUploadMiniPackageResultReturnPackageResult) GoString() string {
	return s.String()
}

func (s *UploadMcubeMiniPackageResponseBodyUploadMiniPackageResultReturnPackageResult) SetDebugUrl(v string) *UploadMcubeMiniPackageResponseBodyUploadMiniPackageResultReturnPackageResult {
	s.DebugUrl = &v
	return s
}

func (s *UploadMcubeMiniPackageResponseBodyUploadMiniPackageResultReturnPackageResult) SetPackageId(v string) *UploadMcubeMiniPackageResponseBodyUploadMiniPackageResultReturnPackageResult {
	s.PackageId = &v
	return s
}

func (s *UploadMcubeMiniPackageResponseBodyUploadMiniPackageResultReturnPackageResult) SetUserId(v string) *UploadMcubeMiniPackageResponseBodyUploadMiniPackageResultReturnPackageResult {
	s.UserId = &v
	return s
}

type UploadMcubeMiniPackageResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UploadMcubeMiniPackageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UploadMcubeMiniPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadMcubeMiniPackageResponse) GoString() string {
	return s.String()
}

func (s *UploadMcubeMiniPackageResponse) SetHeaders(v map[string]*string) *UploadMcubeMiniPackageResponse {
	s.Headers = v
	return s
}

func (s *UploadMcubeMiniPackageResponse) SetStatusCode(v int32) *UploadMcubeMiniPackageResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadMcubeMiniPackageResponse) SetBody(v *UploadMcubeMiniPackageResponseBody) *UploadMcubeMiniPackageResponse {
	s.Body = v
	return s
}

type UploadMcubeRsaKeyRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	FileUrl     *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	OnexFlag    *bool   `json:"OnexFlag,omitempty" xml:"OnexFlag,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UploadMcubeRsaKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadMcubeRsaKeyRequest) GoString() string {
	return s.String()
}

func (s *UploadMcubeRsaKeyRequest) SetAppId(v string) *UploadMcubeRsaKeyRequest {
	s.AppId = &v
	return s
}

func (s *UploadMcubeRsaKeyRequest) SetFileUrl(v string) *UploadMcubeRsaKeyRequest {
	s.FileUrl = &v
	return s
}

func (s *UploadMcubeRsaKeyRequest) SetOnexFlag(v bool) *UploadMcubeRsaKeyRequest {
	s.OnexFlag = &v
	return s
}

func (s *UploadMcubeRsaKeyRequest) SetTenantId(v string) *UploadMcubeRsaKeyRequest {
	s.TenantId = &v
	return s
}

func (s *UploadMcubeRsaKeyRequest) SetWorkspaceId(v string) *UploadMcubeRsaKeyRequest {
	s.WorkspaceId = &v
	return s
}

type UploadMcubeRsaKeyResponseBody struct {
	RequestId       *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode      *string                                       `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage   *string                                       `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	UploadRsaResult *UploadMcubeRsaKeyResponseBodyUploadRsaResult `json:"UploadRsaResult,omitempty" xml:"UploadRsaResult,omitempty" type:"Struct"`
}

func (s UploadMcubeRsaKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadMcubeRsaKeyResponseBody) GoString() string {
	return s.String()
}

func (s *UploadMcubeRsaKeyResponseBody) SetRequestId(v string) *UploadMcubeRsaKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadMcubeRsaKeyResponseBody) SetResultCode(v string) *UploadMcubeRsaKeyResponseBody {
	s.ResultCode = &v
	return s
}

func (s *UploadMcubeRsaKeyResponseBody) SetResultMessage(v string) *UploadMcubeRsaKeyResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *UploadMcubeRsaKeyResponseBody) SetUploadRsaResult(v *UploadMcubeRsaKeyResponseBodyUploadRsaResult) *UploadMcubeRsaKeyResponseBody {
	s.UploadRsaResult = v
	return s
}

type UploadMcubeRsaKeyResponseBodyUploadRsaResult struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UploadMcubeRsaKeyResponseBodyUploadRsaResult) String() string {
	return tea.Prettify(s)
}

func (s UploadMcubeRsaKeyResponseBodyUploadRsaResult) GoString() string {
	return s.String()
}

func (s *UploadMcubeRsaKeyResponseBodyUploadRsaResult) SetData(v string) *UploadMcubeRsaKeyResponseBodyUploadRsaResult {
	s.Data = &v
	return s
}

func (s *UploadMcubeRsaKeyResponseBodyUploadRsaResult) SetResultMsg(v string) *UploadMcubeRsaKeyResponseBodyUploadRsaResult {
	s.ResultMsg = &v
	return s
}

func (s *UploadMcubeRsaKeyResponseBodyUploadRsaResult) SetSuccess(v bool) *UploadMcubeRsaKeyResponseBodyUploadRsaResult {
	s.Success = &v
	return s
}

type UploadMcubeRsaKeyResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UploadMcubeRsaKeyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UploadMcubeRsaKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadMcubeRsaKeyResponse) GoString() string {
	return s.String()
}

func (s *UploadMcubeRsaKeyResponse) SetHeaders(v map[string]*string) *UploadMcubeRsaKeyResponse {
	s.Headers = v
	return s
}

func (s *UploadMcubeRsaKeyResponse) SetStatusCode(v int32) *UploadMcubeRsaKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadMcubeRsaKeyResponse) SetBody(v *UploadMcubeRsaKeyResponseBody) *UploadMcubeRsaKeyResponse {
	s.Body = v
	return s
}

type UploadUserAppToMsaRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	FileUrl     *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UploadUserAppToMsaRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadUserAppToMsaRequest) GoString() string {
	return s.String()
}

func (s *UploadUserAppToMsaRequest) SetAppId(v string) *UploadUserAppToMsaRequest {
	s.AppId = &v
	return s
}

func (s *UploadUserAppToMsaRequest) SetFileUrl(v string) *UploadUserAppToMsaRequest {
	s.FileUrl = &v
	return s
}

func (s *UploadUserAppToMsaRequest) SetTenantId(v string) *UploadUserAppToMsaRequest {
	s.TenantId = &v
	return s
}

func (s *UploadUserAppToMsaRequest) SetWorkspaceId(v string) *UploadUserAppToMsaRequest {
	s.WorkspaceId = &v
	return s
}

type UploadUserAppToMsaResponseBody struct {
	RequestId     *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResultCode    *string                                      `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultContent *UploadUserAppToMsaResponseBodyResultContent `json:"ResultContent,omitempty" xml:"ResultContent,omitempty" type:"Struct"`
	ResultMessage *string                                      `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
}

func (s UploadUserAppToMsaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadUserAppToMsaResponseBody) GoString() string {
	return s.String()
}

func (s *UploadUserAppToMsaResponseBody) SetRequestId(v string) *UploadUserAppToMsaResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadUserAppToMsaResponseBody) SetResultCode(v string) *UploadUserAppToMsaResponseBody {
	s.ResultCode = &v
	return s
}

func (s *UploadUserAppToMsaResponseBody) SetResultContent(v *UploadUserAppToMsaResponseBodyResultContent) *UploadUserAppToMsaResponseBody {
	s.ResultContent = v
	return s
}

func (s *UploadUserAppToMsaResponseBody) SetResultMessage(v string) *UploadUserAppToMsaResponseBody {
	s.ResultMessage = &v
	return s
}

type UploadUserAppToMsaResponseBodyResultContent struct {
	Code    *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *UploadUserAppToMsaResponseBodyResultContentData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Extra   *string                                          `json:"Extra,omitempty" xml:"Extra,omitempty"`
	Message *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UploadUserAppToMsaResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s UploadUserAppToMsaResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *UploadUserAppToMsaResponseBodyResultContent) SetCode(v string) *UploadUserAppToMsaResponseBodyResultContent {
	s.Code = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContent) SetData(v *UploadUserAppToMsaResponseBodyResultContentData) *UploadUserAppToMsaResponseBodyResultContent {
	s.Data = v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContent) SetExtra(v string) *UploadUserAppToMsaResponseBodyResultContent {
	s.Extra = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContent) SetMessage(v string) *UploadUserAppToMsaResponseBodyResultContent {
	s.Message = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContent) SetSuccess(v bool) *UploadUserAppToMsaResponseBodyResultContent {
	s.Success = &v
	return s
}

type UploadUserAppToMsaResponseBodyResultContentData struct {
	ApkInfo       *UploadUserAppToMsaResponseBodyResultContentDataApkInfo `json:"ApkInfo,omitempty" xml:"ApkInfo,omitempty" type:"Struct"`
	EnhanceTaskId *int64                                                  `json:"EnhanceTaskId,omitempty" xml:"EnhanceTaskId,omitempty"`
	Id            *int64                                                  `json:"Id,omitempty" xml:"Id,omitempty"`
	Progress      *int64                                                  `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status        *int64                                                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UploadUserAppToMsaResponseBodyResultContentData) String() string {
	return tea.Prettify(s)
}

func (s UploadUserAppToMsaResponseBodyResultContentData) GoString() string {
	return s.String()
}

func (s *UploadUserAppToMsaResponseBodyResultContentData) SetApkInfo(v *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) *UploadUserAppToMsaResponseBodyResultContentData {
	s.ApkInfo = v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentData) SetEnhanceTaskId(v int64) *UploadUserAppToMsaResponseBodyResultContentData {
	s.EnhanceTaskId = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentData) SetId(v int64) *UploadUserAppToMsaResponseBodyResultContentData {
	s.Id = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentData) SetProgress(v int64) *UploadUserAppToMsaResponseBodyResultContentData {
	s.Progress = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentData) SetStatus(v int64) *UploadUserAppToMsaResponseBodyResultContentData {
	s.Status = &v
	return s
}

type UploadUserAppToMsaResponseBodyResultContentDataApkInfo struct {
	AfterMd5        *string                                                               `json:"AfterMd5,omitempty" xml:"AfterMd5,omitempty"`
	AfterSize       *int64                                                                `json:"AfterSize,omitempty" xml:"AfterSize,omitempty"`
	AppCode         *string                                                               `json:"AppCode,omitempty" xml:"AppCode,omitempty"`
	AppPackage      *string                                                               `json:"AppPackage,omitempty" xml:"AppPackage,omitempty"`
	BeforeMd5       *string                                                               `json:"BeforeMd5,omitempty" xml:"BeforeMd5,omitempty"`
	BeforeSize      *int64                                                                `json:"BeforeSize,omitempty" xml:"BeforeSize,omitempty"`
	ClassForest     *string                                                               `json:"ClassForest,omitempty" xml:"ClassForest,omitempty"`
	EnhanceMapping  *UploadUserAppToMsaResponseBodyResultContentDataApkInfoEnhanceMapping `json:"EnhanceMapping,omitempty" xml:"EnhanceMapping,omitempty" type:"Struct"`
	EnhanceRules    []*string                                                             `json:"EnhanceRules,omitempty" xml:"EnhanceRules,omitempty" type:"Repeated"`
	EnhancedClasses []*string                                                             `json:"EnhancedClasses,omitempty" xml:"EnhancedClasses,omitempty" type:"Repeated"`
	Id              *int64                                                                `json:"Id,omitempty" xml:"Id,omitempty"`
	Label           *string                                                               `json:"Label,omitempty" xml:"Label,omitempty"`
	Progress        *int64                                                                `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status          *int64                                                                `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskType        *string                                                               `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	VersionCode     *string                                                               `json:"VersionCode,omitempty" xml:"VersionCode,omitempty"`
	VersionName     *string                                                               `json:"VersionName,omitempty" xml:"VersionName,omitempty"`
}

func (s UploadUserAppToMsaResponseBodyResultContentDataApkInfo) String() string {
	return tea.Prettify(s)
}

func (s UploadUserAppToMsaResponseBodyResultContentDataApkInfo) GoString() string {
	return s.String()
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetAfterMd5(v string) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.AfterMd5 = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetAfterSize(v int64) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.AfterSize = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetAppCode(v string) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.AppCode = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetAppPackage(v string) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.AppPackage = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetBeforeMd5(v string) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.BeforeMd5 = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetBeforeSize(v int64) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.BeforeSize = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetClassForest(v string) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.ClassForest = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetEnhanceMapping(v *UploadUserAppToMsaResponseBodyResultContentDataApkInfoEnhanceMapping) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.EnhanceMapping = v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetEnhanceRules(v []*string) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.EnhanceRules = v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetEnhancedClasses(v []*string) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.EnhancedClasses = v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetId(v int64) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.Id = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetLabel(v string) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.Label = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetProgress(v int64) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.Progress = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetStatus(v int64) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.Status = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetTaskType(v string) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.TaskType = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetVersionCode(v string) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.VersionCode = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfo) SetVersionName(v string) *UploadUserAppToMsaResponseBodyResultContentDataApkInfo {
	s.VersionName = &v
	return s
}

type UploadUserAppToMsaResponseBodyResultContentDataApkInfoEnhanceMapping struct {
	Info   *string `json:"Info,omitempty" xml:"Info,omitempty"`
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UploadUserAppToMsaResponseBodyResultContentDataApkInfoEnhanceMapping) String() string {
	return tea.Prettify(s)
}

func (s UploadUserAppToMsaResponseBodyResultContentDataApkInfoEnhanceMapping) GoString() string {
	return s.String()
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfoEnhanceMapping) SetInfo(v string) *UploadUserAppToMsaResponseBodyResultContentDataApkInfoEnhanceMapping {
	s.Info = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfoEnhanceMapping) SetReason(v string) *UploadUserAppToMsaResponseBodyResultContentDataApkInfoEnhanceMapping {
	s.Reason = &v
	return s
}

func (s *UploadUserAppToMsaResponseBodyResultContentDataApkInfoEnhanceMapping) SetType(v string) *UploadUserAppToMsaResponseBodyResultContentDataApkInfoEnhanceMapping {
	s.Type = &v
	return s
}

type UploadUserAppToMsaResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UploadUserAppToMsaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UploadUserAppToMsaResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadUserAppToMsaResponse) GoString() string {
	return s.String()
}

func (s *UploadUserAppToMsaResponse) SetHeaders(v map[string]*string) *UploadUserAppToMsaResponse {
	s.Headers = v
	return s
}

func (s *UploadUserAppToMsaResponse) SetStatusCode(v int32) *UploadUserAppToMsaResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadUserAppToMsaResponse) SetBody(v *UploadUserAppToMsaResponseBody) *UploadUserAppToMsaResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-hangzhou":                 tea.String("mpaas.aliyuncs.com"),
		"ap-northeast-1":              tea.String("mpaas.aliyuncs.com"),
		"ap-northeast-2-pop":          tea.String("mpaas.aliyuncs.com"),
		"ap-south-1":                  tea.String("mpaas.aliyuncs.com"),
		"ap-southeast-1":              tea.String("mpaas.aliyuncs.com"),
		"ap-southeast-2":              tea.String("mpaas.aliyuncs.com"),
		"ap-southeast-3":              tea.String("mpaas.aliyuncs.com"),
		"ap-southeast-5":              tea.String("mpaas.aliyuncs.com"),
		"cn-beijing":                  tea.String("mpaas.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("mpaas.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("mpaas.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("mpaas.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("mpaas.aliyuncs.com"),
		"cn-chengdu":                  tea.String("mpaas.aliyuncs.com"),
		"cn-edge-1":                   tea.String("mpaas.aliyuncs.com"),
		"cn-fujian":                   tea.String("mpaas.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("mpaas.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("mpaas.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("mpaas.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("mpaas.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("mpaas.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("mpaas.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("mpaas.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("mpaas.aliyuncs.com"),
		"cn-hongkong":                 tea.String("mpaas.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("mpaas.aliyuncs.com"),
		"cn-huhehaote":                tea.String("mpaas.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("mpaas.aliyuncs.com"),
		"cn-qingdao":                  tea.String("mpaas.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("mpaas.aliyuncs.com"),
		"cn-shanghai":                 tea.String("mpaas.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("mpaas.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("mpaas.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("mpaas.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("mpaas.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("mpaas.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("mpaas.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("mpaas.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("mpaas.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("mpaas.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("mpaas.aliyuncs.com"),
		"cn-wuhan":                    tea.String("mpaas.aliyuncs.com"),
		"cn-yushanfang":               tea.String("mpaas.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("mpaas.aliyuncs.com"),
		"cn-zhangjiakou":              tea.String("mpaas.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("mpaas.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("mpaas.aliyuncs.com"),
		"eu-central-1":                tea.String("mpaas.aliyuncs.com"),
		"eu-west-1":                   tea.String("mpaas.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("mpaas.aliyuncs.com"),
		"me-east-1":                   tea.String("mpaas.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("mpaas.aliyuncs.com"),
		"us-east-1":                   tea.String("mpaas.aliyuncs.com"),
		"us-west-1":                   tea.String("mpaas.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("mpaas"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddMdsMiniConfigWithOptions(request *AddMdsMiniConfigRequest, runtime *util.RuntimeOptions) (_result *AddMdsMiniConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMiniConfigAddJsonStr)) {
		body["MpaasMappcenterMiniConfigAddJsonStr"] = request.MpaasMappcenterMiniConfigAddJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddMdsMiniConfig"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddMdsMiniConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddMdsMiniConfig(request *AddMdsMiniConfigRequest) (_result *AddMdsMiniConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMdsMiniConfigResponse{}
	_body, _err := client.AddMdsMiniConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelPushSchedulerWithOptions(request *CancelPushSchedulerRequest, runtime *util.RuntimeOptions) (_result *CancelPushSchedulerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UniqueIds)) {
		body["UniqueIds"] = request.UniqueIds
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelPushScheduler"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelPushSchedulerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelPushScheduler(request *CancelPushSchedulerRequest) (_result *CancelPushSchedulerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelPushSchedulerResponse{}
	_body, _err := client.CancelPushSchedulerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ChangeMcubeMiniTaskStatusWithOptions(request *ChangeMcubeMiniTaskStatusRequest, runtime *util.RuntimeOptions) (_result *ChangeMcubeMiniTaskStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		body["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.PackageId)) {
		body["PackageId"] = request.PackageId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskStatus)) {
		body["TaskStatus"] = request.TaskStatus
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ChangeMcubeMiniTaskStatus"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ChangeMcubeMiniTaskStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ChangeMcubeMiniTaskStatus(request *ChangeMcubeMiniTaskStatusRequest) (_result *ChangeMcubeMiniTaskStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ChangeMcubeMiniTaskStatusResponse{}
	_body, _err := client.ChangeMcubeMiniTaskStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ChangeMcubeNebulaTaskStatusWithOptions(request *ChangeMcubeNebulaTaskStatusRequest, runtime *util.RuntimeOptions) (_result *ChangeMcubeNebulaTaskStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		body["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.PackageId)) {
		body["PackageId"] = request.PackageId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskStatus)) {
		body["TaskStatus"] = request.TaskStatus
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ChangeMcubeNebulaTaskStatus"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ChangeMcubeNebulaTaskStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ChangeMcubeNebulaTaskStatus(request *ChangeMcubeNebulaTaskStatusRequest) (_result *ChangeMcubeNebulaTaskStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ChangeMcubeNebulaTaskStatusResponse{}
	_body, _err := client.ChangeMcubeNebulaTaskStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ChangeMcubePublicTaskStatusWithOptions(request *ChangeMcubePublicTaskStatusRequest, runtime *util.RuntimeOptions) (_result *ChangeMcubePublicTaskStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskStatus)) {
		body["TaskStatus"] = request.TaskStatus
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ChangeMcubePublicTaskStatus"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ChangeMcubePublicTaskStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ChangeMcubePublicTaskStatus(request *ChangeMcubePublicTaskStatusRequest) (_result *ChangeMcubePublicTaskStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ChangeMcubePublicTaskStatusResponse{}
	_body, _err := client.ChangeMcubePublicTaskStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopyMcdpGroupWithOptions(request *CopyMcdpGroupRequest, runtime *util.RuntimeOptions) (_result *CopyMcdpGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMcdpGroupCopyJsonStr)) {
		body["MpaasMappcenterMcdpGroupCopyJsonStr"] = request.MpaasMappcenterMcdpGroupCopyJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CopyMcdpGroup"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CopyMcdpGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopyMcdpGroup(request *CopyMcdpGroupRequest) (_result *CopyMcdpGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyMcdpGroupResponse{}
	_body, _err := client.CopyMcdpGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMasCrowdWithOptions(request *CreateMasCrowdRequest, runtime *util.RuntimeOptions) (_result *CreateMasCrowdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMcdpMasCrowdCreateJsonStr)) {
		body["MpaasMappcenterMcdpMasCrowdCreateJsonStr"] = request.MpaasMappcenterMcdpMasCrowdCreateJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMasCrowd"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMasCrowdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMasCrowd(request *CreateMasCrowdRequest) (_result *CreateMasCrowdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMasCrowdResponse{}
	_body, _err := client.CreateMasCrowdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMasFunnelWithOptions(request *CreateMasFunnelRequest, runtime *util.RuntimeOptions) (_result *CreateMasFunnelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMcdpMasFunnelCreateJsonStr)) {
		body["MpaasMappcenterMcdpMasFunnelCreateJsonStr"] = request.MpaasMappcenterMcdpMasFunnelCreateJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMasFunnel"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMasFunnelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMasFunnel(request *CreateMasFunnelRequest) (_result *CreateMasFunnelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMasFunnelResponse{}
	_body, _err := client.CreateMasFunnelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMcdpEventWithOptions(request *CreateMcdpEventRequest, runtime *util.RuntimeOptions) (_result *CreateMcdpEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMcdpEventCreateJsonStr)) {
		body["MpaasMappcenterMcdpEventCreateJsonStr"] = request.MpaasMappcenterMcdpEventCreateJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMcdpEvent"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMcdpEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMcdpEvent(request *CreateMcdpEventRequest) (_result *CreateMcdpEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMcdpEventResponse{}
	_body, _err := client.CreateMcdpEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMcdpEventAttributeWithOptions(request *CreateMcdpEventAttributeRequest, runtime *util.RuntimeOptions) (_result *CreateMcdpEventAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMcdpEventAttributeCreateJsonStr)) {
		body["MpaasMappcenterMcdpEventAttributeCreateJsonStr"] = request.MpaasMappcenterMcdpEventAttributeCreateJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMcdpEventAttribute"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMcdpEventAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMcdpEventAttribute(request *CreateMcdpEventAttributeRequest) (_result *CreateMcdpEventAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMcdpEventAttributeResponse{}
	_body, _err := client.CreateMcdpEventAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMcdpGroupWithOptions(request *CreateMcdpGroupRequest, runtime *util.RuntimeOptions) (_result *CreateMcdpGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMcdpGroupCreateJsonStr)) {
		body["MpaasMappcenterMcdpGroupCreateJsonStr"] = request.MpaasMappcenterMcdpGroupCreateJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMcdpGroup"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMcdpGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMcdpGroup(request *CreateMcdpGroupRequest) (_result *CreateMcdpGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMcdpGroupResponse{}
	_body, _err := client.CreateMcdpGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMcdpMaterialWithOptions(request *CreateMcdpMaterialRequest, runtime *util.RuntimeOptions) (_result *CreateMcdpMaterialResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMcdpMaterialCreateJsonStr)) {
		body["MpaasMappcenterMcdpMaterialCreateJsonStr"] = request.MpaasMappcenterMcdpMaterialCreateJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMcdpMaterial"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMcdpMaterialResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMcdpMaterial(request *CreateMcdpMaterialRequest) (_result *CreateMcdpMaterialResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMcdpMaterialResponse{}
	_body, _err := client.CreateMcdpMaterialWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMcdpZoneWithOptions(request *CreateMcdpZoneRequest, runtime *util.RuntimeOptions) (_result *CreateMcdpZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMcdpZoneCreateJsonStr)) {
		body["MpaasMappcenterMcdpZoneCreateJsonStr"] = request.MpaasMappcenterMcdpZoneCreateJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMcdpZone"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMcdpZoneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMcdpZone(request *CreateMcdpZoneRequest) (_result *CreateMcdpZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMcdpZoneResponse{}
	_body, _err := client.CreateMcdpZoneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMcubeMiniAppWithOptions(request *CreateMcubeMiniAppRequest, runtime *util.RuntimeOptions) (_result *CreateMcubeMiniAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.H5Id)) {
		body["H5Id"] = request.H5Id
	}

	if !tea.BoolValue(util.IsUnset(request.H5Name)) {
		body["H5Name"] = request.H5Name
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMcubeMiniApp"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMcubeMiniAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMcubeMiniApp(request *CreateMcubeMiniAppRequest) (_result *CreateMcubeMiniAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMcubeMiniAppResponse{}
	_body, _err := client.CreateMcubeMiniAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMcubeMiniTaskWithOptions(request *CreateMcubeMiniTaskRequest, runtime *util.RuntimeOptions) (_result *CreateMcubeMiniTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.GreyConfigInfo)) {
		body["GreyConfigInfo"] = request.GreyConfigInfo
	}

	if !tea.BoolValue(util.IsUnset(request.GreyEndtimeData)) {
		body["GreyEndtimeData"] = request.GreyEndtimeData
	}

	if !tea.BoolValue(util.IsUnset(request.GreyNum)) {
		body["GreyNum"] = request.GreyNum
	}

	if !tea.BoolValue(util.IsUnset(request.Memo)) {
		body["Memo"] = request.Memo
	}

	if !tea.BoolValue(util.IsUnset(request.PackageId)) {
		body["PackageId"] = request.PackageId
	}

	if !tea.BoolValue(util.IsUnset(request.PublishMode)) {
		body["PublishMode"] = request.PublishMode
	}

	if !tea.BoolValue(util.IsUnset(request.PublishType)) {
		body["PublishType"] = request.PublishType
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WhitelistIds)) {
		body["WhitelistIds"] = request.WhitelistIds
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMcubeMiniTask"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMcubeMiniTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMcubeMiniTask(request *CreateMcubeMiniTaskRequest) (_result *CreateMcubeMiniTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMcubeMiniTaskResponse{}
	_body, _err := client.CreateMcubeMiniTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMcubeNebulaAppWithOptions(request *CreateMcubeNebulaAppRequest, runtime *util.RuntimeOptions) (_result *CreateMcubeNebulaAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.H5Id)) {
		body["H5Id"] = request.H5Id
	}

	if !tea.BoolValue(util.IsUnset(request.H5Name)) {
		body["H5Name"] = request.H5Name
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMcubeNebulaApp"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMcubeNebulaAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMcubeNebulaApp(request *CreateMcubeNebulaAppRequest) (_result *CreateMcubeNebulaAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMcubeNebulaAppResponse{}
	_body, _err := client.CreateMcubeNebulaAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMcubeNebulaResourceWithOptions(request *CreateMcubeNebulaResourceRequest, runtime *util.RuntimeOptions) (_result *CreateMcubeNebulaResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AutoInstall)) {
		body["AutoInstall"] = request.AutoInstall
	}

	if !tea.BoolValue(util.IsUnset(request.ClientVersionMax)) {
		body["ClientVersionMax"] = request.ClientVersionMax
	}

	if !tea.BoolValue(util.IsUnset(request.ClientVersionMin)) {
		body["ClientVersionMin"] = request.ClientVersionMin
	}

	if !tea.BoolValue(util.IsUnset(request.CustomDomainName)) {
		body["CustomDomainName"] = request.CustomDomainName
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendInfo)) {
		body["ExtendInfo"] = request.ExtendInfo
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		body["FileUrl"] = request.FileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.H5Id)) {
		body["H5Id"] = request.H5Id
	}

	if !tea.BoolValue(util.IsUnset(request.H5Name)) {
		body["H5Name"] = request.H5Name
	}

	if !tea.BoolValue(util.IsUnset(request.H5Version)) {
		body["H5Version"] = request.H5Version
	}

	if !tea.BoolValue(util.IsUnset(request.InstallType)) {
		body["InstallType"] = request.InstallType
	}

	if !tea.BoolValue(util.IsUnset(request.MainUrl)) {
		body["MainUrl"] = request.MainUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OnexFlag)) {
		body["OnexFlag"] = request.OnexFlag
	}

	if !tea.BoolValue(util.IsUnset(request.Platform)) {
		body["Platform"] = request.Platform
	}

	if !tea.BoolValue(util.IsUnset(request.RepeatNebula)) {
		body["RepeatNebula"] = request.RepeatNebula
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		body["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.SubUrl)) {
		body["SubUrl"] = request.SubUrl
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.Vhost)) {
		body["Vhost"] = request.Vhost
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMcubeNebulaResource"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMcubeNebulaResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMcubeNebulaResource(request *CreateMcubeNebulaResourceRequest) (_result *CreateMcubeNebulaResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMcubeNebulaResourceResponse{}
	_body, _err := client.CreateMcubeNebulaResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMcubeNebulaTaskWithOptions(request *CreateMcubeNebulaTaskRequest, runtime *util.RuntimeOptions) (_result *CreateMcubeNebulaTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppCode)) {
		body["AppCode"] = request.AppCode
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		body["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.Creator)) {
		body["Creator"] = request.Creator
	}

	if !tea.BoolValue(util.IsUnset(request.GmtCreate)) {
		body["GmtCreate"] = request.GmtCreate
	}

	if !tea.BoolValue(util.IsUnset(request.GmtModified)) {
		body["GmtModified"] = request.GmtModified
	}

	if !tea.BoolValue(util.IsUnset(request.GmtModifiedStr)) {
		body["GmtModifiedStr"] = request.GmtModifiedStr
	}

	if !tea.BoolValue(util.IsUnset(request.GreyConfigInfo)) {
		body["GreyConfigInfo"] = request.GreyConfigInfo
	}

	if !tea.BoolValue(util.IsUnset(request.GreyEndtime)) {
		body["GreyEndtime"] = request.GreyEndtime
	}

	if !tea.BoolValue(util.IsUnset(request.GreyEndtimeData)) {
		body["GreyEndtimeData"] = request.GreyEndtimeData
	}

	if !tea.BoolValue(util.IsUnset(request.GreyEndtimeStr)) {
		body["GreyEndtimeStr"] = request.GreyEndtimeStr
	}

	if !tea.BoolValue(util.IsUnset(request.GreyNum)) {
		body["GreyNum"] = request.GreyNum
	}

	if !tea.BoolValue(util.IsUnset(request.GreyUrl)) {
		body["GreyUrl"] = request.GreyUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Memo)) {
		body["Memo"] = request.Memo
	}

	if !tea.BoolValue(util.IsUnset(request.Modifier)) {
		body["Modifier"] = request.Modifier
	}

	if !tea.BoolValue(util.IsUnset(request.PackageId)) {
		body["PackageId"] = request.PackageId
	}

	if !tea.BoolValue(util.IsUnset(request.Percent)) {
		body["Percent"] = request.Percent
	}

	if !tea.BoolValue(util.IsUnset(request.Platform)) {
		body["Platform"] = request.Platform
	}

	if !tea.BoolValue(util.IsUnset(request.ProductId)) {
		body["ProductId"] = request.ProductId
	}

	if !tea.BoolValue(util.IsUnset(request.ProductVersion)) {
		body["ProductVersion"] = request.ProductVersion
	}

	if !tea.BoolValue(util.IsUnset(request.PublishMode)) {
		body["PublishMode"] = request.PublishMode
	}

	if !tea.BoolValue(util.IsUnset(request.PublishType)) {
		body["PublishType"] = request.PublishType
	}

	if !tea.BoolValue(util.IsUnset(request.ReleaseVersion)) {
		body["ReleaseVersion"] = request.ReleaseVersion
	}

	if !tea.BoolValue(util.IsUnset(request.ResIds)) {
		body["ResIds"] = request.ResIds
	}

	if !tea.BoolValue(util.IsUnset(request.SerialVersionUID)) {
		body["SerialVersionUID"] = request.SerialVersionUID
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.SyncMode)) {
		body["SyncMode"] = request.SyncMode
	}

	if !tea.BoolValue(util.IsUnset(request.SyncResult)) {
		body["SyncResult"] = request.SyncResult
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		body["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskStatus)) {
		body["TaskStatus"] = request.TaskStatus
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		body["TaskType"] = request.TaskType
	}

	if !tea.BoolValue(util.IsUnset(request.TaskVersion)) {
		body["TaskVersion"] = request.TaskVersion
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.UpgradeNoticeNum)) {
		body["UpgradeNoticeNum"] = request.UpgradeNoticeNum
	}

	if !tea.BoolValue(util.IsUnset(request.UpgradeProgress)) {
		body["UpgradeProgress"] = request.UpgradeProgress
	}

	if !tea.BoolValue(util.IsUnset(request.WhitelistIds)) {
		body["WhitelistIds"] = request.WhitelistIds
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMcubeNebulaTask"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMcubeNebulaTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMcubeNebulaTask(request *CreateMcubeNebulaTaskRequest) (_result *CreateMcubeNebulaTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMcubeNebulaTaskResponse{}
	_body, _err := client.CreateMcubeNebulaTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMcubeUpgradePackageWithOptions(request *CreateMcubeUpgradePackageRequest, runtime *util.RuntimeOptions) (_result *CreateMcubeUpgradePackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppVersion)) {
		body["AppVersion"] = request.AppVersion
	}

	if !tea.BoolValue(util.IsUnset(request.AppstoreUrl)) {
		body["AppstoreUrl"] = request.AppstoreUrl
	}

	if !tea.BoolValue(util.IsUnset(request.BundleId)) {
		body["BundleId"] = request.BundleId
	}

	if !tea.BoolValue(util.IsUnset(request.CustomDomainName)) {
		body["CustomDomainName"] = request.CustomDomainName
	}

	if !tea.BoolValue(util.IsUnset(request.Desc)) {
		body["Desc"] = request.Desc
	}

	if !tea.BoolValue(util.IsUnset(request.DownloadUrl)) {
		body["DownloadUrl"] = request.DownloadUrl
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		body["FileUrl"] = request.FileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.IconFileUrl)) {
		body["IconFileUrl"] = request.IconFileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.InstallAmount)) {
		body["InstallAmount"] = request.InstallAmount
	}

	if !tea.BoolValue(util.IsUnset(request.IosSymbolfileUrl)) {
		body["IosSymbolfileUrl"] = request.IosSymbolfileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.IsEnterprise)) {
		body["IsEnterprise"] = request.IsEnterprise
	}

	if !tea.BoolValue(util.IsUnset(request.NeedCheck)) {
		body["NeedCheck"] = request.NeedCheck
	}

	if !tea.BoolValue(util.IsUnset(request.OnexFlag)) {
		body["OnexFlag"] = request.OnexFlag
	}

	if !tea.BoolValue(util.IsUnset(request.Platform)) {
		body["Platform"] = request.Platform
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.ValidDays)) {
		body["ValidDays"] = request.ValidDays
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMcubeUpgradePackage"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMcubeUpgradePackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMcubeUpgradePackage(request *CreateMcubeUpgradePackageRequest) (_result *CreateMcubeUpgradePackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMcubeUpgradePackageResponse{}
	_body, _err := client.CreateMcubeUpgradePackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMcubeUpgradeTaskWithOptions(request *CreateMcubeUpgradeTaskRequest, runtime *util.RuntimeOptions) (_result *CreateMcubeUpgradeTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.GreyConfigInfo)) {
		body["GreyConfigInfo"] = request.GreyConfigInfo
	}

	if !tea.BoolValue(util.IsUnset(request.GreyEndtimeData)) {
		body["GreyEndtimeData"] = request.GreyEndtimeData
	}

	if !tea.BoolValue(util.IsUnset(request.GreyNum)) {
		body["GreyNum"] = request.GreyNum
	}

	if !tea.BoolValue(util.IsUnset(request.HistoryForce)) {
		body["HistoryForce"] = request.HistoryForce
	}

	if !tea.BoolValue(util.IsUnset(request.Memo)) {
		body["Memo"] = request.Memo
	}

	if !tea.BoolValue(util.IsUnset(request.PackageInfoId)) {
		body["PackageInfoId"] = request.PackageInfoId
	}

	if !tea.BoolValue(util.IsUnset(request.PublishMode)) {
		body["PublishMode"] = request.PublishMode
	}

	if !tea.BoolValue(util.IsUnset(request.PublishType)) {
		body["PublishType"] = request.PublishType
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.UpgradeContent)) {
		body["UpgradeContent"] = request.UpgradeContent
	}

	if !tea.BoolValue(util.IsUnset(request.UpgradeType)) {
		body["UpgradeType"] = request.UpgradeType
	}

	if !tea.BoolValue(util.IsUnset(request.WhitelistIds)) {
		body["WhitelistIds"] = request.WhitelistIds
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMcubeUpgradeTask"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMcubeUpgradeTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMcubeUpgradeTask(request *CreateMcubeUpgradeTaskRequest) (_result *CreateMcubeUpgradeTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMcubeUpgradeTaskResponse{}
	_body, _err := client.CreateMcubeUpgradeTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMcubeVhostWithOptions(request *CreateMcubeVhostRequest, runtime *util.RuntimeOptions) (_result *CreateMcubeVhostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.Vhost)) {
		body["Vhost"] = request.Vhost
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMcubeVhost"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMcubeVhostResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMcubeVhost(request *CreateMcubeVhostRequest) (_result *CreateMcubeVhostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMcubeVhostResponse{}
	_body, _err := client.CreateMcubeVhostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMcubeWhitelistWithOptions(request *CreateMcubeWhitelistRequest, runtime *util.RuntimeOptions) (_result *CreateMcubeWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WhiteListName)) {
		body["WhiteListName"] = request.WhiteListName
	}

	if !tea.BoolValue(util.IsUnset(request.WhitelistType)) {
		body["WhitelistType"] = request.WhitelistType
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMcubeWhitelist"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMcubeWhitelistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMcubeWhitelist(request *CreateMcubeWhitelistRequest) (_result *CreateMcubeWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMcubeWhitelistResponse{}
	_body, _err := client.CreateMcubeWhitelistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMcubeWhitelistForIdeWithOptions(request *CreateMcubeWhitelistForIdeRequest, runtime *util.RuntimeOptions) (_result *CreateMcubeWhitelistForIdeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.WhitelistValue)) {
		body["WhitelistValue"] = request.WhitelistValue
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMcubeWhitelistForIde"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMcubeWhitelistForIdeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMcubeWhitelistForIde(request *CreateMcubeWhitelistForIdeRequest) (_result *CreateMcubeWhitelistForIdeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMcubeWhitelistForIdeResponse{}
	_body, _err := client.CreateMcubeWhitelistForIdeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMdsMiniprogramTaskWithOptions(request *CreateMdsMiniprogramTaskRequest, runtime *util.RuntimeOptions) (_result *CreateMdsMiniprogramTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.GreyConfigInfo)) {
		body["GreyConfigInfo"] = request.GreyConfigInfo
	}

	if !tea.BoolValue(util.IsUnset(request.GreyEndtimeData)) {
		body["GreyEndtimeData"] = request.GreyEndtimeData
	}

	if !tea.BoolValue(util.IsUnset(request.GreyNum)) {
		body["GreyNum"] = request.GreyNum
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Memo)) {
		body["Memo"] = request.Memo
	}

	if !tea.BoolValue(util.IsUnset(request.PackageId)) {
		body["PackageId"] = request.PackageId
	}

	if !tea.BoolValue(util.IsUnset(request.PublishMode)) {
		body["PublishMode"] = request.PublishMode
	}

	if !tea.BoolValue(util.IsUnset(request.PublishType)) {
		body["PublishType"] = request.PublishType
	}

	if !tea.BoolValue(util.IsUnset(request.SyncMode)) {
		body["SyncMode"] = request.SyncMode
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WhitelistIds)) {
		body["WhitelistIds"] = request.WhitelistIds
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMdsMiniprogramTask"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMdsMiniprogramTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMdsMiniprogramTask(request *CreateMdsMiniprogramTaskRequest) (_result *CreateMdsMiniprogramTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMdsMiniprogramTaskResponse{}
	_body, _err := client.CreateMdsMiniprogramTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMsaEnhanceWithOptions(request *CreateMsaEnhanceRequest, runtime *util.RuntimeOptions) (_result *CreateMsaEnhanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMsaEnhanceCreateJsonStr)) {
		body["MpaasMappcenterMsaEnhanceCreateJsonStr"] = request.MpaasMappcenterMsaEnhanceCreateJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMsaEnhance"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMsaEnhanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMsaEnhance(request *CreateMsaEnhanceRequest) (_result *CreateMsaEnhanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMsaEnhanceResponse{}
	_body, _err := client.CreateMsaEnhanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOpenGlobalDataWithOptions(request *CreateOpenGlobalDataRequest, runtime *util.RuntimeOptions) (_result *CreateOpenGlobalDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppMaxVersion)) {
		body["AppMaxVersion"] = request.AppMaxVersion
	}

	if !tea.BoolValue(util.IsUnset(request.AppMinVersion)) {
		body["AppMinVersion"] = request.AppMinVersion
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		body["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.ExtAttrStr)) {
		body["ExtAttrStr"] = request.ExtAttrStr
	}

	if !tea.BoolValue(util.IsUnset(request.MaxUid)) {
		body["MaxUid"] = request.MaxUid
	}

	if !tea.BoolValue(util.IsUnset(request.MinUid)) {
		body["MinUid"] = request.MinUid
	}

	if !tea.BoolValue(util.IsUnset(request.OsType)) {
		body["OsType"] = request.OsType
	}

	if !tea.BoolValue(util.IsUnset(request.Payload)) {
		body["Payload"] = request.Payload
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdMsgId)) {
		body["ThirdMsgId"] = request.ThirdMsgId
	}

	if !tea.BoolValue(util.IsUnset(request.Uids)) {
		body["Uids"] = request.Uids
	}

	if !tea.BoolValue(util.IsUnset(request.ValidTimeEnd)) {
		body["ValidTimeEnd"] = request.ValidTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.ValidTimeStart)) {
		body["ValidTimeStart"] = request.ValidTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOpenGlobalData"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOpenGlobalDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOpenGlobalData(request *CreateOpenGlobalDataRequest) (_result *CreateOpenGlobalDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOpenGlobalDataResponse{}
	_body, _err := client.CreateOpenGlobalDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOpenSingleDataWithOptions(request *CreateOpenSingleDataRequest, runtime *util.RuntimeOptions) (_result *CreateOpenSingleDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppMaxVersion)) {
		body["AppMaxVersion"] = request.AppMaxVersion
	}

	if !tea.BoolValue(util.IsUnset(request.AppMinVersion)) {
		body["AppMinVersion"] = request.AppMinVersion
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		body["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.CheckOnline)) {
		body["CheckOnline"] = request.CheckOnline
	}

	if !tea.BoolValue(util.IsUnset(request.ExtAttrStr)) {
		body["ExtAttrStr"] = request.ExtAttrStr
	}

	if !tea.BoolValue(util.IsUnset(request.LinkToken)) {
		body["LinkToken"] = request.LinkToken
	}

	if !tea.BoolValue(util.IsUnset(request.OsType)) {
		body["OsType"] = request.OsType
	}

	if !tea.BoolValue(util.IsUnset(request.Payload)) {
		body["Payload"] = request.Payload
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdMsgId)) {
		body["ThirdMsgId"] = request.ThirdMsgId
	}

	if !tea.BoolValue(util.IsUnset(request.ValidTimeEnd)) {
		body["ValidTimeEnd"] = request.ValidTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.ValidTimeStart)) {
		body["ValidTimeStart"] = request.ValidTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOpenSingleData"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOpenSingleDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOpenSingleData(request *CreateOpenSingleDataRequest) (_result *CreateOpenSingleDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOpenSingleDataResponse{}
	_body, _err := client.CreateOpenSingleDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCubecardWhitelistContentWithOptions(request *DeleteCubecardWhitelistContentRequest, runtime *util.RuntimeOptions) (_result *DeleteCubecardWhitelistContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WhitelistId)) {
		body["WhitelistId"] = request.WhitelistId
	}

	if !tea.BoolValue(util.IsUnset(request.WhitelistValue)) {
		body["WhitelistValue"] = request.WhitelistValue
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCubecardWhitelistContent"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCubecardWhitelistContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCubecardWhitelistContent(request *DeleteCubecardWhitelistContentRequest) (_result *DeleteCubecardWhitelistContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCubecardWhitelistContentResponse{}
	_body, _err := client.DeleteCubecardWhitelistContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMcdpAimWithOptions(request *DeleteMcdpAimRequest, runtime *util.RuntimeOptions) (_result *DeleteMcdpAimResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMcdpAimDeleteJsonStr)) {
		body["MpaasMappcenterMcdpAimDeleteJsonStr"] = request.MpaasMappcenterMcdpAimDeleteJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMcdpAim"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMcdpAimResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMcdpAim(request *DeleteMcdpAimRequest) (_result *DeleteMcdpAimResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMcdpAimResponse{}
	_body, _err := client.DeleteMcdpAimWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMcdpCrowdWithOptions(request *DeleteMcdpCrowdRequest, runtime *util.RuntimeOptions) (_result *DeleteMcdpCrowdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMcdpCrowdDeleteJsonStr)) {
		body["MpaasMappcenterMcdpCrowdDeleteJsonStr"] = request.MpaasMappcenterMcdpCrowdDeleteJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMcdpCrowd"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMcdpCrowdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMcdpCrowd(request *DeleteMcdpCrowdRequest) (_result *DeleteMcdpCrowdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMcdpCrowdResponse{}
	_body, _err := client.DeleteMcdpCrowdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMcdpEventAttributeByIdWithOptions(request *DeleteMcdpEventAttributeByIdRequest, runtime *util.RuntimeOptions) (_result *DeleteMcdpEventAttributeByIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMcdpEventAttributeDeleteJsonStr)) {
		body["MpaasMappcenterMcdpEventAttributeDeleteJsonStr"] = request.MpaasMappcenterMcdpEventAttributeDeleteJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMcdpEventAttributeById"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMcdpEventAttributeByIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMcdpEventAttributeById(request *DeleteMcdpEventAttributeByIdRequest) (_result *DeleteMcdpEventAttributeByIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMcdpEventAttributeByIdResponse{}
	_body, _err := client.DeleteMcdpEventAttributeByIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMcdpEventByIdWithOptions(request *DeleteMcdpEventByIdRequest, runtime *util.RuntimeOptions) (_result *DeleteMcdpEventByIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMcdpEventDeleteJsonStr)) {
		body["MpaasMappcenterMcdpEventDeleteJsonStr"] = request.MpaasMappcenterMcdpEventDeleteJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMcdpEventById"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMcdpEventByIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMcdpEventById(request *DeleteMcdpEventByIdRequest) (_result *DeleteMcdpEventByIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMcdpEventByIdResponse{}
	_body, _err := client.DeleteMcdpEventByIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMcdpMaterialWithOptions(request *DeleteMcdpMaterialRequest, runtime *util.RuntimeOptions) (_result *DeleteMcdpMaterialResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMcdpMaterialDeleteJsonStr)) {
		body["MpaasMappcenterMcdpMaterialDeleteJsonStr"] = request.MpaasMappcenterMcdpMaterialDeleteJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMcdpMaterial"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMcdpMaterialResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMcdpMaterial(request *DeleteMcdpMaterialRequest) (_result *DeleteMcdpMaterialResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMcdpMaterialResponse{}
	_body, _err := client.DeleteMcdpMaterialWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMcdpZoneWithOptions(request *DeleteMcdpZoneRequest, runtime *util.RuntimeOptions) (_result *DeleteMcdpZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMcdpZoneDeleteJsonStr)) {
		body["MpaasMappcenterMcdpZoneDeleteJsonStr"] = request.MpaasMappcenterMcdpZoneDeleteJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMcdpZone"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMcdpZoneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMcdpZone(request *DeleteMcdpZoneRequest) (_result *DeleteMcdpZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMcdpZoneResponse{}
	_body, _err := client.DeleteMcdpZoneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMcubeMiniAppWithOptions(request *DeleteMcubeMiniAppRequest, runtime *util.RuntimeOptions) (_result *DeleteMcubeMiniAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.H5Id)) {
		body["H5Id"] = request.H5Id
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMcubeMiniApp"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMcubeMiniAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMcubeMiniApp(request *DeleteMcubeMiniAppRequest) (_result *DeleteMcubeMiniAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMcubeMiniAppResponse{}
	_body, _err := client.DeleteMcubeMiniAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMcubeNebulaAppWithOptions(request *DeleteMcubeNebulaAppRequest, runtime *util.RuntimeOptions) (_result *DeleteMcubeNebulaAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.H5Id)) {
		body["H5Id"] = request.H5Id
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMcubeNebulaApp"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMcubeNebulaAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMcubeNebulaApp(request *DeleteMcubeNebulaAppRequest) (_result *DeleteMcubeNebulaAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMcubeNebulaAppResponse{}
	_body, _err := client.DeleteMcubeNebulaAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMcubeUpgradeResourceWithOptions(request *DeleteMcubeUpgradeResourceRequest, runtime *util.RuntimeOptions) (_result *DeleteMcubeUpgradeResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Platform)) {
		body["Platform"] = request.Platform
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMcubeUpgradeResource"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMcubeUpgradeResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMcubeUpgradeResource(request *DeleteMcubeUpgradeResourceRequest) (_result *DeleteMcubeUpgradeResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMcubeUpgradeResourceResponse{}
	_body, _err := client.DeleteMcubeUpgradeResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMcubeWhitelistWithOptions(request *DeleteMcubeWhitelistRequest, runtime *util.RuntimeOptions) (_result *DeleteMcubeWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMcubeWhitelist"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMcubeWhitelistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMcubeWhitelist(request *DeleteMcubeWhitelistRequest) (_result *DeleteMcubeWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMcubeWhitelistResponse{}
	_body, _err := client.DeleteMcubeWhitelistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMdsWhitelistContentWithOptions(request *DeleteMdsWhitelistContentRequest, runtime *util.RuntimeOptions) (_result *DeleteMdsWhitelistContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WhitelistId)) {
		body["WhitelistId"] = request.WhitelistId
	}

	if !tea.BoolValue(util.IsUnset(request.WhitelistValue)) {
		body["WhitelistValue"] = request.WhitelistValue
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMdsWhitelistContent"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMdsWhitelistContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMdsWhitelistContent(request *DeleteMdsWhitelistContentRequest) (_result *DeleteMdsWhitelistContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMdsWhitelistContentResponse{}
	_body, _err := client.DeleteMdsWhitelistContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ExistMcubeRsaKeyWithOptions(request *ExistMcubeRsaKeyRequest, runtime *util.RuntimeOptions) (_result *ExistMcubeRsaKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExistMcubeRsaKey"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExistMcubeRsaKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ExistMcubeRsaKey(request *ExistMcubeRsaKeyRequest) (_result *ExistMcubeRsaKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExistMcubeRsaKeyResponse{}
	_body, _err := client.ExistMcubeRsaKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ExportMappCenterAppConfigWithOptions(request *ExportMappCenterAppConfigRequest, runtime *util.RuntimeOptions) (_result *ExportMappCenterAppConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApkFileUrl)) {
		body["ApkFileUrl"] = request.ApkFileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.CertRsaBase64)) {
		body["CertRsaBase64"] = request.CertRsaBase64
	}

	if !tea.BoolValue(util.IsUnset(request.Identifier)) {
		body["Identifier"] = request.Identifier
	}

	if !tea.BoolValue(util.IsUnset(request.OnexFlag)) {
		body["OnexFlag"] = request.OnexFlag
	}

	if !tea.BoolValue(util.IsUnset(request.SystemType)) {
		body["SystemType"] = request.SystemType
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportMappCenterAppConfig"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportMappCenterAppConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ExportMappCenterAppConfig(request *ExportMappCenterAppConfigRequest) (_result *ExportMappCenterAppConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportMappCenterAppConfigResponse{}
	_body, _err := client.ExportMappCenterAppConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetFileTokenForUploadToMsaWithOptions(request *GetFileTokenForUploadToMsaRequest, runtime *util.RuntimeOptions) (_result *GetFileTokenForUploadToMsaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.OnexFlag)) {
		body["OnexFlag"] = request.OnexFlag
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFileTokenForUploadToMsa"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFileTokenForUploadToMsaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetFileTokenForUploadToMsa(request *GetFileTokenForUploadToMsaRequest) (_result *GetFileTokenForUploadToMsaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFileTokenForUploadToMsaResponse{}
	_body, _err := client.GetFileTokenForUploadToMsaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetLogUrlInMsaWithOptions(request *GetLogUrlInMsaRequest, runtime *util.RuntimeOptions) (_result *GetLogUrlInMsaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLogUrlInMsa"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLogUrlInMsaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetLogUrlInMsa(request *GetLogUrlInMsaRequest) (_result *GetLogUrlInMsaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLogUrlInMsaResponse{}
	_body, _err := client.GetLogUrlInMsaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMcubeFileTokenWithOptions(request *GetMcubeFileTokenRequest, runtime *util.RuntimeOptions) (_result *GetMcubeFileTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.OnexFlag)) {
		body["OnexFlag"] = request.OnexFlag
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMcubeFileToken"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMcubeFileTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMcubeFileToken(request *GetMcubeFileTokenRequest) (_result *GetMcubeFileTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMcubeFileTokenResponse{}
	_body, _err := client.GetMcubeFileTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMcubeNebulaResourceWithOptions(request *GetMcubeNebulaResourceRequest, runtime *util.RuntimeOptions) (_result *GetMcubeNebulaResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMcubeNebulaResource"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMcubeNebulaResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMcubeNebulaResource(request *GetMcubeNebulaResourceRequest) (_result *GetMcubeNebulaResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMcubeNebulaResourceResponse{}
	_body, _err := client.GetMcubeNebulaResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMcubeNebulaTaskDetailWithOptions(request *GetMcubeNebulaTaskDetailRequest, runtime *util.RuntimeOptions) (_result *GetMcubeNebulaTaskDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMcubeNebulaTaskDetail"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMcubeNebulaTaskDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMcubeNebulaTaskDetail(request *GetMcubeNebulaTaskDetailRequest) (_result *GetMcubeNebulaTaskDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMcubeNebulaTaskDetailResponse{}
	_body, _err := client.GetMcubeNebulaTaskDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMcubeUpgradePackageInfoWithOptions(request *GetMcubeUpgradePackageInfoRequest, runtime *util.RuntimeOptions) (_result *GetMcubeUpgradePackageInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.PackageId)) {
		body["PackageId"] = request.PackageId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMcubeUpgradePackageInfo"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMcubeUpgradePackageInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMcubeUpgradePackageInfo(request *GetMcubeUpgradePackageInfoRequest) (_result *GetMcubeUpgradePackageInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMcubeUpgradePackageInfoResponse{}
	_body, _err := client.GetMcubeUpgradePackageInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMcubeUpgradeTaskInfoWithOptions(request *GetMcubeUpgradeTaskInfoRequest, runtime *util.RuntimeOptions) (_result *GetMcubeUpgradeTaskInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMcubeUpgradeTaskInfo"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMcubeUpgradeTaskInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMcubeUpgradeTaskInfo(request *GetMcubeUpgradeTaskInfoRequest) (_result *GetMcubeUpgradeTaskInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMcubeUpgradeTaskInfoResponse{}
	_body, _err := client.GetMcubeUpgradeTaskInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMdsMiniConfigWithOptions(request *GetMdsMiniConfigRequest, runtime *util.RuntimeOptions) (_result *GetMdsMiniConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.H5Id)) {
		body["H5Id"] = request.H5Id
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMdsMiniConfig"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMdsMiniConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMdsMiniConfig(request *GetMdsMiniConfigRequest) (_result *GetMdsMiniConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMdsMiniConfigResponse{}
	_body, _err := client.GetMdsMiniConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetUserAppDonwloadUrlInMsaWithOptions(request *GetUserAppDonwloadUrlInMsaRequest, runtime *util.RuntimeOptions) (_result *GetUserAppDonwloadUrlInMsaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUserAppDonwloadUrlInMsa"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUserAppDonwloadUrlInMsaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetUserAppDonwloadUrlInMsa(request *GetUserAppDonwloadUrlInMsaRequest) (_result *GetUserAppDonwloadUrlInMsaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUserAppDonwloadUrlInMsaResponse{}
	_body, _err := client.GetUserAppDonwloadUrlInMsaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetUserAppEnhanceProcessInMsaWithOptions(request *GetUserAppEnhanceProcessInMsaRequest, runtime *util.RuntimeOptions) (_result *GetUserAppEnhanceProcessInMsaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUserAppEnhanceProcessInMsa"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUserAppEnhanceProcessInMsaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetUserAppEnhanceProcessInMsa(request *GetUserAppEnhanceProcessInMsaRequest) (_result *GetUserAppEnhanceProcessInMsaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUserAppEnhanceProcessInMsaResponse{}
	_body, _err := client.GetUserAppEnhanceProcessInMsaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetUserAppUploadProcessInMsaWithOptions(request *GetUserAppUploadProcessInMsaRequest, runtime *util.RuntimeOptions) (_result *GetUserAppUploadProcessInMsaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUserAppUploadProcessInMsa"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUserAppUploadProcessInMsaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetUserAppUploadProcessInMsa(request *GetUserAppUploadProcessInMsaRequest) (_result *GetUserAppUploadProcessInMsaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUserAppUploadProcessInMsaResponse{}
	_body, _err := client.GetUserAppUploadProcessInMsaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMappCenterAppsWithOptions(runtime *util.RuntimeOptions) (_result *ListMappCenterAppsResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("ListMappCenterApps"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMappCenterAppsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMappCenterApps() (_result *ListMappCenterAppsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMappCenterAppsResponse{}
	_body, _err := client.ListMappCenterAppsWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMappCenterWorkspacesWithOptions(runtime *util.RuntimeOptions) (_result *ListMappCenterWorkspacesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("ListMappCenterWorkspaces"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMappCenterWorkspacesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMappCenterWorkspaces() (_result *ListMappCenterWorkspacesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMappCenterWorkspacesResponse{}
	_body, _err := client.ListMappCenterWorkspacesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMcdpAimWithOptions(request *ListMcdpAimRequest, runtime *util.RuntimeOptions) (_result *ListMcdpAimResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EmptyTag)) {
		body["EmptyTag"] = request.EmptyTag
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		body["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		body["Sort"] = request.Sort
	}

	if !tea.BoolValue(util.IsUnset(request.SortField)) {
		body["SortField"] = request.SortField
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMcdpAim"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMcdpAimResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMcdpAim(request *ListMcdpAimRequest) (_result *ListMcdpAimResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMcdpAimResponse{}
	_body, _err := client.ListMcdpAimWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMcubeMiniAppsWithOptions(request *ListMcubeMiniAppsRequest, runtime *util.RuntimeOptions) (_result *ListMcubeMiniAppsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMcubeMiniApps"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMcubeMiniAppsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMcubeMiniApps(request *ListMcubeMiniAppsRequest) (_result *ListMcubeMiniAppsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMcubeMiniAppsResponse{}
	_body, _err := client.ListMcubeMiniAppsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMcubeMiniPackagesWithOptions(request *ListMcubeMiniPackagesRequest, runtime *util.RuntimeOptions) (_result *ListMcubeMiniPackagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.H5Id)) {
		body["H5Id"] = request.H5Id
	}

	if !tea.BoolValue(util.IsUnset(request.PackageTypes)) {
		body["PackageTypes"] = request.PackageTypes
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMcubeMiniPackages"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMcubeMiniPackagesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMcubeMiniPackages(request *ListMcubeMiniPackagesRequest) (_result *ListMcubeMiniPackagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMcubeMiniPackagesResponse{}
	_body, _err := client.ListMcubeMiniPackagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMcubeMiniTasksWithOptions(request *ListMcubeMiniTasksRequest, runtime *util.RuntimeOptions) (_result *ListMcubeMiniTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMcubeMiniTasks"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMcubeMiniTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMcubeMiniTasks(request *ListMcubeMiniTasksRequest) (_result *ListMcubeMiniTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMcubeMiniTasksResponse{}
	_body, _err := client.ListMcubeMiniTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMcubeNebulaAppsWithOptions(request *ListMcubeNebulaAppsRequest, runtime *util.RuntimeOptions) (_result *ListMcubeNebulaAppsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMcubeNebulaApps"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMcubeNebulaAppsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMcubeNebulaApps(request *ListMcubeNebulaAppsRequest) (_result *ListMcubeNebulaAppsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMcubeNebulaAppsResponse{}
	_body, _err := client.ListMcubeNebulaAppsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMcubeNebulaResourcesWithOptions(request *ListMcubeNebulaResourcesRequest, runtime *util.RuntimeOptions) (_result *ListMcubeNebulaResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.H5Id)) {
		body["H5Id"] = request.H5Id
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMcubeNebulaResources"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMcubeNebulaResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMcubeNebulaResources(request *ListMcubeNebulaResourcesRequest) (_result *ListMcubeNebulaResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMcubeNebulaResourcesResponse{}
	_body, _err := client.ListMcubeNebulaResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMcubeNebulaTasksWithOptions(request *ListMcubeNebulaTasksRequest, runtime *util.RuntimeOptions) (_result *ListMcubeNebulaTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMcubeNebulaTasks"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMcubeNebulaTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMcubeNebulaTasks(request *ListMcubeNebulaTasksRequest) (_result *ListMcubeNebulaTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMcubeNebulaTasksResponse{}
	_body, _err := client.ListMcubeNebulaTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMcubeUpgradePackagesWithOptions(request *ListMcubeUpgradePackagesRequest, runtime *util.RuntimeOptions) (_result *ListMcubeUpgradePackagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMcubeUpgradePackages"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMcubeUpgradePackagesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMcubeUpgradePackages(request *ListMcubeUpgradePackagesRequest) (_result *ListMcubeUpgradePackagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMcubeUpgradePackagesResponse{}
	_body, _err := client.ListMcubeUpgradePackagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMcubeUpgradeTasksWithOptions(request *ListMcubeUpgradeTasksRequest, runtime *util.RuntimeOptions) (_result *ListMcubeUpgradeTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.PackageId)) {
		body["PackageId"] = request.PackageId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMcubeUpgradeTasks"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMcubeUpgradeTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMcubeUpgradeTasks(request *ListMcubeUpgradeTasksRequest) (_result *ListMcubeUpgradeTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMcubeUpgradeTasksResponse{}
	_body, _err := client.ListMcubeUpgradeTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMcubeWhitelistsWithOptions(request *ListMcubeWhitelistsRequest, runtime *util.RuntimeOptions) (_result *ListMcubeWhitelistsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WhitelistName)) {
		body["WhitelistName"] = request.WhitelistName
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMcubeWhitelists"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMcubeWhitelistsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMcubeWhitelists(request *ListMcubeWhitelistsRequest) (_result *ListMcubeWhitelistsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMcubeWhitelistsResponse{}
	_body, _err := client.ListMcubeWhitelistsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMgsApiWithOptions(request *ListMgsApiRequest, runtime *util.RuntimeOptions) (_result *ListMgsApiResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiStatus)) {
		body["ApiStatus"] = request.ApiStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ApiType)) {
		body["ApiType"] = request.ApiType
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Format)) {
		body["Format"] = request.Format
	}

	if !tea.BoolValue(util.IsUnset(request.Host)) {
		body["Host"] = request.Host
	}

	if !tea.BoolValue(util.IsUnset(request.NeedEncrypt)) {
		body["NeedEncrypt"] = request.NeedEncrypt
	}

	if !tea.BoolValue(util.IsUnset(request.NeedEtag)) {
		body["NeedEtag"] = request.NeedEtag
	}

	if !tea.BoolValue(util.IsUnset(request.NeedSign)) {
		body["NeedSign"] = request.NeedSign
	}

	if !tea.BoolValue(util.IsUnset(request.OperationType)) {
		body["OperationType"] = request.OperationType
	}

	if !tea.BoolValue(util.IsUnset(request.OptFuzzy)) {
		body["OptFuzzy"] = request.OptFuzzy
	}

	if !tea.BoolValue(util.IsUnset(request.PageIndex)) {
		body["PageIndex"] = request.PageIndex
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SysId)) {
		body["SysId"] = request.SysId
	}

	if !tea.BoolValue(util.IsUnset(request.SysName)) {
		body["SysName"] = request.SysName
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMgsApi"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMgsApiResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMgsApi(request *ListMgsApiRequest) (_result *ListMgsApiResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMgsApiResponse{}
	_body, _err := client.ListMgsApiWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) LogMsaQueryWithOptions(request *LogMsaQueryRequest, runtime *util.RuntimeOptions) (_result *LogMsaQueryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OnexFlag)) {
		body["OnexFlag"] = request.OnexFlag
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("LogMsaQuery"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &LogMsaQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) LogMsaQuery(request *LogMsaQueryRequest) (_result *LogMsaQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &LogMsaQueryResponse{}
	_body, _err := client.LogMsaQueryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) MTRSOCRServiceWithOptions(request *MTRSOCRServiceRequest, runtime *util.RuntimeOptions) (_result *MTRSOCRServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageRaw)) {
		body["ImageRaw"] = request.ImageRaw
	}

	if !tea.BoolValue(util.IsUnset(request.Mask)) {
		body["Mask"] = request.Mask
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("MTRSOCRService"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &MTRSOCRServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) MTRSOCRService(request *MTRSOCRServiceRequest) (_result *MTRSOCRServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MTRSOCRServiceResponse{}
	_body, _err := client.MTRSOCRServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenApiAddActiveCodeWithOptions(request *OpenApiAddActiveCodeRequest, runtime *util.RuntimeOptions) (_result *OpenApiAddActiveCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMqcpOpenApiAddActiveCodeReqJsonStr)) {
		body["MpaasMqcpOpenApiAddActiveCodeReqJsonStr"] = request.MpaasMqcpOpenApiAddActiveCodeReqJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenApiAddActiveCode"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenApiAddActiveCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenApiAddActiveCode(request *OpenApiAddActiveCodeRequest) (_result *OpenApiAddActiveCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenApiAddActiveCodeResponse{}
	_body, _err := client.OpenApiAddActiveCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenApiAddActiveSceneWithOptions(request *OpenApiAddActiveSceneRequest, runtime *util.RuntimeOptions) (_result *OpenApiAddActiveSceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMqcpOpenApiAddActiveSceneReqJsonStr)) {
		body["MpaasMqcpOpenApiAddActiveSceneReqJsonStr"] = request.MpaasMqcpOpenApiAddActiveSceneReqJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenApiAddActiveScene"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenApiAddActiveSceneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenApiAddActiveScene(request *OpenApiAddActiveSceneRequest) (_result *OpenApiAddActiveSceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenApiAddActiveSceneResponse{}
	_body, _err := client.OpenApiAddActiveSceneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenApiCallbackWithOptions(request *OpenApiCallbackRequest, runtime *util.RuntimeOptions) (_result *OpenApiCallbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMqcpOpenApiCallbackRequestJsonStr)) {
		body["MpaasMqcpOpenApiCallbackRequestJsonStr"] = request.MpaasMqcpOpenApiCallbackRequestJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenApiCallback"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenApiCallbackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenApiCallback(request *OpenApiCallbackRequest) (_result *OpenApiCallbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenApiCallbackResponse{}
	_body, _err := client.OpenApiCallbackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenApiDecodeWithOptions(request *OpenApiDecodeRequest, runtime *util.RuntimeOptions) (_result *OpenApiDecodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMqcpOpenApiDecodeRequestJsonStr)) {
		body["MpaasMqcpOpenApiDecodeRequestJsonStr"] = request.MpaasMqcpOpenApiDecodeRequestJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenApiDecode"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenApiDecodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenApiDecode(request *OpenApiDecodeRequest) (_result *OpenApiDecodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenApiDecodeResponse{}
	_body, _err := client.OpenApiDecodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenApiDeleteActiveCodeWithOptions(request *OpenApiDeleteActiveCodeRequest, runtime *util.RuntimeOptions) (_result *OpenApiDeleteActiveCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMqcpOpenApiDeleteActiveCodeReqJsonStr)) {
		body["MpaasMqcpOpenApiDeleteActiveCodeReqJsonStr"] = request.MpaasMqcpOpenApiDeleteActiveCodeReqJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenApiDeleteActiveCode"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenApiDeleteActiveCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenApiDeleteActiveCode(request *OpenApiDeleteActiveCodeRequest) (_result *OpenApiDeleteActiveCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenApiDeleteActiveCodeResponse{}
	_body, _err := client.OpenApiDeleteActiveCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenApiEncodeWithOptions(request *OpenApiEncodeRequest, runtime *util.RuntimeOptions) (_result *OpenApiEncodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMqcpOpenApiEncodeRequestJsonStr)) {
		body["MpaasMqcpOpenApiEncodeRequestJsonStr"] = request.MpaasMqcpOpenApiEncodeRequestJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenApiEncode"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenApiEncodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenApiEncode(request *OpenApiEncodeRequest) (_result *OpenApiEncodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenApiEncodeResponse{}
	_body, _err := client.OpenApiEncodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenApiQueryActiveCodeWithOptions(request *OpenApiQueryActiveCodeRequest, runtime *util.RuntimeOptions) (_result *OpenApiQueryActiveCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMqcpOpenApiQueryActiveCodeReqJsonStr)) {
		body["MpaasMqcpOpenApiQueryActiveCodeReqJsonStr"] = request.MpaasMqcpOpenApiQueryActiveCodeReqJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenApiQueryActiveCode"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenApiQueryActiveCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenApiQueryActiveCode(request *OpenApiQueryActiveCodeRequest) (_result *OpenApiQueryActiveCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenApiQueryActiveCodeResponse{}
	_body, _err := client.OpenApiQueryActiveCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenApiQueryActiveSceneWithOptions(request *OpenApiQueryActiveSceneRequest, runtime *util.RuntimeOptions) (_result *OpenApiQueryActiveSceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMqcpOpenApiQueryActiveSceneReqJsonStr)) {
		body["MpaasMqcpOpenApiQueryActiveSceneReqJsonStr"] = request.MpaasMqcpOpenApiQueryActiveSceneReqJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenApiQueryActiveScene"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenApiQueryActiveSceneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenApiQueryActiveScene(request *OpenApiQueryActiveSceneRequest) (_result *OpenApiQueryActiveSceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenApiQueryActiveSceneResponse{}
	_body, _err := client.OpenApiQueryActiveSceneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenApiUniqueEncodeWithOptions(request *OpenApiUniqueEncodeRequest, runtime *util.RuntimeOptions) (_result *OpenApiUniqueEncodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMqcpOpenApiUniqueEncodeRequestJsonStr)) {
		body["MpaasMqcpOpenApiUniqueEncodeRequestJsonStr"] = request.MpaasMqcpOpenApiUniqueEncodeRequestJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenApiUniqueEncode"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenApiUniqueEncodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenApiUniqueEncode(request *OpenApiUniqueEncodeRequest) (_result *OpenApiUniqueEncodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenApiUniqueEncodeResponse{}
	_body, _err := client.OpenApiUniqueEncodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenApiUpdateActiveCodeWithOptions(request *OpenApiUpdateActiveCodeRequest, runtime *util.RuntimeOptions) (_result *OpenApiUpdateActiveCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMqcpOpenApiUpdateActiveCodeReqJsonStr)) {
		body["MpaasMqcpOpenApiUpdateActiveCodeReqJsonStr"] = request.MpaasMqcpOpenApiUpdateActiveCodeReqJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenApiUpdateActiveCode"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenApiUpdateActiveCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenApiUpdateActiveCode(request *OpenApiUpdateActiveCodeRequest) (_result *OpenApiUpdateActiveCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenApiUpdateActiveCodeResponse{}
	_body, _err := client.OpenApiUpdateActiveCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OpenApiUpdateActiveSceneWithOptions(request *OpenApiUpdateActiveSceneRequest, runtime *util.RuntimeOptions) (_result *OpenApiUpdateActiveSceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMqcpOpenApiUpdateActiveSceneReqJsonStr)) {
		body["MpaasMqcpOpenApiUpdateActiveSceneReqJsonStr"] = request.MpaasMqcpOpenApiUpdateActiveSceneReqJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenApiUpdateActiveScene"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenApiUpdateActiveSceneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OpenApiUpdateActiveScene(request *OpenApiUpdateActiveSceneRequest) (_result *OpenApiUpdateActiveSceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenApiUpdateActiveSceneResponse{}
	_body, _err := client.OpenApiUpdateActiveSceneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PushBindWithOptions(request *PushBindRequest, runtime *util.RuntimeOptions) (_result *PushBindResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.DeliveryToken)) {
		body["DeliveryToken"] = request.DeliveryToken
	}

	if !tea.BoolValue(util.IsUnset(request.OsType)) {
		body["OsType"] = request.OsType
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumber)) {
		body["PhoneNumber"] = request.PhoneNumber
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PushBind"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PushBindResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PushBind(request *PushBindRequest) (_result *PushBindResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PushBindResponse{}
	_body, _err := client.PushBindWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PushBroadcastWithOptions(tmpReq *PushBroadcastRequest, runtime *util.RuntimeOptions) (_result *PushBroadcastResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &PushBroadcastShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ThirdChannelCategory)) {
		request.ThirdChannelCategoryShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ThirdChannelCategory, tea.String("ThirdChannelCategory"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AndroidChannel)) {
		body["AndroidChannel"] = request.AndroidChannel
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.BindPeriod)) {
		body["BindPeriod"] = request.BindPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.Classification)) {
		body["Classification"] = request.Classification
	}

	if !tea.BoolValue(util.IsUnset(request.DeliveryType)) {
		body["DeliveryType"] = request.DeliveryType
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiredSeconds)) {
		body["ExpiredSeconds"] = request.ExpiredSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendedParams)) {
		body["ExtendedParams"] = request.ExtendedParams
	}

	if !tea.BoolValue(util.IsUnset(request.MiChannelId)) {
		body["MiChannelId"] = request.MiChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.Msgkey)) {
		body["Msgkey"] = request.Msgkey
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyType)) {
		body["NotifyType"] = request.NotifyType
	}

	if !tea.BoolValue(util.IsUnset(request.PushAction)) {
		body["PushAction"] = request.PushAction
	}

	if !tea.BoolValue(util.IsUnset(request.PushStatus)) {
		body["PushStatus"] = request.PushStatus
	}

	if !tea.BoolValue(util.IsUnset(request.Silent)) {
		body["Silent"] = request.Silent
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyContent)) {
		body["StrategyContent"] = request.StrategyContent
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyType)) {
		body["StrategyType"] = request.StrategyType
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		body["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateKeyValue)) {
		body["TemplateKeyValue"] = request.TemplateKeyValue
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		body["TemplateName"] = request.TemplateName
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdChannelCategoryShrink)) {
		body["ThirdChannelCategory"] = request.ThirdChannelCategoryShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UnBindPeriod)) {
		body["UnBindPeriod"] = request.UnBindPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PushBroadcast"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PushBroadcastResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PushBroadcast(request *PushBroadcastRequest) (_result *PushBroadcastResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PushBroadcastResponse{}
	_body, _err := client.PushBroadcastWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PushMultipleWithOptions(tmpReq *PushMultipleRequest, runtime *util.RuntimeOptions) (_result *PushMultipleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &PushMultipleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ThirdChannelCategory)) {
		request.ThirdChannelCategoryShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ThirdChannelCategory, tea.String("ThirdChannelCategory"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.Classification)) {
		body["Classification"] = request.Classification
	}

	if !tea.BoolValue(util.IsUnset(request.DeliveryType)) {
		body["DeliveryType"] = request.DeliveryType
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiredSeconds)) {
		body["ExpiredSeconds"] = request.ExpiredSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendedParams)) {
		body["ExtendedParams"] = request.ExtendedParams
	}

	if !tea.BoolValue(util.IsUnset(request.MiChannelId)) {
		body["MiChannelId"] = request.MiChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyType)) {
		body["NotifyType"] = request.NotifyType
	}

	if !tea.BoolValue(util.IsUnset(request.PushAction)) {
		body["PushAction"] = request.PushAction
	}

	if !tea.BoolValue(util.IsUnset(request.Silent)) {
		body["Silent"] = request.Silent
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyContent)) {
		body["StrategyContent"] = request.StrategyContent
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyType)) {
		body["StrategyType"] = request.StrategyType
	}

	if !tea.BoolValue(util.IsUnset(request.TargetMsg)) {
		body["TargetMsg"] = request.TargetMsg
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		body["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		body["TemplateName"] = request.TemplateName
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdChannelCategoryShrink)) {
		body["ThirdChannelCategory"] = request.ThirdChannelCategoryShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PushMultiple"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PushMultipleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PushMultiple(request *PushMultipleRequest) (_result *PushMultipleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PushMultipleResponse{}
	_body, _err := client.PushMultipleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PushReportWithOptions(request *PushReportRequest, runtime *util.RuntimeOptions) (_result *PushReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppVersion)) {
		body["AppVersion"] = request.AppVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		body["Channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectType)) {
		body["ConnectType"] = request.ConnectType
	}

	if !tea.BoolValue(util.IsUnset(request.DeliveryToken)) {
		body["DeliveryToken"] = request.DeliveryToken
	}

	if !tea.BoolValue(util.IsUnset(request.Imei)) {
		body["Imei"] = request.Imei
	}

	if !tea.BoolValue(util.IsUnset(request.Imsi)) {
		body["Imsi"] = request.Imsi
	}

	if !tea.BoolValue(util.IsUnset(request.Model)) {
		body["Model"] = request.Model
	}

	if !tea.BoolValue(util.IsUnset(request.OsType)) {
		body["OsType"] = request.OsType
	}

	if !tea.BoolValue(util.IsUnset(request.PushVersion)) {
		body["PushVersion"] = request.PushVersion
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdChannel)) {
		body["ThirdChannel"] = request.ThirdChannel
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdChannelDeviceToken)) {
		body["ThirdChannelDeviceToken"] = request.ThirdChannelDeviceToken
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PushReport"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PushReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PushReport(request *PushReportRequest) (_result *PushReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PushReportResponse{}
	_body, _err := client.PushReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PushSimpleWithOptions(tmpReq *PushSimpleRequest, runtime *util.RuntimeOptions) (_result *PushSimpleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &PushSimpleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ThirdChannelCategory)) {
		request.ThirdChannelCategoryShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ThirdChannelCategory, tea.String("ThirdChannelCategory"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.Classification)) {
		body["Classification"] = request.Classification
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.DeliveryType)) {
		body["DeliveryType"] = request.DeliveryType
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiredSeconds)) {
		body["ExpiredSeconds"] = request.ExpiredSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendedParams)) {
		body["ExtendedParams"] = request.ExtendedParams
	}

	if !tea.BoolValue(util.IsUnset(request.IconUrls)) {
		body["IconUrls"] = request.IconUrls
	}

	if !tea.BoolValue(util.IsUnset(request.ImageUrls)) {
		body["ImageUrls"] = request.ImageUrls
	}

	if !tea.BoolValue(util.IsUnset(request.MiChannelId)) {
		body["MiChannelId"] = request.MiChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyType)) {
		body["NotifyType"] = request.NotifyType
	}

	if !tea.BoolValue(util.IsUnset(request.PushAction)) {
		body["PushAction"] = request.PushAction
	}

	if !tea.BoolValue(util.IsUnset(request.PushStyle)) {
		body["PushStyle"] = request.PushStyle
	}

	if !tea.BoolValue(util.IsUnset(request.Silent)) {
		body["Silent"] = request.Silent
	}

	if !tea.BoolValue(util.IsUnset(request.SmsSignName)) {
		body["SmsSignName"] = request.SmsSignName
	}

	if !tea.BoolValue(util.IsUnset(request.SmsStrategy)) {
		body["SmsStrategy"] = request.SmsStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SmsTemplateCode)) {
		body["SmsTemplateCode"] = request.SmsTemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.SmsTemplateParam)) {
		body["SmsTemplateParam"] = request.SmsTemplateParam
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyContent)) {
		body["StrategyContent"] = request.StrategyContent
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyType)) {
		body["StrategyType"] = request.StrategyType
	}

	if !tea.BoolValue(util.IsUnset(request.TargetMsgkey)) {
		body["TargetMsgkey"] = request.TargetMsgkey
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		body["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdChannelCategoryShrink)) {
		body["ThirdChannelCategory"] = request.ThirdChannelCategoryShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.Uri)) {
		body["Uri"] = request.Uri
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PushSimple"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PushSimpleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PushSimple(request *PushSimpleRequest) (_result *PushSimpleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PushSimpleResponse{}
	_body, _err := client.PushSimpleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PushTemplateWithOptions(tmpReq *PushTemplateRequest, runtime *util.RuntimeOptions) (_result *PushTemplateResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &PushTemplateShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ThirdChannelCategory)) {
		request.ThirdChannelCategoryShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ThirdChannelCategory, tea.String("ThirdChannelCategory"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.Classification)) {
		body["Classification"] = request.Classification
	}

	if !tea.BoolValue(util.IsUnset(request.DeliveryType)) {
		body["DeliveryType"] = request.DeliveryType
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiredSeconds)) {
		body["ExpiredSeconds"] = request.ExpiredSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendedParams)) {
		body["ExtendedParams"] = request.ExtendedParams
	}

	if !tea.BoolValue(util.IsUnset(request.MiChannelId)) {
		body["MiChannelId"] = request.MiChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyType)) {
		body["NotifyType"] = request.NotifyType
	}

	if !tea.BoolValue(util.IsUnset(request.PushAction)) {
		body["PushAction"] = request.PushAction
	}

	if !tea.BoolValue(util.IsUnset(request.Silent)) {
		body["Silent"] = request.Silent
	}

	if !tea.BoolValue(util.IsUnset(request.SmsSignName)) {
		body["SmsSignName"] = request.SmsSignName
	}

	if !tea.BoolValue(util.IsUnset(request.SmsStrategy)) {
		body["SmsStrategy"] = request.SmsStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SmsTemplateCode)) {
		body["SmsTemplateCode"] = request.SmsTemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.SmsTemplateParam)) {
		body["SmsTemplateParam"] = request.SmsTemplateParam
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyContent)) {
		body["StrategyContent"] = request.StrategyContent
	}

	if !tea.BoolValue(util.IsUnset(request.StrategyType)) {
		body["StrategyType"] = request.StrategyType
	}

	if !tea.BoolValue(util.IsUnset(request.TargetMsgkey)) {
		body["TargetMsgkey"] = request.TargetMsgkey
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		body["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateKeyValue)) {
		body["TemplateKeyValue"] = request.TemplateKeyValue
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		body["TemplateName"] = request.TemplateName
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdChannelCategoryShrink)) {
		body["ThirdChannelCategory"] = request.ThirdChannelCategoryShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PushTemplate"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PushTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PushTemplate(request *PushTemplateRequest) (_result *PushTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PushTemplateResponse{}
	_body, _err := client.PushTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PushUnBindWithOptions(request *PushUnBindRequest, runtime *util.RuntimeOptions) (_result *PushUnBindResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.DeliveryToken)) {
		body["DeliveryToken"] = request.DeliveryToken
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PushUnBind"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PushUnBindResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PushUnBind(request *PushUnBindRequest) (_result *PushUnBindResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PushUnBindResponse{}
	_body, _err := client.PushUnBindWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMappCenterAppWithOptions(request *QueryMappCenterAppRequest, runtime *util.RuntimeOptions) (_result *QueryMappCenterAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMappCenterApp"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMappCenterAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMappCenterApp(request *QueryMappCenterAppRequest) (_result *QueryMappCenterAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMappCenterAppResponse{}
	_body, _err := client.QueryMappCenterAppWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMcdpAimWithOptions(request *QueryMcdpAimRequest, runtime *util.RuntimeOptions) (_result *QueryMcdpAimResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMcdpAim"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMcdpAimResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMcdpAim(request *QueryMcdpAimRequest) (_result *QueryMcdpAimResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMcdpAimResponse{}
	_body, _err := client.QueryMcdpAimWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMcdpZoneWithOptions(request *QueryMcdpZoneRequest, runtime *util.RuntimeOptions) (_result *QueryMcdpZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMcdpZone"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMcdpZoneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMcdpZone(request *QueryMcdpZoneRequest) (_result *QueryMcdpZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMcdpZoneResponse{}
	_body, _err := client.QueryMcdpZoneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMcubeMiniPackageWithOptions(request *QueryMcubeMiniPackageRequest, runtime *util.RuntimeOptions) (_result *QueryMcubeMiniPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.H5Id)) {
		body["H5Id"] = request.H5Id
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMcubeMiniPackage"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMcubeMiniPackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMcubeMiniPackage(request *QueryMcubeMiniPackageRequest) (_result *QueryMcubeMiniPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMcubeMiniPackageResponse{}
	_body, _err := client.QueryMcubeMiniPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMcubeMiniTaskWithOptions(request *QueryMcubeMiniTaskRequest, runtime *util.RuntimeOptions) (_result *QueryMcubeMiniTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMcubeMiniTask"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMcubeMiniTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMcubeMiniTask(request *QueryMcubeMiniTaskRequest) (_result *QueryMcubeMiniTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMcubeMiniTaskResponse{}
	_body, _err := client.QueryMcubeMiniTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMcubeVhostWithOptions(request *QueryMcubeVhostRequest, runtime *util.RuntimeOptions) (_result *QueryMcubeVhostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMcubeVhost"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMcubeVhostResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMcubeVhost(request *QueryMcubeVhostRequest) (_result *QueryMcubeVhostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMcubeVhostResponse{}
	_body, _err := client.QueryMcubeVhostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMdsUpgradeTaskDetailWithOptions(request *QueryMdsUpgradeTaskDetailRequest, runtime *util.RuntimeOptions) (_result *QueryMdsUpgradeTaskDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMdsUpgradeTaskDetail"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMdsUpgradeTaskDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMdsUpgradeTaskDetail(request *QueryMdsUpgradeTaskDetailRequest) (_result *QueryMdsUpgradeTaskDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMdsUpgradeTaskDetailResponse{}
	_body, _err := client.QueryMdsUpgradeTaskDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMgsApipageWithOptions(request *QueryMgsApipageRequest, runtime *util.RuntimeOptions) (_result *QueryMgsApipageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiStatus)) {
		body["ApiStatus"] = request.ApiStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ApiType)) {
		body["ApiType"] = request.ApiType
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Format)) {
		body["Format"] = request.Format
	}

	if !tea.BoolValue(util.IsUnset(request.Host)) {
		body["Host"] = request.Host
	}

	if !tea.BoolValue(util.IsUnset(request.NeedEncrypt)) {
		body["NeedEncrypt"] = request.NeedEncrypt
	}

	if !tea.BoolValue(util.IsUnset(request.NeedEtag)) {
		body["NeedEtag"] = request.NeedEtag
	}

	if !tea.BoolValue(util.IsUnset(request.NeedSign)) {
		body["NeedSign"] = request.NeedSign
	}

	if !tea.BoolValue(util.IsUnset(request.OperationType)) {
		body["OperationType"] = request.OperationType
	}

	if !tea.BoolValue(util.IsUnset(request.OptFuzzy)) {
		body["OptFuzzy"] = request.OptFuzzy
	}

	if !tea.BoolValue(util.IsUnset(request.PageIndex)) {
		body["PageIndex"] = request.PageIndex
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SysId)) {
		body["SysId"] = request.SysId
	}

	if !tea.BoolValue(util.IsUnset(request.SysName)) {
		body["SysName"] = request.SysName
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMgsApipage"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMgsApipageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMgsApipage(request *QueryMgsApipageRequest) (_result *QueryMgsApipageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMgsApipageResponse{}
	_body, _err := client.QueryMgsApipageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMgsApirestWithOptions(request *QueryMgsApirestRequest, runtime *util.RuntimeOptions) (_result *QueryMgsApirestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Format)) {
		body["Format"] = request.Format
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMgsApirest"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMgsApirestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMgsApirest(request *QueryMgsApirestRequest) (_result *QueryMgsApirestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMgsApirestResponse{}
	_body, _err := client.QueryMgsApirestWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMgsTestreqbodyautogenWithOptions(request *QueryMgsTestreqbodyautogenRequest, runtime *util.RuntimeOptions) (_result *QueryMgsTestreqbodyautogenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Format)) {
		body["Format"] = request.Format
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMgsTestreqbodyautogenQueryJsonStr)) {
		body["MpaasMappcenterMgsTestreqbodyautogenQueryJsonStr"] = request.MpaasMappcenterMgsTestreqbodyautogenQueryJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMgsTestreqbodyautogen"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMgsTestreqbodyautogenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMgsTestreqbodyautogen(request *QueryMgsTestreqbodyautogenRequest) (_result *QueryMgsTestreqbodyautogenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMgsTestreqbodyautogenResponse{}
	_body, _err := client.QueryMgsTestreqbodyautogenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMpsSchedulerListWithOptions(request *QueryMpsSchedulerListRequest, runtime *util.RuntimeOptions) (_result *QueryMpsSchedulerListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UniqueId)) {
		body["UniqueId"] = request.UniqueId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMpsSchedulerList"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMpsSchedulerListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMpsSchedulerList(request *QueryMpsSchedulerListRequest) (_result *QueryMpsSchedulerListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMpsSchedulerListResponse{}
	_body, _err := client.QueryMpsSchedulerListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryPushAnalysisCoreIndexWithOptions(request *QueryPushAnalysisCoreIndexRequest, runtime *util.RuntimeOptions) (_result *QueryPushAnalysisCoreIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		body["Channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Platform)) {
		body["Platform"] = request.Platform
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryPushAnalysisCoreIndex"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryPushAnalysisCoreIndexResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryPushAnalysisCoreIndex(request *QueryPushAnalysisCoreIndexRequest) (_result *QueryPushAnalysisCoreIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPushAnalysisCoreIndexResponse{}
	_body, _err := client.QueryPushAnalysisCoreIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryPushAnalysisTaskDetailWithOptions(request *QueryPushAnalysisTaskDetailRequest, runtime *util.RuntimeOptions) (_result *QueryPushAnalysisTaskDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryPushAnalysisTaskDetail"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryPushAnalysisTaskDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryPushAnalysisTaskDetail(request *QueryPushAnalysisTaskDetailRequest) (_result *QueryPushAnalysisTaskDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPushAnalysisTaskDetailResponse{}
	_body, _err := client.QueryPushAnalysisTaskDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryPushAnalysisTaskListWithOptions(request *QueryPushAnalysisTaskListRequest, runtime *util.RuntimeOptions) (_result *QueryPushAnalysisTaskListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		body["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryPushAnalysisTaskList"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryPushAnalysisTaskListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryPushAnalysisTaskList(request *QueryPushAnalysisTaskListRequest) (_result *QueryPushAnalysisTaskListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPushAnalysisTaskListResponse{}
	_body, _err := client.QueryPushAnalysisTaskListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryPushSchedulerListWithOptions(request *QueryPushSchedulerListRequest, runtime *util.RuntimeOptions) (_result *QueryPushSchedulerListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UniqueId)) {
		body["UniqueId"] = request.UniqueId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryPushSchedulerList"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryPushSchedulerListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryPushSchedulerList(request *QueryPushSchedulerListRequest) (_result *QueryPushSchedulerListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPushSchedulerListResponse{}
	_body, _err := client.QueryPushSchedulerListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokePushMessageWithOptions(request *RevokePushMessageRequest, runtime *util.RuntimeOptions) (_result *RevokePushMessageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MessageId)) {
		body["MessageId"] = request.MessageId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetId)) {
		body["TargetId"] = request.TargetId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RevokePushMessage"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RevokePushMessageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokePushMessage(request *RevokePushMessageRequest) (_result *RevokePushMessageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokePushMessageResponse{}
	_body, _err := client.RevokePushMessageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokePushTaskWithOptions(request *RevokePushTaskRequest, runtime *util.RuntimeOptions) (_result *RevokePushTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RevokePushTask"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RevokePushTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokePushTask(request *RevokePushTaskRequest) (_result *RevokePushTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokePushTaskResponse{}
	_body, _err := client.RevokePushTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunMsaDiffWithOptions(request *RunMsaDiffRequest, runtime *util.RuntimeOptions) (_result *RunMsaDiffResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMsaDiffRunJsonStr)) {
		body["MpaasMappcenterMsaDiffRunJsonStr"] = request.MpaasMappcenterMsaDiffRunJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RunMsaDiff"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunMsaDiffResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunMsaDiff(request *RunMsaDiffRequest) (_result *RunMsaDiffResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunMsaDiffResponse{}
	_body, _err := client.RunMsaDiffWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveMgsApirestWithOptions(request *SaveMgsApirestRequest, runtime *util.RuntimeOptions) (_result *SaveMgsApirestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MpaasMappcenterMgsApirestSaveJsonStr)) {
		body["MpaasMappcenterMgsApirestSaveJsonStr"] = request.MpaasMappcenterMgsApirestSaveJsonStr
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveMgsApirest"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveMgsApirestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveMgsApirest(request *SaveMgsApirestRequest) (_result *SaveMgsApirestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveMgsApirestResponse{}
	_body, _err := client.SaveMgsApirestWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartUserAppAsyncEnhanceInMsaWithOptions(request *StartUserAppAsyncEnhanceInMsaRequest, runtime *util.RuntimeOptions) (_result *StartUserAppAsyncEnhanceInMsaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApkProtector)) {
		body["ApkProtector"] = request.ApkProtector
	}

	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AssetsFileList)) {
		body["AssetsFileList"] = request.AssetsFileList
	}

	if !tea.BoolValue(util.IsUnset(request.Classes)) {
		body["Classes"] = request.Classes
	}

	if !tea.BoolValue(util.IsUnset(request.DalvikDebugger)) {
		body["DalvikDebugger"] = request.DalvikDebugger
	}

	if !tea.BoolValue(util.IsUnset(request.EmulatorEnvironment)) {
		body["EmulatorEnvironment"] = request.EmulatorEnvironment
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.JavaHook)) {
		body["JavaHook"] = request.JavaHook
	}

	if !tea.BoolValue(util.IsUnset(request.MemoryDump)) {
		body["MemoryDump"] = request.MemoryDump
	}

	if !tea.BoolValue(util.IsUnset(request.NativeDebugger)) {
		body["NativeDebugger"] = request.NativeDebugger
	}

	if !tea.BoolValue(util.IsUnset(request.NativeHook)) {
		body["NativeHook"] = request.NativeHook
	}

	if !tea.BoolValue(util.IsUnset(request.PackageTampered)) {
		body["PackageTampered"] = request.PackageTampered
	}

	if !tea.BoolValue(util.IsUnset(request.Root)) {
		body["Root"] = request.Root
	}

	if !tea.BoolValue(util.IsUnset(request.RunMode)) {
		body["RunMode"] = request.RunMode
	}

	if !tea.BoolValue(util.IsUnset(request.SoFileList)) {
		body["SoFileList"] = request.SoFileList
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		body["TaskType"] = request.TaskType
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.TotalSwitch)) {
		body["TotalSwitch"] = request.TotalSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.UseAShield)) {
		body["UseAShield"] = request.UseAShield
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StartUserAppAsyncEnhanceInMsa"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartUserAppAsyncEnhanceInMsaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartUserAppAsyncEnhanceInMsa(request *StartUserAppAsyncEnhanceInMsaRequest) (_result *StartUserAppAsyncEnhanceInMsaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartUserAppAsyncEnhanceInMsaResponse{}
	_body, _err := client.StartUserAppAsyncEnhanceInMsaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMcubeWhitelistWithOptions(request *UpdateMcubeWhitelistRequest, runtime *util.RuntimeOptions) (_result *UpdateMcubeWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.KeyIds)) {
		body["KeyIds"] = request.KeyIds
	}

	if !tea.BoolValue(util.IsUnset(request.OnexFlag)) {
		body["OnexFlag"] = request.OnexFlag
	}

	if !tea.BoolValue(util.IsUnset(request.OssUrl)) {
		body["OssUrl"] = request.OssUrl
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMcubeWhitelist"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMcubeWhitelistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMcubeWhitelist(request *UpdateMcubeWhitelistRequest) (_result *UpdateMcubeWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMcubeWhitelistResponse{}
	_body, _err := client.UpdateMcubeWhitelistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMpaasAppInfoWithOptions(request *UpdateMpaasAppInfoRequest, runtime *util.RuntimeOptions) (_result *UpdateMpaasAppInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		body["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.IconFileUrl)) {
		body["IconFileUrl"] = request.IconFileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Identifier)) {
		body["Identifier"] = request.Identifier
	}

	if !tea.BoolValue(util.IsUnset(request.OnexFlag)) {
		body["OnexFlag"] = request.OnexFlag
	}

	if !tea.BoolValue(util.IsUnset(request.SystemType)) {
		body["SystemType"] = request.SystemType
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMpaasAppInfo"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMpaasAppInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMpaasAppInfo(request *UpdateMpaasAppInfoRequest) (_result *UpdateMpaasAppInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMpaasAppInfoResponse{}
	_body, _err := client.UpdateMpaasAppInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UploadBitcodeToMsaWithOptions(request *UploadBitcodeToMsaRequest, runtime *util.RuntimeOptions) (_result *UploadBitcodeToMsaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Bitcode)) {
		body["Bitcode"] = request.Bitcode
	}

	if !tea.BoolValue(util.IsUnset(request.CodeVersion)) {
		body["CodeVersion"] = request.CodeVersion
	}

	if !tea.BoolValue(util.IsUnset(request.License)) {
		body["License"] = request.License
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadBitcodeToMsa"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadBitcodeToMsaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UploadBitcodeToMsa(request *UploadBitcodeToMsaRequest) (_result *UploadBitcodeToMsaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadBitcodeToMsaResponse{}
	_body, _err := client.UploadBitcodeToMsaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UploadMcubeMiniPackageWithOptions(request *UploadMcubeMiniPackageRequest, runtime *util.RuntimeOptions) (_result *UploadMcubeMiniPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AutoInstall)) {
		body["AutoInstall"] = request.AutoInstall
	}

	if !tea.BoolValue(util.IsUnset(request.ClientVersionMax)) {
		body["ClientVersionMax"] = request.ClientVersionMax
	}

	if !tea.BoolValue(util.IsUnset(request.ClientVersionMin)) {
		body["ClientVersionMin"] = request.ClientVersionMin
	}

	if !tea.BoolValue(util.IsUnset(request.EnableKeepAlive)) {
		body["EnableKeepAlive"] = request.EnableKeepAlive
	}

	if !tea.BoolValue(util.IsUnset(request.EnableOptionMenu)) {
		body["EnableOptionMenu"] = request.EnableOptionMenu
	}

	if !tea.BoolValue(util.IsUnset(request.EnableTabBar)) {
		body["EnableTabBar"] = request.EnableTabBar
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendInfo)) {
		body["ExtendInfo"] = request.ExtendInfo
	}

	if !tea.BoolValue(util.IsUnset(request.H5Id)) {
		body["H5Id"] = request.H5Id
	}

	if !tea.BoolValue(util.IsUnset(request.H5Name)) {
		body["H5Name"] = request.H5Name
	}

	if !tea.BoolValue(util.IsUnset(request.H5Version)) {
		body["H5Version"] = request.H5Version
	}

	if !tea.BoolValue(util.IsUnset(request.IconFileUrl)) {
		body["IconFileUrl"] = request.IconFileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.IconUrl)) {
		body["IconUrl"] = request.IconUrl
	}

	if !tea.BoolValue(util.IsUnset(request.InstallType)) {
		body["InstallType"] = request.InstallType
	}

	if !tea.BoolValue(util.IsUnset(request.MainUrl)) {
		body["MainUrl"] = request.MainUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OnexFlag)) {
		body["OnexFlag"] = request.OnexFlag
	}

	if !tea.BoolValue(util.IsUnset(request.PackageType)) {
		body["PackageType"] = request.PackageType
	}

	if !tea.BoolValue(util.IsUnset(request.Platform)) {
		body["Platform"] = request.Platform
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceFileUrl)) {
		body["ResourceFileUrl"] = request.ResourceFileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		body["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		body["Uuid"] = request.Uuid
	}

	if !tea.BoolValue(util.IsUnset(request.Vhost)) {
		body["Vhost"] = request.Vhost
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadMcubeMiniPackage"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadMcubeMiniPackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UploadMcubeMiniPackage(request *UploadMcubeMiniPackageRequest) (_result *UploadMcubeMiniPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadMcubeMiniPackageResponse{}
	_body, _err := client.UploadMcubeMiniPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UploadMcubeRsaKeyWithOptions(request *UploadMcubeRsaKeyRequest, runtime *util.RuntimeOptions) (_result *UploadMcubeRsaKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		body["FileUrl"] = request.FileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OnexFlag)) {
		body["OnexFlag"] = request.OnexFlag
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadMcubeRsaKey"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadMcubeRsaKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UploadMcubeRsaKey(request *UploadMcubeRsaKeyRequest) (_result *UploadMcubeRsaKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadMcubeRsaKeyResponse{}
	_body, _err := client.UploadMcubeRsaKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UploadUserAppToMsaWithOptions(request *UploadUserAppToMsaRequest, runtime *util.RuntimeOptions) (_result *UploadUserAppToMsaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		body["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		body["FileUrl"] = request.FileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		body["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadUserAppToMsa"),
		Version:     tea.String("2020-10-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadUserAppToMsaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UploadUserAppToMsa(request *UploadUserAppToMsaRequest) (_result *UploadUserAppToMsaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadUserAppToMsaResponse{}
	_body, _err := client.UploadUserAppToMsaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
